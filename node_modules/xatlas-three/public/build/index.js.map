{"version":3,"file":"index.js","mappings":"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","sources":["webpack://xatlas-three/webpack/bootstrap","webpack://xatlas-three/webpack/runtime/define property getters","webpack://xatlas-three/webpack/runtime/hasOwnProperty shorthand","webpack://xatlas-three/./node_modules/comlink/dist/esm/comlink.mjs","webpack://xatlas-three/./src/XAtlasWebWorker.ts","webpack://xatlas-three/./src/baseXAtlas.ts","webpack://xatlas-three/./src/unwrapperWorker.ts","webpack://xatlas-three/./src/UVUnwrapper.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * Copyright 2019 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nconst proxyMarker = Symbol(\"Comlink.proxy\");\r\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\r\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\r\nconst throwMarker = Symbol(\"Comlink.thrown\");\r\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\r\n/**\r\n * Internal transfer handle to handle objects marked to proxy.\r\n */\r\nconst proxyTransferHandler = {\r\n    canHandle: (val) => isObject(val) && val[proxyMarker],\r\n    serialize(obj) {\r\n        const { port1, port2 } = new MessageChannel();\r\n        expose(obj, port1);\r\n        return [port2, [port2]];\r\n    },\r\n    deserialize(port) {\r\n        port.start();\r\n        return wrap(port);\r\n    },\r\n};\r\n/**\r\n * Internal transfer handler to handle thrown exceptions.\r\n */\r\nconst throwTransferHandler = {\r\n    canHandle: (value) => isObject(value) && throwMarker in value,\r\n    serialize({ value }) {\r\n        let serialized;\r\n        if (value instanceof Error) {\r\n            serialized = {\r\n                isError: true,\r\n                value: {\r\n                    message: value.message,\r\n                    name: value.name,\r\n                    stack: value.stack,\r\n                },\r\n            };\r\n        }\r\n        else {\r\n            serialized = { isError: false, value };\r\n        }\r\n        return [serialized, []];\r\n    },\r\n    deserialize(serialized) {\r\n        if (serialized.isError) {\r\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\r\n        }\r\n        throw serialized.value;\r\n    },\r\n};\r\n/**\r\n * Allows customizing the serialization of certain values.\r\n */\r\nconst transferHandlers = new Map([\r\n    [\"proxy\", proxyTransferHandler],\r\n    [\"throw\", throwTransferHandler],\r\n]);\r\nfunction expose(obj, ep = self) {\r\n    ep.addEventListener(\"message\", function callback(ev) {\r\n        if (!ev || !ev.data) {\r\n            return;\r\n        }\r\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\r\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\r\n        let returnValue;\r\n        try {\r\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\r\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\r\n            switch (type) {\r\n                case \"GET\" /* GET */:\r\n                    {\r\n                        returnValue = rawValue;\r\n                    }\r\n                    break;\r\n                case \"SET\" /* SET */:\r\n                    {\r\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\r\n                        returnValue = true;\r\n                    }\r\n                    break;\r\n                case \"APPLY\" /* APPLY */:\r\n                    {\r\n                        returnValue = rawValue.apply(parent, argumentList);\r\n                    }\r\n                    break;\r\n                case \"CONSTRUCT\" /* CONSTRUCT */:\r\n                    {\r\n                        const value = new rawValue(...argumentList);\r\n                        returnValue = proxy(value);\r\n                    }\r\n                    break;\r\n                case \"ENDPOINT\" /* ENDPOINT */:\r\n                    {\r\n                        const { port1, port2 } = new MessageChannel();\r\n                        expose(obj, port2);\r\n                        returnValue = transfer(port1, [port1]);\r\n                    }\r\n                    break;\r\n                case \"RELEASE\" /* RELEASE */:\r\n                    {\r\n                        returnValue = undefined;\r\n                    }\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n        }\r\n        catch (value) {\r\n            returnValue = { value, [throwMarker]: 0 };\r\n        }\r\n        Promise.resolve(returnValue)\r\n            .catch((value) => {\r\n            return { value, [throwMarker]: 0 };\r\n        })\r\n            .then((returnValue) => {\r\n            const [wireValue, transferables] = toWireValue(returnValue);\r\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\r\n            if (type === \"RELEASE\" /* RELEASE */) {\r\n                // detach and deactive after sending release response above.\r\n                ep.removeEventListener(\"message\", callback);\r\n                closeEndPoint(ep);\r\n            }\r\n        });\r\n    });\r\n    if (ep.start) {\r\n        ep.start();\r\n    }\r\n}\r\nfunction isMessagePort(endpoint) {\r\n    return endpoint.constructor.name === \"MessagePort\";\r\n}\r\nfunction closeEndPoint(endpoint) {\r\n    if (isMessagePort(endpoint))\r\n        endpoint.close();\r\n}\r\nfunction wrap(ep, target) {\r\n    return createProxy(ep, [], target);\r\n}\r\nfunction throwIfProxyReleased(isReleased) {\r\n    if (isReleased) {\r\n        throw new Error(\"Proxy has been released and is not useable\");\r\n    }\r\n}\r\nfunction createProxy(ep, path = [], target = function () { }) {\r\n    let isProxyReleased = false;\r\n    const proxy = new Proxy(target, {\r\n        get(_target, prop) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            if (prop === releaseProxy) {\r\n                return () => {\r\n                    return requestResponseMessage(ep, {\r\n                        type: \"RELEASE\" /* RELEASE */,\r\n                        path: path.map((p) => p.toString()),\r\n                    }).then(() => {\r\n                        closeEndPoint(ep);\r\n                        isProxyReleased = true;\r\n                    });\r\n                };\r\n            }\r\n            if (prop === \"then\") {\r\n                if (path.length === 0) {\r\n                    return { then: () => proxy };\r\n                }\r\n                const r = requestResponseMessage(ep, {\r\n                    type: \"GET\" /* GET */,\r\n                    path: path.map((p) => p.toString()),\r\n                }).then(fromWireValue);\r\n                return r.then.bind(r);\r\n            }\r\n            return createProxy(ep, [...path, prop]);\r\n        },\r\n        set(_target, prop, rawValue) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\r\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\r\n            const [value, transferables] = toWireValue(rawValue);\r\n            return requestResponseMessage(ep, {\r\n                type: \"SET\" /* SET */,\r\n                path: [...path, prop].map((p) => p.toString()),\r\n                value,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        apply(_target, _thisArg, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const last = path[path.length - 1];\r\n            if (last === createEndpoint) {\r\n                return requestResponseMessage(ep, {\r\n                    type: \"ENDPOINT\" /* ENDPOINT */,\r\n                }).then(fromWireValue);\r\n            }\r\n            // We just pretend that `bind()` didn’t happen.\r\n            if (last === \"bind\") {\r\n                return createProxy(ep, path.slice(0, -1));\r\n            }\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"APPLY\" /* APPLY */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n        construct(_target, rawArgumentList) {\r\n            throwIfProxyReleased(isProxyReleased);\r\n            const [argumentList, transferables] = processArguments(rawArgumentList);\r\n            return requestResponseMessage(ep, {\r\n                type: \"CONSTRUCT\" /* CONSTRUCT */,\r\n                path: path.map((p) => p.toString()),\r\n                argumentList,\r\n            }, transferables).then(fromWireValue);\r\n        },\r\n    });\r\n    return proxy;\r\n}\r\nfunction myFlat(arr) {\r\n    return Array.prototype.concat.apply([], arr);\r\n}\r\nfunction processArguments(argumentList) {\r\n    const processed = argumentList.map(toWireValue);\r\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\r\n}\r\nconst transferCache = new WeakMap();\r\nfunction transfer(obj, transfers) {\r\n    transferCache.set(obj, transfers);\r\n    return obj;\r\n}\r\nfunction proxy(obj) {\r\n    return Object.assign(obj, { [proxyMarker]: true });\r\n}\r\nfunction windowEndpoint(w, context = self, targetOrigin = \"*\") {\r\n    return {\r\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\r\n        addEventListener: context.addEventListener.bind(context),\r\n        removeEventListener: context.removeEventListener.bind(context),\r\n    };\r\n}\r\nfunction toWireValue(value) {\r\n    for (const [name, handler] of transferHandlers) {\r\n        if (handler.canHandle(value)) {\r\n            const [serializedValue, transferables] = handler.serialize(value);\r\n            return [\r\n                {\r\n                    type: \"HANDLER\" /* HANDLER */,\r\n                    name,\r\n                    value: serializedValue,\r\n                },\r\n                transferables,\r\n            ];\r\n        }\r\n    }\r\n    return [\r\n        {\r\n            type: \"RAW\" /* RAW */,\r\n            value,\r\n        },\r\n        transferCache.get(value) || [],\r\n    ];\r\n}\r\nfunction fromWireValue(value) {\r\n    switch (value.type) {\r\n        case \"HANDLER\" /* HANDLER */:\r\n            return transferHandlers.get(value.name).deserialize(value.value);\r\n        case \"RAW\" /* RAW */:\r\n            return value.value;\r\n    }\r\n}\r\nfunction requestResponseMessage(ep, msg, transfers) {\r\n    return new Promise((resolve) => {\r\n        const id = generateUUID();\r\n        ep.addEventListener(\"message\", function l(ev) {\r\n            if (!ev.data || !ev.data.id || ev.data.id !== id) {\r\n                return;\r\n            }\r\n            ep.removeEventListener(\"message\", l);\r\n            resolve(ev.data);\r\n        });\r\n        if (ep.start) {\r\n            ep.start();\r\n        }\r\n        ep.postMessage(Object.assign({ id }, msg), transfers);\r\n    });\r\n}\r\nfunction generateUUID() {\r\n    return new Array(4)\r\n        .fill(0)\r\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\r\n        .join(\"-\");\r\n}\n\nexport { createEndpoint, expose, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import {BaseXAtlas} from \"./baseXAtlas\";\nimport {proxy, wrap} from \"comlink\";\n\nexport class XAtlasWebWorker extends BaseXAtlas {\n\n    init(onLoad: () => void, onProgress: (mode: any, progress: any) => void, wasmFilePath: string, workerFilePath?: string): void {\n        if (this.api) return\n        if(!workerFilePath) throw new Error(\"workerFilePath is required\");\n        (async () => {\n            const workerCode = await fetch(workerFilePath).then(res => res.blob());\n            const workerUrl = URL.createObjectURL(workerCode);\n            const t = new Worker(workerUrl, {type: 'module', });\n            // @ts-ignore\n            this.api = await (new (wrap(t))(\n                    proxy(()=>{\n                        onLoad();\n                        URL.revokeObjectURL(workerUrl);\n                    }),\n                    proxy((path: string, dir: string) => {\n                        return (path === \"xatlas_web.wasm\" ? wasmFilePath : path + dir)\n                    }),\n                    proxy(onProgress))\n            )\n        })()\n    }\n\n}\n","export abstract class BaseXAtlas {\n    api: any\n\n    abstract init(onLoad: () => void, onProgress: (mode: any, progress: any) => void, wasmFilePath: string, workerFilePath?: string): void\n}\n","import {BaseUVUnwrapper} from \"./UVUnwrapper\";\nimport {XAtlasWebWorker} from \"./XAtlasWebWorker\";\n\nexport class UVUnwrapper extends BaseUVUnwrapper{\n    protected _createXAtlas(): any {\n        return new XAtlasWebWorker()\n    }\n}\n","import type {BufferGeometry, Mesh, BufferAttribute} from \"three\";\nimport type {XAtlasWebWorker} from \"./XAtlasWebWorker\";\nimport type {XAtlasJS} from \"./XAtlasJS\";\n\nexport type Class<T> = new (...args: any[]) => T\n\nexport interface ChartOptions{\n    maxIterations?: number,\n    straightnessWeight?: number,\n    textureSeamWeight?: number,\n    useInputMeshUvs?: boolean,\n    maxChartArea?: number,\n    normalDeviationWeight?: number,\n    maxCost?: number,\n    roundnessWeight?: number,\n    maxBoundaryLength?: number,\n    normalSeamWeight?: number,\n    fixWinding?: boolean\n}\nexport interface PackOptions{\n    maxChartSize?: number,\n    padding?: number,\n    bilinear?: boolean,\n    createImage?: boolean,\n    rotateCharts?: boolean,\n    rotateChartsToAxis?: boolean,\n    blockAlign?: boolean,\n    resolution?: number,\n    bruteForce?: boolean,\n    texelsPerUnit?: number\n}\n\nexport abstract class BaseUVUnwrapper{\n    private xAtlas: XAtlasWebWorker | XAtlasJS;\n\n    /**\n     *\n     * @param THREE - for reference to BufferAttribute\n     * @param packOptions - options for packing\n     * @param chartOptions - options for unwrapping\n     * @param useNormals - If true, will use the normals to calculate the uv\n     * @param timeUnwrap - Logs the time taken to unwrap geometries\n     * @param logProgress - Logs the unwrapping progress\n     */\n    constructor(\n        public THREE: { BufferAttribute: Class<BufferAttribute> },\n        public packOptions: PackOptions = {\n            resolution: 2048,\n        },\n        public chartOptions: ChartOptions = {},\n        public useNormals: boolean = false,\n        public timeUnwrap: boolean = false,\n        public logProgress: boolean = false,\n    ) {\n        this.xAtlas = this._createXAtlas()\n    }\n    private _libraryLoaded = false;\n    async loadLibrary(onProgress: (mode: any, progress: any)=>void, wasmFilePath: string, workerFilePath?: string): Promise<void>{\n        if(this._libraryLoaded) return\n        await new Promise<void>((resolve, reject) => {\n            try {\n                this.xAtlas.init(\n                    () => {\n                        resolve()\n                    }, onProgress, wasmFilePath, workerFilePath,\n                )\n            } catch (e) {\n                reject(e)\n            }\n        })\n        while (!(this.xAtlas.api ? await this.xAtlas.api.loaded : false)){\n            await new Promise(r => setTimeout(r, 100)); // wait for load just in case\n        }\n        this._libraryLoaded = true;\n    }\n\n    private _isUnwrapping = false;\n\n    /**\n     * Pack multiple geometry into a single atlas\n     * @param nodeList - list of geometries to unwrap\n     * @param outputUv - Attribute to write the output uv to\n     * @param inputUv - Attribute to write the input uv to (if any)\n     */\n    public async packAtlas(nodeList: BufferGeometry[], outputUv: 'uv'|'uv2' = 'uv2', inputUv: 'uv'|'uv2' = 'uv'): Promise<BufferGeometry[]>{\n        if(!this._libraryLoaded) {\n            console.warn('xatlas-three: library not loaded')\n            return [];\n        }\n        if (!nodeList) return [];\n        if(nodeList.length < 1) return [];\n        const useUvs = this.chartOptions.useInputMeshUvs;\n\n        while (this._isUnwrapping){\n            console.log(\"xatlas-three: unwrapping another mesh, waiting 100 ms\");\n            await new Promise(r => setTimeout(r, 100));\n        }\n        // if(!(xAtlas.loaded)) { // when not using worker. todo\n        // xAtlas.addOnLoad(proxy(()=>xAtlasUnWrapLiteGLMeshes(nodeList, onFinish, chartOptions, packOptions, useNormals, useUvs, resultAttribute, originalAttribute)));\n        // return;\n        // }\n        this._isUnwrapping = true;\n\n        await this.xAtlas.api.setProgressLogging(this.logProgress);\n        await this.xAtlas.api.createAtlas();\n        let meshAdded = [];\n        let tag = \"\"; // for time logging\n        for(let mesh of nodeList){\n            let {uuid, index, attributes} = mesh;\n            const scaled = mesh.userData.worldScale || 1; // can be [number, number, number] or number\n\n            // if (unwrap === false) continue;\n\n            meshAdded.push(uuid);\n            if(!index || !attributes.position || attributes.position!.itemSize !== 3){\n                console.warn(\"xatlas-three: Geometry not supported: \", mesh)\n                continue;\n            }\n            tag = \"Mesh\" + meshAdded.length + \" added to atlas: \" + uuid;\n            // console.log(typeof index.array)\n            if(this.timeUnwrap) console.time(tag);\n            await this.xAtlas.api.addMesh(index.array, (attributes.position as BufferAttribute).array, attributes.normal ? (attributes.normal as BufferAttribute).array: undefined, attributes.uv ? (attributes.uv as BufferAttribute).array : undefined, uuid, this.useNormals, useUvs, scaled);\n            if(this.timeUnwrap) console.timeEnd(tag);\n        }\n        tag = \"Generated atlas with \" + meshAdded.length + \" meshes\";\n        if(this.timeUnwrap) console.time(tag);\n        let meshes = await this.xAtlas.api.generateAtlas(this.chartOptions, this.packOptions, true);\n        if(this.timeUnwrap) console.timeEnd(tag);\n        let ret = [];\n        for(let m of meshes){\n            /**\n             * @type {Mesh}\n             */\n            let mesh = nodeList.find(n => n.uuid === m.mesh)\n            if(!mesh) {\n                console.error(\"xatlas-three: Mesh not found: \", m.mesh)\n                continue;\n            }\n            // if(mesh.getAttribute(\"position\"))\n            //     mesh.deleteAttribute(\"position\");\n            // if(mesh.getAttribute(\"normal\") && m.vertex.normal)\n            //     mesh.deleteAttribute(\"normal\");\n            // if(mesh.getAttribute(\"uv\") && m.vertex.uv)\n            //     mesh.deleteAttribute(\"uv\");\n            // if(mesh.getAttribute(\"uv2\"))\n            //     mesh.deleteAttribute(\"uv2\");\n            // if(mesh.getIndex())\n            //     mesh.setIndex(null);\n\n            if(m.vertex.vertices) mesh.setAttribute('position', new this.THREE.BufferAttribute(m.vertex.vertices, 3, false));\n            if(m.vertex.normals) mesh.setAttribute('normal', new this.THREE.BufferAttribute(m.vertex.normals, 3, true));\n            if(m.vertex.coords1) mesh.setAttribute(outputUv, new this.THREE.BufferAttribute(m.vertex.coords1, 2, false));\n            if(m.vertex.coords&&outputUv!==inputUv) mesh.setAttribute(inputUv, new this.THREE.BufferAttribute(m.vertex.coords, 2, false));\n            if(m.index) mesh.setIndex(new this.THREE.BufferAttribute(m.index, 1, false));\n\n            ret.push(mesh);\n        }\n\n        await this.xAtlas.api.destroyAtlas();\n        this._isUnwrapping = false;\n\n        return ret;\n    }\n\n    /**\n     * Unwraps a geometry to generate uv\n     * @param geometry\n     * @param outputUv\n     * @param inputUv\n     */\n    public async unwrapGeometry(geometry: BufferGeometry, outputUv: 'uv'|'uv2' = 'uv', inputUv: 'uv'|'uv2' = 'uv2'){\n        return this.packAtlas([geometry], outputUv, inputUv);\n    }\n\n    protected abstract _createXAtlas(): any;\n\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","proxyMarker","Symbol","createEndpoint","releaseProxy","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","value","serialized","Error","isError","message","name","stack","assign","ep","self","addEventListener","callback","ev","data","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","endpoint","constructor","isMessagePort","close","target","createProxy","throwIfProxyReleased","isReleased","isProxyReleased","Proxy","_target","requestResponseMessage","p","toString","length","r","bind","_thisArg","rawArgumentList","last","processArguments","construct","processed","v","arr","Array","concat","WeakMap","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","l","XAtlasWebWorker","init","onLoad","onProgress","wasmFilePath","workerFilePath","this","api","workerCode","fetch","res","blob","workerUrl","URL","createObjectURL","t","Worker","revokeObjectURL","dir","UVUnwrapper","THREE","packOptions","resolution","chartOptions","useNormals","timeUnwrap","logProgress","_libraryLoaded","_isUnwrapping","xAtlas","_createXAtlas","loadLibrary","reject","e","loaded","setTimeout","packAtlas","nodeList","outputUv","inputUv","console","warn","useUvs","useInputMeshUvs","log","setProgressLogging","createAtlas","meshAdded","tag","mesh","uuid","index","attributes","scaled","userData","worldScale","push","position","itemSize","time","addMesh","array","normal","uv","timeEnd","meshes","generateAtlas","ret","m","find","n","vertex","vertices","setAttribute","BufferAttribute","normals","coords1","coords","setIndex","error","destroyAtlas","unwrapGeometry","geometry"],"sourceRoot":""}