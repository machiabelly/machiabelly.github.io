import React, { Component } from 'react';
import { PolyScene } from '@polygonjs/polygonjs/dist/src/engine/scene/PolyScene';
import { BaseViewerType } from '@polygonjs/polygonjs/dist/src/engine/viewers/_Base';
import { SceneJsonExporterData } from '@polygonjs/polygonjs/dist/src/engine/io/json/export/Scene';

declare type ConfigureSceneData = (sceneData: SceneJsonExporterData) => void;
interface LoadSceneOptions {
    onProgress: (progress: number) => void;
    domElement: HTMLElement;
    printWarnings: boolean;
    cameraMaskOverride?: string;
    autoPlay: boolean;
    configureSceneData?: ConfigureSceneData;
    sceneDataRoot?: string;
    assetsRoot?: string;
    libsRootPrefix?: string;
}
interface LoadedData {
    scene: PolyScene;
    viewer: BaseViewerType | undefined;
}
declare type LoadScene = (options: LoadSceneOptions) => Promise<LoadedData>;
interface PolygonjsSceneProps<S extends PolyScene> {
    loadFunction: LoadScene;
    sceneName: string;
    displayLoadingProgressBar: boolean;
    displayLoadingPoster: boolean;
    posterUrl?: string;
    posterExtension?: string;
    printWarnings: boolean;
    cameraMaskOverride?: string;
    autoPlay: boolean;
    configureSceneData?: ConfigureSceneData;
    onProgress?: (progress: number) => void;
    onSceneReady?: (scene: S) => void;
    onViewerReady?: (scene: BaseViewerType) => void;
    render: boolean;
    loadScene: boolean;
    baseUrl: string;
}
interface PolygonjsSceneState {
    progress: number;
}
declare class PolygonjsScene<S extends PolyScene> extends Component<PolygonjsSceneProps<S>, PolygonjsSceneState> {
    static defaultProps: {
        printWarnings: boolean;
        displayLoadingProgressBar: boolean;
        displayLoadingPoster: boolean;
        posterExtension: string;
        render: boolean;
        loadScene: boolean;
        autoPlay: boolean;
        baseUrl: string;
    };
    containerRef: React.RefObject<HTMLDivElement>;
    private _mounted;
    private _scene;
    private _viewer;
    private _polygonjsContainer;
    constructor(props: PolygonjsSceneProps<S>);
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(prevProps: PolygonjsSceneProps<S>): void;
    disposeScene(): void;
    loadScene(container: HTMLDivElement): Promise<void>;
    private _updateViewerAutoRender;
    onProgress(progress: number): void;
    progressBarClassObject(): string[];
    progressBarBarStyleObject(): {
        width: string;
    };
    private _createBackgroundImage;
    posterClassObject(): string[];
    render(): JSX.Element;
}

export { PolygonjsScene };
