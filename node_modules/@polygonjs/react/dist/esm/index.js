import React, { Component } from 'react';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = ".polygonjs-scene-container {\n\tposition: relative;\n}\n.polygonjs-scene-container,\n.polygonjs-scene {\n\theight: 100%;\n}\n.polygonjs-scene canvas {\n\tdisplay: block;\n}\n/*\nposter\n*/\n.polygonjs-scene-container-poster {\n\tposition: absolute;\n\ttop: 0px;\n\tleft: 0px;\n\twidth: 100%;\n\theight: 100%;\n\tpointer-events: none;\n\t-webkit-background-size: cover;\n\t-moz-background-size: cover;\n\t-o-background-size: cover;\n\tbackground-size: cover;\n\tbackground-repeat: no-repeat;\n\tbackground-position: center center;\n}\n/*\n  progress bar\n  */\n.progress-bar {\n\tposition: absolute;\n\ttop: 0px;\n\tleft: 0px;\n\twidth: 100%;\n\theight: 4px;\n\tpointer-events: none;\n}\n.progress-bar-bar {\n\theight: 100%;\n\tbackground-color: orange;\n\tanimation-name: progress-bar-color;\n\tanimation-duration: 4s;\n\tanimation-iteration-count: infinite;\n}\n.fadeable {\n\topacity: 1;\n\ttransition: opacity 0.5s ease-in-out;\n}\n.visible {\n\topacity: 1;\n}\n.hidden {\n\topacity: 0;\n}\n@keyframes progress-bar-color {\n\t0% {\n\t\tbackground-color: rgb(115, 214, 115);\n\t}\n\t50% {\n\t\tbackground-color: rgb(60, 60, 211);\n\t}\n\t100% {\n\t\tbackground-color: rgb(115, 214, 115);\n\t}\n}\n";
styleInject(css_248z);

function sanitizeUrl(url) {
  return url.replace(/([^:])\/\//g, "$1/");
}

var PolygonjsScene = /** @class */ (function (_super) {
    __extends(PolygonjsScene, _super);
    function PolygonjsScene(props) {
        var _this = _super.call(this, props) || this;
        _this.containerRef = React.createRef();
        _this._mounted = false;
        _this._polygonjsContainer = (React.createElement("div", { className: "polygonjs-scene", ref: _this.containerRef }));
        _this.state = {
            progress: 0,
        };
        return _this;
    }
    PolygonjsScene.prototype.componentDidMount = function () {
        if (this._mounted) {
            return;
        }
        this._mounted = true;
        var element = this.containerRef.current;
        if (element) {
            this.loadScene(element);
        }
    };
    PolygonjsScene.prototype.componentWillUnmount = function () {
        this.disposeScene();
    };
    PolygonjsScene.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.render !== this.props.render) {
            this._updateViewerAutoRender();
        }
    };
    PolygonjsScene.prototype.disposeScene = function () {
        if (this._scene) {
            this._scene.dispose();
        }
        if (this._viewer) {
            this._viewer.dispose();
        }
    };
    PolygonjsScene.prototype.loadScene = function (container) {
        return __awaiter(this, void 0, void 0, function () {
            var loadFunction, loadedData;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.props.loadScene) {
                            return [2 /*return*/];
                        }
                        loadFunction = this.props.loadFunction;
                        return [4 /*yield*/, loadFunction({
                                onProgress: function (progress) { return _this.onProgress(progress); },
                                domElement: container,
                                printWarnings: this.props.printWarnings,
                                cameraMaskOverride: this.props.cameraMaskOverride,
                                autoPlay: this.props.autoPlay,
                                configureSceneData: this.props.configureSceneData,
                                sceneDataRoot: "".concat(this.props.baseUrl, "/polygonjs/scenes"),
                                assetsRoot: this.props.baseUrl,
                                libsRootPrefix: this.props.baseUrl,
                            })];
                    case 1:
                        loadedData = _a.sent();
                        this._scene = loadedData.scene;
                        this._viewer = loadedData.viewer;
                        if (this.props.onSceneReady) {
                            this.props.onSceneReady(this._scene);
                        }
                        if (this.props.onViewerReady && this._viewer) {
                            this.props.onViewerReady(this._viewer);
                            this._updateViewerAutoRender();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    PolygonjsScene.prototype._updateViewerAutoRender = function () {
        if (!this._viewer) {
            return;
        }
        this._viewer.setAutoRender(this.props.render);
    };
    PolygonjsScene.prototype.onProgress = function (progress) {
        if (this.props.onProgress) {
            this.props.onProgress(progress);
        }
        this.setState({ progress: progress });
    };
    // loadingCompleted() {
    // 	return this.state.progress < 1;
    // }
    /*
     *
     * PROGRESS BAR
     *
     */
    PolygonjsScene.prototype.progressBarClassObject = function () {
        var visible = this.state.progress > 0 && this.state.progress < 1;
        var classNames = ['fadeable'];
        if (visible) {
            classNames.push('visible');
        }
        if (!visible) {
            classNames.push('hidden');
        }
        return classNames;
    };
    PolygonjsScene.prototype.progressBarBarStyleObject = function () {
        var percent = Math.round(this.state.progress * 100);
        return {
            width: "".concat(percent, "%"),
        };
    };
    /*
     *
     * POSTER
     *
     */
    PolygonjsScene.prototype._createBackgroundImage = function () {
        var posterUrl = sanitizeUrl(this.props.posterUrl ||
            "/polygonjs/screenshots/scenes/".concat(this.props.sceneName, "/poster.").concat(this.props.posterExtension));
        var style = {
            backgroundImage: "url('".concat(posterUrl, "')"),
        };
        var poster = (React.createElement("div", { className: ['polygonjs-scene-container-poster'].concat(this.posterClassObject()).join(' '), style: style }));
        return this.props.displayLoadingPoster ? poster : null;
    };
    PolygonjsScene.prototype.posterClassObject = function () {
        var visible = this.state.progress < 1;
        var classNames = ['fadeable'];
        if (visible) {
            classNames.push('visible');
        }
        if (!visible) {
            classNames.push('hidden');
        }
        return classNames;
    };
    /*
     *
     * RENDER
     *
     */
    PolygonjsScene.prototype.render = function () {
        var progressBar = (React.createElement("div", { className: ['progress-bar'].concat(this.progressBarClassObject()).join(' ') },
            React.createElement("div", { className: "progress-bar-bar", style: this.progressBarBarStyleObject() })));
        var progressBarIfRequired = this.props.displayLoadingProgressBar ? progressBar : null;
        return (React.createElement("div", { className: "polygonjs-scene-container" },
            this._createBackgroundImage(),
            progressBarIfRequired,
            this._polygonjsContainer));
    };
    PolygonjsScene.defaultProps = {
        printWarnings: false,
        displayLoadingProgressBar: true,
        displayLoadingPoster: true,
        posterExtension: 'png',
        render: true,
        loadScene: true,
        autoPlay: true,
        baseUrl: '',
    };
    return PolygonjsScene;
}(Component));

export { PolygonjsScene };
//# sourceMappingURL=index.js.map
