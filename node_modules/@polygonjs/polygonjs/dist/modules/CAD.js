(self["webpackChunk_polygonjs_polygonjs"] = self["webpackChunk_polygonjs_polygonjs"] || []).push([[495],{

/***/ 79242:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const cssColors = __webpack_require__(32575)

/**
 * Converts a CSS color name to RGB color.
 *
 * @param {String} s - the CSS color name
 * @return {Array} the RGB color, or undefined if not found
 * @alias module:modeling/colors.colorNameToRgb
 * @example
 * let mysphere = colorize(colorNameToRgb('lightblue'), sphere())
 */
const colorNameToRgb = (s) => cssColors[s.toLowerCase()]

module.exports = colorNameToRgb


/***/ }),

/***/ 78039:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)
const poly3 = __webpack_require__(71516)

const colorGeom2 = (color, object) => {
  const newgeom2 = geom2.clone(object)
  newgeom2.color = color
  return newgeom2
}

const colorGeom3 = (color, object) => {
  const newgeom3 = geom3.clone(object)
  newgeom3.color = color
  return newgeom3
}

const colorPath2 = (color, object) => {
  const newpath2 = path2.clone(object)
  newpath2.color = color
  return newpath2
}

const colorPoly3 = (color, object) => {
  const newpoly = poly3.clone(object)
  newpoly.color = color
  return newpoly
}

/**
 * Assign the given color to the given objects.
 * @param {Array} color - RGBA color values, where each value is between 0 and 1.0
 * @param {Object|Array} objects - the objects of which to apply the given color
 * @return {Object|Array} new object, or list of new objects with an additional attribute 'color'
 * @alias module:modeling/colors.colorize
 *
 * @example
 * let redSphere = colorize([1,0,0], sphere()) // red
 * let greenCircle = colorize([0,1,0,0.8], circle()) // green transparent
 * let blueArc = colorize([0,0,1], arc()) // blue
 * let wildcylinder = colorize(colorNameToRgb('fuchsia'), cylinder()) // CSS color
 */
const colorize = (color, ...objects) => {
  if (!Array.isArray(color)) throw new Error('color must be an array')
  if (color.length < 3) throw new Error('color must contain R, G and B values')
  if (color.length === 3) color = [color[0], color[1], color[2], 1.0] // add alpha

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  const results = objects.map((object) => {
    if (geom2.isA(object)) return colorGeom2(color, object)
    if (geom3.isA(object)) return colorGeom3(color, object)
    if (path2.isA(object)) return colorPath2(color, object)
    if (poly3.isA(object)) return colorPoly3(color, object)

    object.color = color
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = colorize


/***/ }),

/***/ 32575:
/***/ ((module) => {

/**
 * @alias module:modeling/colors.cssColors
 * @see CSS color table from http://www.w3.org/TR/css3-color/
 * @enum {Array}
 * @example
 * let newshape = colorize(cssColors.red, oldshape)
 */
const cssColors = {
  // basic color keywords
  black: [0 / 255, 0 / 255, 0 / 255],
  silver: [192 / 255, 192 / 255, 192 / 255],
  gray: [128 / 255, 128 / 255, 128 / 255],
  white: [255 / 255, 255 / 255, 255 / 255],
  maroon: [128 / 255, 0 / 255, 0 / 255],
  red: [255 / 255, 0 / 255, 0 / 255],
  purple: [128 / 255, 0 / 255, 128 / 255],
  fuchsia: [255 / 255, 0 / 255, 255 / 255],
  green: [0 / 255, 128 / 255, 0 / 255],
  lime: [0 / 255, 255 / 255, 0 / 255],
  olive: [128 / 255, 128 / 255, 0 / 255],
  yellow: [255 / 255, 255 / 255, 0 / 255],
  navy: [0 / 255, 0 / 255, 128 / 255],
  blue: [0 / 255, 0 / 255, 255 / 255],
  teal: [0 / 255, 128 / 255, 128 / 255],
  aqua: [0 / 255, 255 / 255, 255 / 255],
  // extended color keywords
  aliceblue: [240 / 255, 248 / 255, 255 / 255],
  antiquewhite: [250 / 255, 235 / 255, 215 / 255],
  // 'aqua': [ 0 / 255, 255 / 255, 255 / 255 ],
  aquamarine: [127 / 255, 255 / 255, 212 / 255],
  azure: [240 / 255, 255 / 255, 255 / 255],
  beige: [245 / 255, 245 / 255, 220 / 255],
  bisque: [255 / 255, 228 / 255, 196 / 255],
  // 'black': [ 0 / 255, 0 / 255, 0 / 255 ],
  blanchedalmond: [255 / 255, 235 / 255, 205 / 255],
  // 'blue': [ 0 / 255, 0 / 255, 255 / 255 ],
  blueviolet: [138 / 255, 43 / 255, 226 / 255],
  brown: [165 / 255, 42 / 255, 42 / 255],
  burlywood: [222 / 255, 184 / 255, 135 / 255],
  cadetblue: [95 / 255, 158 / 255, 160 / 255],
  chartreuse: [127 / 255, 255 / 255, 0 / 255],
  chocolate: [210 / 255, 105 / 255, 30 / 255],
  coral: [255 / 255, 127 / 255, 80 / 255],
  cornflowerblue: [100 / 255, 149 / 255, 237 / 255],
  cornsilk: [255 / 255, 248 / 255, 220 / 255],
  crimson: [220 / 255, 20 / 255, 60 / 255],
  cyan: [0 / 255, 255 / 255, 255 / 255],
  darkblue: [0 / 255, 0 / 255, 139 / 255],
  darkcyan: [0 / 255, 139 / 255, 139 / 255],
  darkgoldenrod: [184 / 255, 134 / 255, 11 / 255],
  darkgray: [169 / 255, 169 / 255, 169 / 255],
  darkgreen: [0 / 255, 100 / 255, 0 / 255],
  darkgrey: [169 / 255, 169 / 255, 169 / 255],
  darkkhaki: [189 / 255, 183 / 255, 107 / 255],
  darkmagenta: [139 / 255, 0 / 255, 139 / 255],
  darkolivegreen: [85 / 255, 107 / 255, 47 / 255],
  darkorange: [255 / 255, 140 / 255, 0 / 255],
  darkorchid: [153 / 255, 50 / 255, 204 / 255],
  darkred: [139 / 255, 0 / 255, 0 / 255],
  darksalmon: [233 / 255, 150 / 255, 122 / 255],
  darkseagreen: [143 / 255, 188 / 255, 143 / 255],
  darkslateblue: [72 / 255, 61 / 255, 139 / 255],
  darkslategray: [47 / 255, 79 / 255, 79 / 255],
  darkslategrey: [47 / 255, 79 / 255, 79 / 255],
  darkturquoise: [0 / 255, 206 / 255, 209 / 255],
  darkviolet: [148 / 255, 0 / 255, 211 / 255],
  deeppink: [255 / 255, 20 / 255, 147 / 255],
  deepskyblue: [0 / 255, 191 / 255, 255 / 255],
  dimgray: [105 / 255, 105 / 255, 105 / 255],
  dimgrey: [105 / 255, 105 / 255, 105 / 255],
  dodgerblue: [30 / 255, 144 / 255, 255 / 255],
  firebrick: [178 / 255, 34 / 255, 34 / 255],
  floralwhite: [255 / 255, 250 / 255, 240 / 255],
  forestgreen: [34 / 255, 139 / 255, 34 / 255],
  // 'fuchsia': [ 255 / 255, 0 / 255, 255 / 255 ],
  gainsboro: [220 / 255, 220 / 255, 220 / 255],
  ghostwhite: [248 / 255, 248 / 255, 255 / 255],
  gold: [255 / 255, 215 / 255, 0 / 255],
  goldenrod: [218 / 255, 165 / 255, 32 / 255],
  // 'gray': [ 128 / 255, 128 / 255, 128 / 255 ],
  // 'green': [ 0 / 255, 128 / 255, 0 / 255 ],
  greenyellow: [173 / 255, 255 / 255, 47 / 255],
  grey: [128 / 255, 128 / 255, 128 / 255],
  honeydew: [240 / 255, 255 / 255, 240 / 255],
  hotpink: [255 / 255, 105 / 255, 180 / 255],
  indianred: [205 / 255, 92 / 255, 92 / 255],
  indigo: [75 / 255, 0 / 255, 130 / 255],
  ivory: [255 / 255, 255 / 255, 240 / 255],
  khaki: [240 / 255, 230 / 255, 140 / 255],
  lavender: [230 / 255, 230 / 255, 250 / 255],
  lavenderblush: [255 / 255, 240 / 255, 245 / 255],
  lawngreen: [124 / 255, 252 / 255, 0 / 255],
  lemonchiffon: [255 / 255, 250 / 255, 205 / 255],
  lightblue: [173 / 255, 216 / 255, 230 / 255],
  lightcoral: [240 / 255, 128 / 255, 128 / 255],
  lightcyan: [224 / 255, 255 / 255, 255 / 255],
  lightgoldenrodyellow: [250 / 255, 250 / 255, 210 / 255],
  lightgray: [211 / 255, 211 / 255, 211 / 255],
  lightgreen: [144 / 255, 238 / 255, 144 / 255],
  lightgrey: [211 / 255, 211 / 255, 211 / 255],
  lightpink: [255 / 255, 182 / 255, 193 / 255],
  lightsalmon: [255 / 255, 160 / 255, 122 / 255],
  lightseagreen: [32 / 255, 178 / 255, 170 / 255],
  lightskyblue: [135 / 255, 206 / 255, 250 / 255],
  lightslategray: [119 / 255, 136 / 255, 153 / 255],
  lightslategrey: [119 / 255, 136 / 255, 153 / 255],
  lightsteelblue: [176 / 255, 196 / 255, 222 / 255],
  lightyellow: [255 / 255, 255 / 255, 224 / 255],
  // 'lime': [ 0 / 255, 255 / 255, 0 / 255 ],
  limegreen: [50 / 255, 205 / 255, 50 / 255],
  linen: [250 / 255, 240 / 255, 230 / 255],
  magenta: [255 / 255, 0 / 255, 255 / 255],
  // 'maroon': [ 128 / 255, 0 / 255, 0 / 255 ],
  mediumaquamarine: [102 / 255, 205 / 255, 170 / 255],
  mediumblue: [0 / 255, 0 / 255, 205 / 255],
  mediumorchid: [186 / 255, 85 / 255, 211 / 255],
  mediumpurple: [147 / 255, 112 / 255, 219 / 255],
  mediumseagreen: [60 / 255, 179 / 255, 113 / 255],
  mediumslateblue: [123 / 255, 104 / 255, 238 / 255],
  mediumspringgreen: [0 / 255, 250 / 255, 154 / 255],
  mediumturquoise: [72 / 255, 209 / 255, 204 / 255],
  mediumvioletred: [199 / 255, 21 / 255, 133 / 255],
  midnightblue: [25 / 255, 25 / 255, 112 / 255],
  mintcream: [245 / 255, 255 / 255, 250 / 255],
  mistyrose: [255 / 255, 228 / 255, 225 / 255],
  moccasin: [255 / 255, 228 / 255, 181 / 255],
  navajowhite: [255 / 255, 222 / 255, 173 / 255],
  // 'navy': [ 0 / 255, 0 / 255, 128 / 255 ],
  oldlace: [253 / 255, 245 / 255, 230 / 255],
  // 'olive': [ 128 / 255, 128 / 255, 0 / 255 ],
  olivedrab: [107 / 255, 142 / 255, 35 / 255],
  orange: [255 / 255, 165 / 255, 0 / 255],
  orangered: [255 / 255, 69 / 255, 0 / 255],
  orchid: [218 / 255, 112 / 255, 214 / 255],
  palegoldenrod: [238 / 255, 232 / 255, 170 / 255],
  palegreen: [152 / 255, 251 / 255, 152 / 255],
  paleturquoise: [175 / 255, 238 / 255, 238 / 255],
  palevioletred: [219 / 255, 112 / 255, 147 / 255],
  papayawhip: [255 / 255, 239 / 255, 213 / 255],
  peachpuff: [255 / 255, 218 / 255, 185 / 255],
  peru: [205 / 255, 133 / 255, 63 / 255],
  pink: [255 / 255, 192 / 255, 203 / 255],
  plum: [221 / 255, 160 / 255, 221 / 255],
  powderblue: [176 / 255, 224 / 255, 230 / 255],
  // 'purple': [ 128 / 255, 0 / 255, 128 / 255 ],
  // 'red': [ 255 / 255, 0 / 255, 0 / 255 ],
  rosybrown: [188 / 255, 143 / 255, 143 / 255],
  royalblue: [65 / 255, 105 / 255, 225 / 255],
  saddlebrown: [139 / 255, 69 / 255, 19 / 255],
  salmon: [250 / 255, 128 / 255, 114 / 255],
  sandybrown: [244 / 255, 164 / 255, 96 / 255],
  seagreen: [46 / 255, 139 / 255, 87 / 255],
  seashell: [255 / 255, 245 / 255, 238 / 255],
  sienna: [160 / 255, 82 / 255, 45 / 255],
  // 'silver': [ 192 / 255, 192 / 255, 192 / 255 ],
  skyblue: [135 / 255, 206 / 255, 235 / 255],
  slateblue: [106 / 255, 90 / 255, 205 / 255],
  slategray: [112 / 255, 128 / 255, 144 / 255],
  slategrey: [112 / 255, 128 / 255, 144 / 255],
  snow: [255 / 255, 250 / 255, 250 / 255],
  springgreen: [0 / 255, 255 / 255, 127 / 255],
  steelblue: [70 / 255, 130 / 255, 180 / 255],
  tan: [210 / 255, 180 / 255, 140 / 255],
  // 'teal': [ 0 / 255, 128 / 255, 128 / 255 ],
  thistle: [216 / 255, 191 / 255, 216 / 255],
  tomato: [255 / 255, 99 / 255, 71 / 255],
  turquoise: [64 / 255, 224 / 255, 208 / 255],
  violet: [238 / 255, 130 / 255, 238 / 255],
  wheat: [245 / 255, 222 / 255, 179 / 255],
  // 'white': [ 255 / 255, 255 / 255, 255 / 255 ],
  whitesmoke: [245 / 255, 245 / 255, 245 / 255],
  // 'yellow': [ 255 / 255, 255 / 255, 0 / 255 ],
  yellowgreen: [154 / 255, 205 / 255, 50 / 255]
}

module.exports = cssColors


/***/ }),

/***/ 72995:
/***/ ((module) => {

/**
 * Converts CSS color notations (string of hex values) to RGB values.
 *
 * @see https://www.w3.org/TR/css-color-3/
 * @param {String} notation - color notation
 * @return {Array} RGB color values
 * @alias module:modeling/colors.hexToRgb
 *
 * @example
 * let mysphere = colorize(hexToRgb('#000080'), sphere()) // navy blue
 */
const hexToRgb = (notation) => {
  notation = notation.replace('#', '')
  if (notation.length < 6) throw new Error('the given notation must contain 3 or more hex values')

  const r = parseInt(notation.substring(0, 2), 16) / 255
  const g = parseInt(notation.substring(2, 4), 16) / 255
  const b = parseInt(notation.substring(4, 6), 16) / 255
  if (notation.length >= 8) {
    const a = parseInt(notation.substring(6, 8), 16) / 255
    return [r, g, b, a]
  }
  return [r, g, b]
}

module.exports = hexToRgb


/***/ }),

/***/ 16371:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const hueToColorComponent = __webpack_require__(12915)

/**
 * Converts HSL color values to RGB color values.
 *
 * @see http://en.wikipedia.org/wiki/HSL_color_space
 * @param {...Number|Array} values - HSL or HSLA color values
 * @return {Array} RGB or RGBA color values
 * @alias module:modeling/colors.hslToRgb
 *
 * @example
 * let mysphere = colorize(hslToRgb([0.9166666666666666, 1, 0.5]), sphere())
 */
const hslToRgb = (...values) => {
  values = flatten(values)
  if (values.length < 3) throw new Error('values must contain H, S and L values')

  const h = values[0]
  const s = values[1]
  const l = values[2]

  let r = l // default is achromatic
  let g = l
  let b = l

  if (s !== 0) {
    const q = l < 0.5 ? l * (1 + s) : l + s - l * s
    const p = 2 * l - q
    r = hueToColorComponent(p, q, h + 1 / 3)
    g = hueToColorComponent(p, q, h)
    b = hueToColorComponent(p, q, h - 1 / 3)
  }

  if (values.length > 3) {
    // add alpha value if provided
    const a = values[3]
    return [r, g, b, a]
  }
  return [r, g, b]
}

module.exports = hslToRgb


/***/ }),

/***/ 82699:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

/**
 * Converts HSV color values to RGB color values.
 *
 * @see http://en.wikipedia.org/wiki/HSV_color_space.
 * @param {...Number|Array} values - HSV or HSVA color values
 * @return {Array} RGB or RGBA color values
 * @alias module:modeling/colors.hsvToRgb
 *
 * @example
 * let mysphere = colorize(hsvToRgb([0.9166666666666666, 1, 1]), sphere())
 */
const hsvToRgb = (...values) => {
  values = flatten(values)
  if (values.length < 3) throw new Error('values must contain H, S and V values')

  const h = values[0]
  const s = values[1]
  const v = values[2]

  let r = 0
  let g = 0
  let b = 0

  const i = Math.floor(h * 6)
  const f = h * 6 - i
  const p = v * (1 - s)
  const q = v * (1 - f * s)
  const t = v * (1 - (1 - f) * s)

  switch (i % 6) {
    case 0:
      r = v
      g = t
      b = p
      break
    case 1:
      r = q
      g = v
      b = p
      break
    case 2:
      r = p
      g = v
      b = t
      break
    case 3:
      r = p
      g = q
      b = v
      break
    case 4:
      r = t
      g = p
      b = v
      break
    case 5:
      r = v
      g = p
      b = q
      break
  }

  if (values.length > 3) {
    // add alpha value if provided
    const a = values[3]
    return [r, g, b, a]
  }
  return [r, g, b]
}

module.exports = hsvToRgb


/***/ }),

/***/ 12915:
/***/ ((module) => {

/**
 * Convert hue values to a color component (ie one of r, g, b)
 * @param  {Number} p
 * @param  {Number} q
 * @param  {Number} t
 * @return {Number} color component
 * @alias module:modeling/colors.hueToColorComponent
 */
const hueToColorComponent = (p, q, t) => {
  if (t < 0) t += 1
  if (t > 1) t -= 1
  if (t < 1 / 6) return p + (q - p) * 6 * t
  if (t < 1 / 2) return q
  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6
  return p
}

module.exports = hueToColorComponent


/***/ }),

/***/ 81457:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All shapes (primitives or the results of operations) can be assigned a color (RGBA).
 * In all cases, the function returns the results, and never changes the original shapes.
 * @module modeling/colors
 * @example
 * const { colorize, hexToRgb } = require('@jscad/modeling').colors
 */
module.exports = {
  colorize: __webpack_require__(78039),
  colorNameToRgb: __webpack_require__(79242),
  cssColors: __webpack_require__(32575),
  hexToRgb: __webpack_require__(72995),
  hslToRgb: __webpack_require__(16371),
  hsvToRgb: __webpack_require__(82699),
  hueToColorComponent: __webpack_require__(12915),
  rgbToHex: __webpack_require__(65831),
  rgbToHsl: __webpack_require__(49142),
  rgbToHsv: __webpack_require__(18615)
}


/***/ }),

/***/ 65831:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

/**
 * Convert the given RGB color values to CSS color notation (string)
 * @see https://www.w3.org/TR/css-color-3/
 * @param {...Number|Array} values - RGB or RGBA color values
 * @return {String} CSS color notation
 * @alias module:modeling/colors.rgbToHex
 */
const rgbToHex = (...values) => {
  values = flatten(values)
  if (values.length < 3) throw new Error('values must contain R, G and B values')

  const r = values[0] * 255
  const g = values[1] * 255
  const b = values[2] * 255

  let s = `#${Number(0x1000000 + r * 0x10000 + g * 0x100 + b).toString(16).substring(1, 7)}`

  if (values.length > 3) {
    // convert alpha to opacity
    s = s + Number(values[3] * 255).toString(16)
  }
  return s
}

module.exports = rgbToHex


/***/ }),

/***/ 49142:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

/**
 * Converts an RGB color value to HSL.
 *
 * @see http://en.wikipedia.org/wiki/HSL_color_space.
 * @see http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c
 * @param {...Number|Array} values - RGB or RGBA color values
 * @return {Array} HSL or HSLA color values
 * @alias module:modeling/colors.rgbToHsl
 */
const rgbToHsl = (...values) => {
  values = flatten(values)
  if (values.length < 3) throw new Error('values must contain R, G and B values')

  const r = values[0]
  const g = values[1]
  const b = values[2]

  const max = Math.max(r, g, b)
  const min = Math.min(r, g, b)
  let h
  let s
  const l = (max + min) / 2

  if (max === min) {
    h = s = 0 // achromatic
  } else {
    const d = max - min
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0)
        break
      case g:
        h = (b - r) / d + 2
        break
      case b:
        h = (r - g) / d + 4
        break
    }
    h /= 6
  }

  if (values.length > 3) {
    // add alpha value if provided
    const a = values[3]
    return [h, s, l, a]
  }
  return [h, s, l]
}

module.exports = rgbToHsl


/***/ }),

/***/ 18615:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

/**
 * Converts an RGB color value to HSV.
 *
 * @see http://en.wikipedia.org/wiki/HSV_color_space.
 * @param {...Number|Array} values - RGB or RGBA color values
 * @return {Array} HSV or HSVA color values
 * @alias module:modeling/colors.rgbToHsv
 */
const rgbToHsv = (...values) => {
  values = flatten(values)
  if (values.length < 3) throw new Error('values must contain R, G and B values')

  const r = values[0]
  const g = values[1]
  const b = values[2]

  const max = Math.max(r, g, b)
  const min = Math.min(r, g, b)
  let h
  const v = max

  const d = max - min
  const s = max === 0 ? 0 : d / max

  if (max === min) {
    h = 0 // achromatic
  } else {
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0)
        break
      case g:
        h = (b - r) / d + 2
        break
      case b:
        h = (r - g) / d + 4
        break
    }
    h /= 6
  }

  if (values.length > 3) {
    // add alpha if provided
    const a = values[3]
    return [h, s, v, a]
  }
  return [h, s, v]
}

module.exports = rgbToHsv


/***/ }),

/***/ 9590:
/***/ ((module) => {

/**
 * Represents a bezier easing function.
 * @typedef {Object} bezier
 * @property {Array} points - The control points for the bezier curve. The first and last point will also be the start and end of the curve
 * @property {string} pointType - A reference to the type and dimensionality of the points that the curve was created from
 * @property {number} dimensions - The dimensionality of the bezier
 * @property {Array} permutations - A pre-calculation of the bezier algorithm's co-efficients
 * @property {Array} tangentPermutations - A pre-calculation of the bezier algorithm's tangent co-efficients
 *
 */

/**
 * Creates an object representing a bezier easing curve.
 * Curves can have both an arbitrary number of control points, and an arbitrary number of dimensions.
 *
 * @example
 * const b = bezier.create([0,10]) // a linear progression from 0 to 10
 * const b = bezier.create([0, 0, 10, 10]) // a symmetrical cubic easing curve that starts slowly and ends slowly from 0 to 10
 * const b = bezier.create([0,0,0], [0,5,10], [10,0,-5], [10,10,10]]) // a cubic 3 dimensional easing curve that can generate position arrays for modelling
 * // Usage
 * let position = bezier.valueAt(t,b) // where 0 < t < 1
 * let tangent = bezier.tangentAt(t,b) // where 0 < t < 1
 *
 * @param {Array} points An array with at least 2 elements of either all numbers, or all arrays of numbers that are the same size.
 * @returns {bezier} a new bezier data object
 * @alias module:modeling/curves/bezier.create
 */
const create = (points) => {
  if (!Array.isArray(points)) throw new Error('Bezier points must be a valid array/')
  if (points.length < 2) throw new Error('Bezier points must contain at least 2 values.')
  const pointType = getPointType(points)

  return {
    points: points,
    pointType: pointType,
    dimensions: pointType === 'float_single' ? 0 : points[0].length,
    permutations: getPermutations(points.length - 1),
    tangentPermutations: getPermutations(points.length - 2)
  }
}

const getPointType = function (points) {
  let firstPointType = null
  points.forEach((point) => {
    let pType = ''
    if (Number.isFinite(point)) {
      pType = 'float_single'
    } else if (Array.isArray(point)) {
      point.forEach((val) => {
        if (!Number.isFinite(val)) throw new Error('Bezier point values must all be numbers.')
      })
      pType = 'float_' + point.length
    } else throw new Error('Bezier points must all be numbers or arrays of number.')
    if (firstPointType == null) {
      firstPointType = pType
    } else {
      if (firstPointType !== pType) {
        throw new Error('Bezier points must be either all numbers or all arrays of numbers of the same size.')
      }
    }
  })
  return firstPointType
}

const getPermutations = function (c) {
  const permutations = []
  for (let i = 0; i <= c; i++) {
    permutations.push(factorial(c) / (factorial(i) * factorial(c - i)))
  }
  return permutations
}

const factorial = function (b) {
  let out = 1
  for (let i = 2; i <= b; i++) {
    out *= i
  }
  return out
}

module.exports = create


/***/ }),

/***/ 45235:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a bezier easing function.
 * @see {@link bezier} for data structure information.
 * @module modeling/curves/bezier
 */
module.exports = {
  create: __webpack_require__(9590),
  valueAt: __webpack_require__(87501),
  tangentAt: __webpack_require__(48542)
}


/***/ }),

/***/ 48542:
/***/ ((module) => {

/**
 * Calculates the tangent at a specific position along a bezier easing curve.
 * For multidimensional curves, the tangent is the slope of each dimension at that point.
 * See the example called extrudeAlongPath.js
 *
 * @example
 * const b = bezier.create([[0,0,0], [0,5,10], [10,0,-5], [10,10,10]]) // a cubic 3 dimensional easing curve that can generate position arrays for modelling
 * let tangent = bezier.tangentAt(t, b)
 *
 * @param {number} t : the position of which to calculate the bezier's tangent value; 0 < t < 1
 * @param {Object} bezier : an array with at least 2 elements of either all numbers, or all arrays of numbers that are the same size.
 * @return {array | number} the tangent at the requested position.
 * @alias module:modeling/curves/bezier.tangentAt
 */
const tangentAt = (t, bezier) => {
  if (t < 0 || t > 1) {
    throw new Error('Bezier tangentAt() input must be between 0 and 1')
  }
  if (bezier.pointType === 'float_single') {
    return bezierTangent(bezier, bezier.points, t)
  } else {
    const result = []
    for (let i = 0; i < bezier.dimensions; i++) {
      const singleDimensionPoints = []
      for (let j = 0; j < bezier.points.length; j++) {
        singleDimensionPoints.push(bezier.points[j][i])
      }
      result.push(bezierTangent(bezier, singleDimensionPoints, t))
    }
    return result
  }
}

const bezierTangent = function (bezier, p, t) {
  // from https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-der.html
  const n = p.length - 1
  let result = 0
  for (let i = 0; i < n; i++) {
    const q = n * (p[i + 1] - p[i])
    result += bezier.tangentPermutations[i] * Math.pow(1 - t, n - 1 - i) * Math.pow(t, i) * q
  }
  return result
}

module.exports = tangentAt


/***/ }),

/***/ 87501:
/***/ ((module) => {

/**
 * Calculates the value at a specific position along a bezier easing curve.
 * For multidimensional curves, the tangent is the slope of each dimension at that point.
 * See the example called extrudeAlongPath.js to see this in use.
 * Math and explanation comes from {@link https://www.freecodecamp.org/news/nerding-out-with-bezier-curves-6e3c0bc48e2f/}
 *
 * @example
 * const b = bezier.create([0,0,0], [0,5,10], [10,0,-5], [10,10,10]]) // a cubic 3 dimensional easing curve that can generate position arrays for modelling
 * let position = bezier.valueAt(t,b) // where 0 < t < 1
 *
 * @param {number} t : the position of which to calculate the value; 0 < t < 1
 * @param {Object} bezier : a bezier curve created with bezier.create().
 * @returns {array | number} the value at the requested position.
 * @alias module:modeling/curves/bezier.valueAt
 */
const valueAt = (t, bezier) => {
  if (t < 0 || t > 1) {
    throw new Error('Bezier valueAt() input must be between 0 and 1')
  }
  if (bezier.pointType === 'float_single') {
    return bezierFunction(bezier, bezier.points, t)
  } else {
    const result = []
    for (let i = 0; i < bezier.dimensions; i++) {
      const singleDimensionPoints = []
      for (let j = 0; j < bezier.points.length; j++) {
        singleDimensionPoints.push(bezier.points[j][i])
      }
      result.push(bezierFunction(bezier, singleDimensionPoints, t))
    }
    return result
  }
}

const bezierFunction = function (bezier, p, t) {
  const n = p.length - 1
  let result = 0
  for (let i = 0; i <= n; i++) {
    result += bezier.permutations[i] * Math.pow(1 - t, n - i) * Math.pow(t, i) * p[i]
  }
  return result
}

module.exports = valueAt


/***/ }),

/***/ 50164:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Curves are n-dimensional mathematical constructs that define a path from point 0 to point 1.
 * @module modeling/curves
 * @example
 * const { bezier } = require('@jscad/modeling').curves

 */
module.exports = {
  bezier: __webpack_require__(45235)
}


/***/ }),

/***/ 10580:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec2 = __webpack_require__(4138)

/*
 * Apply the transforms of the given geometry.
 * NOTE: This function must be called BEFORE exposing any data. See toSides().
 * @param {geom2} geometry - the geometry to transform
 * @returns {geom2} the given geometry
 *
 * @example
 * geometry = applyTransforms(geometry)
 */
const applyTransforms = (geometry) => {
  if (mat4.isIdentity(geometry.transforms)) return geometry

  // apply transforms to each side
  geometry.sides = geometry.sides.map((side) => {
    const p0 = vec2.transform(vec2.create(), side[0], geometry.transforms)
    const p1 = vec2.transform(vec2.create(), side[1], geometry.transforms)
    return [p0, p1]
  })
  geometry.transforms = mat4.create()
  return geometry
}

module.exports = applyTransforms


/***/ }),

/***/ 29584:
/***/ ((module) => {

/**
 * Performs a shallow clone of the given geometry.
 * @param {geom2} geometry - the geometry to clone
 * @returns {geom2} new geometry
 * @alias module:modeling/geometries/geom2.clone
 */
const clone = (geometry) => Object.assign({}, geometry)

module.exports = clone


/***/ }),

/***/ 95771:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

/**
 * Represents a 2D geometry consisting of a list of sides.
 * @typedef {Object} geom2
 * @property {Array} sides - list of sides, each side containing two points
 * @property {mat4} transforms - transforms to apply to the sides, see transform()
 */

/**
 * Create a new 2D geometry composed of unordered sides (two connected points).
 * @param {Array} [sides] - list of sides where each side is an array of two points
 * @returns {geom2} a new geometry
 * @alias module:modeling/geometries/geom2.create
 */
const create = (sides) => {
  if (sides === undefined) {
    sides = [] // empty contents
  }
  return {
    sides: sides,
    transforms: mat4.create()
  }
}

module.exports = create


/***/ }),

/***/ 1683:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec2 = __webpack_require__(4138)

const create = __webpack_require__(95771)

/**
 * Create a new 2D geometry from the given compact binary data.
 * @param {Array} data - compact binary data
 * @returns {geom2} a new geometry
 * @alias module:modeling/geometries/geom2.fromCompactBinary
 */
const fromCompactBinary = (data) => {
  if (data[0] !== 0) throw new Error('invalid compact binary data')

  const created = create()

  created.transforms = mat4.clone(data.slice(1, 17))

  for (let i = 21; i < data.length; i += 4) {
    const point0 = vec2.fromValues(data[i + 0], data[i + 1])
    const point1 = vec2.fromValues(data[i + 2], data[i + 3])
    created.sides.push([point0, point1])
  }
  // transfer known properties, i.e. color
  if (data[17] >= 0) {
    created.color = [data[17], data[18], data[19], data[20]]
  }
  // TODO: how about custom properties or fields ?
  return created
}

module.exports = fromCompactBinary


/***/ }),

/***/ 74017:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const create = __webpack_require__(95771)

/**
 * Create a new 2D geometry from the given points.
 * The direction (rotation) of the points is not relevant,
 * as the points can define a convex or a concave polygon.
 * The geometry must not self intersect, i.e. the sides cannot cross.
 * @param {Array} points - list of points in 2D space
 * @returns {geom2} a new geometry
 * @alias module:modeling/geometries/geom2.fromPoints
 */
const fromPoints = (points) => {
  if (!Array.isArray(points)) {
    throw new Error('the given points must be an array')
  }
  let length = points.length
  if (length < 3) {
    throw new Error('the given points must define a closed geometry with three or more points')
  }
  // adjust length if the given points are closed by the same point
  if (vec2.equals(points[0], points[length - 1])) --length

  const sides = []
  let prevpoint = points[length - 1]
  for (let i = 0; i < length; i++) {
    const point = points[i]
    sides.push([vec2.clone(prevpoint), vec2.clone(point)])
    prevpoint = point
  }
  return create(sides)
}

module.exports = fromPoints


/***/ }),

/***/ 88934:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a 2D geometry consisting of a list of sides.
 * @see {@link geom2} for data structure information.
 * @module modeling/geometries/geom2
 *
 * @example
 * colorize([0.5,0,1,1], square()) // purple square
 *
 * @example
 * {
 *   "sides": [[[-1,1],[-1,-1]],[[-1,-1],[1,-1]],[[1,-1],[1,1]],[[1,1],[-1,1]]],
 *   "transforms": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],
 *   "color": [0.5,0,1,1]
 * }
 */
module.exports = {
  clone: __webpack_require__(29584),
  create: __webpack_require__(95771),
  fromPoints: __webpack_require__(74017),
  fromCompactBinary: __webpack_require__(1683),
  isA: __webpack_require__(8176),
  reverse: __webpack_require__(76506),
  toOutlines: __webpack_require__(75494),
  toPoints: __webpack_require__(12863),
  toSides: __webpack_require__(17999),
  toString: __webpack_require__(5519),
  toCompactBinary: __webpack_require__(68423),
  transform: __webpack_require__(69843),
  validate: __webpack_require__(4164)
}


/***/ }),

/***/ 8176:
/***/ ((module) => {

/**
 * Determine if the given object is a 2D geometry.
 * @param {Object} object - the object to interrogate
 * @returns {Boolean} true, if the object matches a geom2 based object
 * @alias module:modeling/geometries/geom2.isA
 */
const isA = (object) => {
  if (object && typeof object === 'object') {
    if ('sides' in object && 'transforms' in object) {
      if (Array.isArray(object.sides) && 'length' in object.transforms) {
        return true
      }
    }
  }
  return false
}

module.exports = isA


/***/ }),

/***/ 76506:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(95771)
const toSides = __webpack_require__(17999)

/**
 * Reverses the given geometry so that the sides are flipped in the opposite order.
 * This swaps the left (interior) and right (exterior) edges.
 * @param {geom2} geometry - the geometry to reverse
 * @returns {geom2} the new reversed geometry
 * @alias module:modeling/geometries/geom2.reverse
 *
 * @example
 * let newgeometry = reverse(geometry)
 */
const reverse = (geometry) => {
  const oldsides = toSides(geometry)

  const newsides = oldsides.map((side) => [side[1], side[0]])
  newsides.reverse() // is this required?
  return create(newsides)
}

module.exports = reverse


/***/ }),

/***/ 68423:
/***/ ((module) => {

/**
 * Produces a compact binary representation from the given geometry.
 * @param {geom2} geometry - the geometry
 * @returns {TypedArray} compact binary representation
 * @alias module:modeling/geometries/geom2.toCompactBinary
 */
const toCompactBinary = (geometry) => {
  const sides = geometry.sides
  const transforms = geometry.transforms
  let color = [-1, -1, -1, -1]
  if (geometry.color) color = geometry.color

  // FIXME why Float32Array?
  const compacted = new Float32Array(1 + 16 + 4 + (sides.length * 4)) // type + transforms + color + sides data

  compacted[0] = 0 // type code: 0 => geom2, 1 => geom3 , 2 => path2

  compacted[1] = transforms[0]
  compacted[2] = transforms[1]
  compacted[3] = transforms[2]
  compacted[4] = transforms[3]
  compacted[5] = transforms[4]
  compacted[6] = transforms[5]
  compacted[7] = transforms[6]
  compacted[8] = transforms[7]
  compacted[9] = transforms[8]
  compacted[10] = transforms[9]
  compacted[11] = transforms[10]
  compacted[12] = transforms[11]
  compacted[13] = transforms[12]
  compacted[14] = transforms[13]
  compacted[15] = transforms[14]
  compacted[16] = transforms[15]

  compacted[17] = color[0]
  compacted[18] = color[1]
  compacted[19] = color[2]
  compacted[20] = color[3]

  for (let i = 0; i < sides.length; i++) {
    const ci = i * 4 + 21
    const point0 = sides[i][0]
    const point1 = sides[i][1]
    compacted[ci + 0] = point0[0]
    compacted[ci + 1] = point0[1]
    compacted[ci + 2] = point1[0]
    compacted[ci + 3] = point1[1]
  }
  // TODO: how about custom properties or fields ?
  return compacted
}

module.exports = toCompactBinary


/***/ }),

/***/ 75494:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const toSides = __webpack_require__(17999)

/*
 * Create a list of edges which SHARE vertices.
 * This allows the edges to be traversed in order.
 */
const toSharedVertices = (sides) => {
  const unique = new Map() // {key: vertex}
  const getUniqueVertex = (vertex) => {
    const key = vertex.toString()
    if (unique.has(key)) {
      return unique.get(key)
    } else {
      unique.set(key, vertex)
      return vertex
    }
  }

  return sides.map((side) => side.map(getUniqueVertex))
}

/*
 * Convert a list of sides into a map from vertex to edges.
 */
const toVertexMap = (sides) => {
  const vertexMap = new Map()
  // first map to edges with shared vertices
  const edges = toSharedVertices(sides)
  // construct adjacent edges map
  edges.forEach((edge) => {
    if (vertexMap.has(edge[0])) {
      vertexMap.get(edge[0]).push(edge)
    } else {
      vertexMap.set(edge[0], [edge])
    }
  })
  return vertexMap
}

/**
 * Create the outline(s) of the given geometry.
 * @param {geom2} geometry - geometry to create outlines from
 * @returns {Array} an array of outlines, where each outline is an array of ordered points
 * @alias module:modeling/geometries/geom2.toOutlines
 *
 * @example
 * let geometry = subtract(rectangle({size: [5, 5]}), rectangle({size: [3, 3]}))
 * let outlines = toOutlines(geometry) // returns two outlines
 */
const toOutlines = (geometry) => {
  const vertexMap = toVertexMap(toSides(geometry)) // {vertex: [edges]}
  const outlines = []
  while (true) {
    let startSide
    for (const [vertex, edges] of vertexMap) {
      startSide = edges.shift()
      if (!startSide) {
        vertexMap.delete(vertex)
        continue
      }
      break
    }
    if (startSide === undefined) break // all starting sides have been visited

    const connectedVertexPoints = []
    const startVertex = startSide[0]
    while (true) {
      connectedVertexPoints.push(startSide[0])
      const nextVertex = startSide[1]
      if (nextVertex === startVertex) break // the outline has been closed
      const nextPossibleSides = vertexMap.get(nextVertex)
      if (!nextPossibleSides) {
        throw new Error(`geometry is not closed at vertex ${nextVertex}`)
      }
      const nextSide = popNextSide(startSide, nextPossibleSides)
      if (nextPossibleSides.length === 0) {
        vertexMap.delete(nextVertex)
      }
      startSide = nextSide
    } // inner loop

    // due to the logic of fromPoints()
    // move the first point to the last
    if (connectedVertexPoints.length > 0) {
      connectedVertexPoints.push(connectedVertexPoints.shift())
    }
    outlines.push(connectedVertexPoints)
  } // outer loop
  vertexMap.clear()
  return outlines
}

// find the first counter-clockwise edge from startSide and pop from nextSides
const popNextSide = (startSide, nextSides) => {
  if (nextSides.length === 1) {
    return nextSides.pop()
  }
  const v0 = vec2.create()
  const startAngle = vec2.angleDegrees(vec2.subtract(v0, startSide[1], startSide[0]))
  let bestAngle
  let bestIndex
  nextSides.forEach((nextSide, index) => {
    const nextAngle = vec2.angleDegrees(vec2.subtract(v0, nextSide[1], nextSide[0]))
    let angle = nextAngle - startAngle
    if (angle < -180) angle += 360
    if (angle >= 180) angle -= 360
    if (bestIndex === undefined || angle > bestAngle) {
      bestIndex = index
      bestAngle = angle
    }
  })
  const nextSide = nextSides[bestIndex]
  nextSides.splice(bestIndex, 1) // remove side from list
  return nextSide
}

module.exports = toOutlines


/***/ }),

/***/ 12863:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const toSides = __webpack_require__(17999)

/**
 * Produces an array of points from the given geometry.
 * The returned array should not be modified as the points are shared with the geometry.
 * NOTE: The points returned do NOT define an order. Use toOutlines() for ordered points.
 * @param {geom2} geometry - the geometry
 * @returns {Array} an array of points
 * @alias module:modeling/geometries/geom2.toPoints
 *
 * @example
 * let sharedpoints = toPoints(geometry)
 */
const toPoints = (geometry) => {
  const sides = toSides(geometry)
  const points = sides.map((side) => side[0])
  // due to the logic of fromPoints()
  // move the first point to the last
  if (points.length > 0) {
    points.push(points.shift())
  }
  return points
}

module.exports = toPoints


/***/ }),

/***/ 17999:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const applyTransforms = __webpack_require__(10580)

/**
 * Produces an array of sides from the given geometry.
 * The returned array should not be modified as the data is shared with the geometry.
 * NOTE: The sides returned do NOT define an order. Use toOutlines() for ordered points.
 * @param {geom2} geometry - the geometry
 * @returns {Array} an array of sides
 * @alias module:modeling/geometries/geom2.toSides
 *
 * @example
 * let sharedsides = toSides(geometry)
 */
const toSides = (geometry) => applyTransforms(geometry).sides

module.exports = toSides


/***/ }),

/***/ 5519:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const toSides = __webpack_require__(17999)

/**
 * Create a string representing the contents of the given geometry.
 * @param {geom2} geometry - the geometry
 * @returns {String} a representative string
 * @alias module:modeling/geometries/geom2.toString
 *
 * @example
 * console.out(toString(geometry))
 */
const toString = (geometry) => {
  const sides = toSides(geometry)
  let result = 'geom2 (' + sides.length + ' sides):\n[\n'
  sides.forEach((side) => {
    result += '  [' + vec2.toString(side[0]) + ', ' + vec2.toString(side[1]) + ']\n'
  })
  result += ']\n'
  return result
}

module.exports = toString


/***/ }),

/***/ 69843:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

/**
 * Transform the given geometry using the given matrix.
 * This is a lazy transform of the sides, as this function only adjusts the transforms.
 * The transforms are applied when accessing the sides via toSides().
 * @param {mat4} matrix - the matrix to transform with
 * @param {geom2} geometry - the geometry to transform
 * @returns {geom2} a new geometry
 * @alias module:modeling/geometries/geom2.transform
 *
 * @example
 * let newgeometry = transform(fromZRotation(degToRad(90)), geometry)
 */
const transform = (matrix, geometry) => {
  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)
  return Object.assign({}, geometry, { transforms })
}

module.exports = transform


/***/ }),

/***/ 4164:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)
const isA = __webpack_require__(8176)
const toOutlines = __webpack_require__(75494)

/**
 * Determine if the given object is a valid geom2.
 * Checks for closedness, self-edges, and valid data points.
 *
 * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**
 *
 * @param {Object} object - the object to interrogate
 * @throws {Error} error if the geometry is not valid
 * @alias module:modeling/geometries/geom2.validate
 */
const validate = (object) => {
  if (!isA(object)) {
    throw new Error('invalid geom2 structure')
  }

  // check for closedness
  toOutlines(object)

  // check for self-edges
  object.sides.forEach((side) => {
    if (vec2.equals(side[0], side[1])) {
      throw new Error(`geom2 self-edge ${side[0]}`)
    }
  })

  // check transforms
  if (!object.transforms.every(Number.isFinite)) {
    throw new Error(`geom2 invalid transforms ${object.transforms}`)
  }
}

module.exports = validate


/***/ }),

/***/ 58865:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

const poly3 = __webpack_require__(71516)

/*
 * Apply the transforms of the given geometry.
 * NOTE: This function must be called BEFORE exposing any data. See toPolygons.
 * @param {geom3} geometry - the geometry to transform
 * @returns {geom3} the given geometry
 * @example
 * geometry = applyTransforms(geometry)
 */
const applyTransforms = (geometry) => {
  if (mat4.isIdentity(geometry.transforms)) return geometry

  // apply transforms to each polygon
  geometry.polygons = geometry.polygons.map((polygon) => poly3.transform(geometry.transforms, polygon))
  // reset transforms
  geometry.transforms = mat4.create()
  return geometry
}

module.exports = applyTransforms


/***/ }),

/***/ 47565:
/***/ ((module) => {

/**
 * Performs a shallow clone of the given geometry.
 * @param {geom3} geometry - the geometry to clone
 * @returns {geom3} a new geometry
 * @alias module:modeling/geometries/geom3.clone
 */
const clone = (geometry) => Object.assign({}, geometry)

module.exports = clone


/***/ }),

/***/ 6997:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

/**
 * Represents a 3D geometry consisting of a list of polygons.
 * @typedef {Object} geom3
 * @property {Array} polygons - list of polygons, each polygon containing three or more points
 * @property {mat4} transforms - transforms to apply to the polygons, see transform()
 */

/**
 * Create a new 3D geometry composed of the given polygons.
 * @param {Array} [polygons] - list of polygons, or undefined
 * @returns {geom3} a new geometry
 * @alias module:modeling/geometries/geom3.create
 */
const create = (polygons) => {
  if (polygons === undefined) {
    polygons = [] // empty contents
  }
  return {
    polygons,
    transforms: mat4.create()
  }
}

module.exports = create


/***/ }),

/***/ 60922:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)
const mat4 = __webpack_require__(36028)

const poly3 = __webpack_require__(71516)

const create = __webpack_require__(6997)

/**
 * Construct a new 3D geometry from the given compact binary data.
 * @param {TypedArray} data - compact binary data
 * @returns {geom3} a new geometry
 * @alias module:modeling/geometries/geom3.fromCompactBinary
 */
const fromCompactBinary = (data) => {
  if (data[0] !== 1) throw new Error('invalid compact binary data')

  const created = create()

  created.transforms = mat4.clone(data.slice(1, 17))

  const numberOfVertices = data[21]
  let ci = 22
  let vi = data.length - (numberOfVertices * 3)
  while (vi < data.length) {
    const verticesPerPolygon = data[ci]
    ci++

    const vertices = []
    for (let i = 0; i < verticesPerPolygon; i++) {
      vertices.push(vec3.fromValues(data[vi], data[vi + 1], data[vi + 2]))
      vi += 3
    }
    created.polygons.push(poly3.create(vertices))
  }

  // transfer known properties, i.e. color
  if (data[17] >= 0) {
    created.color = [data[17], data[18], data[19], data[20]]
  }
  // TODO: how about custom properties or fields ?
  return created
}

module.exports = fromCompactBinary


/***/ }),

/***/ 30412:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const poly3 = __webpack_require__(71516)

const create = __webpack_require__(6997)

/**
 * Construct a new 3D geometry from a list of points.
 * The list of points should contain sub-arrays, each defining a single polygon of points.
 * In addition, the points should follow the right-hand rule for rotation in order to
 * define an external facing polygon.
 * @param {Array} listofpoints - list of lists, where each list is a set of points to construct a polygon
 * @returns {geom3} a new geometry
 * @alias module:modeling/geometries/geom3.fromPoints
 */
const fromPoints = (listofpoints) => {
  if (!Array.isArray(listofpoints)) {
    throw new Error('the given points must be an array')
  }

  const polygons = listofpoints.map((points, index) => {
    // TODO catch the error, and rethrow with index
    const polygon = poly3.create(points)
    return polygon
  })
  const result = create(polygons)
  return result
}

module.exports = fromPoints


/***/ }),

/***/ 18206:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a 3D geometry consisting of a list of polygons.
 * @see {@link geom3} for data structure information.
 * @module modeling/geometries/geom3
 *
 * @example
 * colorize([0,0.5,1,0.6], cube()) // transparent ice cube
 *
 * @example
 * {
 *   "polygons": [
 *     {"vertices": [[-1,-1,-1], [-1,-1,1], [-1,1,1], [-1,1,-1]]},
 *     {"vertices": [[1,-1,-1], [1,1,-1], [1,1,1], [1,-1,1]]},
 *     {"vertices": [[-1,-1,-1], [1,-1,-1], [1,-1,1], [-1,-1,1]]},
 *     {"vertices": [[-1,1,-1], [-1,1,1], [1,1,1], [1,1,-1]]},
 *     {"vertices": [[-1,-1,-1], [-1,1,-1], [1,1,-1], [1,-1,-1]]},
 *     {"vertices": [[-1,-1,1], [1,-1,1], [1,1,1], [-1,1,1]]}
 *   ],
 *   "transforms": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],
 *   "color": [0,0.5,1,0.6]
 * }
 */
module.exports = {
  clone: __webpack_require__(47565),
  create: __webpack_require__(6997),
  fromPoints: __webpack_require__(30412),
  fromCompactBinary: __webpack_require__(60922),
  invert: __webpack_require__(35208),
  isA: __webpack_require__(35165),
  toPoints: __webpack_require__(6986),
  toPolygons: __webpack_require__(48356),
  toString: __webpack_require__(98390),
  toCompactBinary: __webpack_require__(61622),
  transform: __webpack_require__(48634),
  validate: __webpack_require__(59739)
}


/***/ }),

/***/ 35208:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const poly3 = __webpack_require__(71516)

const create = __webpack_require__(6997)
const toPolygons = __webpack_require__(48356)

/**
 * Invert the given geometry, transposing solid and empty space.
 * @param {geom3} geometry - the geometry to invert
 * @return {geom3} a new geometry
 * @alias module:modeling/geometries/geom3.invert
 */
const invert = (geometry) => {
  const polygons = toPolygons(geometry)
  const newpolygons = polygons.map((polygon) => poly3.invert(polygon))
  return create(newpolygons)
}

module.exports = invert


/***/ }),

/***/ 35165:
/***/ ((module) => {

/**
 * Determine if the given object is a 3D geometry.
 * @param {Object} object - the object to interrogate
 * @returns {Boolean} true if the object matches a geom3
 * @alias module:modeling/geometries/geom3.isA
 */
const isA = (object) => {
  if (object && typeof object === 'object') {
    if ('polygons' in object && 'transforms' in object) {
      if (Array.isArray(object.polygons) && 'length' in object.transforms) {
        return true
      }
    }
  }
  return false
}

module.exports = isA


/***/ }),

/***/ 61622:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const poly3 = __webpack_require__(71516)

/**
 * Return the given geometry in compact binary representation.
 * @param {geom3} geometry - the geometry
 * @return {TypedArray} compact binary representation
 * @alias module:modeling/geometries/geom3.toCompactBinary
 */
const toCompactBinary = (geometry) => {
  const polygons = geometry.polygons
  const transforms = geometry.transforms

  const numberOfPolygons = polygons.length
  const numberOfVertices = polygons.reduce((count, polygon) => count + polygon.vertices.length, 0)
  let color = [-1, -1, -1, -1]
  if (geometry.color) color = geometry.color

  // FIXME why Float32Array?
  const compacted = new Float32Array(1 + 16 + 4 + 1 + numberOfPolygons + (numberOfVertices * 3))
  // type + transforms + color + numberOfPolygons + numberOfVerticesPerPolygon[] + vertices data[]

  compacted[0] = 1 // type code: 0 => geom2, 1 => geom3 , 2 => path2

  compacted[1] = transforms[0]
  compacted[2] = transforms[1]
  compacted[3] = transforms[2]
  compacted[4] = transforms[3]
  compacted[5] = transforms[4]
  compacted[6] = transforms[5]
  compacted[7] = transforms[6]
  compacted[8] = transforms[7]
  compacted[9] = transforms[8]
  compacted[10] = transforms[9]
  compacted[11] = transforms[10]
  compacted[12] = transforms[11]
  compacted[13] = transforms[12]
  compacted[14] = transforms[13]
  compacted[15] = transforms[14]
  compacted[16] = transforms[15]

  compacted[17] = color[0]
  compacted[18] = color[1]
  compacted[19] = color[2]
  compacted[20] = color[3]

  compacted[21] = numberOfVertices

  let ci = 22
  let vi = ci + numberOfPolygons
  polygons.forEach((polygon) => {
    const points = poly3.toPoints(polygon)
    // record the number of vertices per polygon
    compacted[ci] = points.length
    ci++
    // convert the vertices
    for (let i = 0; i < points.length; i++) {
      const point = points[i]
      compacted[vi + 0] = point[0]
      compacted[vi + 1] = point[1]
      compacted[vi + 2] = point[2]
      vi += 3
    }
  })
  // TODO: how about custom properties or fields ?
  return compacted
}

module.exports = toCompactBinary


/***/ }),

/***/ 6986:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const poly3 = __webpack_require__(71516)

const toPolygons = __webpack_require__(48356)

/**
 * Return the given geometry as a list of points, after applying transforms.
 * The returned array should not be modified as the points are shared with the geometry.
 * @param {geom3} geometry - the geometry
 * @return {Array} list of points, where each sub-array represents a polygon
 * @alias module:modeling/geometries/geom3.toPoints
 */
const toPoints = (geometry) => {
  const polygons = toPolygons(geometry)
  const listofpoints = polygons.map((polygon) => poly3.toPoints(polygon))
  return listofpoints
}

module.exports = toPoints


/***/ }),

/***/ 48356:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const applyTransforms = __webpack_require__(58865)

/**
 * Produces an array of polygons from the given geometry, after applying transforms.
 * The returned array should not be modified as the polygons are shared with the geometry.
 * @param {geom3} geometry - the geometry
 * @returns {Array} an array of polygons
 * @alias module:modeling/geometries/geom3.toPolygons
 *
 * @example
 * let sharedpolygons = toPolygons(geometry)
 */
const toPolygons = (geometry) => applyTransforms(geometry).polygons

module.exports = toPolygons


/***/ }),

/***/ 98390:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const poly3 = __webpack_require__(71516)

const toPolygons = __webpack_require__(48356)

/**
 * Create a string representing the contents of the given geometry.
 * @param {geom3} geometry - the geometry
 * @returns {String} a representative string
 * @alias module:modeling/geometries/geom3.toString
 *
 * @example
 * console.out(toString(geometry))
 */
const toString = (geometry) => {
  const polygons = toPolygons(geometry)
  let result = 'geom3 (' + polygons.length + ' polygons):\n'
  polygons.forEach((polygon) => {
    result += '  ' + poly3.toString(polygon) + '\n'
  })
  return result
}

module.exports = toString


/***/ }),

/***/ 48634:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

/**
 * Transform the given geometry using the given matrix.
 * This is a lazy transform of the polygons, as this function only adjusts the transforms.
 * See applyTransforms() for the actual application of the transforms to the polygons.
 * @param {mat4} matrix - the matrix to transform with
 * @param {geom3} geometry - the geometry to transform
 * @returns {geom3} a new geometry
 * @alias module:modeling/geometries/geom3.transform
 *
 * @example
 * let newgeometry = transform(fromXRotation(degToRad(90)), geometry)
 */
const transform = (matrix, geometry) => {
  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)
  return Object.assign({}, geometry, { transforms })
}

module.exports = transform


/***/ }),

/***/ 59739:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const poly3 = __webpack_require__(71516)
const isA = __webpack_require__(35165)

/**
 * Determine if the given object is a valid 3D geometry.
 * Checks for valid data structure, convex polygon faces, and manifold edges.
 *
 * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**
 *
 * @param {Object} object - the object to interrogate
 * @throws {Error} error if the geometry is not valid
 * @alias module:modeling/geometries/geom3.validate
 */
const validate = (object) => {
  if (!isA(object)) {
    throw new Error('invalid geom3 structure')
  }

  // check polygons
  object.polygons.forEach(poly3.validate)
  validateManifold(object)

  // check transforms
  if (!object.transforms.every(Number.isFinite)) {
    throw new Error(`geom3 invalid transforms ${object.transforms}`)
  }

  // TODO: check for self-intersecting
}

/*
 * Check manifold edge condition: Every edge is in exactly 2 faces
 */
const validateManifold = (object) => {
  // count of each edge
  const edgeCount = new Map()
  object.polygons.forEach(({ vertices }) => {
    vertices.forEach((v, i) => {
      const v1 = `${v}`
      const v2 = `${vertices[(i + 1) % vertices.length]}`
      // sort for undirected edge
      const edge = `${v1}/${v2}`
      const count = edgeCount.has(edge) ? edgeCount.get(edge) : 0
      edgeCount.set(edge, count + 1)
    })
  })

  // check that edges are always matched
  const nonManifold = []
  edgeCount.forEach((count, edge) => {
    const complementEdge = edge.split('/').reverse().join('/')
    const complementCount = edgeCount.get(complementEdge)
    if (count !== complementCount) {
      nonManifold.push(edge.replace('/', ' -> '))
    }
  })
  if (nonManifold.length > 0) {
    throw new Error(`non-manifold edges ${nonManifold.length}\n${nonManifold.join('\n')}`)
  }
}

module.exports = validate


/***/ }),

/***/ 14484:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Geometries are objects that represent the contents of primitives or the results of operations.
 * Note: Geometries are considered immutable, so never change the contents directly.
 *
 * @see {@link geom2} - 2D geometry consisting of sides
 * @see {@link geom3} - 3D geometry consisting of polygons
 * @see {@link path2} - 2D geometry consisting of ordered points
 * @see {@link poly2} - 2D polygon consisting of ordered vertices
 * @see {@link poly3} - 3D polygon consisting of ordered vertices
 *
 * @module modeling/geometries
 * @example
 * const { geom2, geom3, path2, poly2, poly3 } = require('@jscad/modeling').geometries
 */
module.exports = {
  geom2: __webpack_require__(88934),
  geom3: __webpack_require__(18206),
  path2: __webpack_require__(84345),
  poly2: __webpack_require__(12577),
  poly3: __webpack_require__(71516)
}


/***/ }),

/***/ 26027:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)
const vec2 = __webpack_require__(4138)

const fromPoints = __webpack_require__(42454)
const toPoints = __webpack_require__(49844)

/**
 * Append a series of points to the given geometry that represent an arc.
 * This implementation follows the SVG specifications.
 * @see http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands
 * @param {Object} options - options for construction
 * @param {vec2} options.endpoint - end point of arc (REQUIRED)
 * @param {vec2} [options.radius=[0,0]] - radius of arc (X and Y)
 * @param {Number} [options.xaxisrotation=0] - rotation (RADIANS) of the X axis of the arc with respect to the X axis of the coordinate system
 * @param {Boolean} [options.clockwise=false] - draw an arc clockwise with respect to the center point
 * @param {Boolean} [options.large=false] - draw an arc longer than TAU / 2 radians
 * @param {Number} [options.segments=16] - number of segments per full rotation
 * @param {path2} geometry - the path of which to append the arc
 * @returns {path2} a new path with the appended points
 * @alias module:modeling/geometries/path2.appendArc
 *
 * @example
 * let p1 = path2.fromPoints({}, [[27.5,-22.96875]]);
 * p1 = path2.appendPoints([[27.5,-3.28125]], p1);
 * p1 = path2.appendArc({endpoint: [12.5, -22.96875], radius: [15, -19.6875]}, p1);
 */
const appendArc = (options, geometry) => {
  const defaults = {
    radius: [0, 0], // X and Y radius
    xaxisrotation: 0,
    clockwise: false,
    large: false,
    segments: 16
  }
  let { endpoint, radius, xaxisrotation, clockwise, large, segments } = Object.assign({}, defaults, options)

  // validate the given options
  if (!Array.isArray(endpoint)) throw new Error('endpoint must be an array of X and Y values')
  if (endpoint.length < 2) throw new Error('endpoint must contain X and Y values')
  endpoint = vec2.clone(endpoint)

  if (!Array.isArray(radius)) throw new Error('radius must be an array of X and Y values')
  if (radius.length < 2) throw new Error('radius must contain X and Y values')

  if (segments < 4) throw new Error('segments must be four or more')

  const decimals = 100000

  // validate the given geometry
  if (geometry.isClosed) {
    throw new Error('the given path cannot be closed')
  }

  const points = toPoints(geometry)
  if (points.length < 1) {
    throw new Error('the given path must contain one or more points (as the starting point for the arc)')
  }

  let xradius = radius[0]
  let yradius = radius[1]
  const startpoint = points[points.length - 1]

  // round to precision in order to have determinate calculations
  xradius = Math.round(xradius * decimals) / decimals
  yradius = Math.round(yradius * decimals) / decimals
  endpoint = vec2.fromValues(Math.round(endpoint[0] * decimals) / decimals, Math.round(endpoint[1] * decimals) / decimals)

  const sweepFlag = !clockwise
  let newpoints = []
  if ((xradius === 0) || (yradius === 0)) {
    // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:
    // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop
    newpoints.push(endpoint)
  } else {
    xradius = Math.abs(xradius)
    yradius = Math.abs(yradius)

    // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :
    const phi = xaxisrotation
    const cosphi = Math.cos(phi)
    const sinphi = Math.sin(phi)
    const minushalfdistance = vec2.subtract(vec2.create(), startpoint, endpoint)
    vec2.scale(minushalfdistance, minushalfdistance, 0.5)
    // F.6.5.1:
    // round to precision in order to have determinate calculations
    const x = Math.round((cosphi * minushalfdistance[0] + sinphi * minushalfdistance[1]) * decimals) / decimals
    const y = Math.round((-sinphi * minushalfdistance[0] + cosphi * minushalfdistance[1]) * decimals) / decimals
    const startTranslated = vec2.fromValues(x, y)
    // F.6.6.2:
    const biglambda = (startTranslated[0] * startTranslated[0]) / (xradius * xradius) + (startTranslated[1] * startTranslated[1]) / (yradius * yradius)
    if (biglambda > 1.0) {
      // F.6.6.3:
      const sqrtbiglambda = Math.sqrt(biglambda)
      xradius *= sqrtbiglambda
      yradius *= sqrtbiglambda
      // round to precision in order to have determinate calculations
      xradius = Math.round(xradius * decimals) / decimals
      yradius = Math.round(yradius * decimals) / decimals
    }
    // F.6.5.2:
    let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * startTranslated[1] * startTranslated[1] - yradius * yradius * startTranslated[0] * startTranslated[0]) / (xradius * xradius * startTranslated[1] * startTranslated[1] + yradius * yradius * startTranslated[0] * startTranslated[0]))
    if (sweepFlag === large) multiplier1 = -multiplier1
    const centerTranslated = vec2.fromValues(xradius * startTranslated[1] / yradius, -yradius * startTranslated[0] / xradius)
    vec2.scale(centerTranslated, centerTranslated, multiplier1)
    // F.6.5.3:
    let center = vec2.fromValues(cosphi * centerTranslated[0] - sinphi * centerTranslated[1], sinphi * centerTranslated[0] + cosphi * centerTranslated[1])
    center = vec2.add(center, center, vec2.scale(vec2.create(), vec2.add(vec2.create(), startpoint, endpoint), 0.5))

    // F.6.5.5:
    const vector1 = vec2.fromValues((startTranslated[0] - centerTranslated[0]) / xradius, (startTranslated[1] - centerTranslated[1]) / yradius)
    const vector2 = vec2.fromValues((-startTranslated[0] - centerTranslated[0]) / xradius, (-startTranslated[1] - centerTranslated[1]) / yradius)
    const theta1 = vec2.angleRadians(vector1)
    const theta2 = vec2.angleRadians(vector2)
    let deltatheta = theta2 - theta1
    deltatheta = deltatheta % TAU
    if ((!sweepFlag) && (deltatheta > 0)) {
      deltatheta -= TAU
    } else if ((sweepFlag) && (deltatheta < 0)) {
      deltatheta += TAU
    }

    // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse
    let numsteps = Math.ceil(Math.abs(deltatheta) / TAU * segments) + 1
    if (numsteps < 1) numsteps = 1
    for (let step = 1; step < numsteps; step++) {
      const theta = theta1 + step / numsteps * deltatheta
      const costheta = Math.cos(theta)
      const sintheta = Math.sin(theta)
      // F.6.3.1:
      const point = vec2.fromValues(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta)
      vec2.add(point, point, center)
      newpoints.push(point)
    }
    // ensure end point is precisely what user gave as parameter
    if (numsteps) newpoints.push(options.endpoint)
  }
  newpoints = points.concat(newpoints)
  const result = fromPoints({}, newpoints)
  return result
}

module.exports = appendArc


/***/ }),

/***/ 68312:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)
const vec2 = __webpack_require__(4138)
const vec3 = __webpack_require__(4138)

const appendPoints = __webpack_require__(11444)
const toPoints = __webpack_require__(49844)

/**
 * Append a series of points to the given geometry that represent a Bezier curve.
 * The Bézier curve starts at the last point in the given geometry, and ends at the last control point.
 * The other control points are intermediate control points to transition the curve from start to end points.
 * The first control point may be null to ensure a smooth transition occurs. In this case,
 * the second to last point of the given geometry is mirrored into the control points of the Bezier curve.
 * In other words, the trailing gradient of the geometry matches the new gradient of the curve.
 * @param {Object} options - options for construction
 * @param {Array} options.controlPoints - list of control points (2D) for the bezier curve
 * @param {Number} [options.segment=16] - number of segments per 360 rotation
 * @param {path2} geometry - the path of which to appended points
 * @returns {path2} a new path with the appended points
 * @alias module:modeling/geometries/path2.appendBezier
 *
 * @example
 * let p5 = path2.create({}, [[10,-20]])
 * p5 = path2.appendBezier({controlPoints: [[10,-10],[25,-10],[25,-20]]}, p5);
 * p5 = path2.appendBezier({controlPoints: [null, [25,-30],[40,-30],[40,-20]]}, p5)
 */
const appendBezier = (options, geometry) => {
  const defaults = {
    segments: 16
  }
  let { controlPoints, segments } = Object.assign({}, defaults, options)

  // validate the given options
  if (!Array.isArray(controlPoints)) throw new Error('controlPoints must be an array of one or more points')
  if (controlPoints.length < 1) throw new Error('controlPoints must be an array of one or more points')

  if (segments < 4) throw new Error('segments must be four or more')

  // validate the given geometry
  if (geometry.isClosed) {
    throw new Error('the given geometry cannot be closed')
  }

  const points = toPoints(geometry)
  if (points.length < 1) {
    throw new Error('the given path must contain one or more points (as the starting point for the bezier curve)')
  }

  // make a copy of the control points
  controlPoints = controlPoints.slice()

  // special handling of null control point (only first is allowed)
  const firstControlPoint = controlPoints[0]
  if (firstControlPoint === null) {
    if (controlPoints.length < 2) {
      throw new Error('a null control point must be passed with one more control points')
    }
    // special handling of a previous bezier curve
    let lastBezierControlPoint = points[points.length - 2]
    if ('lastBezierControlPoint' in geometry) {
      lastBezierControlPoint = geometry.lastBezierControlPoint
    }
    if (!Array.isArray(lastBezierControlPoint)) {
      throw new Error('the given path must contain TWO or more points if given a null control point')
    }
    // replace the first control point with the mirror of the last bezier control point
    const controlpoint = vec2.scale(vec2.create(), points[points.length - 1], 2)
    vec2.subtract(controlpoint, controlpoint, lastBezierControlPoint)

    controlPoints[0] = controlpoint
  }

  // add a control point for the previous end point
  controlPoints.unshift(points[points.length - 1])

  const bezierOrder = controlPoints.length - 1
  const factorials = []
  let fact = 1
  for (let i = 0; i <= bezierOrder; ++i) {
    if (i > 0) fact *= i
    factorials.push(fact)
  }

  const binomials = []
  for (let i = 0; i <= bezierOrder; ++i) {
    const binomial = factorials[bezierOrder] / (factorials[i] * factorials[bezierOrder - i])
    binomials.push(binomial)
  }

  const v0 = vec2.create()
  const v1 = vec2.create()
  const v3 = vec3.create()
  const getPointForT = (t) => {
    let tk = 1 // = pow(t,k)
    let oneMinusTNMinusK = Math.pow(1 - t, bezierOrder) // = pow( 1-t, bezierOrder - k)
    const invOneMinusT = (t !== 1) ? (1 / (1 - t)) : 1
    const point = vec2.create() // 0, 0, 0
    for (let k = 0; k <= bezierOrder; ++k) {
      if (k === bezierOrder) oneMinusTNMinusK = 1
      const bernsteinCoefficient = binomials[k] * tk * oneMinusTNMinusK
      const derivativePoint = vec2.scale(v0, controlPoints[k], bernsteinCoefficient)
      vec2.add(point, point, derivativePoint)
      tk *= t
      oneMinusTNMinusK *= invOneMinusT
    }
    return point
  }

  const newpoints = []
  const newpointsT = []
  const numsteps = bezierOrder + 1
  for (let i = 0; i < numsteps; ++i) {
    const t = i / (numsteps - 1)
    const point = getPointForT(t)
    newpoints.push(point)
    newpointsT.push(t)
  }

  // subdivide each segment until the angle at each vertex becomes small enough:
  let subdivideBase = 1
  const maxangle = TAU / segments
  const maxsinangle = Math.sin(maxangle)
  while (subdivideBase < newpoints.length - 1) {
    const dir1 = vec2.subtract(v0, newpoints[subdivideBase], newpoints[subdivideBase - 1])
    vec2.normalize(dir1, dir1)
    const dir2 = vec2.subtract(v1, newpoints[subdivideBase + 1], newpoints[subdivideBase])
    vec2.normalize(dir2, dir2)
    const sinangle = vec2.cross(v3, dir1, dir2) // the sine of the angle
    if (Math.abs(sinangle[2]) > maxsinangle) {
      // angle is too big, we need to subdivide
      const t0 = newpointsT[subdivideBase - 1]
      const t1 = newpointsT[subdivideBase + 1]
      const newt0 = t0 + (t1 - t0) * 1 / 3
      const newt1 = t0 + (t1 - t0) * 2 / 3
      const point0 = getPointForT(newt0)
      const point1 = getPointForT(newt1)
      // remove the point at subdivideBase and replace with 2 new points:
      newpoints.splice(subdivideBase, 1, point0, point1)
      newpointsT.splice(subdivideBase, 1, newt0, newt1)
      // re - evaluate the angles, starting at the previous junction since it has changed:
      subdivideBase--
      if (subdivideBase < 1) subdivideBase = 1
    } else {
      ++subdivideBase
    }
  }

  // append to the new points to the given path
  // but skip the first new point because it is identical to the last point in the given path
  newpoints.shift()
  const result = appendPoints(newpoints, geometry)
  result.lastBezierControlPoint = controlPoints[controlPoints.length - 2]
  return result
}

module.exports = appendBezier


/***/ }),

/***/ 11444:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const concat = __webpack_require__(64574)
const create = __webpack_require__(71492)

/**
 * Append the given list of points to the end of the given geometry.
 * @param {Array} points - the points (2D) to append to the given path
 * @param {path2} geometry - the given path
 * @returns {path2} a new path with the appended points
 * @alias module:modeling/geometries/path2.appendPoints
 * @example
 * let newpath = appendPoints([[3, 4], [4, 5]], oldpath)
 */
const appendPoints = (points, geometry) => concat(geometry, create(points))

module.exports = appendPoints


/***/ }),

/***/ 51856:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec2 = __webpack_require__(4138)

/*
 * Apply the transforms of the given geometry.
 * NOTE: This function must be called BEFORE exposing any data. See toPoints.
 * @param {path} geometry - the geometry to transform
 * @returns {path} the given geometry
 * @example
 * geometry = applyTransforms(geometry)
 */
const applyTransforms = (geometry) => {
  if (mat4.isIdentity(geometry.transforms)) return geometry

  geometry.points = geometry.points.map((point) => vec2.transform(vec2.create(), point, geometry.transforms))
  geometry.transforms = mat4.create()
  return geometry
}

module.exports = applyTransforms


/***/ }),

/***/ 28547:
/***/ ((module) => {

/**
 * Performs a shallow clone of the give geometry.
 * @param {path2} geometry - the geometry to clone
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.clone
 */
const clone = (geometry) => Object.assign({}, geometry)

module.exports = clone


/***/ }),

/***/ 9789:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const vec2 = __webpack_require__(4138)

const clone = __webpack_require__(28547)

/**
 * Close the given geometry.
 * @param {path2} geometry - the path to close
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.close
 */
const close = (geometry) => {
  if (geometry.isClosed) return geometry

  const cloned = clone(geometry)
  cloned.isClosed = true

  if (cloned.points.length > 1) {
    // make sure the paths are formed properly
    const points = cloned.points
    const p0 = points[0]
    let pn = points[points.length - 1]
    while (vec2.distance(p0, pn) < (EPS * EPS)) {
      points.pop()
      if (points.length === 1) break
      pn = points[points.length - 1]
    }
  }
  return cloned
}

module.exports = close


/***/ }),

/***/ 64574:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const fromPoints = __webpack_require__(42454)
const toPoints = __webpack_require__(49844)

const { equals } = __webpack_require__(4138)

/**
 * Concatenate the given paths.
 *
 * If both contain the same point at the junction, merge it into one.
 * A concatenation of zero paths is an empty, open path.
 * A concatenation of one closed path to a series of open paths produces a closed path.
 * A concatenation of a path to a closed path is an error.
 * @param {...path2} paths - the paths to concatenate
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.concat
 *
 * @example
 * let newpath = concat(fromPoints({}, [[1, 2]]), fromPoints({}, [[3, 4]]))
 */
const concat = (...paths) => {
  // Only the last path can be closed, producing a closed path.
  let isClosed = false
  let newpoints = []
  paths.forEach((path, i) => {
    const tmp = toPoints(path).slice()
    if (newpoints.length > 0 && tmp.length > 0 && equals(tmp[0], newpoints[newpoints.length - 1])) tmp.shift()
    if (tmp.length > 0 && isClosed) {
      throw new Error(`Cannot concatenate to a closed path; check the ${i}th path`)
    }
    isClosed = path.isClosed
    newpoints = newpoints.concat(tmp)
  })
  return fromPoints({ closed: isClosed }, newpoints)
}

module.exports = concat


/***/ }),

/***/ 71492:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

/**
 * Represents a 2D geometry consisting of a list of ordered points.
 * @typedef {Object} path2
 * @property {Array} points - list of ordered points
 * @property {Boolean} isClosed - true if the path is closed where start and end points are the same
 * @property {mat4} transforms - transforms to apply to the points, see transform()
 */

/**
 * Create an empty, open path.
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.create
 *
 * @example
 * let newpath = create()
 */
const create = (points) => {
  if (points === undefined) {
    points = []
  }
  return {
    points: points,
    isClosed: false,
    transforms: mat4.create()
  }
}

module.exports = create


/***/ }),

/***/ 94534:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const toPoints = __webpack_require__(49844)

/**
  * Determine if the given paths are equal.
  * For closed paths, this includes equality under point order rotation.
  * @param {path2} a - the first path to compare
  * @param {path2} b - the second path to compare
  * @returns {Boolean}
  * @alias module:modeling/geometries/path2.equals
  */
const equals = (a, b) => {
  if (a.isClosed !== b.isClosed) {
    return false
  }
  if (a.points.length !== b.points.length) {
    return false
  }

  const apoints = toPoints(a)
  const bpoints = toPoints(b)

  // closed paths might be equal under graph rotation
  // so try comparison by rotating across all points
  const length = apoints.length
  let offset = 0
  do {
    let unequal = false
    for (let i = 0; i < length; i++) {
      if (!vec2.equals(apoints[i], bpoints[(i + offset) % length])) {
        unequal = true
        break
      }
    }
    if (unequal === false) {
      return true
    }
    // unequal open paths should only be compared once, never rotated
    if (!a.isClosed) {
      return false
    }
  } while (++offset < length)
  return false
}

module.exports = equals


/***/ }),

/***/ 36738:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec2 = __webpack_require__(4138)

const create = __webpack_require__(71492)

/**
 * Create a new path from the given compact binary data.
 * @param {TypedArray} data - compact binary data
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.fromCompactBinary
 */
const fromCompactBinary = (data) => {
  if (data[0] !== 2) throw new Error('invalid compact binary data')

  const created = create()

  created.transforms = mat4.clone(data.slice(1, 17))

  created.isClosed = !!data[17]

  for (let i = 22; i < data.length; i += 2) {
    const point = vec2.fromValues(data[i], data[i + 1])
    created.points.push(point)
  }
  // transfer known properties, i.e. color
  if (data[18] >= 0) {
    created.color = [data[18], data[19], data[20], data[21]]
  }
  // TODO: how about custom properties or fields ?
  return created
}

module.exports = fromCompactBinary


/***/ }),

/***/ 42454:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const vec2 = __webpack_require__(4138)

const close = __webpack_require__(9789)
const create = __webpack_require__(71492)

/**
 * Create a new path from the given points.
 * The points must be provided an array of points,
 * where each point is an array of two numbers.
 * @param {Object} options - options for construction
 * @param {Boolean} [options.closed=false] - if the path should be open or closed
 * @param {Array} points - array of points (2D) from which to create the path
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.fromPoints
 *
 * @example:
 * my newpath = fromPoints({closed: true}, [[10, 10], [-10, 10]])
 */
const fromPoints = (options, points) => {
  const defaults = { closed: false }
  let { closed } = Object.assign({}, defaults, options)

  let created = create()
  created.points = points.map((point) => vec2.clone(point))

  // check if first and last points are equal
  if (created.points.length > 1) {
    const p0 = created.points[0]
    const pn = created.points[created.points.length - 1]
    if (vec2.distance(p0, pn) < (EPS * EPS)) {
      // and close automatically
      closed = true
    }
  }
  if (closed === true) created = close(created)

  return created
}

module.exports = fromPoints


/***/ }),

/***/ 84345:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a 2D geometry consisting of a list of ordered points.
 * @see {@link path2} for data structure information.
 * @module modeling/geometries/path2
 *
 * @example
 * colorize([0,0,0,1], path2.fromPoints({ closed: true }, [[0,0], [4,0], [4,3]]))
 *
 * @example
 * {
 *   "points": [[0,0], [4,0], [4,3]],
 *   "isClosed": true,
 *   "transforms": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],
 *   "color": [0,0,0,1]
 * }
 */
module.exports = {
  appendArc: __webpack_require__(26027),
  appendBezier: __webpack_require__(68312),
  appendPoints: __webpack_require__(11444),
  clone: __webpack_require__(28547),
  close: __webpack_require__(9789),
  concat: __webpack_require__(64574),
  create: __webpack_require__(71492),
  equals: __webpack_require__(94534),
  fromPoints: __webpack_require__(42454),
  fromCompactBinary: __webpack_require__(36738),
  isA: __webpack_require__(16736),
  reverse: __webpack_require__(13993),
  toPoints: __webpack_require__(49844),
  toString: __webpack_require__(29054),
  toCompactBinary: __webpack_require__(89529),
  transform: __webpack_require__(53514),
  validate: __webpack_require__(37316)
}


/***/ }),

/***/ 16736:
/***/ ((module) => {

/**
 * Determine if the given object is a path2 geometry.
 * @param {Object} object - the object to interrogate
 * @returns {Boolean} true if the object matches a path2
 * @alias module:modeling/geometries/path2.isA
 */
const isA = (object) => {
  if (object && typeof object === 'object') {
    // see create for the required attributes and types
    if ('points' in object && 'transforms' in object && 'isClosed' in object) {
      // NOTE: transforms should be a TypedArray, which has a read-only length
      if (Array.isArray(object.points) && 'length' in object.transforms) {
        return true
      }
    }
  }
  return false
}

module.exports = isA


/***/ }),

/***/ 13993:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const clone = __webpack_require__(28547)

/**
 * Reverses the path so that the points are in the opposite order.
 * This swaps the left (interior) and right (exterior) edges.
 * @param {path2} geometry - the path to reverse
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.reverse
 *
 * @example
 * let newpath = reverse(mypath)
 */
const reverse = (geometry) => {
  // NOTE: this only updates the order of the points
  const cloned = clone(geometry)
  cloned.points = geometry.points.slice().reverse()
  return cloned
}

module.exports = reverse


/***/ }),

/***/ 89529:
/***/ ((module) => {

/**
 * Produce a compact binary representation from the given path.
 * @param {path2} geometry - the path geometry
 * @returns {TypedArray} compact binary representation
 * @alias module:modeling/geometries/path2.toCompactBinary
 */
const toCompactBinary = (geometry) => {
  const points = geometry.points
  const transforms = geometry.transforms
  let color = [-1, -1, -1, -1]
  if (geometry.color) color = geometry.color

  // FIXME why Float32Array?
  const compacted = new Float32Array(1 + 16 + 1 + 4 + (points.length * 2)) // type + transforms + isClosed + color + points data

  compacted[0] = 2 // type code: 0 => geom2, 1 => geom3 , 2 => path2

  compacted[1] = transforms[0]
  compacted[2] = transforms[1]
  compacted[3] = transforms[2]
  compacted[4] = transforms[3]
  compacted[5] = transforms[4]
  compacted[6] = transforms[5]
  compacted[7] = transforms[6]
  compacted[8] = transforms[7]
  compacted[9] = transforms[8]
  compacted[10] = transforms[9]
  compacted[11] = transforms[10]
  compacted[12] = transforms[11]
  compacted[13] = transforms[12]
  compacted[14] = transforms[13]
  compacted[15] = transforms[14]
  compacted[16] = transforms[15]

  compacted[17] = geometry.isClosed ? 1 : 0

  compacted[18] = color[0]
  compacted[19] = color[1]
  compacted[20] = color[2]
  compacted[21] = color[3]

  for (let j = 0; j < points.length; j++) {
    const ci = j * 2 + 22
    const point = points[j]
    compacted[ci] = point[0]
    compacted[ci + 1] = point[1]
  }
  // TODO: how about custom properties or fields ?
  return compacted
}

module.exports = toCompactBinary


/***/ }),

/***/ 49844:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const applyTransforms = __webpack_require__(51856)

/**
 * Produces an array of points from the given geometry.
 * The returned array should not be modified as the data is shared with the geometry.
 * @param {path2} geometry - the geometry
 * @returns {Array} an array of points
 * @alias module:modeling/geometries/path2.toPoints
 *
 * @example
 * let sharedpoints = toPoints(geometry)
 */
const toPoints = (geometry) => applyTransforms(geometry).points

module.exports = toPoints


/***/ }),

/***/ 29054:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const toPoints = __webpack_require__(49844)

/**
 * Create a string representing the contents of the given path.
 * @param {path2} geometry - the path
 * @returns {String} a representative string
 * @alias module:modeling/geometries/path2.toString
 *
 * @example
 * console.out(toString(path))
 */
const toString = (geometry) => {
  const points = toPoints(geometry)
  let result = 'path (' + points.length + ' points, ' + geometry.isClosed + '):\n[\n'
  points.forEach((point) => {
    result += '  ' + vec2.toString(point) + ',\n'
  })
  result += ']\n'
  return result
}

module.exports = toString


/***/ }),

/***/ 53514:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

/**
 * Transform the given geometry using the given matrix.
 * This is a lazy transform of the points, as this function only adjusts the transforms.
 * The transforms are applied when accessing the points via toPoints().
 * @param {mat4} matrix - the matrix to transform with
 * @param {path2} geometry - the geometry to transform
 * @returns {path2} a new path
 * @alias module:modeling/geometries/path2.transform
 *
 * @example
 * let newpath = transform(fromZRotation(TAU / 8), path)
 */
const transform = (matrix, geometry) => {
  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)
  return Object.assign({}, geometry, { transforms })
}

module.exports = transform


/***/ }),

/***/ 37316:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)
const isA = __webpack_require__(16736)

/**
 * Determine if the given object is a valid path2.
 * Checks for valid data points, and duplicate points.
 *
 * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**
 *
 * @param {Object} object - the object to interrogate
 * @throws {Error} error if the geometry is not valid
 * @alias module:modeling/geometries/path2.validate
 */
const validate = (object) => {
  if (!isA(object)) {
    throw new Error('invalid path2 structure')
  }

  // check for duplicate points
  if (object.points.length > 1) {
    for (let i = 0; i < object.points.length; i++) {
      if (vec2.equals(object.points[i], object.points[(i + 1) % object.points.length])) {
        throw new Error(`path2 duplicate points ${object.points[i]}`)
      }
    }
  }

  // check for infinity, nan
  object.points.forEach((point) => {
    if (!point.every(Number.isFinite)) {
      throw new Error(`path2 invalid point ${point}`)
    }
  })

  // check transforms
  if (!object.transforms.every(Number.isFinite)) {
    throw new Error(`path2 invalid transforms ${object.transforms}`)
  }
}

module.exports = validate


/***/ }),

/***/ 47950:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const measureArea = __webpack_require__(69)
const flip = __webpack_require__(37166)

/**
 * Determine if the given points are inside the given polygon.
 *
 * @param {Array} points - a list of points, where each point is an array with X and Y values
 * @param {poly2} polygon - a 2D polygon
 * @return {Integer} 1 if all points are inside, 0 if some or none are inside
 * @alias module:modeling/geometries/poly2.arePointsInside
 */
const arePointsInside = (points, polygon) => {
  if (points.length === 0) return 0 // nothing to check

  const vertices = polygon.vertices
  if (vertices.length < 3) return 0 // nothing can be inside an empty polygon

  if (measureArea(polygon) < 0) {
    polygon = flip(polygon) // CCW is required
  }

  const sum = points.reduce((acc, point) => acc + isPointInside(point, vertices), 0)
  return sum === points.length ? 1 : 0
}

/*
 * Determine if the given point is inside the polygon.
 *
 * @see http://erich.realtimerendering.com/ptinpoly/ (Crossings Test)
 * @param {Array} point - an array with X and Y values
 * @param {Array} polygon - a list of points, where each point is an array with X and Y values
 * @return {Integer} 1 if the point is inside, 0 if outside
 */
const isPointInside = (point, polygon) => {
  const numverts = polygon.length

  const tx = point[0]
  const ty = point[1]

  let vtx0 = polygon[numverts - 1]
  let vtx1 = polygon[0]

  let yflag0 = (vtx0[1] > ty)

  let insideFlag = 0

  let i = 0
  for (let j = (numverts + 1); --j;) {
    /*
     * check if Y endpoints straddle (are on opposite sides) of point's Y
     * if so, +X ray could intersect this edge.
     */
    const yflag1 = (vtx1[1] > ty)
    if (yflag0 !== yflag1) {
      /*
       * check if X endpoints are on same side of the point's X
       * if so, it's easy to test if edge hits or misses.
       */
      const xflag0 = (vtx0[0] > tx)
      const xflag1 = (vtx1[0] > tx)
      if (xflag0 && xflag1) {
        /* if edge's X values are both right of the point, then the point must be inside */
        insideFlag = !insideFlag
      } else {
        /*
         * if X endpoints straddle the point, then
         * the compute intersection of polygon edge with +X ray
         * if intersection >= point's X then the +X ray hits it.
         */
        if ((vtx1[0] - (vtx1[1] - ty) * (vtx0[0] - vtx1[0]) / (vtx0[1] - vtx1[1])) >= tx) {
          insideFlag = !insideFlag
        }
      }
    }
    /* move to next pair of vertices, retaining info as possible */
    yflag0 = yflag1
    vtx0 = vtx1
    vtx1 = polygon[++i]
  }
  return insideFlag
}

/*
 * > 0 : p2 is left of the line p0 -> p1
 * = 0 : p2 is on the line p0 -> p1
 * < 0 : p2 is right of the line p0 -> p1
 */
const isLeft = (p0, p1, p2) => (p1[0] - p0[0]) * (p2[1] - p0[1]) - (p2[0] - p0[0]) * (p1[1] - p0[1])

module.exports = arePointsInside


/***/ }),

/***/ 89573:
/***/ ((module) => {

/**
 * Represents a convex 2D polygon consisting of a list of ordered vertices.
 * @typedef {Object} poly2
 * @property {Array} vertices - list of ordered vertices (2D)
 */

/**
 * Creates a new polygon with initial values.
 *
 * @param {Array} [vertices] - list of vertices (2D)
 * @returns {poly2} a new polygon
 * @alias module:modeling/geometries/poly2.create
 *
 * @example
 * let polygon = create()
 */
const create = (vertices) => {
  if (vertices === undefined || vertices.length < 3) {
    vertices = [] // empty contents
  }
  return { vertices: vertices }
}

module.exports = create


/***/ }),

/***/ 37166:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(89573)

/**
 * Flip the give polygon, rotating the opposite direction.
 *
 * @param {poly2} polygon - the polygon to flip
 * @returns {poly2} a new polygon
 * @alias module:modeling/geometries/poly2.flip
 */
const flip = (polygon) => {
  const vertices = polygon.vertices.slice().reverse()
  return create(vertices)
}

module.exports = flip


/***/ }),

/***/ 12577:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a 2D polygon consisting of a list of ordered vertices.
 * @see {@link poly2} for data structure information.
 * @module modeling/geometries/poly2
 *
 * @example
 * poly2.create([[0,0], [4,0], [4,3]])
 *
 * @example
 * {"vertices": [[0,0], [4,0], [4,3]]}
 */
module.exports = {
  arePointsInside: __webpack_require__(47950),
  create: __webpack_require__(89573),
  flip: __webpack_require__(37166),
  measureArea: __webpack_require__(69)
}


/***/ }),

/***/ 69:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Measure the area under the given polygon.
 *
 * @param {poly2} polygon - the polygon to measure
 * @return {Number} the area of the polygon
 * @alias module:modeling/geometries/poly2.measureArea
 */
const area = __webpack_require__(1091)

const measureArea = (polygon) => area(polygon.vertices)

module.exports = measureArea


/***/ }),

/***/ 98147:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(85648)

const vec3 = __webpack_require__(14171)

/**
 * Create a deep clone of the given polygon
 *
 * @param {poly3} [out] - receiving polygon
 * @param {poly3} polygon - polygon to clone
 * @returns {poly3} a new polygon
 * @alias module:modeling/geometries/poly3.clone
 */
const clone = (...params) => {
  let out
  let poly3
  if (params.length === 1) {
    out = create()
    poly3 = params[0]
  } else {
    out = params[0]
    poly3 = params[1]
  }
  // deep clone of vertices
  out.vertices = poly3.vertices.map((vec) => vec3.clone(vec))
  return out
}

module.exports = clone


/***/ }),

/***/ 85648:
/***/ ((module) => {


/**
 * Represents a convex 3D polygon. The vertices used to initialize a polygon must
 * be coplanar and form a convex shape. The vertices do not have to be `vec3`
 * instances but they must behave similarly.
 * @typedef {Object} poly3
 * @property {Array} vertices - list of ordered vertices (3D)
 */

/**
 * Creates a new 3D polygon with initial values.
 *
 * @param {Array} [vertices] - a list of vertices (3D)
 * @returns {poly3} a new polygon
 * @alias module:modeling/geometries/poly3.create
 */
const create = (vertices) => {
  if (vertices === undefined || vertices.length < 3) {
    vertices = [] // empty contents
  }
  return { vertices }
}

module.exports = create


/***/ }),

/***/ 32630:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const create = __webpack_require__(85648)

/**
 * Create a polygon from the given points.
 *
 * @param {Array} points - list of points (3D)
 * @returns {poly3} a new polygon
 * @alias module:modeling/geometries/poly3.fromPoints
 *
 * @example
 * const points = [
 *   [0,  0, 0],
 *   [0, 10, 0],
 *   [0, 10, 10]
 * ]
 * const polygon = fromPoints(points)
 */
const fromPoints = (points) => {
  const vertices = points.map((point) => vec3.clone(point))
  return create(vertices)
}

module.exports = fromPoints


/***/ }),

/***/ 36590:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(85648)

/**
 * Create a polygon from the given vertices and plane.
 * NOTE: No checks are performed on the parameters.
 * @param {Array} vertices - list of vertices (3D)
 * @param {plane} plane - plane of the polygon
 * @returns {poly3} a new polygon
 * @alias module:modeling/geometries/poly3.fromPointsAndPlane
 */
const fromPointsAndPlane = (vertices, plane) => {
  const poly = create(vertices)
  poly.plane = plane // retain the plane for later use
  return poly
}

module.exports = fromPointsAndPlane


/***/ }),

/***/ 71516:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a convex 3D polygon consisting of a list of ordered vertices.
 * @see {@link poly3} for data structure information.
 * @module modeling/geometries/poly3
 *
 * @example
 * poly3.create([[0,0,0], [4,0,0], [4,3,12]])
 *
 * @example
 * {"vertices": [[0,0,0], [4,0,0], [4,3,12]]}
 */
module.exports = {
  clone: __webpack_require__(98147),
  create: __webpack_require__(85648),
  fromPoints: __webpack_require__(32630),
  fromPointsAndPlane: __webpack_require__(36590),
  invert: __webpack_require__(75307),
  isA: __webpack_require__(26908),
  isConvex: __webpack_require__(67657),
  measureArea: __webpack_require__(18841),
  measureBoundingBox: __webpack_require__(8469),
  measureBoundingSphere: __webpack_require__(31714),
  measureSignedVolume: __webpack_require__(26294),
  plane: __webpack_require__(87841),
  toPoints: __webpack_require__(49215),
  toString: __webpack_require__(66878),
  transform: __webpack_require__(9032),
  validate: __webpack_require__(14800)
}


/***/ }),

/***/ 75307:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const plane = __webpack_require__(68646)
const create = __webpack_require__(85648)

/**
 * Invert the give polygon to face the opposite direction.
 *
 * @param {poly3} polygon - the polygon to invert
 * @returns {poly3} a new poly3
 * @alias module:modeling/geometries/poly3.invert
 */
const invert = (polygon) => {
  const vertices = polygon.vertices.slice().reverse()
  const inverted = create(vertices)
  if (polygon.plane) {
    // Flip existing plane to save recompute
    inverted.plane = plane.flip(plane.create(), polygon.plane)
  }
  return inverted
}

module.exports = invert


/***/ }),

/***/ 26908:
/***/ ((module) => {

/**
 * Determine if the given object is a polygon.
 * @param {Object} object - the object to interrogate
 * @returns {Boolean} true if the object matches a poly3
 * @alias module:modeling/geometries/poly3.isA
 */
const isA = (object) => {
  if (object && typeof object === 'object') {
    if ('vertices' in object) {
      if (Array.isArray(object.vertices)) {
        return true
      }
    }
  }
  return false
}

module.exports = isA


/***/ }),

/***/ 67657:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const plane = __webpack_require__(68646)
const vec3 = __webpack_require__(14171)

/**
 * Check whether the given polygon is convex.
 * @param {poly3} polygon - the polygon to interrogate
 * @returns {Boolean} true if convex
 * @alias module:modeling/geometries/poly3.isConvex
 */
const isConvex = (polygon) => areVerticesConvex(polygon.vertices)

const areVerticesConvex = (vertices) => {
  const numvertices = vertices.length
  if (numvertices > 2) {
    // note: plane ~= normal point
    const normal = plane.fromPoints(plane.create(), ...vertices)
    let prevprevpos = vertices[numvertices - 2]
    let prevpos = vertices[numvertices - 1]
    for (let i = 0; i < numvertices; i++) {
      const pos = vertices[i]
      if (!isConvexPoint(prevprevpos, prevpos, pos, normal)) {
        return false
      }
      prevprevpos = prevpos
      prevpos = pos
    }
  }
  return true
}

// calculate whether three points form a convex corner
//  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)
//  normal: the normal vector of the plane
const isConvexPoint = (prevpoint, point, nextpoint, normal) => {
  const crossproduct = vec3.cross(
    vec3.create(),
    vec3.subtract(vec3.create(), point, prevpoint),
    vec3.subtract(vec3.create(), nextpoint, point)
  )
  const crossdotnormal = vec3.dot(crossproduct, normal)
  return crossdotnormal >= 0
}

module.exports = isConvex


/***/ }),

/***/ 18841:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const plane = __webpack_require__(87841)

/**
 * Measure the area of the given polygon.
 * @see 2000 softSurfer http://geomalgorithms.com
 * @param {poly3} polygon - the polygon to measure
 * @return {Number} area of the polygon
 * @alias module:modeling/geometries/poly3.measureArea
 */
const measureArea = (polygon) => {
  const n = polygon.vertices.length
  if (n < 3) {
    return 0 // degenerate polygon
  }
  const vertices = polygon.vertices

  // calculate a normal vector
  const normal = plane(polygon)

  // determine direction of projection
  const ax = Math.abs(normal[0])
  const ay = Math.abs(normal[1])
  const az = Math.abs(normal[2])

  if (ax + ay + az === 0) {
    // normal does not exist
    return 0
  }

  let coord = 3 // ignore Z coordinates
  if ((ax > ay) && (ax > az)) {
    coord = 1 // ignore X coordinates
  } else
  if (ay > az) {
    coord = 2 // ignore Y coordinates
  }

  let area = 0
  let h = 0
  let i = 1
  let j = 2
  switch (coord) {
    case 1: // ignore X coordinates
      // compute area of 2D projection
      for (i = 1; i < n; i++) {
        h = i - 1
        j = (i + 1) % n
        area += (vertices[i][1] * (vertices[j][2] - vertices[h][2]))
      }
      area += (vertices[0][1] * (vertices[1][2] - vertices[n - 1][2]))
      // scale to get area
      area /= (2 * normal[0])
      break

    case 2: // ignore Y coordinates
      // compute area of 2D projection
      for (i = 1; i < n; i++) {
        h = i - 1
        j = (i + 1) % n
        area += (vertices[i][2] * (vertices[j][0] - vertices[h][0]))
      }
      area += (vertices[0][2] * (vertices[1][0] - vertices[n - 1][0]))
      // scale to get area
      area /= (2 * normal[1])
      break

    case 3: // ignore Z coordinates
    default:
      // compute area of 2D projection
      for (i = 1; i < n; i++) {
        h = i - 1
        j = (i + 1) % n
        area += (vertices[i][0] * (vertices[j][1] - vertices[h][1]))
      }
      area += (vertices[0][0] * (vertices[1][1] - vertices[n - 1][1]))
      // scale to get area
      area /= (2 * normal[2])
      break
  }
  return area
}

module.exports = measureArea


/***/ }),

/***/ 8469:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * @param {poly3} polygon - the polygon to measure
 * @returns {Array} an array of two vectors (3D);  minimum and maximum coordinates
 * @alias module:modeling/geometries/poly3.measureBoundingBox
 */
const measureBoundingBox = (polygon) => {
  const vertices = polygon.vertices
  const numvertices = vertices.length
  const min = numvertices === 0 ? vec3.create() : vec3.clone(vertices[0])
  const max = vec3.clone(min)
  for (let i = 1; i < numvertices; i++) {
    vec3.min(min, min, vertices[i])
    vec3.max(max, max, vertices[i])
  }
  return [min, max]
}

module.exports = measureBoundingBox


/***/ }),

/***/ 31714:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)
const vec4 = __webpack_require__(33870)

const cache = new WeakMap()

/**
 * Measure the bounding sphere of the given polygon.
 * @param {poly3} polygon - the polygon to measure
 * @returns {vec4} the computed bounding sphere; center point (3D) and radius
 * @alias module:modeling/geometries/poly3.measureBoundingSphere
 */
const measureBoundingSphere = (polygon) => {
  let boundingSphere = cache.get(polygon)
  if (boundingSphere) return boundingSphere

  const vertices = polygon.vertices
  const out = vec4.create()

  if (vertices.length === 0) {
    out[0] = 0
    out[1] = 0
    out[2] = 0
    out[3] = 0
    return out
  }

  // keep a list of min/max vertices by axis
  let minx = vertices[0]
  let miny = minx
  let minz = minx
  let maxx = minx
  let maxy = minx
  let maxz = minx

  vertices.forEach((v) => {
    if (minx[0] > v[0]) minx = v
    if (miny[1] > v[1]) miny = v
    if (minz[2] > v[2]) minz = v
    if (maxx[0] < v[0]) maxx = v
    if (maxy[1] < v[1]) maxy = v
    if (maxz[2] < v[2]) maxz = v
  })

  out[0] = (minx[0] + maxx[0]) * 0.5 // center of sphere
  out[1] = (miny[1] + maxy[1]) * 0.5
  out[2] = (minz[2] + maxz[2]) * 0.5
  const x = out[0] - maxx[0]
  const y = out[1] - maxy[1]
  const z = out[2] - maxz[2]
  out[3] = Math.sqrt(x * x + y * y + z * z) // radius of sphere

  cache.set(polygon, out)

  return out
}

module.exports = measureBoundingSphere


/***/ }),

/***/ 26294:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Measure the signed volume of the given polygon, which must be convex.
 * The volume is that formed by the tetrahedron connected to the axis [0,0,0],
 * and will be positive or negative based on the rotation of the vertices.
 * @see http://chenlab.ece.cornell.edu/Publication/Cha/icip01_Cha.pdf
 * @param {poly3} polygon - the polygon to measure
 * @return {Number} volume of the polygon
 * @alias module:modeling/geometries/poly3.measureSignedVolume
 */
const measureSignedVolume = (polygon) => {
  let signedVolume = 0
  const vertices = polygon.vertices
  // calculate based on triangular polygons
  const cross = vec3.create()
  for (let i = 0; i < vertices.length - 2; i++) {
    vec3.cross(cross, vertices[i + 1], vertices[i + 2])
    signedVolume += vec3.dot(vertices[0], cross)
  }
  signedVolume /= 6
  return signedVolume
}

module.exports = measureSignedVolume


/***/ }),

/***/ 87841:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mplane = __webpack_require__(68646)

const plane = (polygon) => {
  if (!polygon.plane) {
    polygon.plane = mplane.fromPoints(mplane.create(), ...polygon.vertices)
  }
  return polygon.plane
}

module.exports = plane


/***/ }),

/***/ 49215:
/***/ ((module) => {

/**
 * Return the given polygon as a list of points.
 * NOTE: The returned array should not be modified as the points are shared with the geometry.
 * @param {poly3} polygon - the polygon
 * @return {Array} list of points (3D)
 * @alias module:modeling/geometries/poly3.toPoints
 */
const toPoints = (polygon) => polygon.vertices

module.exports = toPoints


/***/ }),

/***/ 66878:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * @param {poly3} polygon - the polygon to measure
 * @return {String} the string representation
 * @alias module:modeling/geometries/poly3.toString
 */
const toString = (polygon) => {
  let result = 'poly3: vertices: ['
  polygon.vertices.forEach((vertex) => {
    result += `${vec3.toString(vertex)}, `
  })
  result += ']'
  return result
}

module.exports = toString


/***/ }),

/***/ 9032:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec3 = __webpack_require__(14171)

const create = __webpack_require__(85648)

/**
 * Transform the given polygon using the given matrix.
 * @param {mat4} matrix - the matrix to transform with
 * @param {poly3} polygon - the polygon to transform
 * @returns {poly3} a new polygon
 * @alias module:modeling/geometries/poly3.transform
 */
const transform = (matrix, polygon) => {
  const vertices = polygon.vertices.map((vertex) => vec3.transform(vec3.create(), vertex, matrix))
  if (mat4.isMirroring(matrix)) {
    // reverse the order to preserve the orientation
    vertices.reverse()
  }
  return create(vertices)
}

module.exports = transform


/***/ }),

/***/ 14800:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const signedDistanceToPoint = __webpack_require__(57055)
const { NEPS } = __webpack_require__(77022)
const vec3 = __webpack_require__(14171)
const isA = __webpack_require__(26908)
const isConvex = __webpack_require__(67657)
const measureArea = __webpack_require__(18841)
const plane = __webpack_require__(87841)

/**
 * Determine if the given object is a valid polygon.
 * Checks for valid data structure, convex polygons, and duplicate points.
 *
 * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**
 *
 * @param {Object} object - the object to interrogate
 * @throws {Error} error if the geometry is not valid
 * @alias module:modeling/geometries/poly3.validate
 */
const validate = (object) => {
  if (!isA(object)) {
    throw new Error('invalid poly3 structure')
  }

  // check for empty polygon
  if (object.vertices.length < 3) {
    throw new Error(`poly3 not enough vertices ${object.vertices.length}`)
  }
  // check area
  if (measureArea(object) <= 0) {
    throw new Error('poly3 area must be greater than zero')
  }

  // check for duplicate points
  for (let i = 0; i < object.vertices.length; i++) {
    if (vec3.equals(object.vertices[i], object.vertices[(i + 1) % object.vertices.length])) {
      throw new Error(`poly3 duplicate vertex ${object.vertices[i]}`)
    }
  }

  // check convexity
  if (!isConvex(object)) {
    throw new Error('poly3 must be convex')
  }

  // check for infinity, nan
  object.vertices.forEach((vertex) => {
    if (!vertex.every(Number.isFinite)) {
      throw new Error(`poly3 invalid vertex ${vertex}`)
    }
  })

  // check that points are co-planar
  if (object.vertices.length > 3) {
    const normal = plane(object)
    object.vertices.forEach((vertex) => {
      const dist = Math.abs(signedDistanceToPoint(normal, vertex))
      if (dist > NEPS) {
        throw new Error(`poly3 must be coplanar: vertex ${vertex} distance ${dist}`)
      }
    })
  }
}

module.exports = validate


/***/ }),

/***/ 43766:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  colors: __webpack_require__(81457),
  curves: __webpack_require__(50164),
  geometries: __webpack_require__(14484),
  maths: __webpack_require__(26118),
  measurements: __webpack_require__(65589),
  primitives: __webpack_require__(42080),
  text: __webpack_require__(50651),
  utils: __webpack_require__(27377),

  booleans: __webpack_require__(25913),
  expansions: __webpack_require__(38900),
  extrusions: __webpack_require__(92268),
  hulls: __webpack_require__(63534),
  modifiers: __webpack_require__(19341),
  transforms: __webpack_require__(52240)
}


/***/ }),

/***/ 65384:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

const vec2 = __webpack_require__(4138)
const vec3 = __webpack_require__(14171)

/*
 * Class OrthoNormalBasis
 * Reprojects points on a 3D plane onto a 2D plane
 * or from a 2D plane back onto the 3D plane
 * @param  {plane} plane
 * @param  {vec3} rightvector
 */
const OrthoNormalBasis = function (plane, rightvector) {
  if (arguments.length < 2) {
    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal:
    rightvector = vec3.orthogonal(vec3.create(), plane)
  }
  this.v = vec3.normalize(vec3.create(), vec3.cross(vec3.create(), plane, rightvector))
  this.u = vec3.cross(vec3.create(), this.v, plane)
  this.plane = plane
  this.planeorigin = vec3.scale(vec3.create(), plane, plane[3])
}

// Get an orthonormal basis for the standard XYZ planes.
// Parameters: the names of two 3D axes. The 2d x axis will map to the first given 3D axis, the 2d y
// axis will map to the second.
// Prepend the axis with a "-" to invert the direction of this axis.
// For example: OrthoNormalBasis.GetCartesian("-Y","Z")
//   will return an orthonormal basis where the 2d X axis maps to the 3D inverted Y axis, and
//   the 2d Y axis maps to the 3D Z axis.
OrthoNormalBasis.GetCartesian = function (xaxisid, yaxisid) {
  const axisid = xaxisid + '/' + yaxisid
  let planenormal, rightvector
  if (axisid === 'X/Y') {
    planenormal = [0, 0, 1]
    rightvector = [1, 0, 0]
  } else if (axisid === 'Y/-X') {
    planenormal = [0, 0, 1]
    rightvector = [0, 1, 0]
  } else if (axisid === '-X/-Y') {
    planenormal = [0, 0, 1]
    rightvector = [-1, 0, 0]
  } else if (axisid === '-Y/X') {
    planenormal = [0, 0, 1]
    rightvector = [0, -1, 0]
  } else if (axisid === '-X/Y') {
    planenormal = [0, 0, -1]
    rightvector = [-1, 0, 0]
  } else if (axisid === '-Y/-X') {
    planenormal = [0, 0, -1]
    rightvector = [0, -1, 0]
  } else if (axisid === 'X/-Y') {
    planenormal = [0, 0, -1]
    rightvector = [1, 0, 0]
  } else if (axisid === 'Y/X') {
    planenormal = [0, 0, -1]
    rightvector = [0, 1, 0]
  } else if (axisid === 'X/Z') {
    planenormal = [0, -1, 0]
    rightvector = [1, 0, 0]
  } else if (axisid === 'Z/-X') {
    planenormal = [0, -1, 0]
    rightvector = [0, 0, 1]
  } else if (axisid === '-X/-Z') {
    planenormal = [0, -1, 0]
    rightvector = [-1, 0, 0]
  } else if (axisid === '-Z/X') {
    planenormal = [0, -1, 0]
    rightvector = [0, 0, -1]
  } else if (axisid === '-X/Z') {
    planenormal = [0, 1, 0]
    rightvector = [-1, 0, 0]
  } else if (axisid === '-Z/-X') {
    planenormal = [0, 1, 0]
    rightvector = [0, 0, -1]
  } else if (axisid === 'X/-Z') {
    planenormal = [0, 1, 0]
    rightvector = [1, 0, 0]
  } else if (axisid === 'Z/X') {
    planenormal = [0, 1, 0]
    rightvector = [0, 0, 1]
  } else if (axisid === 'Y/Z') {
    planenormal = [1, 0, 0]
    rightvector = [0, 1, 0]
  } else if (axisid === 'Z/-Y') {
    planenormal = [1, 0, 0]
    rightvector = [0, 0, 1]
  } else if (axisid === '-Y/-Z') {
    planenormal = [1, 0, 0]
    rightvector = [0, -1, 0]
  } else if (axisid === '-Z/Y') {
    planenormal = [1, 0, 0]
    rightvector = [0, 0, -1]
  } else if (axisid === '-Y/Z') {
    planenormal = [-1, 0, 0]
    rightvector = [0, -1, 0]
  } else if (axisid === '-Z/-Y') {
    planenormal = [-1, 0, 0]
    rightvector = [0, 0, -1]
  } else if (axisid === 'Y/-Z') {
    planenormal = [-1, 0, 0]
    rightvector = [0, 1, 0]
  } else if (axisid === 'Z/Y') {
    planenormal = [-1, 0, 0]
    rightvector = [0, 0, 1]
  } else {
    throw new Error('OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.')
  }
  return new OrthoNormalBasis(new Plane(new Vector3D(planenormal), 0), new Vector3D(rightvector))
}

/*
// test code for OrthoNormalBasis.GetCartesian()
OrthoNormalBasis.GetCartesian_Test=function() {
  let axisnames=["X","Y","Z","-X","-Y","-Z"];
  let axisvectors=[[1,0,0], [0,1,0], [0,0,1], [-1,0,0], [0,-1,0], [0,0,-1]];
  for(let axis1=0; axis1 < 3; axis1++) {
    for(let axis1inverted=0; axis1inverted < 2; axis1inverted++) {
      let axis1name=axisnames[axis1+3*axis1inverted];
      let axis1vector=axisvectors[axis1+3*axis1inverted];
      for(let axis2=0; axis2 < 3; axis2++) {
        if(axis2 != axis1) {
          for(let axis2inverted=0; axis2inverted < 2; axis2inverted++) {
            let axis2name=axisnames[axis2+3*axis2inverted];
            let axis2vector=axisvectors[axis2+3*axis2inverted];
            let orthobasis=OrthoNormalBasis.GetCartesian(axis1name, axis2name);
            let test1=orthobasis.to3D(new Vector2D([1,0]));
            let test2=orthobasis.to3D(new Vector2D([0,1]));
            let expected1=new Vector3D(axis1vector);
            let expected2=new Vector3D(axis2vector);
            let d1=test1.distanceTo(expected1);
            let d2=test2.distanceTo(expected2);
            if( (d1 > 0.01) || (d2 > 0.01) ) {
              throw new Error("Wrong!");
  }}}}}}
  throw new Error("OK");
};
*/

// The z=0 plane, with the 3D x and y vectors mapped to the 2D x and y vector
OrthoNormalBasis.Z0Plane = function () {
  const plane = new Plane(new Vector3D([0, 0, 1]), 0)
  return new OrthoNormalBasis(plane, new Vector3D([1, 0, 0]))
}

OrthoNormalBasis.prototype = {

  getProjectionMatrix: function () {
    return mat4.fromValues(
      this.u[0], this.v[0], this.plane[0], 0,
      this.u[1], this.v[1], this.plane[1], 0,
      this.u[2], this.v[2], this.plane[2], 0,
      0, 0, -this.plane[3], 1
    )
  },

  getInverseProjectionMatrix: function () {
    const p = vec3.scale(vec3.create(), this.plane, this.plane[3])
    return mat4.fromValues(
      this.u[0], this.u[1], this.u[2], 0,
      this.v[0], this.v[1], this.v[2], 0,
      this.plane[0], this.plane[1], this.plane[2], 0,
      p[0], p[1], p[2], 1
    )
  },

  to2D: function (point) {
    return vec2.fromValues(vec3.dot(point, this.u), vec3.dot(point, this.v))
  },

  to3D: function (point) {
    const v1 = vec3.scale(vec3.create(), this.u, point[0])
    const v2 = vec3.scale(vec3.create(), this.v, point[1])

    const v3 = vec3.add(v1, v1, this.planeorigin)
    const v4 = vec3.add(v2, v2, v3)
    return v4
  },

  line3Dto2D: function (line3d) {
    const a = line3d.point
    const b = line3d.direction.plus(a)
    const a2d = this.to2D(a)
    const b2d = this.to2D(b)
    return Line2D.fromPoints(a2d, b2d)
  },

  line2Dto3D: function (line2d) {
    const a = line2d.origin()
    const b = line2d.direction().plus(a)
    const a3d = this.to3D(a)
    const b3d = this.to3D(b)
    return Line3D.fromPoints(a3d, b3d)
  },

  transform: function (matrix4x4) {
    // todo: this may not work properly in case of mirroring
    const newplane = this.plane.transform(matrix4x4)
    const rightpointTransformed = this.u.transform(matrix4x4)
    const originTransformed = new Vector3D(0, 0, 0).transform(matrix4x4)
    const newrighthandvector = rightpointTransformed.minus(originTransformed)
    const newbasis = new OrthoNormalBasis(newplane, newrighthandvector)
    return newbasis
  }
}

module.exports = OrthoNormalBasis


/***/ }),

/***/ 77022:
/***/ ((module) => {

/**
 * The resolution of space, currently one hundred nanometers.
 * This should be 1 / EPS.
 * @alias module:modeling/maths.spatialResolution
 * @default
 */
const spatialResolution = 1e5

/**
 * Epsilon used during determination of near zero distances.
 * This should be 1 / spacialResolution.
 * @default
 * @alias module:modeling/maths.EPS
 */
const EPS = 1e-5

/**
 * Smaller epsilon used for measuring near zero distances.
 * @default
 * @alias module:modeling/maths.NEPS
 */
const NEPS = 1e-13
// NEPS is derived from a series of tests to determine the optimal precision
// for comparing coplanar polygons, as provided by the sphere primitive at high
// segmentation. NEPS is for 64 bit Number values.

/**
 * The TAU property represents the ratio of the circumference of a circle to its radius.
 * Approximately 6.28318530717958647692
 * @default
 * @example
 * const { TAU } = require('@jscad/modeling').maths.constants
 */
const TAU = Math.PI * 2

module.exports = {
  EPS,
  NEPS,
  TAU,
  spatialResolution
}


/***/ }),

/***/ 26118:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Maths are computational units for fundamental Euclidean geometry. All maths operate upon array data structures.
 * Note: Maths data structures are considered immutable, so never change the contents directly.
 * @see Most computations are based upon the glMatrix library (glmatrix.net)
 * @module modeling/maths
 * @example
 * const { constants, line2, mat4, vec2, vec3 } = require('@jscad/modeling').maths

 */
module.exports = {
  constants: __webpack_require__(77022),
  line2: __webpack_require__(84714),
  line3: __webpack_require__(48812),
  mat4: __webpack_require__(36028),
  plane: __webpack_require__(68646),
  utils: __webpack_require__(98589),
  vec2: __webpack_require__(4138),
  vec3: __webpack_require__(14171),
  vec4: __webpack_require__(33870)
}


/***/ }),

/***/ 79218:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(38845)

/**
 * Create a clone of the given line.
 *
 * @param {line2} line - line to clone
 * @returns {line2} a new unbounded line
 * @alias module:modeling/maths/line2.clone
 */
const clone = (line) => {
  const out = create()
  out[0] = line[0]
  out[1] = line[1]
  out[2] = line[2]
  return out
}

module.exports = clone


/***/ }),

/***/ 51885:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const direction = __webpack_require__(40959)
const origin = __webpack_require__(55923)

/**
 * Determine the closest point on the given line to the given point.
 *
 * @param {line2} line - line of reference
 * @param {vec2} point - point of reference
 * @returns {vec2} closest point
 * @alias module:modeling/maths/line2.closestPoint
 */
const closestPoint = (line, point) => {
  // linear function of AB
  const a = origin(line)
  const b = direction(line)
  const m1 = (b[1] - a[1]) / (b[0] - a[0])
  const t1 = a[1] - m1 * a[0]
  // linear function of PC
  const m2 = -1 / m1 // perpendicular
  const t2 = point[1] - m2 * point[0]
  // c.x * m1 + t1 === c.x * m2 + t2
  const x = (t2 - t1) / (m1 - m2)
  const y = m1 * x + t1

  const closest = vec2.fromValues(x, y)
  return closest
}

module.exports = closestPoint


/***/ }),

/***/ 70004:
/***/ ((module) => {

/**
 * Copy the given line to the receiving line.
 *
 * @param {line2} out - receiving line
 * @param {line2} line - line to copy
 * @returns {line2} out
 * @alias module:modeling/maths/line2.copy
 */
const copy = (out, line) => {
  out[0] = line[0]
  out[1] = line[1]
  out[2] = line[2]
  return out
}

module.exports = copy


/***/ }),

/***/ 38845:
/***/ ((module) => {

/**
 * Represents a unbounded line in 2D space, positioned at a point of origin.
 * A line is parametrized by a normal vector (perpendicular to the line, rotated 90 degrees counter clockwise) and
 * distance from the origin.
 *
 * Equation: A Point (P) is on Line (L) if dot(L.normal, P) == L.distance
 *
 * The contents of the array are a normal [0,1] and a distance [2].
 * @typedef {Array} line2
 */

/**
 * Create a line, positioned at 0,0, and running along the X axis.
 *
 * @returns {line2} a new unbounded line
 * @alias module:modeling/maths/line2.create
 */
const create = () => [0, 1, 0] // normal and distance

module.exports = create


/***/ }),

/***/ 40959:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

/**
 * Return the direction of the given line.
 *
 * @param {line2} line - line of reference
 * @return {vec2} a vector in the direction of the line
 * @alias module:modeling/maths/line2.direction
 */
const direction = (line) => {
  const vector = vec2.normal(vec2.create(), line)
  vec2.negate(vector, vector)
  return vector
}

module.exports = direction


/***/ }),

/***/ 44675:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

/**
 * Calculate the distance (positive) between the given point and line.
 *
 * @param {line2} line - line of reference
 * @param {vec2} point - point of reference
 * @return {Number} distance between line and point
 * @alias module:modeling/maths/line2.distanceToPoint
 */
const distanceToPoint = (line, point) => {
  let distance = vec2.dot(point, line)
  distance = Math.abs(distance - line[2])
  return distance
}

module.exports = distanceToPoint


/***/ }),

/***/ 86786:
/***/ ((module) => {

/**
 * Compare the given lines for equality.
 *
 * @param {line2} line1 - first line to compare
 * @param {line2} line2 - second line to compare
 * @return {Boolean} true if lines are equal
 * @alias module:modeling/maths/line2.equals
 */
const equals = (line1, line2) => (line1[0] === line2[0]) && (line1[1] === line2[1] && (line1[2] === line2[2]))

module.exports = equals


/***/ }),

/***/ 52349:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

/**
 * Create a new line that passes through the given points.
 *
 * @param {line2} out - receiving line
 * @param {vec2} point1 - start point of the line
 * @param {vec2} point2 - end point of the line
 * @returns {line2} a new unbounded line
 * @alias module:modeling/maths/line2.fromPoints
 */
const fromPoints = (out, point1, point2) => {
  const vector = vec2.subtract(vec2.create(), point2, point1) // directional vector

  vec2.normal(vector, vector)
  vec2.normalize(vector, vector) // normalized

  const distance = vec2.dot(point1, vector)

  out[0] = vector[0]
  out[1] = vector[1]
  out[2] = distance
  return out
}

module.exports = fromPoints


/***/ }),

/***/ 14246:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(38845)

/**
 * Creates a new line initialized with the given values.
 *
 * @param {Number} x - X coordinate of the unit normal
 * @param {Number} y - Y coordinate of the unit normal
 * @param {Number} d - distance of the line from [0,0]
 * @returns {line2} a new unbounded line
 * @alias module:modeling/maths/line2.fromValues
 */
const fromValues = (x, y, d) => {
  const out = create()
  out[0] = x
  out[1] = y
  out[2] = d
  return out
}

module.exports = fromValues


/***/ }),

/***/ 84714:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a unbounded line in 2D space, positioned at a point of origin.
 * @see {@link line2} for data structure information.
 * @module modeling/maths/line2
 */
module.exports = {
  clone: __webpack_require__(79218),
  closestPoint: __webpack_require__(51885),
  copy: __webpack_require__(70004),
  create: __webpack_require__(38845),
  direction: __webpack_require__(40959),
  distanceToPoint: __webpack_require__(44675),
  equals: __webpack_require__(86786),
  fromPoints: __webpack_require__(52349),
  fromValues: __webpack_require__(14246),
  intersectPointOfLines: __webpack_require__(52333),
  origin: __webpack_require__(55923),
  reverse: __webpack_require__(72830),
  toString: __webpack_require__(5456),
  transform: __webpack_require__(24009),
  xAtY: __webpack_require__(23562)
}


/***/ }),

/***/ 52333:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)
const { solve2Linear } = __webpack_require__(98589)

/**
 * Return the point of intersection between the given lines.
 *
 * NOTES:
 * The point will have Infinity values if the lines are parallel.
 * The point will have NaN values if the lines are the same.
 *
 * @param {line2} line1 - line of reference
 * @param {line2} line2 - line of reference
 * @return {vec2} the point of intersection
 * @alias module:modeling/maths/line2.intersectPointOfLines
 */
const intersectToLine = (line1, line2) => {
  const point = solve2Linear(line1[0], line1[1], line2[0], line2[1], line1[2], line2[2])
  return vec2.clone(point)
}

module.exports = intersectToLine


/***/ }),

/***/ 55923:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

/**
 * Return the origin of the given line.
 *
 * @param {line2} line - line of reference
 * @return {vec2} the origin of the line
 * @alias module:modeling/maths/line2.origin
 */
const origin = (line) => vec2.scale(vec2.create(), line, line[2])

module.exports = origin


/***/ }),

/***/ 72830:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const copy = __webpack_require__(70004)
const fromValues = __webpack_require__(14246)

/**
 * Create a new line in the opposite direction as the given.
 *
 * @param {line2} out - receiving line
 * @param {line2} line - line to reverse
 * @returns {line2} out
 * @alias module:modeling/maths/line2.reverse
 */
const reverse = (out, line) => {
  const normal = vec2.negate(vec2.create(), line)
  const distance = -line[2]
  return copy(out, fromValues(normal[0], normal[1], distance))
}

module.exports = reverse


/***/ }),

/***/ 5456:
/***/ ((module) => {

/**
 * Return a string representing the given line.
 *
 * @param {line2} line - line of reference
 * @returns {String} string representation
 * @alias module:modeling/maths/line2.toString
 */
const toString = (line) => `line2: (${line[0].toFixed(7)}, ${line[1].toFixed(7)}, ${line[2].toFixed(7)})`

module.exports = toString


/***/ }),

/***/ 24009:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const fromPoints = __webpack_require__(52349)
const origin = __webpack_require__(55923)
const direction = __webpack_require__(40959)

/**
 * Transforms the given line using the given matrix.
 *
 * @param {line2} out - receiving line
 * @param {line2} line - line to transform
 * @param {mat4} matrix - matrix to transform with
 * @returns {line2} out
 * @alias module:modeling/maths/line2.transform
 */
const transform = (out, line, matrix) => {
  const org = origin(line)
  const dir = direction(line)

  vec2.transform(org, org, matrix)
  vec2.transform(dir, dir, matrix)

  return fromPoints(out, org, dir)
}

module.exports = transform


/***/ }),

/***/ 23562:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const origin = __webpack_require__(55923)

/**
 * Determine the X coordinate of the given line at the Y coordinate.
 *
 * The X coordinate will be Infinity if the line is parallel to the X axis.
 *
 * @param {line2} line - line of reference
 * @param {Number} y - Y coordinate on the line
 * @return {Number} the X coordinate on the line
 * @alias module:modeling/maths/line2.xAtY
 */
const xAtY = (line, y) => {
  let x = (line[2] - (line[1] * y)) / line[0]
  if (Number.isNaN(x)) {
    const org = origin(line)
    x = org[0]
  }
  return x
}

module.exports = xAtY


/***/ }),

/***/ 13191:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const create = __webpack_require__(97898)

/**
 * Create a clone of the given line.
 *
 * @param {line3} line - line to clone
 * @returns {line3} a new unbounded line
 * @alias module:modeling/maths/line3.clone
 */
const clone = (line) => {
  const out = create()
  vec3.copy(out[0], line[0])
  vec3.copy(out[1], line[1])
  return out
}

module.exports = clone


/***/ }),

/***/ 93315:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Determine the closest point on the given line to the given point.
 *
 * @param {line3} line - line of reference
 * @param {vec3} point - point of reference
 * @returns {vec3} a point
 * @alias module:modeling/maths/line3.closestPoint
 */
const closestPoint = (line, point) => {
  const lpoint = line[0]
  const ldirection = line[1]

  const a = vec3.dot(vec3.subtract(vec3.create(), point, lpoint), ldirection)
  const b = vec3.dot(ldirection, ldirection)
  const t = a / b

  const closestpoint = vec3.scale(vec3.create(), ldirection, t)
  vec3.add(closestpoint, closestpoint, lpoint)
  return closestpoint
}

module.exports = closestPoint


/***/ }),

/***/ 50090:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Copy the given line into the receiving line.
 *
 * @param {line3} out - receiving line
 * @param {line3} line - line to copy
 * @returns {line3} out
 * @alias module:modeling/maths/line3.copy
 */
const copy = (out, line) => {
  vec3.copy(out[0], line[0])
  vec3.copy(out[1], line[1])
  return out
}

module.exports = copy


/***/ }),

/***/ 97898:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Represents a unbounded line in 3D space, positioned at a point of origin.
 * A line is parametrized by a point of origin and a directional vector.
 *
 * The array contents are two 3D vectors; origin [0,0,0] and directional vector [0,0,1].
 * @see https://en.wikipedia.org/wiki/Hesse_normal_form
 * @typedef {Array} line3
 */

/**
 * Create a line, positioned at 0,0,0 and lying on the X axis.
 *
 * @returns {line3} a new unbounded line
 * @alias module:modeling/maths/line3.create
 */
const create = () => [
  vec3.fromValues(0, 0, 0), // origin
  vec3.fromValues(0, 0, 1) // direction
]

module.exports = create


/***/ }),

/***/ 13009:
/***/ ((module) => {

/**
 * Return the direction of the given line.
 *
 * @param {line3} line - line for reference
 * @return {vec3} the relative vector in the direction of the line
 * @alias module:modeling/maths/line3.direction
 */
const direction = (line) => line[1]

module.exports = direction


/***/ }),

/***/ 31063:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const closestPoint = __webpack_require__(93315)

/**
 * Calculate the distance (positive) between the given point and line.
 *
 * @param {line3} line - line of reference
 * @param {vec3} point - point of reference
 * @return {Number} distance between line and point
 * @alias module:modeling/maths/line3.distanceToPoint
 */
const distanceToPoint = (line, point) => {
  const closest = closestPoint(line, point)
  const distancevector = vec3.subtract(vec3.create(), point, closest)
  return vec3.length(distancevector)
}

module.exports = distanceToPoint


/***/ }),

/***/ 55694:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Compare the given lines for equality.
 *
 * @param {line3} line1 - first line to compare
 * @param {line3} line2 - second line to compare
 * @return {Boolean} true if lines are equal
 * @alias module:modeling/maths/line3.equals
 */
const equals = (line1, line2) => {
  // compare directions (unit vectors)
  if (!vec3.equals(line1[1], line2[1])) return false

  // compare points
  if (!vec3.equals(line1[0], line2[0])) return false

  // why would lines with the same slope (direction) and different points be equal?
  // let distance = distanceToPoint(line1, line2[0])
  // if (distance > EPS) return false

  return true
}

module.exports = equals


/***/ }),

/***/ 59302:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)
const { solve2Linear } = __webpack_require__(98589)

const { EPS } = __webpack_require__(77022)

const fromPointAndDirection = __webpack_require__(4482)

/**
 * Create a line the intersection of the given planes.
 *
 * @param {line3} out - receiving line
 * @param {plane} plane1 - first plane of reference
 * @param {plane} plane2 - second plane of reference
 * @returns {line3} out
 * @alias module:modeling/maths/line3.fromPlanes
 */
const fromPlanes = (out, plane1, plane2) => {
  let direction = vec3.cross(vec3.create(), plane1, plane2)
  let length = vec3.length(direction)
  if (length < EPS) {
    throw new Error('parallel planes do not intersect')
  }
  length = (1.0 / length)
  direction = vec3.scale(direction, direction, length)

  const absx = Math.abs(direction[0])
  const absy = Math.abs(direction[1])
  const absz = Math.abs(direction[2])
  let origin
  let r
  if ((absx >= absy) && (absx >= absz)) {
    // find a point p for which x is zero
    r = solve2Linear(plane1[1], plane1[2], plane2[1], plane2[2], plane1[3], plane2[3])
    origin = vec3.fromValues(0, r[0], r[1])
  } else if ((absy >= absx) && (absy >= absz)) {
    // find a point p for which y is zero
    r = solve2Linear(plane1[0], plane1[2], plane2[0], plane2[2], plane1[3], plane2[3])
    origin = vec3.fromValues(r[0], 0, r[1])
  } else {
    // find a point p for which z is zero
    r = solve2Linear(plane1[0], plane1[1], plane2[0], plane2[1], plane1[3], plane2[3])
    origin = vec3.fromValues(r[0], r[1], 0)
  }
  return fromPointAndDirection(out, origin, direction)
}

module.exports = fromPlanes


/***/ }),

/***/ 4482:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Create a line from the given point (origin) and direction.
 *
 * The point can be any random point on the line.
 * The direction must be a vector with positive or negative distance from the point.
 *
 * See the logic of fromPoints() for appropriate values.
 *
 * @param {line3} out - receiving line
 * @param {vec3} point - start point of the line segment
 * @param {vec3} direction - direction of the line segment
 * @returns {line3} out
 * @alias module:modeling/maths/line3.fromPointAndDirection
 */
const fromPointAndDirection = (out, point, direction) => {
  const unit = vec3.normalize(vec3.create(), direction)

  vec3.copy(out[0], point)
  vec3.copy(out[1], unit)
  return out
}

module.exports = fromPointAndDirection


/***/ }),

/***/ 94528:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const fromPointAndDirection = __webpack_require__(4482)

/**
 * Create a line that passes through the given points.
 *
 * @param {line3} out - receiving line
 * @param {vec3} point1 - start point of the line segment
 * @param {vec3} point2 - end point of the line segment
 * @returns {line3} out
 * @alias module:modeling/maths/line3.fromPoints
 */
const fromPoints = (out, point1, point2) => {
  const direction = vec3.subtract(vec3.create(), point2, point1)
  return fromPointAndDirection(out, point1, direction)
}

module.exports = fromPoints


/***/ }),

/***/ 48812:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a unbounded line in 3D space, positioned at a point of origin.
 * @see {@link line3} for data structure information.
 * @module modeling/maths/line3
 */
module.exports = {
  clone: __webpack_require__(13191),
  closestPoint: __webpack_require__(93315),
  copy: __webpack_require__(50090),
  create: __webpack_require__(97898),
  direction: __webpack_require__(13009),
  distanceToPoint: __webpack_require__(31063),
  equals: __webpack_require__(55694),
  fromPlanes: __webpack_require__(59302),
  fromPointAndDirection: __webpack_require__(4482),
  fromPoints: __webpack_require__(94528),
  intersectPointOfLineAndPlane: __webpack_require__(95722),
  origin: __webpack_require__(7199),
  reverse: __webpack_require__(63322),
  toString: __webpack_require__(21037),
  transform: __webpack_require__(47958)
}


/***/ }),

/***/ 95722:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Determine the closest point on the given plane to the given line.
 *
 * NOTES:
 * The point of intersection will be invalid if the line is parallel to the plane, e.g. NaN.
 *
 * @param {line3} line - line of reference
 * @param {plane} plane - plane of reference
 * @returns {vec3} a point on the line
 * @alias module:modeling/maths/line3.intersectPointOfLineAndPlane
 */
const intersectToPlane = (line, plane) => {
  // plane: plane.normal * p = plane.w
  const pnormal = plane
  const pw = plane[3]

  const lpoint = line[0]
  const ldirection = line[1]

  // point: p = line.point + labda * line.direction
  const labda = (pw - vec3.dot(pnormal, lpoint)) / vec3.dot(pnormal, ldirection)

  const point = vec3.add(vec3.create(), lpoint, vec3.scale(vec3.create(), ldirection, labda))
  return point
}

module.exports = intersectToPlane


/***/ }),

/***/ 7199:
/***/ ((module) => {

/**
 * Return the origin of the given line.
 *
 * @param {line3} line - line of reference
 * @return {vec3} the origin of the line
 * @alias module:modeling/maths/line3.origin
 */
const origin = (line) => line[0]

module.exports = origin


/***/ }),

/***/ 63322:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const fromPointAndDirection = __webpack_require__(4482)

/**
 * Create a line in the opposite direction as the given.
 *
 * @param {line3} out - receiving line
 * @param {line3} line - line to reverse
 * @returns {line3} out
 * @alias module:modeling/maths/line3.reverse
 */
const reverse = (out, line) => {
  const point = vec3.clone(line[0])
  const direction = vec3.negate(vec3.create(), line[1])
  return fromPointAndDirection(out, point, direction)
}

module.exports = reverse


/***/ }),

/***/ 21037:
/***/ ((module) => {

/**
 * Return a string representing the given line.
 *
 * @param {line3} line - line of reference
 * @returns {String} string representation
 * @alias module:modeling/maths/line3.toString
 */
const toString = (line) => {
  const point = line[0]
  const direction = line[1]
  return `line3: point: (${point[0].toFixed(7)}, ${point[1].toFixed(7)}, ${point[2].toFixed(7)}) direction: (${direction[0].toFixed(7)}, ${direction[1].toFixed(7)}, ${direction[2].toFixed(7)})`
}

module.exports = toString


/***/ }),

/***/ 47958:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const fromPointAndDirection = __webpack_require__(4482)

/**
 * Transforms the given line using the given matrix.
 *
 * @param {line3} out - line to update
 * @param {line3} line - line to transform
 * @param {mat4} matrix - matrix to transform with
 * @returns {line3} a new unbounded line
 * @alias module:modeling/maths/line3.transform
 */
const transform = (out, line, matrix) => {
  const point = line[0]
  const direction = line[1]
  const pointPlusDirection = vec3.add(vec3.create(), point, direction)

  const newpoint = vec3.transform(vec3.create(), point, matrix)
  const newPointPlusDirection = vec3.transform(pointPlusDirection, pointPlusDirection, matrix)
  const newdirection = vec3.subtract(newPointPlusDirection, newPointPlusDirection, newpoint)

  return fromPointAndDirection(out, newpoint, newdirection)
}

module.exports = transform


/***/ }),

/***/ 41444:
/***/ ((module) => {

/**
 * Adds the two matrices (A+B).
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} a - first operand
 * @param {mat4} b - second operand
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.add
 */
const add = (out, a, b) => {
  out[0] = a[0] + b[0]
  out[1] = a[1] + b[1]
  out[2] = a[2] + b[2]
  out[3] = a[3] + b[3]
  out[4] = a[4] + b[4]
  out[5] = a[5] + b[5]
  out[6] = a[6] + b[6]
  out[7] = a[7] + b[7]
  out[8] = a[8] + b[8]
  out[9] = a[9] + b[9]
  out[10] = a[10] + b[10]
  out[11] = a[11] + b[11]
  out[12] = a[12] + b[12]
  out[13] = a[13] + b[13]
  out[14] = a[14] + b[14]
  out[15] = a[15] + b[15]
  return out
}

module.exports = add


/***/ }),

/***/ 23755:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(18997)

/**
 * Creates a clone of the given matrix.
 *
 * @param {mat4} matrix - matrix to clone
 * @returns {mat4} a new matrix
 * @alias module:modeling/maths/mat4.clone
 */
const clone = (matrix) => {
  const out = create()
  out[0] = matrix[0]
  out[1] = matrix[1]
  out[2] = matrix[2]
  out[3] = matrix[3]
  out[4] = matrix[4]
  out[5] = matrix[5]
  out[6] = matrix[6]
  out[7] = matrix[7]
  out[8] = matrix[8]
  out[9] = matrix[9]
  out[10] = matrix[10]
  out[11] = matrix[11]
  out[12] = matrix[12]
  out[13] = matrix[13]
  out[14] = matrix[14]
  out[15] = matrix[15]
  return out
}

module.exports = clone


/***/ }),

/***/ 58643:
/***/ ((module) => {

/**
 * Creates a copy of the given matrix.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to copy
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.copy
 */
const copy = (out, matrix) => {
  out[0] = matrix[0]
  out[1] = matrix[1]
  out[2] = matrix[2]
  out[3] = matrix[3]
  out[4] = matrix[4]
  out[5] = matrix[5]
  out[6] = matrix[6]
  out[7] = matrix[7]
  out[8] = matrix[8]
  out[9] = matrix[9]
  out[10] = matrix[10]
  out[11] = matrix[11]
  out[12] = matrix[12]
  out[13] = matrix[13]
  out[14] = matrix[14]
  out[15] = matrix[15]
  return out
}

module.exports = copy


/***/ }),

/***/ 18997:
/***/ ((module) => {

/**
 * Represents a 4x4 matrix which is column-major (when typed out it looks row-major).
 * See fromValues().
 * @typedef {Array} mat4
 */

/**
 * Creates a new identity matrix.
 *
 * @returns {mat4} a new matrix
 * @alias module:modeling/maths/mat4.create
 */
const create = () => [
  1, 0, 0, 0,
  0, 1, 0, 0,
  0, 0, 1, 0,
  0, 0, 0, 1
]

module.exports = create


/***/ }),

/***/ 19209:
/***/ ((module) => {

/**
 * Returns whether or not the matrices have exactly the same elements in the same position.
 *
 * @param {mat4} a - first matrix
 * @param {mat4} b - second matrix
 * @returns {Boolean} true if the matrices are equal
 * @alias module:modeling/maths/mat4.equals
 */
const equals = (a, b) => (
  a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&
  a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&
  a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
  a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15]
)

module.exports = equals


/***/ }),

/***/ 75386:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const { sin, cos } = __webpack_require__(84580)

const identity = __webpack_require__(69646)

/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotate(dest, dest, rad, axis)
 *
 * @param {mat4} out - receiving matrix
 * @param {Number} rad - angle to rotate the matrix by
 * @param {vec3} axis - axis of which to rotate around
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.fromRotation
 * @example
 * let matrix = fromRotation(create(), TAU / 4, [0, 0, 3])
 */
const fromRotation = (out, rad, axis) => {
  let [x, y, z] = axis
  const lengthSquared = x * x + y * y + z * z

  if (Math.abs(lengthSquared) < EPS) {
    // axis is 0,0,0 or almost
    return identity(out)
  }

  const len = 1 / Math.sqrt(lengthSquared)
  x *= len
  y *= len
  z *= len

  const s = sin(rad)
  const c = cos(rad)
  const t = 1 - c

  // Perform rotation-specific matrix multiplication
  out[0] = x * x * t + c
  out[1] = y * x * t + z * s
  out[2] = z * x * t - y * s
  out[3] = 0
  out[4] = x * y * t - z * s
  out[5] = y * y * t + c
  out[6] = z * y * t + x * s
  out[7] = 0
  out[8] = x * z * t + y * s
  out[9] = y * z * t - x * s
  out[10] = z * z * t + c
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = fromRotation


/***/ }),

/***/ 41788:
/***/ ((module) => {

/**
 * Creates a matrix from a vector scaling.
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.scale(dest, dest, vec)
 *
 * @param {mat4} out - receiving matrix
 * @param {vec3} vector - X, Y, Z factors by which to scale
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.fromScaling
 * @example
 * let matrix = fromScaling([1, 2, 0.5])
 */
const fromScaling = (out, vector) => {
  out[0] = vector[0]
  out[1] = 0
  out[2] = 0
  out[3] = 0
  out[4] = 0
  out[5] = vector[1]
  out[6] = 0
  out[7] = 0
  out[8] = 0
  out[9] = 0
  out[10] = vector[2]
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = fromScaling


/***/ }),

/***/ 62345:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Creates a matrix from the given Tait–Bryan angles.
 *
 * Tait-Bryan Euler angle convention using active, intrinsic rotations around the axes in the order z-y-x.
 * @see https://en.wikipedia.org/wiki/Euler_angles
 *
 * @param {mat4} out - receiving matrix
 * @param {Number} yaw - Z rotation in radians
 * @param {Number} pitch - Y rotation in radians
 * @param {Number} roll - X rotation in radians
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.fromTaitBryanRotation
 * @example
 * let matrix = fromTaitBryanRotation(create(), TAU / 4, 0, TAU / 2)
 */
const fromTaitBryanRotation = (out, yaw, pitch, roll) => {
  // precompute sines and cosines of Euler angles
  const sy = sin(yaw)
  const cy = cos(yaw)
  const sp = sin(pitch)
  const cp = cos(pitch)
  const sr = sin(roll)
  const cr = cos(roll)

  // create and populate rotation matrix
  // left-hand-rule rotation
  // const els = [
  //  cp*cy, sr*sp*cy - cr*sy, sr*sy + cr*sp*cy, 0,
  //  cp*sy, cr*cy + sr*sp*sy, cr*sp*sy - sr*cy, 0,
  //  -sp, sr*cp, cr*cp, 0,
  //  0, 0, 0, 1
  // ]
  // right-hand-rule rotation
  out[0] = cp * cy
  out[1] = cp * sy
  out[2] = -sp
  out[3] = 0
  out[4] = sr * sp * cy - cr * sy
  out[5] = cr * cy + sr * sp * sy
  out[6] = sr * cp
  out[7] = 0
  out[8] = sr * sy + cr * sp * cy
  out[9] = cr * sp * sy - sr * cy
  out[10] = cr * cp
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = fromTaitBryanRotation


/***/ }),

/***/ 45554:
/***/ ((module) => {

/**
 * Creates a matrix from a vector translation.
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.translate(dest, dest, vec)
 *
 * @param {mat4} out - receiving matrix
 * @param {vec3} vector - offset (vector) of translation
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.fromTranslation
 * @example
 * let matrix = fromTranslation(create(), [1, 2, 3])
 */
const fromTranslation = (out, vector) => {
  out[0] = 1
  out[1] = 0
  out[2] = 0
  out[3] = 0
  out[4] = 0
  out[5] = 1
  out[6] = 0
  out[7] = 0
  out[8] = 0
  out[9] = 0
  out[10] = 1
  out[11] = 0
  out[12] = vector[0]
  out[13] = vector[1]
  out[14] = vector[2]
  out[15] = 1
  return out
}

module.exports = fromTranslation


/***/ }),

/***/ 21258:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(18997)

/**
 * Create a matrix with the given values.
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} a new matrix
 * @alias module:modeling/maths/mat4.fromValues
 * @example
 * let matrix = fromValues(
 *   1, 0, 0, 1,
 *   0, 1, 0, 0,
 *   0, 0, 1, 0,
 *   0, 0, 0, 1
 * )
 */
const fromValues = (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) => {
  const out = create()
  out[0] = m00
  out[1] = m01
  out[2] = m02
  out[3] = m03
  out[4] = m10
  out[5] = m11
  out[6] = m12
  out[7] = m13
  out[8] = m20
  out[9] = m21
  out[10] = m22
  out[11] = m23
  out[12] = m30
  out[13] = m31
  out[14] = m32
  out[15] = m33
  return out
}

module.exports = fromValues


/***/ }),

/***/ 7049:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const fromRotation = __webpack_require__(75386)

/**
 * Create a matrix that rotates the given source to the given target vector.
 *
 * Each vector must be a directional vector with a length greater than zero.
 * @see https://gist.github.com/kevinmoran/b45980723e53edeb8a5a43c49f134724
 * @param {mat4} out - receiving matrix
 * @param {vec3} source - source vector
 * @param {vec3} target - target vector
 * @returns {mat4} a new matrix
 * @alias module:modeling/maths/mat4.fromVectorRotation
 * @example
 * let matrix = fromVectorRotation(mat4.create(), [1, 2, 2], [-3, 3, 12])
 */
const fromVectorRotation = (out, source, target) => {
  const sourceNormal = vec3.normalize(vec3.create(), source)
  const targetNormal = vec3.normalize(vec3.create(), target)

  const axis = vec3.cross(vec3.create(), targetNormal, sourceNormal)
  const cosA = vec3.dot(targetNormal, sourceNormal)
  if (cosA === -1.0) return fromRotation(out, Math.PI, vec3.orthogonal(axis, sourceNormal))

  const k = 1 / (1 + cosA)
  out[0] = (axis[0] * axis[0] * k) + cosA
  out[1] = (axis[1] * axis[0] * k) - axis[2]
  out[2] = (axis[2] * axis[0] * k) + axis[1]
  out[3] = 0

  out[4] = (axis[0] * axis[1] * k) + axis[2]
  out[5] = (axis[1] * axis[1] * k) + cosA
  out[6] = (axis[2] * axis[1] * k) - axis[0]
  out[7] = 0

  out[8] = (axis[0] * axis[2] * k) - axis[1]
  out[9] = (axis[1] * axis[2] * k) + axis[0]
  out[10] = (axis[2] * axis[2] * k) + cosA
  out[11] = 0

  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = fromVectorRotation


/***/ }),

/***/ 67908:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Creates a matrix from the given angle around the X axis.
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateX(dest, dest, radians)
 *
 * @param {mat4} out - receiving matrix
 * @param {Number} radians - angle to rotate the matrix by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.fromXRotation
 * @example
 * let matrix = fromXRotation(create(), TAU / 4)
 */
const fromXRotation = (out, radians) => {
  const s = sin(radians)
  const c = cos(radians)

  // Perform axis-specific matrix multiplication
  out[0] = 1
  out[1] = 0
  out[2] = 0
  out[3] = 0
  out[4] = 0
  out[5] = c
  out[6] = s
  out[7] = 0
  out[8] = 0
  out[9] = -s
  out[10] = c
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = fromXRotation


/***/ }),

/***/ 22215:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Creates a matrix from the given angle around the Y axis.
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateY(dest, dest, radians)
 *
 * @param {mat4} out - receiving matrix
 * @param {Number} radians - angle to rotate the matrix by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.fromYRotation
 * @example
 * let matrix = fromYRotation(create(), TAU / 4)
 */
const fromYRotation = (out, radians) => {
  const s = sin(radians)
  const c = cos(radians)

  // Perform axis-specific matrix multiplication
  out[0] = c
  out[1] = 0
  out[2] = -s
  out[3] = 0
  out[4] = 0
  out[5] = 1
  out[6] = 0
  out[7] = 0
  out[8] = s
  out[9] = 0
  out[10] = c
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = fromYRotation


/***/ }),

/***/ 24654:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Creates a matrix from the given angle around the Z axis.
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest)
 *     mat4.rotateZ(dest, dest, radians)
 *
 * @param {mat4} out - receiving matrix
 * @param {Number} radians - angle to rotate the matrix by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.fromZRotation
 * @example
 * let matrix = fromZRotation(create(), TAU / 4)
 */
const fromZRotation = (out, radians) => {
  const s = sin(radians)
  const c = cos(radians)

  // Perform axis-specific matrix multiplication
  out[0] = c
  out[1] = s
  out[2] = 0
  out[3] = 0
  out[4] = -s
  out[5] = c
  out[6] = 0
  out[7] = 0
  out[8] = 0
  out[9] = 0
  out[10] = 1
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = fromZRotation


/***/ }),

/***/ 69646:
/***/ ((module) => {

/**
 * Set a matrix to the identity transform.
 *
 * @param {mat4} out - receiving matrix
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.identity
 */
const identity = (out) => {
  out[0] = 1
  out[1] = 0
  out[2] = 0
  out[3] = 0
  out[4] = 0
  out[5] = 1
  out[6] = 0
  out[7] = 0
  out[8] = 0
  out[9] = 0
  out[10] = 1
  out[11] = 0
  out[12] = 0
  out[13] = 0
  out[14] = 0
  out[15] = 1
  return out
}

module.exports = identity


/***/ }),

/***/ 36028:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a 4x4 matrix which is column-major (when typed out it looks row-major).
 * @see {@link mat4} for data structure information.
 * @module modeling/maths/mat4
 */
module.exports = {
  add: __webpack_require__(41444),
  clone: __webpack_require__(23755),
  copy: __webpack_require__(58643),
  create: __webpack_require__(18997),
  invert: __webpack_require__(49362),
  equals: __webpack_require__(19209),
  fromRotation: __webpack_require__(75386),
  fromScaling: __webpack_require__(41788),
  fromTaitBryanRotation: __webpack_require__(62345),
  fromTranslation: __webpack_require__(45554),
  fromValues: __webpack_require__(21258),
  fromVectorRotation: __webpack_require__(7049),
  fromXRotation: __webpack_require__(67908),
  fromYRotation: __webpack_require__(22215),
  fromZRotation: __webpack_require__(24654),
  identity: __webpack_require__(69646),
  isIdentity: __webpack_require__(79293),
  isOnlyTransformScale: __webpack_require__(41596),
  isMirroring: __webpack_require__(80714),
  mirrorByPlane: __webpack_require__(63150),
  multiply: __webpack_require__(93619),
  rotate: __webpack_require__(26596),
  rotateX: __webpack_require__(70525),
  rotateY: __webpack_require__(86465),
  rotateZ: __webpack_require__(81116),
  scale: __webpack_require__(48687),
  subtract: __webpack_require__(94612),
  toString: __webpack_require__(54284),
  translate: __webpack_require__(1923)
}


/***/ }),

/***/ 49362:
/***/ ((module) => {

/**
 * Creates a invert copy of the given matrix.
 * @author Julian Lloyd
 * code from https://github.com/jlmakes/rematrix/blob/master/src/index.js
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to invert
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.invert
 */
const invert = (out, matrix) => {
  const a00 = matrix[0]
  const a01 = matrix[1]
  const a02 = matrix[2]
  const a03 = matrix[3]
  const a10 = matrix[4]
  const a11 = matrix[5]
  const a12 = matrix[6]
  const a13 = matrix[7]
  const a20 = matrix[8]
  const a21 = matrix[9]
  const a22 = matrix[10]
  const a23 = matrix[11]
  const a30 = matrix[12]
  const a31 = matrix[13]
  const a32 = matrix[14]
  const a33 = matrix[15]

  const b00 = a00 * a11 - a01 * a10
  const b01 = a00 * a12 - a02 * a10
  const b02 = a00 * a13 - a03 * a10
  const b03 = a01 * a12 - a02 * a11
  const b04 = a01 * a13 - a03 * a11
  const b05 = a02 * a13 - a03 * a12
  const b06 = a20 * a31 - a21 * a30
  const b07 = a20 * a32 - a22 * a30
  const b08 = a20 * a33 - a23 * a30
  const b09 = a21 * a32 - a22 * a31
  const b10 = a21 * a33 - a23 * a31
  const b11 = a22 * a33 - a23 * a32

  // Calculate the determinant
  let det =
    b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06

  if (!det) {
    return null
  }
  det = 1.0 / det

  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det

  return out
}

module.exports = invert


/***/ }),

/***/ 79293:
/***/ ((module) => {

/**
 * Determine whether the given matrix is the identity transform.
 * This is equivalent to (but much faster than):
 *
 *     mat4.equals(mat4.create(), matrix)
 *
 * @param {mat4} matrix - the matrix
 * @returns {Boolean} true if matrix is the identity transform
 * @alias module:modeling/maths/mat4.isIdentity
 * @example
 * if (mat4.isIdentity(mymatrix)) ...
 */
const isIdentity = (matrix) => (
  matrix[0] === 1 && matrix[1] === 0 && matrix[2] === 0 && matrix[3] === 0 &&
  matrix[4] === 0 && matrix[5] === 1 && matrix[6] === 0 && matrix[7] === 0 &&
  matrix[8] === 0 && matrix[9] === 0 && matrix[10] === 1 && matrix[11] === 0 &&
  matrix[12] === 0 && matrix[13] === 0 && matrix[14] === 0 && matrix[15] === 1
)

module.exports = isIdentity


/***/ }),

/***/ 80714:
/***/ ((module) => {

/**
 * Determine whether the given matrix is a mirroring transformation.
 *
 * @param {mat4} matrix - matrix of reference
 * @returns {Boolean} true if matrix is a mirroring transformation
 * @alias module:modeling/maths/mat4.isMirroring
 */
const isMirroring = (matrix) => {
  // const xVector = [matrix[0], matrix[4], matrix[8]]
  // const yVector = [matrix[1], matrix[5], matrix[9]]
  // const zVector = [matrix[2], matrix[6], matrix[10]]

  // for a true orthogonal, non-mirrored base, xVector.cross(yVector) == zVector
  // If they have an opposite direction then we are mirroring
  // calcuate xVector.cross(yVector)
  const x = matrix[4] * matrix[9] - matrix[8] * matrix[5]
  const y = matrix[8] * matrix[1] - matrix[0] * matrix[9]
  const z = matrix[0] * matrix[5] - matrix[4] * matrix[1]
  // calcualte dot(cross, zVector)
  const d = x * matrix[2] + y * matrix[6] + z * matrix[10]
  return (d < 0)
}

module.exports = isMirroring


/***/ }),

/***/ 41596:
/***/ ((module) => {


/**
 * Determine whether the given matrix is only translate and/or scale.
 * This code returns true for TAU / 2 rotation as it can be interpreted as scale.
 *
 * @param {mat4} matrix - the matrix
 * @returns {Boolean} true if matrix is for translate and/or scale
 * @alias module:modeling/maths/mat4.isOnlyTransformScale
 */
const isOnlyTransformScale = (matrix) => (

  // TODO check if it is worth the effort to add recognition of 90 deg rotations

  isZero(matrix[1]) && isZero(matrix[2]) && isZero(matrix[3]) &&
  isZero(matrix[4]) && isZero(matrix[6]) && isZero(matrix[7]) &&
  isZero(matrix[8]) && isZero(matrix[9]) && isZero(matrix[11]) &&
  matrix[15] === 1
)

const isZero = (num) => Math.abs(num) < Number.EPSILON

module.exports = isOnlyTransformScale


/***/ }),

/***/ 63150:
/***/ ((module) => {

/**
 * Create a matrix for mirroring about the given plane.
 *
 * @param {mat4} out - receiving matrix
 * @param {vec4} plane - plane of which to mirror the matrix
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.mirrorByPlane
 */
const mirrorByPlane = (out, plane) => {
  const [nx, ny, nz, w] = plane

  out[0] = (1.0 - 2.0 * nx * nx)
  out[1] = (-2.0 * ny * nx)
  out[2] = (-2.0 * nz * nx)
  out[3] = 0
  out[4] = (-2.0 * nx * ny)
  out[5] = (1.0 - 2.0 * ny * ny)
  out[6] = (-2.0 * nz * ny)
  out[7] = 0
  out[8] = (-2.0 * nx * nz)
  out[9] = (-2.0 * ny * nz)
  out[10] = (1.0 - 2.0 * nz * nz)
  out[11] = 0
  out[12] = (2.0 * nx * w)
  out[13] = (2.0 * ny * w)
  out[14] = (2.0 * nz * w)
  out[15] = 1

  return out
}

module.exports = mirrorByPlane


/***/ }),

/***/ 93619:
/***/ ((module) => {

/**
 * Multiplies the two matrices.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} a - first operand
 * @param {mat4} b - second operand
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.multiply
 */
const multiply = (out, a, b) => {
  const a00 = a[0]
  const a01 = a[1]
  const a02 = a[2]
  const a03 = a[3]
  const a10 = a[4]
  const a11 = a[5]
  const a12 = a[6]
  const a13 = a[7]
  const a20 = a[8]
  const a21 = a[9]
  const a22 = a[10]
  const a23 = a[11]
  const a30 = a[12]
  const a31 = a[13]
  const a32 = a[14]
  const a33 = a[15]

  // Cache only the current line of the second matrix
  let b0 = b[0]
  let b1 = b[1]
  let b2 = b[2]
  let b3 = b[3]
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33

  b0 = b[4]
  b1 = b[5]
  b2 = b[6]
  b3 = b[7]
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33

  b0 = b[8]
  b1 = b[9]
  b2 = b[10]
  b3 = b[11]
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33

  b0 = b[12]
  b1 = b[13]
  b2 = b[14]
  b3 = b[15]
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33
  return out
}

module.exports = multiply


/***/ }),

/***/ 26596:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const { sin, cos } = __webpack_require__(84580)

const copy = __webpack_require__(58643)

/**
 * Rotates a matrix by the given angle about the given axis.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to rotate
 * @param {Number} radians - angle to rotate the matrix by
 * @param {vec3} axis - axis to rotate around
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.rotate
 */
const rotate = (out, matrix, radians, axis) => {
  let [x, y, z] = axis
  const lengthSquared = x * x + y * y + z * z

  if (Math.abs(lengthSquared) < EPS) {
    // axis is 0,0,0 or almost
    return copy(out, matrix)
  }

  const len = 1 / Math.sqrt(lengthSquared)
  x *= len
  y *= len
  z *= len

  const s = sin(radians)
  const c = cos(radians)
  const t = 1 - c

  const a00 = matrix[0]
  const a01 = matrix[1]
  const a02 = matrix[2]
  const a03 = matrix[3]
  const a10 = matrix[4]
  const a11 = matrix[5]
  const a12 = matrix[6]
  const a13 = matrix[7]
  const a20 = matrix[8]
  const a21 = matrix[9]
  const a22 = matrix[10]
  const a23 = matrix[11]

  // Construct the elements of the rotation matrix
  const b00 = x * x * t + c
  const b01 = y * x * t + z * s
  const b02 = z * x * t - y * s
  const b10 = x * y * t - z * s
  const b11 = y * y * t + c
  const b12 = z * y * t + x * s
  const b20 = x * z * t + y * s
  const b21 = y * z * t - x * s
  const b22 = z * z * t + c

  // Perform rotation-specific matrix multiplication
  out[0] = a00 * b00 + a10 * b01 + a20 * b02
  out[1] = a01 * b00 + a11 * b01 + a21 * b02
  out[2] = a02 * b00 + a12 * b01 + a22 * b02
  out[3] = a03 * b00 + a13 * b01 + a23 * b02
  out[4] = a00 * b10 + a10 * b11 + a20 * b12
  out[5] = a01 * b10 + a11 * b11 + a21 * b12
  out[6] = a02 * b10 + a12 * b11 + a22 * b12
  out[7] = a03 * b10 + a13 * b11 + a23 * b12
  out[8] = a00 * b20 + a10 * b21 + a20 * b22
  out[9] = a01 * b20 + a11 * b21 + a21 * b22
  out[10] = a02 * b20 + a12 * b21 + a22 * b22
  out[11] = a03 * b20 + a13 * b21 + a23 * b22

  if (matrix !== out) { // If the source and destination differ, copy the unchanged last row
    out[12] = matrix[12]
    out[13] = matrix[13]
    out[14] = matrix[14]
    out[15] = matrix[15]
  }
  return out
}

module.exports = rotate


/***/ }),

/***/ 70525:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Rotates a matrix by the given angle around the X axis.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to rotate
 * @param {Number} radians - angle to rotate the matrix by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.rotateX
 */
const rotateX = (out, matrix, radians) => {
  const s = sin(radians)
  const c = cos(radians)
  const a10 = matrix[4]
  const a11 = matrix[5]
  const a12 = matrix[6]
  const a13 = matrix[7]
  const a20 = matrix[8]
  const a21 = matrix[9]
  const a22 = matrix[10]
  const a23 = matrix[11]

  if (matrix !== out) { // If the source and destination differ, copy the unchanged rows
    out[0] = matrix[0]
    out[1] = matrix[1]
    out[2] = matrix[2]
    out[3] = matrix[3]
    out[12] = matrix[12]
    out[13] = matrix[13]
    out[14] = matrix[14]
    out[15] = matrix[15]
  }

  // Perform axis-specific matrix multiplication
  out[4] = a10 * c + a20 * s
  out[5] = a11 * c + a21 * s
  out[6] = a12 * c + a22 * s
  out[7] = a13 * c + a23 * s
  out[8] = a20 * c - a10 * s
  out[9] = a21 * c - a11 * s
  out[10] = a22 * c - a12 * s
  out[11] = a23 * c - a13 * s
  return out
}

module.exports = rotateX


/***/ }),

/***/ 86465:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Rotates a matrix by the given angle around the Y axis.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to rotate
 * @param {Number} radians - angle to rotate the matrix by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.rotateY
 */
const rotateY = (out, matrix, radians) => {
  const s = sin(radians)
  const c = cos(radians)
  const a00 = matrix[0]
  const a01 = matrix[1]
  const a02 = matrix[2]
  const a03 = matrix[3]
  const a20 = matrix[8]
  const a21 = matrix[9]
  const a22 = matrix[10]
  const a23 = matrix[11]

  if (matrix !== out) { // If the source and destination differ, copy the unchanged rows
    out[4] = matrix[4]
    out[5] = matrix[5]
    out[6] = matrix[6]
    out[7] = matrix[7]
    out[12] = matrix[12]
    out[13] = matrix[13]
    out[14] = matrix[14]
    out[15] = matrix[15]
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c - a20 * s
  out[1] = a01 * c - a21 * s
  out[2] = a02 * c - a22 * s
  out[3] = a03 * c - a23 * s
  out[8] = a00 * s + a20 * c
  out[9] = a01 * s + a21 * c
  out[10] = a02 * s + a22 * c
  out[11] = a03 * s + a23 * c
  return out
}

module.exports = rotateY


/***/ }),

/***/ 81116:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Rotates a matrix by the given angle around the Z axis.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to rotate
 * @param {Number} radians - angle to rotate the matrix by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.rotateZ
 */
const rotateZ = (out, matrix, radians) => {
  const s = sin(radians)
  const c = cos(radians)
  const a00 = matrix[0]
  const a01 = matrix[1]
  const a02 = matrix[2]
  const a03 = matrix[3]
  const a10 = matrix[4]
  const a11 = matrix[5]
  const a12 = matrix[6]
  const a13 = matrix[7]

  if (matrix !== out) { // If the source and destination differ, copy the unchanged last row
    out[8] = matrix[8]
    out[9] = matrix[9]
    out[10] = matrix[10]
    out[11] = matrix[11]
    out[12] = matrix[12]
    out[13] = matrix[13]
    out[14] = matrix[14]
    out[15] = matrix[15]
  }

  // Perform axis-specific matrix multiplication
  out[0] = a00 * c + a10 * s
  out[1] = a01 * c + a11 * s
  out[2] = a02 * c + a12 * s
  out[3] = a03 * c + a13 * s
  out[4] = a10 * c - a00 * s
  out[5] = a11 * c - a01 * s
  out[6] = a12 * c - a02 * s
  out[7] = a13 * c - a03 * s
  return out
}

module.exports = rotateZ


/***/ }),

/***/ 48687:
/***/ ((module) => {

/**
 * Scales the matrix by the given dimensions.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to scale
 * @param {vec3} dimensions - dimensions to scale the matrix by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.scale
 */
const scale = (out, matrix, dimensions) => {
  const x = dimensions[0]
  const y = dimensions[1]
  const z = dimensions[2]

  out[0] = matrix[0] * x
  out[1] = matrix[1] * x
  out[2] = matrix[2] * x
  out[3] = matrix[3] * x
  out[4] = matrix[4] * y
  out[5] = matrix[5] * y
  out[6] = matrix[6] * y
  out[7] = matrix[7] * y
  out[8] = matrix[8] * z
  out[9] = matrix[9] * z
  out[10] = matrix[10] * z
  out[11] = matrix[11] * z
  out[12] = matrix[12]
  out[13] = matrix[13]
  out[14] = matrix[14]
  out[15] = matrix[15]
  return out
}

module.exports = scale


/***/ }),

/***/ 94612:
/***/ ((module) => {

/**
 * Subtracts matrix b from matrix a. (A-B)
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} a - first operand
 * @param {mat4} b - second operand
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.subtract
 */
const subtract = (out, a, b) => {
  out[0] = a[0] - b[0]
  out[1] = a[1] - b[1]
  out[2] = a[2] - b[2]
  out[3] = a[3] - b[3]
  out[4] = a[4] - b[4]
  out[5] = a[5] - b[5]
  out[6] = a[6] - b[6]
  out[7] = a[7] - b[7]
  out[8] = a[8] - b[8]
  out[9] = a[9] - b[9]
  out[10] = a[10] - b[10]
  out[11] = a[11] - b[11]
  out[12] = a[12] - b[12]
  out[13] = a[13] - b[13]
  out[14] = a[14] - b[14]
  out[15] = a[15] - b[15]
  return out
}

module.exports = subtract


/***/ }),

/***/ 54284:
/***/ ((module) => {

/**
 * Return a string representing the given matrix.
 *
 * @param {mat4} mat - matrix of reference
 * @returns {String} string representation
 * @alias module:modeling/maths/mat4.toString
 */
const toString = (mat) => mat.map((n) => n.toFixed(7)).toString()

module.exports = toString


/***/ }),

/***/ 1923:
/***/ ((module) => {

/**
 * Translate the matrix by the given offset vector.
 *
 * @param {mat4} out - receiving matrix
 * @param {mat4} matrix - matrix to translate
 * @param {vec3} offsets - offset vector to translate by
 * @returns {mat4} out
 * @alias module:modeling/maths/mat4.translate
 */
const translate = (out, matrix, offsets) => {
  const x = offsets[0]
  const y = offsets[1]
  const z = offsets[2]
  let a00
  let a01
  let a02
  let a03
  let a10
  let a11
  let a12
  let a13
  let a20
  let a21
  let a22
  let a23

  if (matrix === out) {
  // 0-11 assignments are unnecessary
    out[12] = matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]
    out[13] = matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]
    out[14] = matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]
    out[15] = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15]
  } else {
    a00 = matrix[0]; a01 = matrix[1]; a02 = matrix[2]; a03 = matrix[3]
    a10 = matrix[4]; a11 = matrix[5]; a12 = matrix[6]; a13 = matrix[7]
    a20 = matrix[8]; a21 = matrix[9]; a22 = matrix[10]; a23 = matrix[11]

    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03
    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13
    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23

    out[12] = a00 * x + a10 * y + a20 * z + matrix[12]
    out[13] = a01 * x + a11 * y + a21 * z + matrix[13]
    out[14] = a02 * x + a12 * y + a22 * z + matrix[14]
    out[15] = a03 * x + a13 * y + a23 * z + matrix[15]
  }

  return out
}

module.exports = translate


/***/ }),

/***/ 22562:
/***/ ((module) => {

/**
 * Flip the given plane.
 *
 * @param {plane} out - receiving plane
 * @param {plane} plane - plane to flip
 * @return {plane} out
 * @alias module:modeling/maths/plane.flip
 */
const flip = (out, plane) => {
  out[0] = -plane[0]
  out[1] = -plane[1]
  out[2] = -plane[2]
  out[3] = -plane[3]
  return out
}

module.exports = flip


/***/ }),

/***/ 22796:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Represents a plane in 3D coordinate space as determined by a normal (perpendicular to the plane)
 * and distance from 0,0,0.
 *
 * The contents of the array are a normal [0,1,2] and a distance [3].
 * @see https://en.wikipedia.org/wiki/Hesse_normal_form
 * @typedef {Array} plane
 */

/**
 * Create a new plane from the given normal and point values.
 *
 * @param {plane} out - receiving plane
 * @param {vec3} normal - directional vector
 * @param {vec3} point - origin of plane
 * @returns {plane} out
 * @alias module:modeling/maths/plane.fromNormalAndPoint
 */
const fromNormalAndPoint = (out, normal, point) => {
  const u = vec3.normalize(vec3.create(), normal)
  const w = vec3.dot(point, u)

  out[0] = u[0]
  out[1] = u[1]
  out[2] = u[2]
  out[3] = w
  return out
}

module.exports = fromNormalAndPoint


/***/ }),

/***/ 71329:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Create a plane from the given points.
 *
 * @param {plane} out - receiving plane
 * @param {Array} vertices - points on the plane
 * @returns {plane} out
 * @alias module:modeling/maths/plane.fromPoints
 */
const fromPoints = (out, ...vertices) => {
  const len = vertices.length

  // Calculate normal vector for a single vertex
  // Inline to avoid allocations
  const ba = vec3.create()
  const ca = vec3.create()
  const vertexNormal = (index) => {
    const a = vertices[index]
    const b = vertices[(index + 1) % len]
    const c = vertices[(index + 2) % len]
    vec3.subtract(ba, b, a) // ba = b - a
    vec3.subtract(ca, c, a) // ca = c - a
    vec3.cross(ba, ba, ca) // ba = ba x ca
    vec3.normalize(ba, ba)
    return ba
  }

  out[0] = 0
  out[1] = 0
  out[2] = 0
  if (len === 3) {
    // optimization for triangles, which are always coplanar
    vec3.copy(out, vertexNormal(0))
  } else {
    // sum of vertex normals
    vertices.forEach((v, i) => {
      vec3.add(out, out, vertexNormal(i))
    })
    // renormalize normal vector
    vec3.normalize(out, out)
  }
  out[3] = vec3.dot(out, vertices[0])
  return out
}

module.exports = fromPoints


/***/ }),

/***/ 54626:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const vec3 = __webpack_require__(14171)

/**
 * Create a new plane from the given points like fromPoints,
 * but allow the vectors to be on one point or one line.
 * In such a case, a random plane through the given points is constructed.
 *
 * @param {plane} out - receiving plane
 * @param {vec3} a - 3D point
 * @param {vec3} b - 3D point
 * @param {vec3} c - 3D point
 * @returns {plane} out
 * @alias module:modeling/maths/plane.fromPointsRandom
 */
const fromPointsRandom = (out, a, b, c) => {
  let ba = vec3.subtract(vec3.create(), b, a)
  let ca = vec3.subtract(vec3.create(), c, a)
  if (vec3.length(ba) < EPS) {
    ba = vec3.orthogonal(ba, ca)
  }
  if (vec3.length(ca) < EPS) {
    ca = vec3.orthogonal(ca, ba)
  }
  let normal = vec3.cross(vec3.create(), ba, ca)
  if (vec3.length(normal) < EPS) {
    // this would mean that ba == ca.negated()
    ca = vec3.orthogonal(ca, ba)
    normal = vec3.cross(normal, ba, ca)
  }
  normal = vec3.normalize(normal, normal)
  const w = vec3.dot(normal, a)

  out[0] = normal[0]
  out[1] = normal[1]
  out[2] = normal[2]
  out[3] = w
  return out
}

module.exports = fromPointsRandom


/***/ }),

/***/ 68646:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a plane in 3D coordinate space as determined by a normal (perpendicular to the plane)
 * and distance from 0,0,0.
 * @see {@link plane} for data structure information.
 * @module modeling/maths/plane
 */
module.exports = {
  /**
   * @see [vec4.clone()]{@link module:modeling/maths/vec4.clone}
   * @function clone
   */
  clone: __webpack_require__(82712),
  /**
   * @see [vec4.copy()]{@link module:modeling/maths/vec4.copy}
   * @function copy
   */
  copy: __webpack_require__(25018),
  /**
   * @see [vec4.create()]{@link module:modeling/maths/vec4.create}
   * @function create
   */
  create: __webpack_require__(4658),
  /**
   * @see [vec4.equals()]{@link module:modeling/maths/vec4.equals}
   * @function equals
   */
  equals: __webpack_require__(39066),
  flip: __webpack_require__(22562),
  fromNormalAndPoint: __webpack_require__(22796),
  /**
   * @see [vec4.fromValues()]{@link module:modeling/maths/vec4.fromValues}
   * @function fromValues
   */
  fromValues: __webpack_require__(58627),
  fromPoints: __webpack_require__(71329),
  fromPointsRandom: __webpack_require__(54626),
  projectionOfPoint: __webpack_require__(9618),
  signedDistanceToPoint: __webpack_require__(57055),
  /**
   * @see [vec4.toString()]{@link module:modeling/maths/vec4.toString}
   * @function toString
   */
  toString: __webpack_require__(86318),
  transform: __webpack_require__(2225)
}


/***/ }),

/***/ 9618:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Project the given point on to the given plane.
 *
 * @param {plane} plane - plane of reference
 * @param {vec3} point - point of reference
 * @return {vec3} projected point on plane
 * @alias module:modeling/maths/plane.projectionOfPoint
 */
const projectionOfPoint = (plane, point) => {
  const a = point[0] * plane[0] + point[1] * plane[1] + point[2] * plane[2] - plane[3]
  const x = point[0] - a * plane[0]
  const y = point[1] - a * plane[1]
  const z = point[2] - a * plane[2]
  return vec3.fromValues(x, y, z)
}

module.exports = projectionOfPoint


/***/ }),

/***/ 57055:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Calculate the distance to the given point.
 *
 * @param {plane} plane - plane of reference
 * @param {vec3} point - point of reference
 * @return {Number} signed distance to point
 * @alias module:modeling/maths/plane.signedDistanceToPoint
 */
const signedDistanceToPoint = (plane, point) => vec3.dot(plane, point) - plane[3]

module.exports = signedDistanceToPoint


/***/ }),

/***/ 2225:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec3 = __webpack_require__(14171)

const fromPoints = __webpack_require__(71329)
const flip = __webpack_require__(22562)

/**
 * Transform the given plane using the given matrix
 *
 * @param {plane} out - receiving plane
 * @param {plane} plane - plane to transform
 * @param {mat4} matrix - matrix to transform with
 * @return {plane} out
 * @alias module:modeling/maths/plane.transform
 */
const transform = (out, plane, matrix) => {
  const ismirror = mat4.isMirroring(matrix)
  // get two vectors in the plane:
  const r = vec3.orthogonal(vec3.create(), plane)
  const u = vec3.cross(r, plane, r)
  const v = vec3.cross(vec3.create(), plane, u)
  // get 3 points in the plane:
  let point1 = vec3.fromScalar(vec3.create(), plane[3])
  vec3.multiply(point1, point1, plane)
  let point2 = vec3.add(vec3.create(), point1, u)
  let point3 = vec3.add(vec3.create(), point1, v)
  // transform the points:
  point1 = vec3.transform(point1, point1, matrix)
  point2 = vec3.transform(point2, point2, matrix)
  point3 = vec3.transform(point3, point3, matrix)
  // and create a new plane from the transformed points:
  fromPoints(out, point1, point2, point3)
  if (ismirror) {
    // the transform is mirroring so flip the plane
    flip(out, out)
  }
  return out
}

module.exports = transform


/***/ }),

/***/ 64364:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { NEPS } = __webpack_require__(77022)

/**
 * Compare two normals (unit vectors) for near equality.
 * @param {vec3} a - normal a
 * @param {vec3} b - normal b
 * @returns {Boolean} true if a and b are nearly equal
 * @alias module:modeling/maths/utils.aboutEqualNormals
 */
const aboutEqualNormals = (a, b) => (Math.abs(a[0] - b[0]) <= NEPS && Math.abs(a[1] - b[1]) <= NEPS && Math.abs(a[2] - b[2]) <= NEPS)

module.exports = aboutEqualNormals


/***/ }),

/***/ 1091:
/***/ ((module) => {

/**
 * Calculate the area under the given points.
 * @param {Array} points - list of 2D points
 * @return {Number} area under the given points
 * @alias module:modeling/maths/utils.area
 */
const area = (points) => {
  let area = 0
  for (let i = 0; i < points.length; i++) {
    const j = (i + 1) % points.length
    area += points[i][0] * points[j][1]
    area -= points[j][0] * points[i][1]
  }
  return (area / 2.0)
}

module.exports = area


/***/ }),

/***/ 98589:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Utility functions for maths.
 * @module modeling/maths/utils
 * @example
 * const { area, solve2Linear } = require('@jscad/maths').utils
 */
module.exports = {
  aboutEqualNormals: __webpack_require__(64364),
  area: __webpack_require__(1091),
  cos: (__webpack_require__(84580).cos),
  interpolateBetween2DPointsForY: __webpack_require__(39268),
  intersect: __webpack_require__(58601),
  sin: (__webpack_require__(84580).sin),
  solve2Linear: __webpack_require__(13295)
}


/***/ }),

/***/ 39268:
/***/ ((module) => {

/**
 * Get the X coordinate of a point with a certain Y coordinate, interpolated between two points.
 * Interpolation is robust even if the points have the same Y coordinate
 * @param {vec2} point1
 * @param {vec2} point2
 * @param {Number} y
 * @return {Array} X and Y of interpolated point
 * @alias module:modeling/maths/utils.interpolateBetween2DPointsForY
 */
const interpolateBetween2DPointsForY = (point1, point2, y) => {
  let f1 = y - point1[1]
  let f2 = point2[1] - point1[1]
  if (f2 < 0) {
    f1 = -f1
    f2 = -f2
  }
  let t
  if (f1 <= 0) {
    t = 0.0
  } else if (f1 >= f2) {
    t = 1.0
  } else if (f2 < 1e-10) { // FIXME Should this be EPS?
    t = 0.5
  } else {
    t = f1 / f2
  }
  const result = point1[0] + t * (point2[0] - point1[0])
  return result
}

module.exports = interpolateBetween2DPointsForY


/***/ }),

/***/ 58601:
/***/ ((module) => {

/**
 * Calculate the intersect point of the two line segments (p1-p2 and p3-p4), end points included.
 * Note: If the line segments do NOT intersect then undefined is returned.
 * @see http://paulbourke.net/geometry/pointlineplane/
 * @param {vec2} p1 - first point of first line segment
 * @param {vec2} p2 - second point of first line segment
 * @param {vec2} p3 - first point of second line segment
 * @param {vec2} p4 - second point of second line segment
 * @returns {vec2} intersection point of the two line segments, or undefined
 * @alias module:modeling/maths/utils.intersect
 */
const intersect = (p1, p2, p3, p4) => {
  // Check if none of the lines are of length 0
  if ((p1[0] === p2[0] && p1[1] === p2[1]) || (p3[0] === p4[0] && p3[1] === p4[1])) {
    return undefined
  }

  const denominator = ((p4[1] - p3[1]) * (p2[0] - p1[0]) - (p4[0] - p3[0]) * (p2[1] - p1[1]))

  // Lines are parallel
  if (Math.abs(denominator) < Number.MIN_VALUE) {
    return undefined
  }

  const ua = ((p4[0] - p3[0]) * (p1[1] - p3[1]) - (p4[1] - p3[1]) * (p1[0] - p3[0])) / denominator
  const ub = ((p2[0] - p1[0]) * (p1[1] - p3[1]) - (p2[1] - p1[1]) * (p1[0] - p3[0])) / denominator

  // is the intersection along the segments
  if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {
    return undefined
  }

  // Return the x and y coordinates of the intersection
  const x = p1[0] + ua * (p2[0] - p1[0])
  const y = p1[1] + ua * (p2[1] - p1[1])

  return [x, y]
}

module.exports = intersect


/***/ }),

/***/ 13295:
/***/ ((module) => {

const solve2Linear = (a, b, c, d, u, v) => {
  const det = a * d - b * c
  const invdet = 1.0 / det
  let x = u * d - b * v
  let y = -u * c + a * v
  x *= invdet
  y *= invdet
  return [x, y]
}

module.exports = solve2Linear


/***/ }),

/***/ 84580:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { NEPS } = __webpack_require__(77022)

/*
 * Returns zero if n is within epsilon of zero, otherwise return n
 */
const rezero = (n) => Math.abs(n) < NEPS ? 0 : n

/**
 * Return Math.sin but accurate for TAU / 4 rotations.
 * Fixes rounding errors when sin should be 0.
 *
 * @param {Number} radians - angle in radians
 * @returns {Number} sine of the given angle
 * @alias module:modeling/utils.sin
 * @example
 * sin(TAU / 2) == 0
 * sin(TAU) == 0
 */
const sin = (radians) => rezero(Math.sin(radians))

/**
 * Return Math.cos but accurate for TAU / 4 rotations.
 * Fixes rounding errors when cos should be 0.
 *
 * @param {Number} radians - angle in radians
 * @returns {Number} cosine of the given angle
 * @alias module:modeling/utils.cos
 * @example
 * cos(TAU * 0.25) == 0
 * cos(TAU * 0.75) == 0
 */
const cos = (radians) => rezero(Math.cos(radians))

module.exports = { sin, cos }


/***/ }),

/***/ 490:
/***/ ((module) => {

/**
 * Calculates the absolute coordinates of the given vector.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - vector of reference
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.abs
 */
const abs = (out, vector) => {
  out[0] = Math.abs(vector[0])
  out[1] = Math.abs(vector[1])
  return out
}

module.exports = abs


/***/ }),

/***/ 71807:
/***/ ((module) => {

/**
 * Adds the coordinates of two vectors (A+B).
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.add
 */
const add = (out, a, b) => {
  out[0] = a[0] + b[0]
  out[1] = a[1] + b[1]
  return out
}

module.exports = add


/***/ }),

/***/ 6810:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(6503)


/***/ }),

/***/ 48809:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const angleRadians = __webpack_require__(6503)

/**
 * Calculate the angle of the given vector.
 *
 * @param {vec2} vector - vector of reference
 * @returns {Number} angle in degrees
 * @alias module:modeling/maths/vec2.angleDegrees
 */
const angleDegrees = (vector) => angleRadians(vector) * 57.29577951308232

module.exports = angleDegrees


/***/ }),

/***/ 6503:
/***/ ((module) => {

/**
 * Calculate the angle of the given vector.
 *
 * @param {vec2} vector - vector of reference
 * @returns {Number} angle in radians
 * @alias module:modeling/maths/vec2.angleRadians
 */
const angleRadians = (vector) => Math.atan2(vector[1], vector[0]) // y=sin, x=cos

module.exports = angleRadians


/***/ }),

/***/ 30457:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(35465)

/**
 * Create a clone of the given vector.
 *
 * @param {vec2} vector - vector to clone
 * @returns {vec2} a new vector
 * @alias module:modeling/maths/vec2.clone
 */
const clone = (vector) => {
  const out = create()
  out[0] = vector[0]
  out[1] = vector[1]
  return out
}

module.exports = clone


/***/ }),

/***/ 92928:
/***/ ((module) => {

/**
 * Create a copy of the given vector.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - source vector
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.copy
 */
const copy = (out, vector) => {
  out[0] = vector[0]
  out[1] = vector[1]
  return out
}

module.exports = copy


/***/ }),

/***/ 35465:
/***/ ((module) => {

/**
 * Represents a two dimensional vector.
 * See fromValues().
 * @typedef {Array} vec2
 */

/**
 * Creates a new vector, initialized to [0,0].
 *
 * @returns {vec2} a new vector
 * @alias module:modeling/maths/vec2.create
 */
const create = () => [0, 0]

module.exports = create


/***/ }),

/***/ 26088:
/***/ ((module) => {

/**
 * Computes the cross product (3D) of two vectors.
 *
 * @param {vec3} out - receiving vector (3D)
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {vec3} out
 * @alias module:modeling/maths/vec2.cross
 */
const cross = (out, a, b) => {
  out[0] = 0
  out[1] = 0
  out[2] = a[0] * b[1] - a[1] * b[0]
  return out
}

module.exports = cross


/***/ }),

/***/ 9878:
/***/ ((module) => {

/**
 * Calculates the distance between two vectors.
 *
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {Number} distance
 * @alias module:modeling/maths/vec2.distance
 */
const distance = (a, b) => {
  const x = b[0] - a[0]
  const y = b[1] - a[1]
  return Math.sqrt(x * x + y * y)
}

module.exports = distance


/***/ }),

/***/ 11407:
/***/ ((module) => {

/**
 * Divides the coordinates of two vectors (A/B).
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.divide
 */
const divide = (out, a, b) => {
  out[0] = a[0] / b[0]
  out[1] = a[1] / b[1]
  return out
}

module.exports = divide


/***/ }),

/***/ 43763:
/***/ ((module) => {

/**
 * Calculates the dot product of two vectors.
 *
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {Number} dot product
 * @alias module:modeling/maths/vec2.dot
 */
const dot = (a, b) => a[0] * b[0] + a[1] * b[1]

module.exports = dot


/***/ }),

/***/ 74626:
/***/ ((module) => {

/**
 * Compare the given vectors for equality.
 *
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {Boolean} true if a and b are equal
 * @alias module:modeling/maths/vec2.equals
 */
const equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1])

module.exports = equals


/***/ }),

/***/ 14240:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const fromAngleRadians = __webpack_require__(99076)

/**
 * Create a new vector in the direction of the given angle.
 *
 * @param {vec2} out - receiving vector
 * @param {Number} degrees - angle in degrees
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.fromAngleDegrees
 */
const fromAngleDegrees = (out, degrees) => fromAngleRadians(out, degrees * 0.017453292519943295)

module.exports = fromAngleDegrees


/***/ }),

/***/ 99076:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { sin, cos } = __webpack_require__(84580)

/**
 * Create a new vector in the direction of the given angle.
 *
 * @param {vec2} out - receiving vector
 * @param {Number} radians - angle in radians
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.fromAngleRadians
 */
const fromAngleRadians = (out, radians) => {
  out[0] = cos(radians)
  out[1] = sin(radians)
  return out
}

module.exports = fromAngleRadians


/***/ }),

/***/ 5155:
/***/ ((module) => {

/**
 * Create a vector from a single scalar value.
 *
 * @param {vec2} out - receiving vector
 * @param {Number} scalar - the scalar value
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.fromScalar
 */
const fromScalar = (out, scalar) => {
  out[0] = scalar
  out[1] = scalar
  return out
}

module.exports = fromScalar


/***/ }),

/***/ 35122:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(35465)

/**
 * Creates a new vector initialized with the given values.
 *
 * @param {Number} x - X coordinate
 * @param {Number} y - Y coordinate
 * @returns {vec2} a new vector
 * @alias module:modeling/maths/vec2.fromValues
 */
const fromValues = (x, y) => {
  const out = create()
  out[0] = x
  out[1] = y
  return out
}

module.exports = fromValues


/***/ }),

/***/ 4138:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a two dimensional vector.
 * @module modeling/maths/vec2
 */
module.exports = {
  abs: __webpack_require__(490),
  add: __webpack_require__(71807),
  angle: __webpack_require__(6810),
  angleDegrees: __webpack_require__(48809),
  angleRadians: __webpack_require__(6503),
  clone: __webpack_require__(30457),
  copy: __webpack_require__(92928),
  create: __webpack_require__(35465),
  cross: __webpack_require__(26088),
  distance: __webpack_require__(9878),
  divide: __webpack_require__(11407),
  dot: __webpack_require__(43763),
  equals: __webpack_require__(74626),
  fromAngleDegrees: __webpack_require__(14240),
  fromAngleRadians: __webpack_require__(99076),
  fromScalar: __webpack_require__(5155),
  fromValues: __webpack_require__(35122),
  length: __webpack_require__(94602),
  lerp: __webpack_require__(35621),
  max: __webpack_require__(47573),
  min: __webpack_require__(7952),
  multiply: __webpack_require__(3602),
  negate: __webpack_require__(84606),
  normal: __webpack_require__(59271),
  normalize: __webpack_require__(50410),
  rotate: __webpack_require__(61099),
  scale: __webpack_require__(29878),
  snap: __webpack_require__(66203),
  squaredDistance: __webpack_require__(28558),
  squaredLength: __webpack_require__(16656),
  subtract: __webpack_require__(40577),
  toString: __webpack_require__(2460),
  transform: __webpack_require__(61941)
}


/***/ }),

/***/ 94602:
/***/ ((module) => {

/**
 * Calculates the length of the given vector.
 *
 * @param {vec2} vector - vector of reference
 * @returns {Number} length
 * @alias module:modeling/maths/vec2.length
 */
const length = (vector) => Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1])

module.exports = length


/***/ }),

/***/ 35621:
/***/ ((module) => {

/**
 * Performs a linear interpolation between two vectors.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @param {Number} t - interpolation amount between the two vectors
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.lerp
 */
const lerp = (out, a, b, t) => {
  const ax = a[0]
  const ay = a[1]
  out[0] = ax + t * (b[0] - ax)
  out[1] = ay + t * (b[1] - ay)
  return out
}

module.exports = lerp


/***/ }),

/***/ 47573:
/***/ ((module) => {

/**
 * Returns the maximum coordinates of two vectors.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.max
 */
const max = (out, a, b) => {
  out[0] = Math.max(a[0], b[0])
  out[1] = Math.max(a[1], b[1])
  return out
}

module.exports = max


/***/ }),

/***/ 7952:
/***/ ((module) => {

/**
 * Returns the minimum coordinates of two vectors.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.min
 */
const min = (out, a, b) => {
  out[0] = Math.min(a[0], b[0])
  out[1] = Math.min(a[1], b[1])
  return out
}

module.exports = min


/***/ }),

/***/ 3602:
/***/ ((module) => {

/**
 * Multiplies the coordinates of two vectors (A*B).
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.multiply
 */
const multiply = (out, a, b) => {
  out[0] = a[0] * b[0]
  out[1] = a[1] * b[1]
  return out
}

module.exports = multiply


/***/ }),

/***/ 84606:
/***/ ((module) => {

/**
 * Negates the coordinates of the given vector.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - vector to negate
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.negate
 */
const negate = (out, vector) => {
  out[0] = -vector[0]
  out[1] = -vector[1]
  return out
}

module.exports = negate


/***/ }),

/***/ 59271:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)

const create = __webpack_require__(35465)
const rotate = __webpack_require__(61099)

/**
 * Calculates the normal of the given vector.
 * The normal value is the given vector rotated 90 degrees.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - given value
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.normal
 */
const normal = (out, vector) => rotate(out, vector, create(), (TAU / 4))

module.exports = normal


/***/ }),

/***/ 50410:
/***/ ((module) => {

/**
 * Normalize the given vector.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - vector to normalize
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.normalize
 */
const normalize = (out, vector) => {
  const x = vector[0]
  const y = vector[1]
  let len = x * x + y * y
  if (len > 0) {
    len = 1 / Math.sqrt(len)
  }
  out[0] = x * len
  out[1] = y * len
  return out
}

// old this.dividedBy(this.length())

module.exports = normalize


/***/ }),

/***/ 61099:
/***/ ((module) => {

/**
 * Rotates the given vector by the given angle.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - vector to rotate
 * @param {vec2} origin - origin of the rotation
 * @param {Number} radians - angle of rotation (radians)
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.rotate
 */
const rotate = (out, vector, origin, radians) => {
  const x = vector[0] - origin[0]
  const y = vector[1] - origin[1]
  const c = Math.cos(radians)
  const s = Math.sin(radians)

  out[0] = x * c - y * s + origin[0]
  out[1] = x * s + y * c + origin[1]

  return out
}

module.exports = rotate


/***/ }),

/***/ 29878:
/***/ ((module) => {

/**
 * Scales the coordinates of the given vector.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - vector to scale
 * @param {Number} amount - amount to scale
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.scale
 */
const scale = (out, vector, amount) => {
  out[0] = vector[0] * amount
  out[1] = vector[1] * amount
  return out
}

module.exports = scale


/***/ }),

/***/ 66203:
/***/ ((module) => {

/**
 * Snaps the coordinates of the given vector to the given epsilon.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - vector to snap
 * @param {Number} epsilon - epsilon of precision, less than 0
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.snap
 */
const snap = (out, vector, epsilon) => {
  out[0] = Math.round(vector[0] / epsilon) * epsilon + 0
  out[1] = Math.round(vector[1] / epsilon) * epsilon + 0
  return out
}

module.exports = snap


/***/ }),

/***/ 28558:
/***/ ((module) => {

/**
 * Calculates the squared distance between the given vectors.
 *
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {Number} squared distance
 * @alias module:modeling/maths/vec2.squaredDistance
 */
const squaredDistance = (a, b) => {
  const x = b[0] - a[0]
  const y = b[1] - a[1]
  return x * x + y * y
}

module.exports = squaredDistance


/***/ }),

/***/ 16656:
/***/ ((module) => {

/**
 * Calculates the squared length of the given vector.
 *
 * @param {vec2} vector - vector of reference
 * @returns {Number} squared length
 * @alias module:modeling/maths/vec2.squaredLength
 */
const squaredLength = (vector) => {
  const x = vector[0]
  const y = vector[1]
  return x * x + y * y
}

module.exports = squaredLength


/***/ }),

/***/ 40577:
/***/ ((module) => {

/**
 * Subtracts the coordinates of two vectors (A-B).
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} a - first operand
 * @param {vec2} b - second operand
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.subtract
 */
const subtract = (out, a, b) => {
  out[0] = a[0] - b[0]
  out[1] = a[1] - b[1]
  return out
}

module.exports = subtract


/***/ }),

/***/ 2460:
/***/ ((module) => {

/**
 * Convert the given vector to a representative string.
 *
 * @param {vec2} vector - vector of reference
 * @returns {String} string representation
 * @alias module:modeling/maths/vec2.toString
 */
const toString = (vector) => `[${vector[0].toFixed(7)}, ${vector[1].toFixed(7)}]`

module.exports = toString


/***/ }),

/***/ 61941:
/***/ ((module) => {

/**
 * Transforms the given vector using the given matrix.
 *
 * @param {vec2} out - receiving vector
 * @param {vec2} vector - vector to transform
 * @param {mat4} matrix - matrix to transform with
 * @returns {vec2} out
 * @alias module:modeling/maths/vec2.transform
 */
const transform = (out, vector, matrix) => {
  const x = vector[0]
  const y = vector[1]
  out[0] = matrix[0] * x + matrix[4] * y + matrix[12]
  out[1] = matrix[1] * x + matrix[5] * y + matrix[13]
  return out
}

module.exports = transform


/***/ }),

/***/ 46140:
/***/ ((module) => {

/**
 * Calculates the absolute coordinates of the give vector.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector of reference
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.abs
 */
const abs = (out, vector) => {
  out[0] = Math.abs(vector[0])
  out[1] = Math.abs(vector[1])
  out[2] = Math.abs(vector[2])
  return out
}

module.exports = abs


/***/ }),

/***/ 90913:
/***/ ((module) => {

/**
 * Adds the coordinates of two vectors (A+B).
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.add
 */
const add = (out, a, b) => {
  out[0] = a[0] + b[0]
  out[1] = a[1] + b[1]
  out[2] = a[2] + b[2]
  return out
}

module.exports = add


/***/ }),

/***/ 88501:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const dot = __webpack_require__(11087)

/**
 * Calculate the angle between two vectors.
 *
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {Number} angle (radians)
 * @alias module:modeling/maths/vec3.angle
 */
const angle = (a, b) => {
  const ax = a[0]
  const ay = a[1]
  const az = a[2]
  const bx = b[0]
  const by = b[1]
  const bz = b[2]
  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az)
  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz)
  const mag = mag1 * mag2
  const cosine = mag && dot(a, b) / mag
  return Math.acos(Math.min(Math.max(cosine, -1), 1))
}

module.exports = angle


/***/ }),

/***/ 96015:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(73394)

/**
 * Create a clone of the given vector.
 *
 * @param {vec3} vector - vector to clone
 * @returns {vec3} a new vector
 * @alias module:modeling/maths/vec3.clone
 */
const clone = (vector) => {
  const out = create()
  out[0] = vector[0]
  out[1] = vector[1]
  out[2] = vector[2]
  return out
}

module.exports = clone


/***/ }),

/***/ 70887:
/***/ ((module) => {

/**
 * Create a copy of the given vector.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to copy
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.copy
 */
const copy = (out, vector) => {
  out[0] = vector[0]
  out[1] = vector[1]
  out[2] = vector[2]
  return out
}

module.exports = copy


/***/ }),

/***/ 73394:
/***/ ((module) => {

/**
 * Represents a three dimensional vector.
 * See fromValues().
 * @typedef {Array} vec3
 */

/**
 * Creates a new vector initialized to [0,0,0].
 *
 * @returns {vec3} a new vector
 * @alias module:modeling/maths/vec3.create
 */
const create = () => [0, 0, 0]

module.exports = create


/***/ }),

/***/ 82344:
/***/ ((module) => {

/**
 * Computes the cross product of the given vectors (AxB).
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.cross
 */
const cross = (out, a, b) => {
  const ax = a[0]
  const ay = a[1]
  const az = a[2]
  const bx = b[0]
  const by = b[1]
  const bz = b[2]

  out[0] = ay * bz - az * by
  out[1] = az * bx - ax * bz
  out[2] = ax * by - ay * bx
  return out
}

module.exports = cross


/***/ }),

/***/ 3776:
/***/ ((module) => {

/**
 * Calculates the Euclidian distance between the given vectors.
 *
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {Number} distance
 * @alias module:modeling/maths/vec3.distance
 */
const distance = (a, b) => {
  const x = b[0] - a[0]
  const y = b[1] - a[1]
  const z = b[2] - a[2]
  return Math.sqrt(x * x + y * y + z * z)
}

module.exports = distance


/***/ }),

/***/ 43697:
/***/ ((module) => {

/**
 * Divides the coordinates of two vectors (A/B).
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - dividend vector
 * @param {vec3} b - divisor vector
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.divide
 */
const divide = (out, a, b) => {
  out[0] = a[0] / b[0]
  out[1] = a[1] / b[1]
  out[2] = a[2] / b[2]
  return out
}

module.exports = divide


/***/ }),

/***/ 11087:
/***/ ((module) => {

/**
 * Calculates the dot product of two vectors.
 *
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {Number} dot product
 * @alias module:modeling/maths/vec3.dot
 */
const dot = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2]

module.exports = dot


/***/ }),

/***/ 73314:
/***/ ((module) => {

/**
 * Compare the given vectors for equality.
 *
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {Boolean} true if a and b are equal
 * @alias module:modeling/maths/vec3.equals
 */
const equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2])

module.exports = equals


/***/ }),

/***/ 69044:
/***/ ((module) => {

/**
 * Creates a vector from a single scalar value.
 * All components of the resulting vector have the given value.
 *
 * @param {vec3} out - receiving vector
 * @param {Number} scalar
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.fromScalar
 */
const fromScalar = (out, scalar) => {
  out[0] = scalar
  out[1] = scalar
  out[2] = scalar
  return out
}

module.exports = fromScalar


/***/ }),

/***/ 3919:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(73394)

/**
 * Creates a new vector initialized with the given values.
 *
 * @param {Number} x - X component
 * @param {Number} y - Y component
 * @param {Number} z - Z component
 * @returns {vec3} a new vector
 * @alias module:modeling/maths/vec3.fromValues
 */
const fromValues = (x, y, z) => {
  const out = create()
  out[0] = x
  out[1] = y
  out[2] = z
  return out
}

module.exports = fromValues


/***/ }),

/***/ 44436:
/***/ ((module) => {

/**
 * Create a new vector by extending a 2D vector with a Z value.
 *
 * @param {vec3} out - receiving vector
 * @param {Array} vector - 2D vector of values
 * @param {Number} [z=0] - Z value
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.fromVec2
 */
const fromVector2 = (out, vector, z = 0) => {
  out[0] = vector[0]
  out[1] = vector[1]
  out[2] = z
  return out
}

module.exports = fromVector2


/***/ }),

/***/ 14171:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a three dimensional vector.
 * @see {@link vec3} for data structure information.
 * @module modeling/maths/vec3
 */
module.exports = {
  abs: __webpack_require__(46140),
  add: __webpack_require__(90913),
  angle: __webpack_require__(88501),
  clone: __webpack_require__(96015),
  copy: __webpack_require__(70887),
  create: __webpack_require__(73394),
  cross: __webpack_require__(82344),
  distance: __webpack_require__(3776),
  divide: __webpack_require__(43697),
  dot: __webpack_require__(11087),
  equals: __webpack_require__(73314),
  fromScalar: __webpack_require__(69044),
  fromValues: __webpack_require__(3919),
  fromVec2: __webpack_require__(44436),
  length: __webpack_require__(57045),
  lerp: __webpack_require__(40859),
  max: __webpack_require__(49171),
  min: __webpack_require__(43459),
  multiply: __webpack_require__(62980),
  negate: __webpack_require__(64250),
  normalize: __webpack_require__(24319),
  orthogonal: __webpack_require__(28045),
  rotateX: __webpack_require__(80817),
  rotateY: __webpack_require__(18776),
  rotateZ: __webpack_require__(91369),
  scale: __webpack_require__(33815),
  snap: __webpack_require__(59215),
  squaredDistance: __webpack_require__(51125),
  squaredLength: __webpack_require__(73332),
  subtract: __webpack_require__(53824),
  toString: __webpack_require__(114),
  transform: __webpack_require__(98751)
}


/***/ }),

/***/ 57045:
/***/ ((module) => {

/**
 * Calculates the length of a vector.
 *
 * @param {vec3} vector - vector to calculate length of
 * @returns {Number} length
 * @alias module:modeling/maths/vec3.length
 */
const length = (vector) => {
  const x = vector[0]
  const y = vector[1]
  const z = vector[2]
  return Math.sqrt(x * x + y * y + z * z)
}

module.exports = length


/***/ }),

/***/ 40859:
/***/ ((module) => {

/**
 * Performs a linear interpolation between two vectors.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @param {Number} t - interpolant (0.0 to 1.0) applied between the two inputs
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.lerp
 */
const lerp = (out, a, b, t) => {
  out[0] = a[0] + t * (b[0] - a[0])
  out[1] = a[1] + t * (b[1] - a[1])
  out[2] = a[2] + t * (b[2] - a[2])
  return out
}

module.exports = lerp


/***/ }),

/***/ 49171:
/***/ ((module) => {

/**
 * Returns the maximum coordinates of the given vectors.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.max
 */
const max = (out, a, b) => {
  out[0] = Math.max(a[0], b[0])
  out[1] = Math.max(a[1], b[1])
  out[2] = Math.max(a[2], b[2])
  return out
}

module.exports = max


/***/ }),

/***/ 43459:
/***/ ((module) => {

/**
 * Returns the minimum coordinates of the given vectors.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.min
 */
const min = (out, a, b) => {
  out[0] = Math.min(a[0], b[0])
  out[1] = Math.min(a[1], b[1])
  out[2] = Math.min(a[2], b[2])
  return out
}

module.exports = min


/***/ }),

/***/ 62980:
/***/ ((module) => {

/**
 * Multiply the coordinates of the given vectors (A*B).
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.multiply
 */
const multiply = (out, a, b) => {
  out[0] = a[0] * b[0]
  out[1] = a[1] * b[1]
  out[2] = a[2] * b[2]
  return out
}

module.exports = multiply


/***/ }),

/***/ 64250:
/***/ ((module) => {

/**
 * Negates the coordinates of the given vector.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to negate
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.negate
 */
const negate = (out, vector) => {
  out[0] = -vector[0]
  out[1] = -vector[1]
  out[2] = -vector[2]
  return out
}

module.exports = negate


/***/ }),

/***/ 24319:
/***/ ((module) => {

/**
 * Normalize the given vector.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to normalize
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.normalize
 */
const normalize = (out, vector) => {
  const x = vector[0]
  const y = vector[1]
  const z = vector[2]
  let len = x * x + y * y + z * z
  if (len > 0) {
    len = 1 / Math.sqrt(len)
  }
  out[0] = x * len
  out[1] = y * len
  out[2] = z * len
  return out
}

module.exports = normalize


/***/ }),

/***/ 28045:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const abs = __webpack_require__(46140)
const create = __webpack_require__(73394)
const cross = __webpack_require__(82344)

/**
 * Create a new vector that is orthogonal to the given vector.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector of reference
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.orthogonal
 */
const orthogonal = (out, vector) => {
  const bV = abs(create(), vector)
  const b0 = 0 + ((bV[0] < bV[1]) && (bV[0] < bV[2]))
  const b1 = 0 + ((bV[1] <= bV[0]) && (bV[1] < bV[2]))
  const b2 = 0 + ((bV[2] <= bV[0]) && (bV[2] <= bV[1]))

  return cross(out, vector, [b0, b1, b2])
}

module.exports = orthogonal


/***/ }),

/***/ 80817:
/***/ ((module) => {

/**
 * Rotate the given vector around the given origin, X axis only.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to rotate
 * @param {vec3} origin - origin of the rotation
 * @param {Number} radians - angle of rotation
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.rotateX
 */
const rotateX = (out, vector, origin, radians) => {
  const p = []
  const r = []

  // translate point to the origin
  p[0] = vector[0] - origin[0]
  p[1] = vector[1] - origin[1]
  p[2] = vector[2] - origin[2]

  // perform rotation
  r[0] = p[0]
  r[1] = p[1] * Math.cos(radians) - p[2] * Math.sin(radians)
  r[2] = p[1] * Math.sin(radians) + p[2] * Math.cos(radians)

  // translate to correct position
  out[0] = r[0] + origin[0]
  out[1] = r[1] + origin[1]
  out[2] = r[2] + origin[2]

  return out
}

module.exports = rotateX


/***/ }),

/***/ 18776:
/***/ ((module) => {

/**
 * Rotate the given vector around the given origin, Y axis only.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to rotate
 * @param {vec3} origin - origin of the rotation
 * @param {Number} radians - angle of rotation
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.rotateY
 */
const rotateY = (out, vector, origin, radians) => {
  const p = []
  const r = []

  // translate point to the origin
  p[0] = vector[0] - origin[0]
  p[1] = vector[1] - origin[1]
  p[2] = vector[2] - origin[2]

  // perform rotation
  r[0] = p[2] * Math.sin(radians) + p[0] * Math.cos(radians)
  r[1] = p[1]
  r[2] = p[2] * Math.cos(radians) - p[0] * Math.sin(radians)

  // translate to correct position
  out[0] = r[0] + origin[0]
  out[1] = r[1] + origin[1]
  out[2] = r[2] + origin[2]

  return out
}

module.exports = rotateY


/***/ }),

/***/ 91369:
/***/ ((module) => {

/**
 * Rotate the given vector around the given origin, Z axis only.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to rotate
 * @param {vec3} origin - origin of the rotation
 * @param {Number} radians - angle of rotation in radians
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.rotateZ
 */
const rotateZ = (out, vector, origin, radians) => {
  const p = []
  const r = []
  // Translate point to the origin
  p[0] = vector[0] - origin[0]
  p[1] = vector[1] - origin[1]

  // perform rotation
  r[0] = (p[0] * Math.cos(radians)) - (p[1] * Math.sin(radians))
  r[1] = (p[0] * Math.sin(radians)) + (p[1] * Math.cos(radians))

  // translate to correct position
  out[0] = r[0] + origin[0]
  out[1] = r[1] + origin[1]
  out[2] = vector[2]

  return out
}

module.exports = rotateZ


/***/ }),

/***/ 33815:
/***/ ((module) => {

/**
 * Scales the coordinates of the given vector by a scalar number.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to scale
 * @param {Number} amount - amount to scale the vector by
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.scale
 */
const scale = (out, vector, amount) => {
  out[0] = vector[0] * amount
  out[1] = vector[1] * amount
  out[2] = vector[2] * amount
  return out
}

module.exports = scale


/***/ }),

/***/ 59215:
/***/ ((module) => {

/**
 * Snaps the coordinates of the given vector to the given epsilon.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to snap
 * @param {Number} epsilon - epsilon of precision, less than 0
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.snap
 */
const snap = (out, vector, epsilon) => {
  out[0] = Math.round(vector[0] / epsilon) * epsilon + 0
  out[1] = Math.round(vector[1] / epsilon) * epsilon + 0
  out[2] = Math.round(vector[2] / epsilon) * epsilon + 0
  return out
}

module.exports = snap


/***/ }),

/***/ 51125:
/***/ ((module) => {

/**
 * Calculates the squared distance between two vectors.
 *
 * @param {vec3} a - first operand
 * @param {vec3} b - second operand
 * @returns {Number} squared distance
 * @alias module:modeling/maths/vec3.squaredDistance
 */
const squaredDistance = (a, b) => {
  const x = b[0] - a[0]
  const y = b[1] - a[1]
  const z = b[2] - a[2]
  return x * x + y * y + z * z
}

module.exports = squaredDistance


/***/ }),

/***/ 73332:
/***/ ((module) => {

/**
 * Calculates the squared length of the given vector.
 *
 * @param {vec3} vector - vector to calculate squared length of
 * @returns {Number} squared length
 * @alias module:modeling/maths/vec3.squaredLength
 */
const squaredLength = (vector) => {
  const x = vector[0]
  const y = vector[1]
  const z = vector[2]
  return x * x + y * y + z * z
}

module.exports = squaredLength


/***/ }),

/***/ 53824:
/***/ ((module) => {

/**
 * Subtracts the coordinates of two vectors (A-B).
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} a - minuend vector
 * @param {vec3} b - subtrahend vector
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.subtract
 */
const subtract = (out, a, b) => {
  out[0] = a[0] - b[0]
  out[1] = a[1] - b[1]
  out[2] = a[2] - b[2]
  return out
}

module.exports = subtract


/***/ }),

/***/ 114:
/***/ ((module) => {

/**
 * Convert the given vector to a representative string.
 * @param {vec3} vec - vector of reference
 * @returns {String} string representation
 * @alias module:modeling/maths/vec3.toString
 */
const toString = (vec) => `[${vec[0].toFixed(7)}, ${vec[1].toFixed(7)}, ${vec[2].toFixed(7)}]`

module.exports = toString


/***/ }),

/***/ 98751:
/***/ ((module) => {

/**
 * Transforms the given vector using the given matrix.
 *
 * @param {vec3} out - receiving vector
 * @param {vec3} vector - vector to transform
 * @param {mat4} matrix - transform matrix
 * @returns {vec3} out
 * @alias module:modeling/maths/vec3.transform
 */
const transform = (out, vector, matrix) => {
  const x = vector[0]
  const y = vector[1]
  const z = vector[2]
  let w = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15]
  w = w || 1.0
  out[0] = (matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]) / w
  out[1] = (matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]) / w
  out[2] = (matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]) / w
  return out
}

module.exports = transform


/***/ }),

/***/ 82712:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(4658)

/**
 * Create a clone of the given vector.
 *
 * @param {vec4} vector - source vector
 * @returns {vec4} a new vector
 * @alias module:modeling/maths/vec4.clone
 */
const clone = (vector) => {
  const out = create()
  out[0] = vector[0]
  out[1] = vector[1]
  out[2] = vector[2]
  out[3] = vector[3]
  return out
}

module.exports = clone


/***/ }),

/***/ 25018:
/***/ ((module) => {

/**
 * Create a copy of the given vector.
 *
 * @param {vec4} out - receiving vector
 * @param {vec4} vector - source vector
 * @returns {vec4} out
 * @alias module:modeling/maths/vec4.copy
 */
const copy = (out, vector) => {
  out[0] = vector[0]
  out[1] = vector[1]
  out[2] = vector[2]
  out[3] = vector[3]
  return out
}

module.exports = copy


/***/ }),

/***/ 4658:
/***/ ((module) => {

/**
 * Represents a four dimensional vector.
 * See fromValues().
 * @typedef {Array} vec4
 */

/**
 * Creates a new vector initialized to [0,0,0,0].
 *
 * @returns {vec4} a new vector
 * @alias module:modeling/maths/vec4.create
 */
const create = () => [0, 0, 0, 0]

module.exports = create


/***/ }),

/***/ 4750:
/***/ ((module) => {

/**
 * Calculates the dot product of the given vectors.
 *
 * @param {vec4} a - first vector
 * @param {vec4} b - second vector
 * @returns {Number} dot product
 * @alias module:modeling/maths/vec4.dot
 */
const dot = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]

module.exports = dot


/***/ }),

/***/ 39066:
/***/ ((module) => {

/**
 * Compare the given vectors for equality.
 *
 * @param {vec4} a - first vector
 * @param {vec4} b - second vector
 * @return {Boolean} true if vectors are equal
 * @alias module:modeling/maths/vec4.equals
 */
const equals = (a, b) => ((a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2]) && (a[3] === b[3]))

module.exports = equals


/***/ }),

/***/ 40768:
/***/ ((module) => {

/**
 * Create a new vector from the given scalar value.
 *
 * @param {vec4} out - receiving vector
 * @param  {Number} scalar
 * @returns {vec4} out
 * @alias module:modeling/maths/vec4.fromScalar
 */
const fromScalar = (out, scalar) => {
  out[0] = scalar
  out[1] = scalar
  out[2] = scalar
  out[3] = scalar
  return out
}

module.exports = fromScalar


/***/ }),

/***/ 58627:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(4658)

/**
 * Creates a new vector with the given values.
 *
 * @param {Number} x - X component
 * @param {Number} y - Y component
 * @param {Number} z - Z component
 * @param {Number} w - W component
 * @returns {vec4} a new vector
 * @alias module:modeling/maths/vec4.fromValues
 */
const fromValues = (x, y, z, w) => {
  const out = create()
  out[0] = x
  out[1] = y
  out[2] = z
  out[3] = w
  return out
}

module.exports = fromValues


/***/ }),

/***/ 33870:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a four dimensional vector.
 * @see {@link vec4} for data structure information.
 * @module modeling/maths/vec4
 */
module.exports = {
  clone: __webpack_require__(82712),
  copy: __webpack_require__(25018),
  create: __webpack_require__(4658),
  dot: __webpack_require__(4750),
  equals: __webpack_require__(39066),
  fromScalar: __webpack_require__(40768),
  fromValues: __webpack_require__(58627),
  toString: __webpack_require__(86318),
  transform: __webpack_require__(19366)
}


/***/ }),

/***/ 86318:
/***/ ((module) => {

/**
 * Convert the given vector to a representative string.
 *
 * @param {vec4} vec - vector to convert
 * @returns {String} representative string
 * @alias module:modeling/maths/vec4.toString
 */
const toString = (vec) => `(${vec[0].toFixed(9)}, ${vec[1].toFixed(9)}, ${vec[2].toFixed(9)}, ${vec[3].toFixed(9)})`

module.exports = toString


/***/ }),

/***/ 19366:
/***/ ((module) => {

/**
 * Transform the given vector using the given matrix.
 *
 * @param {vec4} out - receiving vector
 * @param {vec4} vector - vector to transform
 * @param {mat4} matrix - matrix to transform with
 * @returns {vec4} out
 * @alias module:modeling/maths/vec4.transform
 */
const transform = (out, vector, matrix) => {
  const [x, y, z, w] = vector

  out[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12] * w
  out[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13] * w
  out[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14] * w
  out[3] = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15] * w
  return out
}

module.exports = transform


/***/ }),

/***/ 74391:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const calculateEpsilonFromBounds = (bounds, dimensions) => {
  let total = 0
  for (let i = 0; i < dimensions; i++) {
    total += bounds[1][i] - bounds[0][i]
  }
  return EPS * total / dimensions
}

module.exports = calculateEpsilonFromBounds


/***/ }),

/***/ 65589:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All shapes (primitives or the results of operations) can be measured, e.g. calculate volume, etc.
 * @module modeling/measurements
 * @example
 * const { measureArea, measureBoundingBox, measureVolume } = require('@jscad/modeling').measurements
 */
module.exports = {
  measureAggregateArea: __webpack_require__(3794),
  measureAggregateBoundingBox: __webpack_require__(50823),
  measureAggregateEpsilon: __webpack_require__(3014),
  measureAggregateVolume: __webpack_require__(26356),
  measureArea: __webpack_require__(49036),
  measureBoundingBox: __webpack_require__(27027),
  measureBoundingSphere: __webpack_require__(53830),
  measureCenter: __webpack_require__(92496),
  measureCenterOfMass: __webpack_require__(52610),
  measureDimensions: __webpack_require__(90863),
  measureEpsilon: __webpack_require__(85768),
  measureVolume: __webpack_require__(211)
}


/***/ }),

/***/ 3794:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const measureArea = __webpack_require__(49036)

/**
 * Measure the total (aggregate) area for the given geometries.
 * Note: This measurement will not account for overlapping geometry
 * @param {...Object} geometries - the geometries to measure.
 * @return {Number} the total surface area for the group of geometry.
 * @alias module:modeling/measurements.measureAggregateArea
 *
 * @example
 * let totalArea = measureAggregateArea(sphere(),cube())
 */
const measureAggregateArea = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('measureAggregateArea: no geometries supplied')
  const areas = measureArea(geometries)
  if (geometries.length === 1) {
    return areas
  }
  const result = 0
  return areas.reduce((result, area) => result + area, result)
}

module.exports = measureAggregateArea


/***/ }),

/***/ 50823:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const vec3min = __webpack_require__(43459)
const vec3max = __webpack_require__(49171)

const measureBoundingBox = __webpack_require__(27027)

/**
 * Measure the aggregated minimum and maximum bounds for the given geometries.
 * @param {...Object} geometries - the geometries to measure
 * @return {Array} the min and max bounds for the group of geometry, i.e. [[x,y,z],[X,Y,Z]]
 * @alias module:modeling/measurements.measureAggregateBoundingBox
 *
 * @example
 * let bounds = measureAggregateBoundingBox(sphere(),cube())
 */
const measureAggregateBoundingBox = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('measureAggregateBoundingBox: no geometries supplied')
  const bounds = measureBoundingBox(geometries)
  if (geometries.length === 1) {
    return bounds
  }
  const result = [[Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE], [-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]]
  return bounds.reduce((result, item) => {
    result = [vec3min(result[0], result[0], item[0]), vec3max(result[1], result[1], item[1])]
    return result
  }, result)
}

module.exports = measureAggregateBoundingBox


/***/ }),

/***/ 3014:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const measureAggregateBoundingBox = __webpack_require__(50823)
const calculateEpsilonFromBounds = __webpack_require__(74391)
const { geom2, geom3, path2 } = __webpack_require__(14484)

/**
 * Measure the aggregated Epsilon for the given geometries.
 * @param {...Object} geometries - the geometries to measure
 * @return {Number} the aggregated Epsilon for the whole group of geometries
 * @alias module:modeling/measurements.measureAggregateEpsilon
 *
 * @example
 * let groupEpsilon = measureAggregateEpsilon(sphere(),cube())
 */
const measureAggregateEpsilon = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('measureAggregateEpsilon: no geometries supplied')
  const bounds = measureAggregateBoundingBox(geometries)

  let dimensions = 0
  dimensions = geometries.reduce((dimensions, geometry) => {
    if (path2.isA(geometry) || geom2.isA(geometry)) return Math.max(dimensions, 2)
    if (geom3.isA(geometry)) return Math.max(dimensions, 3)
    return 0
  }, dimensions)
  return calculateEpsilonFromBounds(bounds, dimensions)
}

module.exports = measureAggregateEpsilon


/***/ }),

/***/ 26356:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const measureVolume = __webpack_require__(211)

/**
 * Measure the total (aggregate) volume for the given geometries.
 * Note: This measurement will not account for overlapping geometry
 * @param {...Object} geometries - the geometries to measure.
 * @return {Number} the volume for the group of geometry.
 * @alias module:modeling/measurements.measureAggregateVolume
 *
 * @example
 * let totalVolume = measureAggregateVolume(sphere(),cube())
 */
const measureAggregateVolume = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('measureAggregateVolume: no geometries supplied')
  const volumes = measureVolume(geometries)
  if (geometries.length === 1) {
    return volumes
  }
  const result = 0
  return volumes.reduce((result, volume) => result + volume, result)
}

module.exports = measureAggregateVolume


/***/ }),

/***/ 49036:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)
const poly3 = __webpack_require__(71516)

const cache = new WeakMap()

/*
 * Measure the area of the given geometry.
 * NOTE: paths are infinitely narrow and do not have an area
 *
 * @param {path2} geometry - geometry to measure
 * @returns {Number} area of the geometry
 */
const measureAreaOfPath2 = () => 0

/*
 * Measure the area of the given geometry.
 * For a counter clockwise rotating geometry (about Z) the area is positive, otherwise negative.
 *
 * @see http://paulbourke.net/geometry/polygonmesh/
 * @param {geom2} geometry - 2D geometry to measure
 * @returns {Number} area of the geometry
 */
const measureAreaOfGeom2 = (geometry) => {
  let area = cache.get(geometry)
  if (area) return area

  const sides = geom2.toSides(geometry)
  area = sides.reduce((area, side) => area + (side[0][0] * side[1][1] - side[0][1] * side[1][0]), 0)
  area *= 0.5

  cache.set(geometry, area)

  return area
}

/*
 * Measure the area of the given geometry.
 *
 * @param {geom3} geometry - 3D geometry to measure
 * @returns {Number} area of the geometry
 */
const measureAreaOfGeom3 = (geometry) => {
  let area = cache.get(geometry)
  if (area) return area

  const polygons = geom3.toPolygons(geometry)
  area = polygons.reduce((area, polygon) => area + poly3.measureArea(polygon), 0)

  cache.set(geometry, area)

  return area
}

/**
 * Measure the area of the given geometries.
 * @param {...Objects} geometries - the geometries to measure
 * @return {Number|Array} the area, or a list of areas for each geometry
 * @alias module:modeling/measurements.measureArea
 *
 * @example
 * let area = measureArea(sphere())
 */
const measureArea = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  const results = geometries.map((geometry) => {
    if (path2.isA(geometry)) return measureAreaOfPath2(geometry)
    if (geom2.isA(geometry)) return measureAreaOfGeom2(geometry)
    if (geom3.isA(geometry)) return measureAreaOfGeom3(geometry)
    return 0
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureArea


/***/ }),

/***/ 27027:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const vec2 = __webpack_require__(4138)
const vec3 = __webpack_require__(14171)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)
const poly3 = __webpack_require__(71516)

const cache = new WeakMap()

/*
 * Measure the min and max bounds of the given (path2) geometry.
 * @return {Array[]} the min and max bounds for the geometry
 */
const measureBoundingBoxOfPath2 = (geometry) => {
  let boundingBox = cache.get(geometry)
  if (boundingBox) return boundingBox

  const points = path2.toPoints(geometry)

  let minpoint
  if (points.length === 0) {
    minpoint = vec2.create()
  } else {
    minpoint = vec2.clone(points[0])
  }
  let maxpoint = vec2.clone(minpoint)

  points.forEach((point) => {
    vec2.min(minpoint, minpoint, point)
    vec2.max(maxpoint, maxpoint, point)
  })
  minpoint = [minpoint[0], minpoint[1], 0]
  maxpoint = [maxpoint[0], maxpoint[1], 0]

  boundingBox = [minpoint, maxpoint]

  cache.set(geometry, boundingBox)

  return boundingBox
}

/*
 * Measure the min and max bounds of the given (geom2) geometry.
 * @return {Array[]} the min and max bounds for the geometry
 */
const measureBoundingBoxOfGeom2 = (geometry) => {
  let boundingBox = cache.get(geometry)
  if (boundingBox) return boundingBox

  const points = geom2.toPoints(geometry)

  let minpoint
  if (points.length === 0) {
    minpoint = vec2.create()
  } else {
    minpoint = vec2.clone(points[0])
  }
  let maxpoint = vec2.clone(minpoint)

  points.forEach((point) => {
    vec2.min(minpoint, minpoint, point)
    vec2.max(maxpoint, maxpoint, point)
  })

  minpoint = [minpoint[0], minpoint[1], 0]
  maxpoint = [maxpoint[0], maxpoint[1], 0]

  boundingBox = [minpoint, maxpoint]

  cache.set(geometry, boundingBox)

  return boundingBox
}

/*
 * Measure the min and max bounds of the given (geom3) geometry.
 * @return {Array[]} the min and max bounds for the geometry
 */
const measureBoundingBoxOfGeom3 = (geometry) => {
  let boundingBox = cache.get(geometry)
  if (boundingBox) return boundingBox

  const polygons = geom3.toPolygons(geometry)

  let minpoint = vec3.create()
  if (polygons.length > 0) {
    const points = poly3.toPoints(polygons[0])
    vec3.copy(minpoint, points[0])
  }
  let maxpoint = vec3.clone(minpoint)

  polygons.forEach((polygon) => {
    poly3.toPoints(polygon).forEach((point) => {
      vec3.min(minpoint, minpoint, point)
      vec3.max(maxpoint, maxpoint, point)
    })
  })

  minpoint = [minpoint[0], minpoint[1], minpoint[2]]
  maxpoint = [maxpoint[0], maxpoint[1], maxpoint[2]]

  boundingBox = [minpoint, maxpoint]

  cache.set(geometry, boundingBox)

  return boundingBox
}

/**
 * Measure the min and max bounds of the given geometries.
 * @param {...Object} geometries - the geometries to measure
 * @return {Array} the min and max bounds, or a list of bounds for each geometry
 * @alias module:modeling/measurements.measureBoundingBox
 *
 * @example
 * let bounds = measureBoundingBox(sphere())
 */
const measureBoundingBox = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  const results = geometries.map((geometry) => {
    if (path2.isA(geometry)) return measureBoundingBoxOfPath2(geometry)
    if (geom2.isA(geometry)) return measureBoundingBoxOfGeom2(geometry)
    if (geom3.isA(geometry)) return measureBoundingBoxOfGeom3(geometry)
    return [[0, 0, 0], [0, 0, 0]]
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureBoundingBox


/***/ }),

/***/ 53830:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const vec2 = __webpack_require__(4138)
const vec3 = __webpack_require__(14171)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)
const poly3 = __webpack_require__(71516)

const cacheOfBoundingSpheres = new WeakMap()

/*
 * Measure the bounding sphere of the given (path2) geometry.
 * @return {[[x, y, z], radius]} the bounding sphere for the geometry
 */
const measureBoundingSphereOfPath2 = (geometry) => {
  let boundingSphere = cacheOfBoundingSpheres.get(geometry)
  if (boundingSphere !== undefined) return boundingSphere

  const centroid = vec3.create()
  let radius = 0

  const points = path2.toPoints(geometry)

  if (points.length > 0) {
    // calculate the centroid of the geometry
    let numPoints = 0
    const temp = vec3.create()
    points.forEach((point) => {
      vec3.add(centroid, centroid, vec3.fromVec2(temp, point, 0))
      numPoints++
    })
    vec3.scale(centroid, centroid, 1 / numPoints)

    // find the farthest point from the centroid
    points.forEach((point) => {
      radius = Math.max(radius, vec2.squaredDistance(centroid, point))
    })
    radius = Math.sqrt(radius)
  }

  boundingSphere = [centroid, radius]
  cacheOfBoundingSpheres.set(geometry, boundingSphere)

  return boundingSphere
}

/*
 * Measure the bounding sphere of the given (geom2) geometry.
 * @return {[[x, y, z], radius]} the bounding sphere for the geometry
 */
const measureBoundingSphereOfGeom2 = (geometry) => {
  let boundingSphere = cacheOfBoundingSpheres.get(geometry)
  if (boundingSphere !== undefined) return boundingSphere

  const centroid = vec3.create()
  let radius = 0

  const sides = geom2.toSides(geometry)

  if (sides.length > 0) {
    // calculate the centroid of the geometry
    let numPoints = 0
    const temp = vec3.create()
    sides.forEach((side) => {
      vec3.add(centroid, centroid, vec3.fromVec2(temp, side[0], 0))
      numPoints++
    })
    vec3.scale(centroid, centroid, 1 / numPoints)

    // find the farthest point from the centroid
    sides.forEach((side) => {
      radius = Math.max(radius, vec2.squaredDistance(centroid, side[0]))
    })
    radius = Math.sqrt(radius)
  }

  boundingSphere = [centroid, radius]
  cacheOfBoundingSpheres.set(geometry, boundingSphere)

  return boundingSphere
}

/*
 * Measure the bounding sphere of the given (geom3) geometry.
 * @return {[[x, y, z], radius]} the bounding sphere for the geometry
 */
const measureBoundingSphereOfGeom3 = (geometry) => {
  let boundingSphere = cacheOfBoundingSpheres.get(geometry)
  if (boundingSphere !== undefined) return boundingSphere

  const centroid = vec3.create()
  let radius = 0

  const polygons = geom3.toPolygons(geometry)

  if (polygons.length > 0) {
    // calculate the centroid of the geometry
    let numPoints = 0
    polygons.forEach((polygon) => {
      poly3.toPoints(polygon).forEach((point) => {
        vec3.add(centroid, centroid, point)
        numPoints++
      })
    })
    vec3.scale(centroid, centroid, 1 / numPoints)

    // find the farthest point from the centroid
    polygons.forEach((polygon) => {
      poly3.toPoints(polygon).forEach((point) => {
        radius = Math.max(radius, vec3.squaredDistance(centroid, point))
      })
    })
    radius = Math.sqrt(radius)
  }

  boundingSphere = [centroid, radius]
  cacheOfBoundingSpheres.set(geometry, boundingSphere)

  return boundingSphere
}

/**
 * Measure the (approximate) bounding sphere of the given geometries.
 * @see https://en.wikipedia.org/wiki/Bounding_sphere
 * @param {...Object} geometries - the geometries to measure
 * @return {Array} the bounding sphere for each geometry, i.e. [centroid, radius]
 * @alias module:modeling/measurements.measureBoundingSphere
 *
 * @example
 * let bounds = measureBoundingSphere(cube())
 */
const measureBoundingSphere = (...geometries) => {
  geometries = flatten(geometries)

  const results = geometries.map((geometry) => {
    if (path2.isA(geometry)) return measureBoundingSphereOfPath2(geometry)
    if (geom2.isA(geometry)) return measureBoundingSphereOfGeom2(geometry)
    if (geom3.isA(geometry)) return measureBoundingSphereOfGeom3(geometry)
    return [[0, 0, 0], 0]
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureBoundingSphere


/***/ }),

/***/ 92496:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const measureBoundingBox = __webpack_require__(27027)

/**
 * Measure the center of the given geometries.
 * @param {...Object} geometries - the geometries to measure
 * @return {Array} the center point for each geometry, i.e. [X, Y, Z]
 * @alias module:modeling/measurements.measureCenter
 *
 * @example
 * let center = measureCenter(sphere())
 */
const measureCenter = (...geometries) => {
  geometries = flatten(geometries)

  const results = geometries.map((geometry) => {
    const bounds = measureBoundingBox(geometry)
    return [
      (bounds[0][0] + ((bounds[1][0] - bounds[0][0]) / 2)),
      (bounds[0][1] + ((bounds[1][1] - bounds[0][1]) / 2)),
      (bounds[0][2] + ((bounds[1][2] - bounds[0][2]) / 2))
    ]
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureCenter


/***/ }),

/***/ 52610:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const vec3 = __webpack_require__(14171)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)

const cacheOfCenterOfMass = new WeakMap()

/*
 * Measure the center of mass for the given geometry.
 *
 * @see http://paulbourke.net/geometry/polygonmesh/
 * @return {Array} the center of mass for the geometry
 */
const measureCenterOfMassGeom2 = (geometry) => {
  let centerOfMass = cacheOfCenterOfMass.get(geometry)
  if (centerOfMass !== undefined) return centerOfMass

  const sides = geom2.toSides(geometry)

  let area = 0
  let x = 0
  let y = 0
  if (sides.length > 0) {
    for (let i = 0; i < sides.length; i++) {
      const p1 = sides[i][0]
      const p2 = sides[i][1]

      const a = p1[0] * p2[1] - p1[1] * p2[0]
      area += a
      x += (p1[0] + p2[0]) * a
      y += (p1[1] + p2[1]) * a
    }
    area /= 2

    const f = 1 / (area * 6)
    x *= f
    y *= f
  }

  centerOfMass = vec3.fromValues(x, y, 0)

  cacheOfCenterOfMass.set(geometry, centerOfMass)
  return centerOfMass
}

/*
 * Measure the center of mass for the given geometry.
 * @return {Array} the center of mass for the geometry
 */
const measureCenterOfMassGeom3 = (geometry) => {
  let centerOfMass = cacheOfCenterOfMass.get(geometry)
  if (centerOfMass !== undefined) return centerOfMass

  centerOfMass = vec3.create() // 0, 0, 0

  const polygons = geom3.toPolygons(geometry)
  if (polygons.length === 0) return centerOfMass

  let totalVolume = 0
  const vector = vec3.create() // for speed
  polygons.forEach((polygon) => {
    // calculate volume and center of each tetrahedron
    const vertices = polygon.vertices
    for (let i = 0; i < vertices.length - 2; i++) {
      vec3.cross(vector, vertices[i + 1], vertices[i + 2])
      const volume = vec3.dot(vertices[0], vector) / 6

      totalVolume += volume

      vec3.add(vector, vertices[0], vertices[i + 1])
      vec3.add(vector, vector, vertices[i + 2])
      const weightedCenter = vec3.scale(vector, vector, 1 / 4 * volume)

      vec3.add(centerOfMass, centerOfMass, weightedCenter)
    }
  })
  vec3.scale(centerOfMass, centerOfMass, 1 / totalVolume)

  cacheOfCenterOfMass.set(geometry, centerOfMass)
  return centerOfMass
}

/**
 * Measure the center of mass for the given geometries.
 * @param {...Object} geometries - the geometries to measure
 * @return {Array} the center of mass for each geometry, i.e. [X, Y, Z]
 * @alias module:modeling/measurements.measureCenterOfMass
 *
 * @example
 * let center = measureCenterOfMass(sphere())
 */
const measureCenterOfMass = (...geometries) => {
  geometries = flatten(geometries)

  const results = geometries.map((geometry) => {
    // NOTE: center of mass for geometry path2 is not possible
    if (geom2.isA(geometry)) return measureCenterOfMassGeom2(geometry)
    if (geom3.isA(geometry)) return measureCenterOfMassGeom3(geometry)
    return [0, 0, 0]
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureCenterOfMass


/***/ }),

/***/ 90863:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const measureBoundingBox = __webpack_require__(27027)

/**
 * Measure the dimensions of the given geometries.
 * @param {...Object} geometries - the geometries to measure
 * @return {Array} the dimensions for each geometry, i.e. [width, depth, height]
 * @alias module:modeling/measurements.measureDimensions
 *
 * @example
 * let dimensions = measureDimensions(sphere())
 */
const measureDimensions = (...geometries) => {
  geometries = flatten(geometries)

  const results = geometries.map((geometry) => {
    const boundingBox = measureBoundingBox(geometry)
    return [
      boundingBox[1][0] - boundingBox[0][0],
      boundingBox[1][1] - boundingBox[0][1],
      boundingBox[1][2] - boundingBox[0][2]
    ]
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureDimensions


/***/ }),

/***/ 85768:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const { geom2, geom3, path2 } = __webpack_require__(14484)

const calculateEpsilonFromBounds = __webpack_require__(74391)
const measureBoundingBox = __webpack_require__(27027)

/*
 * Measure the epsilon of the given (path2) geometry.
 * @return {Number} the epsilon (precision) of the geometry
 */
const measureEpsilonOfPath2 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)

/*
 * Measure the epsilon of the given (geom2) geometry.
 * @return {Number} the epsilon (precision) of the geometry
 */
const measureEpsilonOfGeom2 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)

/*
 * Measure the epsilon of the given (geom3) geometry.
 * @return {Float} the epsilon (precision) of the geometry
 */
const measureEpsilonOfGeom3 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 3)

/**
 * Measure the epsilon of the given geometries.
 * Epsilon values are used in various functions to determine minimum distances between points, planes, etc.
 * @param {...Object} geometries - the geometries to measure
 * @return {Number|Array} the epsilon, or a list of epsilons for each geometry
 * @alias module:modeling/measurements.measureEpsilon
 *
 * @example
 * let epsilon = measureEpsilon(sphere())
 */
const measureEpsilon = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  const results = geometries.map((geometry) => {
    if (path2.isA(geometry)) return measureEpsilonOfPath2(geometry)
    if (geom2.isA(geometry)) return measureEpsilonOfGeom2(geometry)
    if (geom3.isA(geometry)) return measureEpsilonOfGeom3(geometry)
    return 0
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureEpsilon


/***/ }),

/***/ 211:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)
const poly3 = __webpack_require__(71516)

const cache = new WeakMap()

/*
 * Measure the volume of the given geometry.
 * NOTE: paths are infinitely narrow and do not have an volume
 *
 * @param {Path2} geometry - geometry to measure
 * @returns {Number} volume of the geometry
 */
const measureVolumeOfPath2 = () => 0

/*
 * Measure the volume of the given geometry.
 * NOTE: 2D geometry are infinitely thin and do not have an volume
 *
 * @param {Geom2} geometry - 2D geometry to measure
 * @returns {Number} volume of the geometry
 */
const measureVolumeOfGeom2 = () => 0

/*
 * Measure the volume of the given geometry.
 *
 * @param {Geom3} geometry - 3D geometry to measure
 * @returns {Number} volume of the geometry
 */
const measureVolumeOfGeom3 = (geometry) => {
  let volume = cache.get(geometry)
  if (volume) return volume

  const polygons = geom3.toPolygons(geometry)
  volume = polygons.reduce((volume, polygon) => volume + poly3.measureSignedVolume(polygon), 0)

  cache.set(geometry, volume)

  return volume
}

/**
 * Measure the volume of the given geometries.
 * @param {...Object} geometries - the geometries to measure
 * @return {Number|Array} the volume, or a list of volumes for each geometry
 * @alias module:modeling/measurements.measureVolume
 *
 * @example
 * let volume = measureVolume(sphere())
 */
const measureVolume = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  const results = geometries.map((geometry) => {
    if (path2.isA(geometry)) return measureVolumeOfPath2(geometry)
    if (geom2.isA(geometry)) return measureVolumeOfGeom2(geometry)
    if (geom3.isA(geometry)) return measureVolumeOfGeom3(geometry)
    return 0
  })
  return results.length === 1 ? results[0] : results
}

module.exports = measureVolume


/***/ }),

/***/ 12822:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)

const fromFakePolygon = (epsilon, polygon) => {
  // this can happen based on union, seems to be residuals -
  // return null and handle in caller
  if (polygon.vertices.length < 4) {
    return null
  }
  const vert1Indices = []
  const points3D = polygon.vertices.filter((vertex, i) => {
    if (vertex[2] > 0) {
      vert1Indices.push(i)
      return true
    }
    return false
  })

  if (points3D.length !== 2) {
    throw new Error('Assertion failed: fromFakePolygon: not enough points found') // TBD remove later
  }

  const points2D = points3D.map((v3) => {
    const x = Math.round(v3[0] / epsilon) * epsilon + 0 // no more -0
    const y = Math.round(v3[1] / epsilon) * epsilon + 0 // no more -0
    return vec2.fromValues(x, y)
  })

  if (vec2.equals(points2D[0], points2D[1])) return null

  const d = vert1Indices[1] - vert1Indices[0]
  if (d === 1 || d === 3) {
    if (d === 1) {
      points2D.reverse()
    }
  } else {
    throw new Error('Assertion failed: fromFakePolygon: unknown index ordering')
  }
  return points2D
}

/*
 * Convert the given polygons to a list of sides.
 * The polygons must have only z coordinates +1 and -1, as constructed by to3DWalls().
 */
const fromFakePolygons = (epsilon, polygons) => {
  const sides = polygons.map((polygon) => fromFakePolygon(epsilon, polygon)).filter((polygon) => (polygon !== null))
  return geom2.create(sides)
}

module.exports = fromFakePolygons


/***/ }),

/***/ 25913:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All shapes (primitives or the results of operations) can be passed to boolean functions
 * to perform logical operations, e.g. remove a hole from a board.
 * In all cases, the function returns the results, and never changes the original shapes.
 * @module modeling/booleans
 * @example
 * const { intersect, subtract, union } = require('@jscad/modeling').booleans
 */
module.exports = {
  intersect: __webpack_require__(26305),
  scission: __webpack_require__(12649),
  subtract: __webpack_require__(49976),
  union: __webpack_require__(52650)
}


/***/ }),

/***/ 26305:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const areAllShapesTheSameType = __webpack_require__(33486)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)

const intersectGeom2 = __webpack_require__(55951)
const intersectGeom3 = __webpack_require__(68026)

/**
 * Return a new geometry representing space in both the first geometry and
 * all subsequent geometries.
 * The given geometries should be of the same type, either geom2 or geom3.
 *
 * @param {...Object} geometries - list of geometries
 * @returns {geom2|geom3} a new geometry
 * @alias module:modeling/booleans.intersect
 *
 * @example
 * let myshape = intersect(cube({size: [5,5,5]}), cube({size: [5,5,5], center: [5,5,5]}))
 *
 * @example
 * +-------+
 * |       |
 * |   A   |
 * |    +--+----+   =   +--+
 * +----+--+    |       +--+
 *      |   B   |
 *      |       |
 *      +-------+
 */
const intersect = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  if (!areAllShapesTheSameType(geometries)) {
    throw new Error('only intersect of the types are supported')
  }

  const geometry = geometries[0]
  // if (path.isA(geometry)) return pathintersect(matrix, geometries)
  if (geom2.isA(geometry)) return intersectGeom2(geometries)
  if (geom3.isA(geometry)) return intersectGeom3(geometries)
  return geometry
}

module.exports = intersect


/***/ }),

/***/ 55951:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom3 = __webpack_require__(18206)

const measureEpsilon = __webpack_require__(85768)

const fromFakePolygons = __webpack_require__(12822)
const to3DWalls = __webpack_require__(46903)
const intersectGeom3 = __webpack_require__(68026)

/*
 * Return a new 2D geometry representing space in both the first geometry and
 * in the subsequent geometries. None of the given geometries are modified.
 * @param {...geom2} geometries - list of 2D geometries
 * @returns {geom2} new 2D geometry
 */
const intersect = (...geometries) => {
  geometries = flatten(geometries)
  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))

  const newgeom3 = intersectGeom3(newgeometries)
  const epsilon = measureEpsilon(newgeom3)

  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))
}

module.exports = intersect


/***/ }),

/***/ 68026:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const retessellate = __webpack_require__(73894)

const intersectSub = __webpack_require__(62245)

/*
 * Return a new 3D geometry representing space in both the first geometry and
 * in the subsequent geometries. None of the given geometries are modified.
 * @param {...geom3} geometries - list of 3D geometries
 * @returns {geom3} new 3D geometry
 */
const intersect = (...geometries) => {
  geometries = flatten(geometries)

  let newgeometry = geometries.shift()
  geometries.forEach((geometry) => {
    newgeometry = intersectSub(newgeometry, geometry)
  })

  newgeometry = retessellate(newgeometry)
  return newgeometry
}

module.exports = intersect


/***/ }),

/***/ 62245:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom3 = __webpack_require__(18206)

const mayOverlap = __webpack_require__(50071)
const { Tree } = __webpack_require__(55620)

/*
 * Return a new 3D geometry representing the space in both the first geometry and
 * the second geometry. None of the given geometries are modified.
 * @param {geom3} geometry1 - a geometry
 * @param {geom3} geometry2 - a geometry
 * @returns {geom3} new 3D geometry
 */
const intersectGeom3Sub = (geometry1, geometry2) => {
  if (!mayOverlap(geometry1, geometry2)) {
    return geom3.create() // empty geometry
  }

  const a = new Tree(geom3.toPolygons(geometry1))
  const b = new Tree(geom3.toPolygons(geometry2))

  a.invert()
  b.clipTo(a)
  b.invert()
  a.clipTo(b)
  b.clipTo(a)
  a.addPolygons(b.allPolygons())
  a.invert()

  const newpolygons = a.allPolygons()
  return geom3.create(newpolygons)
}

module.exports = intersectGeom3Sub


/***/ }),

/***/ 50071:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const measureBoundingBox = __webpack_require__(27027)

/*
 * Determine if the given geometries overlap by comparing min and max bounds.
 * NOTE: This is used in union for performance gains.
 * @param {geom3} geometry1 - geometry for comparison
 * @param {geom3} geometry2 - geometry for comparison
 * @returns {boolean} true if the geometries overlap
 */
const mayOverlap = (geometry1, geometry2) => {
  // FIXME accessing the data structure of the geometry should not be allowed
  if ((geometry1.polygons.length === 0) || (geometry2.polygons.length === 0)) {
    return false
  }

  const bounds1 = measureBoundingBox(geometry1)
  const min1 = bounds1[0]
  const max1 = bounds1[1]

  const bounds2 = measureBoundingBox(geometry2)
  const min2 = bounds2[0]
  const max2 = bounds2[1]

  if ((min2[0] - max1[0]) > EPS) return false
  if ((min1[0] - max2[0]) > EPS) return false
  if ((min2[1] - max1[1]) > EPS) return false
  if ((min1[1] - max2[1]) > EPS) return false
  if ((min2[2] - max1[2]) > EPS) return false
  if ((min1[2] - max2[2]) > EPS) return false
  return true
}

module.exports = mayOverlap


/***/ }),

/***/ 12649:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

// const geom2 = require('../../geometries/geom2')
const geom3 = __webpack_require__(18206)

// const scissionGeom2 = require('./scissionGeom2')
const scissionGeom3 = __webpack_require__(56841)

/**
 * Scission (divide) the given geometry into the component pieces.
 *
 * @param {...Object} objects - list of geometries
 * @returns {Array} list of pieces from each geometry
 * @alias module:modeling/booleans.scission
 *
 * @example
 * let figure = require('./my.stl')
 * let pieces = scission(figure)
 *
 * @example
 * +-------+            +-------+
 * |       |            |       |
 * |   +---+            | A +---+
 * |   |    +---+   =   |   |    +---+
 * +---+    |   |       +---+    |   |
 *      +---+   |            +---+   |
 *      |       |            |    B  |
 *      +-------+            +-------+
 */
const scission = (...objects) => {
  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  const results = objects.map((object) => {
    // if (path2.isA(object)) return path2.transform(matrix, object)
    // if (geom2.isA(object)) return geom2.transform(matrix, object)
    if (geom3.isA(object)) return scissionGeom3(object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = scission


/***/ }),

/***/ 56841:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)
const measureEpsilon = __webpack_require__(85768)

const geom3 = __webpack_require__(18206)

// returns array numerically sorted and duplicates removed
const sortNb = (array) => array.sort((a, b) => a - b).filter((item, pos, ary) => !pos || item !== ary[pos - 1])

const insertMapping = (map, point, index) => {
  const key = `${point}`
  const mapping = map.get(key)
  if (mapping === undefined) {
    map.set(key, [index])
  } else {
    mapping.push(index)
  }
}

const findMapping = (map, point) => {
  const key = `${point}`
  return map.get(key)
}

const scissionGeom3 = (geometry) => {
  // construit table de correspondance entre polygones
  // build polygons lookup table
  const eps = measureEpsilon(geometry)
  const polygons = geom3.toPolygons(geometry)
  const pl = polygons.length

  const indexesPerPoint = new Map()
  const temp = vec3.create()
  polygons.forEach((polygon, index) => {
    polygon.vertices.forEach((point) => {
      insertMapping(indexesPerPoint, vec3.snap(temp, point, eps), index)
    })
  })

  const indexesPerPolygon = polygons.map((polygon) => {
    let indexes = []
    polygon.vertices.forEach((point) => {
      indexes = indexes.concat(findMapping(indexesPerPoint, vec3.snap(temp, point, eps)))
    })
    return { e: 1, d: sortNb(indexes) } // for each polygon, push the list of indexes
  })

  indexesPerPoint.clear()

  // regroupe les correspondances des polygones se touchant
  // boucle ne s'arrêtant que quand deux passages retournent le même nb de polygones
  // merge lookup data from linked polygons as long as possible
  let merges = 0
  const ippl = indexesPerPolygon.length
  for (let i = 0; i < ippl; i++) {
    const mapi = indexesPerPolygon[i]
    // merge mappings if necessary
    if (mapi.e > 0) {
      const indexes = new Array(pl)
      indexes[i] = true // include ourself
      do {
        merges = 0
        // loop through the known indexes
        indexes.forEach((e, j) => {
          const mapj = indexesPerPolygon[j]
          // merge this mapping if necessary
          if (mapj.e > 0) {
            mapj.e = -1 // merged
            for (let d = 0; d < mapj.d.length; d++) {
              indexes[mapj.d[d]] = true
            }
            merges++
          }
        })
      } while (merges > 0)
      mapi.indexes = indexes
    }
  }

  // construit le tableau des geometry à retourner
  // build array of geometry to return
  const newgeometries = []
  for (let i = 0; i < ippl; i++) {
    if (indexesPerPolygon[i].indexes) {
      const newpolygons = []
      indexesPerPolygon[i].indexes.forEach((e, p) => newpolygons.push(polygons[p]))
      newgeometries.push(geom3.create(newpolygons))
    }
  }

  return newgeometries
}

module.exports = scissionGeom3


/***/ }),

/***/ 49976:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const areAllShapesTheSameType = __webpack_require__(33486)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)

const subtractGeom2 = __webpack_require__(82489)
const subtractGeom3 = __webpack_require__(3708)

/**
 * Return a new geometry representing space in the first geometry but
 * not in all subsequent geometries.
 * The given geometries should be of the same type, either geom2 or geom3.
 *
 * @param {...Object} geometries - list of geometries
 * @returns {geom2|geom3} a new geometry
 * @alias module:modeling/booleans.subtract
 *
 * @example
 * let myshape = subtract(cuboid({size: [5,5,5]}), cuboid({size: [5,5,5], center: [5,5,5]}))
 *
 * @example
 * +-------+            +-------+
 * |       |            |       |
 * |   A   |            |       |
 * |    +--+----+   =   |    +--+
 * +----+--+    |       +----+
 *      |   B   |
 *      |       |
 *      +-------+
 */
const subtract = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  if (!areAllShapesTheSameType(geometries)) {
    throw new Error('only subtract of the types are supported')
  }

  const geometry = geometries[0]
  // if (path.isA(geometry)) return pathsubtract(matrix, geometries)
  if (geom2.isA(geometry)) return subtractGeom2(geometries)
  if (geom3.isA(geometry)) return subtractGeom3(geometries)
  return geometry
}

module.exports = subtract


/***/ }),

/***/ 82489:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom3 = __webpack_require__(18206)

const measureEpsilon = __webpack_require__(85768)

const fromFakePolygons = __webpack_require__(12822)
const to3DWalls = __webpack_require__(46903)
const subtractGeom3 = __webpack_require__(3708)

/*
 * Return a new 2D geometry representing space in the first geometry but
 * not in the subsequent geometries. None of the given geometries are modified.
 * @param {...geom2} geometries - list of geometries
 * @returns {geom2} new 2D geometry
 */
const subtract = (...geometries) => {
  geometries = flatten(geometries)
  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))

  const newgeom3 = subtractGeom3(newgeometries)
  const epsilon = measureEpsilon(newgeom3)

  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))
}

module.exports = subtract


/***/ }),

/***/ 3708:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const retessellate = __webpack_require__(73894)

const subtractSub = __webpack_require__(29934)

/*
 * Return a new 3D geometry representing space in this geometry but not in the given geometries.
 * Neither this geometry nor the given geometries are modified.
 * @param {...geom3} geometries - list of geometries
 * @returns {geom3} new 3D geometry
 */
const subtract = (...geometries) => {
  geometries = flatten(geometries)

  let newgeometry = geometries.shift()
  geometries.forEach((geometry) => {
    newgeometry = subtractSub(newgeometry, geometry)
  })

  newgeometry = retessellate(newgeometry)
  return newgeometry
}

module.exports = subtract


/***/ }),

/***/ 29934:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom3 = __webpack_require__(18206)

const mayOverlap = __webpack_require__(50071)
const { Tree } = __webpack_require__(55620)

/*
 * Return a new 3D geometry representing the space in the first geometry but not
 * in the second geometry. None of the given geometries are modified.
 * @param {geom3} geometry1 - a geometry
 * @param {geom3} geometry2 - a geometry
 * @returns {geom3} new 3D geometry
 */
const subtractGeom3Sub = (geometry1, geometry2) => {
  if (!mayOverlap(geometry1, geometry2)) {
    return geom3.clone(geometry1)
  }

  const a = new Tree(geom3.toPolygons(geometry1))
  const b = new Tree(geom3.toPolygons(geometry2))

  a.invert()
  a.clipTo(b)
  b.clipTo(a, true)
  a.addPolygons(b.allPolygons())
  a.invert()

  const newpolygons = a.allPolygons()
  return geom3.create(newpolygons)
}

module.exports = subtractGeom3Sub


/***/ }),

/***/ 46903:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

/*
 * Create a polygon (wall) from the given Z values and side.
 */
const to3DWall = (z0, z1, side) => {
  const points = [
    vec3.fromVec2(vec3.create(), side[0], z0),
    vec3.fromVec2(vec3.create(), side[1], z0),
    vec3.fromVec2(vec3.create(), side[1], z1),
    vec3.fromVec2(vec3.create(), side[0], z1)
  ]
  return poly3.create(points)
}

/*
 * Create a 3D geometry with walls, as constructed from the given options and geometry.
 *
 * @param {Object} options - options with Z offsets
 * @param {geom2} geometry - geometry used as base of walls
 * @return {geom3} the new geometry
 */
const to3DWalls = (options, geometry) => {
  const sides = geom2.toSides(geometry)

  const polygons = sides.map((side) => to3DWall(options.z0, options.z1, side))

  const result = geom3.create(polygons)
  return result
}

module.exports = to3DWalls


/***/ }),

/***/ 33732:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const plane = __webpack_require__(68646)
const poly3 = __webpack_require__(71516)

// # class Node
// Holds a node in a BSP tree.
// A BSP tree is built from a collection of polygons by picking a polygon to split along.
// Polygons are not stored directly in the tree, but in PolygonTreeNodes, stored in this.polygontreenodes.
// Those PolygonTreeNodes are children of the owning Tree.polygonTree.
// This is not a leafy BSP tree since there is no distinction between internal and leaf nodes.
class Node {
  constructor (parent) {
    this.plane = null
    this.front = null
    this.back = null
    this.polygontreenodes = []
    this.parent = parent
  }

  // Convert solid space to empty space and empty space to solid space.
  invert () {
    const queue = [this]
    let node
    for (let i = 0; i < queue.length; i++) {
      node = queue[i]
      if (node.plane) node.plane = plane.flip(plane.create(), node.plane)
      if (node.front) queue.push(node.front)
      if (node.back) queue.push(node.back)
      const temp = node.front
      node.front = node.back
      node.back = temp
    }
  }

  // clip polygontreenodes to our plane
  // calls remove() for all clipped PolygonTreeNodes
  clipPolygons (polygontreenodes, alsoRemovecoplanarFront) {
    let current = { node: this, polygontreenodes: polygontreenodes }
    let node
    const stack = []

    do {
      node = current.node
      polygontreenodes = current.polygontreenodes

      if (node.plane) {
        const plane = node.plane

        const backnodes = []
        const frontnodes = []
        const coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes
        const numpolygontreenodes = polygontreenodes.length
        for (let i = 0; i < numpolygontreenodes; i++) {
          const treenode = polygontreenodes[i]
          if (!treenode.isRemoved()) {
            // split this polygon tree node using the plane
            // NOTE: children are added to the tree if there are spanning polygons
            treenode.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes)
          }
        }

        if (node.front && (frontnodes.length > 0)) {
          // add front node for further splitting
          stack.push({ node: node.front, polygontreenodes: frontnodes })
        }
        const numbacknodes = backnodes.length
        if (node.back && (numbacknodes > 0)) {
          // add back node for further splitting
          stack.push({ node: node.back, polygontreenodes: backnodes })
        } else {
          // remove all back nodes from processing
          for (let i = 0; i < numbacknodes; i++) {
            backnodes[i].remove()
          }
        }
      }
      current = stack.pop()
    } while (current !== undefined)
  }

  // Remove all polygons in this BSP tree that are inside the other BSP tree
  // `tree`.
  clipTo (tree, alsoRemovecoplanarFront) {
    let node = this
    const stack = []
    do {
      if (node.polygontreenodes.length > 0) {
        tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront)
      }
      if (node.front) stack.push(node.front)
      if (node.back) stack.push(node.back)
      node = stack.pop()
    } while (node !== undefined)
  }

  addPolygonTreeNodes (newpolygontreenodes) {
    let current = { node: this, polygontreenodes: newpolygontreenodes }
    const stack = []
    do {
      const node = current.node
      const polygontreenodes = current.polygontreenodes

      if (polygontreenodes.length === 0) {
        current = stack.pop()
        continue
      }
      if (!node.plane) {
        let index = 0 // default
        index = Math.floor(polygontreenodes.length / 2)
        // index = polygontreenodes.length >> 1
        // index = Math.floor(Math.random()*polygontreenodes.length)
        const bestpoly = polygontreenodes[index].getPolygon()
        node.plane = poly3.plane(bestpoly)
      }
      const frontnodes = []
      const backnodes = []
      const n = polygontreenodes.length
      for (let i = 0; i < n; ++i) {
        polygontreenodes[i].splitByPlane(node.plane, node.polygontreenodes, backnodes, frontnodes, backnodes)
      }

      if (frontnodes.length > 0) {
        if (!node.front) node.front = new Node(node)

        // unable to split by any of the current nodes
        const stopCondition = n === frontnodes.length && backnodes.length === 0
        if (stopCondition) node.front.polygontreenodes = frontnodes
        else stack.push({ node: node.front, polygontreenodes: frontnodes })
      }
      if (backnodes.length > 0) {
        if (!node.back) node.back = new Node(node)

        // unable to split by any of the current nodes
        const stopCondition = n === backnodes.length && frontnodes.length === 0

        if (stopCondition) node.back.polygontreenodes = backnodes
        else stack.push({ node: node.back, polygontreenodes: backnodes })
      }

      current = stack.pop()
    } while (current !== undefined)
  }
}

module.exports = Node


/***/ }),

/***/ 15932:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const vec3 = __webpack_require__(14171)

const poly3 = __webpack_require__(71516)

const splitPolygonByPlane = __webpack_require__(53835)

// # class PolygonTreeNode
// This class manages hierarchical splits of polygons.
// At the top is a root node which does not hold a polygon, only child PolygonTreeNodes.
// Below that are zero or more 'top' nodes; each holds a polygon.
// The polygons can be in different planes.
// splitByPlane() splits a node by a plane. If the plane intersects the polygon, two new child nodes
// are created holding the splitted polygon.
// getPolygons() retrieves the polygons from the tree. If for PolygonTreeNode the polygon is split but
// the two split parts (child nodes) are still intact, then the unsplit polygon is returned.
// This ensures that we can safely split a polygon into many fragments. If the fragments are untouched,
// getPolygons() will return the original unsplit polygon instead of the fragments.
// remove() removes a polygon from the tree. Once a polygon is removed, the parent polygons are invalidated
// since they are no longer intact.
class PolygonTreeNode {
  // constructor creates the root node
  constructor (parent, polygon) {
    this.parent = parent
    this.children = []
    this.polygon = polygon
    this.removed = false  // state of branch or leaf
  }

  // fill the tree with polygons. Should be called on the root node only; child nodes must
  // always be a derivate (split) of the parent node.
  addPolygons (polygons) {
    // new polygons can only be added to root node; children can only be splitted polygons
    if (!this.isRootNode()) {
      throw new Error('Assertion failed')
    }
    const _this = this
    polygons.forEach((polygon) => {
      _this.addChild(polygon)
    })
  }

  // remove a node
  // - the siblings become toplevel nodes
  // - the parent is removed recursively
  remove () {
    if (!this.removed) {
      this.removed = true
      this.polygon = null

      // remove ourselves from the parent's children list:
      const parentschildren = this.parent.children
      const i = parentschildren.indexOf(this)
      if (i < 0) throw new Error('Assertion failed')
      parentschildren.splice(i, 1)

      // invalidate the parent's polygon, and of all parents above it:
      this.parent.recursivelyInvalidatePolygon()
    }
  }

  isRemoved () {
    return this.removed
  }

  isRootNode () {
    return !this.parent
  }

  // invert all polygons in the tree. Call on the root node
  invert () {
    if (!this.isRootNode()) throw new Error('Assertion failed') // can only call this on the root node
    this.invertSub()
  }

  getPolygon () {
    if (!this.polygon) throw new Error('Assertion failed') // doesn't have a polygon, which means that it has been broken down
    return this.polygon
  }

  getPolygons (result) {
    let children = [this]
    const queue = [children]
    let i, j, l, node
    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length
      children = queue[i]
      for (j = 0, l = children.length; j < l; j++) { // ok to cache length
        node = children[j]
        if (node.polygon) {
          // the polygon hasn't been broken yet. We can ignore the children and return our polygon:
          result.push(node.polygon)
        } else {
          // our polygon has been split up and broken, so gather all subpolygons from the children
          if (node.children.length > 0) queue.push(node.children)
        }
      }
    }
  }

  // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array
  // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays
  // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,
  //  and added to both arrays.
  splitByPlane (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {
    if (this.children.length) {
      const queue = [this.children]
      let i
      let j
      let l
      let node
      let nodes
      for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache
        nodes = queue[i]
        for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length
          node = nodes[j]
          if (node.children.length > 0) {
            queue.push(node.children)
          } else {
            // no children. Split the polygon:
            node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)
          }
        }
      }
    } else {
      this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)
    }
  }

  // only to be called for nodes with no children
  _splitByPlane (splane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {
    const polygon = this.polygon
    if (polygon) {
      const bound = poly3.measureBoundingSphere(polygon)
      const sphereradius = bound[3] + EPS // ensure radius is LARGER then polygon
      const spherecenter = bound
      const d = vec3.dot(splane, spherecenter) - splane[3]
      if (d > sphereradius) {
        frontnodes.push(this)
      } else if (d < -sphereradius) {
        backnodes.push(this)
      } else {
        const splitresult = splitPolygonByPlane(splane, polygon)
        switch (splitresult.type) {
          case 0:
            // coplanar front:
            coplanarfrontnodes.push(this)
            break

          case 1:
            // coplanar back:
            coplanarbacknodes.push(this)
            break

          case 2:
            // front:
            frontnodes.push(this)
            break

          case 3:
            // back:
            backnodes.push(this)
            break

          case 4:
            // spanning:
            if (splitresult.front) {
              const frontnode = this.addChild(splitresult.front)
              frontnodes.push(frontnode)
            }
            if (splitresult.back) {
              const backnode = this.addChild(splitresult.back)
              backnodes.push(backnode)
            }
            break
        }
      }
    }
  }

  // PRIVATE methods from here:
  // add child to a node
  // this should be called whenever the polygon is split
  // a child should be created for every fragment of the split polygon
  // returns the newly created child
  addChild (polygon) {
    const newchild = new PolygonTreeNode(this, polygon)
    this.children.push(newchild)
    return newchild
  }

  invertSub () {
    let children = [this]
    const queue = [children]
    let i, j, l, node
    for (i = 0; i < queue.length; i++) {
      children = queue[i]
      for (j = 0, l = children.length; j < l; j++) {
        node = children[j]
        if (node.polygon) {
          node.polygon = poly3.invert(node.polygon)
        }
        if (node.children.length > 0) queue.push(node.children)
      }
    }
  }

  // private method
  // remove the polygon from the node, and all parent nodes above it
  // called to invalidate parents of removed nodes
  recursivelyInvalidatePolygon () {
    this.polygon = null
    if (this.parent) {
      this.parent.recursivelyInvalidatePolygon()
    }
  }

  clear () {
    let children = [this]
    const queue = [children]
    for (let i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length
      children = queue[i]
      const l = children.length
      for (let j = 0; j < l; j++) {
        const node = children[j]
        if (node.polygon) {
          node.polygon = null
        }
        if (node.parent) {
          node.parent = null
        }
        if (node.children.length > 0) queue.push(node.children)
        node.children = []
      }
    }
  }

  toString () {
    let result = ''
    let children = [this]
    const queue = [children]
    let i, j, l, node
    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length
      children = queue[i]
      const prefix = ' '.repeat(i)
      for (j = 0, l = children.length; j < l; j++) { // ok to cache length
        node = children[j]
        result += `${prefix}PolygonTreeNode (${node.isRootNode()}): ${node.children.length}`
        if (node.polygon) {
          result += `\n ${prefix}polygon: ${node.polygon.vertices}\n`
        } else {
          result += '\n'
        }
        if (node.children.length > 0) queue.push(node.children)
      }
    }
    return result
  }
}

module.exports = PolygonTreeNode


/***/ }),

/***/ 34624:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const Node = __webpack_require__(33732)
const PolygonTreeNode = __webpack_require__(15932)

// # class Tree
// This is the root of a BSP tree.
// This separate class for the root of the tree in order to hold the PolygonTreeNode root.
// The actual tree is kept in this.rootnode
class Tree {
  constructor (polygons) {
    this.polygonTree = new PolygonTreeNode()
    this.rootnode = new Node(null)
    if (polygons) this.addPolygons(polygons)
  }

  invert () {
    this.polygonTree.invert()
    this.rootnode.invert()
  }

  // Remove all polygons in this BSP tree that are inside the other BSP tree
  // `tree`.
  clipTo (tree, alsoRemovecoplanarFront = false) {
    this.rootnode.clipTo(tree, alsoRemovecoplanarFront)
  }

  allPolygons () {
    const result = []
    this.polygonTree.getPolygons(result)
    return result
  }

  addPolygons (polygons) {
    const polygontreenodes = new Array(polygons.length)
    for (let i = 0; i < polygons.length; i++) {
      polygontreenodes[i] = this.polygonTree.addChild(polygons[i])
    }
    this.rootnode.addPolygonTreeNodes(polygontreenodes)
  }

  clear () {
    this.polygonTree.clear()
  }

  toString () {
    const result = 'Tree: ' + this.polygonTree.toString('')
    return result
  }
}

module.exports = Tree


/***/ }),

/***/ 55620:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = {
  Tree: __webpack_require__(34624)
}


/***/ }),

/***/ 77197:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const splitLineSegmentByPlane = (plane, p1, p2) => {
  const direction = vec3.subtract(vec3.create(), p2, p1)
  let lambda = (plane[3] - vec3.dot(plane, p1)) / vec3.dot(plane, direction)
  if (Number.isNaN(lambda)) lambda = 0
  if (lambda > 1) lambda = 1
  if (lambda < 0) lambda = 0

  vec3.scale(direction, direction, lambda)
  vec3.add(direction, p1, direction)
  return direction
}

module.exports = splitLineSegmentByPlane


/***/ }),

/***/ 53835:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const plane = __webpack_require__(68646)
const vec3 = __webpack_require__(14171)

const poly3 = __webpack_require__(71516)

const splitLineSegmentByPlane = __webpack_require__(77197)

// Returns object:
// .type:
//   0: coplanar-front
//   1: coplanar-back
//   2: front
//   3: back
//   4: spanning
// In case the polygon is spanning, returns:
// .front: a Polygon3 of the front part
// .back: a Polygon3 of the back part
const splitPolygonByPlane = (splane, polygon) => {
  const result = {
    type: null,
    front: null,
    back: null
  }
  // cache in local lets (speedup):
  const vertices = polygon.vertices
  const numvertices = vertices.length
  const pplane = poly3.plane(polygon)
  if (plane.equals(pplane, splane)) {
    result.type = 0
  } else {
    let hasfront = false
    let hasback = false
    const vertexIsBack = []
    const MINEPS = -EPS
    for (let i = 0; i < numvertices; i++) {
      const t = vec3.dot(splane, vertices[i]) - splane[3]
      const isback = (t < MINEPS)
      vertexIsBack.push(isback)
      if (t > EPS) hasfront = true
      if (t < MINEPS) hasback = true
    }
    if ((!hasfront) && (!hasback)) {
      // all points coplanar
      const t = vec3.dot(splane, pplane)
      result.type = (t >= 0) ? 0 : 1
    } else if (!hasback) {
      result.type = 2
    } else if (!hasfront) {
      result.type = 3
    } else {
      // spanning
      result.type = 4
      const frontvertices = []
      const backvertices = []
      let isback = vertexIsBack[0]
      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {
        const vertex = vertices[vertexindex]
        let nextvertexindex = vertexindex + 1
        if (nextvertexindex >= numvertices) nextvertexindex = 0
        const nextisback = vertexIsBack[nextvertexindex]
        if (isback === nextisback) {
          // line segment is on one side of the plane:
          if (isback) {
            backvertices.push(vertex)
          } else {
            frontvertices.push(vertex)
          }
        } else {
          // line segment intersects plane:
          const nextpoint = vertices[nextvertexindex]
          const intersectionpoint = splitLineSegmentByPlane(splane, vertex, nextpoint)
          if (isback) {
            backvertices.push(vertex)
            backvertices.push(intersectionpoint)
            frontvertices.push(intersectionpoint)
          } else {
            frontvertices.push(vertex)
            frontvertices.push(intersectionpoint)
            backvertices.push(intersectionpoint)
          }
        }
        isback = nextisback
      } // for vertexindex
      // remove duplicate vertices:
      const EPS_SQUARED = EPS * EPS
      if (backvertices.length >= 3) {
        let prevvertex = backvertices[backvertices.length - 1]
        for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {
          const vertex = backvertices[vertexindex]
          if (vec3.squaredDistance(vertex, prevvertex) < EPS_SQUARED) {
            backvertices.splice(vertexindex, 1)
            vertexindex--
          }
          prevvertex = vertex
        }
      }
      if (frontvertices.length >= 3) {
        let prevvertex = frontvertices[frontvertices.length - 1]
        for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {
          const vertex = frontvertices[vertexindex]
          if (vec3.squaredDistance(vertex, prevvertex) < EPS_SQUARED) {
            frontvertices.splice(vertexindex, 1)
            vertexindex--
          }
          prevvertex = vertex
        }
      }
      if (frontvertices.length >= 3) {
        result.front = poly3.fromPointsAndPlane(frontvertices, pplane)
      }
      if (backvertices.length >= 3) {
        result.back = poly3.fromPointsAndPlane(backvertices, pplane)
      }
    }
  }
  return result
}

module.exports = splitPolygonByPlane


/***/ }),

/***/ 52650:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const areAllShapesTheSameType = __webpack_require__(33486)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)

const unionGeom2 = __webpack_require__(53364)
const unionGeom3 = __webpack_require__(15781)

/**
 * Return a new geometry representing the total space in the given geometries.
 * The given geometries should be of the same type, either geom2 or geom3.
 *
 * @param {...Object} geometries - list of geometries
 * @returns {geom2|geom3} a new geometry
 * @alias module:modeling/booleans.union
 *
 * @example
 * let myshape = union(cube({size: [5,5,5]}), cube({size: [5,5,5], center: [5,5,5]}))
 *
 * @example
 * +-------+            +-------+
 * |       |            |       |
 * |   A   |            |       |
 * |    +--+----+   =   |       +----+
 * +----+--+    |       +----+       |
 *      |   B   |            |       |
 *      |       |            |       |
 *      +-------+            +-------+
 */
const union = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  if (!areAllShapesTheSameType(geometries)) {
    throw new Error('only unions of the same type are supported')
  }

  const geometry = geometries[0]
  // if (path.isA(geometry)) return pathunion(matrix, geometries)
  if (geom2.isA(geometry)) return unionGeom2(geometries)
  if (geom3.isA(geometry)) return unionGeom3(geometries)
  return geometry
}

module.exports = union


/***/ }),

/***/ 53364:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom3 = __webpack_require__(18206)

const measureEpsilon = __webpack_require__(85768)

const fromFakePolygons = __webpack_require__(12822)
const to3DWalls = __webpack_require__(46903)
const unionGeom3 = __webpack_require__(15781)

/*
 * Return a new 2D geometry representing the total space in the given 2D geometries.
 * @param {...geom2} geometries - list of 2D geometries to union
 * @returns {geom2} new 2D geometry
 */
const union = (...geometries) => {
  geometries = flatten(geometries)
  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))

  const newgeom3 = unionGeom3(newgeometries)
  const epsilon = measureEpsilon(newgeom3)

  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))
}

module.exports = union


/***/ }),

/***/ 15781:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const retessellate = __webpack_require__(73894)

const unionSub = __webpack_require__(6985)

/*
 * Return a new 3D geometry representing the space in the given 3D geometries.
 * @param {...objects} geometries - list of geometries to union
 * @returns {geom3} new 3D geometry
 */
const union = (...geometries) => {
  geometries = flatten(geometries)

  // combine geometries in a way that forms a balanced binary tree pattern
  let i
  for (i = 1; i < geometries.length; i += 2) {
    geometries.push(unionSub(geometries[i - 1], geometries[i]))
  }
  let newgeometry = geometries[i - 1]
  newgeometry = retessellate(newgeometry)
  return newgeometry
}

module.exports = union


/***/ }),

/***/ 6985:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom3 = __webpack_require__(18206)

const mayOverlap = __webpack_require__(50071)
const { Tree } = __webpack_require__(55620)

/*
 * Return a new 3D geometry representing the space in the given geometries.
 * @param {geom3} geometry1 - geometry to union
 * @param {geom3} geometry2 - geometry to union
 * @returns {geom3} new 3D geometry
 */
const unionSub = (geometry1, geometry2) => {
  if (!mayOverlap(geometry1, geometry2)) {
    return unionForNonIntersecting(geometry1, geometry2)
  }

  const a = new Tree(geom3.toPolygons(geometry1))
  const b = new Tree(geom3.toPolygons(geometry2))

  a.clipTo(b, false)
  // b.clipTo(a, true); // ERROR: doesn't work
  b.clipTo(a)
  b.invert()
  b.clipTo(a)
  b.invert()

  const newpolygons = a.allPolygons().concat(b.allPolygons())
  const result = geom3.create(newpolygons)
  return result
}

// Like union, but when we know that the two solids are not intersecting
// Do not use if you are not completely sure that the solids do not intersect!
const unionForNonIntersecting = (geometry1, geometry2) => {
  let newpolygons = geom3.toPolygons(geometry1)
  newpolygons = newpolygons.concat(geom3.toPolygons(geometry2))
  return geom3.create(newpolygons)
}

module.exports = unionSub


/***/ }),

/***/ 18912:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

const expandGeom2 = __webpack_require__(48140)
const expandGeom3 = __webpack_require__(96089)
const expandPath2 = __webpack_require__(37720)

/**
 * Expand the given geometry using the given options.
 * Both internal and external space is expanded for 2D and 3D shapes.
 *
 * Note: Contract is expand using a negative delta.
 * @param {Object} options - options for expand
 * @param {Number} [options.delta=1] - delta (+/-) of expansion
 * @param {String} [options.corners='edge'] - type of corner to create after expanding; edge, chamfer, round
 * @param {Integer} [options.segments=16] - number of segments when creating round corners
 * @param {...Objects} objects - the geometries to expand
 * @return {Object|Array} new geometry, or list of new geometries
 * @alias module:modeling/expansions.expand
 *
 * @example
 * let newarc = expand({delta: 5, corners: 'edge'}, arc({}))
 * let newsquare = expand({delta: 5, corners: 'chamfer'}, square({size: 30}))
 * let newsphere = expand({delta: 2, corners: 'round'}, cuboid({size: [20, 25, 5]}))
 */
const expand = (options, ...objects) => {
  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  const results = objects.map((object) => {
    if (path2.isA(object)) return expandPath2(options, object)
    if (geom2.isA(object)) return expandGeom2(options, object)
    if (geom3.isA(object)) return expandGeom3(options, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = expand


/***/ }),

/***/ 48140:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom2 = __webpack_require__(88934)

const offsetFromPoints = __webpack_require__(57954)

/*
 * Expand the given geometry (geom2) using the given options (if any).
 * @param {Object} options - options for expand
 * @param {Number} [options.delta=1] - delta (+/-) of expansion
 * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round
 * @param {Integer} [options.segments=16] - number of segments when creating round corners
 * @param {geom2} geometry - the geometry to expand
 * @returns {geom2} expanded geometry
 */
const expandGeom2 = (options, geometry) => {
  const defaults = {
    delta: 1,
    corners: 'edge',
    segments: 16
  }
  const { delta, corners, segments } = Object.assign({ }, defaults, options)

  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {
    throw new Error('corners must be "edge", "chamfer", or "round"')
  }

  // convert the geometry to outlines, and generate offsets from each
  const outlines = geom2.toOutlines(geometry)
  const newoutlines = outlines.map((outline) => {
    options = {
      delta,
      corners,
      closed: true,
      segments
    }
    return offsetFromPoints(options, outline)
  })

  // create a composite geometry from the new outlines
  const allsides = newoutlines.reduce((sides, newoutline) => sides.concat(geom2.toSides(geom2.fromPoints(newoutline))), [])
  return geom2.create(allsides)
}

module.exports = expandGeom2


/***/ }),

/***/ 96089:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom3 = __webpack_require__(18206)

const union = __webpack_require__(52650)

const expandShell = __webpack_require__(87892)

/*
 * Expand the given geometry (geom3) using the given options (if any).
 * @param {Object} options - options for expand
 * @param {Number} [options.delta=1] - delta (+/-) of expansion
 * @param {String} [options.corners='round'] - type corner to create during of expansion; round
 * @param {Integer} [options.segments=12] - number of segments when creating round corners
 * @param {geom3} geometry - the geometry to expand
 * @returns {geom3} expanded geometry
 */
const expandGeom3 = (options, geometry) => {
  const defaults = {
    delta: 1,
    corners: 'round',
    segments: 12
  }
  const { delta, corners, segments } = Object.assign({ }, defaults, options)

  if (!(corners === 'round')) {
    throw new Error('corners must be "round" for 3D geometries')
  }

  const polygons = geom3.toPolygons(geometry)
  if (polygons.length === 0) throw new Error('the given geometry cannot be empty')

  options = { delta, corners, segments }
  const expanded = expandShell(options, geometry)
  return union(geometry, expanded)
}

module.exports = expandGeom3


/***/ }),

/***/ 37720:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const area = __webpack_require__(1091)

const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)
const path2 = __webpack_require__(84345)

const offsetFromPoints = __webpack_require__(57954)

const createGeometryFromClosedOffsets = (paths) => {
  let { external, internal } = paths
  if (area(external) < 0) {
    external = external.reverse()
  } else {
    internal = internal.reverse()
  }
  // NOTE: creating path2 from the points ensures proper closure
  const externalPath = path2.fromPoints({ closed: true }, external)
  const internalPath = path2.fromPoints({ closed: true }, internal)
  const externalSides = geom2.toSides(geom2.fromPoints(path2.toPoints(externalPath)))
  const internalSides = geom2.toSides(geom2.fromPoints(path2.toPoints(internalPath)))
  externalSides.push(...internalSides)
  return geom2.create(externalSides)
}

const createGeometryFromExpandedOpenPath = (paths, segments, corners, delta) => {
  const { points, external, internal } = paths
  const capSegments = Math.floor(segments / 2) // rotation is 180 degrees
  const e2iCap = []
  const i2eCap = []
  if (corners === 'round' && capSegments > 0) {
    // added round caps to the geometry
    const step = Math.PI / capSegments
    const eCorner = points[points.length - 1]
    const e2iStart = vec2.angle(vec2.subtract(vec2.create(), external[external.length - 1], eCorner))
    const iCorner = points[0]
    const i2eStart = vec2.angle(vec2.subtract(vec2.create(), internal[0], iCorner))
    for (let i = 1; i < capSegments; i++) {
      let radians = e2iStart + (step * i)
      let point = vec2.fromAngleRadians(vec2.create(), radians)
      vec2.scale(point, point, delta)
      vec2.add(point, point, eCorner)
      e2iCap.push(point)

      radians = i2eStart + (step * i)
      point = vec2.fromAngleRadians(vec2.create(), radians)
      vec2.scale(point, point, delta)
      vec2.add(point, point, iCorner)
      i2eCap.push(point)
    }
  }
  const allPoints = []
  allPoints.push(...external, ...e2iCap, ...internal.reverse(), ...i2eCap)
  return geom2.fromPoints(allPoints)
}

/*
 * Expand the given geometry (path2) using the given options (if any).
 * @param {Object} options - options for expand
 * @param {Number} [options.delta=1] - delta (+) of expansion
 * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round
 * @param {Integer} [options.segments=16] - number of segments when creating round corners
 * @param {path2} geometry - the geometry to expand
 * @returns {geom2} expanded geometry
 */
const expandPath2 = (options, geometry) => {
  const defaults = {
    delta: 1,
    corners: 'edge',
    segments: 16
  }

  options = Object.assign({ }, defaults, options)
  const { delta, corners, segments } = options

  if (delta <= 0) throw new Error('the given delta must be positive for paths')

  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {
    throw new Error('corners must be "edge", "chamfer", or "round"')
  }

  const closed = geometry.isClosed
  const points = path2.toPoints(geometry)
  if (points.length === 0) throw new Error('the given geometry cannot be empty')

  const paths = {
    points: points,
    external: offsetFromPoints({ delta, corners, segments, closed }, points),
    internal: offsetFromPoints({ delta: -delta, corners, segments, closed }, points)
  }

  if (geometry.isClosed) {
    return createGeometryFromClosedOffsets(paths)
  } else {
    return createGeometryFromExpandedOpenPath(paths, segments, corners, delta)
  }
}

module.exports = expandPath2


/***/ }),

/***/ 87892:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const mat4 = __webpack_require__(36028)
const vec3 = __webpack_require__(14171)

const fnNumberSort = __webpack_require__(45080)

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const sphere = __webpack_require__(269)

const retessellate = __webpack_require__(73894)

const unionGeom3Sub = __webpack_require__(6985)

const extrudePolygon = __webpack_require__(44300)

/*
 * Collect all planes adjacent to each vertex
 */
const mapPlaneToVertex = (map, vertex, plane) => {
  const key = vertex.toString()
  if (!map.has(key)) {
    const entry = [vertex, [plane]]
    map.set(key, entry)
  } else {
    const planes = map.get(key)[1]
    planes.push(plane)
  }
}

/*
 * Collect all planes adjacent to each edge.
 * Combine undirected edges, no need for duplicate cylinders.
 */
const mapPlaneToEdge = (map, edge, plane) => {
  const key0 = edge[0].toString()
  const key1 = edge[1].toString()
  // Sort keys to make edges undirected
  const key = key0 < key1 ? `${key0},${key1}` : `${key1},${key0}`
  if (!map.has(key)) {
    const entry = [edge, [plane]]
    map.set(key, entry)
  } else {
    const planes = map.get(key)[1]
    planes.push(plane)
  }
}

const addUniqueAngle = (map, angle) => {
  const i = map.findIndex((item) => item === angle)
  if (i < 0) {
    map.push(angle)
  }
}

/*
 * Create the expanded shell of the solid:
 * All faces are extruded to 2 times delta
 * Cylinders are constructed around every side
 * Spheres are placed on every vertex
 * the result is a true expansion of the solid
 * @param  {Number} delta
 * @param  {Integer} segments
 */
const expandShell = (options, geometry) => {
  const defaults = {
    delta: 1,
    segments: 12
  }
  const { delta, segments } = Object.assign({ }, defaults, options)

  let result = geom3.create()
  const vertices2planes = new Map() // {vertex: [vertex, [plane, ...]]}
  const edges2planes = new Map() // {edge: [[vertex, vertex], [plane, ...]]}

  const v1 = vec3.create()
  const v2 = vec3.create()

  // loop through the polygons
  // - extruded the polygon, and add to the composite result
  // - add the plane to the unique vertice map
  // - add the plane to the unique edge map
  const polygons = geom3.toPolygons(geometry)
  polygons.forEach((polygon, index) => {
    const extrudevector = vec3.scale(vec3.create(), poly3.plane(polygon), 2 * delta)
    const translatedpolygon = poly3.transform(mat4.fromTranslation(mat4.create(), vec3.scale(vec3.create(), extrudevector, -0.5)), polygon)
    const extrudedface = extrudePolygon(extrudevector, translatedpolygon)
    result = unionGeom3Sub(result, extrudedface)

    const vertices = polygon.vertices
    for (let i = 0; i < vertices.length; i++) {
      mapPlaneToVertex(vertices2planes, vertices[i], poly3.plane(polygon))
      const j = (i + 1) % vertices.length
      const edge = [vertices[i], vertices[j]]
      mapPlaneToEdge(edges2planes, edge, poly3.plane(polygon))
    }
  })

  // now construct a cylinder on every side
  // The cylinder is always an approximation of a true cylinder, having polygons
  // around the sides. We will make sure though that the cylinder will have an edge at every
  // face that touches this side. This ensures that we will get a smooth fill even
  // if two edges are at, say, 10 degrees and the segments is low.
  edges2planes.forEach((item) => {
    const edge = item[0]
    const planes = item[1]
    const startpoint = edge[0]
    const endpoint = edge[1]

    // our x,y and z vectors:
    const zbase = vec3.subtract(vec3.create(), endpoint, startpoint)
    vec3.normalize(zbase, zbase)
    const xbase = planes[0]
    const ybase = vec3.cross(vec3.create(), xbase, zbase)

    // make a list of angles that the cylinder should traverse:
    let angles = []

    // first of all equally spaced around the cylinder:
    for (let i = 0; i < segments; i++) {
      addUniqueAngle(angles, (i * TAU / segments))
    }

    // and also at every normal of all touching planes:
    for (let i = 0, iMax = planes.length; i < iMax; i++) {
      const planenormal = planes[i]
      const si = vec3.dot(ybase, planenormal)
      const co = vec3.dot(xbase, planenormal)
      let angle = Math.atan2(si, co)

      if (angle < 0) angle += TAU
      addUniqueAngle(angles, angle)
      angle = Math.atan2(-si, -co)
      if (angle < 0) angle += TAU
      addUniqueAngle(angles, angle)
    }

    // this will result in some duplicate angles but we will get rid of those later.
    angles = angles.sort(fnNumberSort)

    // Now construct the cylinder by traversing all angles:
    const numangles = angles.length
    let prevp1
    let prevp2
    const startfacevertices = []
    const endfacevertices = []
    const polygons = []
    for (let i = -1; i < numangles; i++) {
      const angle = angles[(i < 0) ? (i + numangles) : i]
      const si = Math.sin(angle)
      const co = Math.cos(angle)
      vec3.scale(v1, xbase, co * delta)
      vec3.scale(v2, ybase, si * delta)
      vec3.add(v1, v1, v2)
      const p1 = vec3.add(vec3.create(), startpoint, v1)
      const p2 = vec3.add(vec3.create(), endpoint, v1)
      let skip = false
      if (i >= 0) {
        if (vec3.distance(p1, prevp1) < EPS) {
          skip = true
        }
      }
      if (!skip) {
        if (i >= 0) {
          startfacevertices.push(p1)
          endfacevertices.push(p2)
          const points = [prevp2, p2, p1, prevp1]
          const polygon = poly3.create(points)
          polygons.push(polygon)
        }
        prevp1 = p1
        prevp2 = p2
      }
    }
    endfacevertices.reverse()
    polygons.push(poly3.create(startfacevertices))
    polygons.push(poly3.create(endfacevertices))

    const cylinder = geom3.create(polygons)
    result = unionGeom3Sub(result, cylinder)
  })

  // build spheres at each unique vertex
  // We will try to set the x and z axis to the normals of 2 planes
  // This will ensure that our sphere tesselation somewhat matches 2 planes
  vertices2planes.forEach((item) => {
    const vertex = item[0]
    const planes = item[1]
    // use the first normal to be the x axis of our sphere:
    const xaxis = planes[0]
    // and find a suitable z axis. We will use the normal which is most perpendicular to the x axis:
    let bestzaxis = null
    let bestzaxisorthogonality = 0
    for (let i = 1; i < planes.length; i++) {
      const normal = planes[i]
      const cross = vec3.cross(v1, xaxis, normal)
      const crosslength = vec3.length(cross)
      if (crosslength > 0.05) { // FIXME why 0.05?
        if (crosslength > bestzaxisorthogonality) {
          bestzaxisorthogonality = crosslength
          bestzaxis = normal
        }
      }
    }
    if (!bestzaxis) {
      bestzaxis = vec3.orthogonal(v1, xaxis)
    }
    const yaxis = vec3.cross(v1, xaxis, bestzaxis)
    vec3.normalize(yaxis, yaxis)
    const zaxis = vec3.cross(v2, yaxis, xaxis)
    const corner = sphere({
      center: [vertex[0], vertex[1], vertex[2]],
      radius: delta,
      segments: segments,
      axes: [xaxis, yaxis, zaxis]
    })
    result = unionGeom3Sub(result, corner)
  })
  return retessellate(result)
}

module.exports = expandShell


/***/ }),

/***/ 44300:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec3 = __webpack_require__(14171)

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

// Extrude a polygon in the direction of the offsetvector.
// Returns (geom3) a new geometry
const extrudePolygon = (offsetvector, polygon1) => {
  const direction = vec3.dot(poly3.plane(polygon1), offsetvector)
  if (direction > 0) {
    polygon1 = poly3.invert(polygon1)
  }

  const newpolygons = [polygon1]

  const polygon2 = poly3.transform(mat4.fromTranslation(mat4.create(), offsetvector), polygon1)
  const numvertices = polygon1.vertices.length
  for (let i = 0; i < numvertices; i++) {
    const nexti = (i < (numvertices - 1)) ? i + 1 : 0
    const sideFacePolygon = poly3.create([
      polygon1.vertices[i],
      polygon2.vertices[i],
      polygon2.vertices[nexti],
      polygon1.vertices[nexti]
    ])
    newpolygons.push(sideFacePolygon)
  }
  newpolygons.push(poly3.invert(polygon2))

  return geom3.create(newpolygons)
}

module.exports = extrudePolygon


/***/ }),

/***/ 38900:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All shapes (primitives or the results of operations) can be expanded (or contracted.)
 * In all cases, the function returns the results, and never changes the original shapes.
 * @module modeling/expansions
 * @example
 * const { expand, offset } = require('@jscad/modeling').expansions
 */
module.exports = {
  expand: __webpack_require__(18912),
  offset: __webpack_require__(36621)
}


/***/ }),

/***/ 36621:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const path2 = __webpack_require__(84345)

const offsetGeom2 = __webpack_require__(35938)
const offsetPath2 = __webpack_require__(47079)

/**
 * Create offset geometry from the given geometry using the given options.
 * Offsets from internal and external space are created.
 * @param {Object} options - options for offset
 * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)
 * @param {String} [options.corners='edge'] - type of corner to create after offseting; edge, chamfer, round
 * @param {Integer} [options.segments=16] - number of segments when creating round corners
 * @param {...Object} objects - the geometries to offset
 * @return {Object|Array} new geometry, or list of new geometries
 * @alias module:modeling/expansions.offset
 *
 * @example
 * let small = offset({ delta: -4, corners: 'chamfer' }, square({size: 40})) // contract
 */
const offset = (options, ...objects) => {
  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  const results = objects.map((object) => {
    if (path2.isA(object)) return offsetPath2(options, object)
    if (geom2.isA(object)) return offsetGeom2(options, object)
    // if (geom3.isA(object)) return geom3.transform(matrix, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = offset


/***/ }),

/***/ 57954:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const intersect = __webpack_require__(58601)
const line2 = __webpack_require__(84714)
const vec2 = __webpack_require__(4138)
const area = __webpack_require__(1091)

/*
 * Create a set of offset points from the given points using the given options (if any).
 * @param {Object} options - options for offset
 * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)
 * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round
 * @param {Integer} [options.segments=16] - number of segments when creating round corners
 * @param {Integer} [options.closed=false] - is the last point connected back to the first point?
 * @param {Array} points - array of 2D points
 * @returns {Array} new set of offset points, plus points for each rounded corner
 */
const offsetFromPoints = (options, points) => {
  const defaults = {
    delta: 1,
    corners: 'edge',
    closed: false,
    segments: 16
  }
  let { delta, corners, closed, segments } = Object.assign({ }, defaults, options)

  if (Math.abs(delta) < EPS) return points

  let rotation = options.closed ? area(points) : 1.0 // + counter clockwise, - clockwise
  if (rotation === 0) rotation = 1.0

  // use right hand normal?
  const orientation = ((rotation > 0) && (delta >= 0)) || ((rotation < 0) && (delta < 0))
  delta = Math.abs(delta) // sign is no longer required

  let previousSegment = null
  let newPoints = []
  const newCorners = []
  const of = vec2.create()
  const n = points.length
  for (let i = 0; i < n; i++) {
    const j = (i + 1) % n
    const p0 = points[i]
    const p1 = points[j]
    // calculate the unit normal
    orientation ? vec2.subtract(of, p0, p1) : vec2.subtract(of, p1, p0)
    vec2.normal(of, of)
    vec2.normalize(of, of)
    // calculate the offset vector
    vec2.scale(of, of, delta)
    // calculate the new points (edge)
    const n0 = vec2.add(vec2.create(), p0, of)
    const n1 = vec2.add(vec2.create(), p1, of)

    const currentSegment = [n0, n1]
    if (previousSegment != null) {
      if (closed || (!closed && j !== 0)) {
        // check for intersection of new line segments
        const ip = intersect(previousSegment[0], previousSegment[1], currentSegment[0], currentSegment[1])
        if (ip) {
          // adjust the previous points
          newPoints.pop()
          // adjust current points
          currentSegment[0] = ip
        } else {
          newCorners.push({ c: p0, s0: previousSegment, s1: currentSegment })
        }
      }
    }
    previousSegment = [n0, n1]

    if (j === 0 && !closed) continue

    newPoints.push(currentSegment[0])
    newPoints.push(currentSegment[1])
  }
  // complete the closure if required
  if (closed && previousSegment != null) {
    // check for intersection of closing line segments
    const n0 = newPoints[0]
    const n1 = newPoints[1]
    const ip = intersect(previousSegment[0], previousSegment[1], n0, n1)
    if (ip) {
      // adjust the previous points
      newPoints[0] = ip
      newPoints.pop()
    } else {
      const p0 = points[0]
      const cursegment = [n0, n1]
      newCorners.push({ c: p0, s0: previousSegment, s1: cursegment })
    }
  }

  // generate corners if necessary

  if (corners === 'edge') {
    // map for fast point index lookup
    const pointIndex = new Map() // {point: index}
    newPoints.forEach((point, index) => pointIndex.set(point, index))

    // create edge corners
    const line0 = line2.create()
    const line1 = line2.create()
    newCorners.forEach((corner) => {
      line2.fromPoints(line0, corner.s0[0], corner.s0[1])
      line2.fromPoints(line1, corner.s1[0], corner.s1[1])
      const ip = line2.intersectPointOfLines(line0, line1)
      if (Number.isFinite(ip[0]) && Number.isFinite(ip[1])) {
        const p0 = corner.s0[1]
        const i = pointIndex.get(p0)
        newPoints[i] = ip
        newPoints[(i + 1) % newPoints.length] = undefined
      } else {
        // paralell segments, drop one
        const p0 = corner.s1[0]
        const i = pointIndex.get(p0)
        newPoints[i] = undefined
      }
    })
    newPoints = newPoints.filter((p) => p !== undefined)
  }

  if (corners === 'round') {
    // create rounded corners
    let cornersegments = Math.floor(segments / 4)
    const v0 = vec2.create()
    newCorners.forEach((corner) => {
      // calculate angle of rotation
      let rotation = vec2.angle(vec2.subtract(v0, corner.s1[0], corner.c))
      rotation -= vec2.angle(vec2.subtract(v0, corner.s0[1], corner.c))
      if (orientation && rotation < 0) {
        rotation = rotation + Math.PI
        if (rotation < 0) rotation = rotation + Math.PI
      }
      if ((!orientation) && rotation > 0) {
        rotation = rotation - Math.PI
        if (rotation > 0) rotation = rotation - Math.PI
      }

      if (rotation !== 0.0) {
        // generate the segments
        cornersegments = Math.floor(segments * (Math.abs(rotation) / TAU))
        const step = rotation / cornersegments
        const start = vec2.angle(vec2.subtract(v0, corner.s0[1], corner.c))
        const cornerpoints = []
        for (let i = 1; i < cornersegments; i++) {
          const radians = start + (step * i)
          const point = vec2.fromAngleRadians(vec2.create(), radians)
          vec2.scale(point, point, delta)
          vec2.add(point, point, corner.c)
          cornerpoints.push(point)
        }
        if (cornerpoints.length > 0) {
          const p0 = corner.s0[1]
          let i = newPoints.findIndex((point) => vec2.equals(p0, point))
          i = (i + 1) % newPoints.length
          newPoints.splice(i, 0, ...cornerpoints)
        }
      } else {
        // paralell segments, drop one
        const p0 = corner.s1[0]
        const i = newPoints.findIndex((point) => vec2.equals(p0, point))
        newPoints.splice(i, 1)
      }
    })
  }
  return newPoints
}

module.exports = offsetFromPoints


/***/ }),

/***/ 35938:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom2 = __webpack_require__(88934)
const poly2 = __webpack_require__(12577)

const offsetFromPoints = __webpack_require__(57954)

/*
 * Create a offset geometry from the given geom2 using the given options (if any).
 * @param {Object} options - options for offset
 * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)
 * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round
 * @param {Integer} [options.segments=16] - number of segments when creating round corners
 * @param {geom2} geometry - geometry from which to create the offset
 * @returns {geom2} offset geometry, plus rounded corners
 */
const offsetGeom2 = (options, geometry) => {
  const defaults = {
    delta: 1,
    corners: 'edge',
    segments: 0
  }
  const { delta, corners, segments } = Object.assign({ }, defaults, options)

  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {
    throw new Error('corners must be "edge", "chamfer", or "round"')
  }

  // convert the geometry to outlines, and generate offsets from each
  const outlines = geom2.toOutlines(geometry)
  const newoutlines = outlines.map((outline) => {
    const level = outlines.reduce((acc, polygon) => acc + poly2.arePointsInside(outline, poly2.create(polygon)), 0)
    const outside = (level % 2) === 0

    options = {
      delta: outside ? delta : -delta,
      corners,
      closed: true,
      segments
    }
    return offsetFromPoints(options, outline)
  })

  // create a composite geometry from the new outlines
  const allsides = newoutlines.reduce((sides, newoutline) => sides.concat(geom2.toSides(geom2.fromPoints(newoutline))), [])
  return geom2.create(allsides)
}

module.exports = offsetGeom2


/***/ }),

/***/ 47079:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const path2 = __webpack_require__(84345)

const offsetFromPoints = __webpack_require__(57954)

/*
 * Create a offset geometry from the given path using the given options (if any).
 * @param {Object} options - options for offset
 * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)
 * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round
 * @param {Integer} [options.segments=16] - number of segments when creating round corners
 * @param {path2} geometry - geometry from which to create the offset
 * @returns {path2} offset geometry, plus rounded corners
 */
const offsetPath2 = (options, geometry) => {
  const defaults = {
    delta: 1,
    corners: 'edge',
    closed: geometry.isClosed,
    segments: 16
  }
  const { delta, corners, closed, segments } = Object.assign({ }, defaults, options)

  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {
    throw new Error('corners must be "edge", "chamfer", or "round"')
  }

  options = { delta, corners, closed, segments }
  const newpoints = offsetFromPoints(options, path2.toPoints(geometry))
  return path2.fromPoints({ closed: closed }, newpoints)
}

module.exports = offsetPath2


/***/ }),

/***/ 14665:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { area } = __webpack_require__(98589)
const { toOutlines } = __webpack_require__(88934)
const { arePointsInside } = __webpack_require__(12577)

/*
 * Constructs a polygon hierarchy of solids and holes.
 * The hierarchy is represented as a forest of trees. All trees shall be depth at most 2.
 * If a solid exists inside the hole of another solid, it will be split out as its own root.
 *
 * @param {geom2} geometry
 * @returns {Array} an array of polygons with associated holes
 * @alias module:modeling/geometries/geom2.toTree
 *
 * @example
 * const geometry = subtract(rectangle({size: [5, 5]}), rectangle({size: [3, 3]}))
 * console.log(assignHoles(geometry))
 * [{
 *   "solid": [[-2.5,-2.5],[2.5,-2.5],[2.5,2.5],[-2.5,2.5]],
 *   "holes": [[[-1.5,1.5],[1.5,1.5],[1.5,-1.5],[-1.5,-1.5]]]
 * }]
 */
const assignHoles = (geometry) => {
  const outlines = toOutlines(geometry)
  const solids = [] // solid indices
  const holes = [] // hole indices
  outlines.forEach((outline, i) => {
    const a = area(outline)
    if (a < 0) {
      holes.push(i)
    } else if (a > 0) {
      solids.push(i)
    }
  })

  // for each hole, determine what solids it is inside of
  const children = [] // child holes of solid[i]
  const parents = [] // parent solids of hole[i]
  solids.forEach((s, i) => {
    const solid = outlines[s]
    children[i] = []
    holes.forEach((h, j) => {
      const hole = outlines[h]
      // check if a point of hole j is inside solid i
      if (arePointsInside([hole[0]], { vertices: solid })) {
        children[i].push(h)
        if (!parents[j]) parents[j] = []
        parents[j].push(i)
      }
    })
  })

  // check if holes have multiple parents and choose one with fewest children
  holes.forEach((h, j) => {
    // ensure at least one parent exists
    if (parents[j] && parents[j].length > 1) {
      // the solid directly containing this hole
      const directParent = minIndex(parents[j], (p) => children[p].length)
      parents[j].forEach((p, i) => {
        if (i !== directParent) {
          // Remove hole from skip level parents
          children[p] = children[p].filter((c) => c !== h)
        }
      })
    }
  })

  // map indices back to points
  return children.map((holes, i) => ({
    solid: outlines[solids[i]],
    holes: holes.map((h) => outlines[h])
  }))
}

/*
 * Find the item in the list with smallest score(item).
 * If the list is empty, return undefined.
 */
const minIndex = (list, score) => {
  let bestIndex
  let best
  list.forEach((item, index) => {
    const value = score(item)
    if (best === undefined || value < best) {
      bestIndex = index
      best = value
    }
  })
  return bestIndex
}

module.exports = assignHoles


/***/ }),

/***/ 32861:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { filterPoints, linkedPolygon, locallyInside, splitPolygon } = __webpack_require__(59156)
const { area, pointInTriangle } = __webpack_require__(23882)

/*
 * link every hole into the outer loop, producing a single-ring polygon without holes
 *
 * Original source from https://github.com/mapbox/earcut
 * Copyright (c) 2016 Mapbox
 */
const eliminateHoles = (data, holeIndices, outerNode, dim) => {
  const queue = []

  for (let i = 0, len = holeIndices.length; i < len; i++) {
    const start = holeIndices[i] * dim
    const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length
    const list = linkedPolygon(data, start, end, dim, false)
    if (list === list.next) list.steiner = true
    queue.push(getLeftmost(list))
  }

  queue.sort((a, b) => a.x - b.x) // compare X

  // process holes from left to right
  for (let i = 0; i < queue.length; i++) {
    outerNode = eliminateHole(queue[i], outerNode)
    outerNode = filterPoints(outerNode, outerNode.next)
  }

  return outerNode
}

/*
 * find a bridge between vertices that connects hole with an outer ring and link it
 */
const eliminateHole = (hole, outerNode) => {
  const bridge = findHoleBridge(hole, outerNode)
  if (!bridge) {
    return outerNode
  }

  const bridgeReverse = splitPolygon(bridge, hole)

  // filter colinear points around the cuts
  const filteredBridge = filterPoints(bridge, bridge.next)
  filterPoints(bridgeReverse, bridgeReverse.next)

  // Check if input node was removed by the filtering
  return outerNode === bridge ? filteredBridge : outerNode
}

/*
 * David Eberly's algorithm for finding a bridge between hole and outer polygon
 */
const findHoleBridge = (hole, outerNode) => {
  let p = outerNode
  const hx = hole.x
  const hy = hole.y
  let qx = -Infinity
  let m

  // find a segment intersected by a ray from the hole's leftmost point to the left
  // segment's endpoint with lesser x will be potential connection point
  do {
    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {
      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y)
      if (x <= hx && x > qx) {
        qx = x
        if (x === hx) {
          if (hy === p.y) return p
          if (hy === p.next.y) return p.next
        }

        m = p.x < p.next.x ? p : p.next
      }
    }

    p = p.next
  } while (p !== outerNode)

  if (!m) return null

  if (hx === qx) return m // hole touches outer segment; pick leftmost endpoint

  // look for points inside the triangle of hole point, segment intersection and endpoint
  // if there are no points found, we have a valid connection
  // otherwise choose the point of the minimum angle with the ray as connection point

  const stop = m
  const mx = m.x
  const my = m.y
  let tanMin = Infinity

  p = m

  do {
    if (hx >= p.x && p.x >= mx && hx !== p.x &&
        pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
      const tan = Math.abs(hy - p.y) / (hx - p.x) // tangential

      if (locallyInside(p, hole) && (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {
        m = p
        tanMin = tan
      }
    }

    p = p.next
  } while (p !== stop)

  return m
}

/*
 * whether sector in vertex m contains sector in vertex p in the same coordinates
 */
const sectorContainsSector = (m, p) => area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0

/*
 * find the leftmost node of a polygon ring
 */
const getLeftmost = (start) => {
  let p = start
  let leftmost = start
  do {
    if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p
    p = p.next
  } while (p !== start)

  return leftmost
}

module.exports = eliminateHoles


/***/ }),

/***/ 46196:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const eliminateHoles = __webpack_require__(32861)
const { removeNode, sortLinked } = __webpack_require__(59588)
const { cureLocalIntersections, filterPoints, isValidDiagonal, linkedPolygon, splitPolygon } = __webpack_require__(59156)
const { area, pointInTriangle } = __webpack_require__(23882)

/*
 * An implementation of the earcut polygon triangulation algorithm.
 *
 * Original source from https://github.com/mapbox/earcut
 * Copyright (c) 2016 Mapbox
 *
 * @param {data} A flat array of vertex coordinates.
 * @param {holeIndices} An array of hole indices if any.
 * @param {dim} The number of coordinates per vertex in the input array.
 */
const triangulate = (data, holeIndices, dim = 2) => {
  const hasHoles = holeIndices && holeIndices.length
  const outerLen = hasHoles ? holeIndices[0] * dim : data.length
  let outerNode = linkedPolygon(data, 0, outerLen, dim, true)
  const triangles = []

  if (!outerNode || outerNode.next === outerNode.prev) return triangles

  let minX, minY, maxX, maxY, invSize

  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim)

  // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox
  if (data.length > 80 * dim) {
    minX = maxX = data[0]
    minY = maxY = data[1]

    for (let i = dim; i < outerLen; i += dim) {
      const x = data[i]
      const y = data[i + 1]
      if (x < minX) minX = x
      if (y < minY) minY = y
      if (x > maxX) maxX = x
      if (y > maxY) maxY = y
    }

    // minX, minY and invSize are later used to transform coords into integers for z-order calculation
    invSize = Math.max(maxX - minX, maxY - minY)
    invSize = invSize !== 0 ? 1 / invSize : 0
  }

  earcutLinked(outerNode, triangles, dim, minX, minY, invSize)

  return triangles
}

/*
 * main ear slicing loop which triangulates a polygon (given as a linked list)
 */
const earcutLinked = (ear, triangles, dim, minX, minY, invSize, pass) => {
  if (!ear) return

  // interlink polygon nodes in z-order
  if (!pass && invSize) indexCurve(ear, minX, minY, invSize)

  let stop = ear
  let prev
  let next

  // iterate through ears, slicing them one by one
  while (ear.prev !== ear.next) {
    prev = ear.prev
    next = ear.next

    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      // cut off the triangle
      triangles.push(prev.i / dim)
      triangles.push(ear.i / dim)
      triangles.push(next.i / dim)

      removeNode(ear)

      // skipping the next vertex leads to less sliver triangles
      ear = next.next
      stop = next.next

      continue
    }

    ear = next

    // if we looped through the whole remaining polygon and can't find any more ears
    if (ear === stop) {
      // try filtering points and slicing again
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1)

        // if this didn't work, try curing all small self-intersections locally
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles, dim)
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2)

        // as a last resort, try splitting the remaining polygon into two
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize)
      }

      break
    }
  }
}

/*
 * check whether a polygon node forms a valid ear with adjacent nodes
 */
const isEar = (ear) => {
  const a = ear.prev
  const b = ear
  const c = ear.next

  if (area(a, b, c) >= 0) return false // reflex, can't be an ear

  // now make sure we don't have other points inside the potential ear
  let p = ear.next.next

  while (p !== ear.prev) {
    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
      return false
    }
    p = p.next
  }

  return true
}

const isEarHashed = (ear, minX, minY, invSize) => {
  const a = ear.prev
  const b = ear
  const c = ear.next

  if (area(a, b, c) >= 0) return false // reflex, can't be an ear

  // triangle bbox; min & max are calculated like this for speed
  const minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x)
  const minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y)
  const maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x)
  const maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y)

  // z-order range for the current triangle bbox
  const minZ = zOrder(minTX, minTY, minX, minY, invSize)
  const maxZ = zOrder(maxTX, maxTY, minX, minY, invSize)

  let p = ear.prevZ
  let n = ear.nextZ

  // look for points inside the triangle in both directions
  while (p && p.z >= minZ && n && n.z <= maxZ) {
    if (p !== ear.prev && p !== ear.next &&
      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
      area(p.prev, p, p.next) >= 0) return false
    p = p.prevZ

    if (n !== ear.prev && n !== ear.next &&
      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
      area(n.prev, n, n.next) >= 0) return false
    n = n.nextZ
  }

  // look for remaining points in decreasing z-order
  while (p && p.z >= minZ) {
    if (p !== ear.prev && p !== ear.next &&
      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&
      area(p.prev, p, p.next) >= 0) return false
    p = p.prevZ
  }

  // look for remaining points in increasing z-order
  while (n && n.z <= maxZ) {
    if (n !== ear.prev && n !== ear.next &&
      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&
      area(n.prev, n, n.next) >= 0) return false
    n = n.nextZ
  }

  return true
}

/*
 * try splitting polygon into two and triangulate them independently
 */
const splitEarcut = (start, triangles, dim, minX, minY, invSize) => {
  // look for a valid diagonal that divides the polygon into two
  let a = start
  do {
    let b = a.next.next
    while (b !== a.prev) {
      if (a.i !== b.i && isValidDiagonal(a, b)) {
        // split the polygon in two by the diagonal
        let c = splitPolygon(a, b)

        // filter colinear points around the cuts
        a = filterPoints(a, a.next)
        c = filterPoints(c, c.next)

        // run earcut on each half
        earcutLinked(a, triangles, dim, minX, minY, invSize)
        earcutLinked(c, triangles, dim, minX, minY, invSize)
        return
      }

      b = b.next
    }

    a = a.next
  } while (a !== start)
}

/*
 * interlink polygon nodes in z-order
 */
const indexCurve = (start, minX, minY, invSize) => {
  let p = start
  do {
    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize)
    p.prevZ = p.prev
    p.nextZ = p.next
    p = p.next
  } while (p !== start)

  p.prevZ.nextZ = null
  p.prevZ = null

  sortLinked(p, (p) => p.z)
}

/*
 * z-order of a point given coords and inverse of the longer side of data bbox
 */
const zOrder = (x, y, minX, minY, invSize) => {
  // coords are transformed into non-negative 15-bit integer range
  x = 32767 * (x - minX) * invSize
  y = 32767 * (y - minY) * invSize

  x = (x | (x << 8)) & 0x00FF00FF
  x = (x | (x << 4)) & 0x0F0F0F0F
  x = (x | (x << 2)) & 0x33333333
  x = (x | (x << 1)) & 0x55555555

  y = (y | (y << 8)) & 0x00FF00FF
  y = (y | (y << 4)) & 0x0F0F0F0F
  y = (y | (y << 2)) & 0x33333333
  y = (y | (y << 1)) & 0x55555555

  return x | (y << 1)
}

module.exports = triangulate


/***/ }),

/***/ 59588:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const sortLinked = __webpack_require__(55421)

class Node {
  constructor (i, x, y) {
    // vertex index in coordinates array
    this.i = i

    // vertex coordinates
    this.x = x
    this.y = y

    // previous and next vertex nodes in a polygon ring
    this.prev = null
    this.next = null

    // z-order curve value
    this.z = null

    // previous and next nodes in z-order
    this.prevZ = null
    this.nextZ = null

    // indicates whether this is a steiner point
    this.steiner = false
  }
}

/*
 * create a node and optionally link it with previous one (in a circular doubly linked list)
 */
const insertNode = (i, x, y, last) => {
  const p = new Node(i, x, y)

  if (!last) {
    p.prev = p
    p.next = p
  } else {
    p.next = last.next
    p.prev = last
    last.next.prev = p
    last.next = p
  }

  return p
}

/*
 * remove a node and join prev with next nodes
 */
const removeNode = (p) => {
  p.next.prev = p.prev
  p.prev.next = p.next

  if (p.prevZ) p.prevZ.nextZ = p.nextZ
  if (p.nextZ) p.nextZ.prevZ = p.prevZ
}

module.exports = { Node, insertNode, removeNode, sortLinked }


/***/ }),

/***/ 55421:
/***/ ((module) => {


// Simon Tatham's linked list merge sort algorithm
// https://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html
const sortLinked = (list, fn) => {
  let i, p, q, e, numMerges
  let inSize = 1

  do {
    p = list
    list = null
    let tail = null
    numMerges = 0

    while (p) {
      numMerges++
      q = p
      let pSize = 0
      for (i = 0; i < inSize; i++) {
        pSize++
        q = q.nextZ
        if (!q) break
      }

      let qSize = inSize

      while (pSize > 0 || (qSize > 0 && q)) {
        if (pSize !== 0 && (qSize === 0 || !q || fn(p) <= fn(q))) {
          e = p
          p = p.nextZ
          pSize--
        } else {
          e = q
          q = q.nextZ
          qSize--
        }

        if (tail) tail.nextZ = e
        else list = e

        e.prevZ = tail
        tail = e
      }

      p = q
    }

    tail.nextZ = null
    inSize *= 2
  } while (numMerges > 1)

  return list
}

module.exports = sortLinked


/***/ }),

/***/ 59156:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { Node, insertNode, removeNode } = __webpack_require__(59588)
const { area } = __webpack_require__(23882)

/*
 * create a circular doubly linked list from polygon points in the specified winding order
 */
const linkedPolygon = (data, start, end, dim, clockwise) => {
  let last

  if (clockwise === (signedArea(data, start, end, dim) > 0)) {
    for (let i = start; i < end; i += dim) {
      last = insertNode(i, data[i], data[i + 1], last)
    }
  } else {
    for (let i = end - dim; i >= start; i -= dim) {
      last = insertNode(i, data[i], data[i + 1], last)
    }
  }

  if (last && equals(last, last.next)) {
    removeNode(last)
    last = last.next
  }

  return last
}

/*
 * eliminate colinear or duplicate points
 */
const filterPoints = (start, end) => {
  if (!start) return start
  if (!end) end = start

  let p = start
  let again
  do {
    again = false

    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {
      removeNode(p)
      p = end = p.prev
      if (p === p.next) break
      again = true
    } else {
      p = p.next
    }
  } while (again || p !== end)

  return end
}

/*
 * go through all polygon nodes and cure small local self-intersections
 */
const cureLocalIntersections = (start, triangles, dim) => {
  let p = start
  do {
    const a = p.prev
    const b = p.next.next

    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
      triangles.push(a.i / dim)
      triangles.push(p.i / dim)
      triangles.push(b.i / dim)

      // remove two nodes involved
      removeNode(p)
      removeNode(p.next)

      p = start = b
    }

    p = p.next
  } while (p !== start)

  return filterPoints(p)
}

/*
 * check if a polygon diagonal intersects any polygon segments
 */
const intersectsPolygon = (a, b) => {
  let p = a
  do {
    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&
        intersects(p, p.next, a, b)) return true
    p = p.next
  } while (p !== a)

  return false
}

/*
 * check if a polygon diagonal is locally inside the polygon
 */
const locallyInside = (a, b) => area(a.prev, a, a.next) < 0
  ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0
  : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0

/*
 * check if the middle point of a polygon diagonal is inside the polygon
 */
const middleInside = (a, b) => {
  let p = a
  let inside = false
  const px = (a.x + b.x) / 2
  const py = (a.y + b.y) / 2
  do {
    if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&
        (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)) { inside = !inside }
    p = p.next
  } while (p !== a)

  return inside
}

/*
 * link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two
 * if one belongs to the outer ring and another to a hole, it merges it into a single ring
 */
const splitPolygon = (a, b) => {
  const a2 = new Node(a.i, a.x, a.y)
  const b2 = new Node(b.i, b.x, b.y)
  const an = a.next
  const bp = b.prev

  a.next = b
  b.prev = a

  a2.next = an
  an.prev = a2

  b2.next = a2
  a2.prev = b2

  bp.next = b2
  b2.prev = bp

  return b2
}

/*
 * check if a diagonal between two polygon nodes is valid (lies in polygon interior)
 */
const isValidDiagonal = (a, b) => a.next.i !== b.i &&
    a.prev.i !== b.i &&
    !intersectsPolygon(a, b) && // doesn't intersect other edges
    (
      locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible
        (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors
        equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0
    )

/*
 * check if two segments intersect
 */
const intersects = (p1, q1, p2, q2) => {
  const o1 = Math.sign(area(p1, q1, p2))
  const o2 = Math.sign(area(p1, q1, q2))
  const o3 = Math.sign(area(p2, q2, p1))
  const o4 = Math.sign(area(p2, q2, q1))

  if (o1 !== o2 && o3 !== o4) return true // general case

  if (o1 === 0 && onSegment(p1, p2, q1)) return true // p1, q1 and p2 are colinear and p2 lies on p1q1
  if (o2 === 0 && onSegment(p1, q2, q1)) return true // p1, q1 and q2 are colinear and q2 lies on p1q1
  if (o3 === 0 && onSegment(p2, p1, q2)) return true // p2, q2 and p1 are colinear and p1 lies on p2q2
  if (o4 === 0 && onSegment(p2, q1, q2)) return true // p2, q2 and q1 are colinear and q1 lies on p2q2

  return false
}

/*
 * for colinear points p, q, r, check if point q lies on segment pr
 */
const onSegment = (p, q, r) => q.x <= Math.max(p.x, r.x) &&
    q.x >= Math.min(p.x, r.x) &&
    q.y <= Math.max(p.y, r.y) &&
    q.y >= Math.min(p.y, r.y)

const signedArea = (data, start, end, dim) => {
  let sum = 0
  for (let i = start, j = end - dim; i < end; i += dim) {
    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1])
    j = i
  }

  return sum
}

/*
 * check if two points are equal
 */
const equals = (p1, p2) => p1.x === p2.x && p1.y === p2.y

module.exports = { cureLocalIntersections, filterPoints, isValidDiagonal, linkedPolygon, locallyInside, splitPolygon }


/***/ }),

/***/ 23885:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom2 = __webpack_require__(88934)
const plane = __webpack_require__(68646)
const vec2 = __webpack_require__(4138)
const vec3 = __webpack_require__(14171)
const calculatePlane = __webpack_require__(94698)
const assignHoles = __webpack_require__(14665)

/*
 * Constructs a polygon hierarchy which associates holes with their outer solids.
 * This class maps a 3D polygon onto a 2D space using an orthonormal basis.
 * It tracks the mapping so that points can be reversed back to 3D losslessly.
 */
class PolygonHierarchy {
  constructor (slice) {
    this.plane = calculatePlane(slice)

    // create an orthonormal basis
    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal
    const rightvector = vec3.orthogonal(vec3.create(), this.plane)
    const perp = vec3.cross(vec3.create(), this.plane, rightvector)
    this.v = vec3.normalize(perp, perp)
    this.u = vec3.cross(vec3.create(), this.v, this.plane)

    // map from 2D to original 3D points
    this.basisMap = new Map()

    // project slice onto 2D plane
    const projected = slice.edges.map((e) => e.map((v) => this.to2D(v)))

    // compute polygon hierarchies, assign holes to solids
    const geometry = geom2.create(projected)
    this.roots = assignHoles(geometry)
  }

  /*
   * project a 3D point onto the 2D plane
   */
  to2D (vector3) {
    const vector2 = vec2.fromValues(vec3.dot(vector3, this.u), vec3.dot(vector3, this.v))
    this.basisMap.set(vector2, vector3)
    return vector2
  }

  /*
   * un-project a 2D point back into 3D
   */
  to3D (vector2) {
    // use a map to get the original 3D, no floating point error
    const original = this.basisMap.get(vector2)
    if (original) {
      return original
    } else {
      console.log('Warning: point not in original slice')
      const v1 = vec3.scale(vec3.create(), this.u, vector2[0])
      const v2 = vec3.scale(vec3.create(), this.v, vector2[1])

      const planeOrigin = vec3.scale(vec3.create(), plane, plane[3])
      const v3 = vec3.add(v1, v1, planeOrigin)
      return vec3.add(v2, v2, v3)
    }
  }
}

module.exports = PolygonHierarchy


/***/ }),

/***/ 23882:
/***/ ((module) => {


/*
 * check if a point lies within a convex triangle
 */
const pointInTriangle = (ax, ay, bx, by, cx, cy, px, py) => (
  (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&
      (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&
      (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0
)

/*
 * signed area of a triangle
 */
const area = (p, q, r) => (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)

module.exports = { area, pointInTriangle }


/***/ }),

/***/ 95529:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const slice = __webpack_require__(54438)
const repairSlice = __webpack_require__(95020)

const extrudeWalls = __webpack_require__(80116)

const defaultCallback = (progress, index, base) => {
  let baseSlice = null
  if (geom2.isA(base)) baseSlice = slice.fromSides(geom2.toSides(base))
  if (poly3.isA(base)) baseSlice = slice.fromPoints(poly3.toPoints(base))

  return progress === 0 || progress === 1 ? slice.transform(mat4.fromTranslation(mat4.create(), [0, 0, progress]), baseSlice) : null
}

/**
 * Extrude a solid from the slices as returned by the callback function.
 * @see slice
 *
 * @param {Object} options - options for extrude
 * @param {Integer} [options.numberOfSlices=2] the number of slices to be generated by the callback
 * @param {Boolean} [options.capStart=true] the solid should have a cap at the start
 * @param {Boolean} [options.capEnd=true] the solid should have a cap at the end
 * @param {Boolean} [options.close=false] the solid should have a closing section between start and end
 * @param {Boolean} [options.repair=true] - repair gaps in the geometry
 * @param {Function} [options.callback] the callback function that generates each slice
 * @param {Object} base - the base object which is used to create slices (see the example for callback information)
 * @return {geom3} the extruded shape
 * @alias module:modeling/extrusions.extrudeFromSlices
 *
 * @example
 * // Parameters:
 * //   progress : the percent complete [0..1]
 * //   index : the index of the current slice [0..numberOfSlices - 1]
 * //   base : the base object as given
 * // Return Value:
 * //   slice or null (to skip)
 * const callback = (progress, index, base) => {
 *   ...
 *   return slice
 * }
 */
const extrudeFromSlices = (options, base) => {
  const defaults = {
    numberOfSlices: 2,
    capStart: true,
    capEnd: true,
    close: false,
    repair: true,
    callback: defaultCallback
  }
  const { numberOfSlices, capStart, capEnd, close, repair, callback: generate } = Object.assign({ }, defaults, options)

  if (numberOfSlices < 2) throw new Error('numberOfSlices must be 2 or more')

  // Repair gaps in the base slice
  if (repair) {
    // note: base must be a slice, if base is geom2 this doesn't repair
    base = repairSlice(base)
  }

  const sMax = numberOfSlices - 1

  let startSlice = null
  let endSlice = null
  let prevSlice = null
  let polygons = []
  for (let s = 0; s < numberOfSlices; s++) {
    // invoke the callback function to get the next slice
    // NOTE: callback can return null to skip the slice
    const currentSlice = generate(s / sMax, s, base)

    if (currentSlice) {
      if (!slice.isA(currentSlice)) throw new Error('the callback function must return slice objects')

      const edges = slice.toEdges(currentSlice)
      if (edges.length === 0) throw new Error('the callback function must return slices with one or more edges')

      if (prevSlice) {
        polygons = polygons.concat(extrudeWalls(prevSlice, currentSlice))
      }

      // save start and end slices for caps if necessary
      if (s === 0) startSlice = currentSlice
      if (s === (numberOfSlices - 1)) endSlice = currentSlice

      prevSlice = currentSlice
    }
  }

  if (capEnd) {
    // create a cap at the end
    const endPolygons = slice.toPolygons(endSlice)
    polygons = polygons.concat(endPolygons)
  }
  if (capStart) {
    // create a cap at the start
    const startPolygons = slice.toPolygons(startSlice).map(poly3.invert)
    polygons = polygons.concat(startPolygons)
  }
  if (!capStart && !capEnd) {
    // create walls between end and start slices
    if (close && !slice.equals(endSlice, startSlice)) {
      polygons = polygons.concat(extrudeWalls(endSlice, startSlice))
    }
  }
  return geom3.create(polygons)
}

module.exports = extrudeFromSlices


/***/ }),

/***/ 65344:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)
const slice = __webpack_require__(54438)
const mat4 = __webpack_require__(36028)
const extrudeFromSlices = __webpack_require__(95529)
const geom2 = __webpack_require__(88934)

/**
 * Perform a helical extrude of the geometry, using the given options.
 *
 * @param {Object} options - options for extrusion
 * @param {Number} [options.angle=TAU] - angle of the extrusion (RADIANS) positive for right-hand rotation, negative for left-hand
 * @param {Number} [options.startAngle=0] - start angle of the extrusion (RADIANS)
 * @param {Number} [options.pitch=10] - elevation gain for each turn
 * @param {Number} [options.height] - total height of the helix path. Ignored if pitch is set.
 * @param {Number} [options.endOffset=0] - offset the final radius of the extrusion, allowing for tapered helix, and or spiral
 * @param {Number} [options.segmentsPerRotation=32] - number of segments per full rotation of the extrusion
 * @param {geom2} geometry - the geometry to extrude
 * @returns {geom3} the extruded geometry
 * @alias module:modeling/extrusions.extrudeHelical
 *
 * @example
 * const myshape = extrudeHelical(
 *  {
 *      angle: Math.PI * 4,
 *      pitch: 10,
 *      segmentsPerRotation: 64
 *  },
 *  circle({size: 3, center: [10, 0]})
 * )
 */
const extrudeHelical = (options, geometry) => {
  const defaults = {
    angle: TAU,
    startAngle: 0,
    pitch: 10,
    endOffset: 0,
    segmentsPerRotation: 32
  }
  const { angle, endOffset, segmentsPerRotation, startAngle } = Object.assign({}, defaults, options)

  let pitch
  // ignore height if pitch is set
  if(!options.pitch && options.height) {
    pitch = options.height / (angle / TAU)
  } else {
    pitch = options.pitch ? options.pitch : defaults.pitch
  }

  // needs at least 3 segments for each revolution
  const minNumberOfSegments = 3

  if (segmentsPerRotation < minNumberOfSegments)
    throw new Error(`The number of segments per rotation needs to be at least 3.`)

  let shapeSides = geom2.toSides(geometry)
  if (shapeSides.length === 0) throw new Error('the given geometry cannot be empty')

  // const pointsWithNegativeX = shapeSides.filter((s) => (s[0][0] < 0))
  const pointsWithPositiveX = shapeSides.filter((s) => (s[0][0] >= 0))
  
  let baseSlice = slice.fromSides(shapeSides)
  
  if(pointsWithPositiveX.length === 0) {
    // only points in negative x plane, reverse
    baseSlice = slice.reverse(baseSlice)
  }

  const calculatedSegments = Math.round(segmentsPerRotation / TAU * Math.abs(angle))
  const segments = calculatedSegments >= 2 ? calculatedSegments : 2
  // define transform matrix variables for performance increase
  const step1 = mat4.create()
  let matrix
  const sliceCallback = (progress, index, base) => {
    const zRotation = startAngle + angle / segments * index
    const xOffset = endOffset / segments * index
    const zOffset = (zRotation - startAngle) / TAU * pitch

    // TODO: check for valid geometry after translations
    // ie all the points have to be either x > -xOffset or x < -xOffset
    // this would have to be checked for every transform, and handled
    //
    // not implementing, as this currently doesn't break anything,
    // only creates inside-out polygons

    // create transformation matrix
    mat4.multiply(
      step1,
      // then apply offsets
      mat4.fromTranslation(mat4.create(), [xOffset, 0, zOffset * Math.sign(angle)]),
      // first rotate "flat" 2D shape from XY to XZ plane
      mat4.fromXRotation(mat4.create(), -TAU / 4 * Math.sign(angle)) // rotate the slice correctly to not create inside-out polygon
    )

    matrix = mat4.create()
    mat4.multiply(
      matrix,
      // finally rotate around Z axis
      mat4.fromZRotation(mat4.create(), zRotation),
      step1
    )
    return slice.transform(matrix, base)
  }

  return extrudeFromSlices(
    {
      // "base" slice is counted as segment, so add one for complete final rotation
      numberOfSlices: segments + 1,
      callback: sliceCallback
    },
    baseSlice
  )
}

module.exports = extrudeHelical


/***/ }),

/***/ 90673:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const path2 = __webpack_require__(84345)

const extrudeLinearGeom2 = __webpack_require__(20200)
const extrudeLinearPath2 = __webpack_require__(37235)

/**
 * Extrude the given geometry in an upward linear direction using the given options.
 * Accepts path2 or geom2 objects as input. Paths must be closed.
 *
 * @param {Object} options - options for extrude
 * @param {Number} [options.height=1] the height of the extrusion
 * @param {Number} [options.twistAngle=0] the final rotation (RADIANS) about the origin of the shape (if any)
 * @param {Integer} [options.twistSteps=1] the resolution of the twist about the axis (if any)
 * @param {...Object} objects - the geometries to extrude
 * @return {Object|Array} the extruded geometry, or a list of extruded geometry
 * @alias module:modeling/extrusions.extrudeLinear
 *
 * @example
 * let myshape = extrudeLinear({height: 10}, rectangle({size: [20, 25]}))
 */
const extrudeLinear = (options, ...objects) => {
  const defaults = {
    height: 1,
    twistAngle: 0,
    twistSteps: 1,
    repair: true
  }
  const { height, twistAngle, twistSteps, repair } = Object.assign({ }, defaults, options)

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  options = { offset: [0, 0, height], twistAngle, twistSteps, repair }

  const results = objects.map((object) => {
    if (path2.isA(object)) return extrudeLinearPath2(options, object)
    if (geom2.isA(object)) return extrudeLinearGeom2(options, object)
    // if (geom3.isA(object)) return geom3.extrude(options, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = extrudeLinear


/***/ }),

/***/ 20200:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec3 = __webpack_require__(14171)

const geom2 = __webpack_require__(88934)

const slice = __webpack_require__(54438)

const extrudeFromSlices = __webpack_require__(95529)

/*
 * Extrude the given geometry using the given options.
 *
 * @param {Object} [options] - options for extrude
 * @param {Array} [options.offset] - the direction of the extrusion as a 3D vector
 * @param {Number} [options.twistAngle] - the final rotation (RADIANS) about the origin
 * @param {Integer} [options.twistSteps] - the number of steps created to produce the twist (if any)
 * @param {Boolean} [options.repair] - repair gaps in the geometry
 * @param {geom2} geometry - the geometry to extrude
 * @returns {geom3} the extruded 3D geometry
*/
const extrudeGeom2 = (options, geometry) => {
  const defaults = {
    offset: [0, 0, 1],
    twistAngle: 0,
    twistSteps: 12,
    repair: true
  }
  let { offset, twistAngle, twistSteps, repair } = Object.assign({ }, defaults, options)

  if (twistSteps < 1) throw new Error('twistSteps must be 1 or more')

  if (twistAngle === 0) {
    twistSteps = 1
  }

  // convert to vector in order to perform transforms
  const offsetv = vec3.clone(offset)

  const baseSides = geom2.toSides(geometry)
  if (baseSides.length === 0) throw new Error('the given geometry cannot be empty')

  const baseSlice = slice.fromSides(baseSides)
  if (offsetv[2] < 0) slice.reverse(baseSlice, baseSlice)

  const matrix = mat4.create()
  const createTwist = (progress, index, base) => {
    const Zrotation = index / twistSteps * twistAngle
    const Zoffset = vec3.scale(vec3.create(), offsetv, index / twistSteps)
    mat4.multiply(matrix, mat4.fromZRotation(matrix, Zrotation), mat4.fromTranslation(mat4.create(), Zoffset))

    return slice.transform(matrix, base)
  }

  options = {
    numberOfSlices: twistSteps + 1,
    capStart: true,
    capEnd: true,
    repair,
    callback: createTwist
  }
  return extrudeFromSlices(options, baseSlice)
}

module.exports = extrudeGeom2


/***/ }),

/***/ 37235:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom2 = __webpack_require__(88934)
const path2 = __webpack_require__(84345)

const extrudeLinearGeom2 = __webpack_require__(20200)

/*
 * Extrude the given geometry using the given options.
 *
 * @param {Object} [options] - options for extrude
 * @param {Array} [options.offset] - the direction of the extrusion as a 3D vector
 * @param {Number} [options.twistAngle] - the final rotation (RADIANS) about the origin
 * @param {Integer} [options.twistSteps] - the number of steps created to produce the twist (if any)
 * @param {path2} geometry - the geometry to extrude
 * @returns {geom3} the extruded 3D geometry
*/
const extrudePath2 = (options, geometry) => {
  if (!geometry.isClosed) throw new Error('extruded path must be closed')
  // Convert path2 to geom2
  const points = path2.toPoints(geometry)
  const geometry2 = geom2.fromPoints(points)
  return extrudeLinearGeom2(options, geometry2)
}

module.exports = extrudePath2


/***/ }),

/***/ 21714:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const path2 = __webpack_require__(84345)

const extrudeRectangularPath2 = __webpack_require__(12640)
const extrudeRectangularGeom2 = __webpack_require__(59493)

/**
 * Extrude the given geometry by following the outline(s) with a rectangle.
 * @See expand for addition options
 * @param {Object} options - options for extrusion, if any
 * @param {Number} [options.size=1] - size of the rectangle
 * @param {Number} [options.height=1] - height of the extrusion
 * @param {...Object} objects - the geometries to extrude
 * @return {Object|Array} the extruded object, or a list of extruded objects
 * @alias module:modeling/extrusions.extrudeRectangular
 *
 * @example
 * let mywalls = extrudeRectangular({size: 1, height: 3}, square({size: 20}))
 * let mywalls = extrudeRectangular({size: 1, height: 300, twistAngle: TAU / 2}, square({size: 20}))
 */
const extrudeRectangular = (options, ...objects) => {
  const defaults = {
    size: 1,
    height: 1
  }
  const { size, height } = Object.assign({}, defaults, options)

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  if (size <= 0) throw new Error('size must be positive')
  if (height <= 0) throw new Error('height must be positive')

  const results = objects.map((object) => {
    if (path2.isA(object)) return extrudeRectangularPath2(options, object)
    if (geom2.isA(object)) return extrudeRectangularGeom2(options, object)
    // if (geom3.isA(object)) return geom3.transform(matrix, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = extrudeRectangular


/***/ }),

/***/ 59493:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { area } = __webpack_require__(98589)

const geom2 = __webpack_require__(88934)
const path2 = __webpack_require__(84345)

const expand = __webpack_require__(18912)

const extrudeLinearGeom2 = __webpack_require__(20200)

/*
 * Expand and extrude the given geometry (geom2).
 * @see expand for additional options
 * @param {Object} options - options for extrusion, if any
 * @param {Number} [options.size=1] - size of the rectangle
 * @param {Number} [options.height=1] - height of the extrusion
 * @param {geom2} geometry - the geometry to extrude
 * @return {geom3} the extruded geometry
 */
const extrudeRectangularGeom2 = (options, geometry) => {
  const defaults = {
    size: 1,
    height: 1
  }
  const { size, height } = Object.assign({ }, defaults, options)

  options.delta = size
  options.offset = [0, 0, height]

  // convert the geometry to outlines
  const outlines = geom2.toOutlines(geometry)
  if (outlines.length === 0) throw new Error('the given geometry cannot be empty')

  // expand the outlines
  const newparts = outlines.map((outline) => {
    if (area(outline) < 0) outline.reverse() // all outlines must wind counter clockwise
    return expand(options, path2.fromPoints({ closed: true }, outline))
  })

  // create a composite geometry
  const allsides = newparts.reduce((sides, part) => sides.concat(geom2.toSides(part)), [])
  const newgeometry = geom2.create(allsides)

  return extrudeLinearGeom2(options, newgeometry)
}

module.exports = extrudeRectangularGeom2


/***/ }),

/***/ 12640:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const path2 = __webpack_require__(84345)

const expand = __webpack_require__(18912)

const extrudeLinearGeom2 = __webpack_require__(20200)

/*
 * Expand and extrude the given geometry (path2).
 * @See expand for addition options
 * @param {Object} options - options for extrusion, if any
 * @param {Number} [options.size=1] - size of the rectangle
 * @param {Number} [options.height=1] - height of the extrusion
 * @param {path2} geometry - the geometry to extrude
 * @return {geom3} the extruded geometry
 */
const extrudeRectangularPath2 = (options, geometry) => {
  const defaults = {
    size: 1,
    height: 1
  }
  const { size, height } = Object.assign({ }, defaults, options)

  options.delta = size
  options.offset = [0, 0, height]

  const points = path2.toPoints(geometry)
  if (points.length === 0) throw new Error('the given geometry cannot be empty')

  const newgeometry = expand(options, geometry)
  return extrudeLinearGeom2(options, newgeometry)
}

module.exports = extrudeRectangularPath2


/***/ }),

/***/ 38565:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)
const mat4 = __webpack_require__(36028)

const { mirrorX } = __webpack_require__(59199)

const geom2 = __webpack_require__(88934)

const slice = __webpack_require__(54438)

const extrudeFromSlices = __webpack_require__(95529)

/**
 * Rotate extrude the given geometry using the given options.
 *
 * @param {Object} options - options for extrusion
 * @param {Number} [options.angle=TAU] - angle of the extrusion (RADIANS)
 * @param {Number} [options.startAngle=0] - start angle of the extrusion (RADIANS)
 * @param {String} [options.overflow='cap'] - what to do with points outside of bounds (+ / - x) :
 * defaults to capping those points to 0 (only supported behaviour for now)
 * @param {Number} [options.segments=12] - number of segments of the extrusion
 * @param {geom2} geometry - the geometry to extrude
 * @returns {geom3} the extruded geometry
 * @alias module:modeling/extrusions.extrudeRotate
 *
 * @example
 * const myshape = extrudeRotate({segments: 8, angle: TAU / 2}, circle({size: 3, center: [4, 0]}))
 */
const extrudeRotate = (options, geometry) => {
  const defaults = {
    segments: 12,
    startAngle: 0,
    angle: TAU,
    overflow: 'cap'
  }
  let { segments, startAngle, angle, overflow } = Object.assign({}, defaults, options)

  if (segments < 3) throw new Error('segments must be greater then 3')

  startAngle = Math.abs(startAngle) > TAU ? startAngle % TAU : startAngle
  angle = Math.abs(angle) > TAU ? angle % TAU : angle

  let endAngle = startAngle + angle
  endAngle = Math.abs(endAngle) > TAU ? endAngle % TAU : endAngle

  if (endAngle < startAngle) {
    const x = startAngle
    startAngle = endAngle
    endAngle = x
  }
  let totalRotation = endAngle - startAngle
  if (totalRotation <= 0.0) totalRotation = TAU

  if (Math.abs(totalRotation) < TAU) {
    // adjust the segments to achieve the total rotation requested
    const anglePerSegment = TAU / segments
    segments = Math.floor(Math.abs(totalRotation) / anglePerSegment)
    if (Math.abs(totalRotation) > (segments * anglePerSegment)) segments++
  }

  // console.log('startAngle: '+startAngle)
  // console.log('endAngle: '+endAngle)
  // console.log(totalRotation)
  // console.log(segments)

  // convert geometry to an array of sides, easier to deal with
  let shapeSides = geom2.toSides(geometry)
  if (shapeSides.length === 0) throw new Error('the given geometry cannot be empty')

  // determine if the rotate extrude can be computed in the first place
  // ie all the points have to be either x > 0 or x < 0

  // generic solution to always have a valid solid, even if points go beyond x/ -x
  // 1. split points up between all those on the 'left' side of the axis (x<0) & those on the 'righ' (x>0)
  // 2. for each set of points do the extrusion operation IN OPOSITE DIRECTIONS
  // 3. union the two resulting solids

  // 1. alt : OR : just cap of points at the axis ?

  const pointsWithNegativeX = shapeSides.filter((s) => (s[0][0] < 0))
  const pointsWithPositiveX = shapeSides.filter((s) => (s[0][0] >= 0))
  const arePointsWithNegAndPosX = pointsWithNegativeX.length > 0 && pointsWithPositiveX.length > 0

  // FIXME actually there are cases where setting X=0 will change the basic shape
  // - Alternative #1 : don't allow shapes with both negative and positive X values
  // - Alternative #2 : remove one half of the shape (costly)
  if (arePointsWithNegAndPosX && overflow === 'cap') {
    if (pointsWithNegativeX.length > pointsWithPositiveX.length) {
      shapeSides = shapeSides.map((side) => {
        let point0 = side[0]
        let point1 = side[1]
        point0 = [Math.min(point0[0], 0), point0[1]]
        point1 = [Math.min(point1[0], 0), point1[1]]
        return [point0, point1]
      })
      // recreate the geometry from the (-) capped points
      geometry = geom2.reverse(geom2.create(shapeSides))
      geometry = mirrorX(geometry)
    } else if (pointsWithPositiveX.length >= pointsWithNegativeX.length) {
      shapeSides = shapeSides.map((side) => {
        let point0 = side[0]
        let point1 = side[1]
        point0 = [Math.max(point0[0], 0), point0[1]]
        point1 = [Math.max(point1[0], 0), point1[1]]
        return [point0, point1]
      })
      // recreate the geometry from the (+) capped points
      geometry = geom2.create(shapeSides)
    }
  }

  const rotationPerSlice = totalRotation / segments
  const isCapped = Math.abs(totalRotation) < TAU
  const baseSlice = slice.fromSides(geom2.toSides(geometry))
  slice.reverse(baseSlice, baseSlice)

  const matrix = mat4.create()
  const createSlice = (progress, index, base) => {
    let Zrotation = rotationPerSlice * index + startAngle
    // fix rounding error when rotating TAU radians
    if (totalRotation === TAU && index === segments) {
      Zrotation = startAngle
    }
    mat4.multiply(matrix, mat4.fromZRotation(matrix, Zrotation), mat4.fromXRotation(mat4.create(), TAU / 4))

    return slice.transform(matrix, base)
  }

  options = {
    numberOfSlices: segments + 1,
    capStart: isCapped,
    capEnd: isCapped,
    close: !isCapped,
    callback: createSlice
  }
  return extrudeFromSlices(options, baseSlice)
}

module.exports = extrudeRotate


/***/ }),

/***/ 80116:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)
const vec3 = __webpack_require__(14171)

const poly3 = __webpack_require__(71516)

const slice = __webpack_require__(54438)

// https://en.wikipedia.org/wiki/Greatest_common_divisor#Using_Euclid's_algorithm
const gcd = (a, b) => {
  if (a === b) { return a }
  if (a < b) { return gcd(b, a) }
  if (b === 1) { return 1 }
  if (b === 0) { return a }
  return gcd(b, a % b)
}

const lcm = (a, b) => (a * b) / gcd(a, b)

// Return a set of edges that encloses the same area by splitting
// the given edges to have newlength total edges.
const repartitionEdges = (newlength, edges) => {
  // NOTE: This implementation splits each edge evenly.
  const multiple = newlength / edges.length
  if (multiple === 1) {
    return edges
  }

  const divisor = vec3.fromValues(multiple, multiple, multiple)

  const newEdges = []
  edges.forEach((edge) => {
    const increment = vec3.subtract(vec3.create(), edge[1], edge[0])
    vec3.divide(increment, increment, divisor)

    // repartition the edge
    let prev = edge[0]
    for (let i = 1; i <= multiple; ++i) {
      const next = vec3.add(vec3.create(), prev, increment)
      newEdges.push([prev, next])
      prev = next
    }
  })
  return newEdges
}

const EPSAREA = (EPS * EPS / 2) * Math.sin(Math.PI / 3)

/*
 * Extrude (build) walls between the given slices.
 * Each wall consists of two triangles, which may be invalid if slices are overlapping.
 */
const extrudeWalls = (slice0, slice1) => {
  let edges0 = slice.toEdges(slice0)
  let edges1 = slice.toEdges(slice1)

  if (edges0.length !== edges1.length) {
    // different shapes, so adjust one or both to the same number of edges
    const newlength = lcm(edges0.length, edges1.length)
    if (newlength !== edges0.length) edges0 = repartitionEdges(newlength, edges0)
    if (newlength !== edges1.length) edges1 = repartitionEdges(newlength, edges1)
  }

  const walls = []
  edges0.forEach((edge0, i) => {
    const edge1 = edges1[i]

    const poly0 = poly3.create([edge0[0], edge0[1], edge1[1]])
    const poly0area = poly3.measureArea(poly0)
    if (Number.isFinite(poly0area) && poly0area > EPSAREA) walls.push(poly0)

    const poly1 = poly3.create([edge0[0], edge1[1], edge1[0]])
    const poly1area = poly3.measureArea(poly1)
    if (Number.isFinite(poly1area) && poly1area > EPSAREA) walls.push(poly1)
  })
  return walls
}

module.exports = extrudeWalls


/***/ }),

/***/ 92268:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All 2D shapes (primitives or the results of operations) can be extruded in various ways.
 * In all cases, the function returns the results, and never changes the original shapes.
 * @module modeling/extrusions
 * @example
 * const { extrudeLinear, extrudeRectangular, extrudeRotate } = require('@jscad/modeling').extrusions
 */
module.exports = {
  extrudeFromSlices: __webpack_require__(95529),
  extrudeLinear: __webpack_require__(90673),
  extrudeRectangular: __webpack_require__(21714),
  extrudeRotate: __webpack_require__(38565),
  extrudeHelical: __webpack_require__(65344),
  project: __webpack_require__(74550),
  slice: __webpack_require__(54438)
}


/***/ }),

/***/ 74550:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const aboutEqualNormals = __webpack_require__(64364)
const plane = __webpack_require__(68646)
const mat4 = __webpack_require__(36028)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const measureEpsilon = __webpack_require__(85768)

const unionGeom2 = __webpack_require__(53364)

const projectGeom3 = (options, geometry) => {
  // create a plane from the options, and verify
  const projplane = plane.fromNormalAndPoint(plane.create(), options.axis, options.origin)
  if (Number.isNaN(projplane[0]) || Number.isNaN(projplane[1]) || Number.isNaN(projplane[2]) || Number.isNaN(projplane[3])) {
    throw new Error('project: invalid axis or origin')
  }

  const epsilon = measureEpsilon(geometry)
  const epsilonArea = (epsilon * epsilon * Math.sqrt(3) / 4)

  if (epsilon === 0) return geom2.create()

  // project the polygons to the plane
  const polygons = geom3.toPolygons(geometry)
  let projpolys = []
  for (let i = 0; i < polygons.length; i++) {
    const newpoints = polygons[i].vertices.map((v) => plane.projectionOfPoint(projplane, v))
    const newpoly = poly3.create(newpoints)
    // only keep projections that face the same direction as the plane
    const newplane = poly3.plane(newpoly)
    if (!aboutEqualNormals(projplane, newplane)) continue
    // only keep projections that have a measurable area
    if (poly3.measureArea(newpoly) < epsilonArea) continue
    projpolys.push(newpoly)
  }

  // rotate the polygons to lay on X/Y axes if necessary
  if (!aboutEqualNormals(projplane, [0, 0, 1])) {
    const rotation = mat4.fromVectorRotation(mat4.create(), projplane, [0, 0, 1])
    projpolys = projpolys.map((p) => poly3.transform(rotation, p))
  }

  // sort the polygons to allow the union to ignore small pieces efficiently
  projpolys = projpolys.sort((a, b) => poly3.measureArea(b) - poly3.measureArea(a))

  // convert polygons to geometry, and union all pieces into a single geometry
  const projgeoms = projpolys.map((p) => geom2.fromPoints(p.vertices))
  return unionGeom2(projgeoms)
}

/**
 * Project the given 3D geometry on to the given plane.
 * @param {Object} options - options for project
 * @param {Array} [options.axis=[0,0,1]] the axis of the plane (default is Z axis)
 * @param {Array} [options.origin=[0,0,0]] the origin of the plane
 * @param {...Object} objects - the list of 3D geometry to project
 * @return {geom2|Array} the projected 2D geometry, or a list of 2D projected geometry
 * @alias module:modeling/extrusions.project
 *
 * @example
 * let myshape = project({}, sphere({radius: 20, segments: 5}))
 */
const project = (options, ...objects) => {
  const defaults = {
    axis: [0, 0, 1], // Z axis
    origin: [0, 0, 0]
  }
  const { axis, origin } = Object.assign({ }, defaults, options)

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  options = { axis, origin }

  const results = objects.map((object) => {
    // if (path.isA(object)) return project(options, object)
    // if (geom2.isA(object)) return project(options, object)
    if (geom3.isA(object)) return projectGeom3(options, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = project


/***/ }),

/***/ 94698:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const plane = __webpack_require__(68646)
const vec3 = __webpack_require__(14171)

/**
 * Calculate the plane of the given slice.
 * NOTE: The slice (and all points) are assumed to be planar from the beginning.
 * @param {slice} slice - the slice
 * @returns {plane} the plane of the slice
 * @alias module:modeling/extrusions/slice.calculatePlane
 *
 * @example
 * let myplane = calculatePlane(slice)
 */
const calculatePlane = (slice) => {
  const edges = slice.edges
  if (edges.length < 3) throw new Error('slices must have 3 or more edges to calculate a plane')

  // find the midpoint of the slice, which will lie on the plane by definition
  const midpoint = edges.reduce((point, edge) => vec3.add(vec3.create(), point, edge[0]), vec3.create())
  vec3.scale(midpoint, midpoint, 1 / edges.length)

  // find the farthest edge from the midpoint, which will be on an outside edge
  let farthestEdge
  let distance = 0
  edges.forEach((edge) => {
    // Make sure that the farthest edge is not a self-edge
    if (!vec3.equals(edge[0], edge[1])) {
      const d = vec3.squaredDistance(midpoint, edge[0])
      if (d > distance) {
        farthestEdge = edge
        distance = d
      }
    }
  })
  // find the before edge
  const beforeEdge = edges.find((edge) => vec3.equals(edge[1], farthestEdge[0]))

  return plane.fromPoints(plane.create(), beforeEdge[0], farthestEdge[0], farthestEdge[1])
}

module.exports = calculatePlane


/***/ }),

/***/ 68175:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(10062)

const vec3 = __webpack_require__(14171)

/**
 * Create a deep clone of the given slice.
 *
 * @param {slice} [out] - receiving slice
 * @param {slice} slice - slice to clone
 * @returns {slice} a new slice
 * @alias module:modeling/extrusions/slice.clone
 */
const clone = (...params) => {
  let out
  let slice
  if (params.length === 1) {
    out = create()
    slice = params[0]
  } else {
    out = params[0]
    slice = params[1]
  }
  // deep clone of edges
  out.edges = slice.edges.map((edge) => [vec3.clone(edge[0]), vec3.clone(edge[1])])
  return out
}

module.exports = clone


/***/ }),

/***/ 10062:
/***/ ((module) => {

/**
 * Represents a 3D geometry consisting of a list of edges.
 * @typedef {Object} slice
 * @property {Array} edges - list of edges, each edge containing two points (3D)
 */

/**
 * Creates a new empty slice.
 *
 * @returns {slice} a new slice
 * @alias module:modeling/extrusions/slice.create
 */
const create = (edges) => {
  if (!edges) {
    edges = []
  }
  return { edges }
}

module.exports = create


/***/ }),

/***/ 74705:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

/**
 * Determine if the given slices have the same edges.
 * @param {slice} a - the first slice to compare
 * @param {slice} b - the second slice to compare
 * @returns {Boolean} true if the slices are equal
 * @alias module:modeling/extrusions/slice.equals
 */
const equals = (a, b) => {
  const aedges = a.edges
  const bedges = b.edges

  if (aedges.length !== bedges.length) {
    return false
  }

  const isEqual = aedges.reduce((acc, aedge, i) => {
    const bedge = bedges[i]
    const d = vec3.squaredDistance(aedge[0], bedge[0])
    return acc && (d < Number.EPSILON)
  }, true)

  return isEqual
}

module.exports = equals


/***/ }),

/***/ 80203:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const create = __webpack_require__(10062)

/**
 * Create a slice from the given points.
 *
 * @param {Array} points - list of points, where each point is either 2D or 3D
 * @returns {slice} a new slice
 * @alias module:modeling/extrusions/slice.fromPoints
 *
 * @example
 * const points = [
 *   [0,  0],
 *   [0, 10],
 *   [0, 10]
 * ]
 * const slice = fromPoints(points)
 */
const fromPoints = (points) => {
  if (!Array.isArray(points)) throw new Error('the given points must be an array')
  if (points.length < 3) throw new Error('the given points must contain THREE or more points')

  // create a list of edges from the points
  const edges = []
  let prevpoint = points[points.length - 1]
  points.forEach((point) => {
    if (point.length === 2) edges.push([vec3.fromVec2(vec3.create(), prevpoint), vec3.fromVec2(vec3.create(), point)])
    if (point.length === 3) edges.push([prevpoint, point])
    prevpoint = point
  })
  return create(edges)
}

module.exports = fromPoints


/***/ }),

/***/ 75878:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const create = __webpack_require__(10062)

/**
 * Create a slice from the given sides (see geom2).
 *
 * @param {Array} sides - list of sides from geom2
 * @returns {slice} a new slice
 * @alias module:modeling/extrusions/slice.fromSides
 *
 * @example
 * const myshape = circle({radius: 10})
 * const slice = fromSides(geom2.toSides(myshape))
 */
const fromSides = (sides) => {
  if (!Array.isArray(sides)) throw new Error('the given sides must be an array')

  // create a list of edges from the sides
  const edges = []
  sides.forEach((side) => {
    edges.push([vec3.fromVec2(vec3.create(), side[0]), vec3.fromVec2(vec3.create(), side[1])])
  })
  return create(edges)
}

module.exports = fromSides


/***/ }),

/***/ 54438:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Represents a 3D geometry consisting of a list of edges.
 * @see {@link slice} for data structure information.
 * @module modeling/extrusions/slice
 */
module.exports = {
  calculatePlane: __webpack_require__(94698),
  clone: __webpack_require__(68175),
  create: __webpack_require__(10062),
  equals: __webpack_require__(74705),
  fromPoints: __webpack_require__(80203),
  fromSides: __webpack_require__(75878),
  isA: __webpack_require__(52046),
  reverse: __webpack_require__(2980),
  toEdges: __webpack_require__(20284),
  toPolygons: __webpack_require__(35015),
  toString: __webpack_require__(87494),
  transform: __webpack_require__(73975)
}


/***/ }),

/***/ 52046:
/***/ ((module) => {

/**
 * Determine if the given object is a slice.
 * @param {slice} object - the object to interrogate
 * @returns {Boolean} true if the object matches a slice
 * @alias module:modeling/extrusions/slice.isA
 */
const isA = (object) => {
  if (object && typeof object === 'object') {
    if ('edges' in object) {
      if (Array.isArray(object.edges)) {
        return true
      }
    }
  }
  return false
}

module.exports = isA


/***/ }),

/***/ 95020:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)
const create = __webpack_require__(10062)

/*
 * Mend gaps in a 2D slice to make it a closed polygon
 */
const repair = (slice) => {
  if (!slice.edges) return slice
  let edges = slice.edges
  const vertexMap = new Map() // string key to vertex map
  const edgeCount = new Map() // count of (in - out) edges

  // Remove self-edges
  edges = edges.filter((e) => !vec3.equals(e[0], e[1]))

  // build vertex and edge count maps
  edges.forEach((edge) => {
    const inKey = edge[0].toString()
    const outKey = edge[1].toString()
    vertexMap.set(inKey, edge[0])
    vertexMap.set(outKey, edge[1])
    edgeCount.set(inKey, (edgeCount.get(inKey) || 0) + 1) // in
    edgeCount.set(outKey, (edgeCount.get(outKey) || 0) - 1) // out
  })

  // find vertices which are missing in or out edges
  const missingIn = []
  const missingOut = []
  edgeCount.forEach((count, vertex) => {
    if (count < 0) missingIn.push(vertex)
    if (count > 0) missingOut.push(vertex)
  })

  // pairwise distance of bad vertices
  missingIn.forEach((key1) => {
    const v1 = vertexMap.get(key1)

    // find the closest vertex that is missing an out edge
    let bestDistance = Infinity
    let bestReplacement
    missingOut.forEach((key2) => {
      const v2 = vertexMap.get(key2)
      const distance = vec3.distance(v1, v2)
      if (distance < bestDistance) {
        bestDistance = distance
        bestReplacement = v2
      }
    })
    console.warn(`slice.repair: repairing vertex gap ${v1} to ${bestReplacement} distance ${bestDistance}`)

    // merge broken vertices
    edges = edges.map((edge) => {
      if (edge[0].toString() === key1) return [bestReplacement, edge[1]]
      if (edge[1].toString() === key1) return [edge[0], bestReplacement]
      return edge
    })
  })

  return create(edges)
}

module.exports = repair


/***/ }),

/***/ 2980:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const create = __webpack_require__(10062)

/**
 * Reverse the edges of the given slice.
 *
 * @param {slice} [out] - receiving slice
 * @param {slice} slice - slice to reverse
 * @returns {slice} reverse of the slice
 * @alias module:modeling/extrusions/slice.reverse
 */
const reverse = (...params) => {
  let out
  let slice
  if (params.length === 1) {
    out = create()
    slice = params[0]
  } else {
    out = params[0]
    slice = params[1]
  }
  // reverse the edges
  out.edges = slice.edges.map((edge) => [edge[1], edge[0]])
  return out
}

module.exports = reverse


/***/ }),

/***/ 20284:
/***/ ((module) => {

/**
 * Produces an array of edges from the given slice.
 * The returned array should not be modified as the data is shared with the slice.
 * @param {slice} slice - the slice
 * @returns {Array} an array of edges, each edge contains an array of two points (3D)
 * @alias module:modeling/extrusions/slice.toEdges
 *
 * @example
 * let sharededges = toEdges(slice)
 */
const toEdges = (slice) => slice.edges

module.exports = toEdges


/***/ }),

/***/ 35015:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const poly3 = __webpack_require__(71516)
const earcut = __webpack_require__(46196)
const PolygonHierarchy = __webpack_require__(23885)

/**
 * Return a list of polygons which are enclosed by the slice.
 * @param {slice} slice - the slice
 * @return {Array} a list of polygons (3D)
 * @alias module:modeling/extrusions/slice.toPolygons
 */
const toPolygons = (slice) => {
  const hierarchy = new PolygonHierarchy(slice)

  const polygons = []
  hierarchy.roots.forEach(({ solid, holes }) => {
    // hole indices
    let index = solid.length
    const holesIndex = []
    holes.forEach((hole, i) => {
      holesIndex.push(index)
      index += hole.length
    })

    // compute earcut triangulation for each solid
    const vertices = [solid, ...holes].flat()
    const data = vertices.flat()
    // Get original 3D vertex by index
    const getVertex = (i) => hierarchy.to3D(vertices[i])
    const indices = earcut(data, holesIndex)
    for (let i = 0; i < indices.length; i += 3) {
      // Map back to original vertices
      const tri = indices.slice(i, i + 3).map(getVertex)
      polygons.push(poly3.fromPointsAndPlane(tri, hierarchy.plane))
    }
  })

  return polygons
}

module.exports = toPolygons


/***/ }),

/***/ 87494:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const edgesToString = (edges) =>
  edges.reduce((result, edge) => (
    result += `[${vec3.toString(edge[0])}, ${vec3.toString(edge[1])}], `
  ), '')

/**
 * @param {slice} slice - the slice
 * @return {String} the string representation
 * @alias module:modeling/extrusions/slice.toString
 */
const toString = (slice) => `[${edgesToString(slice.edges)}]`

module.exports = toString


/***/ }),

/***/ 73975:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const create = __webpack_require__(10062)

/**
 * Transform the given slice using the given matrix.
 * @param {mat4} matrix - transform matrix
 * @param {slice} slice - slice to transform
 * @returns {slice} the transformed slice
 * @alias module:modeling/extrusions/slice.transform
 *
 * @example
 * let matrix = mat4.fromTranslation([1, 2, 3])
 * let newslice = transform(matrix, oldslice)
 */
const transform = (matrix, slice) => {
  const edges = slice.edges.map((edge) => [vec3.transform(vec3.create(), edge[0], matrix), vec3.transform(vec3.create(), edge[1], matrix)])
  return create(edges)
}

module.exports = transform


/***/ }),

/***/ 47452:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const areAllShapesTheSameType = __webpack_require__(33486)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

const hullPath2 = __webpack_require__(16709)
const hullGeom2 = __webpack_require__(18332)
const hullGeom3 = __webpack_require__(71832)

/**
 * Create a convex hull of the given geometries.
 * The given geometries should be of the same type, either geom2 or geom3 or path2.
 * @param {...Objects} geometries - list of geometries from which to create a hull
 * @returns {geom2|geom3} new geometry
 * @alias module:modeling/hulls.hull
 *
 * @example
 * let myshape = hull(rectangle({center: [-5,-5]}), ellipse({center: [5,5]}))
 *
 * @example
 * +-------+           +-------+
 * |       |           |        \
 * |   A   |           |         \
 * |       |           |          \
 * +-------+           +           \
 *                  =   \           \
 *       +-------+       \           +
 *       |       |        \          |
 *       |   B   |         \         |
 *       |       |          \        |
 *       +-------+           +-------+
 */
const hull = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  if (!areAllShapesTheSameType(geometries)) {
    throw new Error('only hulls of the same type are supported')
  }

  const geometry = geometries[0]
  if (path2.isA(geometry)) return hullPath2(geometries)
  if (geom2.isA(geometry)) return hullGeom2(geometries)
  if (geom3.isA(geometry)) return hullGeom3(geometries)

  // FIXME should this throw an error for unknown geometries?
  return geometry
}

module.exports = hull


/***/ }),

/***/ 90436:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const union = __webpack_require__(52650)

const hull = __webpack_require__(47452)

/**
 * Create a chain of hulled geometries from the given geometries.
 * Essentially hull A+B, B+C, C+D, etc., then union the results.
 * The given geometries should be of the same type, either geom2 or geom3 or path2.
 *
 * @param {...Objects} geometries - list of geometries from which to create a hull
 * @returns {geom2|geom3} new geometry
 * @alias module:modeling/hulls.hullChain
 *
 * @example
 * let newshape = hullChain(rectangle({center: [-5,-5]}), circle({center: [0,0]}), rectangle({center: [5,5]}))
 *
 * @example
 * +-------+   +-------+     +-------+   +------+
 * |       |   |       |     |        \ /       |
 * |   A   |   |   C   |     |         |        |
 * |       |   |       |     |                  |
 * +-------+   +-------+     +                  +
 *                       =   \                 /
 *       +-------+            \               /
 *       |       |             \             /
 *       |   B   |              \           /
 *       |       |               \         /
 *       +-------+                +-------+
 */
const hullChain = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length < 2) throw new Error('wrong number of arguments')

  const hulls = []
  for (let i = 1; i < geometries.length; i++) {
    hulls.push(hull(geometries[i - 1], geometries[i]))
  }
  return union(hulls)
}

module.exports = hullChain


/***/ }),

/***/ 18332:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)

const hullPoints2 = __webpack_require__(19885)
const toUniquePoints = __webpack_require__(2525)

/*
 * Create a convex hull of the given geom2 geometries.
 * @param {...geometries} geometries - list of geom2 geometries
 * @returns {geom2} new geometry
 */
const hullGeom2 = (...geometries) => {
  geometries = flatten(geometries)

  // extract the unique points from the geometries
  const unique = toUniquePoints(geometries)

  const hullPoints = hullPoints2(unique)

  // NOTE: more than three points are required to create a new geometry
  if (hullPoints.length < 3) return geom2.create()

  // assemble a new geometry from the list of points
  return geom2.fromPoints(hullPoints)
}

module.exports = hullGeom2


/***/ }),

/***/ 71832:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const quickhull = __webpack_require__(76345)
const toUniquePoints = __webpack_require__(2525)

/*
 * Create a convex hull of the given geometries (geom3).
 * @param {...geometries} geometries - list of geom3 geometries
 * @returns {geom3} new geometry
 */
const hullGeom3 = (...geometries) => {
  geometries = flatten(geometries)

  if (geometries.length === 1) return geometries[0]

  // extract the unique vertices from the geometries
  const unique = toUniquePoints(geometries)

  const faces = quickhull(unique, { skipTriangulation: true })

  const polygons = faces.map((face) => {
    const vertices = face.map((index) => unique[index])
    return poly3.create(vertices)
  })

  return geom3.create(polygons)
}

module.exports = hullGeom3


/***/ }),

/***/ 16709:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const path2 = __webpack_require__(84345)

const hullPoints2 = __webpack_require__(19885)
const toUniquePoints = __webpack_require__(2525)

/*
 * Create a convex hull of the given geometries (path2).
 * @param {...geometries} geometries - list of path2 geometries
 * @returns {path2} new geometry
 */
const hullPath2 = (...geometries) => {
  geometries = flatten(geometries)

  // extract the unique points from the geometries
  const unique = toUniquePoints(geometries)

  const hullPoints = hullPoints2(unique)

  // assemble a new geometry from the list of points
  return path2.fromPoints({ closed: true }, hullPoints)
}

module.exports = hullPath2


/***/ }),

/***/ 19885:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

/*
 * Create a convex hull of the given set of points, where each point is an array of [x,y].
 * Uses https://en.wikipedia.org/wiki/Graham_scan
 * @param {Array} uniquePoints - list of UNIQUE points from which to create a hull
 * @returns {Array} a list of points that form the hull
 */
const hullPoints2 = (uniquePoints) => {
  // find min point
  let min = vec2.fromValues(Infinity, Infinity)
  uniquePoints.forEach((point) => {
    if (point[1] < min[1] || (point[1] === min[1] && point[0] < min[0])) {
      min = point
    }
  })

  // gather information for sorting by polar coordinates (point, angle, distSq)
  const points = []
  uniquePoints.forEach((point) => {
    // use faster fakeAtan2 instead of Math.atan2
    const angle = fakeAtan2(point[1] - min[1], point[0] - min[0])
    const distSq = vec2.squaredDistance(point, min)
    points.push({ point, angle, distSq })
  })

  // sort by polar coordinates
  points.sort((pt1, pt2) => pt1.angle < pt2.angle ? -1 : pt1.angle > pt2.angle ? 1 :
    pt1.distSq < pt2.distSq ? -1 : pt1.distSq > pt2.distSq ? 1 : 0)

  const stack = [] // start with empty stack
  points.forEach((point) => {
    let cnt = stack.length
    while (cnt > 1 && ccw(stack[cnt - 2], stack[cnt - 1], point.point) <= Number.EPSILON) {
      stack.pop() // get rid of colinear and interior (clockwise) points
      cnt = stack.length
    }
    stack.push(point.point)
  })

  return stack
}

// returns: < 0 clockwise, 0 colinear, > 0 counter-clockwise
const ccw = (v1, v2, v3) => (v2[0] - v1[0]) * (v3[1] - v1[1]) - (v2[1] - v1[1]) * (v3[0] - v1[0])

// Returned "angle" is really 1/tan (inverse of slope) made negative to increase with angle.
// This function is strictly for sorting in this algorithm.
const fakeAtan2 = (y, x) => {
  // The "if" is a special case for when the minimum vector found in loop above is present.
  // We need to ensure that it sorts as the minimum point. Otherwise, this becomes NaN.
  if (y === 0 && x === 0) {
    return -Infinity
  } else {
    return -x / y
  }
}

module.exports = hullPoints2


/***/ }),

/***/ 63534:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All shapes (primitives or the results of operations) can be passed to hull functions
 * to determine the convex hull of all points.
 * In all cases, the function returns the results, and never changes the original shapes.
 * @module modeling/hulls
 * @example
 * const { hull, hullChain } = require('@jscad/modeling').hulls
 */
module.exports = {
  hull: __webpack_require__(47452),
  hullChain: __webpack_require__(90436)
}


/***/ }),

/***/ 6385:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const add = __webpack_require__(90913)
const copy = __webpack_require__(70887)
const cross = __webpack_require__(82344)
const dot = __webpack_require__(11087)
const length = __webpack_require__(57045)
const normalize = __webpack_require__(24319)
const scale = __webpack_require__(33815)
const subtract = __webpack_require__(53824)

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

const HalfEdge = __webpack_require__(26069)

const VISIBLE = 0
const NON_CONVEX = 1
const DELETED = 2

class Face {
  constructor () {
    this.normal = []
    this.centroid = []
    // signed distance from face to the origin
    this.offset = 0
    // pointer to the a vertex in a double linked list this face can see
    this.outside = null
    this.mark = VISIBLE
    this.edge = null
    this.nVertices = 0
  }

  getEdge (i) {
    if (typeof i !== 'number') {
      throw Error('requires a number')
    }
    let it = this.edge
    while (i > 0) {
      it = it.next
      i -= 1
    }
    while (i < 0) {
      it = it.prev
      i += 1
    }
    return it
  }

  computeNormal () {
    const e0 = this.edge
    const e1 = e0.next
    let e2 = e1.next
    const v2 = subtract([], e1.head().point, e0.head().point)
    const t = []
    const v1 = []

    this.nVertices = 2
    this.normal = [0, 0, 0]
    while (e2 !== e0) {
      copy(v1, v2)
      subtract(v2, e2.head().point, e0.head().point)
      add(this.normal, this.normal, cross(t, v1, v2))
      e2 = e2.next
      this.nVertices += 1
    }
    this.area = length(this.normal)
    // normalize the vector, since we've already calculated the area
    // it's cheaper to scale the vector using this quantity instead of
    // doing the same operation again
    this.normal = scale(this.normal, this.normal, 1 / this.area)
  }

  computeNormalMinArea (minArea) {
    this.computeNormal()
    if (this.area < minArea) {
      // compute the normal without the longest edge
      let maxEdge
      let maxSquaredLength = 0
      let edge = this.edge

      // find the longest edge (in length) in the chain of edges
      do {
        const lengthSquared = edge.lengthSquared()
        if (lengthSquared > maxSquaredLength) {
          maxEdge = edge
          maxSquaredLength = lengthSquared
        }
        edge = edge.next
      } while (edge !== this.edge)

      const p1 = maxEdge.tail().point
      const p2 = maxEdge.head().point
      const maxVector = subtract([], p2, p1)
      const maxLength = Math.sqrt(maxSquaredLength)
      // maxVector is normalized after this operation
      scale(maxVector, maxVector, 1 / maxLength)
      // compute the projection of maxVector over this face normal
      const maxProjection = dot(this.normal, maxVector)
      // subtract the quantity maxEdge adds on the normal
      scale(maxVector, maxVector, -maxProjection)
      add(this.normal, this.normal, maxVector)
      // renormalize `this.normal`
      normalize(this.normal, this.normal)
    }
  }

  computeCentroid () {
    this.centroid = [0, 0, 0]
    let edge = this.edge
    do {
      add(this.centroid, this.centroid, edge.head().point)
      edge = edge.next
    } while (edge !== this.edge)
    scale(this.centroid, this.centroid, 1 / this.nVertices)
  }

  computeNormalAndCentroid (minArea) {
    if (typeof minArea !== 'undefined') {
      this.computeNormalMinArea(minArea)
    } else {
      this.computeNormal()
    }
    this.computeCentroid()
    this.offset = dot(this.normal, this.centroid)
  }

  distanceToPlane (point) {
    return dot(this.normal, point) - this.offset
  }

  /**
   * @private
   *
   * Connects two edges assuming that prev.head().point === next.tail().point
   *
   * @param {HalfEdge} prev
   * @param {HalfEdge} next
   */
  connectHalfEdges (prev, next) {
    let discardedFace
    if (prev.opposite.face === next.opposite.face) {
      // `prev` is remove a redundant edge
      const oppositeFace = next.opposite.face
      let oppositeEdge
      if (prev === this.edge) {
        this.edge = next
      }
      if (oppositeFace.nVertices === 3) {
        // case:
        // remove the face on the right
        //
        //       /|\
        //      / | \ the face on the right
        //     /  |  \ --> opposite edge
        //    / a |   \
        //   *----*----*
        //  /     b  |  \
        //           ▾
        //      redundant edge
        //
        // Note: the opposite edge is actually in the face to the right
        // of the face to be destroyed
        oppositeEdge = next.opposite.prev.opposite
        oppositeFace.mark = DELETED
        discardedFace = oppositeFace
      } else {
        // case:
        //          t
        //        *----
        //       /| <- right face's redundant edge
        //      / | opposite edge
        //     /  |  ▴   /
        //    / a |  |  /
        //   *----*----*
        //  /     b  |  \
        //           ▾
        //      redundant edge
        oppositeEdge = next.opposite.next
        // make sure that the link `oppositeFace.edge` points correctly even
        // after the right face redundant edge is removed
        if (oppositeFace.edge === oppositeEdge.prev) {
          oppositeFace.edge = oppositeEdge
        }

        //       /|   /
        //      / | t/opposite edge
        //     /  | / ▴  /
        //    / a |/  | /
        //   *----*----*
        //  /     b     \
        oppositeEdge.prev = oppositeEdge.prev.prev
        oppositeEdge.prev.next = oppositeEdge
      }
      //       /|
      //      / |
      //     /  |
      //    / a |
      //   *----*----*
      //  /     b  ▴  \
      //           |
      //     redundant edge
      next.prev = prev.prev
      next.prev.next = next

      //       / \  \
      //      /   \->\
      //     /     \<-\ opposite edge
      //    / a     \  \
      //   *----*----*
      //  /     b  ^  \
      next.setOpposite(oppositeEdge)

      oppositeFace.computeNormalAndCentroid()
    } else {
      // trivial case
      //        *
      //       /|\
      //      / | \
      //     /  |--> next
      //    / a |   \
      //   *----*----*
      //    \ b |   /
      //     \  |--> prev
      //      \ | /
      //       \|/
      //        *
      prev.next = next
      next.prev = prev
    }
    return discardedFace
  }

  mergeAdjacentFaces (adjacentEdge, discardedFaces) {
    const oppositeEdge = adjacentEdge.opposite
    const oppositeFace = oppositeEdge.face

    discardedFaces.push(oppositeFace)
    oppositeFace.mark = DELETED

    // find the chain of edges whose opposite face is `oppositeFace`
    //
    //                ===>
    //      \         face         /
    //       * ---- * ---- * ---- *
    //      /     opposite face    \
    //                <===
    //
    let adjacentEdgePrev = adjacentEdge.prev
    let adjacentEdgeNext = adjacentEdge.next
    let oppositeEdgePrev = oppositeEdge.prev
    let oppositeEdgeNext = oppositeEdge.next

    // left edge
    while (adjacentEdgePrev.opposite.face === oppositeFace) {
      adjacentEdgePrev = adjacentEdgePrev.prev
      oppositeEdgeNext = oppositeEdgeNext.next
    }
    // right edge
    while (adjacentEdgeNext.opposite.face === oppositeFace) {
      adjacentEdgeNext = adjacentEdgeNext.next
      oppositeEdgePrev = oppositeEdgePrev.prev
    }
    // adjacentEdgePrev  \         face         / adjacentEdgeNext
    //                    * ---- * ---- * ---- *
    // oppositeEdgeNext  /     opposite face    \ oppositeEdgePrev

    // fix the face reference of all the opposite edges that are not part of
    // the edges whose opposite face is not `face` i.e. all the edges that
    // `face` and `oppositeFace` do not have in common
    let edge
    for (edge = oppositeEdgeNext; edge !== oppositeEdgePrev.next; edge = edge.next) {
      edge.face = this
    }

    // make sure that `face.edge` is not one of the edges to be destroyed
    // Note: it's important for it to be a `next` edge since `prev` edges
    // might be destroyed on `connectHalfEdges`
    this.edge = adjacentEdgeNext

    // connect the extremes
    // Note: it might be possible that after connecting the edges a triangular
    // face might be redundant
    let discardedFace
    discardedFace = this.connectHalfEdges(oppositeEdgePrev, adjacentEdgeNext)
    if (discardedFace) {
      discardedFaces.push(discardedFace)
    }
    discardedFace = this.connectHalfEdges(adjacentEdgePrev, oppositeEdgeNext)
    if (discardedFace) {
      discardedFaces.push(discardedFace)
    }

    this.computeNormalAndCentroid()
    // TODO: additional consistency checks
    return discardedFaces
  }

  collectIndices () {
    const indices = []
    let edge = this.edge
    do {
      indices.push(edge.head().index)
      edge = edge.next
    } while (edge !== this.edge)
    return indices
  }

  static createTriangle (v0, v1, v2, minArea = 0) {
    const face = new Face()
    const e0 = new HalfEdge(v0, face)
    const e1 = new HalfEdge(v1, face)
    const e2 = new HalfEdge(v2, face)

    // join edges
    e0.next = e2.prev = e1
    e1.next = e0.prev = e2
    e2.next = e1.prev = e0

    // main half edge reference
    face.edge = e0
    face.computeNormalAndCentroid(minArea)
    return face
  }
}

module.exports = {
  VISIBLE,
  NON_CONVEX,
  DELETED,
  Face
}


/***/ }),

/***/ 26069:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const distance = __webpack_require__(3776)
const squaredDistance = __webpack_require__(51125)

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

class HalfEdge {
  constructor (vertex, face) {
    this.vertex = vertex
    this.face = face
    this.next = null
    this.prev = null
    this.opposite = null
  }

  head () {
    return this.vertex
  }

  tail () {
    return this.prev
      ? this.prev.vertex
      : null
  }

  length () {
    if (this.tail()) {
      return distance(
        this.tail().point,
        this.head().point
      )
    }
    return -1
  }

  lengthSquared () {
    if (this.tail()) {
      return squaredDistance(
        this.tail().point,
        this.head().point
      )
    }
    return -1
  }

  setOpposite (edge) {
    this.opposite = edge
    edge.opposite = this
  }
}

module.exports = HalfEdge


/***/ }),

/***/ 37022:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const dot = __webpack_require__(11087)

const pointLineDistance = __webpack_require__(2431)
const getPlaneNormal = __webpack_require__(84384)

const VertexList = __webpack_require__(26200)
const Vertex = __webpack_require__(29939)
const { Face, VISIBLE, NON_CONVEX, DELETED } = __webpack_require__(6385)

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

// merge types
// non convex with respect to the large face
const MERGE_NON_CONVEX_WRT_LARGER_FACE = 1
const MERGE_NON_CONVEX = 2

class QuickHull {
  constructor (points) {
    if (!Array.isArray(points)) {
      throw TypeError('input is not a valid array')
    }
    if (points.length < 4) {
      throw Error('cannot build a simplex out of <4 points')
    }

    this.tolerance = -1

    // buffers
    this.nFaces = 0
    this.nPoints = points.length

    this.faces = []
    this.newFaces = []
    // helpers
    //
    // let `a`, `b` be `Face` instances
    // let `v` be points wrapped as instance of `Vertex`
    //
    //     [v, v, ..., v, v, v, ...]
    //      ^             ^
    //      |             |
    //  a.outside     b.outside
    //
    this.claimed = new VertexList()
    this.unclaimed = new VertexList()

    // vertices of the hull(internal representation of points)
    this.vertices = []
    for (let i = 0; i < points.length; i += 1) {
      this.vertices.push(new Vertex(points[i], i))
    }
    this.discardedFaces = []
    this.vertexPointIndices = []
  }

  addVertexToFace (vertex, face) {
    vertex.face = face
    if (!face.outside) {
      this.claimed.add(vertex)
    } else {
      this.claimed.insertBefore(face.outside, vertex)
    }
    face.outside = vertex
  }

  /**
   * Removes `vertex` for the `claimed` list of vertices, it also makes sure
   * that the link from `face` to the first vertex it sees in `claimed` is
   * linked correctly after the removal
   *
   * @param {Vertex} vertex
   * @param {Face} face
   */
  removeVertexFromFace (vertex, face) {
    if (vertex === face.outside) {
      // fix face.outside link
      if (vertex.next && vertex.next.face === face) {
        // face has at least 2 outside vertices, move the `outside` reference
        face.outside = vertex.next
      } else {
        // vertex was the only outside vertex that face had
        face.outside = null
      }
    }
    this.claimed.remove(vertex)
  }

  /**
   * Removes all the visible vertices that `face` is able to see which are
   * stored in the `claimed` vertext list
   *
   * @param {Face} face
   * @return {Vertex|undefined} If face had visible vertices returns
   * `face.outside`, otherwise undefined
   */
  removeAllVerticesFromFace (face) {
    if (face.outside) {
      // pointer to the last vertex of this face
      // [..., outside, ..., end, outside, ...]
      //          |           |      |
      //          a           a      b
      let end = face.outside
      while (end.next && end.next.face === face) {
        end = end.next
      }
      this.claimed.removeChain(face.outside, end)
      //                            b
      //                       [ outside, ...]
      //                            |  removes this link
      //     [ outside, ..., end ] -┘
      //          |           |
      //          a           a
      end.next = null
      return face.outside
    }
  }

  /**
   * Removes all the visible vertices that `face` is able to see, additionally
   * checking the following:
   *
   * If `absorbingFace` doesn't exist then all the removed vertices will be
   * added to the `unclaimed` vertex list
   *
   * If `absorbingFace` exists then this method will assign all the vertices of
   * `face` that can see `absorbingFace`, if a vertex cannot see `absorbingFace`
   * it's added to the `unclaimed` vertex list
   *
   * @param {Face} face
   * @param {Face} [absorbingFace]
   */
  deleteFaceVertices (face, absorbingFace) {
    const faceVertices = this.removeAllVerticesFromFace(face)
    if (faceVertices) {
      if (!absorbingFace) {
        // mark the vertices to be reassigned to some other face
        this.unclaimed.addAll(faceVertices)
      } else {
        // if there's an absorbing face try to assign as many vertices
        // as possible to it

        // the reference `vertex.next` might be destroyed on
        // `this.addVertexToFace` (see VertexList#add), nextVertex is a
        // reference to it
        let nextVertex
        for (let vertex = faceVertices; vertex; vertex = nextVertex) {
          nextVertex = vertex.next
          const distance = absorbingFace.distanceToPlane(vertex.point)

          // check if `vertex` is able to see `absorbingFace`
          if (distance > this.tolerance) {
            this.addVertexToFace(vertex, absorbingFace)
          } else {
            this.unclaimed.add(vertex)
          }
        }
      }
    }
  }

  /**
   * Reassigns as many vertices as possible from the unclaimed list to the new
   * faces
   *
   * @param {Faces[]} newFaces
   */
  resolveUnclaimedPoints (newFaces) {
    // cache next vertex so that if `vertex.next` is destroyed it's still
    // recoverable
    let vertexNext = this.unclaimed.first()
    for (let vertex = vertexNext; vertex; vertex = vertexNext) {
      vertexNext = vertex.next
      let maxDistance = this.tolerance
      let maxFace
      for (let i = 0; i < newFaces.length; i += 1) {
        const face = newFaces[i]
        if (face.mark === VISIBLE) {
          const dist = face.distanceToPlane(vertex.point)
          if (dist > maxDistance) {
            maxDistance = dist
            maxFace = face
          }
          if (maxDistance > 1000 * this.tolerance) {
            break
          }
        }
      }

      if (maxFace) {
        this.addVertexToFace(vertex, maxFace)
      }
    }
  }

  /**
   * Computes the extremes of a tetrahedron which will be the initial hull
   *
   * @return {number[]} The min/max vertices in the x,y,z directions
   */
  computeExtremes () {
    const min = []
    const max = []

    // min vertex on the x,y,z directions
    const minVertices = []
    // max vertex on the x,y,z directions
    const maxVertices = []

    let i, j

    // initially assume that the first vertex is the min/max
    for (i = 0; i < 3; i += 1) {
      minVertices[i] = maxVertices[i] = this.vertices[0]
    }
    // copy the coordinates of the first vertex to min/max
    for (i = 0; i < 3; i += 1) {
      min[i] = max[i] = this.vertices[0].point[i]
    }

    // compute the min/max vertex on all 6 directions
    for (i = 1; i < this.vertices.length; i += 1) {
      const vertex = this.vertices[i]
      const point = vertex.point
      // update the min coordinates
      for (j = 0; j < 3; j += 1) {
        if (point[j] < min[j]) {
          min[j] = point[j]
          minVertices[j] = vertex
        }
      }
      // update the max coordinates
      for (j = 0; j < 3; j += 1) {
        if (point[j] > max[j]) {
          max[j] = point[j]
          maxVertices[j] = vertex
        }
      }
    }

    // compute epsilon
    this.tolerance = 3 * Number.EPSILON * (
      Math.max(Math.abs(min[0]), Math.abs(max[0])) +
      Math.max(Math.abs(min[1]), Math.abs(max[1])) +
      Math.max(Math.abs(min[2]), Math.abs(max[2]))
    )
    return [minVertices, maxVertices]
  }

  /**
   * Compues the initial tetrahedron assigning to its faces all the points that
   * are candidates to form part of the hull
   */
  createInitialSimplex () {
    const vertices = this.vertices
    const [min, max] = this.computeExtremes()
    let v2, v3
    let i, j

    // Find the two vertices with the greatest 1d separation
    // (max.x - min.x)
    // (max.y - min.y)
    // (max.z - min.z)
    let maxDistance = 0
    let indexMax = 0
    for (i = 0; i < 3; i += 1) {
      const distance = max[i].point[i] - min[i].point[i]
      if (distance > maxDistance) {
        maxDistance = distance
        indexMax = i
      }
    }
    const v0 = min[indexMax]
    const v1 = max[indexMax]

    // the next vertex is the one farthest to the line formed by `v0` and `v1`
    maxDistance = 0
    for (i = 0; i < this.vertices.length; i += 1) {
      const vertex = this.vertices[i]
      if (vertex !== v0 && vertex !== v1) {
        const distance = pointLineDistance(
          vertex.point, v0.point, v1.point
        )
        if (distance > maxDistance) {
          maxDistance = distance
          v2 = vertex
        }
      }
    }

    // the next vertes is the one farthest to the plane `v0`, `v1`, `v2`
    // normalize((v2 - v1) x (v0 - v1))
    const normal = getPlaneNormal([], v0.point, v1.point, v2.point)
    // distance from the origin to the plane
    const distPO = dot(v0.point, normal)
    maxDistance = -1
    for (i = 0; i < this.vertices.length; i += 1) {
      const vertex = this.vertices[i]
      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {
        const distance = Math.abs(dot(normal, vertex.point) - distPO)
        if (distance > maxDistance) {
          maxDistance = distance
          v3 = vertex
        }
      }
    }

    // initial simplex
    // Taken from http://everything2.com/title/How+to+paint+a+tetrahedron
    //
    //                              v2
    //                             ,|,
    //                           ,7``\'VA,
    //                         ,7`   |, `'VA,
    //                       ,7`     `\    `'VA,
    //                     ,7`        |,      `'VA,
    //                   ,7`          `\         `'VA,
    //                 ,7`             |,           `'VA,
    //               ,7`               `\       ,..ooOOTK` v3
    //             ,7`                  |,.ooOOT''`    AV
    //           ,7`            ,..ooOOT`\`           /7
    //         ,7`      ,..ooOOT''`      |,          AV
    //        ,T,..ooOOT''`              `\         /7
    //     v0 `'TTs.,                     |,       AV
    //            `'TTs.,                 `\      /7
    //                 `'TTs.,             |,    AV
    //                      `'TTs.,        `\   /7
    //                           `'TTs.,    |, AV
    //                                `'TTs.,\/7
    //                                     `'T`
    //                                       v1
    //
    const faces = []
    if (dot(v3.point, normal) - distPO < 0) {
      // the face is not able to see the point so `planeNormal`
      // is pointing outside the tetrahedron
      faces.push(
        Face.createTriangle(v0, v1, v2),
        Face.createTriangle(v3, v1, v0),
        Face.createTriangle(v3, v2, v1),
        Face.createTriangle(v3, v0, v2)
      )

      // set the opposite edge
      for (i = 0; i < 3; i += 1) {
        const j = (i + 1) % 3
        // join face[i] i > 0, with the first face
        faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge(j))
        // join face[i] with face[i + 1], 1 <= i <= 3
        faces[i + 1].getEdge(1).setOpposite(faces[j + 1].getEdge(0))
      }
    } else {
      // the face is able to see the point so `planeNormal`
      // is pointing inside the tetrahedron
      faces.push(
        Face.createTriangle(v0, v2, v1),
        Face.createTriangle(v3, v0, v1),
        Face.createTriangle(v3, v1, v2),
        Face.createTriangle(v3, v2, v0)
      )

      // set the opposite edge
      for (i = 0; i < 3; i += 1) {
        const j = (i + 1) % 3
        // join face[i] i > 0, with the first face
        faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge((3 - i) % 3))
        // join face[i] with face[i + 1]
        faces[i + 1].getEdge(0).setOpposite(faces[j + 1].getEdge(1))
      }
    }

    // the initial hull is the tetrahedron
    for (i = 0; i < 4; i += 1) {
      this.faces.push(faces[i])
    }

    // initial assignment of vertices to the faces of the tetrahedron
    for (i = 0; i < vertices.length; i += 1) {
      const vertex = vertices[i]
      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {
        maxDistance = this.tolerance
        let maxFace
        for (j = 0; j < 4; j += 1) {
          const distance = faces[j].distanceToPlane(vertex.point)
          if (distance > maxDistance) {
            maxDistance = distance
            maxFace = faces[j]
          }
        }

        if (maxFace) {
          this.addVertexToFace(vertex, maxFace)
        }
      }
    }
  }

  reindexFaceAndVertices () {
    // remove inactive faces
    const activeFaces = []
    for (let i = 0; i < this.faces.length; i += 1) {
      const face = this.faces[i]
      if (face.mark === VISIBLE) {
        activeFaces.push(face)
      }
    }
    this.faces = activeFaces
  }

  collectFaces (skipTriangulation) {
    const faceIndices = []
    for (let i = 0; i < this.faces.length; i += 1) {
      if (this.faces[i].mark !== VISIBLE) {
        throw Error('attempt to include a destroyed face in the hull')
      }
      const indices = this.faces[i].collectIndices()
      if (skipTriangulation) {
        faceIndices.push(indices)
      } else {
        for (let j = 0; j < indices.length - 2; j += 1) {
          faceIndices.push(
            [indices[0], indices[j + 1], indices[j + 2]]
          )
        }
      }
    }
    return faceIndices
  }

  /**
   * Finds the next vertex to make faces with the current hull
   *
   * - let `face` be the first face existing in the `claimed` vertex list
   *  - if `face` doesn't exist then return since there're no vertices left
   *  - otherwise for each `vertex` that face sees find the one furthest away
   *  from `face`
   *
   * @return {Vertex|undefined} Returns undefined when there're no more
   * visible vertices
   */
  nextVertexToAdd () {
    if (!this.claimed.isEmpty()) {
      let eyeVertex, vertex
      let maxDistance = 0
      const eyeFace = this.claimed.first().face
      for (vertex = eyeFace.outside; vertex && vertex.face === eyeFace; vertex = vertex.next) {
        const distance = eyeFace.distanceToPlane(vertex.point)
        if (distance > maxDistance) {
          maxDistance = distance
          eyeVertex = vertex
        }
      }
      return eyeVertex
    }
  }

  /**
   * Computes a chain of half edges in ccw order called the `horizon`, for an
   * edge to be part of the horizon it must join a face that can see
   * `eyePoint` and a face that cannot see `eyePoint`
   *
   * @param {number[]} eyePoint - The coordinates of a point
   * @param {HalfEdge} crossEdge - The edge used to jump to the current `face`
   * @param {Face} face - The current face being tested
   * @param {HalfEdge[]} horizon - The edges that form part of the horizon in
   * ccw order
   */
  computeHorizon (eyePoint, crossEdge, face, horizon) {
    // moves face's vertices to the `unclaimed` vertex list
    this.deleteFaceVertices(face)

    face.mark = DELETED

    let edge
    if (!crossEdge) {
      edge = crossEdge = face.getEdge(0)
    } else {
      // start from the next edge since `crossEdge` was already analyzed
      // (actually `crossEdge.opposite` was the face who called this method
      // recursively)
      edge = crossEdge.next
    }

    // All the faces that are able to see `eyeVertex` are defined as follows
    //
    //       v    /
    //           / <== visible face
    //          /
    //         |
    //         | <== not visible face
    //
    //  dot(v, visible face normal) - visible face offset > this.tolerance
    //
    do {
      const oppositeEdge = edge.opposite
      const oppositeFace = oppositeEdge.face
      if (oppositeFace.mark === VISIBLE) {
        if (oppositeFace.distanceToPlane(eyePoint) > this.tolerance) {
          this.computeHorizon(eyePoint, oppositeEdge, oppositeFace, horizon)
        } else {
          horizon.push(edge)
        }
      }
      edge = edge.next
    } while (edge !== crossEdge)
  }

  /**
   * Creates a face with the points `eyeVertex.point`, `horizonEdge.tail` and
   * `horizonEdge.tail` in ccw order
   *
   * @param {Vertex} eyeVertex
   * @param {HalfEdge} horizonEdge
   * @return {HalfEdge} The half edge whose vertex is the eyeVertex
   */
  addAdjoiningFace (eyeVertex, horizonEdge) {
    // all the half edges are created in ccw order thus the face is always
    // pointing outside the hull
    // edges:
    //
    //                  eyeVertex.point
    //                       / \
    //                      /   \
    //                  1  /     \  0
    //                    /       \
    //                   /         \
    //                  /           \
    //          horizon.tail --- horizon.head
    //                        2
    //
    const face = Face.createTriangle(
      eyeVertex,
      horizonEdge.tail(),
      horizonEdge.head()
    )
    this.faces.push(face)
    // join face.getEdge(-1) with the horizon's opposite edge
    // face.getEdge(-1) = face.getEdge(2)
    face.getEdge(-1).setOpposite(horizonEdge.opposite)
    return face.getEdge(0)
  }

  /**
   * Adds horizon.length faces to the hull, each face will be 'linked' with the
   * horizon opposite face and the face on the left/right
   *
   * @param {Vertex} eyeVertex
   * @param {HalfEdge[]} horizon - A chain of half edges in ccw order
   */
  addNewFaces (eyeVertex, horizon) {
    this.newFaces = []
    let firstSideEdge, previousSideEdge
    for (let i = 0; i < horizon.length; i += 1) {
      const horizonEdge = horizon[i]
      // returns the right side edge
      const sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge)
      if (!firstSideEdge) {
        firstSideEdge = sideEdge
      } else {
        // joins face.getEdge(1) with previousFace.getEdge(0)
        sideEdge.next.setOpposite(previousSideEdge)
      }
      this.newFaces.push(sideEdge.face)
      previousSideEdge = sideEdge
    }
    firstSideEdge.next.setOpposite(previousSideEdge)
  }

  /**
   * Computes the distance from `edge` opposite face's centroid to
   * `edge.face`
   *
   * @param {HalfEdge} edge
   * @return {number}
   * - A positive number when the centroid of the opposite face is above the
   *   face i.e. when the faces are concave
   * - A negative number when the centroid of the opposite face is below the
   *   face i.e. when the faces are convex
   */
  oppositeFaceDistance (edge) {
    return edge.face.distanceToPlane(edge.opposite.face.centroid)
  }

  /**
   * Merges a face with none/any/all its neighbors according to the strategy
   * used
   *
   * if `mergeType` is MERGE_NON_CONVEX_WRT_LARGER_FACE then the merge will be
   * decided based on the face with the larger area, the centroid of the face
   * with the smaller area will be checked against the one with the larger area
   * to see if it's in the merge range [tolerance, -tolerance] i.e.
   *
   *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance
   *
   * Note that the first check (with +tolerance) was done on `computeHorizon`
   *
   * If the above is not true then the check is done with respect to the smaller
   * face i.e.
   *
   *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance
   *
   * If true then it means that two faces are non convex (concave), even if the
   * dot(...) - offset value is > 0 (that's the point of doing the merge in the
   * first place)
   *
   * If two faces are concave then the check must also be done on the other face
   * but this is done in another merge pass, for this to happen the face is
   * marked in a temporal NON_CONVEX state
   *
   * if `mergeType` is MERGE_NON_CONVEX then two faces will be merged only if
   * they pass the following conditions
   *
   *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance
   *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance
   *
   * @param {Face} face
   * @param {number} mergeType - Either MERGE_NON_CONVEX_WRT_LARGER_FACE or
   * MERGE_NON_CONVEX
   */
  doAdjacentMerge (face, mergeType) {
    let edge = face.edge
    let convex = true
    let it = 0
    do {
      if (it >= face.nVertices) {
        throw Error('merge recursion limit exceeded')
      }
      const oppositeFace = edge.opposite.face
      let merge = false

      // Important notes about the algorithm to merge faces
      //
      // - Given a vertex `eyeVertex` that will be added to the hull
      //   all the faces that cannot see `eyeVertex` are defined as follows
      //
      //      dot(v, not visible face normal) - not visible offset < tolerance
      //
      // - Two faces can be merged when the centroid of one of these faces
      // projected to the normal of the other face minus the other face offset
      // is in the range [tolerance, -tolerance]
      // - Since `face` (given in the input for this method) has passed the
      // check above we only have to check the lower bound e.g.
      //
      //      dot(v, not visible face normal) - not visible offset > -tolerance
      //
      if (mergeType === MERGE_NON_CONVEX) {
        if (this.oppositeFaceDistance(edge) > -this.tolerance ||
            this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {
          merge = true
        }
      } else {
        if (face.area > oppositeFace.area) {
          if (this.oppositeFaceDistance(edge) > -this.tolerance) {
            merge = true
          } else if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {
            convex = false
          }
        } else {
          if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {
            merge = true
          } else if (this.oppositeFaceDistance(edge) > -this.tolerance) {
            convex = false
          }
        }
      }

      if (merge) {
        // when two faces are merged it might be possible that redundant faces
        // are destroyed, in that case move all the visible vertices from the
        // destroyed faces to the `unclaimed` vertex list
        const discardedFaces = face.mergeAdjacentFaces(edge, [])
        for (let i = 0; i < discardedFaces.length; i += 1) {
          this.deleteFaceVertices(discardedFaces[i], face)
        }
        return true
      }

      edge = edge.next
      it += 1
    } while (edge !== face.edge)
    if (!convex) {
      face.mark = NON_CONVEX
    }
    return false
  }

  /**
   * Adds a vertex to the hull with the following algorithm
   *
   * - Compute the `horizon` which is a chain of half edges, for an edge to
   *   belong to this group it must be the edge connecting a face that can
   *   see `eyeVertex` and a face which cannot see `eyeVertex`
   * - All the faces that can see `eyeVertex` have its visible vertices removed
   *   from the claimed VertexList
   * - A new set of faces is created with each edge of the `horizon` and
   *   `eyeVertex`, each face is connected with the opposite horizon face and
   *   the face on the left/right
   * - The new faces are merged if possible with the opposite horizon face first
   *   and then the faces on the right/left
   * - The vertices removed from all the visible faces are assigned to the new
   *   faces if possible
   *
   * @param {Vertex} eyeVertex
   */
  addVertexToHull (eyeVertex) {
    const horizon = []

    this.unclaimed.clear()

    // remove `eyeVertex` from `eyeVertex.face` so that it can't be added to the
    // `unclaimed` vertex list
    this.removeVertexFromFace(eyeVertex, eyeVertex.face)
    this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon)
    this.addNewFaces(eyeVertex, horizon)

    // first merge pass
    // Do the merge with respect to the larger face
    for (let i = 0; i < this.newFaces.length; i += 1) {
      const face = this.newFaces[i]
      if (face.mark === VISIBLE) {
        while (this.doAdjacentMerge(face, MERGE_NON_CONVEX_WRT_LARGER_FACE)) {} // eslint-disable-line no-empty
      }
    }

    // second merge pass
    // Do the merge on non convex faces (a face is marked as non convex in the
    // first pass)
    for (let i = 0; i < this.newFaces.length; i += 1) {
      const face = this.newFaces[i]
      if (face.mark === NON_CONVEX) {
        face.mark = VISIBLE
        while (this.doAdjacentMerge(face, MERGE_NON_CONVEX)) {} // eslint-disable-line no-empty
      }
    }

    // reassign `unclaimed` vertices to the new faces
    this.resolveUnclaimedPoints(this.newFaces)
  }

  build () {
    let eyeVertex
    this.createInitialSimplex()
    while ((eyeVertex = this.nextVertexToAdd())) {
      this.addVertexToHull(eyeVertex)
    }
    this.reindexFaceAndVertices()
  }
}

module.exports = QuickHull


/***/ }),

/***/ 29939:
/***/ ((module) => {

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

class Vertex {
  constructor (point, index) {
    this.point = point
    // index in the input array
    this.index = index
    // vertex is a double linked list node
    this.next = null
    this.prev = null
    // the face that is able to see this point
    this.face = null
  }
}

module.exports = Vertex


/***/ }),

/***/ 26200:
/***/ ((module) => {

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

class VertexList {
  constructor () {
    this.head = null
    this.tail = null
  }

  clear () {
    this.head = this.tail = null
  }

  /**
   * Inserts a `node` before `target`, it's assumed that
   * `target` belongs to this doubly linked list
   *
   * @param {*} target
   * @param {*} node
   */
  insertBefore (target, node) {
    node.prev = target.prev
    node.next = target
    if (!node.prev) {
      this.head = node
    } else {
      node.prev.next = node
    }
    target.prev = node
  }

  /**
   * Inserts a `node` after `target`, it's assumed that
   * `target` belongs to this doubly linked list
   *
   * @param {Vertex} target
   * @param {Vertex} node
   */
  insertAfter (target, node) {
    node.prev = target
    node.next = target.next
    if (!node.next) {
      this.tail = node
    } else {
      node.next.prev = node
    }
    target.next = node
  }

  /**
   * Appends a `node` to the end of this doubly linked list
   * Note: `node.next` will be unlinked from `node`
   * Note: if `node` is part of another linked list call `addAll` instead
   *
   * @param {*} node
   */
  add (node) {
    if (!this.head) {
      this.head = node
    } else {
      this.tail.next = node
    }
    node.prev = this.tail
    // since node is the new end it doesn't have a next node
    node.next = null
    this.tail = node
  }

  /**
   * Appends a chain of nodes where `node` is the head,
   * the difference with `add` is that it correctly sets the position
   * of the node list `tail` property
   *
   * @param {*} node
   */
  addAll (node) {
    if (!this.head) {
      this.head = node
    } else {
      this.tail.next = node
    }
    node.prev = this.tail

    // find the end of the list
    while (node.next) {
      node = node.next
    }
    this.tail = node
  }

  /**
   * Deletes a `node` from this linked list, it's assumed that `node` is a
   * member of this linked list
   *
   * @param {*} node
   */
  remove (node) {
    if (!node.prev) {
      this.head = node.next
    } else {
      node.prev.next = node.next
    }

    if (!node.next) {
      this.tail = node.prev
    } else {
      node.next.prev = node.prev
    }
  }

  /**
   * Removes a chain of nodes whose head is `a` and whose tail is `b`,
   * it's assumed that `a` and `b` belong to this list and also that `a`
   * comes before `b` in the linked list
   *
   * @param {*} a
   * @param {*} b
   */
  removeChain (a, b) {
    if (!a.prev) {
      this.head = b.next
    } else {
      a.prev.next = b.next
    }

    if (!b.next) {
      this.tail = a.prev
    } else {
      b.next.prev = a.prev
    }
  }

  first () {
    return this.head
  }

  isEmpty () {
    return !this.head
  }
}

module.exports = VertexList


/***/ }),

/***/ 84384:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const cross = __webpack_require__(82344)
const normalize = __webpack_require__(24319)
const subtract = __webpack_require__(53824)

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

const planeNormal = (out, point1, point2, point3) => {
  const tmp = [0, 0, 0]
  subtract(out, point1, point2)
  subtract(tmp, point2, point3)
  cross(out, out, tmp)
  return normalize(out, out)
}

module.exports = planeNormal


/***/ }),

/***/ 76345:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const QuickHull = __webpack_require__(37022)

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

const runner = (points, options = {}) => {
  const instance = new QuickHull(points)
  instance.build()
  return instance.collectFaces(options.skipTriangulation)
}

module.exports = runner


/***/ }),

/***/ 2431:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const cross = __webpack_require__(82344)
const subtract = __webpack_require__(53824)
const squaredLength = __webpack_require__(73332)

/*
 * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)
 * Copyright (c) 2015 Mauricio Poppe
 *
 * Adapted to JSCAD by Jeff Gay
 */

const distanceSquared = (p, a, b) => {
  // == parallelogram solution
  //
  //            s
  //      __a________b__
  //       /   |    /
  //      /   h|   /
  //     /_____|__/
  //    p
  //
  //  s = b - a
  //  area = s * h
  //  |ap x s| = s * h
  //  h = |ap x s| / s
  //
  const ab = []
  const ap = []
  const cr = []
  subtract(ab, b, a)
  subtract(ap, p, a)
  const area = squaredLength(cross(cr, ap, ab))
  const s = squaredLength(ab)
  if (s === 0) {
    throw Error('a and b are the same point')
  }
  return area / s
}

const pointLineDistance = (point, a, b) => Math.sqrt(distanceSquared(point, a, b))

module.exports = pointLineDistance


/***/ }),

/***/ 2525:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

/*
 * Return the unique vertices of a geometry
 */
const toUniquePoints = (geometries) => {
  const found = new Set()
  const uniquePoints = []

  const addPoint = (point) => {
    const key = point.toString()
    if (!found.has(key)) {
      uniquePoints.push(point)
      found.add(key)
    }
  }

  geometries.forEach((geometry) => {
    if (geom2.isA(geometry)) {
      geom2.toPoints(geometry).forEach(addPoint)
    } else if (geom3.isA(geometry)) {
      // points are grouped by polygon
      geom3.toPoints(geometry).forEach((points) => points.forEach(addPoint))
    } else if (path2.isA(geometry)) {
      path2.toPoints(geometry).forEach(addPoint)
    }
  })

  return uniquePoints
}

module.exports = toUniquePoints


/***/ }),

/***/ 70618:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const measureEpsilon = __webpack_require__(85768)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

const snapPolygons = __webpack_require__(28309)
const mergePolygons = __webpack_require__(93738)
const insertTjunctions = __webpack_require__(24977)
const triangulatePolygons = __webpack_require__(40126)

/*
 */
const generalizePath2 = (options, geometry) => geometry

/*
 */
const generalizeGeom2 = (options, geometry) => geometry

/*
 */
const generalizeGeom3 = (options, geometry) => {
  const defaults = {
    snap: false,
    simplify: false,
    triangulate: false
  }
  const { snap, simplify, triangulate } = Object.assign({}, defaults, options)

  const epsilon = measureEpsilon(geometry)
  let polygons = geom3.toPolygons(geometry)

  // snap the given geometry if requested
  if (snap) {
    polygons = snapPolygons(epsilon, polygons)
  }

  // simplify the polygons if requested
  if (simplify) {
    // TODO implement some mesh decimations
    polygons = mergePolygons(epsilon, polygons)
  }

  // triangulate the polygons if requested
  if (triangulate) {
    polygons = insertTjunctions(polygons)
    polygons = triangulatePolygons(epsilon, polygons)
  }

  // FIXME replace with geom3.cloneShallow() when available
  const clone = Object.assign({}, geometry)
  clone.polygons = polygons

  return clone
}

/**
 * Apply various modifications in proper order to produce a generalized geometry.
 * @param {Object} options - options for modifications
 * @param {Boolean} [options.snap=false] the geometries should be snapped to epsilons
 * @param {Boolean} [options.simplify=false] the geometries should be simplified
 * @param {Boolean} [options.triangulate=false] the geometries should be triangulated
 * @param {...Object} geometries - the geometries to generalize
 * @return {Object|Array} the modified geometry, or a list of modified geometries
 * @alias module:modeling/modifiers.generalize
 */
const generalize = (options, ...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  const results = geometries.map((geometry) => {
    if (path2.isA(geometry)) return generalizePath2(options, geometry)
    if (geom2.isA(geometry)) return generalizeGeom2(options, geometry)
    if (geom3.isA(geometry)) return generalizeGeom3(options, geometry)
    throw new Error('invalid geometry')
  })
  return results.length === 1 ? results[0] : results
}

module.exports = generalize


/***/ }),

/***/ 19341:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All shapes (primitives or the results of operations) can be modified to correct issues, etc.
 * In all cases, these functions returns the results, and never changes the original geometry.
 * @module modeling/modifiers
 * @example
 * const { snap } = require('@jscad/modeling').modifiers
 */
module.exports = {
  generalize: __webpack_require__(70618),
  snap: __webpack_require__(34527)
}


/***/ }),

/***/ 24977:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const constants = __webpack_require__(77022)
const vec3 = __webpack_require__(14171)
const poly3 = __webpack_require__(71516)

const assert = false

const getTag = (vertex) => `${vertex}`

const addSide = (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) => {
  const starttag = getTag(vertex0)
  const endtag = getTag(vertex1)
  if (assert && starttag === endtag) throw new Error('assert failed')
  const newsidetag = `${starttag}/${endtag}`
  const reversesidetag = `${endtag}/${starttag}`
  if (sidemap.has(reversesidetag)) {
    // remove the opposing side from mappings
    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null)
    return null
  }
  // add the side to the mappings
  const newsideobj = {
    vertex0: vertex0,
    vertex1: vertex1,
    polygonindex: polygonindex
  }
  if (!(sidemap.has(newsidetag))) {
    sidemap.set(newsidetag, [newsideobj])
  } else {
    sidemap.get(newsidetag).push(newsideobj)
  }
  if (vertextag2sidestart.has(starttag)) {
    vertextag2sidestart.get(starttag).push(newsidetag)
  } else {
    vertextag2sidestart.set(starttag, [newsidetag])
  }
  if (vertextag2sideend.has(endtag)) {
    vertextag2sideend.get(endtag).push(newsidetag)
  } else {
    vertextag2sideend.set(endtag, [newsidetag])
  }
  return newsidetag
}

const deleteSide = (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) => {
  const starttag = getTag(vertex0)
  const endtag = getTag(vertex1)
  const sidetag = `${starttag}/${endtag}`
  if (assert && !(sidemap.has(sidetag))) throw new Error('assert failed')
  let idx = -1
  const sideobjs = sidemap.get(sidetag)
  for (let i = 0; i < sideobjs.length; i++) {
    const sideobj = sideobjs[i]
    let sidetag = getTag(sideobj.vertex0)
    if (sidetag !== starttag) continue
    sidetag = getTag(sideobj.vertex1)
    if (sidetag !== endtag) continue
    if (polygonindex !== null) {
      if (sideobj.polygonindex !== polygonindex) continue
    }
    idx = i
    break
  }
  if (assert && idx < 0) throw new Error('assert failed')
  sideobjs.splice(idx, 1)
  if (sideobjs.length === 0) {
    sidemap.delete(sidetag)
  }

  // adjust start and end lists
  idx = vertextag2sidestart.get(starttag).indexOf(sidetag)
  if (assert && idx < 0) throw new Error('assert failed')
  vertextag2sidestart.get(starttag).splice(idx, 1)
  if (vertextag2sidestart.get(starttag).length === 0) {
    vertextag2sidestart.delete(starttag)
  }

  idx = vertextag2sideend.get(endtag).indexOf(sidetag)
  if (assert && idx < 0) throw new Error('assert failed')
  vertextag2sideend.get(endtag).splice(idx, 1)
  if (vertextag2sideend.get(endtag).length === 0) {
    vertextag2sideend.delete(endtag)
  }
}

/*
  Suppose we have two polygons ACDB and EDGF:

   A-----B
   |     |
   |     E--F
   |     |  |
   C-----D--G

  Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain
  that the solid is not watertight. This is because the watertightness check is done by checking if
  each side DE is matched by another side ED.

  This function will return a new solid with ACDB replaced by ACDEB

  Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result should
  not be used for further CSG operations!

  Note this function is meant to be used to preprocess geometries when triangulation is required, i.e. AMF, STL, etc.
  Do not use the results in other operations.
*/

/*
 * Insert missing vertices for T junctions, which creates polygons that can be triangulated.
 * @param {Array} polygons - the original polygons which may or may not have T junctions
 * @return original polygons (if no T junctions found) or new polygons with updated vertices
 */
const insertTjunctions = (polygons) => {
  // STEP 1 : build a map of 'unmatched' sides from the polygons
  // i.e. side AB in one polygon does not have a matching side BA in another polygon
  const sidemap = new Map()
  for (let polygonindex = 0; polygonindex < polygons.length; polygonindex++) {
    const polygon = polygons[polygonindex]
    const numvertices = polygon.vertices.length
    if (numvertices >= 3) {
      let vertex = polygon.vertices[0]
      let vertextag = getTag(vertex)
      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {
        let nextvertexindex = vertexindex + 1
        if (nextvertexindex === numvertices) nextvertexindex = 0

        const nextvertex = polygon.vertices[nextvertexindex]
        const nextvertextag = getTag(nextvertex)

        const sidetag = `${vertextag}/${nextvertextag}`
        const reversesidetag = `${nextvertextag}/${vertextag}`
        if (sidemap.has(reversesidetag)) {
          // this side matches the same side in another polygon. Remove from sidemap
          // FIXME is this check necessary? there should only be ONE(1) opposing side
          // FIXME assert ?
          const ar = sidemap.get(reversesidetag)
          ar.splice(-1, 1)
          if (ar.length === 0) {
            sidemap.delete(reversesidetag)
          }
        } else {
          const sideobj = {
            vertex0: vertex,
            vertex1: nextvertex,
            polygonindex: polygonindex
          }
          if (!(sidemap.has(sidetag))) {
            sidemap.set(sidetag, [sideobj])
          } else {
            sidemap.get(sidetag).push(sideobj)
          }
        }
        vertex = nextvertex
        vertextag = nextvertextag
      }
    } else {
      console.warn('warning: invalid polygon found during insertTjunctions')
    }
  }

  if (sidemap.size > 0) {
    // STEP 2 : create a list of starting sides and ending sides
    const vertextag2sidestart = new Map()
    const vertextag2sideend = new Map()
    const sidesToCheck = new Map()
    for (const [sidetag, sideobjs] of sidemap) {
      sidesToCheck.set(sidetag, true)
      sideobjs.forEach((sideobj) => {
        const starttag = getTag(sideobj.vertex0)
        const endtag = getTag(sideobj.vertex1)
        if (vertextag2sidestart.has(starttag)) {
          vertextag2sidestart.get(starttag).push(sidetag)
        } else {
          vertextag2sidestart.set(starttag, [sidetag])
        }
        if (vertextag2sideend.has(endtag)) {
          vertextag2sideend.get(endtag).push(sidetag)
        } else {
          vertextag2sideend.set(endtag, [sidetag])
        }
      })
    }

    // STEP 3 : if sidemap is not empty
    const newpolygons = polygons.slice(0) // make a copy in order to replace polygons inline
    while (true) {
      if (sidemap.size === 0) break

      for (const sidetag of sidemap.keys()) {
        sidesToCheck.set(sidetag, true)
      }

      let donesomething = false
      while (true) {
        const sidetags = Array.from(sidesToCheck.keys())
        if (sidetags.length === 0) break // sidesToCheck is empty, we're done!
        const sidetagtocheck = sidetags[0]
        let donewithside = true
        if (sidemap.has(sidetagtocheck)) {
          const sideobjs = sidemap.get(sidetagtocheck)
          if (assert && sideobjs.length === 0) throw new Error('assert failed')
          const sideobj = sideobjs[0]
          for (let directionindex = 0; directionindex < 2; directionindex++) {
            const startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1
            const endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0
            const startvertextag = getTag(startvertex)
            const endvertextag = getTag(endvertex)
            let matchingsides = []
            if (directionindex === 0) {
              if (vertextag2sideend.has(startvertextag)) {
                matchingsides = vertextag2sideend.get(startvertextag)
              }
            } else {
              if (vertextag2sidestart.has(startvertextag)) {
                matchingsides = vertextag2sidestart.get(startvertextag)
              }
            }
            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {
              const matchingsidetag = matchingsides[matchingsideindex]
              const matchingside = sidemap.get(matchingsidetag)[0]
              const matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1
              const matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0
              const matchingsidestartvertextag = getTag(matchingsidestartvertex)
              const matchingsideendvertextag = getTag(matchingsideendvertex)
              if (assert && matchingsideendvertextag !== startvertextag) throw new Error('assert failed')
              if (matchingsidestartvertextag === endvertextag) {
                // matchingside cancels sidetagtocheck
                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null)
                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null)
                donewithside = false
                directionindex = 2 // skip reverse direction check
                donesomething = true
                break
              } else {
                const startpos = startvertex
                const endpos = endvertex
                const checkpos = matchingsidestartvertex
                const direction = vec3.subtract(vec3.create(), checkpos, startpos)
                // Now we need to check if endpos is on the line startpos-checkpos:
                const t = vec3.dot(vec3.subtract(vec3.create(), endpos, startpos), direction) / vec3.dot(direction, direction)
                if ((t > 0) && (t < 1)) {
                  const closestpoint = vec3.scale(vec3.create(), direction, t)
                  vec3.add(closestpoint, closestpoint, startpos)
                  const distancesquared = vec3.squaredDistance(closestpoint, endpos)
                  if (distancesquared < (constants.EPS * constants.EPS)) {
                    // Yes it's a t-junction! We need to split matchingside in two:
                    const polygonindex = matchingside.polygonindex
                    const polygon = newpolygons[polygonindex]
                    // find the index of startvertextag in polygon:
                    const insertionvertextag = getTag(matchingside.vertex1)
                    let insertionvertextagindex = -1
                    for (let i = 0; i < polygon.vertices.length; i++) {
                      if (getTag(polygon.vertices[i]) === insertionvertextag) {
                        insertionvertextagindex = i
                        break
                      }
                    }
                    if (assert && insertionvertextagindex < 0) throw new Error('assert failed')
                    // split the side by inserting the vertex:
                    const newvertices = polygon.vertices.slice(0)
                    newvertices.splice(insertionvertextagindex, 0, endvertex)
                    const newpolygon = poly3.create(newvertices)

                    newpolygons[polygonindex] = newpolygon

                    // remove the original sides from our maps
                    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, matchingside.vertex1, polygonindex)
                    const newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, endvertex, polygonindex)
                    const newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, matchingside.vertex1, polygonindex)
                    if (newsidetag1 !== null) sidesToCheck.set(newsidetag1, true)
                    if (newsidetag2 !== null) sidesToCheck.set(newsidetag2, true)
                    donewithside = false
                    directionindex = 2 // skip reverse direction check
                    donesomething = true
                    break
                  } // if(distancesquared < 1e-10)
                } // if( (t > 0) && (t < 1) )
              } // if(endingstidestartvertextag === endvertextag)
            } // for matchingsideindex
          } // for directionindex
        } // if(sidetagtocheck in sidemap)
        if (donewithside) {
          sidesToCheck.delete(sidetagtocheck)
        }
      }
      if (!donesomething) break
    }
    polygons = newpolygons
  }
  sidemap.clear()

  return polygons
}

module.exports = insertTjunctions


/***/ }),

/***/ 93738:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const aboutEqualNormals = __webpack_require__(64364)
const vec3 = __webpack_require__(14171)

const poly3 = __webpack_require__(71516)

// create a set of edges from the given polygon, and link the edges as well
const createEdges = (polygon) => {
  const points = poly3.toPoints(polygon)
  const edges = []
  for (let i = 0; i < points.length; i++) {
    const j = (i + 1) % points.length
    const edge = {
      v1: points[i],
      v2: points[j]
    }
    edges.push(edge)
  }
  // link the edges together
  for (let i = 0; i < edges.length; i++) {
    const j = (i + 1) % points.length
    edges[i].next = edges[j]
    edges[j].prev = edges[i]
  }
  return edges
}

const insertEdge = (edges, edge) => {
  const key = `${edge.v1}:${edge.v2}`
  edges.set(key, edge)
}

const deleteEdge = (edges, edge) => {
  const key = `${edge.v1}:${edge.v2}`
  edges.delete(key)
}

const findOppositeEdge = (edges, edge) => {
  const key = `${edge.v2}:${edge.v1}` // NOTE: OPPOSITE OF INSERT KEY
  return edges.get(key)
}

// calculate the two adjoining angles between the opposing edges
const calculateAnglesBetween = (current, opposite, normal) => {
  let v0 = current.prev.v1
  let v1 = current.prev.v2
  let v2 = opposite.next.v2
  const angle1 = calculateAngle(v0, v1, v2, normal)

  v0 = opposite.prev.v1
  v1 = opposite.prev.v2
  v2 = current.next.v2
  const angle2 = calculateAngle(v0, v1, v2, normal)

  return [angle1, angle2]
}

const v1 = vec3.create()
const v2 = vec3.create()

const calculateAngle = (prevpoint, point, nextpoint, normal) => {
  const d0 = vec3.subtract(v1, point, prevpoint)
  const d1 = vec3.subtract(v2, nextpoint, point)
  vec3.cross(d0, d0, d1)
  return vec3.dot(d0, normal)
}

// create a polygon starting from the given edge (if possible)
const createPolygonAnd = (edge) => {
  let polygon
  const points = []
  while (edge.next) {
    const next = edge.next

    points.push(edge.v1)

    edge.v1 = null
    edge.v2 = null
    edge.next = null
    edge.prev = null

    edge = next
  }
  if (points.length > 0) polygon = poly3.create(points)
  return polygon
}

/*
 * Merge COPLANAR polygons that share common edges.
 * @param {poly3[]} sourcepolygons - list of polygons
 * @returns {poly3[]} new set of polygons
 */
const mergeCoplanarPolygons = (sourcepolygons) => {
  if (sourcepolygons.length < 2) return sourcepolygons

  const normal = sourcepolygons[0].plane
  const polygons = sourcepolygons.slice()
  const edgeList = new Map()

  while (polygons.length > 0) { // NOTE: the length of polygons WILL change
    const polygon = polygons.shift()
    const edges = createEdges(polygon)
    for (let i = 0; i < edges.length; i++) {
      const current = edges[i]
      const opposite = findOppositeEdge(edgeList, current)
      if (opposite) {
        const angles = calculateAnglesBetween(current, opposite, normal)
        if (angles[0] >= 0 && angles[1] >= 0) {
          const edge1 = opposite.next
          const edge2 = current.next
          // adjust the edges, linking together opposing polygons
          current.prev.next = opposite.next
          current.next.prev = opposite.prev

          opposite.prev.next = current.next
          opposite.next.prev = current.prev

          // remove the opposing edges
          current.v1 = null
          current.v2 = null
          current.next = null
          current.prev = null

          deleteEdge(edgeList, opposite)

          opposite.v1 = null
          opposite.v2 = null
          opposite.next = null
          opposite.prev = null

          const mergeEdges = (list, e1, e2) => {
            const newedge = {
              v1: e2.v1,
              v2: e1.v2,
              next: e1.next,
              prev: e2.prev
            }
            // link in newedge
            e2.prev.next = newedge
            e1.next.prev = newedge
            // remove old edges
            deleteEdge(list, e1)
            e1.v1 = null
            e1.v2 = null
            e1.next = null
            e1.prev = null

            deleteEdge(list, e2)
            e2.v1 = null
            e2.v2 = null
            e2.next = null
            e2.prev = null
          }

          if (angles[0] === 0.0) {
            mergeEdges(edgeList, edge1, edge1.prev)
          }
          if (angles[1] === 0.0) {
            mergeEdges(edgeList, edge2, edge2.prev)
          }
        }
      } else {
        if (current.next) insertEdge(edgeList, current)
      }
    }
  }

  // build a set of polygons from the remaining edges
  const destpolygons = []
  edgeList.forEach((edge) => {
    const polygon = createPolygonAnd(edge)
    if (polygon) destpolygons.push(polygon)
  })

  edgeList.clear()

  return destpolygons
}

const coplanar = (plane1, plane2) => {
  // expect the same distance from the origin, within tolerance
  if (Math.abs(plane1[3] - plane2[3]) < 0.00000015) {
    return aboutEqualNormals(plane1, plane2)
  }
  return false
}

const mergePolygons = (epsilon, polygons) => {
  const polygonsPerPlane = [] // elements: [plane, [poly3...]]
  polygons.forEach((polygon) => {
    const mapping = polygonsPerPlane.find((element) => coplanar(element[0], poly3.plane(polygon)))
    if (mapping) {
      const polygons = mapping[1]
      polygons.push(polygon)
    } else {
      polygonsPerPlane.push([poly3.plane(polygon), [polygon]])
    }
  })

  let destpolygons = []
  polygonsPerPlane.forEach((mapping) => {
    const sourcepolygons = mapping[1]
    const retesselayedpolygons = mergeCoplanarPolygons(sourcepolygons)
    destpolygons = destpolygons.concat(retesselayedpolygons)
  })
  return destpolygons
}

module.exports = mergePolygons


/***/ }),

/***/ 64585:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS } = __webpack_require__(77022)

const line2 = __webpack_require__(84714)
const vec2 = __webpack_require__(4138)
const OrthoNormalBasis = __webpack_require__(65384)
const interpolateBetween2DPointsForY = __webpack_require__(39268)

const { insertSorted, fnNumberSort } = __webpack_require__(27377)

const poly3 = __webpack_require__(71516)

/*
 * Retesselation for a set of COPLANAR polygons.
 * @param {poly3[]} sourcepolygons - list of polygons
 * @returns {poly3[]} new set of polygons
 */
const reTesselateCoplanarPolygons = (sourcepolygons) => {
  if (sourcepolygons.length < 2) return sourcepolygons

  const destpolygons = []
  const numpolygons = sourcepolygons.length
  const plane = poly3.plane(sourcepolygons[0])
  const orthobasis = new OrthoNormalBasis(plane)
  const polygonvertices2d = [] // array of array of Vector2D
  const polygontopvertexindexes = [] // array of indexes of topmost vertex per polygon
  const topy2polygonindexes = new Map()
  const ycoordinatetopolygonindexes = new Map()

  // convert all polygon vertices to 2D
  // Make a list of all encountered y coordinates
  // And build a map of all polygons that have a vertex at a certain y coordinate:
  const ycoordinatebins = new Map()
  const ycoordinateBinningFactor = 10 / EPS
  for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {
    const poly3d = sourcepolygons[polygonindex]
    let vertices2d = []
    let numvertices = poly3d.vertices.length
    let minindex = -1
    if (numvertices > 0) {
      let miny
      let maxy
      for (let i = 0; i < numvertices; i++) {
        let pos2d = orthobasis.to2D(poly3d.vertices[i])
        // perform binning of y coordinates: If we have multiple vertices very
        // close to each other, give them the same y coordinate:
        const ycoordinatebin = Math.floor(pos2d[1] * ycoordinateBinningFactor)
        let newy
        if (ycoordinatebins.has(ycoordinatebin)) {
          newy = ycoordinatebins.get(ycoordinatebin)
        } else if (ycoordinatebins.has(ycoordinatebin + 1)) {
          newy = ycoordinatebins.get(ycoordinatebin + 1)
        } else if (ycoordinatebins.has(ycoordinatebin - 1)) {
          newy = ycoordinatebins.get(ycoordinatebin - 1)
        } else {
          newy = pos2d[1]
          ycoordinatebins.set(ycoordinatebin, pos2d[1])
        }
        pos2d = vec2.fromValues(pos2d[0], newy)
        vertices2d.push(pos2d)
        const y = pos2d[1]
        if ((i === 0) || (y < miny)) {
          miny = y
          minindex = i
        }
        if ((i === 0) || (y > maxy)) {
          maxy = y
        }
        let polygonindexes = ycoordinatetopolygonindexes.get(y)
        if (!polygonindexes) {
          polygonindexes = {} // PERF
          ycoordinatetopolygonindexes.set(y, polygonindexes)
        }
        polygonindexes[polygonindex] = true
      }
      if (miny >= maxy) {
        // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:
        vertices2d = []
        numvertices = 0
        minindex = -1
      } else {
        let polygonindexes = topy2polygonindexes.get(miny)
        if (!polygonindexes) {
          polygonindexes = []
          topy2polygonindexes.set(miny, polygonindexes)
        }
        polygonindexes.push(polygonindex)
      }
    } // if(numvertices > 0)
    // reverse the vertex order:
    vertices2d.reverse()
    minindex = numvertices - minindex - 1
    polygonvertices2d.push(vertices2d)
    polygontopvertexindexes.push(minindex)
  }

  const ycoordinates = []
  ycoordinatetopolygonindexes.forEach((polylist, y) => ycoordinates.push(y))
  ycoordinates.sort(fnNumberSort)

  // Now we will iterate over all y coordinates, from lowest to highest y coordinate
  // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate
  //   Is sorted so the polygons are in left to right order
  // Each element in activepolygons has these properties:
  //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons
  //                      and polygonvertices2d arrays)
  //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)
  //                         that is at or just above the current y coordinate
  //        rightvertexindex: dito at right hand side of polygon
  //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate
  //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate
  let activepolygons = []
  let prevoutpolygonrow = []
  for (let yindex = 0; yindex < ycoordinates.length; yindex++) {
    const newoutpolygonrow = []
    const ycoordinate = ycoordinates[yindex]

    // update activepolygons for this y coordinate:
    // - Remove any polygons that end at this y coordinate
    // - update leftvertexindex and rightvertexindex (which point to the current vertex index
    //   at the the left and right side of the polygon
    // Iterate over all polygons that have a corner at this y coordinate:
    const polygonindexeswithcorner = ycoordinatetopolygonindexes.get(ycoordinate)
    for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {
      const activepolygon = activepolygons[activepolygonindex]
      const polygonindex = activepolygon.polygonindex
      if (polygonindexeswithcorner[polygonindex]) {
        // this active polygon has a corner at this y coordinate:
        const vertices2d = polygonvertices2d[polygonindex]
        const numvertices = vertices2d.length
        let newleftvertexindex = activepolygon.leftvertexindex
        let newrightvertexindex = activepolygon.rightvertexindex
        // See if we need to increase leftvertexindex or decrease rightvertexindex:
        while (true) {
          let nextleftvertexindex = newleftvertexindex + 1
          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0
          if (vertices2d[nextleftvertexindex][1] !== ycoordinate) break
          newleftvertexindex = nextleftvertexindex
        }
        let nextrightvertexindex = newrightvertexindex - 1
        if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1
        if (vertices2d[nextrightvertexindex][1] === ycoordinate) {
          newrightvertexindex = nextrightvertexindex
        }
        if ((newleftvertexindex !== activepolygon.leftvertexindex) && (newleftvertexindex === newrightvertexindex)) {
          // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex
          // This means that this is the bottom point of the polygon. We'll remove it:
          activepolygons.splice(activepolygonindex, 1)
          --activepolygonindex
        } else {
          activepolygon.leftvertexindex = newleftvertexindex
          activepolygon.rightvertexindex = newrightvertexindex
          activepolygon.topleft = vertices2d[newleftvertexindex]
          activepolygon.topright = vertices2d[newrightvertexindex]
          let nextleftvertexindex = newleftvertexindex + 1
          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0
          activepolygon.bottomleft = vertices2d[nextleftvertexindex]
          let nextrightvertexindex = newrightvertexindex - 1
          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1
          activepolygon.bottomright = vertices2d[nextrightvertexindex]
        }
      } // if polygon has corner here
    } // for activepolygonindex
    let nextycoordinate
    if (yindex >= ycoordinates.length - 1) {
      // last row, all polygons must be finished here:
      activepolygons = []
      nextycoordinate = null
    } else { // yindex < ycoordinates.length-1
      nextycoordinate = Number(ycoordinates[yindex + 1])
      const middleycoordinate = 0.5 * (ycoordinate + nextycoordinate)
      // update activepolygons by adding any polygons that start here:
      const startingpolygonindexes = topy2polygonindexes.get(ycoordinate)
      for (const polygonindexKey in startingpolygonindexes) {
        const polygonindex = startingpolygonindexes[polygonindexKey]
        const vertices2d = polygonvertices2d[polygonindex]
        const numvertices = vertices2d.length
        const topvertexindex = polygontopvertexindexes[polygonindex]
        // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.
        // Find the left and right topmost vertices which have the current y coordinate:
        let topleftvertexindex = topvertexindex
        while (true) {
          let i = topleftvertexindex + 1
          if (i >= numvertices) i = 0
          if (vertices2d[i][1] !== ycoordinate) break
          if (i === topvertexindex) break // should not happen, but just to prevent endless loops
          topleftvertexindex = i
        }
        let toprightvertexindex = topvertexindex
        while (true) {
          let i = toprightvertexindex - 1
          if (i < 0) i = numvertices - 1
          if (vertices2d[i][1] !== ycoordinate) break
          if (i === topleftvertexindex) break // should not happen, but just to prevent endless loops
          toprightvertexindex = i
        }
        let nextleftvertexindex = topleftvertexindex + 1
        if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0
        let nextrightvertexindex = toprightvertexindex - 1
        if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1
        const newactivepolygon = {
          polygonindex: polygonindex,
          leftvertexindex: topleftvertexindex,
          rightvertexindex: toprightvertexindex,
          topleft: vertices2d[topleftvertexindex],
          topright: vertices2d[toprightvertexindex],
          bottomleft: vertices2d[nextleftvertexindex],
          bottomright: vertices2d[nextrightvertexindex]
        }
        insertSorted(activepolygons, newactivepolygon, (el1, el2) => {
          const x1 = interpolateBetween2DPointsForY(el1.topleft, el1.bottomleft, middleycoordinate)
          const x2 = interpolateBetween2DPointsForY(el2.topleft, el2.bottomleft, middleycoordinate)
          if (x1 > x2) return 1
          if (x1 < x2) return -1
          return 0
        })
      } // for(let polygonindex in startingpolygonindexes)
    } //  yindex < ycoordinates.length-1

    // Now activepolygons is up to date
    // Build the output polygons for the next row in newoutpolygonrow:
    for (const activepolygonKey in activepolygons) {
      const activepolygon = activepolygons[activepolygonKey]

      let x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate)
      const topleft = vec2.fromValues(x, ycoordinate)
      x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate)
      const topright = vec2.fromValues(x, ycoordinate)
      x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate)
      const bottomleft = vec2.fromValues(x, nextycoordinate)
      x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate)
      const bottomright = vec2.fromValues(x, nextycoordinate)
      const outpolygon = {
        topleft: topleft,
        topright: topright,
        bottomleft: bottomleft,
        bottomright: bottomright,
        leftline: line2.fromPoints(line2.create(), topleft, bottomleft),
        rightline: line2.fromPoints(line2.create(), bottomright, topright)
      }
      if (newoutpolygonrow.length > 0) {
        const prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1]
        const d1 = vec2.distance(outpolygon.topleft, prevoutpolygon.topright)
        const d2 = vec2.distance(outpolygon.bottomleft, prevoutpolygon.bottomright)
        if ((d1 < EPS) && (d2 < EPS)) {
          // we can join this polygon with the one to the left:
          outpolygon.topleft = prevoutpolygon.topleft
          outpolygon.leftline = prevoutpolygon.leftline
          outpolygon.bottomleft = prevoutpolygon.bottomleft
          newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1)
        }
      }
      newoutpolygonrow.push(outpolygon)
    } // for(activepolygon in activepolygons)
    if (yindex > 0) {
      // try to match the new polygons against the previous row:
      const prevcontinuedindexes = new Set()
      const matchedindexes = new Set()
      for (let i = 0; i < newoutpolygonrow.length; i++) {
        const thispolygon = newoutpolygonrow[i]
        for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {
          if (!matchedindexes.has(ii)) { // not already processed?
            // We have a match if the sidelines are equal or if the top coordinates
            // are on the sidelines of the previous polygon
            const prevpolygon = prevoutpolygonrow[ii]
            if (vec2.distance(prevpolygon.bottomleft, thispolygon.topleft) < EPS) {
              if (vec2.distance(prevpolygon.bottomright, thispolygon.topright) < EPS) {
                // Yes, the top of this polygon matches the bottom of the previous:
                matchedindexes.add(ii)
                // Now check if the joined polygon would remain convex:
                const v1 = line2.direction(thispolygon.leftline)
                const v2 = line2.direction(prevpolygon.leftline)
                const d1 = v1[0] - v2[0]

                const v3 = line2.direction(thispolygon.rightline)
                const v4 = line2.direction(prevpolygon.rightline)
                const d2 = v3[0] - v4[0]

                const leftlinecontinues = Math.abs(d1) < EPS
                const rightlinecontinues = Math.abs(d2) < EPS
                const leftlineisconvex = leftlinecontinues || (d1 >= 0)
                const rightlineisconvex = rightlinecontinues || (d2 >= 0)
                if (leftlineisconvex && rightlineisconvex) {
                  // yes, both sides have convex corners:
                  // This polygon will continue the previous polygon
                  thispolygon.outpolygon = prevpolygon.outpolygon
                  thispolygon.leftlinecontinues = leftlinecontinues
                  thispolygon.rightlinecontinues = rightlinecontinues
                  prevcontinuedindexes.add(ii)
                }
                break
              }
            }
          } // if(!prevcontinuedindexes.has(ii))
        } // for ii
      } // for i
      for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {
        if (!prevcontinuedindexes.has(ii)) {
          // polygon ends here
          // Finish the polygon with the last point(s):
          const prevpolygon = prevoutpolygonrow[ii]
          prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright)
          if (vec2.distance(prevpolygon.bottomright, prevpolygon.bottomleft) > EPS) {
            // polygon ends with a horizontal line:
            prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft)
          }
          // reverse the left half so we get a counterclockwise circle:
          prevpolygon.outpolygon.leftpoints.reverse()
          const points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints)
          const vertices3d = points2d.map((point2d) => orthobasis.to3D(point2d))
          const polygon = poly3.fromPointsAndPlane(vertices3d, plane) // TODO support shared

          // if we let empty polygon out, next retesselate will crash
          if (polygon.vertices.length) destpolygons.push(polygon)
        }
      }
    } // if(yindex > 0)
    for (let i = 0; i < newoutpolygonrow.length; i++) {
      const thispolygon = newoutpolygonrow[i]
      if (!thispolygon.outpolygon) {
        // polygon starts here:
        thispolygon.outpolygon = {
          leftpoints: [],
          rightpoints: []
        }
        thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)
        if (vec2.distance(thispolygon.topleft, thispolygon.topright) > EPS) {
          // we have a horizontal line at the top:
          thispolygon.outpolygon.rightpoints.push(thispolygon.topright)
        }
      } else {
        // continuation of a previous row
        if (!thispolygon.leftlinecontinues) {
          thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)
        }
        if (!thispolygon.rightlinecontinues) {
          thispolygon.outpolygon.rightpoints.push(thispolygon.topright)
        }
      }
    }
    prevoutpolygonrow = newoutpolygonrow
  } // for yindex
  return destpolygons
}

module.exports = reTesselateCoplanarPolygons


/***/ }),

/***/ 73894:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const aboutEqualNormals = __webpack_require__(64364)

const reTesselateCoplanarPolygons = __webpack_require__(64585)

const coplanar = (plane1, plane2) => {
  // expect the same distance from the origin, within tolerance
  if (Math.abs(plane1[3] - plane2[3]) < 0.00000015) {
    return aboutEqualNormals(plane1, plane2)
  }
  return false
}

/*
  After boolean operations all coplanar polygon fragments are joined by a retesselating
  operation. geom3.reTesselate(geom).
  Retesselation is done through a linear sweep over the polygon surface.
  The sweep line passes over the y coordinates of all vertices in the polygon.
  Polygons are split at each sweep line, and the fragments are joined horizontally and vertically into larger polygons
  (making sure that we will end up with convex polygons).
*/
const retessellate = (geometry) => {
  if (geometry.isRetesselated) {
    return geometry
  }

  const polygons = geom3.toPolygons(geometry)
  const polygonsPerPlane = [] // elements: [plane, [poly3...]]
  polygons.forEach((polygon) => {
    const mapping = polygonsPerPlane.find((element) => coplanar(element[0], poly3.plane(polygon)))
    if (mapping) {
      const polygons = mapping[1]
      polygons.push(polygon)
    } else {
      polygonsPerPlane.push([poly3.plane(polygon), [polygon]])
    }
  })

  let destpolygons = []
  polygonsPerPlane.forEach((mapping) => {
    const sourcepolygons = mapping[1]
    const retesselayedpolygons = reTesselateCoplanarPolygons(sourcepolygons)
    destpolygons = destpolygons.concat(retesselayedpolygons)
  })

  const result = geom3.create(destpolygons)
  result.isRetesselated = true

  return result
}

module.exports = retessellate


/***/ }),

/***/ 34527:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

const measureEpsilon = __webpack_require__(85768)

const snapPolygons = __webpack_require__(28309)

const snapPath2 = (geometry) => {
  const epsilon = measureEpsilon(geometry)
  const points = path2.toPoints(geometry)
  const newpoints = points.map((point) => vec2.snap(vec2.create(), point, epsilon))
  // snap can produce duplicate points, remove those
  return path2.create(newpoints)
}

const snapGeom2 = (geometry) => {
  const epsilon = measureEpsilon(geometry)
  const sides = geom2.toSides(geometry)
  let newsides = sides.map((side) => [vec2.snap(vec2.create(), side[0], epsilon), vec2.snap(vec2.create(), side[1], epsilon)])
  // snap can produce sides with zero (0) length, remove those
  newsides = newsides.filter((side) => !vec2.equals(side[0], side[1]))
  return geom2.create(newsides)
}

const snapGeom3 = (geometry) => {
  const epsilon = measureEpsilon(geometry)
  const polygons = geom3.toPolygons(geometry)
  const newpolygons = snapPolygons(epsilon, polygons)
  return geom3.create(newpolygons)
}

/**
 * Snap the given geometries to the overall precision (epsilon) of the geometry.
 * @see measurements.measureEpsilon()
 * @param {...Object} geometries - the geometries to snap
 * @return {Object|Array} the snapped geometry, or a list of snapped geometries
 * @alias module:modeling/modifiers.snap
 */
const snap = (...geometries) => {
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('wrong number of arguments')

  const results = geometries.map((geometry) => {
    if (path2.isA(geometry)) return snapPath2(geometry)
    if (geom2.isA(geometry)) return snapGeom2(geometry)
    if (geom3.isA(geometry)) return snapGeom3(geometry)
    return geometry
  })
  return results.length === 1 ? results[0] : results
}

module.exports = snap


/***/ }),

/***/ 28309:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)

const poly3 = __webpack_require__(71516)

const isValidPoly3 = (epsilon, polygon) => {
  const area = Math.abs(poly3.measureArea(polygon))
  return (Number.isFinite(area) && area > epsilon)
}

/*
 * Snap the given list of polygons to the epsilon.
 */
const snapPolygons = (epsilon, polygons) => {
  let newpolygons = polygons.map((polygon) => {
    const snapvertices = polygon.vertices.map((vertice) => vec3.snap(vec3.create(), vertice, epsilon))
    // only retain unique vertices
    const newvertices = []
    for (let i = 0; i < snapvertices.length; i++) {
      const j = (i + 1) % snapvertices.length
      if (!vec3.equals(snapvertices[i], snapvertices[j])) newvertices.push(snapvertices[i])
    }
    const newpolygon = poly3.create(newvertices)
    if (polygon.color) newpolygon.color = polygon.color
    return newpolygon
  })
  // snap can produce polygons with zero (0) area, remove those
  const epsilonArea = (epsilon * epsilon * Math.sqrt(3) / 4)
  newpolygons = newpolygons.filter((polygon) => isValidPoly3(epsilonArea, polygon))
  return newpolygons
}

module.exports = snapPolygons


/***/ }),

/***/ 40126:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec3 = __webpack_require__(14171)
const poly3 = __webpack_require__(71516)

const triangulatePolygon = (epsilon, polygon, triangles) => {
  const nv = polygon.vertices.length
  if (nv > 3) {
    if (nv > 4) {
      // split the polygon using a midpoint
      const midpoint = [0, 0, 0]
      polygon.vertices.forEach((vertice) => vec3.add(midpoint, midpoint, vertice))
      vec3.snap(midpoint, vec3.divide(midpoint, midpoint, [nv, nv, nv]), epsilon)
      for (let i = 0; i < nv; i++) {
        const poly = poly3.create([midpoint, polygon.vertices[i], polygon.vertices[(i + 1) % nv]])
        if (polygon.color) poly.color = polygon.color
        triangles.push(poly)
      }
      return
    }
    // exactly 4 vertices, use simple triangulation
    const poly0 = poly3.create([polygon.vertices[0], polygon.vertices[1], polygon.vertices[2]])
    const poly1 = poly3.create([polygon.vertices[0], polygon.vertices[2], polygon.vertices[3]])
    if (polygon.color) {
      poly0.color = polygon.color
      poly1.color = polygon.color
    }
    triangles.push(poly0, poly1)
    return
  }
  // exactly 3 vertices, so return the original
  triangles.push(polygon)
}

/*
 * Convert the given polygons into a list of triangles (polygons with 3 vertices).
 * NOTE: this is possible because poly3 is CONVEX by definition
 */
const triangulatePolygons = (epsilon, polygons) => {
  const triangles = []
  polygons.forEach((polygon) => {
    triangulatePolygon(epsilon, polygon, triangles)
  })
  return triangles
}

module.exports = triangulatePolygons


/***/ }),

/***/ 58747:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)
const padArrayToLength = __webpack_require__(91358)
const measureAggregateBoundingBox = __webpack_require__(50823)
const { translate } = __webpack_require__(63633)

const validateOptions = (options) => {
  if (!Array.isArray(options.modes) || options.modes.length > 3) throw new Error('align(): modes must be an array of length <= 3')
  options.modes = padArrayToLength(options.modes, 'none', 3)
  if (options.modes.filter((mode) => ['center', 'max', 'min', 'none'].includes(mode)).length !== 3) throw new Error('align(): all modes must be one of "center", "max" or "min"')

  if (!Array.isArray(options.relativeTo) || options.relativeTo.length > 3) throw new Error('align(): relativeTo must be an array of length <= 3')
  options.relativeTo = padArrayToLength(options.relativeTo, 0, 3)
  if (options.relativeTo.filter((alignVal) => (Number.isFinite(alignVal) || alignVal == null)).length !== 3) throw new Error('align(): all relativeTo values must be a number, or null.')

  if (typeof options.grouped !== 'boolean') throw new Error('align(): grouped must be a boolean value.')

  return options
}

const populateRelativeToFromBounds = (relativeTo, modes, bounds) => {
  for (let i = 0; i < 3; i++) {
    if (relativeTo[i] == null) {
      if (modes[i] === 'center') {
        relativeTo[i] = (bounds[0][i] + bounds[1][i]) / 2
      } else if (modes[i] === 'max') {
        relativeTo[i] = bounds[1][i]
      } else if (modes[i] === 'min') {
        relativeTo[i] = bounds[0][i]
      }
    }
  }
  return relativeTo
}

const alignGeometries = (geometry, modes, relativeTo) => {
  const bounds = measureAggregateBoundingBox(geometry)
  const translation = [0, 0, 0]
  for (let i = 0; i < 3; i++) {
    if (modes[i] === 'center') {
      translation[i] = relativeTo[i] - (bounds[0][i] + bounds[1][i]) / 2
    } else if (modes[i] === 'max') {
      translation[i] = relativeTo[i] - bounds[1][i]
    } else if (modes[i] === 'min') {
      translation[i] = relativeTo[i] - bounds[0][i]
    }
  }

  return translate(translation, geometry)
}

/**
 * Align the boundaries of the given geometries using the given options.
 * @param {Object} options - options for aligning
 * @param {Array} [options.modes = ['center', 'center', 'min']] - the point on the geometries to align to for each axis. Valid options are "center", "max", "min", and "none".
 * @param {Array} [options.relativeTo = [0,0,0]] - The point one each axis on which to align the geometries upon.  If the value is null, then the corresponding value from the group's bounding box is used.
 * @param {Boolean} [options.grouped = false] - if true, transform all geometries by the same amount, maintaining the relative positions to each other.
 * @param {...Object} geometries - the geometries to align
 * @return {Object|Array} the aligned geometry, or a list of aligned geometries
 * @alias module:modeling/transforms.align
 *
 * @example
 * let alignedGeometries = align({modes: ['min', 'center', 'none'], relativeTo: [10, null, 10], grouped: true }, geometries)
 */
const align = (options, ...geometries) => {
  const defaults = {
    modes: ['center', 'center', 'min'],
    relativeTo: [0, 0, 0],
    grouped: false
  }
  options = Object.assign({}, defaults, options)

  options = validateOptions(options)
  let { modes, relativeTo, grouped } = options
  geometries = flatten(geometries)
  if (geometries.length === 0) throw new Error('align(): No geometries were provided to act upon')

  if (relativeTo.filter((val) => val == null).length) {
    const bounds = measureAggregateBoundingBox(geometries)
    relativeTo = populateRelativeToFromBounds(relativeTo, modes, bounds)
  }
  if (grouped) {
    geometries = alignGeometries(geometries, modes, relativeTo)
  } else {
    geometries = geometries.map((geometry) => alignGeometries(geometry, modes, relativeTo))
  }
  return geometries.length === 1 ? geometries[0] : geometries
}

module.exports = align


/***/ }),

/***/ 13313:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

const measureBoundingBox = __webpack_require__(27027)

const { translate } = __webpack_require__(63633)

const centerGeometry = (options, object) => {
  const defaults = {
    axes: [true, true, true],
    relativeTo: [0, 0, 0]
  }
  const { axes, relativeTo } = Object.assign({}, defaults, options)

  const bounds = measureBoundingBox(object)
  const offset = [0, 0, 0]
  if (axes[0]) offset[0] = relativeTo[0] - (bounds[0][0] + ((bounds[1][0] - bounds[0][0]) / 2))
  if (axes[1]) offset[1] = relativeTo[1] - (bounds[0][1] + ((bounds[1][1] - bounds[0][1]) / 2))
  if (axes[2]) offset[2] = relativeTo[2] - (bounds[0][2] + ((bounds[1][2] - bounds[0][2]) / 2))
  return translate(offset, object)
}

/**
 * Center the given objects using the given options.
 * @param {Object} options - options for centering
 * @param {Array} [options.axes=[true,true,true]] - axis of which to center, true or false
 * @param {Array} [options.relativeTo=[0,0,0]] - relative point of which to center the objects
 * @param {...Object} objects - the objects to center
 * @return {Object|Array} the centered object, or a list of centered objects
 * @alias module:modeling/transforms.center
 *
 * @example
 * let myshape = center({axes: [true,false,false]}, sphere()) // center about the X axis
 */
const center = (options, ...objects) => {
  const defaults = {
    axes: [true, true, true],
    relativeTo: [0, 0, 0]
  // TODO: Add additional 'methods' of centering: midpoint, centroid
  }
  const { axes, relativeTo } = Object.assign({}, defaults, options)

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')
  if (relativeTo.length !== 3) throw new Error('relativeTo must be an array of length 3')

  options = { axes, relativeTo }

  const results = objects.map((object) => {
    if (path2.isA(object)) return centerGeometry(options, object)
    if (geom2.isA(object)) return centerGeometry(options, object)
    if (geom3.isA(object)) return centerGeometry(options, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

/**
 * Center the given objects about the X axis.
 * @param {...Object} objects - the objects to center
 * @return {Object|Array} the centered object, or a list of centered objects
 * @alias module:modeling/transforms.centerX
 */
const centerX = (...objects) => center({ axes: [true, false, false] }, objects)

/**
 * Center the given objects about the Y axis.
 * @param {...Object} objects - the objects to center
 * @return {Object|Array} the centered object, or a list of centered objects
 * @alias module:modeling/transforms.centerY
 */
const centerY = (...objects) => center({ axes: [false, true, false] }, objects)

/**
 * Center the given objects about the Z axis.
 * @param {...Object} objects - the objects to center
 * @return {Object|Array} the centered object, or a list of centered objects
 * @alias module:modeling/transforms.centerZ
 */
const centerZ = (...objects) => center({ axes: [false, false, true] }, objects)

module.exports = {
  center,
  centerX,
  centerY,
  centerZ
}


/***/ }),

/***/ 52240:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * All shapes (primitives or the results of operations) can be transformed, such as scaled or rotated.
 * In all cases, the function returns the results, and never changes the original shapes.
 * @module modeling/transforms
 * @example
 * const { center, rotateX, translate } = require('@jscad/modeling').transforms
 */
module.exports = {
  align: __webpack_require__(58747),

  center: (__webpack_require__(13313).center),
  centerX: (__webpack_require__(13313).centerX),
  centerY: (__webpack_require__(13313).centerY),
  centerZ: (__webpack_require__(13313).centerZ),

  mirror: (__webpack_require__(59199).mirror),
  mirrorX: (__webpack_require__(59199).mirrorX),
  mirrorY: (__webpack_require__(59199).mirrorY),
  mirrorZ: (__webpack_require__(59199).mirrorZ),

  rotate: (__webpack_require__(50813).rotate),
  rotateX: (__webpack_require__(50813).rotateX),
  rotateY: (__webpack_require__(50813).rotateY),
  rotateZ: (__webpack_require__(50813).rotateZ),

  scale: (__webpack_require__(30173).scale),
  scaleX: (__webpack_require__(30173).scaleX),
  scaleY: (__webpack_require__(30173).scaleY),
  scaleZ: (__webpack_require__(30173).scaleZ),

  transform: __webpack_require__(58380),

  translate: (__webpack_require__(63633).translate),
  translateX: (__webpack_require__(63633).translateX),
  translateY: (__webpack_require__(63633).translateY),
  translateZ: (__webpack_require__(63633).translateZ)
}


/***/ }),

/***/ 59199:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const mat4 = __webpack_require__(36028)
const plane = __webpack_require__(68646)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

/**
 * Mirror the given objects using the given options.
 * @param {Object} options - options for mirror
 * @param {Array} [options.origin=[0,0,0]] - the origin of the plane
 * @param {Array} [options.normal=[0,0,1]] - the normal vector of the plane
 * @param {...Object} objects - the objects to mirror
 * @return {Object|Array} the mirrored object, or a list of mirrored objects
 * @alias module:modeling/transforms.mirror
 *
 * @example
 * let myshape = mirror({normal: [0,0,10]}, cube({center: [0,0,15], radius: [20, 25, 5]}))
 */
const mirror = (options, ...objects) => {
  const defaults = {
    origin: [0, 0, 0],
    normal: [0, 0, 1] // Z axis
  }
  const { origin, normal } = Object.assign({}, defaults, options)

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  const planeOfMirror = plane.fromNormalAndPoint(plane.create(), normal, origin)
  // verify the plane, i.e. check that the given normal was valid
  if (Number.isNaN(planeOfMirror[0])) {
    throw new Error('the given origin and normal do not define a proper plane')
  }

  const matrix = mat4.mirrorByPlane(mat4.create(), planeOfMirror)

  const results = objects.map((object) => {
    if (path2.isA(object)) return path2.transform(matrix, object)
    if (geom2.isA(object)) return geom2.transform(matrix, object)
    if (geom3.isA(object)) return geom3.transform(matrix, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

/**
 * Mirror the given objects about the X axis.
 * @param {...Object} objects - the objects to mirror
 * @return {Object|Array} the mirrored object, or a list of mirrored objects
 * @alias module:modeling/transforms.mirrorX
 */
const mirrorX = (...objects) => mirror({ normal: [1, 0, 0] }, objects)

/**
 * Mirror the given objects about the Y axis.
 * @param {...Object} objects - the geometries to mirror
 * @return {Object|Array} the mirrored object, or a list of mirrored objects
 * @alias module:modeling/transforms.mirrorY
 */
const mirrorY = (...objects) => mirror({ normal: [0, 1, 0] }, objects)

/**
 * Mirror the given objects about the Z axis.
 * @param {...Object} objects - the geometries to mirror
 * @return {Object|Array} the mirrored object, or a list of mirrored objects
 * @alias module:modeling/transforms.mirrorZ
 */
const mirrorZ = (...objects) => mirror({ normal: [0, 0, 1] }, objects)

module.exports = {
  mirror,
  mirrorX,
  mirrorY,
  mirrorZ
}


/***/ }),

/***/ 50813:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const mat4 = __webpack_require__(36028)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

/**
 * Rotate the given objects using the given options.
 * @param {Array} angles - angle (RADIANS) of rotations about X, Y, and Z axis
 * @param {...Object} objects - the objects to rotate
 * @return {Object|Array} the rotated object, or a list of rotated objects
 * @alias module:modeling/transforms.rotate
 *
 * @example
 * const newsphere = rotate([TAU / 8, 0, 0], sphere())
 */
const rotate = (angles, ...objects) => {
  if (!Array.isArray(angles)) throw new Error('angles must be an array')

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  // adjust the angles if necessary
  angles = angles.slice() // don't modify the original
  while (angles.length < 3) angles.push(0)

  const yaw = angles[2]
  const pitch = angles[1]
  const roll = angles[0]

  const matrix = mat4.fromTaitBryanRotation(mat4.create(), yaw, pitch, roll)

  const results = objects.map((object) => {
    if (path2.isA(object)) return path2.transform(matrix, object)
    if (geom2.isA(object)) return geom2.transform(matrix, object)
    if (geom3.isA(object)) return geom3.transform(matrix, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

/**
 * Rotate the given objects about the X axis, using the given options.
 * @param {Number} angle - angle (RADIANS) of rotations about X
 * @param {...Object} objects - the objects to rotate
 * @return {Object|Array} the rotated object, or a list of rotated objects
 * @alias module:modeling/transforms.rotateX
 */
const rotateX = (angle, ...objects) => rotate([angle, 0, 0], objects)

/**
 * Rotate the given objects about the Y axis, using the given options.
 * @param {Number} angle - angle (RADIANS) of rotations about Y
 * @param {...Object} objects - the objects to rotate
 * @return {Object|Array} the rotated object, or a list of rotated objects
 * @alias module:modeling/transforms.rotateY
 */
const rotateY = (angle, ...objects) => rotate([0, angle, 0], objects)

/**
 * Rotate the given objects about the Z axis, using the given options.
 * @param {Number} angle - angle (RADIANS) of rotations about Z
 * @param {...Object} objects - the objects to rotate
 * @return {Object|Array} the rotated object, or a list of rotated objects
 * @alias module:modeling/transforms.rotateZ
 */
const rotateZ = (angle, ...objects) => rotate([0, 0, angle], objects)

module.exports = {
  rotate,
  rotateX,
  rotateY,
  rotateZ
}


/***/ }),

/***/ 30173:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const mat4 = __webpack_require__(36028)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

/**
 * Scale the given objects using the given options.
 * @param {Array} factors - X, Y, Z factors by which to scale the objects
 * @param {...Object} objects - the objects to scale
 * @return {Object|Array} the scaled object, or a list of scaled objects
 * @alias module:modeling/transforms.scale
 *
 * @example
 * let myshape = scale([5, 0, 10], sphere())
 */
const scale = (factors, ...objects) => {
  if (!Array.isArray(factors)) throw new Error('factors must be an array')

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  // adjust the factors if necessary
  factors = factors.slice() // don't modify the original
  while (factors.length < 3) factors.push(1)

  if (factors[0] <= 0 || factors[1] <= 0 || factors[2] <= 0) throw new Error('factors must be positive')

  const matrix = mat4.fromScaling(mat4.create(), factors)

  const results = objects.map((object) => {
    if (path2.isA(object)) return path2.transform(matrix, object)
    if (geom2.isA(object)) return geom2.transform(matrix, object)
    if (geom3.isA(object)) return geom3.transform(matrix, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

/**
 * Scale the given objects about the X axis using the given options.
 * @param {Number} factor - X factor by which to scale the objects
 * @param {...Object} objects - the objects to scale
 * @return {Object|Array} the scaled object, or a list of scaled objects
 * @alias module:modeling/transforms.scaleX
 */
const scaleX = (factor, ...objects) => scale([factor, 1, 1], objects)

/**
 * Scale the given objects about the Y axis using the given options.
 * @param {Number} factor - Y factor by which to scale the objects
 * @param {...Object} objects - the objects to scale
 * @return {Object|Array} the scaled object, or a list of scaled objects
 * @alias module:modeling/transforms.scaleY
 */
const scaleY = (factor, ...objects) => scale([1, factor, 1], objects)

/**
 * Scale the given objects about the Z axis using the given options.
 * @param {Number} factor - Z factor by which to scale the objects
 * @param {...Object} objects - the objects to scale
 * @return {Object|Array} the scaled object, or a list of scaled objects
 * @alias module:modeling/transforms.scaleZ
 */
const scaleZ = (factor, ...objects) => scale([1, 1, factor], objects)

module.exports = {
  scale,
  scaleX,
  scaleY,
  scaleZ
}


/***/ }),

/***/ 58380:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

/**
 * Transform the given objects using the given matrix.
 * @param {mat4} matrix - a transformation matrix
 * @param {...Object} objects - the objects to transform
 * @return {Object|Array} the transformed object, or a list of transformed objects
 * @alias module:modeling/transforms.transform
 *
 * @example
 * const newsphere = transform(mat4.rotateX(TAU / 8), sphere())
 */
const transform = (matrix, ...objects) => {
  // TODO how to check that the matrix is REAL?

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  const results = objects.map((object) => {
    if (path2.isA(object)) return path2.transform(matrix, object)
    if (geom2.isA(object)) return geom2.transform(matrix, object)
    if (geom3.isA(object)) return geom3.transform(matrix, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

module.exports = transform


/***/ }),

/***/ 63633:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const flatten = __webpack_require__(61979)

const mat4 = __webpack_require__(36028)

const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

/**
 * Translate the given objects using the given options.
 * @param {Array} offset - offset (vector) of which to translate the objects
 * @param {...Object} objects - the objects to translate
 * @return {Object|Array} the translated object, or a list of translated objects
 * @alias module:modeling/transforms.translate
 *
 * @example
 * const newsphere = translate([5, 0, 10], sphere())
 */
const translate = (offset, ...objects) => {
  if (!Array.isArray(offset)) throw new Error('offset must be an array')

  objects = flatten(objects)
  if (objects.length === 0) throw new Error('wrong number of arguments')

  // adjust the offset if necessary
  offset = offset.slice() // don't modify the original
  while (offset.length < 3) offset.push(0)

  const matrix = mat4.fromTranslation(mat4.create(), offset)

  const results = objects.map((object) => {
    if (path2.isA(object)) return path2.transform(matrix, object)
    if (geom2.isA(object)) return geom2.transform(matrix, object)
    if (geom3.isA(object)) return geom3.transform(matrix, object)
    return object
  })
  return results.length === 1 ? results[0] : results
}

/**
 * Translate the given objects along the X axis using the given options.
 * @param {Number} offset - X offset of which to translate the objects
 * @param {...Object} objects - the objects to translate
 * @return {Object|Array} the translated object, or a list of translated objects
 * @alias module:modeling/transforms.translateX
 */
const translateX = (offset, ...objects) => translate([offset, 0, 0], objects)

/**
 * Translate the given objects along the Y axis using the given options.
 * @param {Number} offset - Y offset of which to translate the geometries
 * @param {...Object} objects - the objects to translate
 * @return {Object|Array} the translated object, or a list of translated objects
 * @alias module:modeling/transforms.translateY
 */
const translateY = (offset, ...objects) => translate([0, offset, 0], objects)

/**
 * Translate the given objects along the Z axis using the given options.
 * @param {Number} offset - Z offset of which to translate the geometries
 * @param {...Object} objects - the objects to translate
 * @return {Object|Array} the translated object, or a list of translated objects
 * @alias module:modeling/transforms.translateZ
 */
const translateZ = (offset, ...objects) => translate([0, 0, offset], objects)

module.exports = {
  translate,
  translateX,
  translateY,
  translateZ
}


/***/ }),

/***/ 75300:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const vec2 = __webpack_require__(4138)

const path2 = __webpack_require__(84345)

const { isGT, isGTE, isNumberArray } = __webpack_require__(77326)

/**
 * Construct an arc in two dimensional space where all points are at the same distance from the center.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0]] - center of arc
 * @param {Number} [options.radius=1] - radius of arc
 * @param {Number} [options.startAngle=0] - starting angle of the arc, in radians
 * @param {Number} [options.endAngle=TAU] - ending angle of the arc, in radians
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @param {Boolean} [options.makeTangent=false] - adds line segments at both ends of the arc to ensure that the gradients at the edges are tangent
 * @returns {path2} new 2D path
 * @alias module:modeling/primitives.arc
 */
const arc = (options) => {
  const defaults = {
    center: [0, 0],
    radius: 1,
    startAngle: 0,
    endAngle: TAU,
    makeTangent: false,
    segments: 32
  }
  let { center, radius, startAngle, endAngle, makeTangent, segments } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')
  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')
  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')
  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')
  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')

  startAngle = startAngle % TAU
  endAngle = endAngle % TAU

  let rotation = TAU
  if (startAngle < endAngle) {
    rotation = endAngle - startAngle
  }
  if (startAngle > endAngle) {
    rotation = endAngle + (TAU - startAngle)
  }

  const minangle = Math.acos(((radius * radius) + (radius * radius) - (EPS * EPS)) / (2 * radius * radius))

  const centerv = vec2.clone(center)
  let point
  const pointArray = []
  if (rotation < minangle) {
    // there is no rotation, just a single point
    point = vec2.fromAngleRadians(vec2.create(), startAngle)
    vec2.scale(point, point, radius)
    vec2.add(point, point, centerv)
    pointArray.push(point)
  } else {
    // note: add one additional step to acheive full rotation
    const numsteps = Math.max(1, Math.floor(segments * (rotation / TAU))) + 1
    let edgestepsize = numsteps * 0.5 / rotation // step size for half a degree
    if (edgestepsize > 0.25) edgestepsize = 0.25

    const totalsteps = makeTangent ? (numsteps + 2) : numsteps
    for (let i = 0; i <= totalsteps; i++) {
      let step = i
      if (makeTangent) {
        step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize
        if (step < 0) step = 0
        if (step > numsteps) step = numsteps
      }
      const angle = startAngle + (step * (rotation / numsteps))
      point = vec2.fromAngleRadians(vec2.create(), angle)
      vec2.scale(point, point, radius)
      vec2.add(point, point, centerv)
      pointArray.push(point)
    }
  }
  return path2.fromPoints({ closed: false }, pointArray)
}

module.exports = arc


/***/ }),

/***/ 31807:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)

const ellipse = __webpack_require__(96887)

const { isGT } = __webpack_require__(77326)

/**
 * Construct a circle in two dimensional space where all points are at the same distance from the center.
 * @see [ellipse]{@link module:modeling/primitives.ellipse} for more options
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0]] - center of circle
 * @param {Number} [options.radius=1] - radius of circle
 * @param {Number} [options.startAngle=0] - start angle of circle, in radians
 * @param {Number} [options.endAngle=TAU] - end angle of circle, in radians
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.circle
 * @example
 * let myshape = circle({radius: 10})
 */
const circle = (options) => {
  const defaults = {
    center: [0, 0],
    radius: 1,
    startAngle: 0,
    endAngle: TAU,
    segments: 32
  }
  let { center, radius, startAngle, endAngle, segments } = Object.assign({}, defaults, options)

  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')

  radius = [radius, radius]

  return ellipse({ center, radius, startAngle, endAngle, segments })
}

module.exports = circle


/***/ }),

/***/ 77326:
/***/ ((module) => {

// verify that the array has the given dimension, and contains Number values
const isNumberArray = (array, dimension) => {
  if (Array.isArray(array) && array.length >= dimension) {
    return array.every((n) => Number.isFinite(n))
  }
  return false
}

// verify that the value is a Number greater than the constant
const isGT = (value, constant) => (Number.isFinite(value) && value > constant)

// verify that the value is a Number greater than or equal to the constant
const isGTE = (value, constant) => (Number.isFinite(value) && value >= constant)

module.exports = {
  isNumberArray,
  isGT,
  isGTE
}


/***/ }),

/***/ 89451:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const cuboid = __webpack_require__(87071)

const { isGT } = __webpack_require__(77326)

/**
 * Construct an axis-aligned solid cube in three dimensional space with six square faces.
 * @see [cuboid]{@link module:modeling/primitives.cuboid} for more options
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of cube
 * @param {Number} [options.size=2] - dimension of cube
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.cube
 * @example
 * let myshape = cube({size: 10})
 */
const cube = (options) => {
  const defaults = {
    center: [0, 0, 0],
    size: 2
  }
  let { center, size } = Object.assign({}, defaults, options)

  if (!isGT(size, 0)) throw new Error('size must be greater than zero')

  size = [size, size, size]

  return cuboid({ center, size })
}

module.exports = cube


/***/ }),

/***/ 87071:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const { isNumberArray } = __webpack_require__(77326)

/**
 * Construct an axis-aligned solid cuboid in three dimensional space.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of cuboid
 * @param {Array} [options.size=[2,2,2]] - dimensions of cuboid; width, depth, height
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.cuboid
 *
 * @example
 * let myshape = cuboid({size: [5, 10, 5]})
 */
const cuboid = (options) => {
  const defaults = {
    center: [0, 0, 0],
    size: [2, 2, 2]
  }
  const { center, size } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')
  if (!isNumberArray(size, 3)) throw new Error('size must be an array of width, depth and height values')
  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')

  const result = geom3.create(
    // adjust a basic shape to size
    [
      [[0, 4, 6, 2], [-1, 0, 0]],
      [[1, 3, 7, 5], [+1, 0, 0]],
      [[0, 1, 5, 4], [0, -1, 0]],
      [[2, 6, 7, 3], [0, +1, 0]],
      [[0, 2, 3, 1], [0, 0, -1]],
      [[4, 5, 7, 6], [0, 0, +1]]
    ].map((info) => {
      const points = info[0].map((i) => {
        const pos = [
          center[0] + (size[0] / 2) * (2 * !!(i & 1) - 1),
          center[1] + (size[1] / 2) * (2 * !!(i & 2) - 1),
          center[2] + (size[2] / 2) * (2 * !!(i & 4) - 1)
        ]
        return pos
      })
      return poly3.create(points)
    })
  )
  return result
}

module.exports = cuboid


/***/ }),

/***/ 35382:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const cylinderElliptic = __webpack_require__(43749)

const { isGT } = __webpack_require__(77326)

/**
 * Construct a Z axis-aligned cylinder in three dimensional space.
 * @see [cylinderElliptic]{@link module:modeling/primitives.cylinderElliptic} for more options
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of cylinder
 * @param {Number} [options.height=2] - height of cylinder
 * @param {Number} [options.radius=1] - radius of cylinder (at both start and end)
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @returns {geom3} new geometry
 * @alias module:modeling/primitives.cylinder
 *
 * @example
 * let myshape = cylinder({height: 2, radius: 10})
 */
const cylinder = (options) => {
  const defaults = {
    center: [0, 0, 0],
    height: 2,
    radius: 1,
    segments: 32
  }
  const { center, height, radius, segments } = Object.assign({}, defaults, options)

  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')

  const newoptions = {
    center,
    height,
    startRadius: [radius, radius],
    endRadius: [radius, radius],
    segments
  }

  return cylinderElliptic(newoptions)
}

module.exports = cylinder


/***/ }),

/***/ 43749:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const vec3 = __webpack_require__(14171)

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const { sin, cos } = __webpack_require__(84580)

const { isGT, isGTE, isNumberArray } = __webpack_require__(77326)

/**
 * Construct a Z axis-aligned elliptic cylinder in three dimensional space.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of cylinder
 * @param {Number} [options.height=2] - height of cylinder
 * @param {Array} [options.startRadius=[1,1]] - radius of rounded start, must be two dimensional array
 * @param {Number} [options.startAngle=0] - start angle of cylinder, in radians
 * @param {Array} [options.endRadius=[1,1]] - radius of rounded end, must be two dimensional array
 * @param {Number} [options.endAngle=TAU] - end angle of cylinder, in radians
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @returns {geom3} new geometry
 * @alias module:modeling/primitives.cylinderElliptic
 *
 * @example
 * let myshape = cylinderElliptic({height: 2, startRadius: [10,5], endRadius: [8,3]})
 */
const cylinderElliptic = (options) => {
  const defaults = {
    center: [0, 0, 0],
    height: 2,
    startRadius: [1, 1],
    startAngle: 0,
    endRadius: [1, 1],
    endAngle: TAU,
    segments: 32
  }
  let { center, height, startRadius, startAngle, endRadius, endAngle, segments } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')
  if (!isGT(height, 0)) throw new Error('height must be greater then zero')
  if (!isNumberArray(startRadius, 2)) throw new Error('startRadius must be an array of X and Y values')
  if (!startRadius.every((n) => n >= 0)) throw new Error('startRadius values must be positive')
  if (!isNumberArray(endRadius, 2)) throw new Error('endRadius must be an array of X and Y values')
  if (!endRadius.every((n) => n >= 0)) throw new Error('endRadius values must be positive')
  if (endRadius.every((n) => n === 0) && startRadius.every((n) => n === 0)) throw new Error('at least one radius must be positive')
  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')
  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')
  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')

  startAngle = startAngle % TAU
  endAngle = endAngle % TAU

  let rotation = TAU
  if (startAngle < endAngle) {
    rotation = endAngle - startAngle
  }
  if (startAngle > endAngle) {
    rotation = endAngle + (TAU - startAngle)
  }

  const minradius = Math.min(startRadius[0], startRadius[1], endRadius[0], endRadius[1])
  const minangle = Math.acos(((minradius * minradius) + (minradius * minradius) - (EPS * EPS)) /
                            (2 * minradius * minradius))
  if (rotation < minangle) throw new Error('startAngle and endAngle do not define a significant rotation')

  const slices = Math.floor(segments * (rotation / TAU))

  const start = vec3.fromValues(0, 0, -(height / 2))
  const end = vec3.fromValues(0, 0, height / 2)
  const ray = vec3.subtract(vec3.create(), end, start)

  const axisX = vec3.fromValues(1, 0, 0)
  const axisY = vec3.fromValues(0, 1, 0)

  const v1 = vec3.create()
  const v2 = vec3.create()
  const v3 = vec3.create()
  const point = (stack, slice, radius) => {
    const angle = slice * rotation + startAngle
    vec3.scale(v1, axisX, radius[0] * cos(angle))
    vec3.scale(v2, axisY, radius[1] * sin(angle))
    vec3.add(v1, v1, v2)

    vec3.scale(v3, ray, stack)
    vec3.add(v3, v3, start)
    return vec3.add(vec3.create(), v1, v3)
  }

  // adjust the points to center
  const fromPoints = (...points) => {
    const newpoints = points.map((point) => vec3.add(vec3.create(), point, center))
    return poly3.create(newpoints)
  }

  const polygons = []
  for (let i = 0; i < slices; i++) {
    const t0 = i / slices
    let t1 = (i + 1) / slices
    // fix rounding error when rotating TAU radians
    if (rotation === TAU && i === slices - 1) t1 = 0

    if (endRadius[0] === startRadius[0] && endRadius[1] === startRadius[1]) {
      polygons.push(fromPoints(start, point(0, t1, endRadius), point(0, t0, endRadius)))
      polygons.push(fromPoints(point(0, t1, endRadius), point(1, t1, endRadius), point(1, t0, endRadius), point(0, t0, endRadius)))
      polygons.push(fromPoints(end, point(1, t0, endRadius), point(1, t1, endRadius)))
    } else {
      if (startRadius[0] > 0 && startRadius[1] > 0) {
        polygons.push(fromPoints(start, point(0, t1, startRadius), point(0, t0, startRadius)))
      }
      if (startRadius[0] > 0 || startRadius[1] > 0) {
        polygons.push(fromPoints(point(0, t0, startRadius), point(0, t1, startRadius), point(1, t0, endRadius)))
      }
      if (endRadius[0] > 0 && endRadius[1] > 0) {
        polygons.push(fromPoints(end, point(1, t0, endRadius), point(1, t1, endRadius)))
      }
      if (endRadius[0] > 0 || endRadius[1] > 0) {
        polygons.push(fromPoints(point(1, t0, endRadius), point(0, t1, startRadius), point(1, t1, endRadius)))
      }
    }
  }
  if (rotation < TAU) {
    polygons.push(fromPoints(start, point(0, 0, startRadius), end))
    polygons.push(fromPoints(point(0, 0, startRadius), point(1, 0, endRadius), end))
    polygons.push(fromPoints(start, end, point(0, 1, startRadius)))
    polygons.push(fromPoints(point(0, 1, startRadius), end, point(1, 1, endRadius)))
  }
  const result = geom3.create(polygons)
  return result
}

module.exports = cylinderElliptic


/***/ }),

/***/ 96887:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)

const { sin, cos } = __webpack_require__(84580)

const { isGTE, isNumberArray } = __webpack_require__(77326)

/**
 * Construct an axis-aligned ellipse in two dimensional space.
 * @see https://en.wikipedia.org/wiki/Ellipse
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0]] - center of ellipse
 * @param {Array} [options.radius=[1,1]] - radius of ellipse, along X and Y
 * @param {Number} [options.startAngle=0] - start angle of ellipse, in radians
 * @param {Number} [options.endAngle=TAU] - end angle of ellipse, in radians
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.ellipse
 * @example
 * let myshape = ellipse({radius: [5,10]})
 */
const ellipse = (options) => {
  const defaults = {
    center: [0, 0],
    radius: [1, 1],
    startAngle: 0,
    endAngle: TAU,
    segments: 32
  }
  let { center, radius, startAngle, endAngle, segments } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')
  if (!isNumberArray(radius, 2)) throw new Error('radius must be an array of X and Y values')
  if (!radius.every((n) => n > 0)) throw new Error('radius values must be greater than zero')
  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')
  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')
  if (!isGTE(segments, 3)) throw new Error('segments must be three or more')

  startAngle = startAngle % TAU
  endAngle = endAngle % TAU

  let rotation = TAU
  if (startAngle < endAngle) {
    rotation = endAngle - startAngle
  }
  if (startAngle > endAngle) {
    rotation = endAngle + (TAU - startAngle)
  }

  const minradius = Math.min(radius[0], radius[1])
  const minangle = Math.acos(((minradius * minradius) + (minradius * minradius) - (EPS * EPS)) /
                            (2 * minradius * minradius))
  if (rotation < minangle) throw new Error('startAngle and endAngle do not define a significant rotation')

  segments = Math.floor(segments * (rotation / TAU))

  const centerv = vec2.clone(center)
  const step = rotation / segments // radians per segment

  const points = []
  segments = (rotation < TAU) ? segments + 1 : segments
  for (let i = 0; i < segments; i++) {
    const angle = (step * i) + startAngle
    const point = vec2.fromValues(radius[0] * cos(angle), radius[1] * sin(angle))
    vec2.add(point, centerv, point)
    points.push(point)
  }
  if (rotation < TAU) points.push(centerv)
  return geom2.fromPoints(points)
}

module.exports = ellipse


/***/ }),

/***/ 43109:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)
const vec3 = __webpack_require__(14171)

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const { sin, cos } = __webpack_require__(84580)

const { isGTE, isNumberArray } = __webpack_require__(77326)

/**
 * Construct an axis-aligned ellipsoid in three dimensional space.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of ellipsoid
 * @param {Array} [options.radius=[1,1,1]] - radius of ellipsoid, along X, Y and Z
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @param {Array} [options.axes] -  an array with three vectors for the x, y and z base vectors
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.ellipsoid
 *
 * @example
 * let myshape = ellipsoid({radius: [5, 10, 20]})
*/
const ellipsoid = (options) => {
  const defaults = {
    center: [0, 0, 0],
    radius: [1, 1, 1],
    segments: 32,
    axes: [[1, 0, 0], [0, -1, 0], [0, 0, 1]]
  }
  const { center, radius, segments, axes } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')
  if (!isNumberArray(radius, 3)) throw new Error('radius must be an array of X, Y and Z values')
  if (!radius.every((n) => n > 0)) throw new Error('radius values must be greater than zero')
  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')

  const xvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[0]), radius[0])
  const yvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[1]), radius[1])
  const zvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[2]), radius[2])

  const qsegments = Math.round(segments / 4)
  let prevcylinderpoint
  const polygons = []
  const p1 = vec3.create()
  const p2 = vec3.create()
  for (let slice1 = 0; slice1 <= segments; slice1++) {
    const angle = TAU * slice1 / segments
    const cylinderpoint = vec3.add(vec3.create(), vec3.scale(p1, xvector, cos(angle)), vec3.scale(p2, yvector, sin(angle)))
    if (slice1 > 0) {
      let prevcospitch, prevsinpitch
      for (let slice2 = 0; slice2 <= qsegments; slice2++) {
        const pitch = TAU / 4 * slice2 / qsegments
        const cospitch = cos(pitch)
        const sinpitch = sin(pitch)
        if (slice2 > 0) {
          let points = []
          let point
          point = vec3.subtract(vec3.create(), vec3.scale(p1, prevcylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))
          points.push(vec3.add(point, point, center))
          point = vec3.subtract(vec3.create(), vec3.scale(p1, cylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))
          points.push(vec3.add(point, point, center))
          if (slice2 < qsegments) {
            point = vec3.subtract(vec3.create(), vec3.scale(p1, cylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))
            points.push(vec3.add(point, point, center))
          }
          point = vec3.subtract(vec3.create(), vec3.scale(p1, prevcylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))
          points.push(vec3.add(point, point, center))

          polygons.push(poly3.create(points))

          points = []
          point = vec3.add(vec3.create(), vec3.scale(p1, prevcylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))
          points.push(vec3.add(vec3.create(), center, point))
          point = vec3.add(point, vec3.scale(p1, cylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))
          points.push(vec3.add(vec3.create(), center, point))
          if (slice2 < qsegments) {
            point = vec3.add(point, vec3.scale(p1, cylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))
            points.push(vec3.add(vec3.create(), center, point))
          }
          point = vec3.add(point, vec3.scale(p1, prevcylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))
          points.push(vec3.add(vec3.create(), center, point))
          points.reverse()

          polygons.push(poly3.create(points))
        }
        prevcospitch = cospitch
        prevsinpitch = sinpitch
      }
    }
    prevcylinderpoint = cylinderpoint
  }
  return geom3.create(polygons)
}

module.exports = ellipsoid


/***/ }),

/***/ 7786:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const mat4 = __webpack_require__(36028)
const vec3 = __webpack_require__(14171)

const geom3 = __webpack_require__(18206)

const polyhedron = __webpack_require__(50574)

const { isGT, isGTE } = __webpack_require__(77326)

/**
 * Construct a geodesic sphere based on icosahedron symmetry.
 * @param {Object} [options] - options for construction
 * @param {Number} [options.radius=1] - target radius of sphere
 * @param {Number} [options.frequency=6] - subdivision frequency per face, multiples of 6
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.geodesicSphere
 *
 * @example
 * let myshape = geodesicSphere({radius: 15, frequency: 18})
 */
const geodesicSphere = (options) => {
  const defaults = {
    radius: 1,
    frequency: 6
  }
  let { radius, frequency } = Object.assign({}, defaults, options)

  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')
  if (!isGTE(frequency, 6)) throw new Error('frequency must be six or more')

  // adjust the frequency to base 6
  frequency = Math.floor(frequency / 6)

  const ci = [ // hard-coded data of icosahedron (20 faces, all triangles)
    [0.850651, 0.000000, -0.525731],
    [0.850651, -0.000000, 0.525731],
    [-0.850651, -0.000000, 0.525731],
    [-0.850651, 0.000000, -0.525731],
    [0.000000, -0.525731, 0.850651],
    [0.000000, 0.525731, 0.850651],
    [0.000000, 0.525731, -0.850651],
    [0.000000, -0.525731, -0.850651],
    [-0.525731, -0.850651, -0.000000],
    [0.525731, -0.850651, -0.000000],
    [0.525731, 0.850651, 0.000000],
    [-0.525731, 0.850651, 0.000000]]

  const ti = [[0, 9, 1], [1, 10, 0], [6, 7, 0], [10, 6, 0], [7, 9, 0], [5, 1, 4], [4, 1, 9], [5, 10, 1], [2, 8, 3], [3, 11, 2], [2, 5, 4],
    [4, 8, 2], [2, 11, 5], [3, 7, 6], [6, 11, 3], [8, 7, 3], [9, 8, 4], [11, 10, 5], [10, 11, 6], [8, 9, 7]]

  const geodesicSubDivide = (p, frequency, offset) => {
    const p1 = p[0]
    const p2 = p[1]
    const p3 = p[2]
    let n = offset
    const c = []
    const f = []

    //           p3
    //           /\
    //          /__\     frequency = 3
    //      i  /\  /\
    //        /__\/__\       total triangles = 9 (frequency*frequency)
    //       /\  /\  /\
    //     0/__\/__\/__\
    //    p1 0   j      p2

    for (let i = 0; i < frequency; i++) {
      for (let j = 0; j < frequency - i; j++) {
        const t0 = i / frequency
        const t1 = (i + 1) / frequency
        const s0 = j / (frequency - i)
        const s1 = (j + 1) / (frequency - i)
        const s2 = frequency - i - 1 ? j / (frequency - i - 1) : 1
        const q = []

        q[0] = mix3(mix3(p1, p2, s0), p3, t0)
        q[1] = mix3(mix3(p1, p2, s1), p3, t0)
        q[2] = mix3(mix3(p1, p2, s2), p3, t1)

        // -- normalize
        for (let k = 0; k < 3; k++) {
          const r = vec3.length(q[k])
          for (let l = 0; l < 3; l++) {
            q[k][l] /= r
          }
        }
        c.push(q[0], q[1], q[2])
        f.push([n, n + 1, n + 2]); n += 3

        if (j < frequency - i - 1) {
          const s3 = frequency - i - 1 ? (j + 1) / (frequency - i - 1) : 1
          q[0] = mix3(mix3(p1, p2, s1), p3, t0)
          q[1] = mix3(mix3(p1, p2, s3), p3, t1)
          q[2] = mix3(mix3(p1, p2, s2), p3, t1)

          // -- normalize
          for (let k = 0; k < 3; k++) {
            const r = vec3.length(q[k])
            for (let l = 0; l < 3; l++) {
              q[k][l] /= r
            }
          }
          c.push(q[0], q[1], q[2])
          f.push([n, n + 1, n + 2]); n += 3
        }
      }
    }
    return { points: c, triangles: f, offset: n }
  }

  const mix3 = (a, b, f) => {
    const _f = 1 - f
    const c = []
    for (let i = 0; i < 3; i++) {
      c[i] = a[i] * _f + b[i] * f
    }
    return c
  }

  let points = []
  let faces = []
  let offset = 0

  for (let i = 0; i < ti.length; i++) {
    const g = geodesicSubDivide([ci[ti[i][0]], ci[ti[i][1]], ci[ti[i][2]]], frequency, offset)
    points = points.concat(g.points)
    faces = faces.concat(g.triangles)
    offset = g.offset
  }

  let geometry = polyhedron({ points: points, faces: faces, orientation: 'inward' })
  if (radius !== 1) geometry = geom3.transform(mat4.fromScaling(mat4.create(), [radius, radius, radius]), geometry)
  return geometry
}

module.exports = geodesicSphere


/***/ }),

/***/ 42080:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Primitives provide the building blocks for complex parts.
 * Each primitive is a geometrical object that can be described mathematically, and therefore precise.
 * Primitives can be logically combined, transformed, extruded, etc.
 * @module modeling/primitives
 * @example
 * const { cube, ellipse, star } = require('@jscad/modeling').primitives
 */
module.exports = {
  arc: __webpack_require__(75300),
  circle: __webpack_require__(31807),
  cube: __webpack_require__(89451),
  cuboid: __webpack_require__(87071),
  cylinder: __webpack_require__(35382),
  cylinderElliptic: __webpack_require__(43749),
  ellipse: __webpack_require__(96887),
  ellipsoid: __webpack_require__(43109),
  geodesicSphere: __webpack_require__(7786),
  line: __webpack_require__(76511),
  polygon: __webpack_require__(5470),
  polyhedron: __webpack_require__(50574),
  rectangle: __webpack_require__(46240),
  roundedCuboid: __webpack_require__(85231),
  roundedCylinder: __webpack_require__(56952),
  roundedRectangle: __webpack_require__(29338),
  sphere: __webpack_require__(269),
  square: __webpack_require__(21833),
  star: __webpack_require__(62323),
  torus: __webpack_require__(74559),
  triangle: __webpack_require__(5340)
}


/***/ }),

/***/ 76511:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const path2 = __webpack_require__(84345)

/**
 * Construct a new line in two dimensional space from the given points.
 * The points must be provided as an array, where each element is a 2D point.
 * @param {Array} points - array of points from which to create the path
 * @returns {path2} new 2D path
 * @alias module:modeling/primitives.line
 *
 * @example
 * let myshape = line([[10, 10], [-10, 10]])
 */
const line = (points) => {
  if (!Array.isArray(points)) throw new Error('points must be an array')

  return path2.fromPoints({}, points)
}

module.exports = line


/***/ }),

/***/ 5470:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom2 = __webpack_require__(88934)

/**
 * Construct a polygon in two dimensional space from a list of points, or a list of points and paths.
 * NOTE: The ordering of points is VERY IMPORTANT.
 * @param {Object} options - options for construction
 * @param {Array} options.points - points of the polygon : either flat or nested array of 2D points
 * @param {Array} [options.paths] - paths of the polygon : either flat or nested array of point indexes
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.polygon
 *
 * @example
 * let roof = [[10,11], [0,11], [5,20]]
 * let wall = [[0,0], [10,0], [10,10], [0,10]]
 *
 * let poly = polygon({ points: roof })
 * or
 * let poly = polygon({ points: [roof, wall] })
 * or
 * let poly = polygon({ points: roof, paths: [0, 1, 2] })
 * or
 * let poly = polygon({ points: [roof, wall], paths: [[0, 1, 2], [3, 4, 5, 6]] })
 */
const polygon = (options) => {
  const defaults = {
    points: [],
    paths: []
  }
  const { points, paths } = Object.assign({}, defaults, options)

  if (!(Array.isArray(points) && Array.isArray(paths))) throw new Error('points and paths must be arrays')

  let listofpolys = points
  if (Array.isArray(points[0])) {
    if (!Array.isArray(points[0][0])) {
      // points is an array of something... convert to list
      listofpolys = [points]
    }
  }

  listofpolys.forEach((list, i) => {
    if (!Array.isArray(list)) throw new Error('list of points ' + i + ' must be an array')
    if (list.length < 3) throw new Error('list of points ' + i + ' must contain three or more points')
    list.forEach((point, j) => {
      if (!Array.isArray(point)) throw new Error('list of points ' + i + ', point ' + j + ' must be an array')
      if (point.length < 2) throw new Error('list of points ' + i + ', point ' + j + ' must contain by X and Y values')
    })
  })

  let listofpaths = paths
  if (paths.length === 0) {
    // create a list of paths based on the points
    let count = 0
    listofpaths = listofpolys.map((list) => list.map((point) => count++))
  }

  // flatten the listofpoints for indexed access
  const allpoints = []
  listofpolys.forEach((list) => list.forEach((point) => allpoints.push(point)))

  let sides = []
  listofpaths.forEach((path) => {
    const setofpoints = path.map((index) => allpoints[index])
    const geometry = geom2.fromPoints(setofpoints)
    sides = sides.concat(geom2.toSides(geometry))
  })
  return geom2.create(sides)
}

module.exports = polygon


/***/ }),

/***/ 50574:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const { isNumberArray } = __webpack_require__(77326)

/**
 * Construct a polyhedron in three dimensional space from the given set of 3D points and faces.
 * The faces can define outward or inward facing polygons (orientation).
 * However, each face must define a counter clockwise rotation of points which follows the right hand rule.
 * @param {Object} options - options for construction
 * @param {Array} options.points - list of points in 3D space
 * @param {Array} options.faces - list of faces, where each face is a set of indexes into the points
 * @param {Array} [options.colors=undefined] - list of RGBA colors to apply to each face
 * @param {String} [options.orientation='outward'] - orientation of faces
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.polyhedron
 *
 * @example
 * let mypoints = [ [10, 10, 0], [10, -10, 0], [-10, -10, 0], [-10, 10, 0], [0, 0, 10] ]
 * let myfaces = [ [0, 1, 4], [1, 2, 4], [2, 3, 4], [3, 0, 4], [1, 0, 3], [2, 1, 3] ]
 * let myshape = polyhedron({points: mypoint, faces: myfaces, orientation: 'inward'})
 */
const polyhedron = (options) => {
  const defaults = {
    points: [],
    faces: [],
    colors: undefined,
    orientation: 'outward'
  }
  const { points, faces, colors, orientation } = Object.assign({}, defaults, options)

  if (!(Array.isArray(points) && Array.isArray(faces))) {
    throw new Error('points and faces must be arrays')
  }
  if (points.length < 3) {
    throw new Error('three or more points are required')
  }
  if (faces.length < 1) {
    throw new Error('one or more faces are required')
  }
  if (colors) {
    if (!Array.isArray(colors)) {
      throw new Error('colors must be an array')
    }
    if (colors.length !== faces.length) {
      throw new Error('faces and colors must have the same length')
    }
  }
  points.forEach((point, i) => {
    if (!isNumberArray(point, 3)) throw new Error(`point ${i} must be an array of X, Y, Z values`)
  })
  faces.forEach((face, i) => {
    if (face.length < 3) throw new Error(`face ${i} must contain 3 or more indexes`)
    if (!isNumberArray(face, face.length)) throw new Error(`face ${i} must be an array of numbers`)
  })

  // invert the faces if orientation is inwards, as all internals expect outwarding facing polygons
  if (orientation !== 'outward') {
    faces.forEach((face) => face.reverse())
  }

  const polygons = faces.map((face, findex) => {
    const polygon = poly3.create(face.map((pindex) => points[pindex]))
    if (colors && colors[findex]) polygon.color = colors[findex]
    return polygon
  })

  return geom3.create(polygons)
}

module.exports = polyhedron


/***/ }),

/***/ 46240:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)

const { isNumberArray } = __webpack_require__(77326)

/**
 * Construct an axis-aligned rectangle in two dimensional space with four sides at right angles.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0]] - center of rectangle
 * @param {Array} [options.size=[2,2]] - dimension of rectangle, width and length
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.rectangle
 *
 * @example
 * let myshape = rectangle({size: [10, 20]})
 */
const rectangle = (options) => {
  const defaults = {
    center: [0, 0],
    size: [2, 2]
  }
  const { center, size } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')
  if (!isNumberArray(size, 2)) throw new Error('size must be an array of X and Y values')
  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')

  const point = [size[0] / 2, size[1] / 2]
  const pswap = [point[0], -point[1]]

  const points = [
    vec2.subtract(vec2.create(), center, point),
    vec2.add(vec2.create(), center, pswap),
    vec2.add(vec2.create(), center, point),
    vec2.subtract(vec2.create(), center, pswap)
  ]
  return geom2.fromPoints(points)
}

module.exports = rectangle


/***/ }),

/***/ 85231:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const vec2 = __webpack_require__(4138)
const vec3 = __webpack_require__(14171)

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const { sin, cos } = __webpack_require__(84580)

const { isGT, isGTE, isNumberArray } = __webpack_require__(77326)

const createCorners = (center, size, radius, segments, slice, positive) => {
  const pitch = (TAU / 4) * slice / segments
  const cospitch = cos(pitch)
  const sinpitch = sin(pitch)

  const layersegments = segments - slice
  let layerradius = radius * cospitch
  let layeroffset = size[2] - (radius - (radius * sinpitch))
  if (!positive) layeroffset = (radius - (radius * sinpitch)) - size[2]

  layerradius = layerradius > EPS ? layerradius : 0

  const corner0 = vec3.add(vec3.create(), center, [size[0] - radius, size[1] - radius, layeroffset])
  const corner1 = vec3.add(vec3.create(), center, [radius - size[0], size[1] - radius, layeroffset])
  const corner2 = vec3.add(vec3.create(), center, [radius - size[0], radius - size[1], layeroffset])
  const corner3 = vec3.add(vec3.create(), center, [size[0] - radius, radius - size[1], layeroffset])
  const corner0Points = []
  const corner1Points = []
  const corner2Points = []
  const corner3Points = []
  for (let i = 0; i <= layersegments; i++) {
    const radians = layersegments > 0 ? TAU / 4 * i / layersegments : 0
    const point2d = vec2.fromAngleRadians(vec2.create(), radians)
    vec2.scale(point2d, point2d, layerradius)
    const point3d = vec3.fromVec2(vec3.create(), point2d)
    corner0Points.push(vec3.add(vec3.create(), corner0, point3d))
    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)
    corner1Points.push(vec3.add(vec3.create(), corner1, point3d))
    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)
    corner2Points.push(vec3.add(vec3.create(), corner2, point3d))
    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)
    corner3Points.push(vec3.add(vec3.create(), corner3, point3d))
  }
  if (!positive) {
    corner0Points.reverse()
    corner1Points.reverse()
    corner2Points.reverse()
    corner3Points.reverse()
    return [corner3Points, corner2Points, corner1Points, corner0Points]
  }
  return [corner0Points, corner1Points, corner2Points, corner3Points]
}

const stitchCorners = (previousCorners, currentCorners) => {
  const polygons = []
  for (let i = 0; i < previousCorners.length; i++) {
    const previous = previousCorners[i]
    const current = currentCorners[i]
    for (let j = 0; j < (previous.length - 1); j++) {
      polygons.push(poly3.create([previous[j], previous[j + 1], current[j]]))

      if (j < (current.length - 1)) {
        polygons.push(poly3.create([current[j], previous[j + 1], current[j + 1]]))
      }
    }
  }
  return polygons
}

const stitchWalls = (previousCorners, currentCorners) => {
  const polygons = []
  for (let i = 0; i < previousCorners.length; i++) {
    let previous = previousCorners[i]
    let current = currentCorners[i]
    const p0 = previous[previous.length - 1]
    const c0 = current[current.length - 1]

    const j = (i + 1) % previousCorners.length
    previous = previousCorners[j]
    current = currentCorners[j]
    const p1 = previous[0]
    const c1 = current[0]

    polygons.push(poly3.create([p0, p1, c1, c0]))
  }
  return polygons
}

const stitchSides = (bottomCorners, topCorners) => {
  // make a copy and reverse the bottom corners
  bottomCorners = [bottomCorners[3], bottomCorners[2], bottomCorners[1], bottomCorners[0]]
  bottomCorners = bottomCorners.map((corner) => corner.slice().reverse())

  const bottomPoints = []
  bottomCorners.forEach((corner) => {
    corner.forEach((point) => bottomPoints.push(point))
  })

  const topPoints = []
  topCorners.forEach((corner) => {
    corner.forEach((point) => topPoints.push(point))
  })

  const polygons = []
  for (let i = 0; i < topPoints.length; i++) {
    const j = (i + 1) % topPoints.length
    polygons.push(poly3.create([bottomPoints[i], bottomPoints[j], topPoints[j], topPoints[i]]))
  }
  return polygons
}

/**
 * Construct an axis-aligned solid cuboid in three dimensional space with rounded corners.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of rounded cube
 * @param {Array} [options.size=[2,2,2]] - dimension of rounded cube; width, depth, height
 * @param {Number} [options.roundRadius=0.2] - radius of rounded edges
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.roundedCuboid
 *
 * @example
 * let mycube = roundedCuboid({size: [10, 20, 10], roundRadius: 2, segments: 16})
 */
const roundedCuboid = (options) => {
  const defaults = {
    center: [0, 0, 0],
    size: [2, 2, 2],
    roundRadius: 0.2,
    segments: 32
  }
  let { center, size, roundRadius, segments } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')
  if (!isNumberArray(size, 3)) throw new Error('size must be an array of X, Y and Z values')
  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')
  if (!isGT(roundRadius, 0)) throw new Error('roundRadius must be greater than zero')
  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')

  size = size.map((v) => v / 2) // convert to radius

  if (roundRadius > (size[0] - EPS) ||
      roundRadius > (size[1] - EPS) ||
      roundRadius > (size[2] - EPS)) throw new Error('roundRadius must be smaller then the radius of all dimensions')

  segments = Math.floor(segments / 4)

  let prevCornersPos = null
  let prevCornersNeg = null
  let polygons = []
  for (let slice = 0; slice <= segments; slice++) {
    const cornersPos = createCorners(center, size, roundRadius, segments, slice, true)
    const cornersNeg = createCorners(center, size, roundRadius, segments, slice, false)

    if (slice === 0) {
      polygons = polygons.concat(stitchSides(cornersNeg, cornersPos))
    }

    if (prevCornersPos) {
      polygons = polygons.concat(stitchCorners(prevCornersPos, cornersPos),
        stitchWalls(prevCornersPos, cornersPos))
    }
    if (prevCornersNeg) {
      polygons = polygons.concat(stitchCorners(prevCornersNeg, cornersNeg),
        stitchWalls(prevCornersNeg, cornersNeg))
    }

    if (slice === segments) {
      // add the top
      let points = cornersPos.map((corner) => corner[0])
      polygons.push(poly3.create(points))
      // add the bottom
      points = cornersNeg.map((corner) => corner[0])
      polygons.push(poly3.create(points))
    }

    prevCornersPos = cornersPos
    prevCornersNeg = cornersNeg
  }

  return geom3.create(polygons)
}

module.exports = roundedCuboid


/***/ }),

/***/ 56952:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const vec3 = __webpack_require__(14171)

const geom3 = __webpack_require__(18206)
const poly3 = __webpack_require__(71516)

const { sin, cos } = __webpack_require__(84580)

const { isGT, isGTE, isNumberArray } = __webpack_require__(77326)

/**
 * Construct a Z axis-aligned solid cylinder in three dimensional space with rounded ends.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of cylinder
 * @param {Number} [options.height=2] - height of cylinder
 * @param {Number} [options.radius=1] - radius of cylinder
 * @param {Number} [options.roundRadius=0.2] - radius of rounded edges
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.roundedCylinder
 *
 * @example
 * let myshape = roundedCylinder({ height: 10, radius: 2, roundRadius: 0.5 })
 */
const roundedCylinder = (options) => {
  const defaults = {
    center: [0, 0, 0],
    height: 2,
    radius: 1,
    roundRadius: 0.2,
    segments: 32
  }
  const { center, height, radius, roundRadius, segments } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')
  if (!isGT(height, 0)) throw new Error('height must be greater then zero')
  if (!isGT(radius, 0)) throw new Error('radius must be greater then zero')
  if (!isGT(roundRadius, 0)) throw new Error('roundRadius must be greater then zero')
  if (roundRadius > (radius - EPS)) throw new Error('roundRadius must be smaller then the radius')
  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')

  const start = [0, 0, -(height / 2)]
  const end = [0, 0, height / 2]
  const direction = vec3.subtract(vec3.create(), end, start)
  const length = vec3.length(direction)

  if ((2 * roundRadius) > (length - EPS)) throw new Error('height must be larger than twice roundRadius')

  let defaultnormal
  if (Math.abs(direction[0]) > Math.abs(direction[1])) {
    defaultnormal = vec3.fromValues(0, 1, 0)
  } else {
    defaultnormal = vec3.fromValues(1, 0, 0)
  }

  const zvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), direction), roundRadius)
  const xvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), vec3.cross(vec3.create(), zvector, defaultnormal)), radius)
  const yvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), vec3.cross(vec3.create(), xvector, zvector)), radius)

  vec3.add(start, start, zvector)
  vec3.subtract(end, end, zvector)

  const qsegments = Math.floor(0.25 * segments)

  const fromPoints = (points) => {
    // adjust the points to center
    const newpoints = points.map((point) => vec3.add(point, point, center))
    return poly3.create(newpoints)
  }

  const polygons = []
  const v1 = vec3.create()
  const v2 = vec3.create()
  let prevcylinderpoint
  for (let slice1 = 0; slice1 <= segments; slice1++) {
    const angle = TAU * slice1 / segments
    const cylinderpoint = vec3.add(vec3.create(), vec3.scale(v1, xvector, cos(angle)), vec3.scale(v2, yvector, sin(angle)))
    if (slice1 > 0) {
      // cylinder wall
      let points = []
      points.push(vec3.add(vec3.create(), start, cylinderpoint))
      points.push(vec3.add(vec3.create(), start, prevcylinderpoint))
      points.push(vec3.add(vec3.create(), end, prevcylinderpoint))
      points.push(vec3.add(vec3.create(), end, cylinderpoint))
      polygons.push(fromPoints(points))

      let prevcospitch, prevsinpitch
      for (let slice2 = 0; slice2 <= qsegments; slice2++) {
        const pitch = TAU / 4 * slice2 / qsegments
        const cospitch = cos(pitch)
        const sinpitch = sin(pitch)
        if (slice2 > 0) {
          // cylinder rounding, start
          points = []
          let point
          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, prevcylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch)))
          points.push(point)
          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, cylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch)))
          points.push(point)
          if (slice2 < qsegments) {
            point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, cylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch)))
            points.push(point)
          }
          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, prevcylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch)))
          points.push(point)

          polygons.push(fromPoints(points))

          // cylinder rounding, end
          points = []
          point = vec3.add(vec3.create(), vec3.scale(v1, prevcylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch))
          vec3.add(point, point, end)
          points.push(point)
          point = vec3.add(vec3.create(), vec3.scale(v1, cylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch))
          vec3.add(point, point, end)
          points.push(point)
          if (slice2 < qsegments) {
            point = vec3.add(vec3.create(), vec3.scale(v1, cylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch))
            vec3.add(point, point, end)
            points.push(point)
          }
          point = vec3.add(vec3.create(), vec3.scale(v1, prevcylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch))
          vec3.add(point, point, end)
          points.push(point)
          points.reverse()

          polygons.push(fromPoints(points))
        }
        prevcospitch = cospitch
        prevsinpitch = sinpitch
      }
    }
    prevcylinderpoint = cylinderpoint
  }
  const result = geom3.create(polygons)
  return result
}

module.exports = roundedCylinder


/***/ }),

/***/ 29338:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { EPS, TAU } = __webpack_require__(77022)

const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)

const { isGT, isGTE, isNumberArray } = __webpack_require__(77326)

/**
 * Construct an axis-aligned rectangle in two dimensional space with rounded corners.
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0]] - center of rounded rectangle
 * @param {Array} [options.size=[2,2]] - dimension of rounded rectangle; width and length
 * @param {Number} [options.roundRadius=0.2] - round radius of corners
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.roundedRectangle
 *
 * @example
 * let myshape = roundedRectangle({size: [10, 20], roundRadius: 2})
 */
const roundedRectangle = (options) => {
  const defaults = {
    center: [0, 0],
    size: [2, 2],
    roundRadius: 0.2,
    segments: 32
  }
  let { center, size, roundRadius, segments } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')
  if (!isNumberArray(size, 2)) throw new Error('size must be an array of X and Y values')
  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')
  if (!isGT(roundRadius, 0)) throw new Error('roundRadius must be greater than zero')
  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')

  size = size.map((v) => v / 2) // convert to radius

  if (roundRadius > (size[0] - EPS) ||
      roundRadius > (size[1] - EPS)) throw new Error('roundRadius must be smaller then the radius of all dimensions')

  const cornersegments = Math.floor(segments / 4)

  // create sets of points that define the corners
  const corner0 = vec2.add(vec2.create(), center, [size[0] - roundRadius, size[1] - roundRadius])
  const corner1 = vec2.add(vec2.create(), center, [roundRadius - size[0], size[1] - roundRadius])
  const corner2 = vec2.add(vec2.create(), center, [roundRadius - size[0], roundRadius - size[1]])
  const corner3 = vec2.add(vec2.create(), center, [size[0] - roundRadius, roundRadius - size[1]])
  const corner0Points = []
  const corner1Points = []
  const corner2Points = []
  const corner3Points = []
  for (let i = 0; i <= cornersegments; i++) {
    const radians = TAU / 4 * i / cornersegments
    const point = vec2.fromAngleRadians(vec2.create(), radians)
    vec2.scale(point, point, roundRadius)
    corner0Points.push(vec2.add(vec2.create(), corner0, point))
    vec2.rotate(point, point, vec2.create(), TAU / 4)
    corner1Points.push(vec2.add(vec2.create(), corner1, point))
    vec2.rotate(point, point, vec2.create(), TAU / 4)
    corner2Points.push(vec2.add(vec2.create(), corner2, point))
    vec2.rotate(point, point, vec2.create(), TAU / 4)
    corner3Points.push(vec2.add(vec2.create(), corner3, point))
  }

  return geom2.fromPoints(corner0Points.concat(corner1Points, corner2Points, corner3Points))
}

module.exports = roundedRectangle


/***/ }),

/***/ 269:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const ellipsoid = __webpack_require__(43109)

const { isGT } = __webpack_require__(77326)

/**
 * Construct a sphere in three dimensional space where all points are at the same distance from the center.
 * @see [ellipsoid]{@link module:modeling/primitives.ellipsoid} for more options
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0,0]] - center of sphere
 * @param {Number} [options.radius=1] - radius of sphere
 * @param {Number} [options.segments=32] - number of segments to create per full rotation
 * @param {Array} [options.axes] -  an array with three vectors for the x, y and z base vectors
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.sphere
 *
 * @example
 * let myshape = sphere({radius: 5})
 */
const sphere = (options) => {
  const defaults = {
    center: [0, 0, 0],
    radius: 1,
    segments: 32,
    axes: [[1, 0, 0], [0, -1, 0], [0, 0, 1]]
  }
  let { center, radius, segments, axes } = Object.assign({}, defaults, options)

  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')

  radius = [radius, radius, radius]

  return ellipsoid({ center, radius, segments, axes })
}

module.exports = sphere


/***/ }),

/***/ 21833:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const rectangle = __webpack_require__(46240)

const { isGT } = __webpack_require__(77326)

/**
 * Construct an axis-aligned square in two dimensional space with four equal sides at right angles.
 * @see [rectangle]{@link module:modeling/primitives.rectangle} for more options
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0]] - center of square
 * @param {Number} [options.size=2] - dimension of square
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.square
 *
 * @example
 * let myshape = square({size: 10})
 */
const square = (options) => {
  const defaults = {
    center: [0, 0],
    size: 2
  }
  let { center, size } = Object.assign({}, defaults, options)

  if (!isGT(size, 0)) throw new Error('size must be greater than zero')

  size = [size, size]

  return rectangle({ center, size })
}

module.exports = square


/***/ }),

/***/ 62323:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)
const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)

const { isGT, isGTE, isNumberArray } = __webpack_require__(77326)

// @see http://www.jdawiseman.com/papers/easymath/surds_star_inner_radius.html
const getRadiusRatio = (vertices, density) => {
  if (vertices > 0 && density > 1 && density < vertices / 2) {
    return Math.cos(Math.PI * density / vertices) / Math.cos(Math.PI * (density - 1) / vertices)
  }
  return 0
}

const getPoints = (vertices, radius, startAngle, center) => {
  const a = TAU / vertices

  const points = []
  for (let i = 0; i < vertices; i++) {
    const point = vec2.fromAngleRadians(vec2.create(), a * i + startAngle)
    vec2.scale(point, point, radius)
    vec2.add(point, center, point)
    points.push(point)
  }
  return points
}

/**
 * Construct a star in two dimensional space.
 * @see https://en.wikipedia.org/wiki/Star_polygon
 * @param {Object} [options] - options for construction
 * @param {Array} [options.center=[0,0]] - center of star
 * @param {Number} [options.vertices=5] - number of vertices (P) on the star
 * @param {Number} [options.density=2] - density (Q) of star
 * @param {Number} [options.outerRadius=1] - outer radius of vertices
 * @param {Number} [options.innerRadius=0] - inner radius of vertices, or zero to calculate
 * @param {Number} [options.startAngle=0] - starting angle for first vertice, in radians
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.star
 *
 * @example
 * let star1 = star({vertices: 8, outerRadius: 10}) // star with 8/2 density
 * let star2 = star({vertices: 12, outerRadius: 40, innerRadius: 20}) // star with given radius
 */
const star = (options) => {
  const defaults = {
    center: [0, 0],
    vertices: 5,
    outerRadius: 1,
    innerRadius: 0,
    density: 2,
    startAngle: 0
  }
  let { center, vertices, outerRadius, innerRadius, density, startAngle } = Object.assign({}, defaults, options)

  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')
  if (!isGTE(vertices, 2)) throw new Error('vertices must be two or more')
  if (!isGT(outerRadius, 0)) throw new Error('outerRadius must be greater than zero')
  if (!isGTE(innerRadius, 0)) throw new Error('innerRadius must be greater than zero')
  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be greater than zero')

  // force integers
  vertices = Math.floor(vertices)
  density = Math.floor(density)

  startAngle = startAngle % TAU

  if (innerRadius === 0) {
    if (!isGTE(density, 2)) throw new Error('density must be two or more')
    innerRadius = outerRadius * getRadiusRatio(vertices, density)
  }

  const centerv = vec2.clone(center)

  const outerPoints = getPoints(vertices, outerRadius, startAngle, centerv)
  const innerPoints = getPoints(vertices, innerRadius, startAngle + Math.PI / vertices, centerv)

  const allPoints = []
  for (let i = 0; i < vertices; i++) {
    allPoints.push(outerPoints[i])
    allPoints.push(innerPoints[i])
  }

  return geom2.fromPoints(allPoints)
}

module.exports = star


/***/ }),

/***/ 74559:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)

const extrudeRotate = __webpack_require__(38565)
const { rotate } = __webpack_require__(50813)
const { translate } = __webpack_require__(63633)

const circle = __webpack_require__(31807)

const { isGT, isGTE } = __webpack_require__(77326)

/**
 * Construct a torus by revolving a small circle (inner) about the circumference of a large (outer) circle.
 * @param {Object} [options] - options for construction
 * @param {Number} [options.innerRadius=1] - radius of small (inner) circle
 * @param {Number} [options.outerRadius=4] - radius of large (outer) circle
 * @param {Integer} [options.innerSegments=32] - number of segments to create per rotation
 * @param {Integer} [options.outerSegments=32] - number of segments to create per rotation
 * @param {Integer} [options.innerRotation=0] - rotation of small (inner) circle in radians
 * @param {Number} [options.outerRotation=TAU] - rotation (outer) of the torus (RADIANS)
 * @param {Number} [options.startAngle=0] - start angle of the torus (RADIANS)
 * @returns {geom3} new 3D geometry
 * @alias module:modeling/primitives.torus
 *
 * @example
 * let myshape = torus({ innerRadius: 10, outerRadius: 100 })
 */
const torus = (options) => {
  const defaults = {
    innerRadius: 1,
    innerSegments: 32,
    outerRadius: 4,
    outerSegments: 32,
    innerRotation: 0,
    startAngle: 0,
    outerRotation: TAU
  }
  const { innerRadius, innerSegments, outerRadius, outerSegments, innerRotation, startAngle, outerRotation } = Object.assign({}, defaults, options)

  if (!isGT(innerRadius, 0)) throw new Error('innerRadius must be greater than zero')
  if (!isGTE(innerSegments, 3)) throw new Error('innerSegments must be three or more')
  if (!isGT(outerRadius, 0)) throw new Error('outerRadius must be greater than zero')
  if (!isGTE(outerSegments, 3)) throw new Error('outerSegments must be three or more')
  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')
  if (!isGT(outerRotation, 0)) throw new Error('outerRotation must be greater than zero')

  if (innerRadius >= outerRadius) throw new Error('inner circle is two large to rotate about the outer circle')

  let innerCircle = circle({ radius: innerRadius, segments: innerSegments })

  if (innerRotation !== 0) {
    innerCircle = rotate([0, 0, innerRotation], innerCircle)
  }

  innerCircle = translate([outerRadius, 0], innerCircle)

  const extrudeOptions = {
    startAngle: startAngle,
    angle: outerRotation,
    segments: outerSegments
  }
  return extrudeRotate(extrudeOptions, innerCircle)
}

module.exports = torus


/***/ }),

/***/ 5340:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { NEPS } = __webpack_require__(77022)
const vec2 = __webpack_require__(4138)

const geom2 = __webpack_require__(88934)

const { isNumberArray } = __webpack_require__(77326)

// returns angle C
const solveAngleFromSSS = (a, b, c) => Math.acos(((a * a) + (b * b) - (c * c)) / (2 * a * b))

// returns side c
const solveSideFromSAS = (a, C, b) => {
  if (C > NEPS) {
    return Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(C))
  }

  // Explained in https://www.nayuki.io/page/numerically-stable-law-of-cosines
  return Math.sqrt((a - b) * (a - b) + a * b * C * C * (1 - C * C / 12))
}

// AAA is when three angles of a triangle, but no sides
const solveAAA = (angles) => {
  const eps = Math.abs(angles[0] + angles[1] + angles[2] - Math.PI)
  if (eps > NEPS) throw new Error('AAA triangles require angles that sum to PI')

  const A = angles[0]
  const B = angles[1]
  const C = Math.PI - A - B

  // Note: This is not 100% proper but...
  // default the side c length to 1
  // solve the other lengths
  const c = 1
  const a = (c / Math.sin(C)) * Math.sin(A)
  const b = (c / Math.sin(C)) * Math.sin(B)
  return createTriangle(A, B, C, a, b, c)
}

// AAS is when two angles and one side are known, and the side is not between the angles
const solveAAS = (values) => {
  const A = values[0]
  const B = values[1]
  const C = Math.PI + NEPS - A - B

  if (C < NEPS) throw new Error('AAS triangles require angles that sum to PI')

  const a = values[2]
  const b = (a / Math.sin(A)) * Math.sin(B)
  const c = (a / Math.sin(A)) * Math.sin(C)
  return createTriangle(A, B, C, a, b, c)
}

// ASA is when two angles and the side between the angles are known
const solveASA = (values) => {
  const A = values[0]
  const B = values[2]
  const C = Math.PI + NEPS - A - B

  if (C < NEPS) throw new Error('ASA triangles require angles that sum to PI')

  const c = values[1]
  const a = (c / Math.sin(C)) * Math.sin(A)
  const b = (c / Math.sin(C)) * Math.sin(B)
  return createTriangle(A, B, C, a, b, c)
}

// SAS is when two sides and the angle between them are known
const solveSAS = (values) => {
  const c = values[0]
  const B = values[1]
  const a = values[2]

  const b = solveSideFromSAS(c, B, a)

  const A = solveAngleFromSSS(b, c, a) // solve for A
  const C = Math.PI - A - B
  return createTriangle(A, B, C, a, b, c)
}

// SSA is when two sides and an angle that is not the angle between the sides are known
const solveSSA = (values) => {
  const c = values[0]
  const a = values[1]
  const C = values[2]

  const A = Math.asin(a * Math.sin(C) / c)
  const B = Math.PI - A - C

  const b = (c / Math.sin(C)) * Math.sin(B)
  return createTriangle(A, B, C, a, b, c)
}

// SSS is when we know three sides of the triangle
const solveSSS = (lengths) => {
  const a = lengths[1]
  const b = lengths[2]
  const c = lengths[0]
  if (((a + b) <= c) || ((b + c) <= a) || ((c + a) <= b)) {
    throw new Error('SSS triangle is incorrect, as the longest side is longer than the sum of the other sides')
  }

  const A = solveAngleFromSSS(b, c, a) // solve for A
  const B = solveAngleFromSSS(c, a, b) // solve for B
  const C = Math.PI - A - B
  return createTriangle(A, B, C, a, b, c)
}

const createTriangle = (A, B, C, a, b, c) => {
  const p0 = vec2.fromValues(0, 0) // everything starts from 0, 0
  const p1 = vec2.fromValues(c, 0)
  const p2 = vec2.fromValues(a, 0)
  vec2.add(p2, vec2.rotate(p2, p2, [0, 0], Math.PI - B), p1)
  return geom2.fromPoints([p0, p1, p2])
}

/**
 * Construct a triangle in two dimensional space from the given options.
 * The triangle is always constructed CCW from the origin, [0, 0, 0].
 * @see https://www.mathsisfun.com/algebra/trig-solving-triangles.html
 * @param {Object} [options] - options for construction
 * @param {String} [options.type='SSS'] - type of triangle to construct; A ~ angle, S ~ side
 * @param {Array} [options.values=[1,1,1]] - angle (radians) of corners or length of sides
 * @returns {geom2} new 2D geometry
 * @alias module:modeling/primitives.triangle
 *
 * @example
 * let myshape = triangle({type: 'AAS', values: [degToRad(62), degToRad(35), 7]})
 */
const triangle = (options) => {
  const defaults = {
    type: 'SSS',
    values: [1, 1, 1]
  }
  let { type, values } = Object.assign({}, defaults, options)

  if (typeof (type) !== 'string') throw new Error('triangle type must be a string')
  type = type.toUpperCase()
  if (!((type[0] === 'A' || type[0] === 'S') &&
        (type[1] === 'A' || type[1] === 'S') &&
        (type[2] === 'A' || type[2] === 'S'))) throw new Error('triangle type must contain three letters; A or S')

  if (!isNumberArray(values, 3)) throw new Error('triangle values must contain three values')
  if (!values.every((n) => n > 0)) throw new Error('triangle values must be greater than zero')

  switch (type) {
    case 'AAA':
      return solveAAA(values)
    case 'AAS':
      return solveAAS(values)
    case 'ASA':
      return solveASA(values)
    case 'SAS':
      return solveSAS(values)
    case 'SSA':
      return solveSSA(values)
    case 'SSS':
      return solveSSS(values)
    default:
      throw new Error('invalid triangle type, try again')
  }
}

module.exports = triangle


/***/ }),

/***/ 41469:
/***/ ((module) => {

// -- data source from from http://paulbourke.net/dataformats/hershey/
// -- reduced to save some bytes...
// { [ascii code]: [width, x, y, ...] } - undefined value as path separator
module.exports = {
  height: 14,
  32: [16],
  33: [10, 5, 21, 5, 7, undefined, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],
  34: [16, 4, 21, 4, 14, undefined, 12, 21, 12, 14],
  35: [21, 11, 25, 4, -7, undefined, 17, 25, 10, -7, undefined, 4, 12, 18, 12, undefined, 3, 6, 17, 6],
  36: [20, 8, 25, 8, -4, undefined, 12, 25, 12, -4, undefined, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],
  37: [24, 21, 21, 3, 0, undefined, 8, 21, 10, 19, 10, 17, 9, 15, 7, 14, 5, 14, 3, 16, 3, 18, 4, 20, 6, 21, 8, 21, 10, 20, 13, 19, 16, 19, 19, 20, 21, 21, undefined, 17, 7, 15, 6, 14, 4, 14, 2, 16, 0, 18, 0, 20, 1, 21, 3, 21, 5, 19, 7, 17, 7],
  38: [26, 23, 12, 23, 13, 22, 14, 21, 14, 20, 13, 19, 11, 17, 6, 15, 3, 13, 1, 11, 0, 7, 0, 5, 1, 4, 2, 3, 4, 3, 6, 4, 8, 5, 9, 12, 13, 13, 14, 14, 16, 14, 18, 13, 20, 11, 21, 9, 20, 8, 18, 8, 16, 9, 13, 11, 10, 16, 3, 18, 1, 20, 0, 22, 0, 23, 1, 23, 2],
  39: [10, 5, 19, 4, 20, 5, 21, 6, 20, 6, 18, 5, 16, 4, 15],
  40: [14, 11, 25, 9, 23, 7, 20, 5, 16, 4, 11, 4, 7, 5, 2, 7, -2, 9, -5, 11, -7],
  41: [14, 3, 25, 5, 23, 7, 20, 9, 16, 10, 11, 10, 7, 9, 2, 7, -2, 5, -5, 3, -7],
  42: [16, 8, 21, 8, 9, undefined, 3, 18, 13, 12, undefined, 13, 18, 3, 12],
  43: [26, 13, 18, 13, 0, undefined, 4, 9, 22, 9],
  44: [10, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],
  45: [26, 4, 9, 22, 9],
  46: [10, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],
  47: [22, 20, 25, 2, -7],
  48: [20, 9, 21, 6, 20, 4, 17, 3, 12, 3, 9, 4, 4, 6, 1, 9, 0, 11, 0, 14, 1, 16, 4, 17, 9, 17, 12, 16, 17, 14, 20, 11, 21, 9, 21],
  49: [20, 6, 17, 8, 18, 11, 21, 11, 0],
  50: [20, 4, 16, 4, 17, 5, 19, 6, 20, 8, 21, 12, 21, 14, 20, 15, 19, 16, 17, 16, 15, 15, 13, 13, 10, 3, 0, 17, 0],
  51: [20, 5, 21, 16, 21, 10, 13, 13, 13, 15, 12, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],
  52: [20, 13, 21, 3, 7, 18, 7, undefined, 13, 21, 13, 0],
  53: [20, 15, 21, 5, 21, 4, 12, 5, 13, 8, 14, 11, 14, 14, 13, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],
  54: [20, 16, 18, 15, 20, 12, 21, 10, 21, 7, 20, 5, 17, 4, 12, 4, 7, 5, 3, 7, 1, 10, 0, 11, 0, 14, 1, 16, 3, 17, 6, 17, 7, 16, 10, 14, 12, 11, 13, 10, 13, 7, 12, 5, 10, 4, 7],
  55: [20, 17, 21, 7, 0, undefined, 3, 21, 17, 21],
  56: [20, 8, 21, 5, 20, 4, 18, 4, 16, 5, 14, 7, 13, 11, 12, 14, 11, 16, 9, 17, 7, 17, 4, 16, 2, 15, 1, 12, 0, 8, 0, 5, 1, 4, 2, 3, 4, 3, 7, 4, 9, 6, 11, 9, 12, 13, 13, 15, 14, 16, 16, 16, 18, 15, 20, 12, 21, 8, 21],
  57: [20, 16, 14, 15, 11, 13, 9, 10, 8, 9, 8, 6, 9, 4, 11, 3, 14, 3, 15, 4, 18, 6, 20, 9, 21, 10, 21, 13, 20, 15, 18, 16, 14, 16, 9, 15, 4, 13, 1, 10, 0, 8, 0, 5, 1, 4, 3],
  58: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, undefined, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],
  59: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, undefined, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],
  60: [24, 20, 18, 4, 9, 20, 0],
  61: [26, 4, 12, 22, 12, undefined, 4, 6, 22, 6],
  62: [24, 4, 18, 20, 9, 4, 0],
  63: [18, 3, 16, 3, 17, 4, 19, 5, 20, 7, 21, 11, 21, 13, 20, 14, 19, 15, 17, 15, 15, 14, 13, 13, 12, 9, 10, 9, 7, undefined, 9, 2, 8, 1, 9, 0, 10, 1, 9, 2],
  64: [27, 18, 13, 17, 15, 15, 16, 12, 16, 10, 15, 9, 14, 8, 11, 8, 8, 9, 6, 11, 5, 14, 5, 16, 6, 17, 8, undefined, 12, 16, 10, 14, 9, 11, 9, 8, 10, 6, 11, 5, undefined, 18, 16, 17, 8, 17, 6, 19, 5, 21, 5, 23, 7, 24, 10, 24, 12, 23, 15, 22, 17, 20, 19, 18, 20, 15, 21, 12, 21, 9, 20, 7, 19, 5, 17, 4, 15, 3, 12, 3, 9, 4, 6, 5, 4, 7, 2, 9, 1, 12, 0, 15, 0, 18, 1, 20, 2, 21, 3, undefined, 19, 16, 18, 8, 18, 6, 19, 5],
  65: [18, 9, 21, 1, 0, undefined, 9, 21, 17, 0, undefined, 4, 7, 14, 7],
  66: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, undefined, 4, 11, 13, 11, 16, 10, 17, 9, 18, 7, 18, 4, 17, 2, 16, 1, 13, 0, 4, 0],
  67: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5],
  68: [21, 4, 21, 4, 0, undefined, 4, 21, 11, 21, 14, 20, 16, 18, 17, 16, 18, 13, 18, 8, 17, 5, 16, 3, 14, 1, 11, 0, 4, 0],
  69: [19, 4, 21, 4, 0, undefined, 4, 21, 17, 21, undefined, 4, 11, 12, 11, undefined, 4, 0, 17, 0],
  70: [18, 4, 21, 4, 0, undefined, 4, 21, 17, 21, undefined, 4, 11, 12, 11],
  71: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 18, 8, undefined, 13, 8, 18, 8],
  72: [22, 4, 21, 4, 0, undefined, 18, 21, 18, 0, undefined, 4, 11, 18, 11],
  73: [8, 4, 21, 4, 0],
  74: [16, 12, 21, 12, 5, 11, 2, 10, 1, 8, 0, 6, 0, 4, 1, 3, 2, 2, 5, 2, 7],
  75: [21, 4, 21, 4, 0, undefined, 18, 21, 4, 7, undefined, 9, 12, 18, 0],
  76: [17, 4, 21, 4, 0, undefined, 4, 0, 16, 0],
  77: [24, 4, 21, 4, 0, undefined, 4, 21, 12, 0, undefined, 20, 21, 12, 0, undefined, 20, 21, 20, 0],
  78: [22, 4, 21, 4, 0, undefined, 4, 21, 18, 0, undefined, 18, 21, 18, 0],
  79: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21],
  80: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 14, 17, 12, 16, 11, 13, 10, 4, 10],
  81: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, undefined, 12, 4, 18, -2],
  82: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, 4, 11, undefined, 11, 11, 18, 0],
  83: [20, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],
  84: [16, 8, 21, 8, 0, undefined, 1, 21, 15, 21],
  85: [22, 4, 21, 4, 6, 5, 3, 7, 1, 10, 0, 12, 0, 15, 1, 17, 3, 18, 6, 18, 21],
  86: [18, 1, 21, 9, 0, undefined, 17, 21, 9, 0],
  87: [24, 2, 21, 7, 0, undefined, 12, 21, 7, 0, undefined, 12, 21, 17, 0, undefined, 22, 21, 17, 0],
  88: [20, 3, 21, 17, 0, undefined, 17, 21, 3, 0],
  89: [18, 1, 21, 9, 11, 9, 0, undefined, 17, 21, 9, 11],
  90: [20, 17, 21, 3, 0, undefined, 3, 21, 17, 21, undefined, 3, 0, 17, 0],
  91: [14, 4, 25, 4, -7, undefined, 5, 25, 5, -7, undefined, 4, 25, 11, 25, undefined, 4, -7, 11, -7],
  92: [14, 0, 21, 14, -3],
  93: [14, 9, 25, 9, -7, undefined, 10, 25, 10, -7, undefined, 3, 25, 10, 25, undefined, 3, -7, 10, -7],
  94: [16, 6, 15, 8, 18, 10, 15, undefined, 3, 12, 8, 17, 13, 12, undefined, 8, 17, 8, 0],
  95: [16, 0, -2, 16, -2],
  96: [10, 6, 21, 5, 20, 4, 18, 4, 16, 5, 15, 6, 16, 5, 17],
  97: [19, 15, 14, 15, 0, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],
  98: [19, 4, 21, 4, 0, undefined, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],
  99: [18, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],
  100: [19, 15, 21, 15, 0, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],
  101: [18, 3, 8, 15, 8, 15, 10, 14, 12, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],
  102: [12, 10, 21, 8, 21, 6, 20, 5, 17, 5, 0, undefined, 2, 14, 9, 14],
  103: [19, 15, 14, 15, -2, 14, -5, 13, -6, 11, -7, 8, -7, 6, -6, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],
  104: [19, 4, 21, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],
  105: [8, 3, 21, 4, 20, 5, 21, 4, 22, 3, 21, undefined, 4, 14, 4, 0],
  106: [10, 5, 21, 6, 20, 7, 21, 6, 22, 5, 21, undefined, 6, 14, 6, -3, 5, -6, 3, -7, 1, -7],
  107: [17, 4, 21, 4, 0, undefined, 14, 14, 4, 4, undefined, 8, 8, 15, 0],
  108: [8, 4, 21, 4, 0],
  109: [30, 4, 14, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, undefined, 15, 10, 18, 13, 20, 14, 23, 14, 25, 13, 26, 10, 26, 0],
  110: [19, 4, 14, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],
  111: [19, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, 16, 6, 16, 8, 15, 11, 13, 13, 11, 14, 8, 14],
  112: [19, 4, 14, 4, -7, undefined, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],
  113: [19, 15, 14, 15, -7, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],
  114: [13, 4, 14, 4, 0, undefined, 4, 8, 5, 11, 7, 13, 9, 14, 12, 14],
  115: [17, 14, 11, 13, 13, 10, 14, 7, 14, 4, 13, 3, 11, 4, 9, 6, 8, 11, 7, 13, 6, 14, 4, 14, 3, 13, 1, 10, 0, 7, 0, 4, 1, 3, 3],
  116: [12, 5, 21, 5, 4, 6, 1, 8, 0, 10, 0, undefined, 2, 14, 9, 14],
  117: [19, 4, 14, 4, 4, 5, 1, 7, 0, 10, 0, 12, 1, 15, 4, undefined, 15, 14, 15, 0],
  118: [16, 2, 14, 8, 0, undefined, 14, 14, 8, 0],
  119: [22, 3, 14, 7, 0, undefined, 11, 14, 7, 0, undefined, 11, 14, 15, 0, undefined, 19, 14, 15, 0],
  120: [17, 3, 14, 14, 0, undefined, 14, 14, 3, 0],
  121: [16, 2, 14, 8, 0, undefined, 14, 14, 8, 0, 6, -4, 4, -6, 2, -7, 1, -7],
  122: [17, 14, 14, 3, 0, undefined, 3, 14, 14, 14, undefined, 3, 0, 14, 0],
  123: [14, 9, 25, 7, 24, 6, 23, 5, 21, 5, 19, 6, 17, 7, 16, 8, 14, 8, 12, 6, 10, undefined, 7, 24, 6, 22, 6, 20, 7, 18, 8, 17, 9, 15, 9, 13, 8, 11, 4, 9, 8, 7, 9, 5, 9, 3, 8, 1, 7, 0, 6, -2, 6, -4, 7, -6, undefined, 6, 8, 8, 6, 8, 4, 7, 2, 6, 1, 5, -1, 5, -3, 6, -5, 7, -6, 9, -7],
  124: [8, 4, 25, 4, -7],
  125: [14, 5, 25, 7, 24, 8, 23, 9, 21, 9, 19, 8, 17, 7, 16, 6, 14, 6, 12, 8, 10, undefined, 7, 24, 8, 22, 8, 20, 7, 18, 6, 17, 5, 15, 5, 13, 6, 11, 10, 9, 6, 7, 5, 5, 5, 3, 6, 1, 7, 0, 8, -2, 8, -4, 7, -6, undefined, 8, 8, 6, 6, 6, 4, 7, 2, 8, 1, 9, -1, 9, -3, 8, -5, 7, -6, 5, -7],
  126: [24, 3, 6, 3, 8, 4, 11, 6, 12, 8, 12, 10, 11, 14, 8, 16, 7, 18, 7, 20, 8, 21, 10, undefined, 3, 8, 4, 10, 6, 11, 8, 11, 10, 10, 14, 7, 16, 6, 18, 6, 20, 7, 21, 10, 21, 12]
}


/***/ }),

/***/ 50651:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Texts provide sets of segments for each character or text strings.
 * The segments can be used to create outlines for both 2D and 3D geometry.
 * Note: Only ASCII characters are supported.
 * @module modeling/text
 * @example
 * const { vectorChar, vectorText } = require('@jscad/modeling').text
 */
module.exports = {
  vectorChar: __webpack_require__(53380),
  vectorText: __webpack_require__(7994)
}


/***/ }),

/***/ 53380:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vectorParams = __webpack_require__(99966)

/**
 * Represents a character as a list of segments
 * @typedef {Object} VectorCharObject
 * @property {Float} width - character width
 * @property {Float} height - character height (uppercase)
 * @property {Array} segments - character segments [[[x, y], ...], ...]
 */

/** Construct a {@link VectorCharObject} from a ascii character whose code is between 31 and 127,
* if the character is not supported it is replaced by a question mark.
* @param {Object|String} [options] - options for construction or ascii character
* @param {Float} [options.xOffset=0] - x offset
* @param {Float} [options.yOffset=0] - y offset
* @param {Float} [options.height=21] - font size (uppercase height)
* @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character
* @param {String} [options.input='?'] - ascii character (ignored/overwrited if provided as seconds parameter)
* @param {String} [char='?'] - ascii character
* @returns {VectorCharObject}
* @alias module:modeling/text.vectorChar
*
* @example
* let vectorCharObject = vectorChar()
* or
* let vectorCharObject = vectorChar('A')
* or
* let vectorCharObject = vectorChar({ xOffset: 57 }, 'C')
* or
* let vectorCharObject = vectorChar({ xOffset: 78, input: '!' })
*/
const vectorChar = (options, char) => {
  const {
    xOffset, yOffset, input, font, height, extrudeOffset
  } = vectorParams(options, char)
  let code = input.charCodeAt(0)
  if (!code || !font[code]) {
    code = 63 // 63 => ?
  }
  const glyph = [].concat(font[code])
  const ratio = (height - extrudeOffset) / font.height
  const extrudeYOffset = (extrudeOffset / 2)
  const width = glyph.shift() * ratio
  const segments = []
  let polyline = []
  for (let i = 0, il = glyph.length; i < il; i += 2) {
    const gx = ratio * glyph[i] + xOffset
    const gy = ratio * glyph[i + 1] + yOffset + extrudeYOffset
    if (glyph[i] !== undefined) {
      polyline.push([gx, gy])
      continue
    }
    segments.push(polyline)
    polyline = []
    i--
  }
  if (polyline.length) {
    segments.push(polyline)
  }
  return { width, height, segments }
}

module.exports = vectorChar


/***/ }),

/***/ 99966:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const defaultFont = __webpack_require__(41469)

const defaultsVectorParams = {
  xOffset: 0,
  yOffset: 0,
  input: '?',
  align: 'left',
  font: defaultFont,
  height: 14, // == old vector_xxx simplex font height
  lineSpacing: 2.142857142857143, // == 30/14 == old vector_xxx ratio
  letterSpacing: 1,
  extrudeOffset: 0
}

// vectorsXXX parameters handler
const vectorParams = (options, input) => {
  if (!input && typeof options === 'string') {
    options = { input: options }
  }
  options = options || {}
  const params = Object.assign({}, defaultsVectorParams, options)
  params.input = input || params.input
  return params
}

module.exports = vectorParams


/***/ }),

/***/ 7994:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const vectorChar = __webpack_require__(53380)
const vectorParams = __webpack_require__(99966)

// translate text line
const translateLine = (options, line) => {
  const { x, y } = Object.assign({ x: 0, y: 0 }, options || {})
  const segments = line.segments
  let segment = null
  let point = null
  for (let i = 0, il = segments.length; i < il; i++) {
    segment = segments[i]
    for (let j = 0, jl = segment.length; j < jl; j++) {
      point = segment[j]
      segment[j] = [point[0] + x, point[1] + y]
    }
  }
  return line
}

/**
 * Construct an array of character segments from a ascii string whose characters code is between 31 and 127,
 * if one character is not supported it is replaced by a question mark.
 * @param {Object|String} [options] - options for construction or ascii string
 * @param {Float} [options.xOffset=0] - x offset
 * @param {Float} [options.yOffset=0] - y offset
 * @param {Float} [options.height=21] - font size (uppercase height)
 * @param {Float} [options.lineSpacing=1.4] - line spacing expressed as a percentage of font size
 * @param {Float} [options.letterSpacing=1] - extra letter spacing expressed as a percentage of font size
 * @param {String} [options.align='left'] - multi-line text alignment: left, center, right
 * @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character
 * @param {String} [options.input='?'] - ascii string (ignored/overwrited if provided as seconds parameter)
 * @param {String} [text='?'] - ascii string
 * @returns {Array} characters segments [[[x, y], ...], ...]
 * @alias module:modeling/text.vectorText
 *
 * @example
 * let textSegments = vectorText()
 * or
 * let textSegments = vectorText('OpenJSCAD')
 * or
 * let textSegments = vectorText({ yOffset: -50 }, 'OpenJSCAD')
 * or
 * let textSegments = vectorText({ yOffset: -80, input: 'OpenJSCAD' })
 */
const vectorText = (options, text) => {
  const {
    xOffset, yOffset, input, font, height, align, extrudeOffset, lineSpacing, letterSpacing
  } = vectorParams(options, text)
  let [x, y] = [xOffset, yOffset]
  let i, il, char, vect, width, diff
  let line = { width: 0, segments: [] }
  const lines = []
  let output = []
  let maxWidth = 0
  const lineStart = x
  const pushLine = () => {
    lines.push(line)
    maxWidth = Math.max(maxWidth, line.width)
    line = { width: 0, segments: [] }
  }
  for (i = 0, il = input.length; i < il; i++) {
    char = input[i]
    vect = vectorChar({ xOffset: x, yOffset: y, font, height, extrudeOffset }, char)
    if (char === '\n') {
      x = lineStart
      y -= vect.height * lineSpacing
      pushLine()
      continue
    }
    width = vect.width * letterSpacing
    line.width += width
    x += width
    if (char !== ' ') {
      line.segments = line.segments.concat(vect.segments)
    }
  }
  if (line.segments.length) {
    pushLine()
  }
  for (i = 0, il = lines.length; i < il; i++) {
    line = lines[i]
    if (maxWidth > line.width) {
      diff = maxWidth - line.width
      if (align === 'right') {
        line = translateLine({ x: diff }, line)
      } else if (align === 'center') {
        line = translateLine({ x: diff / 2 }, line)
      }
    }
    output = output.concat(line.segments)
  }
  return output
}

module.exports = vectorText


/***/ }),

/***/ 33486:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// list of supported geometries
const geom2 = __webpack_require__(88934)
const geom3 = __webpack_require__(18206)
const path2 = __webpack_require__(84345)

/**
 * @param {Array} shapes - list of shapes to compare
 * @returns {Boolean} true if the given shapes are of the same type
 * @alias module:modeling/utils.areAllShapesTheSameType
 */
const areAllShapesTheSameType = (shapes) => {
  let previousType
  for (const shape of shapes) {
    let currentType = 0
    if (geom2.isA(shape)) currentType = 1
    if (geom3.isA(shape)) currentType = 2
    if (path2.isA(shape)) currentType = 3

    if (previousType && currentType !== previousType) return false
    previousType = currentType
  }
  return true
}

module.exports = areAllShapesTheSameType


/***/ }),

/***/ 22077:
/***/ ((module) => {

/**
 * Convert the given angle (degrees) to radians.
 * @param {Number} degrees - angle in degrees
 * @returns {Number} angle in radians
 * @alias module:modeling/utils.degToRad
 */
const degToRad = (degrees) => degrees * 0.017453292519943295

module.exports = degToRad


/***/ }),

/***/ 61979:
/***/ ((module) => {

/**
 * Flatten the given list of arguments into a single flat array.
 * The arguments can be composed of multiple depths of objects and arrays.
 * @param {Array} arr - list of arguments
 * @returns {Array} a flat list of arguments
 * @alias module:modeling/utils.flatten
 */
const flatten = (arr) => arr.reduce((acc, val) => Array.isArray(val) ? acc.concat(flatten(val)) : acc.concat(val), [])

module.exports = flatten


/***/ }),

/***/ 45080:
/***/ ((module) => {

/**
 * @alias module:modeling/utils.fnNumberSort
 */
const fnNumberSort = (a, b) => a - b

module.exports = fnNumberSort


/***/ }),

/***/ 27377:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Utility functions of various sorts.
 * @module modeling/utils
 * @example
 * const { flatten, insertSorted } = require('@jscad/modeling').utils
 */
module.exports = {
  areAllShapesTheSameType: __webpack_require__(33486),
  degToRad: __webpack_require__(22077),
  flatten: __webpack_require__(61979),
  fnNumberSort: __webpack_require__(45080),
  insertSorted: __webpack_require__(3205),
  radiusToSegments: __webpack_require__(90075),
  radToDeg: __webpack_require__(53455)
}


/***/ }),

/***/ 3205:
/***/ ((module) => {

/**
 * Insert the given element into the given array using the compareFunction.
 * @alias module:modeling/utils.insertSorted
 */
const insertSorted = (array, element, comparefunc) => {
  let leftbound = 0
  let rightbound = array.length
  while (rightbound > leftbound) {
    const testindex = Math.floor((leftbound + rightbound) / 2)
    const testelement = array[testindex]
    const compareresult = comparefunc(element, testelement)
    if (compareresult > 0) { // element > testelement
      leftbound = testindex + 1
    } else {
      rightbound = testindex
    }
  }
  array.splice(leftbound, 0, element)
}

module.exports = insertSorted


/***/ }),

/***/ 91358:
/***/ ((module) => {

/**
 * Build an array of at minimum a specified length from an existing array and a padding value. IF the array is already larger than the target length, it will not be shortened.
 * @param {Array} anArray - the source array to copy into the result.
 * @param {*} padding - the value to add to the new array to reach the desired length.
 * @param {Number} targetLength - The desired length of the return array.
 * @returns {Array} an array of at least 'targetLength' length
 * @alias module:modeling/utils.padArrayToLength
 */
const padArrayToLength = (anArray, padding, targetLength) => {
  anArray = anArray.slice()
  while (anArray.length < targetLength) {
    anArray.push(padding)
  }
  return anArray
}

module.exports = padArrayToLength


/***/ }),

/***/ 53455:
/***/ ((module) => {

/**
 * Convert the given angle (radians) to degrees.
 * @param {Number} radians - angle in radians
 * @returns {Number} angle in degrees
 * @alias module:modeling/utils.radToDeg
 */
const radToDeg = (radians) => radians * 57.29577951308232

module.exports = radToDeg


/***/ }),

/***/ 90075:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const { TAU } = __webpack_require__(77022)

/**
 * Calculate the number of segments from the given radius based on minimum length or angle.
 * @param {Number} radius - radius of the requested shape
 * @param {Number} minimumLength - minimum length of segments; length > 0
 * @param {Number} minimumAngle - minimum angle (radians) between segments; 0 > angle < TAU
 * @returns {Number} number of segments to complete the radius
 * @alias module:modeling/utils.radiusToSegments
 */
const radiusToSegments = (radius, minimumLength, minimumAngle) => {
  const ss = minimumLength > 0 ? radius * TAU / minimumLength : 0
  const as = minimumAngle > 0 ? TAU / minimumAngle : 0
  // minimum segments is four(4) for round primitives
  return Math.ceil(Math.max(ss, as, 4))
}

module.exports = radiusToSegments


/***/ }),

/***/ 2262:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Fl": () => (/* binding */ computed),
/* harmony export */   "PG": () => (/* binding */ isReactive),
/* harmony export */   "dq": () => (/* binding */ isRef),
/* harmony export */   "iH": () => (/* binding */ ref),
/* harmony export */   "qq": () => (/* binding */ ReactiveEffect),
/* harmony export */   "yT": () => (/* binding */ isShallow)
/* harmony export */ });
/* unused harmony exports EffectScope, ITERATE_KEY, customRef, deferredComputed, effect, effectScope, enableTracking, getCurrentScope, isProxy, isReadonly, markRaw, onScopeDispose, pauseTracking, proxyRefs, reactive, readonly, resetTracking, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, toValue, track, trigger, triggerRef, unref */
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3577);


function warn(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}

let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    /**
     * @internal
     */
    this._active = true;
    /**
     * @internal
     */
    this.effects = [];
    /**
     * @internal
     */
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else if (false) {}
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  } else if (false) {}
}

const createDep = (effects) => {
  const dep = new Set(effects);
  dep.w = 0;
  dep.n = 0;
  return dep;
};
const wasTracked = (dep) => (dep.w & trackOpBit) > 0;
const newTracked = (dep) => (dep.n & trackOpBit) > 0;
const initDepMarkers = ({ deps }) => {
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].w |= trackOpBit;
    }
  }
};
const finalizeDepMarkers = (effect) => {
  const { deps } = effect;
  if (deps.length) {
    let ptr = 0;
    for (let i = 0; i < deps.length; i++) {
      const dep = deps[i];
      if (wasTracked(dep) && !newTracked(dep)) {
        dep.delete(effect);
      } else {
        deps[ptr++] = dep;
      }
      dep.w &= ~trackOpBit;
      dep.n &= ~trackOpBit;
    }
    deps.length = ptr;
  }
};

const targetMap = /* @__PURE__ */ new WeakMap();
let effectTrackDepth = 0;
let trackOpBit = 1;
const maxMarkerBits = 30;
let activeEffect;
const ITERATE_KEY = Symbol( false ? 0 : "");
const MAP_KEY_ITERATE_KEY = Symbol( false ? 0 : "");
class ReactiveEffect {
  constructor(fn, scheduler = null, scope) {
    this.fn = fn;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this.parent = void 0;
    recordEffectScope(this, scope);
  }
  run() {
    if (!this.active) {
      return this.fn();
    }
    let parent = activeEffect;
    let lastShouldTrack = shouldTrack;
    while (parent) {
      if (parent === this) {
        return;
      }
      parent = parent.parent;
    }
    try {
      this.parent = activeEffect;
      activeEffect = this;
      shouldTrack = true;
      trackOpBit = 1 << ++effectTrackDepth;
      if (effectTrackDepth <= maxMarkerBits) {
        initDepMarkers(this);
      } else {
        cleanupEffect(this);
      }
      return this.fn();
    } finally {
      if (effectTrackDepth <= maxMarkerBits) {
        finalizeDepMarkers(this);
      }
      trackOpBit = 1 << --effectTrackDepth;
      activeEffect = this.parent;
      shouldTrack = lastShouldTrack;
      this.parent = void 0;
      if (this.deferStop) {
        this.stop();
      }
    }
  }
  stop() {
    if (activeEffect === this) {
      this.deferStop = true;
    } else if (this.active) {
      cleanupEffect(this);
      if (this.onStop) {
        this.onStop();
      }
      this.active = false;
    }
  }
}
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect2);
    }
    deps.length = 0;
  }
}
function effect(fn, options) {
  if (fn.effect) {
    fn = fn.effect.fn;
  }
  const _effect = new ReactiveEffect(fn);
  if (options) {
    extend(_effect, options);
    if (options.scope)
      recordEffectScope(_effect, options.scope);
  }
  if (!options || !options.lazy) {
    _effect.run();
  }
  const runner = _effect.run.bind(_effect);
  runner.effect = _effect;
  return runner;
}
function stop(runner) {
  runner.effect.stop();
}
let shouldTrack = true;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep());
    }
    const eventInfo =  false ? 0 : void 0;
    trackEffects(dep, eventInfo);
  }
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (false) {}
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .S0)(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const eventInfo =  false ? 0 : void 0;
  if (deps.length === 1) {
    if (deps[0]) {
      if (false) {} else {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    if (false) {} else {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  const effects = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(dep) ? dep : [...dep];
  for (const effect2 of effects) {
    if (effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
  for (const effect2 of effects) {
    if (!effect2.computed) {
      triggerEffect(effect2, debuggerEventExtraInfo);
    }
  }
}
function triggerEffect(effect2, debuggerEventExtraInfo) {
  if (effect2 !== activeEffect || effect2.allowRecurse) {
    if (false) {}
    if (effect2.scheduler) {
      effect2.scheduler();
    } else {
      effect2.run();
    }
  }
}
function getDepFromReactive(object, key) {
  var _a;
  return (_a = targetMap.get(object)) == null ? void 0 : _a.get(key);
}

const isNonTrackableKeys = /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .makeMap */ .fY)(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .yk)
);
const get$1 = /* @__PURE__ */ createGetter();
const shallowGet = /* @__PURE__ */ createGetter(false, true);
const readonlyGet = /* @__PURE__ */ createGetter(true);
const shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty(key) {
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return shallow;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target);
    if (!isReadonly2) {
      if (targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .yk)(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .S0)(key) ? res : res.value;
    }
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
const set$1 = /* @__PURE__ */ createSetter();
const shallowSet = /* @__PURE__ */ createSetter(true);
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (isReadonly(oldValue) && isRef(oldValue) && !isRef(value)) {
      return false;
    }
    if (!shallow) {
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target) && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isIntegerKey */ .S0)(key) ? Number(key) < target.length : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has$1(target, key) {
  const result = Reflect.has(target, key);
  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isSymbol */ .yk)(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
const mutableHandlers = {
  get: get$1,
  set: set$1,
  deleteProperty,
  has: has$1,
  ownKeys
};
const readonlyHandlers = {
  get: readonlyGet,
  set(target, key) {
    if (false) {}
    return true;
  },
  deleteProperty(target, key) {
    if (false) {}
    return true;
  }
};
const shallowReactiveHandlers = /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)(
  {},
  mutableHandlers,
  {
    get: shallowGet,
    set: shallowSet
  }
);
const shallowReadonlyHandlers = /* @__PURE__ */ (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .extend */ .l7)(
  {},
  readonlyHandlers,
  {
    get: shallowReadonlyGet
  }
);

const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get(target, key, isReadonly = false, isShallow = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly) {
    if (key !== rawKey) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly) {
    if (key !== rawKey) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly = false) {
  target = target["__v_raw"];
  !isReadonly && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {}
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (false) {}
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget =  false ? 0 : void 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly, isShallow) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    !isReadonly && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly, isShallow) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isMap */ ._N)(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;
    !isReadonly && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (false) {}
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(
      method,
      false,
      false
    );
    readonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      false
    );
    shallowInstrumentations2[method] = createIterableMethod(
      method,
      false,
      true
    );
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly, shallow) {
  const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly;
    } else if (key === "__v_isReadonly") {
      return isReadonly;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasOwn */ .RI)(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    console.warn(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}

const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1 /* COMMON */;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2 /* COLLECTION */;
    default:
      return 0 /* INVALID */;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 /* INVALID */ : targetTypeMap((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .toRawType */ .W7)(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(target)) {
    if (false) {}
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0 /* INVALID */) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 /* COLLECTION */ ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
const toReactive = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(value) ? reactive(value) : value;
const toReadonly = (value) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(value) ? readonly(value) : value;

function trackRefValue(ref2) {
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    if (false) {} else {
      trackEffects(ref2.dep || (ref2.dep = createDep()));
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    if (false) {} else {
      triggerEffects(dep);
    }
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(newVal, this._rawValue)) {
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this, newVal);
    }
  }
}
function triggerRef(ref2) {
  triggerRefValue(ref2,  false ? 0 : void 0);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function toValue(source) {
  return isFunction(source) ? source() : unref(source);
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get, set } = factory(
      () => trackRefValue(this),
      () => triggerRefValue(this)
    );
    this._get = get;
    this._set = set;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (false) {}
  const ret = isArray(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = propertyToRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction(source)) {
    return new GetterRefImpl(source);
  } else if (isObject(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(
    source,
    key,
    defaultValue
  );
}

class ComputedRefImpl {
  constructor(getter, _setter, isReadonly, isSSR) {
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this._dirty = true;
    this.effect = new ReactiveEffect(getter, () => {
      if (!this._dirty) {
        this._dirty = true;
        triggerRefValue(this);
      }
    });
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly;
  }
  get value() {
    const self = toRaw(this);
    trackRefValue(self);
    if (self._dirty || !self._cacheable) {
      self._dirty = false;
      self._value = self.effect.run();
    }
    return self._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
}
function computed(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter =  false ? 0 : _vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .NOOP */ .dG;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (false) {}
  return cRef;
}

const tick = /* @__PURE__ */ (/* unused pure expression or super */ null && (Promise.resolve()));
const queue = (/* unused pure expression or super */ null && ([]));
let queued = false;
const scheduler = (fn) => {
  queue.push(fn);
  if (!queued) {
    queued = true;
    tick.then(flush);
  }
};
const flush = () => {
  for (let i = 0; i < queue.length; i++) {
    queue[i]();
  }
  queue.length = 0;
  queued = false;
};
class DeferredComputedRefImpl {
  constructor(getter) {
    this.dep = void 0;
    this._dirty = true;
    this.__v_isRef = true;
    this["__v_isReadonly"] = true;
    let compareTarget;
    let hasCompareTarget = false;
    let scheduled = false;
    this.effect = new ReactiveEffect(getter, (computedTrigger) => {
      if (this.dep) {
        if (computedTrigger) {
          compareTarget = this._value;
          hasCompareTarget = true;
        } else if (!scheduled) {
          const valueToCompare = hasCompareTarget ? compareTarget : this._value;
          scheduled = true;
          hasCompareTarget = false;
          scheduler(() => {
            if (this.effect.active && this._get() !== valueToCompare) {
              triggerRefValue(this);
            }
            scheduled = false;
          });
        }
        for (const e of this.dep) {
          if (e.computed instanceof DeferredComputedRefImpl) {
            e.scheduler(
              true
              /* computedTrigger */
            );
          }
        }
      }
      this._dirty = true;
    });
    this.effect.computed = this;
  }
  _get() {
    if (this._dirty) {
      this._dirty = false;
      return this._value = this.effect.run();
    }
    return this._value;
  }
  get value() {
    trackRefValue(this);
    return toRaw(this)._get();
  }
}
function deferredComputed(getter) {
  return new DeferredComputedRefImpl(getter);
}




/***/ }),

/***/ 3577:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Kn": () => (/* binding */ isObject),
/* harmony export */   "RI": () => (/* binding */ hasOwn),
/* harmony export */   "S0": () => (/* binding */ isIntegerKey),
/* harmony export */   "W7": () => (/* binding */ toRawType),
/* harmony export */   "_N": () => (/* binding */ isMap),
/* harmony export */   "aU": () => (/* binding */ hasChanged),
/* harmony export */   "dG": () => (/* binding */ NOOP),
/* harmony export */   "fY": () => (/* binding */ makeMap),
/* harmony export */   "kJ": () => (/* binding */ isArray),
/* harmony export */   "l7": () => (/* binding */ extend),
/* harmony export */   "mf": () => (/* binding */ isFunction),
/* harmony export */   "tI": () => (/* binding */ isPromise),
/* harmony export */   "yk": () => (/* binding */ isSymbol)
/* harmony export */ });
/* unused harmony exports EMPTY_ARR, EMPTY_OBJ, NO, PatchFlagNames, camelize, capitalize, def, escapeHtml, escapeHtmlComment, genPropsAccessExp, generateCodeFrame, getGlobalThis, hyphenate, includeBooleanAttr, invokeArrayFns, isBooleanAttr, isBuiltInDirective, isDate, isGloballyWhitelisted, isHTMLTag, isKnownHtmlAttr, isKnownSvgAttr, isModelListener, isOn, isPlainObject, isRegExp, isReservedProp, isSSRSafeAttrName, isSVGTag, isSet, isSpecialBooleanAttr, isString, isVoidTag, looseEqual, looseIndexOf, looseToNumber, normalizeClass, normalizeProps, normalizeStyle, objectToString, parseStringStyle, propsToAttrMap, remove, slotFlagsText, stringifyStyle, toDisplayString, toHandlerKey, toNumber, toTypeString */
function makeMap(str, expectsLowerCase) {
  const map = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];
}

const EMPTY_OBJ =  false ? 0 : {};
const EMPTY_ARR =  false ? 0 : [];
const NOOP = () => {
};
const NO = () => false;
const onRE = /^on[^a-z]/;
const isOn = (key) => onRE.test(key);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty.call(val, key);
const isArray = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return isObject(val) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
)));
const isBuiltInDirective = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
)));
const cacheStringFunction = (fn) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize = cacheStringFunction(
  (str) => str.charAt(0).toUpperCase() + str.slice(1)
);
const toHandlerKey = cacheStringFunction(
  (str) => str ? `on${capitalize(str)}` : ``
);
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](arg);
  }
};
const def = (obj, key, value) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    value
  });
};
const looseToNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
const toNumber = (val) => {
  const n = isString(val) ? Number(val) : NaN;
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : {});
};
const identRE = /^[_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*$/;
function genPropsAccessExp(name) {
  return identRE.test(name) ? `__props.${name}` : `__props[${JSON.stringify(name)}]`;
}

const PatchFlagNames = {
  [1]: `TEXT`,
  [2]: `CLASS`,
  [4]: `STYLE`,
  [8]: `PROPS`,
  [16]: `FULL_PROPS`,
  [32]: `HYDRATE_EVENTS`,
  [64]: `STABLE_FRAGMENT`,
  [128]: `KEYED_FRAGMENT`,
  [256]: `UNKEYED_FRAGMENT`,
  [512]: `NEED_PATCH`,
  [1024]: `DYNAMIC_SLOTS`,
  [2048]: `DEV_ROOT_FRAGMENT`,
  [-1]: `HOISTED`,
  [-2]: `BAIL`
};

const slotFlagsText = {
  [1]: "STABLE",
  [2]: "DYNAMIC",
  [3]: "FORWARDED"
};

const GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console";
const isGloballyWhitelisted = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(GLOBALS_WHITE_LISTED)));

const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
  let lines = source.split(/(\r?\n)/);
  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
  lines = lines.filter((_, idx) => idx % 2 === 0);
  let count = 0;
  const res = [];
  for (let i = 0; i < lines.length; i++) {
    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
    if (count >= start) {
      for (let j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length)
          continue;
        const line = j + 1;
        res.push(
          `${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`
        );
        const lineLength = lines[j].length;
        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
        if (j === i) {
          const pad = start - (count - (lineLength + newLineSeqLength));
          const length = Math.max(
            1,
            end > count ? lineLength - pad : end - start
          );
          res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
        } else if (j > i) {
          if (end > count) {
            const length = Math.max(Math.min(end - count, lineLength), 1);
            res.push(`   |  ` + "^".repeat(length));
          }
          count += lineLength + newLineSeqLength;
        }
      }
      break;
    }
  }
  return res.join("\n");
}

function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value)) {
    return value;
  } else if (isObject(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function stringifyStyle(styles) {
  let ret = "";
  if (!styles || isString(styles)) {
    return ret;
  }
  for (const key in styles) {
    const value = styles[key];
    const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
    if (isString(value) || typeof value === "number") {
      ret += `${normalizedKey}:${value};`;
    }
  }
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style } = props;
  if (klass && !isString(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}

const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(HTML_TAGS)));
const isSVGTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(SVG_TAGS)));
const isVoidTag = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(VOID_TAGS)));

const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(specialBooleanAttrs)));
const isBooleanAttr = /* @__PURE__ */ makeMap(
  specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
const unsafeAttrCharRE = /[>/="'\u0009\u000a\u000c\u0020]/;
const attrValidationCache = {};
function isSSRSafeAttrName(name) {
  if (attrValidationCache.hasOwnProperty(name)) {
    return attrValidationCache[name];
  }
  const isUnsafe = unsafeAttrCharRE.test(name);
  if (isUnsafe) {
    console.error(`unsafe attribute name: ${name}`);
  }
  return attrValidationCache[name] = !isUnsafe;
}
const propsToAttrMap = {
  acceptCharset: "accept-charset",
  className: "class",
  htmlFor: "for",
  httpEquiv: "http-equiv"
};
const isKnownHtmlAttr = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`
)));
const isKnownSvgAttr = /* @__PURE__ */ (/* unused pure expression or super */ null && (makeMap(
  `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
)));

const escapeRE = /["'&<>]/;
function escapeHtml(string) {
  const str = "" + string;
  const match = escapeRE.exec(str);
  if (!match) {
    return str;
  }
  let html = "";
  let escaped;
  let index;
  let lastIndex = 0;
  for (index = match.index; index < str.length; index++) {
    switch (str.charCodeAt(index)) {
      case 34:
        escaped = "&quot;";
        break;
      case 38:
        escaped = "&amp;";
        break;
      case 39:
        escaped = "&#39;";
        break;
      case 60:
        escaped = "&lt;";
        break;
      case 62:
        escaped = "&gt;";
        break;
      default:
        continue;
    }
    if (lastIndex !== index) {
      html += str.slice(lastIndex, index);
    }
    lastIndex = index + 1;
    html += escaped;
  }
  return lastIndex !== index ? html + str.slice(lastIndex, index) : html;
}
const commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;
function escapeHtmlComment(src) {
  return src.replace(commentStripRE, "");
}

function looseCompareArrays(a, b) {
  if (a.length !== b.length)
    return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isSymbol(a);
  bValidType = isSymbol(b);
  if (aValidType || bValidType) {
    return a === b;
  }
  aValidType = isArray(a);
  bValidType = isArray(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject(a);
  bValidType = isObject(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}

const toDisplayString = (val) => {
  return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
        entries[`${key} =>`] = val2;
        return entries;
      }, {})
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()]
    };
  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
    return String(val);
  }
  return val;
};




/***/ }),

/***/ 69374:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": () => (/* binding */ typedArrayCopy),
/* harmony export */   "CT": () => (/* binding */ spliceSample),
/* harmony export */   "Dr": () => (/* binding */ rangeStartEnd),
/* harmony export */   "GI": () => (/* binding */ arrayMin),
/* harmony export */   "LA": () => (/* binding */ arrayShallowClone),
/* harmony export */   "L_": () => (/* binding */ arrayPushItems),
/* harmony export */   "Sc": () => (/* binding */ arrayMap),
/* harmony export */   "UP": () => (/* binding */ sample),
/* harmony export */   "V7": () => (/* binding */ arrayDifference),
/* harmony export */   "Zg": () => (/* binding */ arraySortBy),
/* harmony export */   "Zi": () => (/* binding */ rangeWithEnd),
/* harmony export */   "Zq": () => (/* binding */ arrayChunk),
/* harmony export */   "ae": () => (/* binding */ arrayIsEqual),
/* harmony export */   "dD": () => (/* binding */ arraySum),
/* harmony export */   "gc": () => (/* binding */ arrayCopy),
/* harmony export */   "k": () => (/* binding */ arrayCompact),
/* harmony export */   "kV": () => (/* binding */ uniqWithoutPreservingOrder),
/* harmony export */   "nu": () => (/* binding */ arrayToSet),
/* harmony export */   "tN": () => (/* binding */ arrayIntersection),
/* harmony export */   "tt": () => (/* binding */ arrayUniq),
/* harmony export */   "uH": () => (/* binding */ arrayMax),
/* harmony export */   "vr": () => (/* binding */ arrayUnion),
/* harmony export */   "w6": () => (/* binding */ range)
/* harmony export */ });
/* unused harmony exports sampleIndex, arrayXOR, arrayAverage, ArrayUtils */
/* harmony import */ var _MapUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(84354);
/* harmony import */ var _SetUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41899);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48454);
/* harmony import */ var _math_Module__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3404);




const _tmp = new Set();
const _tmp0 = new Set();
const _tmp1 = new Set();
function range(start, end, step, target) {
    if (end == null) {
        end = start;
        start = 0;
    }
    const length = Math.floor((end - start) / step);
    target.length = length;
    for (let i = 0; i < length; i++) {
        target[i] = start + i * step;
    }
    return target;
}
function rangeWithEnd(end) {
    const target = [];
    range(0, end, 1, target);
    return target;
}
function rangeStartEnd(start, end) {
    const target = [];
    range(start, end, 1, target);
    return target;
}
function arrayUniq(array, target) {
    target.length = 0;
    for (const element of array) {
        if (!target.includes(element)) {
            target.push(element);
        }
    }
    return target;
    // if we use a set, we lose the order
    // const tmpSet: Set<T> = new Set();
    // for (let elem of array) {
    // 	tmpSet.add(elem);
    // }
    // const newArray: Array<T> = new Array(tmpSet.size);
    // let i = 0;
    // tmpSet.forEach((elem) => {
    // 	newArray[i] = elem;
    // 	i++;
    // });
    // return newArray;
}
function sampleIndex(array, seed) {
    return Math.floor((0,_math_Module__WEBPACK_IMPORTED_MODULE_0__/* .randFloat */ .Qy)(seed) * array.length);
}
function sample(array, seed) {
    return array[sampleIndex(array, seed)];
}
function spliceSample(array, seed) {
    return array.splice(sampleIndex(array, seed), 1)[0];
}
function uniqWithoutPreservingOrder(array, target) {
    arrayToSet(array, _tmp);
    return (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setToArray */ .T_)(_tmp, target);
    // for (let elem of array) {
    // 	tmpSet.add(elem);
    // }
    // const newArray: Array<T> = new Array(tmpSet.size);
    // let i = 0;
    // tmpSet.forEach((elem) => {
    // 	newArray[i] = elem;
    // 	i++;
    // });
    // return newArray;
}
function arrayCompact(array, target) {
    target.length = 0;
    for (const elem of array) {
        if (elem != null) {
            target.push(elem);
        }
    }
    return target;
}
function arrayMin(array) {
    let min = array[0];
    for (const element of array) {
        if (element < min) {
            min = element;
        }
    }
    return min;
}
function arrayMax(array) {
    let max = array[0];
    for (const element of array) {
        if (element > max) {
            max = element;
        }
    }
    return max;
}
function arraySum(array) {
    let sum = 0;
    for (const element of array) {
        sum += element;
    }
    return sum;
}
function arrayChunk(array, chunkSize) {
    const newArray = [];
    let newSubArray = [];
    newArray.push(newSubArray);
    for (let i = 0; i < array.length; i++) {
        if (newSubArray.length == chunkSize) {
            newSubArray = [];
            newArray.push(newSubArray);
        }
        newSubArray.push(array[i]);
    }
    return newArray;
}
function arrayUnion(array0, array1, target) {
    (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setUnion */ .uy)(arrayToSet(array0, _tmp0), arrayToSet(array1, _tmp1), _tmp);
    target.length = 0;
    for (const item of _tmp) {
        target.push(item);
    }
    return target;
}
function arrayIntersection(array0, array1, target) {
    (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setIntersection */ .OV)(arrayToSet(array0, _tmp0), arrayToSet(array1, _tmp1), _tmp);
    target.length = 0;
    for (const item of _tmp) {
        target.push(item);
    }
    return target;
}
function arrayDifference(array0, array1, target) {
    (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setDifference */ .TV)(arrayToSet(array0, _tmp0), arrayToSet(array1, _tmp1), _tmp);
    target.length = 0;
    for (const item of _tmp) {
        target.push(item);
    }
    return target;
}
function arrayXOR(array0, array1, target) {
    setXOR(arrayToSet(array0, _tmp0), arrayToSet(array1, _tmp1), _tmp);
    target.length = 0;
    for (const item of _tmp) {
        target.push(item);
    }
    return target;
}
function arrayToSet(array, target) {
    target.clear();
    for (const elem of array) {
        target.add(elem);
    }
    return target;
}
function arrayIsEqual(array0, array1) {
    if (array0.length != array1.length) {
        return false;
    }
    const count = array0.length;
    for (let i = 0; i < count; i++) {
        if (array0[i] != array1[i]) {
            return false;
        }
    }
    return true;
}
function arraySortBy(array, callback) {
    if (array.length == 0) {
        return [];
    }
    const elementsByValue = new Map();
    const valuesSet = new Set();
    for (const elem of array) {
        const value = callback(elem);
        valuesSet.add(value);
        _MapUtils__WEBPACK_IMPORTED_MODULE_2__/* .MapUtils.pushOnArrayAtEntry */ .pl.pushOnArrayAtEntry(elementsByValue, value, elem);
    }
    const values = new Array(valuesSet.size);
    let i = 0;
    valuesSet.forEach((value) => {
        values[i] = value;
        i++;
    });
    // sort differently if the callback return value is a string or a number
    if (_Type__WEBPACK_IMPORTED_MODULE_3__/* .CoreType.isString */ .MR.isString(values[0])) {
        values.sort();
    }
    else {
        values.sort((a, b) => a - b);
    }
    const sorted_elements = new Array(array.length);
    i = 0;
    for (const value of values) {
        const elements_for_value = elementsByValue.get(value);
        if (elements_for_value) {
            for (const element of elements_for_value) {
                sorted_elements[i] = element;
                i++;
            }
        }
    }
    return sorted_elements;
}
function arrayShallowClone(array) {
    // https://stackoverflow.com/questions/3978492/fastest-way-to-duplicate-an-array-in-javascript-slice-vs-for-loop
    return [...array];
}
function arrayMap(array, callback, target) {
    target.length = 0;
    for (const item of array) {
        target.push(callback(item));
    }
    return target;
}
function arrayAverage(array) {
    return arraySum(array) / array.length;
}
class ArrayUtils {
}
ArrayUtils.shallowClone = arrayShallowClone;
ArrayUtils.min = arrayMin;
ArrayUtils.max = arrayMax;
ArrayUtils.sum = arraySum;
ArrayUtils.compact = arrayCompact;
ArrayUtils.uniq = arrayUniq;
ArrayUtils.uniqWithoutPreservingOrder = uniqWithoutPreservingOrder;
ArrayUtils.chunk = arrayChunk;
ArrayUtils.union = arrayUnion;
ArrayUtils.intersection = arrayIntersection;
ArrayUtils.toSet = arrayToSet;
ArrayUtils.isEqual = arrayIsEqual;
ArrayUtils.sortBy = arraySortBy;
ArrayUtils.range = range;
// const MAX_ITEMS_LENGTH = 1024;
function arrayPushItems(srcArray, target) {
    // we avoid the standard
    // array.push(...items),
    // as this can trigger an
    // 'Maximum call stack size exceeded' error
    // on some large items array.
    // So instead, we push them elements one by one if items.length is above a threshold
    // if (srcArray.length <= MAX_ITEMS_LENGTH) {
    // 	target.push(...srcArray);
    // } else {
    for (const item of srcArray) {
        target.push(item);
    }
    // }
}
function arrayCopy(srcArray, targetArray) {
    targetArray.length = 0;
    arrayPushItems(srcArray, targetArray);
}
function typedArrayCopy(srcArray, targetArray) {
    targetArray.set(srcArray);
    return targetArray;
}


/***/ }),

/***/ 84354:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => (/* binding */ addToSetAtEntry),
/* harmony export */   "Rz": () => (/* binding */ mapFirstKey),
/* harmony export */   "ZN": () => (/* binding */ getMapElementAtEntry),
/* harmony export */   "fE": () => (/* binding */ addToMapAtEntry),
/* harmony export */   "gs": () => (/* binding */ pushOnArrayAtEntry),
/* harmony export */   "mq": () => (/* binding */ mapValuesToArray),
/* harmony export */   "pl": () => (/* binding */ MapUtils),
/* harmony export */   "yW": () => (/* binding */ popFromArrayAtEntry)
/* harmony export */ });
/* unused harmony exports removeFromSetAtEntry, unshiftOnArrayAtEntry, concatOnArrayAtEntry, mapGroupBy, mapIncrementAtEntry, mapEntriesCount */
function mapFirstKey(map) {
    for (const [k] of map) {
        return k;
    }
}
function pushOnArrayAtEntry(map, key, newElement) {
    if (map.has(key)) {
        map.get(key).push(newElement);
    }
    else {
        map.set(key, [newElement]);
    }
}
function popFromArrayAtEntry(map, key, elementToRemove, removeFromMapIfEmpty = true) {
    if (map.has(key)) {
        const array = map.get(key);
        const index = array.indexOf(elementToRemove);
        if (index >= 0) {
            array.splice(index, 1);
            if (removeFromMapIfEmpty && array.length == 0) {
                map.delete(key);
            }
        }
    }
}
function addToSetAtEntry(map, key, newElement) {
    if (map.has(key)) {
        map.get(key).add(newElement);
    }
    else {
        const set = new Set();
        set.add(newElement);
        map.set(key, set);
    }
}
function addToMapAtEntry(map, key0, key1, newElement) {
    let subMap = map.get(key0);
    if (!subMap) {
        subMap = new Map();
        map.set(key0, subMap);
    }
    subMap.set(key1, newElement);
}
function getMapElementAtEntry(map, key0, key1) {
    let subMap = map.get(key0);
    if (!subMap) {
        return;
    }
    return subMap.get(key1);
}
function mapValuesToArray(map, target) {
    target.length = 0;
    map.forEach((v) => {
        target.push(v);
    });
    return target;
}
function removeFromSetAtEntry(map, key, elementToRemove) {
    if (map.has(key)) {
        const set = map.get(key);
        set.delete(elementToRemove);
        if (set.size == 0) {
            map.delete(key);
        }
    }
}
function unshiftOnArrayAtEntry(map, key, newElement) {
    if (map.has(key)) {
        map.get(key).unshift(newElement);
    }
    else {
        map.set(key, [newElement]);
    }
}
function concatOnArrayAtEntry(map, key, newElements) {
    if (map.has(key)) {
        let array = map.get(key);
        for (const element of newElements) {
            array.push(element);
        }
    }
    else {
        map.set(key, newElements);
    }
}
// export async function mapForEachSync<K, V>(map: Map<K, V>, callback: (v: V, k: K) => Promise<void>) {
// 	const values: V[] = [];
// 	const keys: K[] = [];
// 	map.forEach((value, key) => {
// 		values.push(value);
// 		keys.push(key);
// 	});
// 	for (let i = 0; i < values.length; i++) {
// 		const key = keys[i];
// 		const value = values[i];
// 		await callback(value, key);
// 	}
// }
function mapGroupBy(array, callback) {
    const map = new Map();
    array.forEach((element) => {
        const key = callback(element);
        pushOnArrayAtEntry(map, key, element);
    });
    return map;
}
function mapIncrementAtEntry(map, key, initValue) {
    let entry = map.get(key);
    if (entry == null) {
        entry = initValue;
    }
    entry++;
    map.set(key, entry);
    return entry;
}
function mapEntriesCount(map) {
    let count = 0;
    map.forEach(() => {
        count++;
    });
    return count;
}
class MapUtils {
}
// static arrayFromValues = mapValuesToArray;
MapUtils.pushOnArrayAtEntry = pushOnArrayAtEntry;
MapUtils.addToSetAtEntry = addToSetAtEntry;
MapUtils.popFromArrayAtEntry = popFromArrayAtEntry;
MapUtils.removeFromSetAtEntry = removeFromSetAtEntry;
MapUtils.unshiftOnArrayAtEntry = unshiftOnArrayAtEntry;
MapUtils.concatOnArrayAtEntry = concatOnArrayAtEntry;
// static forEachSync = mapForEachSync;
MapUtils.groupBy = mapGroupBy;
MapUtils.incrementAtEntry = mapIncrementAtEntry;
MapUtils.firstKey = mapFirstKey;


/***/ }),

/***/ 41474:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "NH": () => (/* binding */ getObjectMethodNames),
  "zs": () => (/* binding */ objectClone),
  "qI": () => (/* binding */ objectCloneDeep),
  "is": () => (/* binding */ objectIsEqual)
});

// UNUSED EXPORTS: objectMerge

// EXTERNAL MODULE: ./src/core/ArrayUtils.ts
var ArrayUtils = __webpack_require__(69374);
// EXTERNAL MODULE: ./src/core/Type.ts
var Type = __webpack_require__(48454);
;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheClear.js
/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/* harmony default export */ const _listCacheClear = (listCacheClear);

;// CONCATENATED MODULE: ./node_modules/lodash-es/eq.js
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/* harmony default export */ const lodash_es_eq = (eq);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_assocIndexOf.js


/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (lodash_es_eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/* harmony default export */ const _assocIndexOf = (assocIndexOf);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheDelete.js


/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/* harmony default export */ const _listCacheDelete = (listCacheDelete);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheGet.js


/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/* harmony default export */ const _listCacheGet = (listCacheGet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheHas.js


/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return _assocIndexOf(this.__data__, key) > -1;
}

/* harmony default export */ const _listCacheHas = (listCacheHas);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_listCacheSet.js


/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = _assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/* harmony default export */ const _listCacheSet = (listCacheSet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_ListCache.js






/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = _listCacheClear;
ListCache.prototype['delete'] = _listCacheDelete;
ListCache.prototype.get = _listCacheGet;
ListCache.prototype.has = _listCacheHas;
ListCache.prototype.set = _listCacheSet;

/* harmony default export */ const _ListCache = (ListCache);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackClear.js


/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new _ListCache;
  this.size = 0;
}

/* harmony default export */ const _stackClear = (stackClear);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackDelete.js
/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/* harmony default export */ const _stackDelete = (stackDelete);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackGet.js
/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/* harmony default export */ const _stackGet = (stackGet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackHas.js
/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/* harmony default export */ const _stackHas = (stackHas);

// EXTERNAL MODULE: ./node_modules/lodash-es/_baseGetTag.js + 2 modules
var _baseGetTag = __webpack_require__(13243);
// EXTERNAL MODULE: ./node_modules/lodash-es/isObject.js
var isObject = __webpack_require__(77226);
;// CONCATENATED MODULE: ./node_modules/lodash-es/isFunction.js



/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!(0,isObject/* default */.Z)(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = (0,_baseGetTag/* default */.Z)(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/* harmony default export */ const lodash_es_isFunction = (isFunction);

// EXTERNAL MODULE: ./node_modules/lodash-es/_root.js
var _root = __webpack_require__(66092);
;// CONCATENATED MODULE: ./node_modules/lodash-es/_coreJsData.js


/** Used to detect overreaching core-js shims. */
var coreJsData = _root/* default.__core-js_shared__ */.Z["__core-js_shared__"];

/* harmony default export */ const _coreJsData = (coreJsData);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_isMasked.js


/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(_coreJsData && _coreJsData.keys && _coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/* harmony default export */ const _isMasked = (isMasked);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_toSource.js
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/* harmony default export */ const _toSource = (toSource);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsNative.js





/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var _baseIsNative_funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var _baseIsNative_funcToString = _baseIsNative_funcProto.toString;

/** Used to check objects for own properties. */
var _baseIsNative_hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  _baseIsNative_funcToString.call(_baseIsNative_hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!(0,isObject/* default */.Z)(value) || _isMasked(value)) {
    return false;
  }
  var pattern = lodash_es_isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(_toSource(value));
}

/* harmony default export */ const _baseIsNative = (baseIsNative);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getValue.js
/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/* harmony default export */ const _getValue = (getValue);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getNative.js



/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = _getValue(object, key);
  return _baseIsNative(value) ? value : undefined;
}

/* harmony default export */ const _getNative = (getNative);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_Map.js



/* Built-in method references that are verified to be native. */
var Map = _getNative(_root/* default */.Z, 'Map');

/* harmony default export */ const _Map = (Map);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeCreate.js


/* Built-in method references that are verified to be native. */
var nativeCreate = _getNative(Object, 'create');

/* harmony default export */ const _nativeCreate = (nativeCreate);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashClear.js


/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = _nativeCreate ? _nativeCreate(null) : {};
  this.size = 0;
}

/* harmony default export */ const _hashClear = (hashClear);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashDelete.js
/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ const _hashDelete = (hashDelete);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashGet.js


/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var _hashGet_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _hashGet_hasOwnProperty = _hashGet_objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (_nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return _hashGet_hasOwnProperty.call(data, key) ? data[key] : undefined;
}

/* harmony default export */ const _hashGet = (hashGet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashHas.js


/** Used for built-in method references. */
var _hashHas_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _hashHas_hasOwnProperty = _hashHas_objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return _nativeCreate ? (data[key] !== undefined) : _hashHas_hasOwnProperty.call(data, key);
}

/* harmony default export */ const _hashHas = (hashHas);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_hashSet.js


/** Used to stand-in for `undefined` hash values. */
var _hashSet_HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (_nativeCreate && value === undefined) ? _hashSet_HASH_UNDEFINED : value;
  return this;
}

/* harmony default export */ const _hashSet = (hashSet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_Hash.js






/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = _hashClear;
Hash.prototype['delete'] = _hashDelete;
Hash.prototype.get = _hashGet;
Hash.prototype.has = _hashHas;
Hash.prototype.set = _hashSet;

/* harmony default export */ const _Hash = (Hash);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheClear.js




/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new _Hash,
    'map': new (_Map || _ListCache),
    'string': new _Hash
  };
}

/* harmony default export */ const _mapCacheClear = (mapCacheClear);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_isKeyable.js
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/* harmony default export */ const _isKeyable = (isKeyable);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getMapData.js


/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return _isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/* harmony default export */ const _getMapData = (getMapData);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheDelete.js


/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = _getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/* harmony default export */ const _mapCacheDelete = (mapCacheDelete);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheGet.js


/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return _getMapData(this, key).get(key);
}

/* harmony default export */ const _mapCacheGet = (mapCacheGet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheHas.js


/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return _getMapData(this, key).has(key);
}

/* harmony default export */ const _mapCacheHas = (mapCacheHas);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_mapCacheSet.js


/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = _getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/* harmony default export */ const _mapCacheSet = (mapCacheSet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_MapCache.js






/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = _mapCacheClear;
MapCache.prototype['delete'] = _mapCacheDelete;
MapCache.prototype.get = _mapCacheGet;
MapCache.prototype.has = _mapCacheHas;
MapCache.prototype.set = _mapCacheSet;

/* harmony default export */ const _MapCache = (MapCache);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_stackSet.js




/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof _ListCache) {
    var pairs = data.__data__;
    if (!_Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new _MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/* harmony default export */ const _stackSet = (stackSet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_Stack.js







/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new _ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = _stackClear;
Stack.prototype['delete'] = _stackDelete;
Stack.prototype.get = _stackGet;
Stack.prototype.has = _stackHas;
Stack.prototype.set = _stackSet;

/* harmony default export */ const _Stack = (Stack);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayEach.js
/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

/* harmony default export */ const _arrayEach = (arrayEach);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_defineProperty.js


var defineProperty = (function() {
  try {
    var func = _getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/* harmony default export */ const _defineProperty = (defineProperty);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignValue.js


/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && _defineProperty) {
    _defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/* harmony default export */ const _baseAssignValue = (baseAssignValue);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_assignValue.js



/** Used for built-in method references. */
var _assignValue_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _assignValue_hasOwnProperty = _assignValue_objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(_assignValue_hasOwnProperty.call(object, key) && lodash_es_eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    _baseAssignValue(object, key, value);
  }
}

/* harmony default export */ const _assignValue = (assignValue);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_copyObject.js



/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      _baseAssignValue(object, key, newValue);
    } else {
      _assignValue(object, key, newValue);
    }
  }
  return object;
}

/* harmony default export */ const _copyObject = (copyObject);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseTimes.js
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/* harmony default export */ const _baseTimes = (baseTimes);

// EXTERNAL MODULE: ./node_modules/lodash-es/isObjectLike.js
var isObjectLike = __webpack_require__(18533);
;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsArguments.js



/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return (0,isObjectLike/* default */.Z)(value) && (0,_baseGetTag/* default */.Z)(value) == argsTag;
}

/* harmony default export */ const _baseIsArguments = (baseIsArguments);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isArguments.js



/** Used for built-in method references. */
var isArguments_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var isArguments_hasOwnProperty = isArguments_objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = isArguments_objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = _baseIsArguments(function() { return arguments; }()) ? _baseIsArguments : function(value) {
  return (0,isObjectLike/* default */.Z)(value) && isArguments_hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/* harmony default export */ const lodash_es_isArguments = (isArguments);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isArray.js
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/* harmony default export */ const lodash_es_isArray = (isArray);

;// CONCATENATED MODULE: ./node_modules/lodash-es/stubFalse.js
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/* harmony default export */ const lodash_es_stubFalse = (stubFalse);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isBuffer.js



/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? _root/* default.Buffer */.Z.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || lodash_es_stubFalse;

/* harmony default export */ const lodash_es_isBuffer = (isBuffer);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_isIndex.js
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/* harmony default export */ const _isIndex = (isIndex);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isLength.js
/** Used as references for various `Number` constants. */
var isLength_MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= isLength_MAX_SAFE_INTEGER;
}

/* harmony default export */ const lodash_es_isLength = (isLength);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsTypedArray.js




/** `Object#toString` result references. */
var _baseIsTypedArray_argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    _baseIsTypedArray_funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[_baseIsTypedArray_argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[_baseIsTypedArray_funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return (0,isObjectLike/* default */.Z)(value) &&
    lodash_es_isLength(value.length) && !!typedArrayTags[(0,_baseGetTag/* default */.Z)(value)];
}

/* harmony default export */ const _baseIsTypedArray = (baseIsTypedArray);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseUnary.js
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/* harmony default export */ const _baseUnary = (baseUnary);

// EXTERNAL MODULE: ./node_modules/lodash-es/_freeGlobal.js
var _freeGlobal = __webpack_require__(13413);
;// CONCATENATED MODULE: ./node_modules/lodash-es/_nodeUtil.js


/** Detect free variable `exports`. */
var _nodeUtil_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var _nodeUtil_freeModule = _nodeUtil_freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var _nodeUtil_moduleExports = _nodeUtil_freeModule && _nodeUtil_freeModule.exports === _nodeUtil_freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = _nodeUtil_moduleExports && _freeGlobal/* default.process */.Z.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = _nodeUtil_freeModule && _nodeUtil_freeModule.require && _nodeUtil_freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* harmony default export */ const _nodeUtil = (nodeUtil);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isTypedArray.js




/* Node.js helper references. */
var nodeIsTypedArray = _nodeUtil && _nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? _baseUnary(nodeIsTypedArray) : _baseIsTypedArray;

/* harmony default export */ const lodash_es_isTypedArray = (isTypedArray);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayLikeKeys.js







/** Used for built-in method references. */
var _arrayLikeKeys_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _arrayLikeKeys_hasOwnProperty = _arrayLikeKeys_objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = lodash_es_isArray(value),
      isArg = !isArr && lodash_es_isArguments(value),
      isBuff = !isArr && !isArg && lodash_es_isBuffer(value),
      isType = !isArr && !isArg && !isBuff && lodash_es_isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? _baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || _arrayLikeKeys_hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           _isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const _arrayLikeKeys = (arrayLikeKeys);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_isPrototype.js
/** Used for built-in method references. */
var _isPrototype_objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || _isPrototype_objectProto;

  return value === proto;
}

/* harmony default export */ const _isPrototype = (isPrototype);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_overArg.js
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/* harmony default export */ const _overArg = (overArg);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeys.js


/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = _overArg(Object.keys, Object);

/* harmony default export */ const _nativeKeys = (nativeKeys);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeys.js



/** Used for built-in method references. */
var _baseKeys_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _baseKeys_hasOwnProperty = _baseKeys_objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!_isPrototype(object)) {
    return _nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (_baseKeys_hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const _baseKeys = (baseKeys);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isArrayLike.js



/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && lodash_es_isLength(value.length) && !lodash_es_isFunction(value);
}

/* harmony default export */ const lodash_es_isArrayLike = (isArrayLike);

;// CONCATENATED MODULE: ./node_modules/lodash-es/keys.js




/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object) : _baseKeys(object);
}

/* harmony default export */ const lodash_es_keys = (keys);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssign.js



/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && _copyObject(source, lodash_es_keys(source), object);
}

/* harmony default export */ const _baseAssign = (baseAssign);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_nativeKeysIn.js
/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const _nativeKeysIn = (nativeKeysIn);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseKeysIn.js




/** Used for built-in method references. */
var _baseKeysIn_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _baseKeysIn_hasOwnProperty = _baseKeysIn_objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!(0,isObject/* default */.Z)(object)) {
    return _nativeKeysIn(object);
  }
  var isProto = _isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !_baseKeysIn_hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/* harmony default export */ const _baseKeysIn = (baseKeysIn);

;// CONCATENATED MODULE: ./node_modules/lodash-es/keysIn.js




/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return lodash_es_isArrayLike(object) ? _arrayLikeKeys(object, true) : _baseKeysIn(object);
}

/* harmony default export */ const lodash_es_keysIn = (keysIn);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseAssignIn.js



/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && _copyObject(source, lodash_es_keysIn(source), object);
}

/* harmony default export */ const _baseAssignIn = (baseAssignIn);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneBuffer.js


/** Detect free variable `exports`. */
var _cloneBuffer_freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var _cloneBuffer_freeModule = _cloneBuffer_freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var _cloneBuffer_moduleExports = _cloneBuffer_freeModule && _cloneBuffer_freeModule.exports === _cloneBuffer_freeExports;

/** Built-in value references. */
var _cloneBuffer_Buffer = _cloneBuffer_moduleExports ? _root/* default.Buffer */.Z.Buffer : undefined,
    allocUnsafe = _cloneBuffer_Buffer ? _cloneBuffer_Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/* harmony default export */ const _cloneBuffer = (cloneBuffer);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_copyArray.js
/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/* harmony default export */ const _copyArray = (copyArray);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayFilter.js
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

/* harmony default export */ const _arrayFilter = (arrayFilter);

;// CONCATENATED MODULE: ./node_modules/lodash-es/stubArray.js
/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

/* harmony default export */ const lodash_es_stubArray = (stubArray);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbols.js



/** Used for built-in method references. */
var _getSymbols_objectProto = Object.prototype;

/** Built-in value references. */
var _getSymbols_propertyIsEnumerable = _getSymbols_objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? lodash_es_stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return _arrayFilter(nativeGetSymbols(object), function(symbol) {
    return _getSymbols_propertyIsEnumerable.call(object, symbol);
  });
};

/* harmony default export */ const _getSymbols = (getSymbols);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbols.js



/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return _copyObject(source, _getSymbols(source), object);
}

/* harmony default export */ const _copySymbols = (copySymbols);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_arrayPush.js
/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

/* harmony default export */ const _arrayPush = (arrayPush);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getPrototype.js


/** Built-in value references. */
var getPrototype = _overArg(Object.getPrototypeOf, Object);

/* harmony default export */ const _getPrototype = (getPrototype);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getSymbolsIn.js





/* Built-in method references for those with the same name as other `lodash` methods. */
var _getSymbolsIn_nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !_getSymbolsIn_nativeGetSymbols ? lodash_es_stubArray : function(object) {
  var result = [];
  while (object) {
    _arrayPush(result, _getSymbols(object));
    object = _getPrototype(object);
  }
  return result;
};

/* harmony default export */ const _getSymbolsIn = (getSymbolsIn);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_copySymbolsIn.js



/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return _copyObject(source, _getSymbolsIn(source), object);
}

/* harmony default export */ const _copySymbolsIn = (copySymbolsIn);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetAllKeys.js



/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return lodash_es_isArray(object) ? result : _arrayPush(result, symbolsFunc(object));
}

/* harmony default export */ const _baseGetAllKeys = (baseGetAllKeys);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeys.js




/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return _baseGetAllKeys(object, lodash_es_keys, _getSymbols);
}

/* harmony default export */ const _getAllKeys = (getAllKeys);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getAllKeysIn.js




/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return _baseGetAllKeys(object, lodash_es_keysIn, _getSymbolsIn);
}

/* harmony default export */ const _getAllKeysIn = (getAllKeysIn);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_DataView.js



/* Built-in method references that are verified to be native. */
var DataView = _getNative(_root/* default */.Z, 'DataView');

/* harmony default export */ const _DataView = (DataView);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_Promise.js



/* Built-in method references that are verified to be native. */
var Promise = _getNative(_root/* default */.Z, 'Promise');

/* harmony default export */ const _Promise = (Promise);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_Set.js



/* Built-in method references that are verified to be native. */
var _Set_Set = _getNative(_root/* default */.Z, 'Set');

/* harmony default export */ const _Set = (_Set_Set);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_WeakMap.js



/* Built-in method references that are verified to be native. */
var WeakMap = _getNative(_root/* default */.Z, 'WeakMap');

/* harmony default export */ const _WeakMap = (WeakMap);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_getTag.js








/** `Object#toString` result references. */
var _getTag_mapTag = '[object Map]',
    _getTag_objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    _getTag_setTag = '[object Set]',
    _getTag_weakMapTag = '[object WeakMap]';

var _getTag_dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = _toSource(_DataView),
    mapCtorString = _toSource(_Map),
    promiseCtorString = _toSource(_Promise),
    setCtorString = _toSource(_Set),
    weakMapCtorString = _toSource(_WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = _baseGetTag/* default */.Z;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((_DataView && getTag(new _DataView(new ArrayBuffer(1))) != _getTag_dataViewTag) ||
    (_Map && getTag(new _Map) != _getTag_mapTag) ||
    (_Promise && getTag(_Promise.resolve()) != promiseTag) ||
    (_Set && getTag(new _Set) != _getTag_setTag) ||
    (_WeakMap && getTag(new _WeakMap) != _getTag_weakMapTag)) {
  getTag = function(value) {
    var result = (0,_baseGetTag/* default */.Z)(value),
        Ctor = result == _getTag_objectTag ? value.constructor : undefined,
        ctorString = Ctor ? _toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return _getTag_dataViewTag;
        case mapCtorString: return _getTag_mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return _getTag_setTag;
        case weakMapCtorString: return _getTag_weakMapTag;
      }
    }
    return result;
  };
}

/* harmony default export */ const _getTag = (getTag);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneArray.js
/** Used for built-in method references. */
var _initCloneArray_objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _initCloneArray_hasOwnProperty = _initCloneArray_objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && _initCloneArray_hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

/* harmony default export */ const _initCloneArray = (initCloneArray);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_Uint8Array.js


/** Built-in value references. */
var Uint8Array = _root/* default.Uint8Array */.Z.Uint8Array;

/* harmony default export */ const _Uint8Array = (Uint8Array);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneArrayBuffer.js


/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new _Uint8Array(result).set(new _Uint8Array(arrayBuffer));
  return result;
}

/* harmony default export */ const _cloneArrayBuffer = (cloneArrayBuffer);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneDataView.js


/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

/* harmony default export */ const _cloneDataView = (cloneDataView);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneRegExp.js
/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

/* harmony default export */ const _cloneRegExp = (cloneRegExp);

// EXTERNAL MODULE: ./node_modules/lodash-es/_Symbol.js
var _Symbol = __webpack_require__(17685);
;// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneSymbol.js


/** Used to convert symbols to primitives and strings. */
var symbolProto = _Symbol/* default */.Z ? _Symbol/* default.prototype */.Z.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

/* harmony default export */ const _cloneSymbol = (cloneSymbol);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_cloneTypedArray.js


/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? _cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/* harmony default export */ const _cloneTypedArray = (cloneTypedArray);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneByTag.js






/** `Object#toString` result references. */
var _initCloneByTag_boolTag = '[object Boolean]',
    _initCloneByTag_dateTag = '[object Date]',
    _initCloneByTag_mapTag = '[object Map]',
    _initCloneByTag_numberTag = '[object Number]',
    _initCloneByTag_regexpTag = '[object RegExp]',
    _initCloneByTag_setTag = '[object Set]',
    _initCloneByTag_stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var _initCloneByTag_arrayBufferTag = '[object ArrayBuffer]',
    _initCloneByTag_dataViewTag = '[object DataView]',
    _initCloneByTag_float32Tag = '[object Float32Array]',
    _initCloneByTag_float64Tag = '[object Float64Array]',
    _initCloneByTag_int8Tag = '[object Int8Array]',
    _initCloneByTag_int16Tag = '[object Int16Array]',
    _initCloneByTag_int32Tag = '[object Int32Array]',
    _initCloneByTag_uint8Tag = '[object Uint8Array]',
    _initCloneByTag_uint8ClampedTag = '[object Uint8ClampedArray]',
    _initCloneByTag_uint16Tag = '[object Uint16Array]',
    _initCloneByTag_uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case _initCloneByTag_arrayBufferTag:
      return _cloneArrayBuffer(object);

    case _initCloneByTag_boolTag:
    case _initCloneByTag_dateTag:
      return new Ctor(+object);

    case _initCloneByTag_dataViewTag:
      return _cloneDataView(object, isDeep);

    case _initCloneByTag_float32Tag: case _initCloneByTag_float64Tag:
    case _initCloneByTag_int8Tag: case _initCloneByTag_int16Tag: case _initCloneByTag_int32Tag:
    case _initCloneByTag_uint8Tag: case _initCloneByTag_uint8ClampedTag: case _initCloneByTag_uint16Tag: case _initCloneByTag_uint32Tag:
      return _cloneTypedArray(object, isDeep);

    case _initCloneByTag_mapTag:
      return new Ctor;

    case _initCloneByTag_numberTag:
    case _initCloneByTag_stringTag:
      return new Ctor(object);

    case _initCloneByTag_regexpTag:
      return _cloneRegExp(object);

    case _initCloneByTag_setTag:
      return new Ctor;

    case symbolTag:
      return _cloneSymbol(object);
  }
}

/* harmony default export */ const _initCloneByTag = (initCloneByTag);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseCreate.js


/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!(0,isObject/* default */.Z)(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/* harmony default export */ const _baseCreate = (baseCreate);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_initCloneObject.js




/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !_isPrototype(object))
    ? _baseCreate(_getPrototype(object))
    : {};
}

/* harmony default export */ const _initCloneObject = (initCloneObject);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsMap.js



/** `Object#toString` result references. */
var _baseIsMap_mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return (0,isObjectLike/* default */.Z)(value) && _getTag(value) == _baseIsMap_mapTag;
}

/* harmony default export */ const _baseIsMap = (baseIsMap);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isMap.js




/* Node.js helper references. */
var nodeIsMap = _nodeUtil && _nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? _baseUnary(nodeIsMap) : _baseIsMap;

/* harmony default export */ const lodash_es_isMap = (isMap);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseIsSet.js



/** `Object#toString` result references. */
var _baseIsSet_setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return (0,isObjectLike/* default */.Z)(value) && _getTag(value) == _baseIsSet_setTag;
}

/* harmony default export */ const _baseIsSet = (baseIsSet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/isSet.js




/* Node.js helper references. */
var nodeIsSet = _nodeUtil && _nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? _baseUnary(nodeIsSet) : _baseIsSet;

/* harmony default export */ const lodash_es_isSet = (isSet);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseClone.js























/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var _baseClone_argsTag = '[object Arguments]',
    _baseClone_arrayTag = '[object Array]',
    _baseClone_boolTag = '[object Boolean]',
    _baseClone_dateTag = '[object Date]',
    _baseClone_errorTag = '[object Error]',
    _baseClone_funcTag = '[object Function]',
    _baseClone_genTag = '[object GeneratorFunction]',
    _baseClone_mapTag = '[object Map]',
    _baseClone_numberTag = '[object Number]',
    _baseClone_objectTag = '[object Object]',
    _baseClone_regexpTag = '[object RegExp]',
    _baseClone_setTag = '[object Set]',
    _baseClone_stringTag = '[object String]',
    _baseClone_symbolTag = '[object Symbol]',
    _baseClone_weakMapTag = '[object WeakMap]';

var _baseClone_arrayBufferTag = '[object ArrayBuffer]',
    _baseClone_dataViewTag = '[object DataView]',
    _baseClone_float32Tag = '[object Float32Array]',
    _baseClone_float64Tag = '[object Float64Array]',
    _baseClone_int8Tag = '[object Int8Array]',
    _baseClone_int16Tag = '[object Int16Array]',
    _baseClone_int32Tag = '[object Int32Array]',
    _baseClone_uint8Tag = '[object Uint8Array]',
    _baseClone_uint8ClampedTag = '[object Uint8ClampedArray]',
    _baseClone_uint16Tag = '[object Uint16Array]',
    _baseClone_uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[_baseClone_argsTag] = cloneableTags[_baseClone_arrayTag] =
cloneableTags[_baseClone_arrayBufferTag] = cloneableTags[_baseClone_dataViewTag] =
cloneableTags[_baseClone_boolTag] = cloneableTags[_baseClone_dateTag] =
cloneableTags[_baseClone_float32Tag] = cloneableTags[_baseClone_float64Tag] =
cloneableTags[_baseClone_int8Tag] = cloneableTags[_baseClone_int16Tag] =
cloneableTags[_baseClone_int32Tag] = cloneableTags[_baseClone_mapTag] =
cloneableTags[_baseClone_numberTag] = cloneableTags[_baseClone_objectTag] =
cloneableTags[_baseClone_regexpTag] = cloneableTags[_baseClone_setTag] =
cloneableTags[_baseClone_stringTag] = cloneableTags[_baseClone_symbolTag] =
cloneableTags[_baseClone_uint8Tag] = cloneableTags[_baseClone_uint8ClampedTag] =
cloneableTags[_baseClone_uint16Tag] = cloneableTags[_baseClone_uint32Tag] = true;
cloneableTags[_baseClone_errorTag] = cloneableTags[_baseClone_funcTag] =
cloneableTags[_baseClone_weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!(0,isObject/* default */.Z)(value)) {
    return value;
  }
  var isArr = lodash_es_isArray(value);
  if (isArr) {
    result = _initCloneArray(value);
    if (!isDeep) {
      return _copyArray(value, result);
    }
  } else {
    var tag = _getTag(value),
        isFunc = tag == _baseClone_funcTag || tag == _baseClone_genTag;

    if (lodash_es_isBuffer(value)) {
      return _cloneBuffer(value, isDeep);
    }
    if (tag == _baseClone_objectTag || tag == _baseClone_argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : _initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? _copySymbolsIn(value, _baseAssignIn(result, value))
          : _copySymbols(value, _baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = _initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new _Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (lodash_es_isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (lodash_es_isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? _getAllKeysIn : _getAllKeys)
    : (isFlat ? lodash_es_keysIn : lodash_es_keys);

  var props = isArr ? undefined : keysFunc(value);
  _arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    _assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

/* harmony default export */ const _baseClone = (baseClone);

;// CONCATENATED MODULE: ./node_modules/lodash-es/cloneDeep.js


/** Used to compose bitmasks for cloning. */
var cloneDeep_CLONE_DEEP_FLAG = 1,
    cloneDeep_CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */
function cloneDeep(value) {
  return _baseClone(value, cloneDeep_CLONE_DEEP_FLAG | cloneDeep_CLONE_SYMBOLS_FLAG);
}

/* harmony default export */ const lodash_es_cloneDeep = (cloneDeep);

;// CONCATENATED MODULE: ./node_modules/lodash-es/clone.js


/** Used to compose bitmasks for cloning. */
var clone_CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return _baseClone(value, clone_CLONE_SYMBOLS_FLAG);
}

/* harmony default export */ const lodash_es_clone = (clone);

;// CONCATENATED MODULE: ./src/core/ObjectUtils.ts




function getObjectMethodNames(obj) {
    let properties = new Set();
    let currentObj = obj;
    do {
        Object.getOwnPropertyNames(currentObj).map((item) => properties.add(item));
    } while ((currentObj = Object.getPrototypeOf(currentObj)));
    return [...properties.keys()].filter((item) => typeof obj[item] === 'function');
}
function objectIsEqual(object0, object1) {
    if (Type/* CoreType.isBoolean */.MR.isBoolean(object0) && Type/* CoreType.isBoolean */.MR.isBoolean(object1)) {
        return object0 == object1;
    }
    if (Type/* CoreType.isNumber */.MR.isNumber(object0) && Type/* CoreType.isNumber */.MR.isNumber(object1)) {
        return object0 == object1;
    }
    if (Type/* CoreType.isString */.MR.isString(object0) && Type/* CoreType.isString */.MR.isString(object1)) {
        return object0 == object1;
    }
    if (Type/* CoreType.isObject */.MR.isObject(object0) && Type/* CoreType.isObject */.MR.isObject(object1)) {
        const keys0 = Object.keys(object0);
        const keys1 = Object.keys(object1);
        if (!(0,ArrayUtils/* arrayIsEqual */.ae)(keys0, keys1)) {
            return false;
        }
        return JSON.stringify(object0) == JSON.stringify(object1);
    }
    return false;
}
function objectMerge(object0, object1) {
    return Object.assign(object0, object1);
}
function objectClone(value) {
    // return this.cloneDeep(value);
    return lodash_es_clone(value);
    // if (value) {
    // 	if (CoreType.isArray(value)) {
    // 		const newValues: Array<any> = value.map((v) => v);
    // 		return newValues as T;
    // 	} else {
    // 		return {...value};
    // 	}
    // }
    // return value;
}
function objectCloneDeep(value) {
    // https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore/issues/121
    // let target = {};
    // for (const prop in src) {
    // 	if (src.hasOwnProperty(prop)) {
    // 		if ((src as any)[prop] != null && typeof (src as any)[prop] === 'object') {
    // 			(target as any)[prop] = this.cloneDeep((src as any)[prop]);
    // 		} else {
    // 			(target as any)[prop] = (src as any)[prop];
    // 		}
    // 	}
    // }
    // return target as T;
    return lodash_es_cloneDeep(value);
    // if (CoreType.isString(value) || CoreType.isNumber(value) || CoreType.isBoolean(value)) {
    // 	return value;
    // }
    // if (this.isObject(value)) {
    // be careful, as this does not clone functions
    // 	return JSON.parse(JSON.stringify(value));
    // }
    // return value;
}


/***/ }),

/***/ 41899:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$i": () => (/* binding */ setFirstValue),
/* harmony export */   "OV": () => (/* binding */ setIntersection),
/* harmony export */   "TV": () => (/* binding */ setDifference),
/* harmony export */   "T_": () => (/* binding */ setToArray),
/* harmony export */   "l2": () => (/* binding */ setXOR),
/* harmony export */   "uy": () => (/* binding */ setUnion)
/* harmony export */ });
function setFirstValue(set) {
    for (const k of set) {
        return k;
    }
}
let i = 0;
function setToArray(set, target) {
    // const array: Array<T> = [];
    target.length = set.size;
    i = 0;
    set.forEach((elem) => {
        target[i] = elem;
        i++;
    });
    return target;
}
function setUnion(set0, set1, target) {
    target.clear();
    set0.forEach((val) => target.add(val));
    set1.forEach((val) => target.add(val));
    return target;
}
function setIntersection(set0, set1, target) {
    target.clear();
    set0.forEach((val) => {
        if (set1.has(val)) {
            target.add(val);
        }
    });
    set1.forEach((val) => {
        if (set0.has(val)) {
            target.add(val);
        }
    });
    return target;
}
function setDifference(set0, set1, target) {
    target.clear();
    set0.forEach((val) => {
        if (!set1.has(val)) {
            target.add(val);
        }
    });
    return target;
}
function setXOR(set0, set1, target) {
    target.clear();
    set0.forEach((val) => {
        if (!set1.has(val)) {
            target.add(val);
        }
    });
    set1.forEach((val) => {
        if (!set0.has(val)) {
            target.add(val);
        }
    });
    return target;
}


/***/ }),

/***/ 40354:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Fz": () => (/* binding */ stringToAttribNames),
/* harmony export */   "KX": () => (/* binding */ stringTailDigits),
/* harmony export */   "YE": () => (/* binding */ CoreString),
/* harmony export */   "oz": () => (/* binding */ stringToIndices),
/* harmony export */   "p3": () => (/* binding */ stringMatchesOneMask),
/* harmony export */   "qI": () => (/* binding */ sanitizeName),
/* harmony export */   "v$": () => (/* binding */ stringMatchMask)
/* harmony export */ });
/* unused harmony exports stringIsBoolean, stringToBoolean, stringIsNumber, stringIncrement, stringPluralize, stringCamelCase, stringUpperFirst, stringTitleize, precision, ensureFloat, ensureInteger, stringEscapeLineBreaks */
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48454);
/* harmony import */ var _ArrayUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69374);



const ATTRIB_NAMES_SEPARATOR = /[, ]/; //[',', ' ']
// const LETTERS = 'abcdefghijklmnopqrstuvwxyz'
// const LETTERS_UPPERCASE = LETTERS.toUpperCase()
// const NUMBERS = '0123645789'
// const ALL = LETTERS + LETTERS_UPPERCASE + NUMBERS
const TAIL_DIGIT_MATCH_REGEXP = /\d+$/;
const LEADING_ZEROS_MATCH_REGEXP = /^0+/;
// const DIGIT_PREDEDED_BY_UNDERSCOPE = /_\d$/
const INDICES_LIST_SEPARATOR = /,| /;
const ZERO = '0';
const SPACE = ' ';
const RANGE_SEPARATOR = '-';
// https://stackoverflow.com/questions/41856126/regexp-optional-dot-in-a-decimal-number
const NUM_REGEXP = /^-?\d+\.?\d*$/;
var BooleanString;
(function (BooleanString) {
    BooleanString["TRUE"] = "true";
    BooleanString["FALSE"] = "false";
})(BooleanString || (BooleanString = {}));
function stringIsBoolean(word) {
    return word == BooleanString.TRUE || word == BooleanString.FALSE;
}
function stringToBoolean(word) {
    return word == BooleanString.TRUE;
}
function stringIsNumber(word) {
    return NUM_REGEXP.test(word);
}
function sanitizeName(word) {
    word = word.replace(/[^A-Za-z0-9]/g, '_');
    word = word.replace(/^[0-9]/, '_'); // replace first char if not a letter
    return word;
}
let _tmp = [];
function stringToAttribNames(word, target) {
    const elements = word.split(ATTRIB_NAMES_SEPARATOR);
    _tmp.length = 0;
    for (const element of elements) {
        const trimmed = element.trim();
        if (trimmed.length > 0) {
            _tmp.push(trimmed);
        }
    }
    (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayUniq */ .tt)(_tmp, target);
    return target;
}
function stringTailDigits(word) {
    const match = word.match(TAIL_DIGIT_MATCH_REGEXP);
    if (match) {
        return parseInt(match[0]);
    }
    else {
        return 0;
    }
}
function stringIncrement(word) {
    const match = word.match(TAIL_DIGIT_MATCH_REGEXP);
    if (match) {
        let numbers_as_str = match[0];
        let zeros_prefix = '';
        const leading_zeros_match = numbers_as_str.match(LEADING_ZEROS_MATCH_REGEXP);
        if (leading_zeros_match) {
            zeros_prefix = leading_zeros_match[0];
        }
        const digits = parseInt(numbers_as_str);
        if (digits == 0) {
            if (zeros_prefix.length > 0) {
                if (zeros_prefix[zeros_prefix.length - 1] == ZERO) {
                    zeros_prefix = zeros_prefix.slice(0, -1);
                }
            }
        }
        const prefix = word.substring(0, word.length - match[0].length);
        return `${prefix}${zeros_prefix}${digits + 1}`;
    }
    else {
        return `${word}1`;
    }
}
function stringPluralize(word) {
    const last_char = word[word.length - 1];
    if (last_char !== 's') {
        return `${word}s`;
    }
    else {
        return word;
    }
}
function stringCamelCase(str) {
    const elements = str.replace(/_/g, ' ').split(' ');
    let newWord = '';
    for (let i = 0; i < elements.length; i++) {
        let element = elements[i].toLowerCase();
        if (i > 0) {
            element = stringUpperFirst(element);
        }
        newWord += element;
    }
    return newWord;
    // inspired from https://blog.bitsrc.io/5-string-manipulation-libraries-for-javascript-5de27e48ee62
    // return str.replace(/_/g, ' ').replace(/(?:^\w|[A-Z0-9]|\b\w|\s+)/g, function (match, index) {
    // 	console.log('match', match, index);
    // 	if (+match === 0) return ''; // or if (/\s+/.test(match)) for white spaces
    // 	return index === 0 ? match.toLowerCase() : match.toUpperCase();
    // });
}
function stringUpperFirst(word) {
    if (word.length == 0) {
        return word;
    }
    const newString = word[0].toUpperCase() + word.substring(1);
    return newString;
}
function stringTitleize(word) {
    const elements = word.split(/\s|_/g);
    const newElements = elements.map(stringUpperFirst);
    return newElements.join(' ');
}
function precision(val, decimals = 2) {
    decimals = Math.max(decimals, 0);
    const elements = `${val}`.split('.');
    if (decimals <= 0) {
        return elements[0];
    }
    let frac = elements[1];
    if (frac !== undefined) {
        if (frac.length > decimals) {
            frac = frac.substring(0, decimals);
        }
        frac = frac.padEnd(decimals, '0');
        return `${elements[0]}.${frac}`;
    }
    else {
        const string_to_pad = `${val}.`;
        const pad = string_to_pad.length + decimals;
        return string_to_pad.padEnd(pad, '0');
    }
}
function ensureFloat(num) {
    // const integer = Math.floor(num)
    // const delta = num - integer
    // if(delta)
    const num_as_string = `${num}`;
    const dot_pos = num_as_string.indexOf('.');
    if (dot_pos >= 0) {
        return num_as_string;
    }
    else {
        return `${num_as_string}.0`;
    }
}
function ensureInteger(num) {
    const num_as_string = `${num}`;
    const dot_pos = num_as_string.indexOf('.');
    if (dot_pos >= 0) {
        return num_as_string.split('.')[0];
    }
    else {
        return num_as_string;
    }
}
// let _elements: string[] = [];
// let _inclusionFilters: string[] = [];
// // https://stackoverflow.com/questions/26246601/wildcard-string-comparison-in-javascript#32402438
function stringMatchMask(word, mask) {
    if (mask === '*') {
        return true;
    }
    if (word == mask) {
        return true;
    }
    const elements = mask.split(SPACE);
    // const elements = _elements;
    const exclusionFilters = [];
    // _inclusionFilters.length = 0;
    for (const element of elements) {
        if (element.startsWith('^')) {
            exclusionFilters.push(element.substring(1));
        }
        else {
            // _inclusionFilters.push(element);
        }
    }
    // const exclusionFilters = elements
    // 	.filter((element) => element.startsWith('^'))
    // 	.map((element) => element.substring(1));
    for (const exclusionFilter of exclusionFilters) {
        const match = stringMatchMask(word, exclusionFilter);
        if (match) {
            return false;
        }
    }
    if (elements.length > 1) {
        for (const element of elements) {
            if (stringMatchMask(word, element)) {
                return true;
            }
        }
        return false;
    }
    // "."  => Find a single character, except newline or line terminator
    // ".*" => Matches any string that contains zero or more characters
    mask = mask.split('*').join('.*');
    // "^"  => Matches any string with the following at the beginning of it
    // "$"  => Matches any string with that in front at the end of it
    mask = `^${mask}$`;
    try {
        // Create a regular expression object for matching string
        const regex = new RegExp(mask);
        // Returns true if it finds a match, otherwise it returns false
        return regex.test(word);
    }
    catch (err) {
        // we need to wrap in a try catch in case it would create an invalid regex
        return false;
    }
}
function stringMatchesOneMask(word, masks) {
    for (const mask of masks) {
        if (stringMatchMask(word, mask)) {
            return true;
        }
    }
    return false;
}
let _indices = [];
let _subIndices = [];
function stringToIndices(indicesString, target) {
    target.length = 0;
    const elements = indicesString.split(INDICES_LIST_SEPARATOR);
    if (elements.length > 1) {
        _indices.length = 0;
        for (const element of elements) {
            stringToIndices(element, _subIndices);
            (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayPushItems */ .L_)(_subIndices, _indices);
        }
        // const indices: number[] = elements.flatMap(stringToIndices);
        // const uniqIndices: number[] = [];
        (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayUniq */ .tt)(_indices, target);
        return target.sort((a, b) => a - b);
    }
    else {
        const element = elements[0];
        if (element) {
            if (element.indexOf(RANGE_SEPARATOR) > 0) {
                const rangeElements = element.split(RANGE_SEPARATOR);
                const rangeStart = rangeElements[0];
                const rangeEnd = rangeElements[1];
                const rangeStartI = parseInt(rangeStart);
                const rangeEndI = parseInt(rangeEnd);
                if (_Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isNumberValid */ .MR.isNumberValid(rangeStartI) && _Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isNumberValid */ .MR.isNumberValid(rangeEndI)) {
                    return (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .range */ .w6)(rangeStartI, rangeEndI + 1, 1, target);
                }
            }
            else {
                const parsed = parseInt(element);
                if (_Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isNumberValid */ .MR.isNumberValid(parsed)) {
                    target.push(parsed);
                    return target;
                }
            }
        }
    }
    return target;
}
function stringEscapeLineBreaks(word) {
    return word.replace(/(\r\n|\n|\r)/gm, '\\n');
}
class CoreString {
}
CoreString.isBoolean = stringIsBoolean;
CoreString.toBoolean = stringToBoolean;
CoreString.isNumber = stringIsNumber;
CoreString.tailDigits = stringTailDigits;
CoreString.increment = stringIncrement;
CoreString.pluralize = stringPluralize;
CoreString.camelCase = stringCamelCase;
CoreString.upperFirst = stringUpperFirst;
CoreString.titleize = stringTitleize;
CoreString.precision = precision;
CoreString.ensureFloat = ensureFloat;
CoreString.ensureInteger = ensureInteger;
CoreString.matchMask = stringMatchMask;
CoreString.matchesOneMask = stringMatchesOneMask;
CoreString.attribNames = stringToAttribNames;
CoreString.indices = stringToIndices;
CoreString.escapeLineBreaks = stringEscapeLineBreaks;
CoreString.sanitizeName = sanitizeName;


/***/ }),

/***/ 60058:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Is": () => (/* binding */ ROTATION_ORDERS),
/* harmony export */   "Pr": () => (/* binding */ TRANSFORM_TARGET_TYPES),
/* harmony export */   "ZR": () => (/* binding */ CoreTransform),
/* harmony export */   "bP": () => (/* binding */ rotateGeometry),
/* harmony export */   "dH": () => (/* binding */ TransformTargetType),
/* harmony export */   "k8": () => (/* binding */ rotationMatrix),
/* harmony export */   "tM": () => (/* binding */ RotationOrder)
/* harmony export */ });
/* unused harmony export DEFAULT_ROTATION_ORDER */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);

var TransformTargetType;
(function (TransformTargetType) {
    TransformTargetType["OBJECT"] = "object";
    TransformTargetType["GEOMETRY"] = "geometry";
})(TransformTargetType || (TransformTargetType = {}));
const TRANSFORM_TARGET_TYPES = [TransformTargetType.GEOMETRY, TransformTargetType.OBJECT];
var RotationOrder;
(function (RotationOrder) {
    RotationOrder["XYZ"] = "XYZ";
    RotationOrder["XZY"] = "XZY";
    RotationOrder["YXZ"] = "YXZ";
    RotationOrder["YZX"] = "YZX";
    RotationOrder["ZYX"] = "ZYX";
    RotationOrder["ZXY"] = "ZXY";
})(RotationOrder || (RotationOrder = {}));
const ROTATION_ORDERS = [
    RotationOrder.XYZ,
    RotationOrder.XZY,
    RotationOrder.YXZ,
    RotationOrder.YZX,
    RotationOrder.ZXY,
    RotationOrder.ZYX,
];
const DEFAULT_ROTATION_ORDER = RotationOrder.XYZ;
const eulerArray = [0, 0, 0];
const _m = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();
const _q = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();
const _rotateDirOrigin = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const _rotateDirDest = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
function rotationMatrix(dirOrigin, dirDest, target) {
    _rotateDirDest.copy(dirDest).normalize();
    _rotateDirOrigin.copy(dirOrigin).normalize();
    _q.setFromUnitVectors(_rotateDirOrigin, _rotateDirDest);
    target.makeRotationFromQuaternion(_q);
}
function rotateGeometry(geometry, dirOrigin, dirDest) {
    _rotateDirDest.copy(dirDest).normalize();
    _rotateDirOrigin.copy(dirOrigin).normalize();
    _q.setFromUnitVectors(_rotateDirOrigin, _rotateDirDest);
    _m.makeRotationFromQuaternion(_q);
    geometry.applyMatrix4(_m);
}
class CoreTransform {
    constructor() {
        this._translation_matrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();
        this._translation_matrix_q = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();
        this._translation_matrix_s = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1);
        this._matrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4().identity();
        this._matrixQ = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();
        this._matrixEuler = new three__WEBPACK_IMPORTED_MODULE_0__.Euler();
        this._matrixS = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
    }
    static setParamsFromMatrix(matrix, node, options = {}) {
        let update_scale = options['scale'];
        if (update_scale == null) {
            update_scale = true;
        }
        matrix.decompose(this.set_params_from_matrix_position, this.set_params_from_matrix_quaternion, this.set_params_from_matrix_scale);
        this.set_params_from_matrix_euler.setFromQuaternion(this.set_params_from_matrix_quaternion);
        this.set_params_from_matrix_euler.toArray(eulerArray);
        this.set_params_from_matrix_rotation.fromArray(eulerArray);
        this.set_params_from_matrix_rotation.divideScalar(Math.PI / 180);
        this.set_params_from_matrix_position.toArray(this.set_params_from_matrix_t);
        this.set_params_from_matrix_rotation.toArray(this.set_params_from_matrix_r);
        this.set_params_from_matrix_scale.toArray(this.set_params_from_matrix_s);
        node.scene().batchUpdates(() => {
            node.params.set_vector3('t', this.set_params_from_matrix_t);
            node.params.set_vector3('r', this.set_params_from_matrix_r);
            node.params.set_vector3('s', this.set_params_from_matrix_s);
            if (update_scale) {
                node.params.set_float('scale', 1);
            }
        });
    }
    static setParamsFromObject(object, node) {
        object.position.toArray(this.set_params_from_object_position_array);
        object.rotation.toArray(this.set_params_from_object_rotation_array);
        this.set_params_from_object_rotation_deg.fromArray(this.set_params_from_object_rotation_array);
        this.set_params_from_object_rotation_deg.multiplyScalar(180 / Math.PI);
        this.set_params_from_object_rotation_deg.toArray(this.set_params_from_object_rotation_array);
        node.scene().batchUpdates(() => {
            node.params.set_vector3('t', this.set_params_from_object_position_array);
            node.params.set_vector3('r', this.set_params_from_object_rotation_array);
        });
    }
    translationMatrix(t) {
        this._translation_matrix.compose(t, this._translation_matrix_q, this._translation_matrix_s);
        return this._translation_matrix;
    }
    matrix(t, r, s, scale, rotationOrder) {
        this._matrixEuler.set(three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.degToRad(r.x), three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.degToRad(r.y), three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.degToRad(r.z), rotationOrder);
        this._matrixQ.setFromEuler(this._matrixEuler);
        this._matrixS.copy(s).multiplyScalar(scale);
        this._matrix.compose(t, this._matrixQ, this._matrixS);
        return this._matrix;
    }
    static rotateObject(object, dirOrigin, dirDest) {
        _rotateDirDest.copy(dirDest).normalize();
        _rotateDirOrigin.copy(dirOrigin).normalize();
        _q.setFromUnitVectors(_rotateDirOrigin, _rotateDirDest);
        // this._rotate_geometry_m.identity(); // not entirely sure this is necessary
        _m.makeRotationFromQuaternion(_q);
        object.matrix.multiply(_m);
        // object.updateMatrix();
        object.matrix.decompose(object.position, object.quaternion, object.scale);
    }
    static decomposeMatrix(object) {
        object.matrix.decompose(object.position, object.quaternion, object.scale);
    }
}
CoreTransform.set_params_from_matrix_position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
CoreTransform.set_params_from_matrix_quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();
CoreTransform.set_params_from_matrix_scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
CoreTransform.set_params_from_matrix_euler = new three__WEBPACK_IMPORTED_MODULE_0__.Euler();
CoreTransform.set_params_from_matrix_rotation = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
CoreTransform.set_params_from_matrix_t = [0, 0, 0];
CoreTransform.set_params_from_matrix_r = [0, 0, 0];
CoreTransform.set_params_from_matrix_s = [0, 0, 0];
CoreTransform.set_params_from_object_position_array = [0, 0, 0];
CoreTransform.set_params_from_object_rotation_deg = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
CoreTransform.set_params_from_object_rotation_array = [0, 0, 0];


/***/ }),

/***/ 75088:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LD": () => (/* binding */ OBJECT_TRANSFORM_SPACES),
/* harmony export */   "XT": () => (/* binding */ ObjectTransformMode),
/* harmony export */   "ce": () => (/* binding */ OBJECT_TRANSFORM_SPACE_MENU_ENTRIES),
/* harmony export */   "i2": () => (/* binding */ ObjectTransformSpace),
/* harmony export */   "qo": () => (/* binding */ applyTransformWithSpaceToObject),
/* harmony export */   "tj": () => (/* binding */ OBJECT_TRANSFORM_MODES)
/* harmony export */ });
/* harmony import */ var _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53120);
/* harmony import */ var _geometry_ObjectContent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37956);


var ObjectTransformSpace;
(function (ObjectTransformSpace) {
    ObjectTransformSpace["PARENT"] = "parent";
    ObjectTransformSpace["LOCAL"] = "local";
})(ObjectTransformSpace || (ObjectTransformSpace = {}));
var ObjectTransformMode;
(function (ObjectTransformMode) {
    ObjectTransformMode["SET"] = "set matrix";
    ObjectTransformMode["MULT"] = "multiply matrix";
})(ObjectTransformMode || (ObjectTransformMode = {}));
const OBJECT_TRANSFORM_SPACES = [
    ObjectTransformSpace.PARENT,
    ObjectTransformSpace.LOCAL,
];
const OBJECT_TRANSFORM_MODES = [ObjectTransformMode.SET, ObjectTransformMode.MULT];
const OBJECT_TRANSFORM_SPACE_MENU_ENTRIES = [
    { name: 'parent', value: OBJECT_TRANSFORM_SPACES.indexOf(ObjectTransformSpace.PARENT) },
    { name: 'local', value: OBJECT_TRANSFORM_SPACES.indexOf(ObjectTransformSpace.LOCAL) },
];
function applyTransformWithSpaceToObject(object, matrix, transformSpace, transformMode) {
    switch (transformSpace) {
        case ObjectTransformSpace.PARENT: {
            if ((0,_geometry_ObjectContent__WEBPACK_IMPORTED_MODULE_0__/* .isObject3D */ .nK)(object)) {
                object.updateMatrix();
                object.applyMatrix4(matrix);
                object.matrix.decompose(object.position, object.quaternion, object.scale);
            }
            else {
                object.applyMatrix4(matrix);
            }
            return;
        }
        case ObjectTransformSpace.LOCAL: {
            if ((0,_geometry_ObjectContent__WEBPACK_IMPORTED_MODULE_0__/* .isObject3D */ .nK)(object)) {
                object.updateMatrix();
                if (transformMode == ObjectTransformMode.SET) {
                    object.matrix.copy(matrix);
                }
                else {
                    object.matrix.multiply(matrix);
                }
                object.matrix.decompose(object.position, object.quaternion, object.scale);
            }
            else {
                // it should ideally multiply the existing matrix,
                // but I'm not sure how to do that with cad objects for now
                object.applyMatrix4(matrix);
            }
            return;
        }
    }
    _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_1__/* .TypeAssert.unreachable */ .f.unreachable(transformSpace);
}


/***/ }),

/***/ 48454:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Aw": () => (/* binding */ isQuaternion),
/* harmony export */   "D5": () => (/* binding */ isColor),
/* harmony export */   "HD": () => (/* binding */ isString),
/* harmony export */   "MR": () => (/* binding */ CoreType),
/* harmony export */   "NR": () => (/* binding */ isVector),
/* harmony export */   "Zs": () => (/* binding */ ensureString),
/* harmony export */   "bI": () => (/* binding */ isBooleanTrue),
/* harmony export */   "hj": () => (/* binding */ isNumber),
/* harmony export */   "jn": () => (/* binding */ isBoolean),
/* harmony export */   "kJ": () => (/* binding */ isArray),
/* harmony export */   "mf": () => (/* binding */ isFunction),
/* harmony export */   "tI": () => (/* binding */ isPromise)
/* harmony export */ });
/* unused harmony exports isNumberValid, isEuler, isObject */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);

function isArray(value) {
    return Array.isArray(value);
}
function isBoolean(value) {
    return value === true || value === false;
}
function isNumber(value) {
    return typeof value == 'number';
}
function isNumberValid(value) {
    return isNumber(value) && !isNaN(value);
}
// export function _isNaN(value: any): boolean {
// 	return isNaN(value);
// }
function isVector(value) {
    return value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector2 || value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector3 || value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector4;
}
function isColor(value) {
    return value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Color;
}
function isEuler(value) {
    return value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Euler;
}
function isQuaternion(value) {
    return value instanceof three__WEBPACK_IMPORTED_MODULE_0__.Quaternion;
}
function isString(value) {
    return typeof value == 'string';
}
function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
function isFunction(value) {
    var type = typeof value;
    return value != null && type == 'function';
}
function isPromise(value) {
    return value instanceof Promise;
}
// a simple way to test the type and value of a param value
function isBooleanTrue(value) {
    return value;
}
function ensureString(value) {
    return value;
}
class CoreType {
}
CoreType.isNumber = isNumber;
CoreType.isNumberValid = isNumberValid;
CoreType.isVector = isVector;
CoreType.isColor = isColor;
CoreType.isEuler = isEuler;
CoreType.isQuaternion = isQuaternion;
CoreType.isString = isString;
CoreType.isBoolean = isBoolean;
CoreType.isNaN = isNaN;
CoreType.isArray = isArray;
CoreType.isObject = isObject;
CoreType.isFunction = isFunction;


/***/ }),

/***/ 38300:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ZD": () => (/* binding */ TypedParamPathParamValue),
/* harmony export */   "jI": () => (/* binding */ TypedNodePathParamValue),
/* harmony export */   "qX": () => (/* binding */ NODE_PATH_DEFAULT),
/* harmony export */   "s$": () => (/* binding */ CoreWalker)
/* harmony export */ });
const NODE_PATH_DEFAULT = {
    NODE: {
        EMPTY: '',
        UV: '/COP/imageUv',
        ENV_MAP: '/COP/envMap',
        CUBE_MAP: '/COP/cubeCamera',
    },
};
const _remainingElements = [];
const _ups = [];
class GraphNodePathParamValue {
    constructor(_path = '') {
        this._path = _path;
        this._graphNode = null;
    }
    graphNode() {
        return this._graphNode;
    }
    _setGraphNode(graphNode) {
        this._graphNode = graphNode;
    }
    path() {
        return this._path;
    }
    setPath(path) {
        this._path = path;
    }
    clone() {
        const cloned = new this.constructor(this._path);
        cloned._setGraphNode(this._graphNode);
        return cloned;
    }
}
class TypedNodePathParamValue extends GraphNodePathParamValue {
    setNode(node) {
        this._graphNode = node;
    }
    node() {
        return this._graphNode;
    }
    graphNodePath() {
        var _a;
        return (_a = this.node()) === null || _a === void 0 ? void 0 : _a.path();
    }
    resolve(nodeStart, decomposedPath) {
        this._graphNode = CoreWalker.findNode(nodeStart, this._path, decomposedPath);
    }
    nodeWithContext(context, errorState) {
        const foundNode = this.node();
        if (!foundNode) {
            errorState === null || errorState === void 0 ? void 0 : errorState.set(`no node found at ${this.path()}`);
            return;
        }
        const nodeContext = foundNode.context();
        if (nodeContext == context) {
            return foundNode;
        }
        else {
            errorState === null || errorState === void 0 ? void 0 : errorState.set(`expected ${context} node, but got a ${nodeContext}`);
            return;
        }
    }
}
class TypedParamPathParamValue extends GraphNodePathParamValue {
    setParam(param) {
        this._graphNode = param;
    }
    param() {
        return this._graphNode;
    }
    graphNodePath() {
        var _a;
        return (_a = this.param()) === null || _a === void 0 ? void 0 : _a.path();
    }
    resolve(nodeStart, decomposedPath) {
        this._graphNode = CoreWalker.findParam(nodeStart, this._path, decomposedPath);
    }
    paramWithType(paramType, error_state) {
        const foundParam = this.param();
        if (!foundParam) {
            error_state === null || error_state === void 0 ? void 0 : error_state.set(`no param found at ${this.path()}`);
            return;
        }
        if (foundParam.type() == paramType) {
            return foundParam;
        }
        else {
            error_state === null || error_state === void 0 ? void 0 : error_state.set(`expected ${paramType} node, but got a ${foundParam.type()}`);
            return;
        }
    }
}
class CoreWalker {
    static splitParentChild(path) {
        const elements = path.split(CoreWalker.SEPARATOR).filter((e) => e.length > 0);
        const child_path = elements.pop();
        const parent_path = elements.join(CoreWalker.SEPARATOR);
        return { parent: parent_path, child: child_path };
    }
    static findNode(nodeSrc, path, decomposedPath) {
        if (!nodeSrc) {
            return null;
        }
        const elements = path.split(CoreWalker.SEPARATOR).filter((e) => e.length > 0);
        const firstElement = elements[0];
        let nextNode = null;
        if (path[0] === CoreWalker.SEPARATOR) {
            const pathFromRoot = path.substring(1);
            nextNode = this.findNode(nodeSrc.root(), pathFromRoot, decomposedPath);
        }
        else {
            switch (firstElement) {
                case CoreWalker.PARENT:
                    nextNode = nodeSrc.parent();
                    if (nextNode) {
                        decomposedPath === null || decomposedPath === void 0 ? void 0 : decomposedPath.addPathElement({ path: firstElement, node: nextNode });
                    }
                    break;
                case CoreWalker.CURRENT:
                    nextNode = nodeSrc;
                    decomposedPath === null || decomposedPath === void 0 ? void 0 : decomposedPath.addPathElement({ path: firstElement, node: nextNode });
                    break;
                default:
                    nextNode = nodeSrc.node(firstElement);
                    if (nextNode) {
                        decomposedPath === null || decomposedPath === void 0 ? void 0 : decomposedPath.addNamedNode({ name: firstElement, node: nextNode });
                    }
            }
            if (nextNode != null && elements.length > 1) {
                const remainder = elements.slice(1).join(CoreWalker.SEPARATOR);
                nextNode = this.findNode(nextNode, remainder, decomposedPath);
            }
            return nextNode;
        }
        return nextNode;
    }
    static findParam(nodeSrc, path, decomposedPath) {
        if (!nodeSrc) {
            return null;
        }
        const elements = path.split(CoreWalker.SEPARATOR);
        if (elements.length === 1) {
            return nodeSrc.params.get(elements[0]);
        }
        else {
            let node = null;
            if (path[0] === CoreWalker.SEPARATOR && elements.length == 2) {
                node = nodeSrc.root();
            }
            else {
                const nodePath = elements.slice(0, +(elements.length - 2) + 1 || undefined).join(CoreWalker.SEPARATOR);
                node = this.findNode(nodeSrc, nodePath, decomposedPath);
            }
            if (node != null) {
                const paramName = elements[elements.length - 1];
                const param = node.params.get(paramName);
                if (decomposedPath && param) {
                    decomposedPath.addNamedNode({ name: paramName, node: param });
                }
                return param;
            }
            else {
                return null;
                // throw `no node found for path ${node_path}`;
            }
        }
    }
    static relativePath(srcGraphNode, destGraphNode) {
        const parent = this.closestCommonParent(srcGraphNode, destGraphNode);
        if (!parent) {
            return destGraphNode.path();
        }
        else {
            const distance = this.distanceToParent(srcGraphNode, parent);
            let up = '';
            if (distance > 0) {
                let i = 0;
                _ups.length = 0;
                while (i++ < distance) {
                    _ups.push(CoreWalker.PARENT);
                }
                up = _ups.join(CoreWalker.SEPARATOR) + CoreWalker.SEPARATOR;
            }
            const parent_path_elements = parent
                .path()
                .split(CoreWalker.SEPARATOR)
                .filter((e) => e.length > 0);
            const dest_path_elements = destGraphNode
                .path()
                .split(CoreWalker.SEPARATOR)
                .filter((e) => e.length > 0);
            _remainingElements.length = 0;
            let cmptr = 0;
            for (const dest_path_element of dest_path_elements) {
                if (!parent_path_elements[cmptr]) {
                    _remainingElements.push(dest_path_element);
                }
                cmptr++;
            }
            const down = _remainingElements.join(CoreWalker.SEPARATOR);
            return this.sanitizePath(`${up}${down}`);
        }
    }
    static sanitizePath(path) {
        return path.replace(/\/\//g, '/');
    }
    static closestCommonParent(graphNode1, graphNode2) {
        const parents1 = this.parents(graphNode1).reverse().concat([graphNode1]);
        const parents2 = this.parents(graphNode2).reverse().concat([graphNode2]);
        const minDepth = Math.min(parents1.length, parents2.length);
        let foundParent = null;
        for (let i = 0; i < minDepth; i++) {
            if (parents1[i].graphNodeId() == parents2[i].graphNodeId()) {
                foundParent = parents1[i];
            }
        }
        return foundParent;
    }
    static parents(graphNode) {
        const parents = [];
        let parent = graphNode.parent();
        while (parent) {
            parents.push(parent);
            parent = parent.parent();
        }
        return parents;
    }
    static distanceToParent(graphNode, dest) {
        let distance = 0;
        let current = graphNode;
        const destId = dest.graphNodeId();
        while (current && current.graphNodeId() != destId) {
            distance += 1;
            current = current.parent();
        }
        if (current && current.graphNodeId() == destId) {
            return distance;
        }
        else {
            return -1;
        }
    }
    static makeAbsolutePath(nodeSrc, path) {
        if (path[0] == CoreWalker.SEPARATOR) {
            return path;
        }
        const pathElements = path.split(CoreWalker.SEPARATOR);
        const firstElement = pathElements.shift();
        if (firstElement) {
            switch (firstElement) {
                case '..': {
                    const parent = nodeSrc.parent();
                    if (parent) {
                        if (parent == nodeSrc.scene().root()) {
                            return CoreWalker.SEPARATOR + pathElements.join(CoreWalker.SEPARATOR);
                        }
                        else {
                            return this.makeAbsolutePath(parent, pathElements.join(CoreWalker.SEPARATOR));
                        }
                    }
                    else {
                        return null;
                    }
                }
                case '.': {
                    return this.makeAbsolutePath(nodeSrc, pathElements.join(CoreWalker.SEPARATOR));
                }
                default: {
                    return [nodeSrc.path(), path].join(CoreWalker.SEPARATOR);
                }
            }
        }
        else {
            return nodeSrc.path();
        }
    }
}
CoreWalker.SEPARATOR = '/';
CoreWalker.DOT = '.';
CoreWalker.CURRENT = CoreWalker.DOT;
CoreWalker.PARENT = '..';
CoreWalker.CURRENT_WITH_SLASH = `${CoreWalker.CURRENT}/`;
CoreWalker.PARENT_WITH_SLASH = `${CoreWalker.PARENT}/`;
CoreWalker.NON_LETTER_PREFIXES = [CoreWalker.SEPARATOR, CoreWalker.DOT];


/***/ }),

/***/ 9832:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "X3": () => (/* binding */ markAttributeAsNeedsUpdateForFrame),
/* harmony export */   "ah": () => (/* binding */ Attribute),
/* harmony export */   "n0": () => (/* binding */ CoreAttribute)
/* harmony export */ });
/* unused harmony export ObjectAttribute */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _ArrayUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(69374);
/* harmony import */ var _String__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(40354);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48454);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73303);





var Attribute;
(function (Attribute) {
    Attribute["POINT_INDEX"] = "ptnum";
    Attribute["VERTEX_INDEX"] = "vtxnum";
    Attribute["PRIMITIVE_INDEX"] = "primnum";
    Attribute["OBJECT_INDEX"] = "objnum";
    Attribute["OBJECT_NAME"] = "objname";
    Attribute["COLOR"] = "color";
    Attribute["NORMAL"] = "normal";
    Attribute["POSITION"] = "position";
    Attribute["PSCALE"] = "pscale";
    Attribute["UP"] = "up";
    Attribute["UV"] = "uv";
    Attribute["SCALE"] = "scale";
    Attribute["TANGENT"] = "tangent";
    Attribute["ID"] = "id";
})(Attribute || (Attribute = {}));
var ObjectAttribute;
(function (ObjectAttribute) {
    ObjectAttribute["HOVERED"] = "hovered";
})(ObjectAttribute || (ObjectAttribute = {}));
const ATTRIB_NAME_MAP = {
    P: Attribute.POSITION,
    N: Attribute.NORMAL,
    Cd: Attribute.COLOR,
};
const _matchingAttribNames = [];
const _masks = [];
class CoreAttribute {
    static remapName(name) {
        return ATTRIB_NAME_MAP[name] || name;
    }
    static arrayToIndexedArrays(array) {
        const index_by_value = {};
        let current_index = 0;
        const indices = [];
        const values = [];
        let i = 0;
        while (i < array.length) {
            //(value = array[i++])?
            const value = array[i];
            const index = index_by_value[value];
            if (index != null) {
                indices.push(index);
            }
            else {
                values.push(value);
                indices.push(current_index);
                index_by_value[value] = current_index;
                current_index += 1;
            }
            i++;
        }
        return {
            indices,
            values,
        };
    }
    static defaultValue(size) {
        switch (size) {
            case 1:
                return 0;
            case 2:
                return new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0);
            case 3:
                return new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
            default:
                throw `size ${size} not yet implemented`;
        }
    }
    static copy(src, dest, markAsNeedsUpdate = true) {
        const srcArray = src === null || src === void 0 ? void 0 : src.array;
        const destArray = dest === null || dest === void 0 ? void 0 : dest.array;
        if (srcArray && destArray) {
            const min_length = Math.min(srcArray.length, destArray.length);
            for (let i = 0; i < min_length; i++) {
                destArray[i] = srcArray[i];
            }
            if (markAsNeedsUpdate) {
                dest.needsUpdate = true;
            }
        }
    }
    static attribSizeFromValue(val) {
        if (_Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isString */ .MR.isString(val) || _Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isNumber */ .MR.isNumber(val)) {
            return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribSize.FLOAT */ .NS.FLOAT;
        }
        if (_Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isArray */ .MR.isArray(val)) {
            return val.length;
        }
        switch (val.constructor) {
            case three__WEBPACK_IMPORTED_MODULE_0__.Color:
                return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribSize.VECTOR3 */ .NS.VECTOR3;
            case three__WEBPACK_IMPORTED_MODULE_0__.Vector2:
                return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribSize.VECTOR2 */ .NS.VECTOR2;
            case three__WEBPACK_IMPORTED_MODULE_0__.Vector3:
                return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribSize.VECTOR3 */ .NS.VECTOR3;
            case three__WEBPACK_IMPORTED_MODULE_0__.Vector4:
                return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribSize.VECTOR4 */ .NS.VECTOR4;
        }
        return null;
    }
    static attribNamesMatchingMask(masksString, existingAttribNames) {
        (0,_String__WEBPACK_IMPORTED_MODULE_3__/* .stringToAttribNames */ .Fz)(masksString, _masks);
        _matchingAttribNames.length = 0;
        for (const mask of _masks) {
            for (const attribName of existingAttribNames) {
                if ((0,_String__WEBPACK_IMPORTED_MODULE_3__/* .stringMatchMask */ .v$)(attribName, mask)) {
                    _matchingAttribNames.push(attribName);
                }
                else {
                    const remapped = CoreAttribute.remapName(mask);
                    if (attribName == remapped) {
                        _matchingAttribNames.push(attribName);
                    }
                }
            }
        }
        const uniqAttributeNames = [];
        return (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_4__/* .arrayUniq */ .tt)(_matchingAttribNames, uniqAttributeNames);
    }
}
function markAttributeAsNeedsUpdateForFrame(attribute, frame) {
    if (attribute instanceof three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute || attribute instanceof three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferAttribute) {
        attribute.version = frame;
    }
    else {
        if (attribute.data) {
            attribute.data.version = frame;
        }
    }
}


/***/ }),

/***/ 73303:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$5": () => (/* binding */ dataFromObject),
/* harmony export */   "HW": () => (/* binding */ DOT),
/* harmony export */   "LP": () => (/* binding */ ObjectType),
/* harmony export */   "NS": () => (/* binding */ AttribSize),
/* harmony export */   "Np": () => (/* binding */ ATTRIBUTE_SIZE_RANGE),
/* harmony export */   "UX": () => (/* binding */ registerObjectType),
/* harmony export */   "Xu": () => (/* binding */ ATTRIBUTE_TYPES),
/* harmony export */   "bI": () => (/* binding */ ATTRIBUTE_SIZES),
/* harmony export */   "c9": () => (/* binding */ objectTypeFromObject),
/* harmony export */   "ee": () => (/* binding */ DEFAULT_MATERIALS),
/* harmony export */   "fc": () => (/* binding */ ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP),
/* harmony export */   "h6": () => (/* binding */ COMPONENT_INDICES),
/* harmony export */   "io": () => (/* binding */ AttribClass),
/* harmony export */   "mb": () => (/* binding */ AttribTypeMenuEntries),
/* harmony export */   "oT": () => (/* binding */ ATTRIBUTE_CLASSES),
/* harmony export */   "oh": () => (/* binding */ AttribClassMenuEntriesWithoutCoreGroup),
/* harmony export */   "rp": () => (/* binding */ AttribType),
/* harmony export */   "uy": () => (/* binding */ objectConstructorByObjectType),
/* harmony export */   "yp": () => (/* binding */ AttribClassMenuEntries)
/* harmony export */ });
/* unused harmony exports OBJECT_TYPES, ComponentName */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);

var ObjectType;
(function (ObjectType) {
    ObjectType["AMBIENT_LIGHT"] = "AmbientLight";
    ObjectType["AREA_LIGHT"] = "AreaLight";
    // BONE = 'Bone',
    ObjectType["CUBE_CAMERA"] = "CubeCamera";
    ObjectType["DIRECTIONAL_LIGHT"] = "DirectionalLight";
    ObjectType["GROUP"] = "Group";
    ObjectType["HEMISPHERE_LIGHT"] = "HemisphereLight";
    ObjectType["INSTANCED_MESH"] = "InstancedMesh";
    ObjectType["LIGHT_PROBE"] = "LightProbe";
    ObjectType["LINE_SEGMENTS"] = "LineSegments";
    ObjectType["LOD"] = "LOD";
    ObjectType["MESH"] = "Mesh";
    ObjectType["OBJECT3D"] = "Object3D";
    ObjectType["ORTHOGRAPHIC_CAMERA"] = "OrthographicCamera";
    ObjectType["PERSPECTIVE_CAMERA"] = "PerspectiveCamera";
    ObjectType["PHYSICAL_CAMERA"] = "PhysicalCamera";
    ObjectType["PHYSICAL_SPOT_LIGHT"] = "PhysicalSpotLight";
    ObjectType["POINT_LIGHT"] = "PointLight";
    ObjectType["POINTS"] = "Points";
    ObjectType["SCENE"] = "Scene";
    ObjectType["SHAPED_AREA_LIGHT"] = "ShapedAreaLight";
    // SKINNED_MESH = 'SkinnedMesh',
    ObjectType["SPOT_LIGHT"] = "SpotLight";
    ObjectType["UNKNOWN"] = "Unknown";
    ObjectType["QUAD"] = "Quad";
})(ObjectType || (ObjectType = {}));
const OBJECT_TYPES = [
    ObjectType.GROUP,
    ObjectType.LINE_SEGMENTS,
    ObjectType.MESH,
    ObjectType.OBJECT3D,
    ObjectType.POINTS,
    ObjectType.SCENE,
];
const UNKNOWN_OBJECT_TYPE = {
    type: ObjectType.UNKNOWN,
    checkFunc: (o) => ObjectType.UNKNOWN,
    humanName: 'Unknown',
    ctor: null,
};
function _initializeObjectTypeFromConstructor() {
    const objectTypeCheckFunctions = [];
    const dataByObjectType = new Map();
    const maps = { objectTypeCheckFunctions, dataByObjectType };
    function _register(type, checkFunc, ctor, humanName) {
        _registerObjectType_(maps, {
            type,
            checkFunc,
            ctor,
            humanName: humanName || type,
        });
    }
    _register(ObjectType.OBJECT3D, (o) => (o.isObject3D ? ObjectType.OBJECT3D : undefined), three__WEBPACK_IMPORTED_MODULE_0__.Object3D, 'Object3D');
    _register(ObjectType.MESH, (o) => (o.isMesh ? ObjectType.MESH : undefined), three__WEBPACK_IMPORTED_MODULE_0__.Mesh, 'Mesh');
    _register(ObjectType.GROUP, (o) => (o.isGroup ? ObjectType.GROUP : undefined), three__WEBPACK_IMPORTED_MODULE_0__.Group, 'Group');
    _register(ObjectType.LINE_SEGMENTS, (o) => (o.isLineSegments ? ObjectType.LINE_SEGMENTS : undefined), three__WEBPACK_IMPORTED_MODULE_0__.LineSegments, 'LineSegments');
    _register(ObjectType.INSTANCED_MESH, (o) => (o.isInstancedMesh ? ObjectType.INSTANCED_MESH : undefined), three__WEBPACK_IMPORTED_MODULE_0__.InstancedMesh, 'InstancedMesh');
    _register(ObjectType.POINTS, (o) => (o.isPoints ? ObjectType.POINTS : undefined), three__WEBPACK_IMPORTED_MODULE_0__.Points, 'Points');
    _register(ObjectType.SCENE, (o) => (o.isScene ? ObjectType.SCENE : undefined), three__WEBPACK_IMPORTED_MODULE_0__.Scene, 'Scene');
    return maps;
}
const { objectTypeCheckFunctions, dataByObjectType } = _initializeObjectTypeFromConstructor();
function _registerObjectType_(maps, data) {
    maps.objectTypeCheckFunctions.unshift(data.checkFunc);
    maps.dataByObjectType.set(data.type, data);
}
function registerObjectType(data) {
    _registerObjectType_({ objectTypeCheckFunctions, dataByObjectType }, data);
}
function objectTypeFromObject(object) {
    return dataFromObject(object).type;
}
function dataFromObject(object) {
    for (const checkFunc of objectTypeCheckFunctions) {
        const objectType = checkFunc(object);
        if (objectType) {
            return dataByObjectType.get(objectType);
        }
    }
    return UNKNOWN_OBJECT_TYPE;
}
function objectConstructorByObjectType(objectType) {
    const data = dataByObjectType.get(objectType);
    if (data) {
        return data.ctor;
    }
    else {
        console.warn(`no constructor found for type '${objectType}'`);
        return dataByObjectType.get(ObjectType.MESH);
    }
}
const DEFAULT_MATERIALS = {
    MeshStandard: new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({
        color: 0xffffff,
        side: three__WEBPACK_IMPORTED_MODULE_0__.FrontSide,
        metalness: 0.5,
        roughness: 0.9,
    }),
    // [ObjectType.MESH]: new MeshLambertMaterial({
    // 	color: new Color(1, 1, 1),
    // 	side: FrontSide,
    // 	vertexColors: false,
    // 	transparent: true,
    // 	depthTest: true,
    // }),
    [ObjectType.MESH]: new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({
        color: 0xffffff,
        side: three__WEBPACK_IMPORTED_MODULE_0__.FrontSide,
        metalness: 0.0,
        roughness: 0.9,
    }),
    [ObjectType.POINTS]: new three__WEBPACK_IMPORTED_MODULE_0__.PointsMaterial({
        color: 0xffffff,
        size: 0.1,
        //blending: AdditiveBlending
        depthTest: true,
    }),
    [ObjectType.LINE_SEGMENTS]: new three__WEBPACK_IMPORTED_MODULE_0__.LineBasicMaterial({
        color: 0xffffff,
        linewidth: 1,
    }),
};
var AttribClass;
(function (AttribClass) {
    AttribClass["POINT"] = "point";
    AttribClass["VERTEX"] = "vertex";
    AttribClass["PRIMITIVE"] = "primitive";
    AttribClass["OBJECT"] = "object";
    AttribClass["CORE_GROUP"] = "coreGroup";
})(AttribClass || (AttribClass = {}));
const ATTRIBUTE_CLASSES = [
    AttribClass.POINT,
    AttribClass.VERTEX,
    AttribClass.PRIMITIVE,
    AttribClass.OBJECT,
    AttribClass.CORE_GROUP,
];
const ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP = [
    AttribClass.POINT,
    AttribClass.VERTEX,
    AttribClass.PRIMITIVE,
    AttribClass.OBJECT,
];
const AttribClassMenuEntries = ATTRIBUTE_CLASSES.map((name, value) => ({ name, value }));
const AttribClassMenuEntriesWithoutCoreGroup = ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP.map((name, value) => ({
    name,
    value,
}));
var AttribType;
(function (AttribType) {
    AttribType["NUMERIC"] = "numeric";
    AttribType["STRING"] = "string";
})(AttribType || (AttribType = {}));
const ATTRIBUTE_TYPES = [AttribType.NUMERIC, AttribType.STRING];
const AttribTypeMenuEntries = ATTRIBUTE_TYPES.map((name, value) => ({ name, value }));
var AttribSize;
(function (AttribSize) {
    AttribSize[AttribSize["FLOAT"] = 1] = "FLOAT";
    AttribSize[AttribSize["VECTOR2"] = 2] = "VECTOR2";
    AttribSize[AttribSize["VECTOR3"] = 3] = "VECTOR3";
    AttribSize[AttribSize["VECTOR4"] = 4] = "VECTOR4";
})(AttribSize || (AttribSize = {}));
const ATTRIBUTE_SIZES = [
    AttribSize.FLOAT,
    AttribSize.VECTOR2,
    AttribSize.VECTOR3,
    AttribSize.VECTOR4,
];
const ATTRIBUTE_SIZE_RANGE = [AttribSize.FLOAT, AttribSize.VECTOR4];
// export const CoreConstant = {
// 	ATTRIB_CLASS: {
// 		VERTEX: AttribClass.POINT,
// 		OBJECT: AttribClass.OBJECT,
// 	},
// 	OBJECT_TYPES: ObjectTypes,
// 	CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME: {
// 		[Scene.name]: 'Scene',
// 		[Group.name]: 'Group',
// 		[Object3D.name]: 'Object3D',
// 		[Mesh.name]: 'Mesh',
// 		[Points.name]: 'Points',
// 		[LineSegments.name]: 'LineSegments',
// 		[Bone.name]: 'Bone',
// 		[SkinnedMesh.name]: 'SkinnedMesh',
// 	},
// 	CONSTRUCTORS_BY_NAME: {
// 		[ObjectType.MESH]: Mesh,
// 		[ObjectType.POINTS]: Points,
// 		[ObjectType.LINE_SEGMENTS]: LineSegments,
// 	},
// 	MATERIALS: materials,
// };
var ComponentName;
(function (ComponentName) {
    ComponentName["x"] = "x";
    ComponentName["y"] = "y";
    ComponentName["z"] = "z";
    ComponentName["w"] = "w";
    ComponentName["r"] = "r";
    ComponentName["g"] = "g";
    ComponentName["b"] = "b";
})(ComponentName || (ComponentName = {}));
const COMPONENT_INDICES = {
    x: 0,
    y: 1,
    z: 2,
    w: 3,
    r: 0,
    g: 1,
    b: 2,
};
const DOT = '.';


/***/ }),

/***/ 48658:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": () => (/* binding */ CoreEntityWithObject),
/* harmony export */   "U": () => (/* binding */ CoreEntity)
/* harmony export */ });
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73303);
/* harmony import */ var _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(53120);


const _relatedPointIds = [];
const _relatedVertexIds = [];
const _relatedPrimitiveIds = [];
class CoreEntity {
    constructor(content, index) {
        this._index = 0;
        if (index != null) {
            this._index = index;
        }
    }
    index() {
        return this._index;
    }
    setIndex(index) {
        this._index = index;
        return this;
    }
}
class CoreEntityWithObject extends CoreEntity {
    constructor(object, index) {
        super(object, index);
        this._object = object;
    }
    object() {
        return this._object;
    }
    static relatedPrimitiveIds(object, index, target, traversedRelatedEntityData) {
        target.length = 0;
    }
    static relatedVertexIds(object, index, target, traversedRelatedEntityData) {
        target.length = 0;
    }
    static relatedPointIds(object, index, target, traversedRelatedEntityData) {
        target.length = 0;
    }
    relatedPrimitiveIds(target, traversedRelatedEntityData) {
        this.constructor.relatedPrimitiveIds(this._object, this._index, target, traversedRelatedEntityData);
    }
    relatedVertexIds(target, traversedRelatedEntityData) {
        this.constructor.relatedVertexIds(this._object, this._index, target, traversedRelatedEntityData);
    }
    relatedPointIds(target, traversedRelatedEntityData) {
        this.constructor.relatedPointIds(this._object, this._index, target, traversedRelatedEntityData);
    }
    static relatedPointClass(object) {
        return this.constructor;
    }
    static relatedVertexClass(object) {
        return this.constructor;
    }
    static relatedPrimitiveClass(object) {
        return this.constructor;
    }
    static relatedObjectClass(object) {
        return this.constructor;
    }
    static relatedEntityClass(object, entityClass) {
        switch (entityClass) {
            case _Constant__WEBPACK_IMPORTED_MODULE_0__/* .AttribClass.POINT */ .io.POINT: {
                return this.relatedPointClass(object);
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_0__/* .AttribClass.VERTEX */ .io.VERTEX: {
                return this.relatedVertexClass(object);
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_0__/* .AttribClass.PRIMITIVE */ .io.PRIMITIVE: {
                return this.relatedPrimitiveClass(object);
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_0__/* .AttribClass.OBJECT */ .io.OBJECT: {
                return this.relatedObjectClass(object);
            }
        }
        _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_1__/* .TypeAssert.unreachable */ .f.unreachable(entityClass);
    }
    //
    static relatedPoints(object, entityIndex, target, traversedRelatedEntityData) {
        this.relatedPointIds(object, entityIndex, _relatedPointIds, traversedRelatedEntityData);
        target.length = _relatedPointIds.length;
        let i = 0;
        const entityClass = this.relatedPointClass(object);
        for (const id of _relatedPointIds) {
            target[i] = new entityClass(object, id);
            i++;
        }
    }
    static relatedVertices(object, entityIndex, target, traversedRelatedEntityData) {
        this.relatedVertexIds(object, entityIndex, _relatedVertexIds, traversedRelatedEntityData);
        target.length = _relatedVertexIds.length;
        let i = 0;
        const entityClass = this.relatedVertexClass(object);
        for (const id of _relatedVertexIds) {
            target[i] = new entityClass(object, id);
            i++;
        }
    }
    static relatedPrimitives(object, entityIndex, target, traversedRelatedEntityData) {
        this.relatedPrimitiveIds(object, entityIndex, _relatedPrimitiveIds, traversedRelatedEntityData);
        target.length = _relatedPrimitiveIds.length;
        let i = 0;
        const entityClass = this.relatedPrimitiveClass(object);
        for (const id of _relatedPrimitiveIds) {
            target[i] = new entityClass(object, id);
            i++;
        }
    }
    static relatedObjects(object, entityIndex, target, traversedRelatedEntityData) {
        target.length = 1;
        const entityClass = this.relatedObjectClass(object);
        target[0] = new entityClass(object);
    }
    relatedPoints(target, traversedRelatedEntityData) {
        this.constructor.relatedPoints(this._object, this._index, target, traversedRelatedEntityData);
    }
    relatedVertices(target, traversedRelatedEntityData) {
        this.constructor.relatedVertices(this._object, this._index, target, traversedRelatedEntityData);
    }
    relatedPrimitives(target, traversedRelatedEntityData) {
        this.constructor.relatedPrimitives(this._object, this._index, target, traversedRelatedEntityData);
    }
    relatedObjects(target, traversedRelatedEntityData) {
        this.constructor.relatedObjects(this._object, this._index, target, traversedRelatedEntityData);
    }
}


/***/ }),

/***/ 44604:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$Z": () => (/* binding */ coreObjectInstanceFactory),
/* harmony export */   "BI": () => (/* binding */ corePointInstanceFactory),
/* harmony export */   "E_": () => (/* binding */ corePointClassFactory),
/* harmony export */   "PF": () => (/* binding */ coreVertexClassFactory),
/* harmony export */   "Sv": () => (/* binding */ registerFactoryFunctions),
/* harmony export */   "Vd": () => (/* binding */ ENTITY_CLASS_FACTORY),
/* harmony export */   "Xr": () => (/* binding */ coreObjectClassFactory),
/* harmony export */   "mu": () => (/* binding */ corePrimitiveInstanceFactory),
/* harmony export */   "p7": () => (/* binding */ coreVertexInstanceFactory),
/* harmony export */   "um": () => (/* binding */ corePrimitiveClassFactory)
/* harmony export */ });
/* unused harmony export ENTITY_INSTANCE_FACTORY */
/* harmony import */ var _modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16961);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73303);


const coreFactoryFunctions = [_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory */ .Fs];
function registerFactoryFunctions(checkFunctions) {
    coreFactoryFunctions.push(checkFunctions);
}
// point creation methods
function corePointClassFactory(object) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.pointClass(object);
        if (result) {
            return result;
        }
    }
    return (_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.pointClass */ .Fs.pointClass(object) || (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .pointClassFactoryEnsured */ .WW)());
}
function corePointInstanceFactory(object, index = 0) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.pointInstance(object, index);
        if (result) {
            return result;
        }
    }
    return (_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.pointInstance */ .Fs.pointInstance(object, index) || (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .pointInstanceFactoryEnsured */ .zT)(object, index));
}
// vertex creation methods
function coreVertexClassFactory(object) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.vertexClass(object);
        if (result) {
            return result;
        }
    }
    return (_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.vertexClass */ .Fs.vertexClass(object) || (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .vertexClassFactoryEnsured */ .rR)());
}
function coreVertexInstanceFactory(object, index = 0) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.vertexInstance(object, index);
        if (result) {
            return result;
        }
    }
    return (_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.vertexInstance */ .Fs.vertexInstance(object, index) ||
        (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .vertexInstanceFactoryEnsured */ .h$)(object, index));
}
// primitive creation methods
function corePrimitiveClassFactory(object) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.primitiveClass(object);
        if (result) {
            return result;
        }
    }
    return (_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.primitiveClass */ .Fs.primitiveClass(object) || (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .primitiveClassFactoryEnsured */ .Uj)());
}
function corePrimitiveInstanceFactory(object, index = 0) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.primitiveInstance(object, index);
        if (result) {
            return result;
        }
    }
    return (_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.primitiveInstance */ .Fs.primitiveInstance(object, index) ||
        (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .primitiveInstanceFactoryEnsured */ .dL)(object, index));
}
// object creation methods
function coreObjectClassFactory(object) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.objectClass(object);
        if (result) {
            return result;
        }
    }
    // we need objectClassFactoryEnsured()
    // in case we import multiple threejs,
    // and this ensures that this function never returns undefined
    return _modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.objectClass */ .Fs.objectClass(object) || (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .objectClassFactoryEnsured */ .zg)();
}
function coreObjectInstanceFactory(object, index = 0) {
    for (const factoryFunction of coreFactoryFunctions) {
        const result = factoryFunction.objectInstance(object, index);
        if (result) {
            return result;
        }
    }
    return (_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .object3DFactory.objectInstance */ .Fs.objectInstance(object, index) ||
        (0,_modules_three_ThreeModule__WEBPACK_IMPORTED_MODULE_0__/* .objectInstanceFactoryEnsured */ .T0)(object));
}
const ENTITY_CLASS_FACTORY = {
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.POINT */ .io.POINT]: corePointClassFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.VERTEX */ .io.VERTEX]: coreVertexClassFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.PRIMITIVE */ .io.PRIMITIVE]: corePrimitiveClassFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.OBJECT */ .io.OBJECT]: coreObjectClassFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.CORE_GROUP */ .io.CORE_GROUP]: null,
};
const ENTITY_INSTANCE_FACTORY = {
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.POINT */ .io.POINT]: corePointInstanceFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.VERTEX */ .io.VERTEX]: coreVertexInstanceFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.PRIMITIVE */ .io.PRIMITIVE]: corePrimitiveInstanceFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.OBJECT */ .io.OBJECT]: coreObjectInstanceFactory,
    [_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.CORE_GROUP */ .io.CORE_GROUP]: null,
};


/***/ }),

/***/ 50155:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$W": () => (/* binding */ GROUP_OPERATIONS),
/* harmony export */   "Wx": () => (/* binding */ EntityGroupCollection),
/* harmony export */   "gW": () => (/* binding */ GroupOperation),
/* harmony export */   "he": () => (/* binding */ EntityGroupType)
/* harmony export */ });
/* harmony import */ var _engine_nodes_sop_utils_group_GroupCommon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61563);
/* harmony import */ var _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53120);
/* harmony import */ var _ArrayUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69374);
/* harmony import */ var _SetUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41899);




const _currentIndicesSet = new Set();
const _newIndicesSet = new Set();
var GroupOperation;
(function (GroupOperation) {
    GroupOperation["SET"] = "replace existing";
    GroupOperation["UNION"] = "add to existing";
    GroupOperation["SUBTRACT"] = "subtract from existing";
    GroupOperation["INTERSECT"] = "intersect with existing";
})(GroupOperation || (GroupOperation = {}));
const GROUP_OPERATIONS = [
    GroupOperation.SET,
    GroupOperation.UNION,
    GroupOperation.SUBTRACT,
    GroupOperation.INTERSECT,
];
var EntityGroupType;
(function (EntityGroupType) {
    EntityGroupType["POINT"] = "point";
    EntityGroupType["OBJECT"] = "object";
    EntityGroupType["EDGE"] = "edge";
    EntityGroupType["FACE"] = "face";
})(EntityGroupType || (EntityGroupType = {}));
const USER_DATA_KEY_GROUPS = 'groups';
class EntityGroupCollection {
    // private _groupsByNameByType: Map<GroupType, Map<string, EntityGroup>> = new Map();
    constructor(_object) {
        this._object = _object;
        this.selectedIndices = new Set();
    }
    attributesDictionary() {
        return EntityGroupCollection.attributesDictionary(this._object);
    }
    static attributesDictionary(object) {
        return (object.userData[USER_DATA_KEY_GROUPS] ||
            this._createAttributesDictionaryIfNone(object));
    }
    static _createAttributesDictionaryIfNone(object) {
        if (!object.userData[USER_DATA_KEY_GROUPS]) {
            return (object.userData[USER_DATA_KEY_GROUPS] = {});
        }
    }
    findOrCreateGroup(type, groupName) {
        const dict = this.attributesDictionary();
        let groupsByName = dict[type];
        if (!groupsByName) {
            groupsByName = {};
            dict[type] = groupsByName;
        }
        let group = groupsByName[groupName];
        if (!group) {
            group = [];
            groupsByName[groupName] = group;
        }
        return group;
    }
    deleteGroup(type, groupName) {
        const dict = this.attributesDictionary();
        const groupsByName = dict[type];
        if (groupsByName) {
            delete groupsByName[groupName];
            // clean if possible
            if (Object.keys(groupsByName).length == 0) {
                delete dict[type];
            }
        }
    }
    static data(object) {
        const dict = this.attributesDictionary(object);
        const types = Object.keys(dict);
        const data = {};
        for (const type of types) {
            const dataForType = [];
            data[type] = dataForType;
            const groupsForType = dict[type];
            const groupNames = Object.keys(groupsForType);
            for (const groupName of groupNames) {
                const indices = groupsForType[groupName];
                const groupData = {
                    name: groupName,
                    entitiesCount: indices.length,
                };
                dataForType.push(groupData);
            }
        }
        return data;
    }
    indicesSet(type, groupName, target) {
        const dict = this.attributesDictionary();
        const groupsByName = dict[type];
        target.clear();
        if (groupsByName) {
            const indices = groupsByName[groupName];
            if (indices) {
                (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayToSet */ .nu)(indices, target);
            }
        }
    }
    updateGroup(options, selectionStates) {
        const { type, groupName, operation, invert } = options;
        const currentIndices = this.findOrCreateGroup(type, groupName);
        const _updateGroup = (newIndicesSet) => {
            const dict = this.attributesDictionary();
            let groupsByName = dict[type];
            if (!groupsByName) {
                groupsByName = {};
                dict[type] = groupsByName;
            }
            const newIndices = [];
            groupsByName[groupName] = (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setToArray */ .T_)(newIndicesSet, newIndices);
        };
        this.selectedIndices.clear();
        (0,_engine_nodes_sop_utils_group_GroupCommon__WEBPACK_IMPORTED_MODULE_2__/* .selectedIndicesFromSelectionStates */ .A)(selectionStates, this.selectedIndices, invert);
        switch (operation) {
            case GroupOperation.SET: {
                _updateGroup(this.selectedIndices);
                return;
            }
            case GroupOperation.UNION: {
                (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayToSet */ .nu)(currentIndices, _currentIndicesSet);
                (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setUnion */ .uy)(_currentIndicesSet, this.selectedIndices, _newIndicesSet);
                _updateGroup(_newIndicesSet);
                return;
            }
            case GroupOperation.SUBTRACT: {
                (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayToSet */ .nu)(currentIndices, _currentIndicesSet);
                (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setDifference */ .TV)(_currentIndicesSet, this.selectedIndices, _newIndicesSet);
                _updateGroup(_newIndicesSet);
                return;
            }
            case GroupOperation.INTERSECT: {
                (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayToSet */ .nu)(currentIndices, _currentIndicesSet);
                (0,_SetUtils__WEBPACK_IMPORTED_MODULE_1__/* .setIntersection */ .OV)(_currentIndicesSet, this.selectedIndices, _newIndicesSet);
                _updateGroup(_newIndicesSet);
                return;
            }
        }
        _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_3__/* .TypeAssert.unreachable */ .f.unreachable(operation);
    }
}


/***/ }),

/***/ 48931:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": () => (/* binding */ ObjectEvent),
/* harmony export */   "t": () => (/* binding */ ON_OBJECT_BEFORE_DELETE)
/* harmony export */ });
var ObjectEvent;
(function (ObjectEvent) {
    ObjectEvent["BEFORE_DELETE"] = "beforeDelete";
})(ObjectEvent || (ObjectEvent = {}));
const ON_OBJECT_BEFORE_DELETE = { type: ObjectEvent.BEFORE_DELETE };


/***/ }),

/***/ 86132:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "I_": () => (/* binding */ object3DHasGeometry),
/* harmony export */   "hI": () => (/* binding */ markedAsInstance)
/* harmony export */ });
/* unused harmony exports bufferGeometryMaxGroupEnd, truncateBufferGeometry, objectContentHasGeometry */
/* harmony import */ var _Instancer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(62157);




function bufferGeometryMaxGroupEnd(geometry) {
    const groups = geometry.groups;
    let max = -1;
    for (const group of groups) {
        const groupEnd = group.start + group.count;
        if (groupEnd > max) {
            max = groupEnd;
        }
    }
    return max;
}
function truncateBufferGeometry(geometry, maxCount) {
    const attributeNames = Object.keys(geometry.attributes);
    for (const attributeName of attributeNames) {
        const attribute = geometry.getAttribute(attributeName);
        const originalArray = attribute.array;
        const itemSize = attribute.itemSize;
        const expectedArraySize = maxCount * itemSize;
        const newArray = originalArray.slice(0, expectedArraySize); //new Array(expectedArraySize);
        // for(let i=0;i<expectedArraySize;i++){
        // 	newArray[i]=originalArray[i];
        // }
        geometry.setAttribute(attributeName, new BufferAttribute(new Float32Array(newArray), itemSize));
    }
}
function object3DHasGeometry(o) {
    return o.geometry != null;
}
function objectContentHasGeometry(o) {
    if (isQuadObject(o)) {
        return true;
    }
    if (isObject3D(o)) {
        return o.geometry != null;
    }
    return false;
}
function markedAsInstance(geometry) {
    return geometry.getAttribute(_Instancer__WEBPACK_IMPORTED_MODULE_0__/* .InstanceAttrib.POSITION */ .R.POSITION) != null; //geometry.userData[IS_INSTANCE_KEY] === true;
}


/***/ }),

/***/ 76985:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Q": () => (/* binding */ CoreGroup)
});

// EXTERNAL MODULE: ./node_modules/three/build/three.module.js
var three_module = __webpack_require__(99477);
// EXTERNAL MODULE: ./src/core/geometry/Attribute.ts
var Attribute = __webpack_require__(9832);
// EXTERNAL MODULE: ./src/core/String.ts
var core_String = __webpack_require__(40354);
// EXTERNAL MODULE: ./src/core/geometry/Constant.ts
var Constant = __webpack_require__(73303);
// EXTERNAL MODULE: ./src/core/Type.ts
var Type = __webpack_require__(48454);
// EXTERNAL MODULE: ./src/core/ArrayUtils.ts
var ArrayUtils = __webpack_require__(69374);
// EXTERNAL MODULE: ./src/engine/Poly.ts + 21 modules
var Poly = __webpack_require__(72931);
// EXTERNAL MODULE: ./src/core/geometry/ObjectContent.ts
var ObjectContent = __webpack_require__(37956);
// EXTERNAL MODULE: ./src/core/geometry/CoreObjectFactory.ts
var CoreObjectFactory = __webpack_require__(44604);
// EXTERNAL MODULE: ./src/core/geometry/entities/object/BaseCoreObjectUtils.ts
var BaseCoreObjectUtils = __webpack_require__(70965);
// EXTERNAL MODULE: ./src/core/geometry/entities/utils/Common.ts
var Common = __webpack_require__(81323);
// EXTERNAL MODULE: ./src/core/geometry/GeometryUtils.ts
var GeometryUtils = __webpack_require__(86132);
// EXTERNAL MODULE: ./src/core/geometry/CoreEntity.ts
var CoreEntity = __webpack_require__(48658);
// EXTERNAL MODULE: ./src/core/geometry/entities/point/CorePointUtils.ts
var CorePointUtils = __webpack_require__(81669);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadCoreType.ts
var CadCoreType = __webpack_require__(92219);
// EXTERNAL MODULE: ./src/core/geometry/modules/csg/CsgCoreType.ts
var CsgCoreType = __webpack_require__(33364);
// EXTERNAL MODULE: ./src/core/geometry/modules/quad/QuadCommon.ts
var QuadCommon = __webpack_require__(42519);
;// CONCATENATED MODULE: ./src/core/geometry/modules/quad/QuadCoreType.ts


function isQuadObject(o) {
    return QuadCommon/* QUAD_OBJECT_TYPES_SET.has */.Ji.has(o.type);
}
function isQuadOrThreejsObject(o) {
    return isQuadObject(o) || (0,ObjectContent/* isObject3D */.nK)(o);
}

// EXTERNAL MODULE: ./src/core/geometry/modules/tet/TetCoreType.ts
var TetCoreType = __webpack_require__(2572);
// EXTERNAL MODULE: ./src/engine/poly/Assert.ts
var Assert = __webpack_require__(53120);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsCoreObject.ts + 1 modules
var ThreejsCoreObject = __webpack_require__(24210);
;// CONCATENATED MODULE: ./src/core/geometry/Group.ts












// entities





//
// SDF
// import type {SDFObjectType} from './sdf/SDFCommon';
// import {SDF_OBJECT_TYPES_SET} from './sdf/SDFCommon';
// import type {SDFObject} from './sdf/SDFObject';
//
// TET


// THREEJS


const tmpBox3 = new three_module.Box3();
const tmpPos = new three_module.Vector3();
const _indices = [];
const _points = [];
const _relatedPoints = [];
const _relatedVertices = [];
const _relatedPrimitives = [];
const _relatedPrimitivesForObject = [];
function objectTotalPointsCount(object) {
    let sum = 0;
    object.traverse((child) => {
        // const geometry = (child as Mesh).geometry as BufferGeometry;
        // if (geometry) {
        sum += (0,CorePointUtils/* pointsCountFromObject */.En)(child);
        // }
    });
    return sum;
}
class CoreGroup extends CoreEntity/* CoreEntity */.U {
    constructor() {
        super(undefined, 0);
        this._allObjects = [];
        this._attributes = {};
        this.touch();
    }
    dispose() {
        if (this._allObjects) {
            for (const object of this._allObjects) {
                if (object.dispose) {
                    object.dispose();
                }
            }
        }
        this._allObjects.length = 0;
    }
    geometry() {
        return null;
    }
    builder() {
        return undefined;
    }
    //
    //
    // TIMESTAMP
    //
    //
    timestamp() {
        return this._timestamp;
    }
    touch() {
        const performance = Poly/* Poly.performance.performanceManager */.L.performance.performanceManager();
        this._timestamp = performance.now();
        // this.reset();
    }
    // reset() {
    // 	// this.resetBoundingBox();
    // 	// this._bounding_sphere = undefined;
    // 	// this._coreGeometries = undefined;
    // 	// this._coreObjects = undefined;
    // }
    resetBoundingBox() {
        // this._boundingBox = undefined;
    }
    //
    //
    // CLONE
    //
    //
    clone() {
        const coreGroup = new CoreGroup();
        // all
        if (this._allObjects) {
            const allCoreObjects = this.allCoreObjects();
            const clonedObjects = [];
            for (const coreObject of allCoreObjects) {
                const clonedObject = coreObject.clone().object();
                if (clonedObject) {
                    clonedObjects.push(clonedObject);
                }
            }
            // for (let object of this._allObjects) {
            // 	allObjects.push(object.clone());
            // }
            coreGroup.setAllObjects(clonedObjects);
        }
        const attribNames = this.attribNames();
        for (const attribName of attribNames) {
            const value = this.attribValue(attribName);
            coreGroup.addAttribute(attribName, value);
        }
        return coreGroup;
    }
    //
    //
    // ALL OBJECTS
    //
    //
    setAllObjects(objects) {
        this._allObjects = objects;
        this.touch();
    }
    allObjects() {
        return this._allObjects;
    }
    allCoreObjects() {
        var _a;
        return (_a = this.allObjects()) === null || _a === void 0 ? void 0 : _a.map((o, i) => (0,CoreObjectFactory/* coreObjectInstanceFactory */.$Z)(o, i));
    }
    //
    //
    // CAD OBJECTS
    //
    //
    cadObjects() {
        var _a;
        const list = ((_a = this._allObjects) === null || _a === void 0 ? void 0 : _a.filter(CadCoreType/* isCADObject */.L)) || undefined;
        return list;
    }
    cadObjectsWithShape() {
        var _a;
        return (_a = this.cadObjects()) === null || _a === void 0 ? void 0 : _a.filter((o) => CadCoreType/* CoreCadType.isShape */.c.isShape(o));
    }
    cadCoreObjects() {
        var _a;
        return (_a = this.cadObjects()) === null || _a === void 0 ? void 0 : _a.map((o, i) => (0,CoreObjectFactory/* coreObjectInstanceFactory */.$Z)(o, i));
    }
    //
    //
    // CSG OBJECTS
    //
    //
    csgObjects() {
        var _a;
        const list = ((_a = this._allObjects) === null || _a === void 0 ? void 0 : _a.filter(CsgCoreType/* isCSGObject */.Gi)) || undefined;
        return list;
    }
    csgCoreObjects() {
        var _a;
        return (_a = this.csgObjects()) === null || _a === void 0 ? void 0 : _a.map((o, i) => (0,CoreObjectFactory/* coreObjectInstanceFactory */.$Z)(o, i));
    }
    //
    //
    // QUAD OBJECTS
    //
    //
    quadObjects() {
        var _a;
        const list = ((_a = this._allObjects) === null || _a === void 0 ? void 0 : _a.filter(isQuadObject)) || undefined;
        return list;
    }
    quadCoreObjects() {
        var _a;
        return (_a = this.quadObjects()) === null || _a === void 0 ? void 0 : _a.map((o, i) => (0,CoreObjectFactory/* coreObjectInstanceFactory */.$Z)(o, i));
    }
    threejsOrQuadObjects() {
        return (this._allObjects ? this._allObjects.filter(isQuadOrThreejsObject) : []);
    }
    threejsOrQuadCoreObjects() {
        return this.threejsOrQuadObjects().map((o, i) => (0,CoreObjectFactory/* coreObjectInstanceFactory */.$Z)(o, i));
    }
    //
    //
    // SDF OBJECTS
    //
    //
    // SDFObjects() {
    // 	const list = this._allObjects?.filter((o) => SDF_OBJECT_TYPES_SET.has(o.type as SDFObjectType)) || undefined;
    // 	return list as SDFObject[] | undefined;
    // }
    // SDFCoreObjects() {
    // 	return this.csgObjects()?.map((o, i) => coreObjectInstanceFactory(o, i));
    // }
    //
    //
    // TET OBJECTS
    //
    //
    tetObjects() {
        var _a;
        const list = ((_a = this._allObjects) === null || _a === void 0 ? void 0 : _a.filter(TetCoreType/* isTetObject */.J)) || undefined;
        return list;
    }
    tetCoreObjects() {
        var _a;
        return (_a = this.tetObjects()) === null || _a === void 0 ? void 0 : _a.map((o, i) => (0,CoreObjectFactory/* coreObjectInstanceFactory */.$Z)(o, i));
    }
    //
    //
    // THREEJS OBJECTS
    //
    //
    threejsObjects() {
        return this._allObjects ? this._allObjects.filter(ObjectContent/* isObject3D */.nK) : [];
    }
    threejsObjectsWithGeo() {
        return this.threejsObjects().filter(GeometryUtils/* object3DHasGeometry */.I_);
    }
    threejsCoreObjects() {
        return this.threejsObjects().map((o, i) => new ThreejsCoreObject/* ThreejsCoreObject */.W(o, i));
    }
    geometries() {
        return this.threejsObjectsWithGeo().map((o) => o.geometry);
    }
    // coreGeometries(): CoreGeometry[] {
    // 	return this.geometries().map((g) => new CoreGeometry(g));
    // }
    //
    //
    // POINTS
    //
    //
    points(target) {
        return (0,CorePointUtils/* pointsFromObjects */.Nq)(this.allObjects(), target);
        // return this.allObjects()
        // 	.map((o) => pointsFromObject(o))
        // 	.flat();
        // .map((g) => g.points())
        // .flat();
    }
    pointsCount() {
        return (0,ArrayUtils/* arraySum */.dD)(this.allObjects().map((g) => (0,CorePointUtils/* pointsCountFromObject */.En)(g)));
    }
    totalPointsCount() {
        const threejsObjects = this.threejsObjects();
        let sum = 0;
        for (const object of threejsObjects) {
            sum += objectTotalPointsCount(object);
        }
        return sum;
    }
    pointsFromGroup(group, target) {
        if (group) {
            core_String/* CoreString.indices */.YE.indices(group, _indices);
            this.points(_points);
            const compactPoints = [];
            const pointsInGroup = (0,ArrayUtils/* arrayCompact */.k)(_indices.map((i) => _points[i]), compactPoints);
            target.length = 0;
            (0,ArrayUtils/* arrayPushItems */.L_)(pointsInGroup, target);
            return target;
        }
        else {
            return this.points(target);
        }
    }
    pointAttribNames() {
        const firstObject = this.allObjects()[0];
        if (firstObject) {
            return (0,CorePointUtils/* pointAttributeNames */.JL)(firstObject);
        }
        else {
            return [];
        }
    }
    hasPointAttrib(attribName) {
        const firstObject = this.allObjects()[0];
        if (firstObject) {
            return (0,CorePointUtils/* hasPointAttribute */.LG)(firstObject, attribName);
        }
        else {
            return false;
        }
    }
    pointAttribType(attribName) {
        const firstObject = this.allObjects()[0];
        if (firstObject) {
            return (0,CorePointUtils/* pointAttributeType */.MN)(firstObject, attribName);
        }
        else {
            return Constant/* AttribType.NUMERIC */.rp.NUMERIC;
        }
    }
    pointAttribNamesMatchingMask(masksString) {
        return Attribute/* CoreAttribute.attribNamesMatchingMask */.n0.attribNamesMatchingMask(masksString, this.pointAttribNames());
    }
    pointAttribSizes() {
        const firstObject = this.allObjects()[0];
        if (firstObject) {
            return (0,CorePointUtils/* pointAttributeSizes */.Qg)(firstObject);
        }
        else {
            return {};
        }
    }
    pointAttribSize(attribName) {
        const firstObject = this.allObjects()[0];
        if (firstObject) {
            return (0,CorePointUtils/* pointAttributeSize */.fk)(firstObject, attribName);
        }
        else {
            return 0;
        }
    }
    //
    //
    // OBJECTS
    //
    //
    static _fromObjects(objects) {
        const coreGroup = new CoreGroup();
        coreGroup.setAllObjects(objects);
        return coreGroup;
    }
    objectAttribTypesByName() {
        return (0,BaseCoreObjectUtils/* coreObjectAttributeTypesByName */.xd)(this.allCoreObjects());
    }
    objectAttribNames() {
        return (0,BaseCoreObjectUtils/* coreObjectsAttribNames */.Cj)(this.allCoreObjects());
    }
    objectAttribNamesMatchingMask(masksString) {
        return Attribute/* CoreAttribute.attribNamesMatchingMask */.n0.attribNamesMatchingMask(masksString, this.objectAttribNames());
    }
    objectAttribSizesByName() {
        return (0,BaseCoreObjectUtils/* coreObjectsAttribSizesByName */.os)(this.allCoreObjects());
    }
    //
    //
    //
    //
    //
    renameAttribute(oldName, newName) {
        const attribValue = this.attribValue(oldName);
        if (attribValue == null) {
            return;
        }
        this.addAttribute(newName, attribValue);
        this.deleteAttribute(oldName);
    }
    attribNamesMatchingMask(masksString) {
        return Attribute/* CoreAttribute.attribNamesMatchingMask */.n0.attribNamesMatchingMask(masksString, this.attribNames());
    }
    hasAttribute(attribName) {
        return this.attribValue(attribName) != null;
    }
    addAttribute(attribName, attribValue) {
        this.attributes()[attribName] = attribValue;
    }
    addNumericAttribute(attribName, size = 1, defaultValue = 0) {
        const attributes = this.attributes();
        if (defaultValue != null) {
            if ((0,Common/* attribValueNonPrimitive */.L8)(defaultValue)) {
                const clonedDefaultValue = (0,Common/* cloneAttribValue */.zR)(defaultValue);
                if (clonedDefaultValue != null) {
                    attributes[attribName] = clonedDefaultValue;
                }
            }
            else {
                attributes[attribName] = defaultValue;
            }
        }
        else {
            switch (size) {
                case 1: {
                    return (this.attributes()[attribName] = 0);
                }
                case 2: {
                    return (this.attributes()[attribName] = new three_module.Vector2(0, 0));
                }
                case 3: {
                    return (this.attributes()[attribName] = new three_module.Vector3(0, 0, 0));
                }
                case 4: {
                    return (this.attributes()[attribName] = new three_module.Vector4(0, 0, 0, 0));
                }
            }
        }
    }
    deleteAttribute(name) {
        delete this.attributes()[name];
    }
    attribValue(attribName) {
        return this._attributes && this._attributes[attribName];
    }
    attribNames() {
        return this._attributes ? Object.keys(this._attributes) : [];
    }
    attribType(name) {
        const val = this.attribValue(name);
        if (Type/* CoreType.isString */.MR.isString(val)) {
            return Constant/* AttribType.STRING */.rp.STRING;
        }
        else {
            return Constant/* AttribType.NUMERIC */.rp.NUMERIC;
        }
    }
    attribSizes() {
        const h = {};
        for (const attrib_name of this.attribNames()) {
            const size = this.attribSize(attrib_name);
            if (size != null) {
                h[attrib_name] = size;
            }
        }
        return h;
    }
    attribSize(name) {
        const val = this.attribValue(name);
        if (val == null) {
            return null;
        }
        return Attribute/* CoreAttribute.attribSizeFromValue */.n0.attribSizeFromValue(val);
    }
    attributes() {
        return this._attributes || this._createAttributesDictionaryIfNone();
    }
    _createAttributesDictionaryIfNone() {
        if (!this._attributes) {
            this._attributes = {};
        }
        return this._attributes;
    }
    // override
    setAttribValue(attribName, attribValue) {
        this.addAttribute(attribName, attribValue);
    }
    stringAttribValue(attribName) {
        return this.attribValue(attribName);
    }
    position(target) {
        const objectsCount = this._allObjects.length;
        target.set(0, 0, 0);
        for (const object of this._allObjects) {
            (0,CoreObjectFactory/* coreObjectClassFactory */.Xr)(object).position(object, tmpPos);
            target.add(tmpPos);
        }
        target.divideScalar(objectsCount);
        return target;
    }
    attributeNames() {
        const attributes = this.attributes();
        if (!attributes) {
            return [];
        }
        return Object.keys(attributes);
    }
    attributeNamesMatchingMask(masksString) {
        return Attribute/* CoreAttribute.attribNamesMatchingMask */.n0.attribNamesMatchingMask(masksString, this.attributeNames());
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    relatedObjects(target, traversedRelatedEntityData) {
        (0,ArrayUtils/* arrayCopy */.gc)(this.allCoreObjects(), target);
    }
    relatedPrimitives(target, traversedRelatedEntityData) {
        target.length = 0;
        const objects = this.allObjects();
        let i = 0;
        for (const object of objects) {
            (0,CoreObjectFactory/* coreObjectClassFactory */.Xr)(object).relatedPrimitives(object, i, _relatedPrimitivesForObject);
            for (const _relatedPrimitiveForObject of _relatedPrimitivesForObject) {
                target.push(_relatedPrimitiveForObject);
            }
            i++;
        }
    }
    relatedVertices(target, traversedRelatedEntityData) {
        this.relatedPrimitives(_relatedPrimitives);
        (0,Common/* uniqRelatedEntities */.k0)(_relatedPrimitives, (primitive) => {
            primitive.relatedVertices(_relatedVertices);
            return _relatedVertices;
        }, target);
    }
    relatedPoints(target, traversedRelatedEntityData) {
        this.relatedVertices(_relatedVertices);
        return (0,Common/* uniqRelatedEntities */.k0)(_relatedVertices, (vertex) => {
            vertex.relatedPoints(_relatedPoints);
            return _relatedPoints;
        }, target);
    }
    relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {
        switch (attribClass) {
            case Constant/* AttribClass.POINT */.io.POINT: {
                this.relatedPoints(target, traversedRelatedEntityData);
                return;
            }
            case Constant/* AttribClass.VERTEX */.io.VERTEX: {
                this.relatedVertices(target, traversedRelatedEntityData);
                return;
            }
            case Constant/* AttribClass.PRIMITIVE */.io.PRIMITIVE: {
                this.relatedPrimitives(target, traversedRelatedEntityData);
                return;
            }
            case Constant/* AttribClass.OBJECT */.io.OBJECT: {
                this.relatedObjects(target, traversedRelatedEntityData);
                return;
            }
            case Constant/* AttribClass.CORE_GROUP */.io.CORE_GROUP: {
                target.length = 1;
                target[0] = coreGroup;
                return;
            }
        }
        Assert/* TypeAssert.unreachable */.f.unreachable(attribClass);
    }
    //
    //
    // UTILS
    //
    //
    objectsData() {
        var _a;
        return ((_a = this._allObjects) === null || _a === void 0 ? void 0 : _a.map((o) => (0,CoreObjectFactory/* coreObjectClassFactory */.Xr)(o).objectData(o))) || [];
    }
    boundingBox(target) {
        target.makeEmpty();
        const coreObjects = this.allCoreObjects();
        for (const coreObject of coreObjects) {
            coreObject.boundingBox(tmpBox3);
            target.union(tmpBox3);
        }
    }
    static geometryFromObject(object) {
        if (object.isMesh || object.isLine || object.isPoints) {
            return object.geometry;
        }
        return null;
    }
}


/***/ }),

/***/ 62157:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R": () => (/* binding */ InstanceAttrib),
/* harmony export */   "t": () => (/* binding */ CoreInstancer)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(48454);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9832);

// import {CoreGeometry} from './Geometry';


const DEFAULT = {
    SCALE: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1),
    PSCALE: 1,
    EYE: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0),
    UP: new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 1, 0),
};
const DEFAULT_COLOR = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1);
const DEFAULT_UV = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2(0, 0);
const _position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const _instancePts = [];
var InstanceAttrib;
(function (InstanceAttrib) {
    InstanceAttrib["POSITION"] = "instancePosition";
    InstanceAttrib["SCALE"] = "instanceScale";
    InstanceAttrib["QUATERNION"] = "instanceQuaternion";
    InstanceAttrib["COLOR"] = "instanceColor";
    InstanceAttrib["UV"] = "instanceUv";
})(InstanceAttrib || (InstanceAttrib = {}));
const ATTRIB_NAME_MAP = {
    P: InstanceAttrib.POSITION,
    N: InstanceAttrib.QUATERNION,
    up: InstanceAttrib.QUATERNION,
    Cd: InstanceAttrib.COLOR,
    [_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.COLOR */ .ah.COLOR]: InstanceAttrib.COLOR,
    [_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.NORMAL */ .ah.NORMAL]: InstanceAttrib.QUATERNION,
    [_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.POSITION */ .ah.POSITION]: InstanceAttrib.POSITION,
    [_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.PSCALE */ .ah.PSCALE]: InstanceAttrib.SCALE,
    [_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.SCALE */ .ah.SCALE]: InstanceAttrib.SCALE,
};
class CoreInstancer {
    static remapName(name) {
        return ATTRIB_NAME_MAP[name] || name;
    }
    constructor(_coreGroup) {
        this._coreGroup = _coreGroup;
        this._is_pscale_present = false;
        this._is_scale_present = false;
        this._is_normal_present = false;
        this._is_up_present = false;
        this._do_rotate_matrices = false;
        // private _matrices: PolyDictionary<Matrix4> = {};
        this._matrixT = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();
        this._matrixR = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();
        this._matrixS = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();
        this._pointScale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        this._pointNormal = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        this._pointUp = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
        if (_coreGroup) {
            this.setCoreGroup(_coreGroup);
        }
    }
    setCoreGroup(coreGroup) {
        this._coreGroup = coreGroup;
        this._is_pscale_present = this._coreGroup.hasPointAttrib(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.PSCALE */ .ah.PSCALE);
        this._is_scale_present = this._coreGroup.hasPointAttrib(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.SCALE */ .ah.SCALE);
        this._is_normal_present = this._coreGroup.hasPointAttrib(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.NORMAL */ .ah.NORMAL);
        this._is_up_present = this._coreGroup.hasPointAttrib(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.UP */ .ah.UP);
        this._do_rotate_matrices = this._is_normal_present; //&& this._is_up_present;
    }
    // private _point_m = new Matrix4()
    matrixFromPoint(point, targetMatrix) {
        targetMatrix.identity();
        point.position(_position);
        //r = new Vector3(0,0,0)
        if (this._is_scale_present) {
            point.attribValue(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.SCALE */ .ah.SCALE, this._pointScale);
        }
        else {
            this._pointScale.copy(DEFAULT.SCALE);
        }
        const pscale = this._is_pscale_present
            ? point.attribValue(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.PSCALE */ .ah.PSCALE)
            : DEFAULT.PSCALE;
        this._pointScale.multiplyScalar(pscale);
        //matrix = #Core.Transform.matrix(t, r, s, scale)
        // matrix.identity();
        const scale_matrix = this._matrixS;
        scale_matrix.makeScale(this._pointScale.x, this._pointScale.y, this._pointScale.z);
        const translate_matrix = this._matrixT;
        translate_matrix.makeTranslation(_position.x, _position.y, _position.z);
        targetMatrix.multiply(translate_matrix);
        if (this._do_rotate_matrices) {
            const rotate_matrix = this._matrixR;
            const eye = DEFAULT.EYE;
            point.attribValue(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.NORMAL */ .ah.NORMAL, this._pointNormal);
            this._pointNormal.multiplyScalar(-1);
            if (this._is_up_present) {
                point.attribValue(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.UP */ .ah.UP, this._pointUp);
            }
            else {
                this._pointUp.copy(DEFAULT.UP);
            }
            this._pointUp.normalize();
            rotate_matrix.lookAt(eye, this._pointNormal, this._pointUp);
            targetMatrix.multiply(rotate_matrix);
        }
        targetMatrix.multiply(scale_matrix);
    }
    static updateTransformInstanceAttributes(instancePts, templateCoreGroup, geometry) {
        const instancesCount = instancePts.length;
        const positions = new Float32Array(instancesCount * 3);
        const scales = new Float32Array(instancesCount * 3);
        const quaternions = new Float32Array(instancesCount * 4);
        const instancer = new CoreInstancer(templateCoreGroup);
        let i = 0;
        for (const instancePt of instancePts) {
            instancer.matrixFromPoint(instancePt, this._tmpMatrix);
            const index3 = i * 3;
            const index4 = i * 4;
            this._tmpMatrix.decompose(this._position, this._quaternion, this._scale);
            this._position.toArray(positions, index3);
            this._quaternion.toArray(quaternions, index4);
            this._scale.toArray(scales, index3);
            i++;
        }
        const instancePosition = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferAttribute(positions, 3);
        const instanceQuaternion = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferAttribute(quaternions, 4);
        const instanceScale = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferAttribute(scales, 3);
        geometry.setAttribute(InstanceAttrib.POSITION, instancePosition);
        geometry.setAttribute(InstanceAttrib.QUATERNION, instanceQuaternion);
        geometry.setAttribute(InstanceAttrib.SCALE, instanceScale);
    }
    static updateColorInstanceAttribute(instancePts, templateCoreGroup, geometry) {
        const instancesCount = instancePts.length;
        const colors = new Float32Array(instancesCount * 3);
        const hasColor = templateCoreGroup.hasPointAttrib(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.COLOR */ .ah.COLOR);
        let i = 0;
        for (const instancePt of instancePts) {
            const color = hasColor
                ? instancePt.attribValue(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.COLOR */ .ah.COLOR, this._point_color)
                : DEFAULT_COLOR;
            color.toArray(colors, i * 3);
            i++;
        }
        geometry.setAttribute(InstanceAttrib.COLOR, new three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferAttribute(colors, 3));
    }
    static createInstanceBufferGeometry(geometryToInstance, templateCoreGroup, attributesToCopy) {
        templateCoreGroup.points(_instancePts);
        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferGeometry();
        geometry.copy(geometryToInstance);
        geometry.instanceCount = Infinity;
        const instancesCount = _instancePts.length;
        const hasUV = templateCoreGroup.hasPointAttrib(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.UV */ .ah.UV);
        if (hasUV) {
            const uvs = new Float32Array(instancesCount * 2);
            let i = 0;
            for (const instancePt of _instancePts) {
                const index2 = i * 2;
                const uv = hasUV ? instancePt.attribValue(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.UV */ .ah.UV, this._point_uv) : DEFAULT_UV;
                uv.toArray(uvs, index2);
                i++;
            }
            geometry.setAttribute(InstanceAttrib.UV, new three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferAttribute(uvs, 2));
        }
        this.updateTransformInstanceAttributes(_instancePts, templateCoreGroup, geometry);
        this.updateColorInstanceAttribute(_instancePts, templateCoreGroup, geometry);
        const attribNames = templateCoreGroup.pointAttribNamesMatchingMask(attributesToCopy);
        for (const attribName of attribNames) {
            const attribSize = templateCoreGroup.pointAttribSize(attribName);
            const values = new Float32Array(instancesCount * attribSize);
            let i = 0;
            for (const pt of _instancePts) {
                const value = pt.attribValue(attribName);
                if (_Type__WEBPACK_IMPORTED_MODULE_2__/* .CoreType.isNumber */ .MR.isNumber(value)) {
                    values[i] = value;
                }
                else {
                    value.toArray(values, i * attribSize);
                }
                i++;
            }
            geometry.setAttribute(attribName, new three__WEBPACK_IMPORTED_MODULE_0__.InstancedBufferAttribute(values, attribSize));
        }
        return geometry;
    }
}
CoreInstancer.transformAttributeNames = [
    InstanceAttrib.POSITION,
    InstanceAttrib.QUATERNION,
    InstanceAttrib.SCALE,
];
CoreInstancer._point_color = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
CoreInstancer._point_uv = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();
CoreInstancer._position = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(0, 0, 0);
CoreInstancer._quaternion = new three__WEBPACK_IMPORTED_MODULE_0__.Quaternion();
CoreInstancer._scale = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(1, 1, 1);
CoreInstancer._tmpMatrix = new three__WEBPACK_IMPORTED_MODULE_0__.Matrix4();


/***/ }),

/***/ 64802:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D4": () => (/* binding */ applyCustomMaterials),
/* harmony export */   "F5": () => (/* binding */ assignUniforms),
/* harmony export */   "HP": () => (/* binding */ addUserDataRenderHook),
/* harmony export */   "KS": () => (/* binding */ CoreMaterial),
/* harmony export */   "RJ": () => (/* binding */ CustomMaterialName),
/* harmony export */   "eJ": () => (/* binding */ cloneMaterial),
/* harmony export */   "pC": () => (/* binding */ applyRenderHook)
/* harmony export */ });
/* unused harmony export assignUniformForOnBeforeCompile */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _engine_nodes_gl_code_assemblers_materials_OnBeforeCompile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8846);

var CustomMaterialName;
(function (CustomMaterialName) {
    CustomMaterialName["DISTANCE"] = "customDistanceMaterial";
    CustomMaterialName["DEPTH"] = "customDepthMaterial";
    CustomMaterialName["DEPTH_DOF"] = "customDepthDOFMaterial";
})(CustomMaterialName || (CustomMaterialName = {}));

const RENDER_HOOK_USER_DATA_KEY = 'POLY_render_hook';
const EMPTY_RENDER_HOOK = (renderer, scene, camera, geometry, material, group) => { };
function cloneMaterial(scene, srcMaterial, options) {
    const clonedMaterial = srcMaterial.clone();
    const srcUniforms = srcMaterial.uniforms;
    if (srcUniforms) {
        clonedMaterial.uniforms = three__WEBPACK_IMPORTED_MODULE_0__.UniformsUtils.clone(srcUniforms);
    }
    (0,_engine_nodes_gl_code_assemblers_materials_OnBeforeCompile__WEBPACK_IMPORTED_MODULE_1__/* .copyOnBeforeCompileData */ .dJ)(scene, {
        src: srcMaterial,
        dest: clonedMaterial,
        shareCustomUniforms: options.shareCustomUniforms,
    });
    if (srcMaterial.customMaterials && options.addCustomMaterials) {
        const customNames = Object.keys(srcMaterial.customMaterials);
        if (customNames.length > 0) {
            clonedMaterial.customMaterials = {};
        }
        for (const customName of customNames) {
            const matName = customName;
            const customMaterial = srcMaterial.customMaterials[matName];
            if (customMaterial) {
                const clonedCustomMaterial = cloneMaterial(scene, customMaterial, {
                    ...options,
                    addCustomMaterials: false,
                });
                clonedMaterial.customMaterials[matName] = clonedCustomMaterial;
            }
        }
    }
    return clonedMaterial;
}
function applyCustomMaterials(object, material) {
    const materialWithCustom = material;
    if (materialWithCustom.customMaterials) {
        for (const customName of Object.keys(materialWithCustom.customMaterials)) {
            const matName = customName;
            // http://blog.edankwan.com/post/three-js-advanced-tips-shadow
            const customMaterial = materialWithCustom.customMaterials[matName];
            if (customMaterial) {
                object[matName] = customMaterial;
                customMaterial.needsUpdate = true;
            }
        }
        // object.material = material.customMaterials.customDepthDOFMaterial
        // object.material = material.customMaterials.customDepthMaterial
        // object.material = material.customMaterials.customDistanceMaterial
    }
}
/*
//
// TODO:
// this render hook system has a big limitation,
// which is that if we clone the object, it may not be propagated correctly,
// since this is assigned at render time.
// This means that if we clone an object before it has been rendered,
// it won't have the onBeforeRender function, and therefore won't pass it on to its clone.
//
*/
function addUserDataRenderHook(material, renderHook) {
    material.userData[RENDER_HOOK_USER_DATA_KEY] = renderHook;
}
function applyRenderHook(object, material) {
    if (material.userData) {
        const renderHook = material.userData[RENDER_HOOK_USER_DATA_KEY];
        if (renderHook) {
            object.onBeforeRender = (renderer, scene, camera, geometry, material, group) => {
                renderHook(renderer, scene, camera, geometry, material, group, object);
            };
            return;
        }
    }
    // make sure to reset the render hook if apply to a material that does not have any
    object.onBeforeRender = EMPTY_RENDER_HOOK;
}
function assignUniforms(mat, uniformName, uniform, assembler) {
    (0,_engine_nodes_gl_code_assemblers_materials_OnBeforeCompile__WEBPACK_IMPORTED_MODULE_1__/* .assignUniformViaUserData */ .OQ)(mat, uniformName, uniform);
    if (assembler) {
        assignUniformForOnBeforeCompile(mat, uniformName, uniform, assembler);
    }
}
function assignUniformForOnBeforeCompile(mat, uniformName, uniform, assembler) {
    assembler.addAdditionalTextureUniforms(uniformName, uniform);
}
class CoreMaterial {
    static node(scene, material) {
        return scene.node(material.name);
    }
}
CoreMaterial.clone = cloneMaterial;
CoreMaterial.applyCustomMaterials = applyCustomMaterials;
CoreMaterial.assignUniforms = assignUniforms;
CoreMaterial.assignUniformForOnBeforeCompile = assignUniformForOnBeforeCompile;


/***/ }),

/***/ 37956:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Br": () => (/* binding */ objectContentCopyProperties),
/* harmony export */   "JB": () => (/* binding */ CoreObjectType),
/* harmony export */   "nK": () => (/* binding */ isObject3D)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _ObjectUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(41474);


var CoreObjectType;
(function (CoreObjectType) {
    CoreObjectType["THREEJS"] = "Object3D";
    CoreObjectType["CAD"] = "CADObject";
    CoreObjectType["CSG"] = "CSGObject";
    CoreObjectType["QUAD"] = "QUADObject";
    CoreObjectType["SDF"] = "SDFObject";
    CoreObjectType["TET"] = "TetObject";
})(CoreObjectType || (CoreObjectType = {}));
function isObject3D(o) {
    return o instanceof three__WEBPACK_IMPORTED_MODULE_0__.Object3D || o.isObject3D == true;
}
function objectContentCopyProperties(src, target, options) {
    target.visible = src.visible;
    target.name = src.name;
    if (options == null || options.castShadow == null || options.castShadow == true) {
        target.castShadow = src.castShadow;
    }
    if (options == null || options.receiveShadow == null || options.receiveShadow == true) {
        target.receiveShadow = src.receiveShadow;
    }
    target.renderOrder = src.renderOrder;
    target.frustumCulled = src.frustumCulled;
    target.matrixAutoUpdate = src.matrixAutoUpdate;
    if (src.material) {
        target.material = src.material;
    }
    target.userData = (0,_ObjectUtils__WEBPACK_IMPORTED_MODULE_1__/* .objectCloneDeep */ .qI)(src.userData);
}


/***/ }),

/***/ 15476:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "h": () => (/* binding */ ThreeMeshBVHHelper)
/* harmony export */ });
/* harmony import */ var _three_mesh_bvh__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28035);
/* harmony import */ var _three_mesh_bvh__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(45376);
/* harmony import */ var _three_mesh_bvh__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15760);

class ThreeMeshBVHHelper {
    static assignBVH(mesh, bvh) {
        mesh.raycast = _three_mesh_bvh__WEBPACK_IMPORTED_MODULE_0__/* .acceleratedRaycast */ .uL;
        // bvh = bvh || new MeshBVH(mesh.geometry, {verbose: false});
        mesh.geometry.boundsTree = bvh;
    }
    static assignDefaultBVHIfNone(mesh) {
        let bvh = mesh.geometry.boundsTree || this.defaultBVH(mesh);
        this.assignBVH(mesh, bvh);
    }
    static createBVH(mesh, options) {
        return new _three_mesh_bvh__WEBPACK_IMPORTED_MODULE_1__/* .MeshBVH */ .r(mesh.geometry, options);
    }
    static defaultBVH(mesh) {
        return this.createBVH(mesh, { strategy: _three_mesh_bvh__WEBPACK_IMPORTED_MODULE_2__/* .CENTER */ .dv, maxLeafTris: 10, maxDepth: 40, verbose: false });
    }
    static copyBVH(meshDest, meshSrc) {
        const existingBVH = meshSrc.geometry.boundsTree;
        if (existingBVH) {
            meshDest.raycast = _three_mesh_bvh__WEBPACK_IMPORTED_MODULE_0__/* .acceleratedRaycast */ .uL;
            this.assignBVH(meshDest, existingBVH);
        }
    }
    static updateRaycaster(raycaster) {
        raycaster.firstHitOnly = true;
    }
}


/***/ }),

/***/ 78841:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "q": () => (/* binding */ BaseCoreObject)
});

// EXTERNAL MODULE: ./node_modules/three/build/three.module.js
var three_module = __webpack_require__(99477);
// EXTERNAL MODULE: ./src/core/geometry/Attribute.ts
var Attribute = __webpack_require__(9832);
// EXTERNAL MODULE: ./src/core/geometry/Constant.ts
var Constant = __webpack_require__(73303);
// EXTERNAL MODULE: ./src/core/geometry/CoreEntity.ts
var CoreEntity = __webpack_require__(48658);
// EXTERNAL MODULE: ./src/core/Type.ts
var Type = __webpack_require__(48454);
// EXTERNAL MODULE: ./src/core/geometry/EntityGroupCollection.ts
var EntityGroupCollection = __webpack_require__(50155);
// EXTERNAL MODULE: ./src/core/geometry/entities/utils/Common.ts
var Common = __webpack_require__(81323);
// EXTERNAL MODULE: ./src/core/reactivity/ObjectAttributeReactivity.ts
var ObjectAttributeReactivity = __webpack_require__(62924);
;// CONCATENATED MODULE: ./src/core/reactivity/ObjectAttributeReactivityUpdateRef.ts


function _copyObjectAttribToRef(attribValue, targetRef) {
    if ((0,Common/* attribValueNonPrimitive */.L8)(attribValue) && (0,Common/* attribValueNonPrimitive */.L8)(targetRef.value)) {
        (0,Common/* copyAttribValue */.Ug)(attribValue, targetRef.value);
    }
    else {
        targetRef.value = attribValue;
    }
}
function _updateObjectAttribRef(object3D, attribName, newValue) {
    const _ref = (0,ObjectAttributeReactivity/* _getObjectAttributeRef_ */.hx)(object3D, attribName);
    if (!_ref) {
        return;
    }
    _copyObjectAttribToRef(_ref.current.value, _ref.previous);
    _copyObjectAttribToRef(newValue, _ref.current);
}

// EXTERNAL MODULE: ./src/core/reactivity/ObjectAttributeReactivityCreateRef.ts
var ObjectAttributeReactivityCreateRef = __webpack_require__(20514);
// EXTERNAL MODULE: ./node_modules/@vue-reactivity/watch/dist/index.mjs
var dist = __webpack_require__(79875);
// EXTERNAL MODULE: ./src/core/geometry/entities/object/BaseCoreObjectUtils.ts
var BaseCoreObjectUtils = __webpack_require__(70965);
// EXTERNAL MODULE: ./src/engine/poly/Assert.ts
var Assert = __webpack_require__(53120);
;// CONCATENATED MODULE: ./src/core/geometry/entities/object/BaseCoreObject.ts












var PropertyName;
(function (PropertyName) {
    PropertyName["NAME"] = "name";
    PropertyName["POSITION"] = "position";
})(PropertyName || (PropertyName = {}));
const ATTRIBUTES = 'attributes';
// const _relatedPoints: CorePoint<CoreObjectType>[] = [];
// const _relatedVertices: CoreVertex<CoreObjectType>[] = [];
// const _relatedPrimitives: CorePrimitive<CoreObjectType>[] = [];
// const ATTRIBUTES_PREVIOUS_VALUES = 'attributesPreviousValues';
const ORIGIN = new three_module.Vector3(0, 0, 0);
function _convertArrayToVector(value) {
    switch (value.length) {
        case 1:
            return value[0];
        case 2:
            return new three_module.Vector2(value[0], value[1]);
        case 3:
            return new three_module.Vector3(value[0], value[1], value[2]);
        case 4:
            return new three_module.Vector4(value[0], value[1], value[2], value[3]);
    }
}
const tmpVec3 = new three_module.Vector3();
const tmpN3 = [0, 0, 0];
const _relatedPrimitiveIds = [];
const _relatedVertexIds = [];
class BaseCoreObject extends CoreEntity/* CoreEntityWithObject */.D {
    dispose() { }
    // set_index(i: number) {
    // 	this._index = i;
    // }
    geometry() {
        var _a;
        return ((_a = this._object) === null || _a === void 0 ? void 0 : _a.geometry) || null; //(this._object as Mesh).geometry as BufferGeometry | null;
    }
    builder() {
        return undefined;
    }
    static attributeRef(object, attribName, type, defaultValue) {
        return (0,ObjectAttributeReactivityCreateRef/* getOrCreateObjectAttributeRef */.U)(object, attribName, type, defaultValue);
    }
    attributeRef(attribName, type, defaultValue) {
        if (!this._object) {
            return;
        }
        return this.constructor.attributeRef(this._object, attribName, type, defaultValue);
    }
    static onAttribChange(object, attribName, type, defaultValue, callback) {
        const ref = this.attributeRef(object, attribName, type, defaultValue);
        return (0,dist/* watch */.Y)(ref.current, callback);
    }
    onAttribChange(attribName, type, defaultValue, callback) {
        if (!this._object) {
            return;
        }
        return this.constructor.onAttribChange(this._object, attribName, type, defaultValue, callback);
    }
    static setAttribute(object, attribName, value) {
        this.addAttribute(object, attribName, value);
    }
    static addAttribute(object, attribName, value) {
        if (Type/* CoreType.isArray */.MR.isArray(value)) {
            const convertedValue = _convertArrayToVector(value);
            if (!convertedValue) {
                const message = `value invalid`;
                console.error(message, value);
                throw new Error(message);
            }
        }
        const dict = this._attributesDictionary(object);
        const currentValue = dict[attribName];
        if ((0,Common/* attribValueNonPrimitive */.L8)(value)) {
            if (currentValue == null) {
                const cloned = (0,Common/* cloneAttribValue */.zR)(value);
                if (cloned) {
                    dict[attribName] = cloned;
                }
            }
            else {
                if ((0,Common/* attribValueNonPrimitive */.L8)(currentValue)) {
                    (0,Common/* copyAttribValue */.Ug)(value, currentValue);
                }
            }
        }
        else {
            dict[attribName] = value;
        }
        _updateObjectAttribRef(object, attribName, value);
    }
    static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {
        this.addAttribute(object, attribName, defaultValue);
    }
    addAttribute(name, value) {
        if (!this._object) {
            return;
        }
        this.constructor.addAttribute(this._object, name, value);
    }
    addNumericAttrib(name, value) {
        if (!this._object) {
            return;
        }
        this.constructor.addNumericAttribute(this._object, name, 1, value);
    }
    setAttribValue(name, value) {
        this.addAttribute(name, value);
    }
    // addNumericVertexAttrib(name: string, size: number, defaultValue: NumericAttribValue) {
    // 	// if (defaultValue == null) {
    // 	// 	defaultValue = CoreAttribute.default_value(size);
    // 	// }
    // 	// this.coreGeometry()?.addNumericAttrib(name, size, defaultValue);
    // }
    static _attributesDictionary(object) {
        return object.userData[ATTRIBUTES] || this._createAttributesDictionaryIfNone(object);
    }
    static attributesDictionaryEntry(object, attribName, defaultValue) {
        const dict = object.userData[ATTRIBUTES] || this._createAttributesDictionaryIfNone(object);
        let entry = dict[attribName];
        if (entry == null && defaultValue != null) {
            entry = defaultValue;
            dict[attribName] = entry;
        }
        return entry;
    }
    // static attributesPreviousValuesDictionary<T extends CoreObjectType>(object: ObjectContent<T>) {
    // 	return (
    // 		(object.userData[ATTRIBUTES_PREVIOUS_VALUES] as AttributeDictionary) ||
    // 		this._createAttributesPreviousValuesDictionaryIfNone(object)
    // 	);
    // }
    static _createAttributesDictionaryIfNone(object) {
        if (!object.userData[ATTRIBUTES]) {
            return (object.userData[ATTRIBUTES] = {});
        }
    }
    // private static _createAttributesPreviousValuesDictionaryIfNone<T extends CoreObjectType>(object: ObjectContent<T>) {
    // 	if (!object.userData[ATTRIBUTES_PREVIOUS_VALUES]) {
    // 		return (object.userData[ATTRIBUTES_PREVIOUS_VALUES] = {});
    // 	}
    // }
    _attributesDictionary() {
        return this.constructor._attributesDictionary(this._object);
    }
    static attributes(object) {
        return this._attributesDictionary(object);
    }
    attributes() {
        if (!this._object) {
            return;
        }
        return this.constructor.attributes(this._object);
    }
    attributeNames() {
        return this.attribNames();
    }
    static attribNames(object) {
        return Object.keys(this._attributesDictionary(object));
    }
    attribNames() {
        return this.constructor.attribNames(this._object);
    }
    // static objectsAttribNames<T extends CoreObjectType>(objects: ObjectContent<T>[]) {
    // 	const names: Set<string> = new Set();
    // 	for (let object of objects) {
    // 		const objectAttriNames = this.attribNames(object);
    // 		for (let attribName of objectAttriNames) {
    // 			names.add(attribName);
    // 		}
    // 	}
    // 	return SetUtils.toArray(names);
    // }
    static hasAttribute(object, attribName) {
        return attribName in this._attributesDictionary(object);
    }
    hasAttribute(attribName) {
        return this.constructor.hasAttribute(this._object, attribName);
    }
    static attributeNames(object) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return [];
        }
        return Object.keys(attributes);
    }
    static attributeNamesMatchingMask(object, masksString) {
        return Attribute/* CoreAttribute.attribNamesMatchingMask */.n0.attribNamesMatchingMask(masksString, this.attributeNames(object));
    }
    renameAttribute(oldName, newName) {
        return this.constructor.renameAttribute(this._object, oldName, newName);
    }
    static renameAttribute(object, oldName, newName) {
        const currentValue = this.attribValue(object, oldName);
        if (currentValue != null) {
            this.addAttribute(object, newName, currentValue);
            this.deleteAttribute(object, oldName);
        }
        else {
            console.warn(`attribute ${oldName} not found`);
        }
    }
    deleteAttribute(name) {
        delete this._attributesDictionary()[name];
    }
    static deleteAttribute(object, attribName) {
        delete this._attributesDictionary(object)[attribName];
    }
    // static position:PositionStaticMethod<CoreObjectType> = DEFAULT_POSITION_STATIC_METHOD
    static position(object, target) {
        target.copy(ORIGIN);
    }
    position(target) {
        this.constructor.position(this._object, target);
        return target;
    }
    static boundingBox(object, target) {
        target.makeEmpty();
    }
    boundingBox(target) {
        this.constructor.boundingBox(this._object, target);
    }
    static geometryBoundingBox(object, target) {
        this.boundingBox(object, target);
    }
    geometryBoundingBox(target) {
        this.constructor.geometryBoundingBox(this._object, target);
    }
    static boundingSphere(object, target) {
        target.makeEmpty();
    }
    boundingSphere(target) {
        this.constructor.boundingSphere(this._object, target);
    }
    static geometryBoundingSphere(object, target) {
        target.makeEmpty();
    }
    geometryBoundingSphere(target) {
        this.constructor.geometryBoundingSphere(this._object, target);
    }
    static attribValue(object, attribName, index = 0, target) {
        const _attribFromProperty = () => {
            if (attribName == PropertyName.NAME) {
                return object.name;
            }
            if (attribName == PropertyName.POSITION) {
                const _target = target instanceof three_module.Vector3 ? target : tmpVec3;
                this.position(object, _target);
                _target.toArray(tmpN3);
                return tmpN3;
            }
        };
        if (attribName === Attribute/* Attribute.OBJECT_INDEX */.ah.OBJECT_INDEX) {
            return index;
        }
        if (attribName === Attribute/* Attribute.OBJECT_NAME */.ah.OBJECT_NAME) {
            return object.name;
        }
        if (object.userData) {
            const val = this.attributesDictionaryEntry(object, attribName);
            // const val = attribRef.value; //dict[attribName];
            if (val == null) {
                return _attribFromProperty();
            }
            else {
                // const val = _ref.value;
                if (Type/* CoreType.isVector */.MR.isVector(val) && target) {
                    if (val instanceof three_module.Vector2 && target instanceof three_module.Vector2) {
                        return target.copy(val);
                    }
                    if (val instanceof three_module.Vector3 && target instanceof three_module.Vector3) {
                        return target.copy(val);
                    }
                    if (val instanceof three_module.Vector4 && target instanceof three_module.Vector4) {
                        return target.copy(val);
                    }
                }
                if (Type/* CoreType.isColor */.MR.isColor(val) && target) {
                    if (val instanceof three_module.Color && target instanceof three_module.Color) {
                        return target.copy(val);
                    }
                }
                if (Type/* CoreType.isArray */.MR.isArray(val) && target) {
                    target.fromArray(val);
                    return target;
                }
            }
            // console.log(attribName, _ref, _ref.value);
            return val; //_ref.value;
        }
        return _attribFromProperty();
    }
    // static previousAttribValue<T extends CoreObjectType>(
    // 	object: ObjectContent<T>,
    // 	attribName: string
    // ): AttribValue | undefined {
    // 	const dict = this.attributesPreviousValuesDictionary(object);
    // 	return dict[attribName];
    // }
    static stringAttribValue(object, attribName, index = 0) {
        const str = this.attribValue(object, attribName, index);
        if (str != null) {
            if (Type/* CoreType.isString */.MR.isString(str)) {
                return str;
            }
            else {
                return `${str}`;
            }
        }
        return null;
    }
    // static makeAttribReactive<V extends AttribValue, T extends CoreObjectType>(
    // 	object: ObjectContent<T>,
    // 	attribName: string,
    // 	callback: AttributeReactiveCallback<V>
    // ) {
    // 	const attributesDict = this.attributesDictionary(object);
    // 	// const attributesPreviousValuesDict = this.attributesPreviousValuesDictionary(object);
    // 	const currentValue = attributesDict[attribName];
    // 	if (currentValue instanceof Vector4) {
    // 		return makeAttribReactiveVector4(
    // 			object,
    // 			attribName,
    // 			(<unknown>callback) as AttributeReactiveCallback<Vector4>
    // 		);
    // 	}
    // 	if (currentValue instanceof Vector3) {
    // 		return makeAttribReactiveVector3(
    // 			object,
    // 			attribName,
    // 			(<unknown>callback) as AttributeReactiveCallback<Vector3>
    // 		);
    // 	}
    // 	if (currentValue instanceof Vector2) {
    // 		return makeAttribReactiveVector2(
    // 			object,
    // 			attribName,
    // 			(<unknown>callback) as AttributeReactiveCallback<Vector2>
    // 		);
    // 	}
    // 	return makeAttribReactiveSimple(
    // 		object,
    // 		attribName,
    // 		(<unknown>callback) as AttributeReactiveCallback<string | number>
    // 	);
    // 	// // create a dummy val in case there is no attribute yet
    // 	// if (attributesDict[attribName] == null) {
    // 	// 	attributesDict[attribName] = 0;
    // 	// }
    // 	// const proxy: AttributeProxy<V> = {
    // 	// 	value: attributesDict[attribName] as V,
    // 	// 	previousValue: attributesDict[attribName] as V,
    // 	// };
    // 	// Object.defineProperties(attributesDict, {
    // 	// 	[attribName]: {
    // 	// 		get: function () {
    // 	// 			return proxy.value;
    // 	// 		},
    // 	// 		set: function (x) {
    // 	// 			if (x != proxy.value) {
    // 	// 				proxy.previousValue = proxy.value;
    // 	// 				proxy.value = x;
    // 	// 				callback(proxy.value, proxy.previousValue);
    // 	// 			}
    // 	// 			return proxy.value;
    // 	// 		},
    // 	// 		configurable: true,
    // 	// 	},
    // 	// });
    // 	// Object.defineProperties(attributesPreviousValuesDict, {
    // 	// 	[attribName]: {
    // 	// 		get: function () {
    // 	// 			return proxy.previousValue;
    // 	// 		},
    // 	// 		configurable: true,
    // 	// 	},
    // 	// });
    // }
    attribValue(attribName, target) {
        return this.constructor.attribValue(this._object, attribName, this._index, target);
    }
    stringAttribValue(name) {
        return this.constructor.stringAttribValue(this._object, name, this._index);
    }
    name() {
        return this.attribValue(PropertyName.NAME);
    }
    humanType() {
        return this._object.type;
    }
    attribTypes() {
        const h = {};
        for (const attrib_name of this.attribNames()) {
            const type = this.attribType(attrib_name);
            if (type != null) {
                h[attrib_name] = type;
            }
        }
        return h;
    }
    static attribType(object, attribName) {
        const val = this.attribValue(object, attribName);
        if (Type/* CoreType.isString */.MR.isString(val)) {
            return Constant/* AttribType.STRING */.rp.STRING;
        }
        else {
            return Constant/* AttribType.NUMERIC */.rp.NUMERIC;
        }
    }
    attribType(attribName) {
        return this.constructor.attribType(this._object, attribName);
    }
    attribSizes() {
        const h = {};
        const attribNames = this.attribNames();
        for (const attribName of attribNames) {
            const size = this.attribSize(attribName);
            if (size != null) {
                h[attribName] = size;
            }
        }
        return h;
    }
    static attribSize(object, attribName) {
        const val = this.attribValue(object, attribName);
        if (val == null) {
            return null;
        }
        return Attribute/* CoreAttribute.attribSizeFromValue */.n0.attribSizeFromValue(val);
    }
    attribSize(attribName) {
        return this.constructor.attribSize(this._object, attribName);
    }
    static objectData(object) {
        return (0,BaseCoreObjectUtils/* objectData */.Sq)(object);
    }
    clone() {
        const clonedObject = this.constructor.clone(this._object);
        const cloned = new this.constructor(clonedObject, this._index);
        return cloned;
    }
    static clone(srcObject) {
        return srcObject.clone();
    }
    static applyMatrix(object, matrix, transformTargetType, transformSpace, transformMode) {
        console.warn('applyMatrix.override required', this);
    }
    static mergeCompact(options) {
        console.warn('mergeCompact.override required', this);
    }
    //
    //
    // ENTITY GROUPS
    //
    //
    groupCollection() {
        return new EntityGroupCollection/* EntityGroupCollection */.Wx(this._object);
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static relatedVertexIds(object, objectIndex, target, traversedRelatedEntityData) {
        const ids = traversedRelatedEntityData
            ? traversedRelatedEntityData[Constant/* AttribClass.PRIMITIVE */.io.PRIMITIVE].ids
            : _relatedPrimitiveIds;
        this.relatedPrimitiveIds(object, objectIndex, ids, traversedRelatedEntityData);
        (0,Common/* uniqRelatedEntityIds */.ym)(ids, (primitiveId, relatedEntityIds) => {
            this.relatedPrimitiveClass(object).relatedVertexIds(object, primitiveId, relatedEntityIds);
        }, target);
    }
    static relatedPointIds(object, objectIndex, target, traversedRelatedEntityData) {
        const ids = traversedRelatedEntityData ? traversedRelatedEntityData[Constant/* AttribClass.VERTEX */.io.VERTEX].ids : _relatedVertexIds;
        this.relatedVertexIds(object, objectIndex, ids, traversedRelatedEntityData);
        (0,Common/* uniqRelatedEntityIds */.ym)(ids, (vertexId, relatedEntityIds) => {
            this.relatedVertexClass(object).relatedPointIds(object, vertexId, relatedEntityIds);
        }, target);
    }
    relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {
        switch (attribClass) {
            case Constant/* AttribClass.POINT */.io.POINT: {
                this.relatedPoints(target, traversedRelatedEntityData);
                return;
            }
            case Constant/* AttribClass.VERTEX */.io.VERTEX: {
                this.relatedVertices(target, traversedRelatedEntityData);
                return;
            }
            case Constant/* AttribClass.PRIMITIVE */.io.PRIMITIVE: {
                this.relatedPrimitives(target, traversedRelatedEntityData);
                return;
            }
            case Constant/* AttribClass.OBJECT */.io.OBJECT: {
                target.length = 1;
                target[0] = this;
                return;
            }
            case Constant/* AttribClass.CORE_GROUP */.io.CORE_GROUP: {
                target.length = 1;
                target[0] = coreGroup;
                return;
            }
        }
        Assert/* TypeAssert.unreachable */.f.unreachable(attribClass);
    }
    static relatedPointClass(object) {
        return this.relatedVertexClass(object).relatedPointClass(object);
    }
    static relatedVertexClass(object) {
        return this.relatedPrimitiveClass(object).relatedVertexClass(object);
    }
}


/***/ }),

/***/ 70965:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Cj": () => (/* binding */ coreObjectsAttribNames),
/* harmony export */   "Sq": () => (/* binding */ objectData),
/* harmony export */   "os": () => (/* binding */ coreObjectsAttribSizesByName),
/* harmony export */   "xd": () => (/* binding */ coreObjectAttributeTypesByName)
/* harmony export */ });
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37956);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(73303);
/* harmony import */ var _EntityGroupCollection__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(50155);
/* harmony import */ var _MapUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84354);
/* harmony import */ var _SetUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41899);





function objectData(object) {
    const childrenCount = (0,_ObjectContent__WEBPACK_IMPORTED_MODULE_0__/* .isObject3D */ .nK)(object) ? object.children.length : 0;
    const objectType = (0,_ObjectContent__WEBPACK_IMPORTED_MODULE_0__/* .isObject3D */ .nK)(object) ? (0,_Constant__WEBPACK_IMPORTED_MODULE_1__/* .objectTypeFromObject */ .c9)(object) : object.type;
    const groupData = _EntityGroupCollection__WEBPACK_IMPORTED_MODULE_2__/* .EntityGroupCollection.data */ .Wx.data(object);
    return {
        type: objectType,
        name: object.name,
        childrenCount,
        groupData,
        verticesCount: 0,
        pointsCount: 0,
        primitivesCount: 0,
        primitiveName: 'no name',
    };
}
function coreObjectsAttribSizesByName(coreObjects) {
    const _sizesByName = new Map();
    for (const coreObject of coreObjects) {
        const objectAttriNames = coreObject.attribNames();
        for (const attribName of objectAttriNames) {
            const attribSize = coreObject.attribSize(attribName);
            (0,_MapUtils__WEBPACK_IMPORTED_MODULE_3__/* .addToSetAtEntry */ .D)(_sizesByName, attribName, attribSize);
        }
    }
    const sizesByName = {};
    _sizesByName.forEach((attribSizes, attribName) => {
        sizesByName[attribName] = (0,_SetUtils__WEBPACK_IMPORTED_MODULE_4__/* .setToArray */ .T_)(attribSizes, []);
    });
    return sizesByName;
}
function coreObjectAttributeTypesByName(coreObjects) {
    const _typesByName = new Map();
    for (const coreObject of coreObjects) {
        const objectAttriNames = coreObject.attribNames();
        for (const attribName of objectAttriNames) {
            const attribType = coreObject.attribType(attribName);
            (0,_MapUtils__WEBPACK_IMPORTED_MODULE_3__/* .addToSetAtEntry */ .D)(_typesByName, attribName, attribType);
        }
    }
    const typesByName = {};
    _typesByName.forEach((attribTypes, attribName) => {
        typesByName[attribName] = (0,_SetUtils__WEBPACK_IMPORTED_MODULE_4__/* .setToArray */ .T_)(attribTypes, []);
    });
    return typesByName;
    // const core_object = this.firstCoreObject();
    // if (core_object) {
    // 	for (let name of core_object.attribNames()) {
    // 		types_by_name[name] = core_object.attribType(name);
    // 	}
    // }
    // return types_by_name;
}
function coreObjectsAttribNames(coreObjects) {
    const names = new Set();
    for (const coreObject of coreObjects) {
        const objectAttriNames = coreObject.attribNames();
        for (const attribName of objectAttriNames) {
            names.add(attribName);
        }
    }
    return (0,_SetUtils__WEBPACK_IMPORTED_MODULE_4__/* .setToArray */ .T_)(names, []);
}


/***/ }),

/***/ 87727:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => (/* binding */ CorePoint)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99477);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9832);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(48454);
/* harmony import */ var _CoreEntity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48658);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73303);
/* harmony import */ var _CoreObjectFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(44604);
/* harmony import */ var _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(53120);
/* harmony import */ var _utils_Common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81323);








const _relatedPrimitiveIds = [];
function _warnOverloadRequired(functionName) {
    console.warn(`CorePoint.${functionName} needs to be overloaded`);
}
class CorePoint extends _CoreEntity__WEBPACK_IMPORTED_MODULE_0__/* .CoreEntityWithObject */ .D {
    // protected _object?: ObjectContent<T>;
    // constructor(object?: ObjectContent<T>, index?: number) {
    // 	super(object, index);
    // 	this._object = object;
    // }
    builder() {
        return undefined;
    }
    static addAttribute(object, attribName, attribute) {
        _warnOverloadRequired('addAttribute');
    }
    static entitiesCount(object) {
        return 0;
    }
    static attributes(object) {
        _warnOverloadRequired('attributes');
        return;
    }
    attributes() {
        // if (!this._object) {
        // 	return;
        // }
        return this.constructor.attributes(this._object);
    }
    static attribute(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        return attributes[attribName];
    }
    attribute(attribName) {
        // if (!this._object) {
        // 	return;
        // }
        return this.constructor.attribute(this._object, attribName);
    }
    static attribSize(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return -1;
        }
        attribName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        return attributes[attribName].itemSize || 0;
    }
    attribSize(attribName) {
        // if (!this._object) {
        // 	return 0;
        // }
        return this.constructor.attribSize(this._object, attribName);
    }
    static hasAttribute(object, attribName) {
        const remappedName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        return this.attributes(object) ? this.attributes(object)[remappedName] != null : false;
    }
    hasAttribute(attribName) {
        // if (!this._object) {
        // 	return false;
        // }
        return this.constructor.hasAttribute(this._object, attribName);
    }
    //
    //
    // INDEXED ATTRIBUTES
    //
    //
    static userDataAttribs(object) {
        _warnOverloadRequired('userDataAttribs');
        return {};
    }
    userDataAttribs() {
        return this._object ? this.constructor.userDataAttribs(this._object) : {};
    }
    static userDataAttrib(object, attribName) {
        attribName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        return this.userDataAttribs(object)[attribName];
    }
    userDataAttrib(name) {
        name = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(name);
        return this.userDataAttribs()[name];
    }
    static attributeNames(object) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return [];
        }
        return Object.keys(attributes);
    }
    static attributeNamesMatchingMask(object, masksString) {
        return _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.attribNamesMatchingMask */ .n0.attribNamesMatchingMask(masksString, this.attributeNames(object));
    }
    static indexedAttributeNames(object) {
        return object ? Object.keys(this.userDataAttribs(object) || {}) : [];
    }
    indexedAttributeNames() {
        return this._object ? this.constructor.indexedAttributeNames(this._object) : [];
        // return Object.keys(this.userDataAttribs() || {});
    }
    static isAttribIndexed(object, attribName) {
        attribName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        return this.userDataAttrib(object, attribName) != null;
    }
    isAttribIndexed(name) {
        name = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(name);
        return this.userDataAttrib(name) != null;
    }
    static setIndexedAttributeValues(object, attribName, values) {
        this.userDataAttribs(object)[attribName] = values;
    }
    setIndexedAttributeValues(attribName, values) {
        return this.constructor.setIndexedAttributeValues(this._object, attribName, values);
    }
    static setIndexedAttribute(object, attribName, values, indices) {
        _warnOverloadRequired('setIndexedAttribute');
    }
    setIndexedAttribute(attribName, values, indices) {
        return this.constructor.setIndexedAttribute(this._object, attribName, values, indices);
    }
    //
    static indexedAttribValue(object, index, attribName) {
        const valueIndex = this.attribValueIndex(object, index, attribName); //attrib.value()
        const values = this.userDataAttrib(object, attribName);
        return values ? values[valueIndex] : null;
    }
    indexedAttribValue(attribName) {
        return this.constructor.indexedAttribValue(this._object, this._index, attribName);
    }
    static stringAttribValue(object, index, attribName) {
        return this.indexedAttribValue(object, index, attribName);
    }
    stringAttribValue(attribName) {
        return this.indexedAttribValue(attribName);
    }
    static attribValueIndex(object, index, attribName) {
        _warnOverloadRequired('attribValueIndex');
        return 0;
    }
    attribValueIndex(attribName) {
        return this.constructor.attribValueIndex(this._object, this._index, attribName);
    }
    static attribType(object, attribName) {
        if (this.isAttribIndexed(object, attribName)) {
            return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.STRING */ .rp.STRING;
        }
        else {
            return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.NUMERIC */ .rp.NUMERIC;
        }
    }
    attribType(attribName) {
        return this.constructor.attribType(this._object, attribName);
    }
    isStringAttribute(attribName) {
        return this.attribType(attribName) == _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.STRING */ .rp.STRING;
    }
    setAttribIndex(attribName, newValueIndex) {
        // if (!this._geometry) {
        // 	return;
        // }
        const attribute = this.attribute(attribName);
        if (!attribute) {
            return;
        }
        const array = attribute.array;
        return (array[this._index] = newValueIndex);
    }
    //
    //
    //
    //
    //
    static renameAttribute(object, oldName, newName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        const attribute = this.attribute(object, oldName);
        if (!attribute) {
            return;
        }
        attributes[newName] = attribute;
        delete attributes[oldName];
    }
    static deleteAttribute(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        delete attributes[attribName];
    }
    //
    //
    //
    //
    //
    static attribValue(object, index, attribName, target) {
        if (attribName === _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.POINT_INDEX */ .ah.POINT_INDEX) {
            return index;
        }
        else {
            let componentName = null;
            let componentIndex = null;
            if (attribName[attribName.length - 2] === _Constant__WEBPACK_IMPORTED_MODULE_2__/* .DOT */ .HW) {
                componentName = attribName[attribName.length - 1];
                componentIndex = _Constant__WEBPACK_IMPORTED_MODULE_2__/* .COMPONENT_INDICES */ .h6[componentName];
                attribName = attribName.substring(0, attribName.length - 2);
            }
            const remapedName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
            const attrib = this.attribute(object, remapedName);
            if (attrib) {
                const { array } = attrib;
                if (this.isAttribIndexed(object, remapedName)) {
                    return this.indexedAttribValue(object, index, remapedName);
                }
                else {
                    const itemSize = attrib.itemSize;
                    const startIndex = index * itemSize;
                    if (componentIndex == null) {
                        switch (itemSize) {
                            case 1:
                                return array[startIndex];
                                break;
                            case 2:
                                target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector2();
                                target.fromArray(array, startIndex);
                                return target;
                                break;
                            case 3:
                                target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();
                                target.fromArray(array, startIndex);
                                return target;
                                break;
                            case 4:
                                target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector4();
                                target.fromArray(array, startIndex);
                                return target;
                                break;
                            default:
                                throw `size not valid (${itemSize})`;
                        }
                    }
                    else {
                        switch (itemSize) {
                            case 1:
                                return array[startIndex];
                                break;
                            default:
                                return array[startIndex + componentIndex];
                        }
                    }
                }
            }
            else {
                const attributesDict = this.attributes() || {};
                const attribNames = Object.keys(attributesDict);
                const message = `attrib ${attribName} not found. availables are: ${attribNames.join(',')}`;
                console.warn(message);
                throw message;
            }
        }
    }
    attribValue(attribName, target) {
        // if (!this._object) {
        // 	return 0;
        // }
        return this.constructor.attribValue(this._object, this._index, attribName, target);
    }
    attribValueNumber(attribName) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return 0;
        }
        return attrib.array[this._index];
    }
    attribValueVector2(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 2);
        return target;
    }
    attribValueVector3(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 3);
        return target;
    }
    attribValueVector4(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 4);
        return target;
    }
    position(target) {
        _warnOverloadRequired('position');
        return target;
    }
    setPosition(newPosition) {
        this.setAttribValueFromVector3(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.POSITION */ .ah.POSITION, newPosition);
    }
    normal(target) {
        _warnOverloadRequired('normal');
        return target;
    }
    setNormal(newNormal) {
        return this.setAttribValueFromVector3(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.NORMAL */ .ah.NORMAL, newNormal);
    }
    static computeNormals(object) {
        _warnOverloadRequired('computeNormals');
    }
    setAttribValue(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        const array = attrib.array;
        const attribSize = attrib.itemSize;
        if ((0,_Type__WEBPACK_IMPORTED_MODULE_4__/* .isArray */ .kJ)(value)) {
            for (let i = 0; i < attribSize; i++) {
                array[this._index * attribSize + i] = value[i];
            }
            return;
        }
        switch (attribSize) {
            case 1:
                array[this._index] = value;
                break;
            case 2:
                const v2 = value;
                const i2 = this._index * 2;
                array[i2 + 0] = v2.x;
                array[i2 + 1] = v2.y;
                break;
            case 3:
                const isColor = value.r != null;
                const i3 = this._index * 3;
                if (isColor) {
                    const col = value;
                    array[i3 + 0] = col.r;
                    array[i3 + 1] = col.g;
                    array[i3 + 2] = col.b;
                }
                else {
                    const v3 = value;
                    array[i3 + 0] = v3.x;
                    array[i3 + 1] = v3.y;
                    array[i3 + 2] = v3.z;
                }
                break;
            case 4:
                const v4 = value;
                const i4 = this._index * 4;
                array[i4 + 0] = v4.x;
                array[i4 + 1] = v4.y;
                array[i4 + 2] = v4.z;
                array[i4 + 3] = v4.w;
                break;
            default:
                console.warn(`CorePoint.setAttribValue does not yet allow attrib size ${attribSize}`);
                throw `attrib size ${attribSize} not implemented`;
        }
    }
    setAttribValueFromNumber(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        const array = attrib.array;
        array[this._index] = value;
    }
    setAttribValueFromVector2(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || this.isStringAttribute(attribName)) {
            return;
        }
        value.toArray(attrib.array, this._index * 2);
    }
    setAttribValueFromVector3(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || this.isStringAttribute(attribName)) {
            return;
        }
        value.toArray(attrib.array, this._index * 3);
    }
    setAttribValueFromVector4(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || this.isStringAttribute(attribName)) {
            return;
        }
        value.toArray(attrib.array, this._index * 4);
    }
    //
    static addAttributeFromAttribData(object, attribName, attribData) {
        switch (attribData.type()) {
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.STRING */ .rp.STRING:
                return console.log('TODO: to implement');
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.NUMERIC */ .rp.NUMERIC:
                return this.addNumericAttribute(object, attribName, attribData.size());
        }
    }
    static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {
        _warnOverloadRequired('addNumericAttribute');
    }
    //
    static markAttribAsNeedsUpdate(object, attribName) {
        _warnOverloadRequired('markAttribAsNeedsUpdate');
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static relatedPrimitiveIds(object, pointIndex, target, traversedRelatedEntityData) {
        const ids = traversedRelatedEntityData
            ? traversedRelatedEntityData[_Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.VERTEX */ .io.VERTEX].ids
            : _relatedPrimitiveIds;
        this.relatedVertexIds(object, pointIndex, ids);
        (0,_utils_Common__WEBPACK_IMPORTED_MODULE_5__/* .uniqRelatedEntityIds */ .ym)(ids, (vertexId, relatedEntityIds) => {
            this.relatedVertexClass(object).relatedPrimitiveIds(object, vertexId, relatedEntityIds);
        }, target);
    }
    static relatedPrimitiveClass(object) {
        return this.relatedVertexClass(object).relatedPrimitiveClass(object);
    }
    static relatedObjectClass(object) {
        return this.relatedPrimitiveClass(object).relatedObjectClass(object);
    }
    relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {
        switch (attribClass) {
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.POINT */ .io.POINT: {
                target.length = 1;
                target[0] = this;
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.VERTEX */ .io.VERTEX: {
                return this.relatedVertices(target, traversedRelatedEntityData);
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.PRIMITIVE */ .io.PRIMITIVE: {
                return this.relatedPrimitives(target, traversedRelatedEntityData);
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.OBJECT */ .io.OBJECT: {
                if (this._object) {
                    target.length = 1;
                    target[0] = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_6__/* .coreObjectInstanceFactory */ .$Z)(this._object);
                }
                else {
                    target.length = 0;
                }
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.CORE_GROUP */ .io.CORE_GROUP: {
                target.length = 1;
                target[0] = coreGroup;
                return;
            }
        }
        _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_7__/* .TypeAssert.unreachable */ .f.unreachable(attribClass);
    }
}


/***/ }),

/***/ 81669:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "En": () => (/* binding */ pointsCountFromObject),
/* harmony export */   "JL": () => (/* binding */ pointAttributeNames),
/* harmony export */   "LG": () => (/* binding */ hasPointAttribute),
/* harmony export */   "MN": () => (/* binding */ pointAttributeType),
/* harmony export */   "Nq": () => (/* binding */ pointsFromObjects),
/* harmony export */   "Qg": () => (/* binding */ pointAttributeSizes),
/* harmony export */   "WS": () => (/* binding */ pointsFromObjectFromGroup),
/* harmony export */   "fk": () => (/* binding */ pointAttributeSize),
/* harmony export */   "t4": () => (/* binding */ pointsFromCoreObjects),
/* harmony export */   "u_": () => (/* binding */ pointsFromObject)
/* harmony export */ });
/* unused harmony exports pointsFromCoreGroup, pointsAttribNamesFromCoreGroup, pointAttribSizesFromCoreGroup, pointAttribTypesFromCoreGroup, pointAttributeTypes */
/* harmony import */ var _ArrayUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69374);
/* harmony import */ var _String__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40354);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73303);
/* harmony import */ var _CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44604);




const _indices = [];
const _tmpPoints = [];
function pointsFromCoreGroup(coreGroup, target) {
    return pointsFromObjects(coreGroup.allObjects(), target);
}
function pointsFromCoreObjects(coreObjects, target) {
    target.length = 0;
    for (const coreObject of coreObjects) {
        pointsFromObject(coreObject.object(), _tmpPoints);
        (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayPushItems */ .L_)(_tmpPoints, target);
    }
    return target;
}
function pointsFromObjects(objects, target) {
    target.length = 0;
    for (const object of objects) {
        pointsFromObject(object, _tmpPoints);
        (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayPushItems */ .L_)(_tmpPoints, target);
    }
    return target;
}
function pointsAttribNamesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return pointAttributeNames(firstObject);
    }
    else {
        return [];
    }
}
function pointAttribSizesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return pointAttributeSizes(firstObject);
    }
    else {
        return {};
    }
}
function pointAttribTypesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return pointAttributeTypes(firstObject);
    }
    else {
        return {};
    }
}
function pointsCountFromObject(object) {
    const pointClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointClassFactory */ .E_)(object);
    return pointClass.entitiesCount(object);
}
function pointsFromObject(object, target) {
    const pointClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointClassFactory */ .E_)(object);
    const pointsCount = pointClass.entitiesCount(object);
    target.length = pointsCount;
    for (let i = 0; i < pointsCount; i++) {
        target[i] = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointInstanceFactory */ .BI)(object, i);
    }
    return target;
}
function pointsFromObjectFromGroup(object, group, target) {
    if (group) {
        _String__WEBPACK_IMPORTED_MODULE_2__/* .CoreString.indices */ .YE.indices(group, _indices);
        const points = pointsFromObject(object, _tmpPoints);
        const compactPoints = [];
        const selectedPoints = (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayCompact */ .k)(_indices.map((i) => points[i]), compactPoints);
        target.length = 0;
        (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .arrayPushItems */ .L_)(selectedPoints, target);
        return target;
    }
    else {
        return pointsFromObject(object, target);
    }
}
function hasPointAttribute(object, attribName) {
    const pointClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointClassFactory */ .E_)(object);
    const attributes = pointClass.attributes(object);
    if (!attributes) {
        return false;
    }
    return attribName in attributes;
}
function pointAttributeNames(object) {
    const pointClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointClassFactory */ .E_)(object);
    const attributes = pointClass.attributes(object);
    if (!attributes) {
        return [];
    }
    return Object.keys(attributes);
}
function pointAttributeSize(object, attribName) {
    const pointClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointClassFactory */ .E_)(object);
    const attributes = pointClass.attributes(object);
    if (!attributes) {
        return 0;
    }
    return attributes[attribName].itemSize;
}
function pointAttributeSizes(object) {
    const pointClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointClassFactory */ .E_)(object);
    const attributes = pointClass.attributes(object);
    if (!attributes) {
        return {};
    }
    const attribNames = Object.keys(attributes);
    const h = {};
    for (const attribName of attribNames) {
        h[attribName] = attributes[attribName].itemSize;
    }
    return h;
}
function pointAttributeType(object, attribName) {
    const pointClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_1__/* .corePointClassFactory */ .E_)(object);
    const attributes = pointClass.attributes(object);
    if (!attributes) {
        return _Constant__WEBPACK_IMPORTED_MODULE_3__/* .AttribType.NUMERIC */ .rp.NUMERIC;
    }
    return pointClass.attribType(object, attribName);
}
function pointAttributeTypes(object) {
    const pointClass = corePointClassFactory(object);
    const attributes = pointClass.attributes(object);
    if (!attributes) {
        return {};
    }
    const attribNames = Object.keys(attributes);
    const h = {};
    for (const attribName of attribNames) {
        h[attribName] = pointClass.attribType(object, attribName);
    }
    return h;
}


/***/ }),

/***/ 19760:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": () => (/* binding */ CorePrimitive)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99477);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9832);
/* harmony import */ var _CoreEntity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48658);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(48454);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73303);
/* harmony import */ var _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(53120);
/* harmony import */ var _utils_Common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81323);







function _warnOverloadRequired(functionName) {
    console.warn(`CorePrimitive.${functionName} needs to be overloaded`);
}
const _ids = [];
class CorePrimitive extends _CoreEntity__WEBPACK_IMPORTED_MODULE_0__/* .CoreEntityWithObject */ .D {
    builder() {
        return undefined;
    }
    static entitiesCount(object) {
        return 0;
    }
    static addAttribute(object, attribName, attribute) {
        _warnOverloadRequired('addAttribute');
    }
    static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {
        _warnOverloadRequired('addNumericAttribute');
    }
    static attributes(object) {
        _warnOverloadRequired('attributes');
        return;
    }
    attributes() {
        if (!this._object) {
            return;
        }
        return this.constructor.attributes(this._object);
    }
    static attribute(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        return attributes[attribName];
    }
    attribute(attribName) {
        if (!this._object) {
            return;
        }
        return this.constructor.attribute(this._object, attribName);
    }
    static renameAttribute(object, oldName, newName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        const attribute = this.attribute(object, oldName);
        if (!attribute) {
            return;
        }
        attributes[newName] = attribute;
        delete attributes[oldName];
    }
    static deleteAttribute(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        delete attributes[attribName];
    }
    static attribSize(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return -1;
        }
        attribName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        return attributes[attribName].itemSize || 0;
    }
    attribSize(attribName) {
        if (!this._object) {
            return 0;
        }
        return this.constructor.attribSize(this._object, attribName);
    }
    static hasAttribute(object, attribName) {
        const remappedName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        return this.attributes(object) ? this.attributes(object)[remappedName] != null : false;
    }
    hasAttribute(attribName) {
        if (!this._object) {
            return false;
        }
        return this.constructor.hasAttribute(this._object, attribName);
    }
    static attributeNames(object) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return [];
        }
        return Object.keys(attributes);
    }
    static attributeNamesMatchingMask(object, masksString) {
        return _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.attribNamesMatchingMask */ .n0.attribNamesMatchingMask(masksString, this.attributeNames(object));
    }
    static attribValue(object, index, attribName, target) {
        if (attribName === _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.PRIMITIVE_INDEX */ .ah.PRIMITIVE_INDEX) {
            return index;
        }
        let componentName = null;
        let componentIndex = null;
        if (attribName[attribName.length - 2] === _Constant__WEBPACK_IMPORTED_MODULE_2__/* .DOT */ .HW) {
            componentName = attribName[attribName.length - 1];
            componentIndex = _Constant__WEBPACK_IMPORTED_MODULE_2__/* .COMPONENT_INDICES */ .h6[componentName];
            attribName = attribName.substring(0, attribName.length - 2);
        }
        const remapedName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        if (remapedName == _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.POSITION */ .ah.POSITION) {
            return this.position(object, index, target);
        }
        if (remapedName == _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.NORMAL */ .ah.NORMAL) {
            return this.normal(object, index, target);
        }
        const attrib = this.attribute(object, remapedName);
        if (attrib) {
            const { array } = attrib;
            const itemSize = attrib.itemSize;
            const startIndex = index * itemSize;
            if (componentIndex == null) {
                switch (itemSize) {
                    case 1:
                        return array[startIndex];
                        break;
                    case 2:
                        target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector2();
                        target.fromArray(array, startIndex);
                        return target;
                        break;
                    case 3:
                        target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();
                        target.fromArray(array, startIndex);
                        return target;
                        break;
                    case 4:
                        target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector4();
                        target.fromArray(array, startIndex);
                        return target;
                        break;
                    default:
                        throw `size not valid (${itemSize})`;
                }
            }
            else {
                switch (itemSize) {
                    case 1:
                        return array[startIndex];
                        break;
                    default:
                        return array[startIndex + componentIndex];
                }
            }
            // }
        }
        else {
            const attributesDict = this.attributes(object) || {};
            const attribNames = Object.keys(attributesDict);
            const message = `attrib ${attribName} not found. availables are: ${attribNames.join(',')}`;
            console.warn(message);
            throw message;
        }
    }
    attribValue(attribName, target) {
        if (!this._object) {
            return 0;
        }
        return this.constructor.attribValue(this._object, this._index, attribName, target);
    }
    attribValueNumber(attribName) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return 0;
        }
        return attrib.array[this._index];
    }
    attribValueVector2(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 2);
        return target;
    }
    attribValueVector3(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 3);
        return target;
    }
    attribValueVector4(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 4);
        return target;
    }
    static attribType(object, attribName) {
        const attribute = object ? this.attribute(object, attribName) : null;
        if (attribute && (attribute === null || attribute === void 0 ? void 0 : attribute.isString) == true) {
            return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.STRING */ .rp.STRING;
        }
        else {
            return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.NUMERIC */ .rp.NUMERIC;
        }
    }
    attribType(attribName) {
        return this.constructor.attribType(this._object, attribName);
    }
    static stringAttribValue(object, index, attribName) {
        return this.attribValue(object, index, attribName);
    }
    stringAttribValue(attribName) {
        return this.attribValue(attribName);
    }
    // setPosition(newPosition: Vector3) {
    // 	this.setAttribValueFromVector3(Attribute.POSITION, newPosition);
    // }
    // setNormal(newNormal: Vector3) {
    // 	return this.setAttribValueFromVector3(Attribute.NORMAL, newNormal);
    // }
    static position(object, primitiveIndex, target) {
        _warnOverloadRequired('position');
        return target;
    }
    static normal(object, primitiveIndex, target) {
        _warnOverloadRequired('normal');
        return target;
    }
    static computeVertexNormalsIfAttributeVersionChanged(object) {
        _warnOverloadRequired('computeVertexNormalsIfAttributeVersionChanged');
    }
    setAttribValue(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            console.warn(`no attribute ${attribName}`);
            return;
        }
        const array = attrib.array;
        const attribSize = attrib.itemSize;
        if (_Type__WEBPACK_IMPORTED_MODULE_4__/* .CoreType.isArray */ .MR.isArray(value)) {
            for (let i = 0; i < attribSize; i++) {
                array[this._index * attribSize + i] = value[i];
            }
            return;
        }
        switch (attribSize) {
            case 1:
                array[this._index] = value;
                break;
            case 2:
                const v2 = value;
                const i2 = this._index * 2;
                array[i2 + 0] = v2.x;
                array[i2 + 1] = v2.y;
                break;
            case 3:
                const isColor = value.r != null;
                const i3 = this._index * 3;
                if (isColor) {
                    const col = value;
                    array[i3 + 0] = col.r;
                    array[i3 + 1] = col.g;
                    array[i3 + 2] = col.b;
                }
                else {
                    const v3 = value;
                    array[i3 + 0] = v3.x;
                    array[i3 + 1] = v3.y;
                    array[i3 + 2] = v3.z;
                }
                break;
            case 4:
                const v4 = value;
                const i4 = this._index * 4;
                array[i4 + 0] = v4.x;
                array[i4 + 1] = v4.y;
                array[i4 + 2] = v4.z;
                array[i4 + 3] = v4.w;
                break;
            default:
                console.warn(`CorePrimitive.setAttribValue does not yet allow attribSize ${attribSize}`);
                throw `attrib size ${attribSize} not implemented`;
        }
    }
    setAttribValueFromNumber(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        const array = attrib.array;
        array[this._index] = value;
    }
    setAttribValueFromVector2(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || attrib.isString == true) {
            return;
        }
        value.toArray(attrib.array, this._index * 2);
    }
    setAttribValueFromVector3(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || attrib.isString == true) {
            return;
        }
        value.toArray(attrib.array, this._index * 3);
    }
    setAttribValueFromVector4(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || attrib.isString == true) {
            return;
        }
        value.toArray(attrib.array, this._index * 4);
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static relatedPointIds(object, pointIndex, target, traversedRelatedEntityData) {
        const ids = traversedRelatedEntityData ? traversedRelatedEntityData[_Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.VERTEX */ .io.VERTEX].ids : _ids;
        this.relatedVertexIds(object, pointIndex, ids);
        (0,_utils_Common__WEBPACK_IMPORTED_MODULE_5__/* .uniqRelatedEntityIds */ .ym)(ids, (vertexId, relatedEntityIds) => {
            this.relatedVertexClass(object).relatedPointIds(object, vertexId, relatedEntityIds);
        }, target);
    }
    static relatedPointClass(object) {
        return this.relatedVertexClass(object).relatedPointClass(object);
    }
    relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {
        switch (attribClass) {
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.POINT */ .io.POINT: {
                this.relatedPoints(target, traversedRelatedEntityData);
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.VERTEX */ .io.VERTEX: {
                this.relatedVertices(target, traversedRelatedEntityData);
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.PRIMITIVE */ .io.PRIMITIVE: {
                target.length = 1;
                target[0] = this;
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.OBJECT */ .io.OBJECT: {
                this.relatedObjects(target, traversedRelatedEntityData);
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.CORE_GROUP */ .io.CORE_GROUP: {
                target.length = 1;
                target[0] = coreGroup;
                return;
            }
        }
        _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_6__/* .TypeAssert.unreachable */ .f.unreachable(attribClass);
    }
    static graph(object) {
        console.warn('CorePrimitive.graph needs to be overriden');
        return undefined;
    }
}


/***/ }),

/***/ 99328:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "KL": () => (/* binding */ primitivesCountFromObject),
/* harmony export */   "Ki": () => (/* binding */ primitivesFromObjectFromGroup),
/* harmony export */   "Lp": () => (/* binding */ primitivesFromObject)
/* harmony export */ });
/* unused harmony exports primitives, primitiveAttribNamesFromCoreGroup, primitiveAttribSizesFromCoreGroup, primitiveAttribTypesFromCoreGroup, primitiveAttributeNames, primitiveAttributeSizes, primitiveAttributeTypes */
/* harmony import */ var _String__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40354);
/* harmony import */ var _CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44604);




const _indices = [];
const _tmpPrimitives = [];
function primitives(coreGroup, target) {
    const allObjects = coreGroup.allObjects();
    target.length = 0;
    for (const object of allObjects) {
        primitivesFromObject(object, _tmpPrimitives);
        arrayPushItems(_tmpPrimitives, target);
    }
    return target;
    // return coreGroup
    // 	.allCoreObjects()
    // 	.map((o) => primitivesFromObject(o.object()))
    // 	.flat();
}
function primitiveAttribNamesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return primitiveAttributeNames(firstObject);
    }
    else {
        return [];
    }
}
function primitiveAttribSizesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return primitiveAttributeSizes(firstObject);
    }
    else {
        return {};
    }
}
function primitiveAttribTypesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return primitiveAttributeTypes(firstObject);
    }
    else {
        return {};
    }
}
function primitivesCountFromObject(object) {
    const primitiveClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__/* .corePrimitiveClassFactory */ .um)(object);
    return primitiveClass.entitiesCount(object);
}
function primitivesFromObject(object, target) {
    const primitiveClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__/* .corePrimitiveClassFactory */ .um)(object);
    const primitivesCount = primitiveClass.entitiesCount(object);
    target.length = primitivesCount;
    for (let i = 0; i < primitivesCount; i++) {
        target[i] = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__/* .corePrimitiveInstanceFactory */ .mu)(object, i);
    }
    return target;
}
function primitivesFromObjectFromGroup(object, group, target) {
    if (group) {
        (0,_String__WEBPACK_IMPORTED_MODULE_1__/* .stringToIndices */ .oz)(group, _indices);
        primitivesFromObject(object, _tmpPrimitives);
        target.length = 0;
        for (const index of _indices) {
            const primitive = _tmpPrimitives[index];
            if (primitive) {
                target.push(primitive);
            }
        }
        return target;
    }
    else {
        return primitivesFromObject(object, target);
    }
}
function primitiveAttributeNames(object) {
    const primitiveClass = corePrimitiveClassFactory(object);
    const attributes = primitiveClass.attributes(object);
    if (!attributes) {
        return [];
    }
    return Object.keys(attributes);
}
function primitiveAttributeSizes(object) {
    const primitiveClass = corePrimitiveClassFactory(object);
    const attributes = primitiveClass.attributes(object);
    if (!attributes) {
        return {};
    }
    const attribNames = Object.keys(attributes);
    const h = {};
    for (const attribName of attribNames) {
        h[attribName] = attributes[attribName].itemSize;
    }
    return h;
}
function primitiveAttributeTypes(object) {
    const primitiveClass = corePrimitiveClassFactory(object);
    const attributes = primitiveClass.attributes(object);
    if (!attributes) {
        return {};
    }
    const attribNames = Object.keys(attributes);
    const h = {};
    for (const attribName of attribNames) {
        h[attribName] = attributes[attribName].isString == true ? AttribType.STRING : AttribType.NUMERIC;
    }
    return h;
}


/***/ }),

/***/ 81323:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L8": () => (/* binding */ attribValueNonPrimitive),
/* harmony export */   "Ug": () => (/* binding */ copyAttribValue),
/* harmony export */   "ex": () => (/* binding */ attributeNumericValues),
/* harmony export */   "k0": () => (/* binding */ uniqRelatedEntities),
/* harmony export */   "ym": () => (/* binding */ uniqRelatedEntityIds),
/* harmony export */   "zR": () => (/* binding */ cloneAttribValue)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48454);


function uniqRelatedEntities(entities, callback, target) {
    target.length = 0;
    const entityByIndex = new Map();
    for (const entity of entities) {
        const relatedEntities = callback(entity);
        for (const relatedEntity of relatedEntities) {
            let newEntity = entityByIndex.get(relatedEntity.index());
            if (!newEntity) {
                newEntity = relatedEntity;
                entityByIndex.set(newEntity.index(), newEntity);
            }
        }
    }
    entityByIndex.forEach((entity) => {
        target.push(entity);
    });
}
const _relatedEntityIds = [];
const _entityIndices = new Set();
function uniqRelatedEntityIds(entityIds, callback, target) {
    target.length = 0;
    _entityIndices.clear();
    for (const entityId of entityIds) {
        callback(entityId, _relatedEntityIds);
        for (const _relatedEntityId of _relatedEntityIds) {
            _entityIndices.add(_relatedEntityId);
        }
    }
    _entityIndices.forEach((entityId) => {
        target.push(entityId);
    });
}
function attribValueNonPrimitive(src) {
    return src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Color || src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector2 || src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector3 || src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector4;
}
function copyAttribValue(src, target) {
    if (target instanceof three__WEBPACK_IMPORTED_MODULE_0__.Color && src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Color) {
        target.copy(src);
    }
    if (target instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector2 && src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector2) {
        target.copy(src);
    }
    if (target instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector3 && src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector3) {
        target.copy(src);
    }
    if (target instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector4 && src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector4) {
        target.copy(src);
    }
}
function cloneAttribValue(src) {
    if (src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Color) {
        return src.clone();
    }
    if (src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector2) {
        return src.clone();
    }
    if (src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector3) {
        return src.clone();
    }
    if (src instanceof three__WEBPACK_IMPORTED_MODULE_0__.Vector4) {
        return src.clone();
    }
}
function attributeNumericValues(object, entitiesCountFunction, attribSize = 1, defaultValue = 0, target) {
    target.values.length = 0;
    const values = target.values;
    const entitiesCount = entitiesCountFunction(object);
    if ((0,_Type__WEBPACK_IMPORTED_MODULE_1__/* .isNumber */ .hj)(defaultValue)) {
        // adding number
        for (let i = 0; i < entitiesCount; i++) {
            for (let j = 0; j < attribSize; j++) {
                values.push(defaultValue);
            }
        }
        target.attributeAdded = true;
    }
    else {
        if (attribSize > 1) {
            if ((0,_Type__WEBPACK_IMPORTED_MODULE_1__/* .isArray */ .kJ)(defaultValue)) {
                // adding array
                for (let i = 0; i < entitiesCount; i++) {
                    for (let j = 0; j < attribSize; j++) {
                        values.push(defaultValue[j]);
                    }
                }
                target.attributeAdded = true;
            }
            else {
                // adding Vector2
                const vec2 = defaultValue;
                if (attribSize == 2 && vec2.x != null && vec2.y != null) {
                    for (let i = 0; i < entitiesCount; i++) {
                        values.push(vec2.x);
                        values.push(vec2.y);
                    }
                    target.attributeAdded = true;
                }
                // adding Vector3
                const vec3 = defaultValue;
                if (attribSize == 3 && vec3.x != null && vec3.y != null && vec3.z != null) {
                    for (let i = 0; i < entitiesCount; i++) {
                        values.push(vec3.x);
                        values.push(vec3.y);
                        values.push(vec3.z);
                    }
                    target.attributeAdded = true;
                }
                // adding Color
                const col = defaultValue;
                if (attribSize == 3 && col.r != null && col.g != null && col.b != null) {
                    for (let i = 0; i < entitiesCount; i++) {
                        values.push(col.r);
                        values.push(col.g);
                        values.push(col.b);
                    }
                    target.attributeAdded = true;
                }
                // adding Vector4
                const vec4 = defaultValue;
                if (attribSize == 4 && vec4.x != null && vec4.y != null && vec4.z != null && vec4.w != null) {
                    for (let i = 0; i < entitiesCount; i++) {
                        values.push(vec4.x);
                        values.push(vec4.y);
                        values.push(vec4.z);
                        values.push(vec4.w);
                    }
                    target.attributeAdded = true;
                }
            }
        }
    }
}


/***/ }),

/***/ 38080:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": () => (/* binding */ CoreVertex)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99477);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9832);
/* harmony import */ var _CoreEntity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48658);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(48454);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73303);
/* harmony import */ var _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53120);






function _warnOverloadRequired(functionName) {
    console.warn(`CoreVertex.${functionName} needs to be overloaded`);
}
class CoreVertex extends _CoreEntity__WEBPACK_IMPORTED_MODULE_0__/* .CoreEntityWithObject */ .D {
    builder() {
        return undefined;
    }
    static addAttribute(object, attribName, attribute) {
        _warnOverloadRequired('addAttribute');
    }
    static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {
        _warnOverloadRequired('addNumericAttribute');
    }
    static entitiesCount(object) {
        return 0;
    }
    static attributes(object) {
        _warnOverloadRequired('attributes');
        return;
    }
    attributes() {
        return this.constructor.attributes(this._object);
    }
    static attribute(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        return attributes[attribName];
    }
    attribute(attribName) {
        return this.constructor.attribute(this._object, attribName);
    }
    static indexAttribute(object) {
        _warnOverloadRequired('indexAttribute');
        return;
    }
    static setIndexAttribute(object, index) {
        console.warn('CoreVertex.setIndexAttribute needs to be overloaded');
        return;
    }
    static renameAttribute(object, oldName, newName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        const attribute = this.attribute(object, oldName);
        if (!attribute) {
            return;
        }
        attributes[newName] = attribute;
        delete attributes[oldName];
    }
    static deleteAttribute(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        delete attributes[attribName];
    }
    static attribSize(object, attribName) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return -1;
        }
        attribName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
        return attributes[attribName].itemSize || 0;
    }
    attribSize(attribName) {
        return this.constructor.attribSize(this._object, attribName);
    }
    static hasAttribute(object, attribName) {
        return this.attribute(object, attribName) != null;
    }
    hasAttribute(attribName) {
        return this.constructor.hasAttribute(this._object, attribName);
    }
    static attributeNames(object) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return [];
        }
        return Object.keys(attributes);
    }
    static attributeNamesMatchingMask(object, masksString) {
        return _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.attribNamesMatchingMask */ .n0.attribNamesMatchingMask(masksString, this.attributeNames(object));
    }
    static attribValue(object, index, attribName, target) {
        if (attribName === _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.VERTEX_INDEX */ .ah.VERTEX_INDEX) {
            return index;
        }
        else {
            let componentName = null;
            let componentIndex = null;
            if (attribName[attribName.length - 2] === _Constant__WEBPACK_IMPORTED_MODULE_2__/* .DOT */ .HW) {
                componentName = attribName[attribName.length - 1];
                componentIndex = _Constant__WEBPACK_IMPORTED_MODULE_2__/* .COMPONENT_INDICES */ .h6[componentName];
                attribName = attribName.substring(0, attribName.length - 2);
            }
            const remapedName = _Attribute__WEBPACK_IMPORTED_MODULE_1__/* .CoreAttribute.remapName */ .n0.remapName(attribName);
            const attrib = this.attribute(object, remapedName);
            if (attrib) {
                const { array } = attrib;
                const itemSize = attrib.itemSize;
                const startIndex = index * itemSize;
                if (componentIndex == null) {
                    switch (itemSize) {
                        case 1:
                            return array[startIndex];
                            break;
                        case 2:
                            target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector2();
                            target.fromArray(array, startIndex);
                            return target;
                            break;
                        case 3:
                            target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();
                            target.fromArray(array, startIndex);
                            return target;
                            break;
                        case 4:
                            target = target || new three__WEBPACK_IMPORTED_MODULE_3__.Vector4();
                            target.fromArray(array, startIndex);
                            return target;
                            break;
                        default:
                            throw `size not valid (${itemSize})`;
                    }
                }
                else {
                    switch (itemSize) {
                        case 1:
                            return array[startIndex];
                            break;
                        default:
                            return array[startIndex + componentIndex];
                    }
                }
                // }
            }
            else {
                const attributesDict = this.attributes() || {};
                const attribNames = Object.keys(attributesDict);
                const message = `attrib ${attribName} not found. availables are: ${attribNames.join(',')}`;
                console.warn(message);
                throw message;
            }
        }
    }
    attribValue(attribName, target) {
        return this.constructor.attribValue(this._object, this._index, attribName, target);
    }
    attribValueNumber(attribName) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return 0;
        }
        return attrib.array[this._index];
    }
    attribValueVector2(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 2);
        return target;
    }
    attribValueVector3(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 3);
        return target;
    }
    attribValueVector4(attribName, target) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        target.fromArray(attrib.array, this._index * 4);
        return target;
    }
    static attribType(object, attribName) {
        const attribute = object ? this.attribute(object, attribName) : null;
        if (attribute && (attribute === null || attribute === void 0 ? void 0 : attribute.isString) == true) {
            return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.STRING */ .rp.STRING;
        }
        else {
            return _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribType.NUMERIC */ .rp.NUMERIC;
        }
    }
    attribType(attribName) {
        return this.constructor.attribType(this._object, attribName);
    }
    static stringAttribValue(object, index, attribName) {
        return this.attribValue(object, index, attribName);
    }
    stringAttribValue(attribName) {
        return this.attribValue(attribName);
    }
    position(target) {
        _warnOverloadRequired('position');
        return target;
    }
    setPosition(newPosition) {
        this.setAttribValueFromVector3(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.POSITION */ .ah.POSITION, newPosition);
    }
    normal(target) {
        _warnOverloadRequired('normal');
        return target;
    }
    setNormal(newNormal) {
        return this.setAttribValueFromVector3(_Attribute__WEBPACK_IMPORTED_MODULE_1__/* .Attribute.NORMAL */ .ah.NORMAL, newNormal);
    }
    setAttribValue(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            console.warn(`no attribute ${attribName}`);
            return;
        }
        const array = attrib.array;
        const attribSize = attrib.itemSize;
        if (_Type__WEBPACK_IMPORTED_MODULE_4__/* .CoreType.isArray */ .MR.isArray(value)) {
            for (let i = 0; i < attribSize; i++) {
                array[this._index * attribSize + i] = value[i];
            }
            return;
        }
        switch (attribSize) {
            case 1:
                array[this._index] = value;
                break;
            case 2:
                const v2 = value;
                const i2 = this._index * 2;
                array[i2 + 0] = v2.x;
                array[i2 + 1] = v2.y;
                break;
            case 3:
                const isColor = value.r != null;
                const i3 = this._index * 3;
                if (isColor) {
                    const col = value;
                    array[i3 + 0] = col.r;
                    array[i3 + 1] = col.g;
                    array[i3 + 2] = col.b;
                }
                else {
                    const v3 = value;
                    array[i3 + 0] = v3.x;
                    array[i3 + 1] = v3.y;
                    array[i3 + 2] = v3.z;
                }
                break;
            case 4:
                const v4 = value;
                const i4 = this._index * 4;
                array[i4 + 0] = v4.x;
                array[i4 + 1] = v4.y;
                array[i4 + 2] = v4.z;
                array[i4 + 3] = v4.w;
                break;
            default:
                console.warn(`CoreVertex.setAttribValue does not yet allow attrib size ${attribSize}`);
                throw `attrib size ${attribSize} not implemented`;
        }
    }
    setAttribValueFromNumber(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib) {
            return;
        }
        const array = attrib.array;
        array[this._index] = value;
    }
    setAttribValueFromVector2(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || attrib.isString == true) {
            return;
        }
        value.toArray(attrib.array, this._index * 2);
    }
    setAttribValueFromVector3(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || attrib.isString == true) {
            return;
        }
        value.toArray(attrib.array, this._index * 3);
    }
    setAttribValueFromVector4(attribName, value) {
        const attrib = this.attribute(attribName);
        if (!attrib || attrib.isString == true) {
            return;
        }
        value.toArray(attrib.array, this._index * 4);
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static relatedObjectClass(object) {
        return this.relatedPrimitiveClass(object).relatedObjectClass(object);
    }
    relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {
        switch (attribClass) {
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.POINT */ .io.POINT: {
                this.relatedPoints(target, traversedRelatedEntityData);
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.VERTEX */ .io.VERTEX: {
                target.length = 1;
                target[0] = this;
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.PRIMITIVE */ .io.PRIMITIVE: {
                this.relatedPrimitives(target, traversedRelatedEntityData);
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.OBJECT */ .io.OBJECT: {
                this.relatedObjects(target, traversedRelatedEntityData);
                return;
            }
            case _Constant__WEBPACK_IMPORTED_MODULE_2__/* .AttribClass.CORE_GROUP */ .io.CORE_GROUP: {
                target.length = 1;
                target[0] = coreGroup;
                return;
            }
        }
        _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_5__/* .TypeAssert.unreachable */ .f.unreachable(attribClass);
    }
}


/***/ }),

/***/ 26293:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CZ": () => (/* binding */ verticesFromObjectFromGroup),
/* harmony export */   "D1": () => (/* binding */ verticesCountFromObject),
/* harmony export */   "ir": () => (/* binding */ verticesFromObject)
/* harmony export */ });
/* unused harmony exports vertices, vertexAttribNamesFromCoreGroup, vertexAttribSizesFromCoreGroup, vertexAttribTypesFromCoreGroup, vertexAttributeNames, vertexAttributeSizes, vertexAttributeTypes */
/* harmony import */ var _String__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40354);
/* harmony import */ var _CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(44604);




const _indices = [];
const _tmpVertices = [];
function vertices(coreGroup, target) {
    const allObjects = coreGroup.allObjects();
    target.length = 0;
    for (const object of allObjects) {
        verticesFromObject(object, _tmpVertices);
        arrayPushItems(_tmpVertices, target);
    }
    return target;
    // return coreGroup
    // 	.allCoreObjects()
    // 	.map((o) => verticesFromObject(o.object()))
    // 	.flat();
}
function vertexAttribNamesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return vertexAttributeNames(firstObject);
    }
    else {
        return [];
    }
}
function vertexAttribSizesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return vertexAttributeSizes(firstObject);
    }
    else {
        return {};
    }
}
function vertexAttribTypesFromCoreGroup(coreGroup) {
    const firstObject = coreGroup.allObjects()[0];
    if (firstObject) {
        return vertexAttributeTypes(firstObject);
    }
    else {
        return {};
    }
}
function verticesCountFromObject(object) {
    const vertexClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__/* .coreVertexClassFactory */ .PF)(object);
    return vertexClass.entitiesCount(object);
}
function verticesFromObject(object, target) {
    const vertexClass = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__/* .coreVertexClassFactory */ .PF)(object);
    const verticesCount = vertexClass.entitiesCount(object);
    target.length = verticesCount;
    for (let i = 0; i < verticesCount; i++) {
        target[i] = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_0__/* .coreVertexInstanceFactory */ .p7)(object, i);
    }
    return target;
}
function verticesFromObjectFromGroup(object, group, target) {
    if (group) {
        target.length = 0;
        (0,_String__WEBPACK_IMPORTED_MODULE_1__/* .stringToIndices */ .oz)(group, _indices);
        verticesFromObject(object, _tmpVertices);
        for (const index of _indices) {
            const vertex = _tmpVertices[index];
            if (vertex) {
                target.push(vertex);
            }
        }
        return target;
    }
    else {
        return verticesFromObject(object, target);
    }
}
function vertexAttributeNames(object) {
    const vertexClass = coreVertexClassFactory(object);
    const attributes = vertexClass.attributes(object);
    if (!attributes) {
        return [];
    }
    return Object.keys(attributes);
}
function vertexAttributeSizes(object) {
    const vertexClass = coreVertexClassFactory(object);
    const attributes = vertexClass.attributes(object);
    if (!attributes) {
        return {};
    }
    const attribNames = Object.keys(attributes);
    const h = {};
    for (const attribName of attribNames) {
        h[attribName] = attributes[attribName].itemSize;
    }
    return h;
}
function vertexAttributeTypes(object) {
    const vertexClass = coreVertexClassFactory(object);
    const attributes = vertexClass.attributes(object);
    if (!attributes) {
        return {};
    }
    const attribNames = Object.keys(attributes);
    const h = {};
    for (const attribName of attribNames) {
        h[attribName] = attributes[attribName].isString == true ? AttribType.STRING : AttribType.NUMERIC;
    }
    return h;
}


/***/ }),

/***/ 59309:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AF": () => (/* binding */ CAD_GEOMETRY_TYPES_SET),
/* harmony export */   "As": () => (/* binding */ CAD_GEOMETRY_TYPES_SET_SHAPE),
/* harmony export */   "Av": () => (/* binding */ _createCadBox3Handle),
/* harmony export */   "IV": () => (/* binding */ _createCadNumberHandle),
/* harmony export */   "Jd": () => (/* binding */ CadGC),
/* harmony export */   "dJ": () => (/* binding */ cadGeometryTypeFromShape),
/* harmony export */   "dT": () => (/* binding */ CadGeometryType),
/* harmony export */   "wK": () => (/* binding */ cadDowncast)
/* harmony export */ });
/* unused harmony exports CAD_GEOMETRY_TYPES_SHAPE, _createCadVector3Handle */
var CadGeometryType;
(function (CadGeometryType) {
    CadGeometryType["POINT_2D"] = "CADPoint2D";
    CadGeometryType["CURVE_2D"] = "CADCurve2D";
    // CURVE_3D = 'curve3D',
    CadGeometryType["VERTEX"] = "CADVertex";
    CadGeometryType["EDGE"] = "CADEdge";
    CadGeometryType["WIRE"] = "CADWire";
    CadGeometryType["FACE"] = "CADFace";
    CadGeometryType["SHELL"] = "CADShell";
    CadGeometryType["SOLID"] = "CADSolid";
    CadGeometryType["COMPSOLID"] = "CADCompsolid";
    CadGeometryType["COMPOUND"] = "CADCompound";
})(CadGeometryType || (CadGeometryType = {}));
const CAD_GEOMETRY_TYPES = [
    CadGeometryType.POINT_2D,
    CadGeometryType.CURVE_2D,
    CadGeometryType.VERTEX,
    CadGeometryType.EDGE,
    CadGeometryType.WIRE,
    CadGeometryType.FACE,
    CadGeometryType.SHELL,
    CadGeometryType.SOLID,
    CadGeometryType.COMPSOLID,
    CadGeometryType.COMPOUND,
];
const CAD_GEOMETRY_TYPES_SET = new Set(CAD_GEOMETRY_TYPES);
const CAD_GEOMETRY_TYPES_SHAPE = [
    CadGeometryType.VERTEX,
    CadGeometryType.EDGE,
    CadGeometryType.WIRE,
    CadGeometryType.FACE,
    CadGeometryType.SHELL,
    CadGeometryType.SOLID,
    CadGeometryType.COMPSOLID,
    CadGeometryType.COMPOUND,
];
const CAD_GEOMETRY_TYPES_SET_SHAPE = new Set(CAD_GEOMETRY_TYPES_SHAPE);
function _createShapeTypeToCadGeometryTypeMap(oc) {
    const shapeEnum = oc.TopAbs_ShapeEnum;
    const map = new Map([
        [shapeEnum.TopAbs_VERTEX, CadGeometryType.VERTEX],
        [shapeEnum.TopAbs_EDGE, CadGeometryType.EDGE],
        [shapeEnum.TopAbs_WIRE, CadGeometryType.WIRE],
        [shapeEnum.TopAbs_FACE, CadGeometryType.FACE],
        [shapeEnum.TopAbs_SHELL, CadGeometryType.SHELL],
        [shapeEnum.TopAbs_SOLID, CadGeometryType.SOLID],
        [shapeEnum.TopAbs_COMPSOLID, CadGeometryType.COMPSOLID],
        [shapeEnum.TopAbs_COMPOUND, CadGeometryType.COMPOUND],
    ]);
    return map;
}
function _createCastMapFromCadGeometryTypeMap(oc) {
    const shapeEnum = oc.TopAbs_ShapeEnum;
    const map = new Map([
        [shapeEnum.TopAbs_VERTEX, oc.TopoDS.Vertex_1],
        [shapeEnum.TopAbs_EDGE, oc.TopoDS.Edge_1],
        [shapeEnum.TopAbs_WIRE, oc.TopoDS.Wire_1],
        [shapeEnum.TopAbs_FACE, oc.TopoDS.Face_1],
        [shapeEnum.TopAbs_SHELL, oc.TopoDS.Shell_1],
        [shapeEnum.TopAbs_SOLID, oc.TopoDS.Solid_1],
        [shapeEnum.TopAbs_COMPSOLID, oc.TopoDS.CompSolid_1],
        [shapeEnum.TopAbs_COMPOUND, oc.TopoDS.Compound_1],
    ]);
    return map;
}
let shapeTypeToCadGeometryTypeMap;
let shapeCasterByCadGeometryTypeMap;
function cadGeometryTypeFromShape(oc, shape) {
    shapeTypeToCadGeometryTypeMap = shapeTypeToCadGeometryTypeMap || _createShapeTypeToCadGeometryTypeMap(oc);
    return shapeTypeToCadGeometryTypeMap.get(shape.ShapeType());
}
function cadDowncast(oc, shape) {
    shapeCasterByCadGeometryTypeMap = shapeCasterByCadGeometryTypeMap || _createCastMapFromCadGeometryTypeMap(oc);
    const caster = shapeCasterByCadGeometryTypeMap.get(shape.ShapeType());
    return caster(shape);
}
const _createCadNumberHandle = () => ({ current: 0 });
const _createCadVector3Handle = () => ({
    x: _createCadNumberHandle(),
    y: _createCadNumberHandle(),
    z: _createCadNumberHandle(),
});
const _createCadBox3Handle = () => ({
    min: _createCadVector3Handle(),
    max: _createCadVector3Handle(),
});
class CadGC {
    static withGC(callback) {
        const deletables = new Set();
        function r(deletable) {
            deletables.add(deletable);
            return deletable;
        }
        const result = callback(r);
        deletables.forEach((deletable) => {
            deletable.delete();
        });
        deletables.clear();
        return result;
    }
}


/***/ }),

/***/ 95703:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ak": () => (/* binding */ cadMaterialLine),
/* harmony export */   "Nb": () => (/* binding */ step),
/* harmony export */   "Nr": () => (/* binding */ cadMaterialMeshGroup),
/* harmony export */   "Nv": () => (/* binding */ cadMaterialMesh),
/* harmony export */   "fI": () => (/* binding */ cadMaterialLineGroup),
/* harmony export */   "lw": () => (/* binding */ cadMaterialPoint)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);

// import {ObjectType} from '../Constant';
// import {CsgObjectType} from './CsgToObject3D';
// export interface CsgObjectData {
// 	type: CsgObjectType;
// }
const step = 0.000001;
// interface MaterialPair<M extends Material> {
// 	plain: M;
// 	wireframe: M;
// }
const GROUP_COLOR = 0x11dd00;
const MESH_MAT = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({
    color: 0xffffff,
    // vertexColors: true,
    side: three__WEBPACK_IMPORTED_MODULE_0__.FrontSide,
    metalness: 0.0,
    roughness: 0.9,
});
const MESH_GROUP_MAT = new three__WEBPACK_IMPORTED_MODULE_0__.MeshStandardMaterial({
    color: GROUP_COLOR,
    // vertexColors: true,
    side: three__WEBPACK_IMPORTED_MODULE_0__.FrontSide,
    metalness: 0.0,
    roughness: 0.9,
    emissive: 0.5,
});
// const MESH_MAT_WIREFRAME = (() => {
// 	const mat = MESH_MAT.clone();
// 	mat.wireframe = true;
// 	return mat;
// })();
const LINES_MAT = new three__WEBPACK_IMPORTED_MODULE_0__.LineBasicMaterial({
    color: 0xffffff,
    linewidth: 1,
});
const LINES_GROUP_MAT = new three__WEBPACK_IMPORTED_MODULE_0__.LineBasicMaterial({
    color: GROUP_COLOR,
    linewidth: 5,
    // depthWrite: false,
});
const POINTS_MAT = new three__WEBPACK_IMPORTED_MODULE_0__.PointsMaterial({
    color: 0xffffff,
    size: 0.1,
});
// interface CadMaterial {
// 	[ObjectType.MESH]: MaterialPair<MeshStandardMaterial>;
// 	[ObjectType.LINE_SEGMENTS]: LineBasicMaterial;
// 	[ObjectType.POINTS]: PointsMaterial;
// }
function cadMaterialMesh(color, wireframe) {
    const mat = MESH_MAT.clone();
    mat.wireframe = wireframe;
    mat.color = color;
    return mat;
}
function cadMaterialMeshGroup() {
    return MESH_GROUP_MAT;
}
function cadMaterialLine(color) {
    const mat = LINES_MAT.clone();
    mat.color = color;
    return mat;
}
function cadMaterialLineGroup() {
    return LINES_GROUP_MAT;
}
function cadMaterialPoint() {
    const mat = POINTS_MAT; //.clone();
    // mat.color = color;
    return mat;
}
// export const CAD_MATERIAL: CadMaterial = {
// 	[ObjectType.MESH]: {
// 		plain: MESH_MAT,
// 		wireframe: MESH_MAT_WIREFRAME,
// 	},
// 	[ObjectType.LINE_SEGMENTS]: LINES_MAT,
// 	[ObjectType.POINTS]: POINTS_MAT,
// };
// export const HASH_CODE_MAX = Number.MAX_SAFE_INTEGER;


/***/ }),

/***/ 92219:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": () => (/* binding */ isCADObject),
/* harmony export */   "c": () => (/* binding */ CoreCadType)
/* harmony export */ });
/* harmony import */ var _CadCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(59309);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48454);


function isCADObject(o) {
    return _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CAD_GEOMETRY_TYPES_SET.has */ .AF.has(o.type);
}
class CoreCadType {
    static isPoint2d(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.POINT_2D */ .dT.POINT_2D;
    }
    static isGeom2dCurve(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.CURVE_2D */ .dT.CURVE_2D;
    }
    static isVertex(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.VERTEX */ .dT.VERTEX;
    }
    static isEdge(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.EDGE */ .dT.EDGE;
    }
    static isWire(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.WIRE */ .dT.WIRE;
    }
    static isFace(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.FACE */ .dT.FACE;
    }
    static isShell(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.SHELL */ .dT.SHELL;
    }
    static isSolid(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.SOLID */ .dT.SOLID;
    }
    static isCompsolid(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.COMPSOLID */ .dT.COMPSOLID;
    }
    static isCompound(object) {
        return object.type == _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CadGeometryType.COMPOUND */ .dT.COMPOUND;
    }
    static isShape(object) {
        return _CadCommon__WEBPACK_IMPORTED_MODULE_0__/* .CAD_GEOMETRY_TYPES_SET_SHAPE.has */ .As.has(object.type);
    }
    static isGeometryShape(geometry) {
        return _Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isFunction */ .MR.isFunction(geometry.ShapeType);
    }
}


/***/ }),

/***/ 63146:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": () => (/* binding */ CadEntityGroupCollection)
/* harmony export */ });
/* harmony import */ var _ArrayUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(69374);
/* harmony import */ var _String__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(40354);
/* harmony import */ var _CoreObjectFactory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(44604);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16396);




const _indicesSet = new Set();
const _indices = [];
class CadEntityGroupCollection {
    static traverseEntitiesInGroup(options) {
        const { groupName, groupType, object, shape, traverseFunction, onEntityTraversed, onEntityNotInGroupTraversed } = options;
        const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
        if (groupName.trim() == '') {
            // no group
            traverseFunction(oc, shape, onEntityTraversed);
        }
        else {
            (0,_String__WEBPACK_IMPORTED_MODULE_1__/* .stringToIndices */ .oz)(groupName, _indices);
            if (_indices.length != 0) {
                // group by indices
                (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_2__/* .arrayToSet */ .nu)(_indices, _indicesSet);
                traverseFunction(oc, shape, (entity, i) => {
                    if (_indicesSet.has(i)) {
                        onEntityTraversed(entity, i);
                    }
                });
            }
            else {
                const coreObject = (0,_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_3__/* .coreObjectInstanceFactory */ .$Z)(object);
                const groupCollection = coreObject.groupCollection();
                groupCollection.indicesSet(groupType, groupName, _indicesSet);
                traverseFunction(oc, shape, (entity, i) => {
                    if (_indicesSet.has(i)) {
                        onEntityTraversed(entity, i);
                    }
                    else if (onEntityNotInGroupTraversed) {
                        onEntityNotInGroupTraversed(entity, i);
                    }
                });
            }
        }
    }
}


/***/ }),

/***/ 75748:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K": () => (/* binding */ cadProcessError),
/* harmony export */   "T": () => (/* binding */ withCadException)
/* harmony export */ });
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16396);
// https://ocjs.org/docs/advanced/exceptions/catch-exceptions

function withCadException(oc, callback) {
    try {
        return callback();
    }
    catch (e) {
        const message = cadProcessError(e);
        console.log(`That didn't work because: ${message}`);
        console.log(e, message);
        // if (typeof e === 'number') {
        // 		const exceptionData = oc.OCJS.getStandard_FailureData(e);
        // 	} else {
        // 		console.log('Unkown error');
        // 		console.log(e);
        // 	}
        // }
    }
}
function cadProcessError(e) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    console.warn(e, typeof e === 'number');
    if (typeof e === 'number') {
        const exceptionData = oc.OCJS.getStandard_FailureData(e);
        console.log(exceptionData.GetMessageString());
        return exceptionData.GetMessageString();
        // console.log(`That didn't work because: ${exceptionData.GetMessageString()}`);
        // console.log(e, exceptionData);
    }
    else {
        const message = e.message;
        console.log(e, message);
        if (typeof message === 'string') {
            return message;
        }
        else {
            console.log(e);
            return 'Unknow CAD Error';
        }
    }
}


/***/ }),

/***/ 16396:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": () => (/* binding */ CadLoaderSync)
/* harmony export */ });
let _oc;
class CadLoaderSync {
    static __setOC(oc) {
        _oc = oc;
        // set globals
        this.gp_Ax1 = new oc.gp_Ax1_1();
        this.gp_Ax2 = new oc.gp_Ax2_1();
        this.gp_Dir = new oc.gp_Dir_1();
        this.gp_Pnt2d = new oc.gp_Pnt2d_1();
        this.gp_Vec2d = new oc.gp_Vec2d_1();
        this.gp_Pln = new oc.gp_Pln_1();
        this.gp_Pnt = new oc.gp_Pnt_1();
        this.gp_Quaternion = new oc.gp_Quaternion_1();
        this.gp_Trsf = new oc.gp_Trsf_1();
        this.gp_TrsfT = new oc.gp_Trsf_1();
        this.gp_TrsfR = new oc.gp_Trsf_1();
        this.gp_TrsfS = new oc.gp_Trsf_1();
        // this.gp_GTrsf = new oc.gp_GTrsf_1();
        this.gp_Vec = new oc.gp_Vec_1();
        this.gp_XYZ = new oc.gp_XYZ_1();
        this.Bnd_Box = new oc.Bnd_Box_1();
        this.TopLoc_Location = new oc.TopLoc_Location_1();
        this.Message_ProgressRange = new oc.Message_ProgressRange_1();
        this.TopTools_ListOfShape = new oc.TopTools_ListOfShape_1();
        this.GProp_GProps = new oc.GProp_GProps_1();
    }
    static oc() {
        return _oc;
    }
}


/***/ }),

/***/ 79550:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "K": () => (/* binding */ CadObject)
});

// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadCommon.ts
var CadCommon = __webpack_require__(59309);
// EXTERNAL MODULE: ./src/core/geometry/ObjectContent.ts
var ObjectContent = __webpack_require__(37956);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadPnt2d.ts
var CadPnt2d = __webpack_require__(52543);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadVertex.ts
var CadVertex = __webpack_require__(98666);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadGeom2dCurve.ts
var CadGeom2dCurve = __webpack_require__(38919);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadEdge.ts
var CadEdge = __webpack_require__(61618);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadWire.ts
var CadWire = __webpack_require__(73257);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadCoreType.ts
var CadCoreType = __webpack_require__(92219);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadLoaderSync.ts
var CadLoaderSync = __webpack_require__(16396);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadShapeCommon.ts
var CadShapeCommon = __webpack_require__(84581);
// EXTERNAL MODULE: ./src/engine/poly/Assert.ts
var Assert = __webpack_require__(53120);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadTraverse.ts
var CadTraverse = __webpack_require__(34802);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/toObject3D/CadTriangulationFaceUtils.ts


var FaceOrientation;
(function (FaceOrientation) {
    FaceOrientation[FaceOrientation["BACKWARD"] = 0] = "BACKWARD";
    FaceOrientation[FaceOrientation["FORWARD"] = 1] = "FORWARD";
})(FaceOrientation || (FaceOrientation = {}));
function faceOrientation(oc, face) {
    return face.Orientation_1() === oc.TopAbs_Orientation.TopAbs_FORWARD
        ? FaceOrientation.FORWARD
        : FaceOrientation.BACKWARD;
}
const STRIDE = 3;
function faceData(oc, face, index0 = 0) {
    return CadCommon/* CadGC.withGC */.Jd.withGC((r) => {
        const location = CadLoaderSync/* CadLoaderSync.TopLoc_Location */.T.TopLoc_Location;
        const triangulation = oc.BRep_Tool.Triangulation(face, location, 0);
        if (triangulation.IsNull()) {
            return;
        }
        const transformation = location.Transformation();
        const tri = triangulation.get();
        const nbNodes = tri.NbNodes();
        // init
        const normalsArray = r(new oc.TColgp_Array1OfDir_2(1, nbNodes));
        const pc = r(new oc.Poly_Connect_2(triangulation));
        oc.StdPrs_ToolTriangulatedShape.Normal(face, pc, normalsArray);
        const nbTriangles = tri.NbTriangles();
        const faceData = {
            positions: new Array(nbNodes * 3),
            normals: new Array(normalsArray.Length() * 3),
            indices: new Array(nbTriangles * 3),
        };
        // positions
        for (let i = 1; i <= nbNodes; i++) {
            const p = tri.Node(i).Transformed(transformation);
            const index = (i - 1) * STRIDE;
            faceData.positions[index] = p.X();
            faceData.positions[index + 1] = p.Y();
            faceData.positions[index + 2] = p.Z();
        }
        // normals
        for (let i = normalsArray.Lower(); i <= normalsArray.Upper(); i++) {
            const d = normalsArray.Value(i).Transformed(transformation);
            const index = (i - 1) * STRIDE;
            faceData.normals[index] = d.X();
            faceData.normals[index + 1] = d.Y();
            faceData.normals[index + 2] = d.Z();
        }
        // indices
        let trisCount = 0;
        const orientation = faceOrientation(oc, face);
        for (let nt = 1; nt <= nbTriangles; nt++) {
            const t = tri.Triangle(nt);
            let n1 = t.Value(1);
            let n2 = t.Value(2);
            const n3 = t.Value(3);
            if (orientation == FaceOrientation.BACKWARD) {
                const tmp = n1;
                n1 = n2;
                n2 = tmp;
            }
            const index = trisCount * STRIDE;
            faceData.indices[index] = n1 - 1 + index0;
            faceData.indices[index + 1] = n2 - 1 + index0;
            faceData.indices[index + 2] = n3 - 1 + index0;
            trisCount++;
        }
        return faceData;
    });
}

// EXTERNAL MODULE: ./node_modules/three/build/three.module.js
var three_module = __webpack_require__(99477);
// EXTERNAL MODULE: ./src/engine/operations/sop/_Base.ts
var _Base = __webpack_require__(57861);
// EXTERNAL MODULE: ./src/core/geometry/Constant.ts
var Constant = __webpack_require__(73303);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadConstant.ts
var CadConstant = __webpack_require__(95703);
// EXTERNAL MODULE: ./src/engine/poly/registers/nodes/types/Sop.ts
var Sop = __webpack_require__(9335);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadEntityGroupCollection.ts
var CadEntityGroupCollection = __webpack_require__(63146);
// EXTERNAL MODULE: ./src/core/geometry/EntityGroupCollection.ts
var EntityGroupCollection = __webpack_require__(50155);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadExceptionHandler.ts
var CadExceptionHandler = __webpack_require__(75748);
// EXTERNAL MODULE: ./src/core/ArrayUtils.ts
var ArrayUtils = __webpack_require__(69374);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/toObject3D/CadShape.ts














function cachedTesselationParamsEqual(params1, params2) {
    return (params1.linearTolerance == params2.linearTolerance &&
        params1.angularTolerance == params2.angularTolerance &&
        params1.curveAbscissa == params2.curveAbscissa &&
        params1.curveTolerance == params2.curveTolerance);
}
const tesselationParamsByShape = new WeakMap();
function cadShapeToObject3D(cadObject, tesselationParams, displayNode) {
    const oc = CadLoaderSync/* CadLoaderSync.oc */.T.oc();
    const shape = cadObject.cadGeometry();
    let cachedParams = tesselationParamsByShape.get(shape);
    if (cachedParams && !cachedTesselationParamsEqual(cachedParams, tesselationParams)) {
        oc.BRepTools.Clean(shape, true);
    }
    tesselationParamsByShape.set(shape, { ...tesselationParams });
    const objects = [];
    function _processMesh(mesh) {
        if (mesh) {
            (0,ObjectContent/* objectContentCopyProperties */.Br)(cadObject, mesh);
            objects.push(mesh);
        }
        return mesh;
    }
    function _processEdgeObject(edge) {
        const edgeObject = (0,CadEdge/* cadEdgeToObject3D */.S7)(edge, tesselationParams);
        if (edgeObject) {
            // it seems better to not have shadows from those edges
            edgeObject.castShadow = false;
            edgeObject.receiveShadow = false;
            objects.push(edgeObject);
        }
        return edgeObject;
    }
    function _displayNodeIsEdgeGroup() {
        if (displayNode.type() == Sop/* SopType.CAD_GROUP */.aB.CAD_GROUP) {
            const groupNode = displayNode;
            return groupNode.groupType() == EntityGroupCollection/* EntityGroupType.EDGE */.he.EDGE;
        }
        return false;
    }
    function _displayNodeIsFaceGroup() {
        if (displayNode.type() == Sop/* SopType.CAD_GROUP */.aB.CAD_GROUP) {
            const groupNode = displayNode;
            return groupNode.groupType() == EntityGroupCollection/* EntityGroupType.FACE */.he.FACE;
        }
        return false;
    }
    if (_displayNodeIsFaceGroup()) {
        const groupNode = displayNode;
        const groupName = groupNode.groupName();
        const facesInGroup = [];
        const facesNotInGroup = [];
        CadEntityGroupCollection/* CadEntityGroupCollection.traverseEntitiesInGroup */.b.traverseEntitiesInGroup({
            groupName,
            groupType: EntityGroupCollection/* EntityGroupType.FACE */.he.FACE,
            object: cadObject,
            shape,
            traverseFunction: CadTraverse/* traverseFaces */.Ob,
            onEntityTraversed: (face, i) => {
                facesInGroup.push(face);
            },
            onEntityNotInGroupTraversed: (face, i) => {
                facesNotInGroup.push(face);
            },
        });
        const objectInGroup = _createMeshFromFaces(oc, shape, facesInGroup, tesselationParams);
        const objectNotInGroup = _createMeshFromFaces(oc, shape, facesNotInGroup, tesselationParams);
        if (objectInGroup) {
            objectInGroup.material = (0,CadConstant/* cadMaterialMeshGroup */.Nr)();
        }
        _processMesh(objectInGroup);
        _processMesh(objectNotInGroup);
    }
    else {
        if (tesselationParams.displayMeshes) {
            const mesh = _createMesh(oc, shape, tesselationParams);
            _processMesh(mesh);
        }
    }
    if (_displayNodeIsEdgeGroup()) {
        const groupNode = displayNode;
        const groupName = groupNode.groupName();
        CadEntityGroupCollection/* CadEntityGroupCollection.traverseEntitiesInGroup */.b.traverseEntitiesInGroup({
            groupName,
            groupType: EntityGroupCollection/* EntityGroupType.EDGE */.he.EDGE,
            object: cadObject,
            shape,
            traverseFunction: CadTraverse/* traverseEdges */.y9,
            onEntityTraversed: (edge, i) => {
                const edgeObject = _processEdgeObject(edge);
                if (edgeObject) {
                    edgeObject.material = (0,CadConstant/* cadMaterialLineGroup */.fI)();
                }
            },
            onEntityNotInGroupTraversed: _processEdgeObject,
        });
    }
    else {
        if (tesselationParams.displayEdges) {
            (0,CadTraverse/* traverseEdges */.y9)(oc, shape, _processEdgeObject);
        }
    }
    return objects;
}
function _createMesh(oc, object, tesselationParams) {
    const mesher = (0,CadExceptionHandler/* withCadException */.T)(oc, () => {
        const _mesher = new oc.BRepMesh_IncrementalMesh_2(object, tesselationParams.linearTolerance, true, tesselationParams.angularTolerance, true);
        return _mesher;
    });
    if (!mesher) {
        const updatedTesselationParams = { ...tesselationParams };
        updatedTesselationParams.linearTolerance *= 2;
        updatedTesselationParams.angularTolerance *= 2;
        updatedTesselationParams.curveAbscissa *= 2;
        updatedTesselationParams.curveTolerance *= 2;
        return _createMesh(oc, object, updatedTesselationParams);
    }
    if (mesher.IsDone()) {
        const positions = [];
        const normals = [];
        const indices = [];
        const buffers = { positions, normals, indices };
        (0,CadTraverse/* traverseFaces */.Ob)(oc, object, (face) => {
            _updateBufferFromFace(oc, face, buffers);
        });
        mesher.delete();
        return _createMeshFromBuffers(buffers, tesselationParams);
    }
}
function _createMeshFromFaces(oc, object, faces, tesselationParams) {
    const mesher = new oc.BRepMesh_IncrementalMesh_2(object, tesselationParams.linearTolerance, true, tesselationParams.angularTolerance, true);
    if (mesher.IsDone()) {
        const positions = [];
        const normals = [];
        const indices = [];
        const buffers = { positions, normals, indices };
        for (const face of faces) {
            _updateBufferFromFace(oc, face, buffers);
        }
        mesher.delete();
        return _createMeshFromBuffers(buffers, tesselationParams);
    }
}
function _updateBufferFromFace(oc, face, buffers) {
    const { positions, normals, indices } = buffers;
    const data = faceData(oc, face, positions.length / 3);
    if (data) {
        (0,ArrayUtils/* arrayPushItems */.L_)(data.positions, positions);
        (0,ArrayUtils/* arrayPushItems */.L_)(data.normals, normals);
        (0,ArrayUtils/* arrayPushItems */.L_)(data.indices, indices);
    }
}
function _createMeshFromBuffers(buffers, tesselationParams) {
    const { positions, normals, indices } = buffers;
    const geo = new three_module.BufferGeometry();
    geo.setAttribute('position', new three_module.BufferAttribute(new Float32Array(positions), 3));
    geo.setAttribute('normal', new three_module.BufferAttribute(new Float32Array(normals), 3));
    geo.setIndex(indices);
    return _Base/* BaseSopOperation.createObject */.U.createObject(geo, Constant/* ObjectType.MESH */.LP.MESH, (0,CadConstant/* cadMaterialMesh */.Nv)(tesselationParams.meshesColor, tesselationParams.wireframe));
}

// EXTERNAL MODULE: ./src/core/geometry/modules/cad/operations/CadTransform.ts
var CadTransform = __webpack_require__(15315);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadCompound.ts
var CadCompound = __webpack_require__(47114);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadObject.ts















const t = new three_module.Vector3();
const q = new three_module.Quaternion();
const s = new three_module.Vector3();
const euler = new three_module.Euler();
const r = new three_module.Vector3();
const pivot = new three_module.Vector3();
const DEFAULT_BND_BOX = (0,CadCommon/* _createCadBox3Handle */.Av)();
const BBOX_EMPTY = new three_module.Box3();
// const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;
class CadObject {
    get geometry() {
        return this._geometry;
    }
    get type() {
        return this._type;
    }
    constructor(_geometry, _type) {
        this._geometry = _geometry;
        this._type = _type;
        this.visible = true;
        this.userData = {};
        this.name = '';
        this.castShadow = true;
        this.receiveShadow = true;
        this.renderOrder = 0;
        this.frustumCulled = true;
        this.matrixAutoUpdate = false;
        this.children = [];
        this.parent = null;
        this._validate();
    }
    setGeometry(geometry, type) {
        this._geometry = geometry;
        this._type = type;
        this._validate();
    }
    _validate() {
        if (CadCoreType/* CoreCadType.isGeometryShape */.c.isGeometryShape(this._geometry)) {
            const oc = CadLoaderSync/* CadLoaderSync.oc */.T.oc();
            if (oc) {
                this._geometry = (0,CadCommon/* cadDowncast */.wK)(oc, this._geometry);
                const type = (0,CadCommon/* cadGeometryTypeFromShape */.dJ)(oc, this._geometry);
                if (type) {
                    this._type = type;
                }
                else {
                    console.error('no type for geometry', this._geometry);
                }
            }
        }
        else {
            if (this.type == null) {
                console.error('type is required for geometry', this._geometry);
            }
        }
    }
    // static fromGeometry<T extends CadGeometryType>(geometry: CadTypeMap[T], type: T) {
    // 	return new CadObject(geometry, type);
    // }
    // type() {
    // 	return this._type!;
    // }
    cadGeometry() {
        return this.geometry;
    }
    dispose() { }
    applyMatrix4(matrix) {
        matrix.decompose(t, q, s);
        euler.setFromQuaternion(q);
        r.set(euler.x, euler.y, euler.z).multiplyScalar(RAD2DEG);
        const newGeometry = (0,CadTransform/* cadGeometryTransform */.z)(this.type, this.cadGeometry(), t, r, s.x, pivot);
        if (newGeometry) {
            const oc = CadLoaderSync/* CadLoaderSync.oc */.T.oc();
            if (CadCoreType/* CoreCadType.isGeometryShape */.c.isGeometryShape(newGeometry)) {
                const newType = (0,CadCommon/* cadGeometryTypeFromShape */.dJ)(oc, newGeometry);
                if (newType) {
                    this.setGeometry(newGeometry, newType);
                }
            }
            else {
                // no need to re-add as it is transformed in place
            }
        }
    }
    add(...object) { }
    remove(...object) { }
    dispatchEvent(event) { }
    traverse(callback) {
        callback(this);
    }
    clone() {
        const geometry = cloneCadGeometry(this.type, this.cadGeometry());
        const clone = new CadObject(geometry, this.type);
        (0,ObjectContent/* objectContentCopyProperties */.Br)(this, clone);
        return clone;
    }
    toObject3D(tesselationParams, displayNode) {
        return CadObject.toObject3D(this, this.type, tesselationParams, displayNode);
    }
    static toObject3D(cadObject, type, tesselationParams, displayNode) {
        switch (type) {
            case CadCommon/* CadGeometryType.POINT_2D */.dT.POINT_2D: {
                return (0,CadPnt2d/* cadPnt2dToObject3D */.c$)(cadObject);
            }
            case CadCommon/* CadGeometryType.CURVE_2D */.dT.CURVE_2D: {
                return (0,CadGeom2dCurve/* cadGeom2dCurveToObject3D */.Qy)(cadObject, tesselationParams);
            }
            // case CadObjectType.CURVE_3D: {
            // 	return cadGeomCurveToObject3D(oc, object as Geom_Curve, tesselationParams);
            // }
            case CadCommon/* CadGeometryType.VERTEX */.dT.VERTEX: {
                return (0,CadVertex/* cadVertexToObject3D */.de)(cadObject);
            }
            case CadCommon/* CadGeometryType.EDGE */.dT.EDGE: {
                return (0,CadEdge/* cadEdgeObjectToObject3D */.fb)(cadObject, tesselationParams);
            }
            case CadCommon/* CadGeometryType.WIRE */.dT.WIRE: {
                return (0,CadWire/* cadWireToObject3D */.Po)(cadObject, tesselationParams);
            }
            case CadCommon/* CadGeometryType.FACE */.dT.FACE:
            case CadCommon/* CadGeometryType.SHELL */.dT.SHELL:
            case CadCommon/* CadGeometryType.SOLID */.dT.SOLID:
            case CadCommon/* CadGeometryType.COMPSOLID */.dT.COMPSOLID: {
                return cadShapeToObject3D(cadObject, tesselationParams, displayNode);
            }
            case CadCommon/* CadGeometryType.COMPOUND */.dT.COMPOUND: {
                return (0,CadCompound/* cadCompoundToObject3D */.g)(cadObject, tesselationParams, displayNode);
            }
        }
        Assert/* TypeAssert.unreachable */.f.unreachable(type);
        // const geometry = cadObject.cadGeometry();
        // const buildObject = () => {
        // };
        // const object3D = buildObject();
        // if (object3D) {
        // 	if (CoreType.isArray(object3D)) {
        // 		for (let object of object3D) {
        // 			objectContentCopyProperties(cadObject, object);
        // 		}
        // 	} else {
        // 		objectContentCopyProperties(cadObject, object3D);
        // 	}
        // }
        // return object3D;
    }
    boundingBox(target) {
        const oc = CadLoaderSync/* CadLoaderSync.oc */.T.oc();
        const Bnd_Box = CadLoaderSync/* CadLoaderSync.Bnd_Box */.T.Bnd_Box;
        Bnd_Box.SetVoid();
        const useTriangulation = true;
        if (CadCoreType/* CoreCadType.isShape */.c.isShape(this)) {
            oc.BRepBndLib.Add(this.cadGeometry(), Bnd_Box, useTriangulation);
            Bnd_Box.Get(DEFAULT_BND_BOX.min.x, DEFAULT_BND_BOX.min.y, DEFAULT_BND_BOX.min.z, DEFAULT_BND_BOX.max.x, DEFAULT_BND_BOX.max.y, DEFAULT_BND_BOX.max.z);
            target.min.x = DEFAULT_BND_BOX.min.x.current;
            target.min.y = DEFAULT_BND_BOX.min.y.current;
            target.min.z = DEFAULT_BND_BOX.min.z.current;
            target.max.x = DEFAULT_BND_BOX.max.x.current;
            target.max.y = DEFAULT_BND_BOX.max.y.current;
            target.max.z = DEFAULT_BND_BOX.max.z.current;
            return;
        }
        else {
            switch (this.type) {
                case CadCommon/* CadGeometryType.POINT_2D */.dT.POINT_2D: {
                    const point = this.cadGeometry();
                    target.min.x = point.X();
                    target.min.y = point.Y();
                    target.min.z = 0;
                    target.max.x = point.X();
                    target.max.y = point.Y();
                    target.max.z = 0;
                    return;
                }
                case CadCommon/* CadGeometryType.CURVE_2D */.dT.CURVE_2D: {
                    const geometry = (0,CadGeom2dCurve/* cadGeom2dCurveToBufferGeometry */.Df)(this, CadGeom2dCurve/* CURVE_2D_TESSELATION_PARAMS */.Hm);
                    geometry.computeBoundingBox();
                    if (geometry.boundingBox) {
                        target.copy(geometry.boundingBox);
                    }
                    else {
                        target.copy(BBOX_EMPTY);
                    }
                    return;
                }
                default: {
                    console.warn('cad BoundingBox not implemented for type', this.type);
                    target.copy(BBOX_EMPTY);
                }
            }
        }
        // switch (type) {
        // }
    }
}
function cloneCadGeometry(type, srcGeometry) {
    switch (type) {
        case CadCommon/* CadGeometryType.POINT_2D */.dT.POINT_2D: {
            return (0,CadPnt2d/* cadPnt2dClone */.jD)(srcGeometry);
        }
        case CadCommon/* CadGeometryType.CURVE_2D */.dT.CURVE_2D: {
            return (0,CadGeom2dCurve/* cadGeom2dCurveClone */.yP)(srcGeometry);
        }
        // case CadObjectType.CURVE_3D: {
        // 	return cadGeomCurveClone(srcObject as Geom_Curve) as CadTypeMap[T];
        // }
        case CadCommon/* CadGeometryType.VERTEX */.dT.VERTEX: {
            return (0,CadVertex/* cadVertexClone */.kI)(srcGeometry);
        }
        case CadCommon/* CadGeometryType.EDGE */.dT.EDGE: {
            return (0,CadEdge/* cadEdgeClone */.Fq)(srcGeometry);
        }
        case CadCommon/* CadGeometryType.WIRE */.dT.WIRE: {
            return (0,CadWire/* cadWireClone */.o0)(srcGeometry);
        }
        case CadCommon/* CadGeometryType.FACE */.dT.FACE:
        case CadCommon/* CadGeometryType.SHELL */.dT.SHELL:
        case CadCommon/* CadGeometryType.SOLID */.dT.SOLID:
        case CadCommon/* CadGeometryType.COMPSOLID */.dT.COMPSOLID:
        case CadCommon/* CadGeometryType.COMPOUND */.dT.COMPOUND: {
            return (0,CadShapeCommon/* cadShapeClone */.J9)(srcGeometry);
        }
    }
    Assert/* TypeAssert.unreachable */.f.unreachable(type);
}
// const ORIGIN = new Vector3(0, 0, 0);
// export function cadObjectPosition<T extends CadGeometryType>(cadObject: CadObject<T>) {
// 	console.warn('cadObjectPosition not implemented');
// 	return ORIGIN;
// }


/***/ }),

/***/ 34802:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Fw": () => (/* binding */ traverseVertices),
/* harmony export */   "Ob": () => (/* binding */ traverseFaces),
/* harmony export */   "y9": () => (/* binding */ traverseEdges)
/* harmony export */ });
function traverseFaces(oc, shape, callback) {
    let index = 0;
    const explorer = new oc.TopExp_Explorer_2(shape, oc.TopAbs_ShapeEnum.TopAbs_FACE, oc.TopAbs_ShapeEnum.TopAbs_SHAPE);
    while (explorer.More()) {
        const explorerCurrent = explorer.Current();
        const face = oc.TopoDS.Face_1(explorerCurrent);
        callback(face, index);
        // face.delete();
        index += 1;
        explorer.Next();
    }
    explorer.delete();
}
function traverseEdges(oc, shape, callback) {
    let index = 0;
    const explorer = new oc.TopExp_Explorer_2(shape, oc.TopAbs_ShapeEnum.TopAbs_EDGE, oc.TopAbs_ShapeEnum.TopAbs_SHAPE);
    while (explorer.More()) {
        const edge = oc.TopoDS.Edge_1(explorer.Current());
        callback(edge, index);
        index += 1;
        explorer.Next();
    }
    explorer.delete();
}
function traverseVertices(oc, shape, callback) {
    let index = 0;
    const explorer = new oc.TopExp_Explorer_2(shape, oc.TopAbs_ShapeEnum.TopAbs_VERTEX, oc.TopAbs_ShapeEnum.TopAbs_SHAPE);
    while (explorer.More()) {
        const vertex = oc.TopoDS.Vertex_1(explorer.Current());
        callback(vertex, index);
        index += 1;
        explorer.Next();
    }
    explorer.delete();
}


/***/ }),

/***/ 15315:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": () => (/* binding */ cadTransform),
/* harmony export */   "z": () => (/* binding */ cadGeometryTransform)
/* harmony export */ });
/* harmony import */ var _CadCommon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(59309);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _toObject3D_CadPnt2d__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(52543);
/* harmony import */ var _toObject3D_CadGeom2dCurve__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(38919);
/* harmony import */ var _toObject3D_CadShapeCommon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(84581);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16396);
/* harmony import */ var _CadCoreType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(92219);








// import {CadLoaderSync} from '../CadLoaderSync';
const t2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();
const p2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();
function cadTransform(cadObject, t, r, s, p) {
    const newGeometry = cadGeometryTransform(cadObject.type, cadObject.cadGeometry(), t, r, s, p);
    if (newGeometry) {
        const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_1__/* .CadLoaderSync.oc */ .T.oc();
        if (_CadCoreType__WEBPACK_IMPORTED_MODULE_2__/* .CoreCadType.isGeometryShape */ .c.isGeometryShape(newGeometry)) {
            const newType = (0,_CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .cadGeometryTypeFromShape */ .dJ)(oc, newGeometry);
            if (newType) {
                cadObject.setGeometry(newGeometry, newType);
            }
        }
        else {
            // no need to re-add as it is transformed in place
        }
    }
    // switch (cadObject.type) {
    // 	case CadGeometryType.POINT_2D: {
    // 		t2.set(t.x, t.y);
    // 		cadPnt2dTransform(cadObject.cadGeometry() as gp_Pnt2d, t2);
    // 		return cadObject;
    // 	}
    // 	case CadGeometryType.CURVE_2D: {
    // 		t2.set(t.x, t.y);
    // 		p2.set(p.x, p.y);
    // 		cadGeom2dCurveTransform(cadObject.cadGeometry() as Geom2d_Curve, t2, r.z, s, p2);
    // 		return cadObject;
    // 	}
    // 	case CadGeometryType.VERTEX:
    // 	case CadGeometryType.EDGE:
    // 	case CadGeometryType.WIRE:
    // 	case CadGeometryType.FACE:
    // 	case CadGeometryType.SHELL:
    // 	case CadGeometryType.SOLID:
    // 	case CadGeometryType.COMPSOLID:
    // 	case CadGeometryType.COMPOUND: {
    // 		// make sure to re-assign the object,
    // 		// since it is not modified in place
    // 		const oc = CadLoaderSync.oc();
    // 		if (!oc) {
    // 			return;
    // 		}
    // 		const newShape = cadShapeTransform(cadObject.cadGeometry() as TopoDS_Shape, t, r, s, p);
    // 		if (!newShape) {
    // 			return;
    // 		}
    // 		const type = cadGeometryTypeFromShape(oc, newShape);
    // 		if (type) {
    // 			return CadObject.fromGeometry(newShape, type);
    // 		} else {
    // 			console.log('no type', newShape);
    // 		}
    // 		return;
    // 	}
    // }
}
function cadGeometryTransform(type, geometry, t, r, s, p) {
    switch (type) {
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.POINT_2D */ .dT.POINT_2D: {
            t2.set(t.x, t.y);
            (0,_toObject3D_CadPnt2d__WEBPACK_IMPORTED_MODULE_4__/* .cadPnt2dTransform */ .YW)(geometry, t2);
            return geometry;
        }
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.CURVE_2D */ .dT.CURVE_2D: {
            t2.set(t.x, t.y);
            p2.set(p.x, p.y);
            (0,_toObject3D_CadGeom2dCurve__WEBPACK_IMPORTED_MODULE_5__/* .cadGeom2dCurveTransform */ .Kt)(geometry, t2, r.z, s, p2);
            return geometry;
        }
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.VERTEX */ .dT.VERTEX:
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.EDGE */ .dT.EDGE:
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.WIRE */ .dT.WIRE:
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.FACE */ .dT.FACE:
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.SHELL */ .dT.SHELL:
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.SOLID */ .dT.SOLID:
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.COMPSOLID */ .dT.COMPSOLID:
        case _CadCommon__WEBPACK_IMPORTED_MODULE_3__/* .CadGeometryType.COMPOUND */ .dT.COMPOUND: {
            const newShape = (0,_toObject3D_CadShapeCommon__WEBPACK_IMPORTED_MODULE_6__/* .cadShapeTransform */ .GT)(geometry, t, r, s, p);
            return newShape;
        }
    }
}


/***/ }),

/***/ 47114:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": () => (/* binding */ cadCompoundSubObjectsCount),
/* harmony export */   "g": () => (/* binding */ cadCompoundToObject3D)
/* harmony export */ });
/* harmony import */ var _CadCommon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(59309);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16396);
/* harmony import */ var _CadObject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(79550);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(48454);
/* harmony import */ var _engine_operations_sop_Merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(51044);
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37956);






function cadCompoundToObject3D(cadObject, tesselationParams, displayNode) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    const compound = cadObject.cadGeometry();
    const iterator = new oc.TopoDS_Iterator_2(compound, true, true);
    const iteratedObjects = [];
    while (iterator.More()) {
        const newShape = (0,_CadCommon__WEBPACK_IMPORTED_MODULE_1__/* .cadDowncast */ .wK)(oc, iterator.Value());
        const type = (0,_CadCommon__WEBPACK_IMPORTED_MODULE_1__/* .cadGeometryTypeFromShape */ .dJ)(oc, newShape);
        if (type) {
            const newObject = new _CadObject__WEBPACK_IMPORTED_MODULE_2__/* .CadObject */ .K(newShape, type);
            const result = newObject.toObject3D(tesselationParams, displayNode);
            if (result) {
                if (_Type__WEBPACK_IMPORTED_MODULE_3__/* .CoreType.isArray */ .MR.isArray(result)) {
                    iteratedObjects.push(...result);
                }
                else {
                    iteratedObjects.push(result);
                }
            }
        }
        iterator.Next();
    }
    iterator.delete();
    const newObjects = _engine_operations_sop_Merge__WEBPACK_IMPORTED_MODULE_4__/* .MergeSopOperation.makeCompact */ .y.makeCompact(iteratedObjects, { preserveMaterials: false }).filter(_ObjectContent__WEBPACK_IMPORTED_MODULE_5__/* .isObject3D */ .nK);
    return newObjects;
}
function cadCompoundSubObjectsCount(cadObject) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    const compound = cadObject.cadGeometry();
    let count = 0;
    const iterator = new oc.TopoDS_Iterator_2(compound, true, true);
    while (iterator.More()) {
        count++;
        iterator.Next();
    }
    iterator.delete();
    return count;
}


/***/ }),

/***/ 61618:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Bc": () => (/* binding */ curveDataFromEdge),
/* harmony export */   "Fq": () => (/* binding */ cadEdgeClone),
/* harmony export */   "Ll": () => (/* binding */ cadEdgeCreate),
/* harmony export */   "S7": () => (/* binding */ cadEdgeToObject3D),
/* harmony export */   "Y7": () => (/* binding */ cadEdgeToBufferGeometry),
/* harmony export */   "fb": () => (/* binding */ cadEdgeObjectToObject3D)
/* harmony export */ });
/* harmony import */ var _CadCommon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(59309);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(99477);
/* harmony import */ var _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57861);
/* harmony import */ var _CadConstant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(95703);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73303);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(16396);
/* harmony import */ var _CadShapeCommon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(84581);
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37956);




// import {withCadException} from '../CadExceptionHandler';




const STRIDE = 3;
// let point: gp_Pnt | undefined;
const v0 = { current: 0 };
const v1 = { current: 0 };
// const WITH_ORIENTATION = true;
function cadEdgeObjectToObject3D(cadObject, tesselationParams) {
    const object = cadEdgeToObject3D(cadObject.cadGeometry(), tesselationParams);
    if (object) {
        (0,_ObjectContent__WEBPACK_IMPORTED_MODULE_0__/* .objectContentCopyProperties */ .Br)(cadObject, object);
    }
    return object;
}
function cadEdgeToObject3D(edge, tesselationParams) {
    const geometry = cadEdgeToBufferGeometry(edge, tesselationParams);
    if (!geometry) {
        return;
    }
    const object = _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_1__/* .BaseSopOperation.createObject */ .U.createObject(geometry, _Constant__WEBPACK_IMPORTED_MODULE_2__/* .ObjectType.LINE_SEGMENTS */ .LP.LINE_SEGMENTS, (0,_CadConstant__WEBPACK_IMPORTED_MODULE_3__/* .cadMaterialLine */ .Ak)(tesselationParams.edgesColor));
    return object;
}
function cadEdgeToBufferGeometry(edge, tesselationParams) {
    // TODO: in the build process,
    // update the types so that we replace:
    // type Standard_Real = number;
    // with:
    // type Standard_Real = number | { current: number };
    // oc.BRep_Tool.Range_1(edge, v0 as any, v1 as any);
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_4__/* .CadLoaderSync.oc */ .T.oc();
    const handle = curveDataFromEdge(oc, edge).curveHandle; //oc.BRep_Tool.Curve_2(edge, v0.current, v1.current);
    const curve = handle.get();
    if (!curve) {
        return;
    }
    return _CadCommon__WEBPACK_IMPORTED_MODULE_5__/* .CadGC.withGC */ .Jd.withGC((r) => {
        const geom2Dadaptor = r(new oc.GeomAdaptor_Curve_2(handle));
        const uniformAbscissa = r(new oc.GCPnts_UniformAbscissa_3(geom2Dadaptor, tesselationParams.curveAbscissa, v0.current, v1.current, tesselationParams.curveTolerance));
        let positions;
        let indices;
        const point = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_4__/* .CadLoaderSync.gp_Pnt */ .T.gp_Pnt;
        if (uniformAbscissa.IsDone()) {
            const pointsCount = uniformAbscissa.NbPoints();
            positions = new Array(pointsCount * 3);
            indices = new Array(pointsCount);
            for (let i = 0; i < pointsCount; i++) {
                curve.D0(uniformAbscissa.Parameter(i + 1), point);
                const index = i * STRIDE;
                positions[index] = point.X();
                positions[index + 1] = point.Y();
                positions[index + 2] = point.Z();
                if (i > 0) {
                    indices[(i - 1) * 2] = i - 1;
                    indices[(i - 1) * 2 + 1] = i;
                }
            }
        }
        const geometry = new three__WEBPACK_IMPORTED_MODULE_6__.BufferGeometry();
        geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_6__.Float32BufferAttribute(positions || [], 3));
        geometry.setIndex(indices || []);
        return geometry;
    });
}
function curveDataFromEdge(oc, edge) {
    oc.BRep_Tool.Range_1(edge, v0, v1);
    const curveHandle = oc.BRep_Tool.Curve_2(edge, v0.current, v1.current);
    return {
        curveHandle,
        v0: v0.current,
        v1: v1.current,
    };
}
function cadEdgeCreate(oc, curve) {
    return _CadCommon__WEBPACK_IMPORTED_MODULE_5__/* .CadGC.withGC */ .Jd.withGC((r) => {
        const curveHandle = r(new oc.Handle_Geom_Curve_2(curve));
        const api = r(new oc.BRepBuilderAPI_MakeEdge_24(curveHandle));
        const edge = api.Edge();
        return edge;
    });
}
// let _t: gp_Vec | undefined;
// // let _transform: gp_Trsf | undefined;
// export function cadEdgeTransform(edge: TopoDS_Edge, t: Vector3, r: Vector3, s: Vector3) {
// 	const oc = CadLoader.oc();
// 	_t = _t || new oc.gp_Vec_1();
// 	// _pivot = _pivot || new oc.gp_Pnt2d_1();
// 	_t.SetCoord_2(t.x, t.y, t.z);
// 	const curve = oc.BRep_Tool.Curve_2(edge, 0, 1).get();
// 	curve.Translate_1(_t);
// 	// curve.Rotate(_pivot, MathUtils.degToRad(r));
// 	// curve.Scale(_pivot, s);
// 	// point.SetX(point.X() + t.x);
// 	// point.SetY(point.Y() + t.y);
// 	// const newPoint = new oc.gp_Pnt2d_3(point.X() + t.x, point.Y() + t.y);
// 	// return newPoint;
// 	return cadEdgeCreate(oc, curve);
// }
function cadEdgeClone(src) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_4__/* .CadLoaderSync.oc */ .T.oc();
    return oc.TopoDS.Edge_1((0,_CadShapeCommon__WEBPACK_IMPORTED_MODULE_7__/* .cadShapeClone */ .J9)(src));
}


/***/ }),

/***/ 38919:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Df": () => (/* binding */ cadGeom2dCurveToBufferGeometry),
/* harmony export */   "H5": () => (/* binding */ cadGeom2dCurveTranslate),
/* harmony export */   "Hm": () => (/* binding */ CURVE_2D_TESSELATION_PARAMS),
/* harmony export */   "Kt": () => (/* binding */ cadGeom2dCurveTransform),
/* harmony export */   "Qy": () => (/* binding */ cadGeom2dCurveToObject3D),
/* harmony export */   "yP": () => (/* binding */ cadGeom2dCurveClone)
/* harmony export */ });
/* harmony import */ var _CadCommon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(59309);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57861);
/* harmony import */ var _CadConstant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(95703);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(16396);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73303);
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(37956);





// import {withCadException} from '../CadExceptionHandler';



const CURVE_2D_TESSELATION_PARAMS = {
    linearTolerance: 0.1,
    angularTolerance: 0.1,
    curveAbscissa: 0.1,
    curveTolerance: 0.1,
    wireframe: false,
    displayMeshes: false,
    displayEdges: true,
    meshesColor: new three__WEBPACK_IMPORTED_MODULE_0__.Color(),
    edgesColor: new three__WEBPACK_IMPORTED_MODULE_0__.Color(),
};
const STRIDE = 3;
function cadGeom2dCurveToObject3D(cadObject, tesselationParams) {
    const geometry = cadGeom2dCurveToBufferGeometry(cadObject, tesselationParams);
    const object = _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_1__/* .BaseSopOperation.createObject */ .U.createObject(geometry, _Constant__WEBPACK_IMPORTED_MODULE_2__/* .ObjectType.LINE_SEGMENTS */ .LP.LINE_SEGMENTS, (0,_CadConstant__WEBPACK_IMPORTED_MODULE_3__/* .cadMaterialLine */ .Ak)(tesselationParams.edgesColor));
    (0,_ObjectContent__WEBPACK_IMPORTED_MODULE_4__/* .objectContentCopyProperties */ .Br)(cadObject, object);
    return object;
}
function cadGeom2dCurveToBufferGeometry(cadObject, tesselationParams) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__/* .CadLoaderSync.oc */ .T.oc();
    return _CadCommon__WEBPACK_IMPORTED_MODULE_6__/* .CadGC.withGC */ .Jd.withGC((r) => {
        const curve = cadObject.cadGeometry();
        const curveHandle = new oc.Handle_Geom2d_Curve_2(curve);
        const geom2Dadaptor = r(new oc.Geom2dAdaptor_Curve_2(curveHandle));
        const uniformAbscissa = r(new oc.GCPnts_UniformAbscissa_6(geom2Dadaptor, tesselationParams.curveAbscissa, tesselationParams.curveTolerance));
        let positions;
        let indices;
        const point = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__/* .CadLoaderSync.gp_Pnt2d */ .T.gp_Pnt2d;
        if (uniformAbscissa.IsDone()) {
            const pointsCount = uniformAbscissa.NbPoints();
            positions = new Array(pointsCount * 3).fill(0);
            indices = new Array(pointsCount);
            for (let i = 0; i < pointsCount; i++) {
                curve.D0(uniformAbscissa.Parameter(i + 1), point);
                const index = i * STRIDE;
                positions[index] = point.X();
                positions[index + 1] = point.Y();
                if (i > 0) {
                    indices[(i - 1) * 2] = i - 1;
                    indices[(i - 1) * 2 + 1] = i;
                }
            }
        }
        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();
        geometry.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(positions || [], 3));
        geometry.setIndex(indices || []);
        return geometry;
    });
}
// let _t: gp_Vec2d | undefined;
// let _pivot: gp_Pnt2d | undefined;
function cadGeom2dCurveTransform(curve, t, r, s, p) {
    const _t = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__/* .CadLoaderSync.gp_Vec2d */ .T.gp_Vec2d;
    const _pivot = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__/* .CadLoaderSync.gp_Pnt2d */ .T.gp_Pnt2d;
    _t.SetCoord_2(t.x, t.y);
    _pivot.SetCoord_2(p.x, p.y);
    curve.Translate_1(_t);
    curve.Rotate(_pivot, three__WEBPACK_IMPORTED_MODULE_0__.MathUtils.degToRad(r));
    curve.Scale(_pivot, s);
}
function cadGeom2dCurveTranslate(curve, t) {
    const _t = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__/* .CadLoaderSync.gp_Vec2d */ .T.gp_Vec2d;
    _t.SetCoord_2(t.x, t.y);
    curve.Translate_1(_t);
}
function cadGeom2dCurveClone(src) {
    // Not great, not terrible
    return src.Reversed().get().Reversed().get();
}


/***/ }),

/***/ 52543:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YW": () => (/* binding */ cadPnt2dTransform),
/* harmony export */   "c$": () => (/* binding */ cadPnt2dToObject3D),
/* harmony export */   "jD": () => (/* binding */ cadPnt2dClone)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(57861);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73303);
/* harmony import */ var _CadConstant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(95703);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(16396);
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(37956);






function cadPnt2dToObject3D(cadObject) {
    const point = cadObject.cadGeometry();
    const geo = new three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();
    const positions = [point.X(), point.Y(), 0];
    geo.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(new Float32Array(positions), 3));
    const object = _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_1__/* .BaseSopOperation.createObject */ .U.createObject(geo, _Constant__WEBPACK_IMPORTED_MODULE_2__/* .ObjectType.POINTS */ .LP.POINTS, (0,_CadConstant__WEBPACK_IMPORTED_MODULE_3__/* .cadMaterialPoint */ .lw)());
    (0,_ObjectContent__WEBPACK_IMPORTED_MODULE_4__/* .objectContentCopyProperties */ .Br)(cadObject, object);
    return object;
}
function cadPnt2dTransform(point, t) {
    point.SetX(point.X() + t.x);
    point.SetY(point.Y() + t.y);
}
function cadPnt2dClone(src) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_5__/* .CadLoaderSync.oc */ .T.oc();
    return new oc.gp_Pnt2d_3(src.X(), src.Y());
}


/***/ }),

/***/ 84581:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GT": () => (/* binding */ cadShapeTransform),
/* harmony export */   "J9": () => (/* binding */ cadShapeClone),
/* harmony export */   "ew": () => (/* binding */ cadShapeTranslate)
/* harmony export */ });
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16396);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99477);


const keepGeo = true;
const keepMesh = false;
function cadShapeClone(shape) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    const api = new oc.BRepBuilderAPI_Copy_1();
    api.Perform(shape, keepGeo, keepMesh);
    const newShape = api.Shape();
    api.delete();
    return newShape;
}
// https://dev.opencascade.org/doc/refman/html/class_b_rep_builder_a_p_i___transform.html#details
// we set COPY_GEOMETRY to false,
// so that in some cases, the shape is not duplicated,
// which would be faster
const COPY_GEOMETRY = false;
function cadShapeTransform(shape, t, r, s, p) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    const _t = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_Vec */ .T.gp_Vec;
    const _pivot = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_Pnt */ .T.gp_Pnt;
    const _q = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_Quaternion */ .T.gp_Quaternion;
    const _transform = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_Trsf */ .T.gp_Trsf;
    // const _transformT = CadLoader.gp_TrsfT;
    const _transformR = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_TrsfR */ .T.gp_TrsfR;
    const _transformS = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_TrsfS */ .T.gp_TrsfS;
    _q.SetEulerAngles(oc.gp_EulerSequence.gp_Extrinsic_XYZ, three__WEBPACK_IMPORTED_MODULE_1__.MathUtils.degToRad(r.x), three__WEBPACK_IMPORTED_MODULE_1__.MathUtils.degToRad(r.y), three__WEBPACK_IMPORTED_MODULE_1__.MathUtils.degToRad(r.z));
    _t.SetCoord_2(t.x, t.y, t.z);
    _pivot.SetCoord_2(p.x, p.y, p.z);
    _transform.SetTranslation_1(_t);
    _transformR.SetRotation_2(_q);
    _transformS.SetScale(_pivot, s);
    _transform.Multiply(_transformR);
    _transform.Multiply(_transformS);
    const api = new oc.BRepBuilderAPI_Transform_2(shape, _transform, COPY_GEOMETRY);
    const newShape = api.Shape();
    api.delete();
    return newShape;
}
function cadShapeTranslate(shape, t) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    const transform = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_Trsf */ .T.gp_Trsf;
    const translation = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.gp_Vec */ .T.gp_Vec;
    translation.SetCoord_2(t.x, t.y, t.z);
    transform.SetTranslation_1(translation);
    transform.SetScaleFactor(1);
    const loc = new oc.TopLoc_Location_2(transform);
    const newShape = shape.Moved(loc, false);
    loc.delete();
    return newShape;
}


/***/ }),

/***/ 98666:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SW": () => (/* binding */ cadVertexCreate),
/* harmony export */   "de": () => (/* binding */ cadVertexToObject3D),
/* harmony export */   "kI": () => (/* binding */ cadVertexClone)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99477);
/* harmony import */ var _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(57861);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73303);
/* harmony import */ var _CadConstant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(95703);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16396);
/* harmony import */ var _CadShapeCommon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(84581);
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(37956);







function cadVertexToObject3D(cadObject) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    const vertex = cadObject.cadGeometry();
    const point = oc.BRep_Tool.Pnt(vertex);
    const geo = new three__WEBPACK_IMPORTED_MODULE_1__.BufferGeometry();
    const positions = [point.X(), point.Y(), point.Z()];
    geo.setAttribute('position', new three__WEBPACK_IMPORTED_MODULE_1__.BufferAttribute(new Float32Array(positions), 3));
    const object = _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_2__/* .BaseSopOperation.createObject */ .U.createObject(geo, _Constant__WEBPACK_IMPORTED_MODULE_3__/* .ObjectType.POINTS */ .LP.POINTS, (0,_CadConstant__WEBPACK_IMPORTED_MODULE_4__/* .cadMaterialPoint */ .lw)());
    (0,_ObjectContent__WEBPACK_IMPORTED_MODULE_5__/* .objectContentCopyProperties */ .Br)(cadObject, object);
    return object;
}
function cadVertexCreate(oc, t) {
    const point = new oc.gp_Pnt_3(t.x, t.y, t.z);
    return _vertexFromPoint(oc, point);
}
function _vertexFromPoint(oc, point) {
    const api = new oc.BRepBuilderAPI_MakeVertex(point);
    const vertex = api.Vertex();
    api.delete();
    return vertex;
}
// export function cadVertexTransform(src: TopoDS_Vertex, t: Vector3) {
// 	const oc = CadLoader.oc();
// 	const point = oc.BRep_Tool.Pnt(src);
// 	point.SetX(point.X() + t.x);
// 	point.SetY(point.Y() + t.y);
// 	point.SetZ(point.Z() + t.z);
// 	return _vertexFromPoint(oc, point);
// }
function cadVertexClone(src) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    return oc.TopoDS.Vertex_1((0,_CadShapeCommon__WEBPACK_IMPORTED_MODULE_6__/* .cadShapeClone */ .J9)(src));
}


/***/ }),

/***/ 73257:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Gi": () => (/* binding */ cadWireFromEdge),
/* harmony export */   "Po": () => (/* binding */ cadWireToObject3D),
/* harmony export */   "o0": () => (/* binding */ cadWireClone)
/* harmony export */ });
/* harmony import */ var _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(57861);
/* harmony import */ var _CadConstant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(95703);
/* harmony import */ var _Constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73303);
/* harmony import */ var _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16396);
/* harmony import */ var _CadShapeCommon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(84581);
/* harmony import */ var _CadTraverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(34802);
/* harmony import */ var _CadEdge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(61618);
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(37956);



// import {CoreGeometryBuilderMerge} from '../../builders/Merge';





function cadWireToObject3D(cadObject, tesselationParams) {
    const wire = cadObject.cadGeometry();
    const geometries = [];
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    (0,_CadTraverse__WEBPACK_IMPORTED_MODULE_1__/* .traverseEdges */ .y9)(oc, wire, (edge) => {
        const geometry = (0,_CadEdge__WEBPACK_IMPORTED_MODULE_2__/* .cadEdgeToBufferGeometry */ .Y7)(edge, tesselationParams);
        if (geometry) {
            geometries.push(geometry);
        }
    });
    // do not merge here,
    // do it at the cadNetwork level to control perf
    // const geometry = CoreGeometryBuilderMerge.merge(geometries);
    return geometries.map((geometry) => {
        const object = _engine_operations_sop_Base__WEBPACK_IMPORTED_MODULE_3__/* .BaseSopOperation.createObject */ .U.createObject(geometry, _Constant__WEBPACK_IMPORTED_MODULE_4__/* .ObjectType.LINE_SEGMENTS */ .LP.LINE_SEGMENTS, (0,_CadConstant__WEBPACK_IMPORTED_MODULE_5__/* .cadMaterialLine */ .Ak)(tesselationParams.edgesColor));
        (0,_ObjectContent__WEBPACK_IMPORTED_MODULE_6__/* .objectContentCopyProperties */ .Br)(cadObject, object);
        return object;
    });
    // if (geometry) {
    // 	return BaseSopOperation.createObject(
    // 		geometry,
    // 		ObjectType.LINE_SEGMENTS,
    // 		CAD_MATERIAL[ObjectType.LINE_SEGMENTS].plain
    // 	);
    // }
}
// export function cadWireTransform(edge: TopoDS_Wire, t: Vector3, r: Vector3, s: Vector3) {
// 	return cadShapeTransform(edge, t, r, s);
// }
function cadWireClone(src) {
    const oc = _CadLoaderSync__WEBPACK_IMPORTED_MODULE_0__/* .CadLoaderSync.oc */ .T.oc();
    return oc.TopoDS.Wire_1((0,_CadShapeCommon__WEBPACK_IMPORTED_MODULE_7__/* .cadShapeClone */ .J9)(src));
}
function cadWireFromEdge(oc, edge) {
    const api = new oc.BRepBuilderAPI_MakeWire_1();
    api.Add_1(edge);
    const wire = api.Wire();
    api.delete();
    return wire;
}


/***/ }),

/***/ 1896:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ CsgGeometryType),
/* harmony export */   "u": () => (/* binding */ CSG_GEOMETRY_TYPES_SET)
/* harmony export */ });
var CsgGeometryType;
(function (CsgGeometryType) {
    CsgGeometryType["PATH2"] = "CSGPath2";
    CsgGeometryType["GEOM2"] = "CSGGeom2";
    CsgGeometryType["GEOM3"] = "CSGGeom3";
    // UNKNOWN = 'unknown',
})(CsgGeometryType || (CsgGeometryType = {}));
const CSG_GEOMETRY_TYPES = [CsgGeometryType.PATH2, CsgGeometryType.GEOM2, CsgGeometryType.GEOM3];
const CSG_GEOMETRY_TYPES_SET = new Set(CSG_GEOMETRY_TYPES);


/***/ }),

/***/ 33364:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Gi": () => (/* binding */ isCSGObject),
/* harmony export */   "HZ": () => (/* binding */ csgGeometryTypeFromGeometry),
/* harmony export */   "IY": () => (/* binding */ csgIsGeom2),
/* harmony export */   "Mq": () => (/* binding */ csgIsGeom3),
/* harmony export */   "tB": () => (/* binding */ csgIsPath2)
/* harmony export */ });
/* harmony import */ var _jscad_modeling__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43766);
/* harmony import */ var _jscad_modeling__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_jscad_modeling__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CsgCommon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1896);


function isCSGObject(o) {
    return _CsgCommon__WEBPACK_IMPORTED_MODULE_1__/* .CSG_GEOMETRY_TYPES_SET.has */ .u.has(o.type);
}
function csgIsPath2(geometry) {
    // DO NOT use this function 'geometries.path2'
    // out of this file, as the input isn't type
    // and can therefore be misleading
    return _jscad_modeling__WEBPACK_IMPORTED_MODULE_0__.geometries.path2.isA(geometry);
}
function csgIsGeom2(geometry) {
    // DO NOT use this function 'geometries.path2'
    // out of this file, as the input isn't type
    // and can therefore be misleading
    return _jscad_modeling__WEBPACK_IMPORTED_MODULE_0__.geometries.geom2.isA(geometry);
}
function csgIsGeom3(geometry) {
    // DO NOT use this function 'geometries.path2'
    // out of this file, as the input isn't type
    // and can therefore be misleading
    return _jscad_modeling__WEBPACK_IMPORTED_MODULE_0__.geometries.geom3.isA(geometry);
}
function csgGeometryTypeFromGeometry(geometry) {
    if (csgIsPath2(geometry)) {
        return _CsgCommon__WEBPACK_IMPORTED_MODULE_1__/* .CsgGeometryType.PATH2 */ .d.PATH2;
    }
    if (csgIsGeom2(geometry)) {
        return _CsgCommon__WEBPACK_IMPORTED_MODULE_1__/* .CsgGeometryType.GEOM2 */ .d.GEOM2;
    }
    if (csgIsGeom3(geometry)) {
        return _CsgCommon__WEBPACK_IMPORTED_MODULE_1__/* .CsgGeometryType.GEOM3 */ .d.GEOM3;
    }
    return _CsgCommon__WEBPACK_IMPORTED_MODULE_1__/* .CsgGeometryType.GEOM3 */ .d.GEOM3;
}


/***/ }),

/***/ 42519:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ji": () => (/* binding */ QUAD_OBJECT_TYPES_SET),
/* harmony export */   "MY": () => (/* binding */ QUADObjectType),
/* harmony export */   "yh": () => (/* binding */ QuadTriangulationAttribute)
/* harmony export */ });
var QUADObjectType;
(function (QUADObjectType) {
    QUADObjectType["DEFAULT"] = "Quad";
})(QUADObjectType || (QUADObjectType = {}));
const QUAD_OBJECT_TYPES = [QUADObjectType.DEFAULT];
const QUAD_OBJECT_TYPES_SET = new Set(QUAD_OBJECT_TYPES);
var QuadTriangulationAttribute;
(function (QuadTriangulationAttribute) {
    QuadTriangulationAttribute["INNER_RADIUS"] = "innerRadius";
    QuadTriangulationAttribute["OUTER_RADIUS"] = "outerRadius";
})(QuadTriangulationAttribute || (QuadTriangulationAttribute = {}));


/***/ }),

/***/ 2572:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "J": () => (/* binding */ isTetObject)
/* harmony export */ });
/* harmony import */ var _ObjectContent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(37956);

function isTetObject(o) {
    return o.type == _ObjectContent__WEBPACK_IMPORTED_MODULE_0__/* .CoreObjectType.TET */ .JB.TET;
}


/***/ }),

/***/ 44414:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P1": () => (/* binding */ positionAttributeNameFromBufferGeometry),
/* harmony export */   "SH": () => (/* binding */ pointsFromBufferGeometry),
/* harmony export */   "py": () => (/* binding */ pointsCountFromBufferGeometry)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _GeometryUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(86132);
/* harmony import */ var _Instancer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(62157);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9832);
/* harmony import */ var _ThreejsPoint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(68481);





const dummyMesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh();
function positionAttributeNameFromBufferGeometry(geometry) {
    return (0,_GeometryUtils__WEBPACK_IMPORTED_MODULE_1__/* .markedAsInstance */ .hI)(geometry) ? _Instancer__WEBPACK_IMPORTED_MODULE_2__/* .InstanceAttrib.POSITION */ .R.POSITION : _Attribute__WEBPACK_IMPORTED_MODULE_3__/* .Attribute.POSITION */ .ah.POSITION;
}
function pointsCountFromBufferGeometry(geometry) {
    const attribName = positionAttributeNameFromBufferGeometry(geometry);
    if (!attribName) {
        return 0;
    }
    const positionAttribute = geometry.getAttribute(attribName);
    if (!positionAttribute) {
        return 0;
    }
    return positionAttribute.count;
}
function pointsFromBufferGeometry(geometry) {
    dummyMesh.geometry = geometry;
    const pointsCount = pointsCountFromBufferGeometry(geometry);
    const points = new Array(pointsCount);
    for (let i = 0; i < pointsCount; i++) {
        points[i] = new _ThreejsPoint__WEBPACK_IMPORTED_MODULE_4__/* .ThreejsPoint */ .B(dummyMesh, i);
    }
    return points;
}


/***/ }),

/***/ 16961:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Fs": () => (/* binding */ object3DFactory),
  "zg": () => (/* binding */ objectClassFactoryEnsured),
  "T0": () => (/* binding */ objectInstanceFactoryEnsured),
  "WW": () => (/* binding */ pointClassFactoryEnsured),
  "zT": () => (/* binding */ pointInstanceFactoryEnsured),
  "Uj": () => (/* binding */ primitiveClassFactoryEnsured),
  "iS": () => (/* binding */ primitiveClassFactoryNonAbstract),
  "dL": () => (/* binding */ primitiveInstanceFactoryEnsured),
  "yd": () => (/* binding */ primitiveVerticesCountFactory),
  "rR": () => (/* binding */ vertexClassFactoryEnsured),
  "h$": () => (/* binding */ vertexInstanceFactoryEnsured)
});

// UNUSED EXPORTS: primitiveInstanceFactory

// EXTERNAL MODULE: ./src/core/geometry/ObjectContent.ts
var ObjectContent = __webpack_require__(37956);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsPoint.ts
var ThreejsPoint = __webpack_require__(68481);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsVertex.ts
var ThreejsVertex = __webpack_require__(14250);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsCoreObject.ts + 1 modules
var ThreejsCoreObject = __webpack_require__(24210);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsPrimitiveTriangle.ts
var ThreejsPrimitiveTriangle = __webpack_require__(3455);
// EXTERNAL MODULE: ./node_modules/three/build/three.module.js
var three_module = __webpack_require__(99477);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsPrimitive.ts
var ThreejsPrimitive = __webpack_require__(39527);
// EXTERNAL MODULE: ./src/core/geometry/Attribute.ts
var Attribute = __webpack_require__(9832);
;// CONCATENATED MODULE: ./src/core/geometry/modules/three/ThreejsPrimitiveLineSegment.ts



const _p0 = new three_module.Vector3();
const _p1 = new three_module.Vector3();
class ThreejsPrimitiveLineSegment extends ThreejsPrimitive/* ThreejsPrimitive */.R {
    constructor(object, index) {
        super(object, index);
        this._geometry = object.geometry;
    }
    static primitiveName() {
        return 'line';
    }
    static entitiesCount(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return 0;
        }
        const index = geometry.getIndex();
        if (!index) {
            return 0;
        }
        return index.count / 2;
    }
    static position(object, primitiveIndex, target) {
        if (!(object && object.geometry)) {
            return target;
        }
        const positionAttribute = object.geometry.getAttribute(Attribute/* Attribute.POSITION */.ah.POSITION);
        if (!positionAttribute) {
            return target;
        }
        const positionArray = positionAttribute.array;
        _p0.fromArray(positionArray, primitiveIndex * 3 + 0);
        _p1.fromArray(positionArray, primitiveIndex * 3 + 1);
        target.copy(_p0).add(_p1).divideScalar(2);
        return target;
    }
    static normal(object, primitiveIndex, target) {
        if (!(object && object.geometry)) {
            return target;
        }
        const positionAttribute = object.geometry.getAttribute(Attribute/* Attribute.POSITION */.ah.POSITION);
        if (!positionAttribute) {
            return target;
        }
        const positionArray = positionAttribute.array;
        _p0.fromArray(positionArray, primitiveIndex * 3 + 0);
        _p1.fromArray(positionArray, primitiveIndex * 3 + 1);
        target.copy(_p1).sub(_p1).normalize();
        return target;
    }
    position(target) {
        return this.constructor.position(this._object, this._index, target);
    }
    normal(target) {
        return this.constructor.normal(this._object, this._index, target);
    }
    static computeVertexNormalsIfAttributeVersionChanged(object) { }
    static stride() {
        return 2;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/three/ThreejsPrimitivePoint.ts



const ThreejsPrimitivePoint_p0 = new three_module.Vector3();
class ThreejsPrimitivePoint extends ThreejsPrimitive/* ThreejsPrimitive */.R {
    constructor(object, index) {
        super(object, index);
        this._geometry = object.geometry;
    }
    static primitiveName() {
        return 'point';
    }
    static entitiesCount(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return 0;
        }
        const index = geometry.getIndex();
        if (!index) {
            return 0;
        }
        return index.count;
    }
    static position(object, primitiveIndex, target) {
        if (!(object && object.geometry)) {
            return target;
        }
        const positionAttribute = object.geometry.getAttribute(Attribute/* Attribute.POSITION */.ah.POSITION);
        if (!positionAttribute) {
            return target;
        }
        const positionArray = positionAttribute.array;
        ThreejsPrimitivePoint_p0.fromArray(positionArray, primitiveIndex * 3 + 0);
        target.copy(ThreejsPrimitivePoint_p0);
        return target;
    }
    static normal(object, primitiveIndex, target) {
        return target.set(0, 1, 0);
    }
    position(target) {
        return this.constructor.position(this._object, this._index, target);
    }
    normal(target) {
        return this.constructor.normal(this._object, this._index, target);
    }
    static computeVertexNormalsIfAttributeVersionChanged(object) { }
    static stride() {
        return 1;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/three/ThreeModule.ts







// point methods
const pointClassFactory = (object) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        return ThreejsPoint/* ThreejsPoint */.B;
    }
};
const pointClassFactoryEnsured = () => ThreejsPoint/* ThreejsPoint */.B;
const pointInstanceFactory = (object, index = 0) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        return new ThreejsPoint/* ThreejsPoint */.B(object, index);
    }
};
const pointInstanceFactoryEnsured = (object, index = 0) => {
    return new ThreejsPoint/* ThreejsPoint */.B(object, index);
};
// vertex methods
const vertexClassFactory = (object) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        return ThreejsVertex/* ThreejsVertex */.C;
    }
};
const vertexClassFactoryEnsured = () => ThreejsVertex/* ThreejsVertex */.C;
const vertexInstanceFactory = (object, index = 0) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        return new ThreejsVertex/* ThreejsVertex */.C(object, index);
    }
};
const vertexInstanceFactoryEnsured = (object, index = 0) => {
    return new ThreejsVertex/* ThreejsVertex */.C(object, index);
};
// primitive methods
const primitiveClassFactoryNonAbstract = (object) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        if (object.isMesh) {
            return ThreejsPrimitiveTriangle/* ThreejsPrimitiveTriangle */.G;
        }
        if (object.isLineSegments) {
            return ThreejsPrimitiveLineSegment;
        }
        if (object.isPoints) {
            return ThreejsPrimitivePoint;
        }
        return ThreejsPrimitiveTriangle/* ThreejsPrimitiveTriangle */.G;
    }
};
const primitiveClassFactoryEnsured = () => ThreejsPrimitiveTriangle/* ThreejsPrimitiveTriangle */.G;
const primitiveClassFactory = primitiveClassFactoryNonAbstract;
const primitiveInstanceFactory = (object, index = 0) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        if (object.isMesh) {
            return new ThreejsPrimitiveTriangle/* ThreejsPrimitiveTriangle */.G(object, index);
        }
        if (object.isLineSegments) {
            return new ThreejsPrimitiveLineSegment(object, index);
        }
        if (object.isPoints) {
            return new ThreejsPrimitivePoint(object, index);
        }
    }
};
const primitiveInstanceFactoryEnsured = (object, index = 0) => {
    return new ThreejsPrimitiveTriangle/* ThreejsPrimitiveTriangle */.G(object, index);
};
const primitiveVerticesCountFactory = (object) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        if (object.isMesh) {
            return 3;
        }
        if (object.isLineSegments) {
            return 2;
        }
        if (object.isPoints) {
            return 1;
        }
    }
    return 0;
};
// object methods
const objectClassFactory = (object) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object) || object.isObject3D) {
        return ThreejsCoreObject/* ThreejsCoreObject */.W;
    }
};
const objectClassFactoryEnsured = () => ThreejsCoreObject/* ThreejsCoreObject */.W;
const objectInstanceFactory = (object, index = 0) => {
    if ((0,ObjectContent/* isObject3D */.nK)(object)) {
        return new ThreejsCoreObject/* ThreejsCoreObject */.W(object, index);
    }
};
const objectInstanceFactoryEnsured = (object, index = 0) => {
    return new ThreejsCoreObject/* ThreejsCoreObject */.W(object, index);
};
//
const object3DFactory = {
    pointClass: pointClassFactory,
    pointInstance: pointInstanceFactory,
    vertexClass: vertexClassFactory,
    vertexInstance: vertexInstanceFactory,
    primitiveClass: primitiveClassFactory,
    primitiveInstance: primitiveInstanceFactory,
    objectClass: objectClassFactory,
    objectInstance: objectInstanceFactory,
};


/***/ }),

/***/ 24210:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "W": () => (/* binding */ ThreejsCoreObject)
});

// EXTERNAL MODULE: ./node_modules/three/build/three.module.js
var three_module = __webpack_require__(99477);
// EXTERNAL MODULE: ./src/core/ObjectUtils.ts + 101 modules
var ObjectUtils = __webpack_require__(41474);
;// CONCATENATED MODULE: ./src/core/geometry/Geometry.ts

function cloneBufferGeometry(srcGeometry) {
    const clonedGeometry = srcGeometry.clone();
    if (srcGeometry.userData) {
        clonedGeometry.userData = (0,ObjectUtils/* objectCloneDeep */.qI)(srcGeometry.userData);
    }
    return clonedGeometry;
}

// EXTERNAL MODULE: ./src/core/geometry/Constant.ts
var Constant = __webpack_require__(73303);
// EXTERNAL MODULE: ./src/core/geometry/entities/object/BaseCoreObjectUtils.ts
var BaseCoreObjectUtils = __webpack_require__(70965);
// EXTERNAL MODULE: ./src/core/geometry/Material.ts
var Material = __webpack_require__(64802);
// EXTERNAL MODULE: ./src/core/geometry/bvh/ThreeMeshBVHHelper.ts
var ThreeMeshBVHHelper = __webpack_require__(15476);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/builders/Merge.ts
var Merge = __webpack_require__(60793);
// EXTERNAL MODULE: ./src/core/geometry/ObjectContent.ts
var ObjectContent = __webpack_require__(37956);
// EXTERNAL MODULE: ./src/core/geometry/entities/object/BaseCoreObject.ts + 1 modules
var BaseCoreObject = __webpack_require__(78841);
// EXTERNAL MODULE: ./src/core/Transform.ts
var Transform = __webpack_require__(60058);
// EXTERNAL MODULE: ./src/engine/poly/Assert.ts
var Assert = __webpack_require__(53120);
// EXTERNAL MODULE: ./src/core/TransformSpace.ts
var TransformSpace = __webpack_require__(75088);
// EXTERNAL MODULE: ./src/engine/operations/sop/_Base.ts
var _Base = __webpack_require__(57861);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreeModule.ts + 2 modules
var ThreeModule = __webpack_require__(16961);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsVertex.ts
var ThreejsVertex = __webpack_require__(14250);
// EXTERNAL MODULE: ./src/core/geometry/modules/three/ThreejsPoint.ts
var ThreejsPoint = __webpack_require__(68481);
// EXTERNAL MODULE: ./src/core/ArrayUtils.ts
var ArrayUtils = __webpack_require__(69374);
;// CONCATENATED MODULE: ./src/core/geometry/modules/three/ThreejsCoreObject.ts


















const COMPUTE_PRECISE_BOUNDS = true;
const SPHERE_EMPTY = new three_module.Sphere(new three_module.Vector3(0, 0, 0), 0);
class ThreejsCoreObject extends BaseCoreObject/* BaseCoreObject */.q {
    constructor(_object, index) {
        super(_object, index);
        this._object = _object;
    }
    humanType() {
        return (0,Constant/* dataFromObject */.$5)(this._object).humanName;
    }
    object() {
        return this._object;
    }
    geometry() {
        return this._object.geometry;
    }
    // object():Object3D{
    // 	return this._object
    // }
    // coreGeometry(): CoreGeometry | null {
    // 	const geo = this.geometry();
    // 	if (geo) {
    // 		return new CoreGeometry(geo);
    // 	} else {
    // 		return null;
    // 	}
    // 	// const geo = this.geometry()
    // 	// if (geo) {
    // 	// 	return new CoreGeometry(geo)
    // 	// } else {
    // 	// 	return null
    // 	// }
    // }
    static objectData(object) {
        const data = (0,BaseCoreObjectUtils/* objectData */.Sq)(object);
        data.verticesCount = ThreejsVertex/* ThreejsVertex.entitiesCount */.C.entitiesCount(object);
        data.pointsCount = ThreejsPoint/* ThreejsPoint.entitiesCount */.B.entitiesCount(object);
        const primitiveClass = (0,ThreeModule/* primitiveClassFactoryNonAbstract */.iS)(object);
        data.primitivesCount = (primitiveClass === null || primitiveClass === void 0 ? void 0 : primitiveClass.entitiesCount(object)) || 0;
        data.primitiveName = (primitiveClass === null || primitiveClass === void 0 ? void 0 : primitiveClass.primitiveName()) || '';
        return data;
    }
    static position(object, target) {
        target.copy(object.position);
    }
    static boundingBox(object, target) {
        target.setFromObject(object, COMPUTE_PRECISE_BOUNDS);
    }
    static geometryBoundingBox(object, target) {
        const geometry = object.geometry;
        if (geometry) {
            if (!geometry.boundingBox) {
                geometry.computeBoundingBox();
            }
            if (geometry.boundingBox) {
                target.copy(geometry.boundingBox);
            }
        }
        else {
            target.makeEmpty();
        }
    }
    static boundingSphere(object, target) {
        const geometry = object.geometry;
        if (!geometry) {
            target.copy(SPHERE_EMPTY);
            return;
        }
        geometry.computeBoundingSphere();
        const computedSphere = geometry.boundingSphere;
        if (!computedSphere) {
            target.copy(SPHERE_EMPTY);
            return;
        }
        target.copy(computedSphere);
    }
    static geometryBoundingSphere(object, target) {
        this.boundingSphere(object, target);
    }
    // computeVertexNormals() {
    // 	this.coreGeometry()?.computeVertexNormals();
    // }
    static clone(srcObject) {
        const clonedObject = srcObject.clone();
        var sourceLookup = new Map();
        var cloneLookup = new Map();
        ThreejsCoreObject.parallelTraverse(srcObject, clonedObject, function (sourceNode, clonedNode) {
            sourceLookup.set(clonedNode, sourceNode);
            cloneLookup.set(sourceNode, clonedNode);
        });
        clonedObject.traverse(function (node) {
            const srcNode = sourceLookup.get(node);
            const meshNode = node;
            if (meshNode.geometry && srcNode && srcNode.geometry) {
                const srcNodeGeometry = srcNode.geometry;
                meshNode.geometry = cloneBufferGeometry(srcNodeGeometry);
                ThreeMeshBVHHelper/* ThreeMeshBVHHelper.copyBVH */.h.copyBVH(meshNode, srcNode);
                // const mesh_node_geometry = meshNode.geometry as BufferGeometry;
                // if (mesh_node_geometry.userData) {
                // 	mesh_node_geometry.userData = objectCloneDeep(srcNodeGeometry.userData);
                // }
            }
            if (meshNode.material) {
                // no need to assign the material here
                // as this should already be done in the .clone() method.
                // Otherwise, when this is assigned here, some objects that rely on their own mat
                // such as sop/Reflector stop working when cloned
                // mesh_node.material = src_node.material;
                (0,Material/* applyCustomMaterials */.D4)(node, meshNode.material);
                // prevents crashes for linesegments with shader material such as the line dashed instance
                // TODO: test
                const material_with_color = meshNode.material;
                if (material_with_color.color == null) {
                    material_with_color.color = new three_module.Color(1, 1, 1);
                }
            }
            if (srcNode) {
                if (srcNode.userData) {
                    node.userData = (0,ObjectUtils/* objectCloneDeep */.qI)(srcNode.userData);
                }
                const src_node_with_animations = srcNode;
                if (src_node_with_animations.animations) {
                    node.animations = src_node_with_animations.animations.map((animation) => animation.clone());
                }
                const skinned_node = node;
                if (skinned_node.isSkinnedMesh) {
                    var clonedMesh = skinned_node;
                    var sourceMesh = srcNode;
                    var sourceBones = sourceMesh.skeleton.bones;
                    clonedMesh.skeleton = sourceMesh.skeleton.clone();
                    clonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);
                    const new_bones = sourceBones.map(function (bone) {
                        return cloneLookup.get(bone);
                    });
                    clonedMesh.skeleton.bones = new_bones;
                    clonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);
                }
            }
        });
        return clonedObject;
    }
    static parallelTraverse(a, b, callback) {
        callback(a, b);
        for (var i = 0; i < a.children.length; i++) {
            const childA = a.children[i];
            const childB = b.children[i];
            if (childA && childB) {
                this.parallelTraverse(childA, childB, callback);
            }
        }
    }
    static applyMatrix(object, matrix, transformTargetType, transformSpace, transformMode) {
        switch (transformTargetType) {
            case Transform/* TransformTargetType.OBJECT */.dH.OBJECT: {
                (0,TransformSpace/* applyTransformWithSpaceToObject */.qo)(object, matrix, transformSpace, transformMode);
                // this._applyMatrixToObject(object, matrix);
                return;
            }
            case Transform/* TransformTargetType.GEOMETRY */.dH.GEOMETRY: {
                const geometry = object.geometry;
                if (geometry) {
                    geometry.applyMatrix4(matrix);
                }
                return;
            }
        }
        Assert/* TypeAssert.unreachable */.f.unreachable(transformTargetType);
    }
    static mergeCompact(options) {
        const { objects, material, objectType, mergedObjects, onError } = options;
        const firstObject = objects[0];
        if (!firstObject) {
            return;
        }
        const geometries = [];
        for (const object of objects) {
            const geometry = object.geometry;
            if (geometry) {
                geometry.applyMatrix4(object.matrix);
                geometries.push(geometry);
            }
        }
        try {
            const mergedGeometry = Merge/* CoreGeometryBuilderMerge.merge */.O.merge(geometries);
            if (mergedGeometry) {
                const newObject = _Base/* BaseSopOperation.createObject */.U.createObject(mergedGeometry, objectType, material);
                if (newObject) {
                    (0,ObjectContent/* objectContentCopyProperties */.Br)(firstObject, newObject);
                    mergedObjects.push(newObject);
                }
            }
            else {
                onError('merge failed, check that input geometries have the same attributes');
            }
        }
        catch (e) {
            onError(e.message || 'unknown error');
        }
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static relatedPrimitiveIds(object, index, target, traversedRelatedEntityData) {
        const _primitiveClassFactory = (0,ThreeModule/* primitiveClassFactoryNonAbstract */.iS)(object);
        if (!_primitiveClassFactory) {
            target.length = 0;
            return;
        }
        const count = _primitiveClassFactory === null || _primitiveClassFactory === void 0 ? void 0 : _primitiveClassFactory.entitiesCount(object);
        target.length = count;
        for (let i = 0; i < count; i++) {
            target[i] = i;
        }
        if (traversedRelatedEntityData && traversedRelatedEntityData[Constant/* AttribClass.PRIMITIVE */.io.PRIMITIVE].ids != target) {
            (0,ArrayUtils/* arrayCopy */.gc)(target, traversedRelatedEntityData[Constant/* AttribClass.PRIMITIVE */.io.PRIMITIVE].ids);
        }
    }
    static relatedPrimitiveClass(object) {
        return (0,ThreeModule/* primitiveClassFactoryNonAbstract */.iS)(object);
    }
}


/***/ }),

/***/ 68481:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "B": () => (/* binding */ ThreejsPoint)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(99477);
/* harmony import */ var _entities_point_CorePoint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87727);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9832);
/* harmony import */ var _ObjectUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(41474);
/* harmony import */ var _GeometryUtils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(86132);
/* harmony import */ var _CoreThreejsPointUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(44414);
/* harmony import */ var _entities_utils_Common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(81323);
/* harmony import */ var _ThreejsVertex__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14250);
/* harmony import */ var _entities_point_CorePointUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(81669);









const INDEX_ATTRIB_VALUES = 'indexedAttribValues';
const target = {
    attributeAdded: false,
    values: [],
};
class ThreejsPoint extends _entities_point_CorePoint__WEBPACK_IMPORTED_MODULE_0__/* .CorePoint */ .A {
    constructor(object, index) {
        super(object, index);
        this._updateGeometry();
    }
    setIndex(index, object) {
        this._index = index;
        if (object) {
            this._object = object;
            this._updateGeometry();
        }
        return this;
    }
    _updateGeometry() {
        const geometry = this._object.geometry;
        if (geometry) {
            this._geometry = geometry;
        }
    }
    geometry() {
        return this._geometry;
    }
    static addAttribute(object, attribName, attribute) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        geometry.setAttribute(attribName, attribute);
    }
    static attributes(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        return geometry.attributes;
    }
    static entitiesCount(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return 0;
        }
        return (0,_CoreThreejsPointUtils__WEBPACK_IMPORTED_MODULE_1__/* .pointsCountFromBufferGeometry */ .py)(geometry);
    }
    static positionAttributeName(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return null;
        }
        return (0,_CoreThreejsPointUtils__WEBPACK_IMPORTED_MODULE_1__/* .positionAttributeNameFromBufferGeometry */ .P1)(geometry);
    }
    static position(object, index, target) {
        const geometry = object.geometry;
        if (!geometry) {
            return null;
        }
        const { array } = geometry.getAttribute(_Attribute__WEBPACK_IMPORTED_MODULE_2__/* .Attribute.POSITION */ .ah.POSITION);
        return target.fromArray(array, index * 3);
    }
    position(target) {
        if (!this._geometry) {
            return target;
        }
        const { array } = this._geometry.getAttribute(_Attribute__WEBPACK_IMPORTED_MODULE_2__/* .Attribute.POSITION */ .ah.POSITION);
        return target.fromArray(array, this._index * 3);
    }
    normal(target) {
        if (!this._geometry) {
            return target;
        }
        const { array } = this._geometry.getAttribute(_Attribute__WEBPACK_IMPORTED_MODULE_2__/* .Attribute.NORMAL */ .ah.NORMAL);
        return target.fromArray(array, this._index * 3);
    }
    static computeNormals(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return null;
        }
        geometry.computeVertexNormals();
    }
    static markAttribAsNeedsUpdate(object, attribName) {
        const geometry = object.geometry;
        if (!geometry) {
            return null;
        }
        const attribute = geometry.getAttribute(attribName);
        if (!attribute) {
            return;
        }
        attribute.needsUpdate = true;
    }
    //
    //
    //
    //
    //
    static userDataAttribs(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return {};
        }
        return (geometry.userData[INDEX_ATTRIB_VALUES] = geometry.userData[INDEX_ATTRIB_VALUES] || {});
    }
    static setIndexedAttribute(object, attribName, values, indices) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        this.setIndexedAttributeValues(object, attribName, values);
        geometry.setAttribute(attribName, new three__WEBPACK_IMPORTED_MODULE_3__.Int32BufferAttribute(indices, 1));
        geometry.getAttribute(attribName).needsUpdate = true;
    }
    static attribValueIndex(object, index, attribName) {
        if (this.isAttribIndexed(object, attribName)) {
            const geometry = object.geometry;
            if (geometry) {
                return geometry.getAttribute(attribName).array[index];
            }
        }
        return -1;
    }
    //
    //
    //
    //
    //
    static renameAttribute(object, oldName, newName) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        if (this.isAttribIndexed(object, oldName)) {
            this.userDataAttribs(object)[newName] = (0,_ObjectUtils__WEBPACK_IMPORTED_MODULE_4__/* .objectCloneDeep */ .qI)(this.userDataAttribs(object)[oldName]);
            delete this.userDataAttribs(object)[oldName];
        }
        const oldAttrib = geometry.getAttribute(oldName);
        geometry.setAttribute(newName, new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute(oldAttrib.array, oldAttrib.itemSize));
        return geometry.deleteAttribute(oldName);
    }
    static deleteAttribute(object, attribName) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        if (this.isAttribIndexed(object, attribName)) {
            delete this.userDataAttribs(object)[attribName];
        }
        return geometry.deleteAttribute(attribName);
    }
    static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        (0,_entities_utils_Common__WEBPACK_IMPORTED_MODULE_5__/* .attributeNumericValues */ .ex)(object, _entities_point_CorePointUtils__WEBPACK_IMPORTED_MODULE_6__/* .pointsCountFromObject */ .En, size, defaultValue, target);
        if (target.attributeAdded) {
            if ((0,_GeometryUtils__WEBPACK_IMPORTED_MODULE_7__/* .markedAsInstance */ .hI)(geometry)) {
                const valuesAsTypedArray = new Float32Array(target.values);
                geometry.setAttribute(attribName.trim(), new three__WEBPACK_IMPORTED_MODULE_3__.InstancedBufferAttribute(valuesAsTypedArray, size));
            }
            else {
                geometry.setAttribute(attribName.trim(), new three__WEBPACK_IMPORTED_MODULE_3__.Float32BufferAttribute(target.values, size));
            }
        }
        else {
            console.warn(defaultValue);
            throw `CoreThreejsPoint.addNumericAttrib error: no other default value allowed for now (default given: ${defaultValue})`;
        }
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static relatedVertexIds(object, pointIndex, target, traversedRelatedEntityData) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        const index = geometry.getIndex();
        if (!index) {
            return;
        }
        const indexArray = index.array;
        let i = 0;
        for (const indexValue of indexArray) {
            if (indexValue == pointIndex) {
                target.push(i);
            }
            i++;
        }
    }
    static relatedVertexClass(object) {
        return _ThreejsVertex__WEBPACK_IMPORTED_MODULE_8__/* .ThreejsVertex */ .C;
    }
}


/***/ }),

/***/ 39527:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R": () => (/* binding */ ThreejsPrimitive)
/* harmony export */ });
/* harmony import */ var _entities_primitive_CorePrimitive__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19760);
/* harmony import */ var _entities_primitive_CorePrimitiveUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99328);
/* harmony import */ var _ThreejsVertex__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(14250);
/* harmony import */ var _entities_utils_Common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81323);
/* harmony import */ var _ThreejsCoreObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24210);





const target = {
    attributeAdded: false,
    values: [],
};
class ThreejsPrimitive extends _entities_primitive_CorePrimitive__WEBPACK_IMPORTED_MODULE_0__/* .CorePrimitive */ .n {
    constructor(object, index) {
        super(object, index);
        this._updateGeometry();
    }
    setIndex(index, object) {
        this._index = index;
        if (object) {
            this._object = object;
            this._updateGeometry();
        }
        return this;
    }
    _updateGeometry() {
        const geometry = this._object.geometry;
        if (geometry) {
            this._geometry = geometry;
        }
    }
    geometry() {
        return this._geometry;
    }
    static addAttribute(object, attribName, attribute) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        attributes[attribName] = attribute;
    }
    static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {
        const primitivesCount = this.entitiesCount(object);
        target.values = new Array(primitivesCount * size);
        (0,_entities_utils_Common__WEBPACK_IMPORTED_MODULE_1__/* .attributeNumericValues */ .ex)(object, _entities_primitive_CorePrimitiveUtils__WEBPACK_IMPORTED_MODULE_2__/* .primitivesCountFromObject */ .KL, size, defaultValue, target);
        const attribute = {
            isString: false,
            array: target.values,
            itemSize: size,
        };
        this.addAttribute(object, attribName, attribute);
    }
    static attributes(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        if (!geometry.userData.primAttributes) {
            geometry.userData.primAttributes = {};
        }
        return geometry.userData.primAttributes;
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static stride() {
        return 3;
    }
    static relatedVertexIds(object, primitiveIndex, target) {
        const geometry = object.geometry;
        if (!geometry) {
            target.length = 0;
            return;
        }
        const stride = this.stride();
        target.length = stride;
        for (let i = 0; i < stride; i++) {
            target[i] = primitiveIndex * stride + i;
        }
    }
    static relatedVertexClass(object) {
        return _ThreejsVertex__WEBPACK_IMPORTED_MODULE_3__/* .ThreejsVertex */ .C;
    }
    static relatedObjectClass(object) {
        return _ThreejsCoreObject__WEBPACK_IMPORTED_MODULE_4__/* .ThreejsCoreObject */ .W;
    }
}


/***/ }),

/***/ 3455:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": () => (/* binding */ ThreejsPrimitiveTriangle)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _ThreejsPrimitive__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(39527);
/* harmony import */ var _builders_Mesh__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(42741);
/* harmony import */ var _Attribute__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9832);




const _triangle = new three__WEBPACK_IMPORTED_MODULE_0__.Triangle();
const _p0 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const _p1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const _p2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
const normalsComputedWithPositionAttributeVersion = new Map();
class ThreejsPrimitiveTriangle extends _ThreejsPrimitive__WEBPACK_IMPORTED_MODULE_1__/* .ThreejsPrimitive */ .R {
    constructor(object, index) {
        super(object, index);
        this._geometry = object.geometry;
    }
    static primitiveName() {
        return 'triangle';
    }
    static entitiesCount(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return 0;
        }
        const index = geometry.getIndex();
        if (!index) {
            return 0;
        }
        return index.count / 3;
    }
    static position(object, primitiveIndex, target) {
        if (!(object && object.geometry)) {
            return target;
        }
        const positionAttribute = object.geometry.getAttribute(_Attribute__WEBPACK_IMPORTED_MODULE_2__/* .Attribute.POSITION */ .ah.POSITION);
        if (!positionAttribute) {
            return target;
        }
        const positionArray = positionAttribute.array;
        _p0.fromArray(positionArray, primitiveIndex * 3 + 0);
        _p1.fromArray(positionArray, primitiveIndex * 3 + 1);
        _p2.fromArray(positionArray, primitiveIndex * 3 + 2);
        target.copy(_p0).add(_p1).add(_p2).divideScalar(3);
        return target;
    }
    static normal(object, primitiveIndex, target) {
        if (!(object && object.geometry)) {
            return target;
        }
        const positionAttribute = object.geometry.getAttribute(_Attribute__WEBPACK_IMPORTED_MODULE_2__/* .Attribute.POSITION */ .ah.POSITION);
        if (!positionAttribute) {
            return target;
        }
        const positionArray = positionAttribute.array;
        _triangle.a.fromArray(positionArray, primitiveIndex * 3 + 0);
        _triangle.b.fromArray(positionArray, primitiveIndex * 3 + 1);
        _triangle.c.fromArray(positionArray, primitiveIndex * 3 + 2);
        _triangle.getNormal(target);
        return target;
    }
    position(target) {
        return this.constructor.position(this._object, this._index, target);
    }
    normal(target) {
        return this.constructor.normal(this._object, this._index, target);
    }
    static computeVertexNormalsIfAttributeVersionChanged(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return null;
        }
        const positionAttribute = geometry.getAttribute(_Attribute__WEBPACK_IMPORTED_MODULE_2__/* .Attribute.POSITION */ .ah.POSITION);
        if (!positionAttribute) {
            return;
        }
        if (!(positionAttribute instanceof three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute)) {
            return;
        }
        let lastVersion = normalsComputedWithPositionAttributeVersion.get(geometry.uuid);
        if (lastVersion == null || lastVersion != positionAttribute.version) {
            geometry.computeVertexNormals();
            normalsComputedWithPositionAttributeVersion.set(geometry.uuid, positionAttribute.version);
        }
    }
    builder() {
        return _builders_Mesh__WEBPACK_IMPORTED_MODULE_3__/* .threeMeshFromPrimitives */ .L;
    }
    static stride() {
        return 3;
    }
}


/***/ }),

/***/ 14250:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": () => (/* binding */ ThreejsVertex)
/* harmony export */ });
/* harmony import */ var _entities_vertex_CoreVertex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(38080);
/* harmony import */ var _entities_vertex_CoreVertexUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(26293);
/* harmony import */ var _ThreeModule__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16961);
/* harmony import */ var _ThreejsPoint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(68481);
/* harmony import */ var _entities_utils_Common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(81323);





const target = {
    attributeAdded: false,
    values: [],
};
class ThreejsVertex extends _entities_vertex_CoreVertex__WEBPACK_IMPORTED_MODULE_0__/* .CoreVertex */ .k {
    constructor(object, index) {
        super(object, index);
        this._updateGeometry();
    }
    setIndex(index, object) {
        this._index = index;
        if (object) {
            this._object = object;
            this._updateGeometry();
        }
        return this;
    }
    _updateGeometry() {
        const geometry = this._object.geometry;
        if (geometry) {
            this._geometry = geometry;
        }
    }
    geometry() {
        return this._geometry;
    }
    static addAttribute(object, attribName, attribute) {
        const attributes = this.attributes(object);
        if (!attributes) {
            return;
        }
        attributes[attribName] = attribute;
    }
    static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {
        const verticesCount = this.entitiesCount(object);
        target.values = new Array(verticesCount * size);
        (0,_entities_utils_Common__WEBPACK_IMPORTED_MODULE_1__/* .attributeNumericValues */ .ex)(object, _entities_vertex_CoreVertexUtils__WEBPACK_IMPORTED_MODULE_2__/* .verticesCountFromObject */ .D1, size, defaultValue, target);
        const attribute = {
            isString: false,
            array: target.values,
            itemSize: size,
        };
        this.addAttribute(object, attribName, attribute);
    }
    static attributes(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        if (!geometry.userData.vertexAttributes) {
            geometry.userData.vertexAttributes = {};
        }
        return geometry.userData.vertexAttributes;
    }
    static indexAttribute(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        return geometry.getIndex();
    }
    static setIndexAttribute(object, index) {
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        geometry.setIndex(index);
    }
    static entitiesCount(object) {
        const geometry = object.geometry;
        if (!geometry) {
            return 0;
        }
        const index = geometry.getIndex();
        if (!index) {
            return 0;
        }
        return index.count;
    }
    position(target) {
        console.warn('CoreThreejsVertex.position not implemented');
        return target;
    }
    normal(target) {
        console.warn('CoreThreejsVertex.normal not implemented');
        return target;
    }
    //
    //
    // RELATED ENTITIES
    //
    //
    static relatedPrimitiveIds(object, pointIndex, target) {
        target.length = 1;
        const index = Math.floor(pointIndex / (0,_ThreeModule__WEBPACK_IMPORTED_MODULE_3__/* .primitiveVerticesCountFactory */ .yd)(object));
        target[0] = index;
    }
    // static override  relatedPrimitives<T extends CoreObjectType>(object:BaseCoreObject<T>,vertexIndex:number,target: CorePrimitive<T>[]): void {
    // 	this.relatedPrimitiveIds(object,vertexIndex,_ids)
    // 	target.length = _ids.length;
    // 	let i=0
    // 	for(const id of _ids){
    // 		target[i]=(primitiveInstanceFactory(object as any as Mesh,id)) as CorePrimitive<T>
    // 		i++
    // 	}
    // }
    // override relatedPrimitives<T extends CoreObjectType>(target: CorePrimitive<T>[]): void {
    // 	target.length = 0;
    // 	if (!this._object) {
    // 		return;
    // 	}
    // 	const index = Math.floor(this._index / primitiveVerticesCountFactory(this._object));
    // 	const primitive = primitiveInstanceFactory(this._object, index) as CorePrimitive<T> | undefined;
    // 	if (!primitive) {
    // 		return;
    // 	}
    // 	target.push(primitive);
    // }
    static relatedPointIds(object, pointIndex, target) {
        target.length = 0;
        const geometry = object.geometry;
        if (!geometry) {
            return;
        }
        const index = geometry.getIndex();
        if (!index) {
            return;
        }
        const indexArray = index.array;
        const indexValue = indexArray[pointIndex];
        target[0] = indexValue;
    }
    static relatedPointClass(object) {
        return _ThreejsPoint__WEBPACK_IMPORTED_MODULE_4__/* .ThreejsPoint */ .B;
    }
    static relatedPrimitiveClass(object) {
        return (0,_ThreeModule__WEBPACK_IMPORTED_MODULE_3__/* .primitiveClassFactoryNonAbstract */ .iS)(object);
    }
}


/***/ }),

/***/ 60793:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "O": () => (/* binding */ CoreGeometryBuilderMerge)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var three_examples_jsm_utils_BufferGeometryUtils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(40140);
/* harmony import */ var _util_IndexBuilder__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69285);
/* harmony import */ var _CoreThreejsPointUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(44414);
/* harmony import */ var _ThreejsPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68481);





const dummyMesh = new three__WEBPACK_IMPORTED_MODULE_0__.Mesh();
class CoreGeometryBuilderMerge {
    static merge(geometries) {
        if (geometries.length === 0) {
            return;
        }
        //
        // 1/4. add indices if none
        //
        for (const geometry of geometries) {
            _util_IndexBuilder__WEBPACK_IMPORTED_MODULE_1__/* .CoreGeometryIndexBuilder.createIndexIfNone */ .f.createIndexIfNone(geometry);
        }
        //
        // 2/4. set the new attrib indices for the indexed attributes
        //
        // const core_geometries = geometries.map((geometry) => new CoreGeometry(geometry));
        dummyMesh.geometry = geometries[0];
        const indexed_attribute_names = _ThreejsPoint__WEBPACK_IMPORTED_MODULE_2__/* .ThreejsPoint.indexedAttributeNames */ .B.indexedAttributeNames(dummyMesh);
        const new_values_by_attribute_name = {};
        for (const indexed_attribute_name of indexed_attribute_names) {
            const index_by_values = {};
            const all_geometries_points = [];
            for (const geometry of geometries) {
                const points = (0,_CoreThreejsPointUtils__WEBPACK_IMPORTED_MODULE_3__/* .pointsFromBufferGeometry */ .SH)(geometry);
                for (const point of points) {
                    all_geometries_points.push(point);
                    const value = point.indexedAttribValue(indexed_attribute_name);
                    //value_index = point.attribValueIndex(indexed_attribute_name)
                    // TODO: typescript: that doesn't seem right
                    if (value) {
                        index_by_values[value] != null
                            ? index_by_values[value]
                            : (index_by_values[value] = Object.keys(index_by_values).length);
                    }
                }
            }
            const values = Object.keys(index_by_values);
            for (const point of all_geometries_points) {
                const value = point.indexedAttribValue(indexed_attribute_name);
                if (value) {
                    const new_index = index_by_values[value];
                    point.setAttribIndex(indexed_attribute_name, new_index);
                }
            }
            new_values_by_attribute_name[indexed_attribute_name] = values;
        }
        //
        // 3/4. merge the geos
        //
        const mergedGeometry = (0,three_examples_jsm_utils_BufferGeometryUtils__WEBPACK_IMPORTED_MODULE_4__/* .mergeGeometries */ .n4)(geometries);
        //
        // 4/4. add the index attrib values
        //
        // const merged_core_geometry = new CoreGeometry(mergedGeometry);
        dummyMesh.geometry = mergedGeometry;
        Object.keys(new_values_by_attribute_name).forEach((indexed_attribute_name) => {
            const values = new_values_by_attribute_name[indexed_attribute_name];
            _ThreejsPoint__WEBPACK_IMPORTED_MODULE_2__/* .ThreejsPoint.setIndexedAttributeValues */ .B.setIndexedAttributeValues(dummyMesh, indexed_attribute_name, values);
        });
        if (mergedGeometry) {
            delete mergedGeometry.userData.mergedUserData;
        }
        return mergedGeometry;
    }
}


/***/ }),

/***/ 42741:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "L": () => (/* binding */ threeMeshFromPrimitives),
/* harmony export */   "t": () => (/* binding */ CoreGeometryBuilderMesh)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99477);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9176);


class CoreGeometryBuilderMesh extends _Base__WEBPACK_IMPORTED_MODULE_0__/* .CoreGeometryBuilderBase */ .P {
    _filterPoints(points) {
        // ensures we only keep points that form a full face.
        // if a single point from a face is discarded, we remove all 3
        var _a;
        const firstPoint = points[0];
        if (!firstPoint) {
            return [];
        }
        const geometry = firstPoint.geometry();
        if (!geometry) {
            return [];
        }
        const indices = (_a = geometry.getIndex()) === null || _a === void 0 ? void 0 : _a.array;
        if (!indices) {
            return [];
        }
        const points_by_index = {};
        for (const point of points) {
            points_by_index[point.index()] = point;
        }
        const filteredPoints = [];
        const index_length = indices.length;
        let pt0;
        let pt1;
        let pt2;
        for (let i = 0; i < index_length; i += 3) {
            pt0 = points_by_index[indices[i + 0]];
            pt1 = points_by_index[indices[i + 1]];
            pt2 = points_by_index[indices[i + 2]];
            if (pt0 && pt1 && pt2) {
                filteredPoints.push(pt0);
                filteredPoints.push(pt1);
                filteredPoints.push(pt2);
            }
        }
        return filteredPoints;
    }
    _indicesFromPoints(new_index_by_old_index, old_geometry) {
        const index_attrib = old_geometry.index;
        if (index_attrib != null) {
            const old_indices = index_attrib.array;
            const new_indices = [];
            let old_index0;
            let old_index1;
            let old_index2;
            let new_index0;
            let new_index1;
            let new_index2;
            for (let i = 0; i < old_indices.length; i += 3) {
                old_index0 = old_indices[i + 0];
                old_index1 = old_indices[i + 1];
                old_index2 = old_indices[i + 2];
                new_index0 = new_index_by_old_index[old_index0];
                new_index1 = new_index_by_old_index[old_index1];
                new_index2 = new_index_by_old_index[old_index2];
                if (new_index0 != null && new_index1 != null && new_index2 != null) {
                    new_indices.push(new_index0);
                    new_indices.push(new_index1);
                    new_indices.push(new_index2);
                }
            }
            return new_indices;
        }
    }
}
const _v3 = new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();
const STRIDE = 3;
const threeMeshFromPrimitives = (object, entities) => {
    const mesh = object;
    const geometry = mesh.geometry;
    if (!geometry) {
        return undefined;
    }
    const oldIndex = geometry.getIndex();
    if (!oldIndex) {
        return undefined;
    }
    const oldIndexArray = oldIndex.array;
    const primitives = entities;
    const newIndices = new Array(primitives.length * STRIDE);
    let i = 0;
    for (const primitive of primitives) {
        _v3.fromArray(oldIndexArray, primitive.index() * STRIDE);
        _v3.toArray(newIndices, i * STRIDE);
        i++;
    }
    geometry.setIndex(newIndices);
    return mesh;
};


/***/ }),

/***/ 9176:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": () => (/* binding */ CoreGeometryBuilderBase)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);
/* harmony import */ var _ArrayUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(69374);


class CoreGeometryBuilderBase {
    fromPoints(object, points) {
        points = this._filterPoints(points);
        const geometry = new three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();
        // const coreGeometry = new CoreGeometry(geometry);
        const firstPoint = points[0];
        if (!firstPoint) {
            return geometry;
        }
        const oldGeometry = firstPoint.geometry();
        if (!oldGeometry) {
            return geometry;
        }
        // index
        const new_index_by_old_index = {};
        for (let i = 0; i < points.length; i++) {
            new_index_by_old_index[points[i].index()] = i;
        }
        const indices = this._indicesFromPoints(new_index_by_old_index, oldGeometry);
        if (indices) {
            geometry.setIndex(indices);
        }
        // attributes
        const { attributes } = oldGeometry;
        // const new_attributes = {}
        for (const attribute_name of Object.keys(attributes)) {
            const attrib_values = firstPoint.userDataAttribs()[attribute_name];
            const is_attrib_indexed = attrib_values != null;
            if (is_attrib_indexed) {
                const new_values = [];
                const uniqValues = [];
                (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_1__/* .uniqWithoutPreservingOrder */ .kV)(points.map((point) => point.indexedAttribValue(attribute_name)), uniqValues);
                (0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_1__/* .arrayCompact */ .k)(uniqValues, new_values);
                const new_index_by_value = {};
                new_values.forEach((new_value, i) => (new_index_by_value[new_value] = i));
                firstPoint.userDataAttribs()[attribute_name] = new_values;
                // const old_attrib = old_geometry.getAttribute(attribute_name)
                // const old_attrib_array = old_attrib.array
                const new_attrib_indices = [];
                for (const point of points) {
                    // const old_index = old_attrib_array[point.index()]
                    const oldIndex = point.indexedAttribValue(attribute_name);
                    if (oldIndex) {
                        const new_index = new_index_by_value[oldIndex];
                        new_attrib_indices.push(new_index);
                    }
                }
                geometry.setAttribute(attribute_name, new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(new_attrib_indices, 1));
            }
            else {
                const attrib_size = attributes[attribute_name].itemSize;
                const values = new Array(points.length * attrib_size);
                switch (attrib_size) {
                    case 1:
                        for (let i = 0; i < points.length; i++) {
                            values[i] = points[i].attribValue(attribute_name);
                        }
                        break;
                    default:
                        let value;
                        for (let i = 0; i < points.length; i++) {
                            value = points[i].attribValue(attribute_name);
                            value.toArray(values, i * attrib_size);
                        }
                        break;
                }
                geometry.setAttribute(attribute_name, new three__WEBPACK_IMPORTED_MODULE_0__.Float32BufferAttribute(values, attrib_size));
            }
        }
        return geometry;
    }
}


/***/ }),

/***/ 69285:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "f": () => (/* binding */ CoreGeometryIndexBuilder)
/* harmony export */ });
/* harmony import */ var _ArrayUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69374);

const POSITION = 'position';
class CoreGeometryIndexBuilder {
    static createIndexIfNone(geometry) {
        if (!geometry.index) {
            const position = geometry.getAttribute(POSITION);
            if (position) {
                const position_array = position.array;
                geometry.setIndex((0,_ArrayUtils__WEBPACK_IMPORTED_MODULE_0__/* .rangeWithEnd */ .Zi)(position_array.length / 3));
            }
        }
    }
}


/***/ }),

/***/ 95282:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RP": () => (/* binding */ EASING_NAMES),
/* harmony export */   "oY": () => (/* binding */ Easing)
/* harmony export */ });
/* unused harmony exports easeI2, easeO2, easeIO2, easeI3, easeO3, easeIO3, easeI4, easeO4, easeIO4, easeSinI, easeSinO, easeSinIO, easeElasticI, easeElasticO, easeElasticIO */
// https://gist.github.com/gre/1650294
// const ease_in = function(t:number, power:number){return Math.pow(t, power)}
// const ease_on = function(t:number, power:number){return 1 - Math.abs(Math.pow(t-1, power))}
// const ease_ion = function(t:number, power:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}
const easeI = function (power) {
    return function (t) {
        return Math.pow(t, power);
    };
};
const easeO = function (power) {
    return function (t) {
        return 1 - Math.abs(Math.pow(t - 1, power));
    };
};
const easeIO = function (power) {
    return function (t) {
        return t < 0.5 ? easeI(power)(t * 2) / 2 : easeO(power)(t * 2 - 1) / 2 + 0.5;
    };
};
const EASING_NAMES = [
    'easeI2',
    'easeO2',
    'easeIO2',
    'easeI3',
    'easeO3',
    'easeIO3',
    'easeI4',
    'easeO4',
    'easeIO4',
    'easeSinI',
    'easeSinO',
    'easeSinIO',
    'easeElasticI',
    'easeElasticO',
    'easeElasticIO',
];
const easeI2 = easeI(2);
const easeO2 = easeO(2);
const easeIO2 = easeIO(2);
const easeI3 = easeI(3);
const easeO3 = easeO(3);
const easeIO3 = easeIO(3);
const easeI4 = easeI(4);
const easeO4 = easeO(4);
const easeIO4 = easeIO(4);
function easeSinI(t) {
    return 1 + Math.sin((Math.PI / 2) * t - Math.PI / 2);
}
function easeSinO(t) {
    return Math.sin((Math.PI / 2) * t);
}
function easeSinIO(t) {
    return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2;
}
function easeElasticI(t) {
    return t == 0 ? 0 : (0.04 - 0.04 / t) * Math.sin(25 * t) + 1;
}
function easeElasticO(t) {
    return t == 1 ? 1 : ((0.04 * t) / --t) * Math.sin(25 * t);
}
function easeElasticIO(t) {
    return t == 0.5
        ? 0
        : (t -= 0.5) < 0
            ? (0.02 + 0.01 / t) * Math.sin(50 * t)
            : (0.02 - 0.01 / t) * Math.sin(50 * t) + 1;
}
const Easing = {
    // linear: ease_io(1),
    // ease_i: function (t: number, power: number) {
    // 	return ease_i(power)(t);
    // },
    // ease_o: function (t: number, power: number) {
    // 	return ease_o(power)(t);
    // },
    // ease_io: function (t: number, power: number) {
    // 	return ease_io(power)(t);
    // },
    easeI2,
    easeO2,
    easeIO2,
    easeI3,
    easeO3,
    easeIO3,
    easeI4,
    easeO4,
    easeIO4,
    // easeInQuart: EaseIn(4),
    // easeOutQuart: EaseOut(4),
    // easeInOutQuart: EaseInOut(4),
    // easeInQuint: EaseIn(5),
    // easeOutQuint: EaseOut(5),
    // easeInOutQuint: EaseInOut(5)
    easeSinI,
    easeSinO,
    easeSinIO,
    easeElasticI,
    easeElasticO,
    easeElasticIO,
};
// export class Easing {
//   // no easing, no acceleration
//   static linear(t:number):number{ return t }
//   // accelerating from zero velocity
//   static easeinquad (t:number):number{ return t*t }
//   // decelerating to zero velocity
//   static easeoutquad (t:number):number{ return t*(2-t) }
//   // acceleration until halfway, then deceleration
//   static easeinoutquad (t:number):number{ return t<.5 ? 2*t*t : -1+(4-2*t)*t }
//   // accelerating from zero velocity
//   static easeincubic (t:number):number{ return t*t*t }
//   // decelerating to zero velocity
//   static easeoutcubic (t:number):number{ return (--t)*t*t+1 }
//   // acceleration until halfway, then deceleration
//   static easeinoutcubic (t:number):number{ return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }
//   // accelerating from zero velocity
//   static easeinquart (t:number):number{ return t*t*t*t }
//   // decelerating to zero velocity
//   static easeoutquart (t:number):number{ return 1-(--t)*t*t*t }
//   // acceleration until halfway, then deceleration
//   static easeinoutquart (t:number):number{ return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t }
//   // accelerating from zero velocity
//   static easeinquint (t:number):number{ return t*t*t*t*t }
//   // decelerating to zero velocity
//   static easeoutquint (t:number):number{ return 1+(--t)*t*t*t*t }
//   // acceleration until halfway, then deceleration
//   static easeinoutquint (t:number):number{ return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t }
// }


/***/ }),

/***/ 3404:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CD": () => (/* binding */ mix),
/* harmony export */   "CW": () => (/* binding */ smoothstep),
/* harmony export */   "Gj": () => (/* binding */ CoreMath),
/* harmony export */   "Id": () => (/* binding */ degToRad),
/* harmony export */   "K5": () => (/* binding */ fitClamp),
/* harmony export */   "Qy": () => (/* binding */ randFloat),
/* harmony export */   "TN": () => (/* binding */ rand),
/* harmony export */   "Tj": () => (/* binding */ fit),
/* harmony export */   "ZY": () => (/* binding */ radToDeg),
/* harmony export */   "iB": () => (/* binding */ smootherstep),
/* harmony export */   "q_": () => (/* binding */ nearestPower2),
/* harmony export */   "uZ": () => (/* binding */ clamp),
/* harmony export */   "wQ": () => (/* binding */ mod)
/* harmony export */ });
/* unused harmony exports fit01, fract, randVec2, round, highestEven, pow2Inverse, geodesicDistance, expandTriangle, lerpFloat */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99477);
/* harmony import */ var three_src_math_MathUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69542);
/* harmony import */ var _Easing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(95282);
/* harmony import */ var _Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48454);




const RAND_A = 12.9898;
const RAND_B = 78.233;
const RAND_C = 43758.5453;
const degToRad = three_src_math_MathUtils__WEBPACK_IMPORTED_MODULE_0__/* .degToRad */ .Id;
const radToDeg = three_src_math_MathUtils__WEBPACK_IMPORTED_MODULE_0__/* .radToDeg */ .ZY;
function clamp(val, min, max) {
    if (val < min) {
        return min;
    }
    else if (val > max) {
        return max;
    }
    else {
        return val;
    }
}
const smoothstep = three_src_math_MathUtils__WEBPACK_IMPORTED_MODULE_0__/* .smoothstep */ .CW;
const smootherstep = three_src_math_MathUtils__WEBPACK_IMPORTED_MODULE_0__/* .smootherstep */ .iB;
function fit(val, srcMin, srcMax, destMin, destMax) {
    const src_range = srcMax - srcMin;
    const dest_range = destMax - destMin;
    const r = (val - srcMin) / src_range;
    return r * dest_range + destMin;
}
function fit01(val, destMin, destMax) {
    // const size = max - min;
    // return (val - min) / size;
    return fit(val, 0, 1, destMin, destMax);
}
function fitClamp(val, srcMin, srcMax, destMin, destMax) {
    const r = fit(val, srcMin, srcMax, destMin, destMax);
    return clamp(r, destMin, destMax);
}
function mix(num0, num1, blend) {
    return (1 - blend) * num0 + blend * num1;
}
const fract = (number) => number - Math.floor(number);
const DEFAULT_Y = 136574;
const _vec = { x: 0, y: DEFAULT_Y };
function randFloat(x, y = DEFAULT_Y) {
    _vec.x = x;
    _vec.y = y;
    return randVec2(_vec);
}
function randVec2(uv) {
    const dt = uv.x * RAND_A + uv.y * RAND_B; //dot( uv.xy, vec2( a,b ) )
    const sn = dt % Math.PI;
    return fract(Math.sin(sn) * RAND_C);
}
function rand(number) {
    if (_Type__WEBPACK_IMPORTED_MODULE_1__/* .CoreType.isNumber */ .MR.isNumber(number)) {
        return randFloat(number);
    }
    else {
        return randVec2(number);
    }
}
function round(number, stepSize) {
    const stepsCount = number / stepSize;
    const roundedStepsCount = number < 0 ? Math.ceil(stepsCount) : Math.floor(stepsCount);
    return roundedStepsCount * stepSize;
}
function mod(number, _mod) {
    return ((number % _mod) + _mod) % _mod;
}
function highestEven(number) {
    return 2 * Math.ceil(number * 0.5);
}
function nearestPower2(num) {
    return Math.pow(2, Math.ceil(Math.log(num) / Math.log(2)));
}
function pow2Inverse(num) {
    return Math.log(num) / Math.log(2);
}
// https://www.movable-type.co.uk/scripts/latlong.html
function geodesicDistance(lnglat1, lnglat2) {
    var R = 6371e3; // metres
    var d1 = degToRad(lnglat1.lat);
    var d2 = degToRad(lnglat2.lat);
    var ad1 = degToRad(lnglat2.lat - lnglat1.lat);
    var ad2 = degToRad(lnglat2.lng - lnglat1.lng);
    var a = Math.sin(ad1 / 2) * Math.sin(ad1 / 2) + Math.cos(d1) * Math.cos(d2) * Math.sin(ad2 / 2) * Math.sin(ad2 / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    var d = R * c;
    return d;
}
const _triangleMid = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();
const _triangleMidToCorner = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();
function expandTriangle(triangle, margin) {
    triangle.getMidpoint(_triangleMid);
    // a
    _triangleMidToCorner.copy(triangle.a).sub(_triangleMid);
    _triangleMidToCorner.normalize().multiplyScalar(margin);
    triangle.a.add(_triangleMidToCorner);
    // b
    _triangleMidToCorner.copy(triangle.b).sub(_triangleMid);
    _triangleMidToCorner.normalize().multiplyScalar(margin);
    triangle.b.add(_triangleMidToCorner);
    // c
    _triangleMidToCorner.copy(triangle.c).sub(_triangleMid);
    _triangleMidToCorner.normalize().multiplyScalar(margin);
    triangle.c.add(_triangleMidToCorner);
}
function lerpFloat(current, target, blend) {
    return current * (1 - blend) + target * blend;
}
class CoreMath {
}
CoreMath.Easing = _Easing__WEBPACK_IMPORTED_MODULE_3__/* .Easing */ .oY; // used in expressions
CoreMath.degToRad = degToRad; // used in expressions
CoreMath.radToDeg = radToDeg; // used in expressions
CoreMath.clamp = clamp; // used in expressions
CoreMath.smoothstep = smoothstep;
CoreMath.smootherstep = smootherstep;
CoreMath.fit01 = fit01; // used in expressions
CoreMath.fit = fit; // used in expressions
CoreMath.fitClamp = fitClamp; // used in expressions
CoreMath.mix = mix; // used in expressions
CoreMath.fract = fract; // used in expressions
CoreMath.rand = rand; // from threejs glsl rand
CoreMath.round = round;
CoreMath.highestEven = highestEven;
CoreMath.nearestPower2 = nearestPower2;
CoreMath.pow2Inverse = pow2Inverse;
CoreMath.randFloat = randFloat;
CoreMath.randVec2 = randVec2;
CoreMath.lerpFloat = lerpFloat;


/***/ }),

/***/ 62924:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hA": () => (/* binding */ _dummyReadAttributeRefVal),
/* harmony export */   "hx": () => (/* binding */ _getObjectAttributeRef_),
/* harmony export */   "wA": () => (/* binding */ refByObjectUuidByAttribName)
/* harmony export */ });
const refByObjectUuidByAttribName = new WeakMap();
function _getObjectAttributeRef_(object3D, attribName
// type: ParamConvertibleJsType
) {
    var _a;
    return (_a = refByObjectUuidByAttribName.get(object3D)) === null || _a === void 0 ? void 0 : _a.get(attribName);
}
// export function _getOrCreateObjectAttributeRef(
// 	object3D: ObjectXD,
// 	attribName: string,
// 	type: ParamConvertibleJsType
// ): AttribRefs {
// 	let mapForObject = refByObjectUuidByAttribName.get(object3D);
// 	if (!mapForObject) {
// 		mapForObject = new Map();
// 		refByObjectUuidByAttribName.set(object3D, mapForObject);
// 	}
// 	let refForAttribName = mapForObject.get(attribName);
// 	if (!refForAttribName) {
// 		let _defaultValue = defaultValue(type);
// 		let _previousValue = defaultValue(type);
// 		const currentValue = CoreObject.attribValue(object3D, attribName, 0, _defaultValue as any as Vector2);
// 		const previousValue = CoreObject.attribValue(object3D, attribName, 0, _previousValue as any as Vector2);
// 		if (currentValue == null || previousValue == null) {
// 			refForAttribName = {
// 				current: ref(defaultValue(type)),
// 				previous: ref(defaultValue(type)),
// 			};
// 		} else {
// 			refForAttribName = {
// 				current: ref(currentValue),
// 				previous: ref(previousValue),
// 			};
// 		}
// 		mapForObject.set(attribName, refForAttribName);
// 	}
// 	return refForAttribName;
// }
function _dummyReadAttributeRefVal(value) {
    // 	// console.log('_dummyReadAttributeRefVal', value);
    // 	// we just need this method to force a call to .value
    // 	// and ensure that we have a dependency with the ref()
}
// export function touchObjectAttribute(object3D: Object3D, attribName: string) {
// 	// const _ref = _getObjectAttributeRef(object3D, attribName);
// 	// incrementRefSafely(_ref);
// }


/***/ }),

/***/ 20514:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "U": () => (/* binding */ getOrCreateObjectAttributeRef)
/* harmony export */ });
/* unused harmony export _dummyReadAttributeRefVal */
/* harmony import */ var _ObjectAttributeReactivity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(62924);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(99477);
/* harmony import */ var _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(43642);
/* harmony import */ var _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(53120);
/* harmony import */ var _geometry_entities_object_BaseCoreObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(78841);
/* harmony import */ var _CoreReactivity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2262);






function defaultValue(type) {
    switch (type) {
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.BOOLEAN */ .zF.BOOLEAN: {
            return false;
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.COLOR */ .zF.COLOR: {
            return new three__WEBPACK_IMPORTED_MODULE_1__.Color();
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.FLOAT */ .zF.FLOAT: {
            return 0;
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.INT */ .zF.INT: {
            return 0;
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.STRING */ .zF.STRING: {
            return '';
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.VECTOR2 */ .zF.VECTOR2: {
            return new three__WEBPACK_IMPORTED_MODULE_1__.Vector2();
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.VECTOR3 */ .zF.VECTOR3: {
            return new three__WEBPACK_IMPORTED_MODULE_1__.Vector3();
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.VECTOR4 */ .zF.VECTOR4: {
            return new three__WEBPACK_IMPORTED_MODULE_1__.Vector4();
        }
    }
    _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_2__/* .TypeAssert.unreachable */ .f.unreachable(type);
}
function cloneDefaultValue(value, type) {
    switch (type) {
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.BOOLEAN */ .zF.BOOLEAN: {
            return value;
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.COLOR */ .zF.COLOR: {
            return value.clone();
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.FLOAT */ .zF.FLOAT: {
            return value;
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.INT */ .zF.INT: {
            return value;
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.STRING */ .zF.STRING: {
            return value;
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.VECTOR2 */ .zF.VECTOR2: {
            return value.clone();
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.VECTOR3 */ .zF.VECTOR3: {
            return value.clone();
        }
        case _engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_0__/* .JsConnectionPointType.VECTOR4 */ .zF.VECTOR4: {
            return value.clone();
        }
    }
    _engine_poly_Assert__WEBPACK_IMPORTED_MODULE_2__/* .TypeAssert.unreachable */ .f.unreachable(type);
}
function getOrCreateObjectAttributeRef(object3D, attribName, type, defaultAttribValue) {
    let mapForObject = _ObjectAttributeReactivity__WEBPACK_IMPORTED_MODULE_3__/* .refByObjectUuidByAttribName.get */ .wA.get(object3D);
    if (!mapForObject) {
        mapForObject = new Map();
        _ObjectAttributeReactivity__WEBPACK_IMPORTED_MODULE_3__/* .refByObjectUuidByAttribName.set */ .wA.set(object3D, mapForObject);
    }
    let refForAttribName = mapForObject.get(attribName);
    if (!refForAttribName) {
        let _defaultValue = defaultAttribValue != null ? defaultAttribValue : defaultValue(type);
        let _previousValue = cloneDefaultValue(_defaultValue, type);
        const currentValue = _geometry_entities_object_BaseCoreObject__WEBPACK_IMPORTED_MODULE_4__/* .BaseCoreObject.attribValue */ .q.attribValue(object3D, attribName, 0, _defaultValue);
        const previousValue = _geometry_entities_object_BaseCoreObject__WEBPACK_IMPORTED_MODULE_4__/* .BaseCoreObject.attribValue */ .q.attribValue(object3D, attribName, 0, _previousValue);
        if (currentValue == null || previousValue == null) {
            refForAttribName = {
                current: (0,_CoreReactivity__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .iH)(_defaultValue),
                previous: (0,_CoreReactivity__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .iH)(_previousValue),
            };
        }
        else {
            refForAttribName = {
                current: (0,_CoreReactivity__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .iH)(currentValue),
                previous: (0,_CoreReactivity__WEBPACK_IMPORTED_MODULE_5__/* .ref */ .iH)(previousValue),
            };
        }
        mapForObject.set(attribName, refForAttribName);
    }
    return refForAttribName;
}
function _dummyReadAttributeRefVal(value) {
    // 	// console.log('_dummyReadAttributeRefVal', value);
    // 	// we just need this method to force a call to .value
    // 	// and ensure that we have a dependency with the ref()
}
// export function touchObjectAttribute(object3D: Object3D, attribName: string) {
// 	// const _ref = _getObjectAttributeRef(object3D, attribName);
// 	// incrementRefSafely(_ref);
// }


/***/ }),

/***/ 31654:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Y": () => (/* binding */ getObjectChildrenCountRef),
/* harmony export */   "g": () => (/* binding */ updateObjectChildrenCountRef)
/* harmony export */ });
/* harmony import */ var _core_reactivity_CoreReactivity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2262);

const refChildrenCountByUuid = new WeakMap();
function getObjectChildrenCountRef(object) {
    let _ref = refChildrenCountByUuid.get(object);
    if (!_ref) {
        _ref = (0,_core_reactivity_CoreReactivity__WEBPACK_IMPORTED_MODULE_0__/* .ref */ .iH)(object.children.length);
        refChildrenCountByUuid.set(object, _ref);
    }
    return _ref;
}
function updateObjectChildrenCountRef(object) {
    getObjectChildrenCountRef(object).value = object.children.length;
}


/***/ }),

/***/ 14049:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "YA": () => (/* binding */ RENDERER_PRECISIONS),
/* harmony export */   "af": () => (/* binding */ POWER_PREFERENCES),
/* harmony export */   "cM": () => (/* binding */ PowerPreference),
/* harmony export */   "j9": () => (/* binding */ WEBGL_RENDERER_DEFAULT_PARAMS),
/* harmony export */   "lQ": () => (/* binding */ RendererPrecision)
/* harmony export */ });
var PowerPreference;
(function (PowerPreference) {
    PowerPreference["HIGH"] = "high-performance";
    PowerPreference["LOW"] = "low-power";
    PowerPreference["DEFAULT"] = "default";
})(PowerPreference || (PowerPreference = {}));
const POWER_PREFERENCES = [
    PowerPreference.HIGH,
    PowerPreference.LOW,
    PowerPreference.DEFAULT,
];
var RendererPrecision;
(function (RendererPrecision) {
    RendererPrecision["HIGH"] = "highp";
    RendererPrecision["MEDIUM"] = "mediump";
    RendererPrecision["LOW"] = "lowp";
})(RendererPrecision || (RendererPrecision = {}));
const RENDERER_PRECISIONS = [
    RendererPrecision.HIGH,
    RendererPrecision.MEDIUM,
    RendererPrecision.LOW,
];
const WEBGL_RENDERER_DEFAULT_PARAMS = {
    alpha: true,
    precision: RendererPrecision.HIGH,
    premultipliedAlpha: true,
    antialias: true,
    preserveDrawingBuffer: false,
    powerPreference: PowerPreference.DEFAULT,
    depth: true,
    stencil: true,
    logarithmicDepthBuffer: false,
};


/***/ }),

/***/ 72931:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "L": () => (/* binding */ Poly)
});

// UNUSED EXPORTS: PolyEngine

// EXTERNAL MODULE: ./node_modules/three/build/three.module.js
var three_module = __webpack_require__(99477);
// EXTERNAL MODULE: ./src/core/render/Common.ts
var Common = __webpack_require__(14049);
;// CONCATENATED MODULE: ./src/engine/poly/RenderersController.ts


const CONTEXT_OPTIONS = {
// powerPreference: 'high-performance', // attempt to fix issues in safari
// antialias: false, // leave that to the renderer node
// preserveDrawingBuffer: true, // this could only be useful to capture static images
};
var WebGLContext;
(function (WebGLContext) {
    WebGLContext["WEBGL"] = "webgl";
    WebGLContext["WEBGL2"] = "webgl2";
    WebGLContext["EXPERIMENTAL_WEBGL"] = "experimental-webgl";
    WebGLContext["EXPERIMENTAL_WEBGL2"] = "experimental-webgl2";
})(WebGLContext || (WebGLContext = {}));
let nextRendererId = 0;
class RenderersController {
    constructor() {
        // private _firstRenderer: WebGLRenderer | null = null;
        // private _lastRenderer: WebGLRenderer | null = null;
        this._printDebug = false;
        this._requireWebGL2 = false;
        // private _env_maps: TextureByString = {};
        // private _next_env_map_id: number = 0;
        this._webGLContextByCanvas = new Map();
        this._defaultRendererByCanvas = new Map();
    }
    dispose() {
        this._webGLContextByCanvas.clear();
        this._defaultRendererByCanvas.forEach((renderer) => {
            renderer.dispose();
        });
        this._defaultRendererByCanvas.clear();
    }
    setPrintDebug(state = true) {
        this._printDebug = state;
    }
    printDebug() {
        return this._printDebug;
    }
    printDebugMessage(message) {
        if (!this._printDebug) {
            return;
        }
        console.warn('[Poly debug]', message);
    }
    setRequireWebGL2() {
        if (!this._requireWebGL2) {
            this._requireWebGL2 = true;
        }
    }
    webGL2Available(canvas) {
        if (this._webgl2_available === undefined) {
            this._webgl2_available = this._getWebGL2Available(canvas);
        }
        return this._webgl2_available;
    }
    _getWebGL2Available(canvas) {
        canvas = canvas || document.createElement('canvas');
        return (window.WebGL2RenderingContext && canvas.getContext(WebGLContext.WEBGL2)) != null;
    }
    defaultWebGLRendererForCanvas(canvas) {
        let renderer = this._defaultRendererByCanvas.get(canvas);
        if (!renderer) {
            const context = this.getRenderingContext(canvas);
            renderer = this.createWebGLRenderer({ ...Common/* WEBGL_RENDERER_DEFAULT_PARAMS */.j9, canvas, context });
            this._defaultRendererByCanvas.set(canvas, renderer);
        }
        return renderer;
    }
    // disposeWebGLRendererForCanvas(canvas: HTMLCanvasElement) {
    // 	const renderer = this._defaultRendererByCanvas.get(canvas);
    // 	if (renderer) {
    // 		renderer.dispose();
    // 		this._defaultRendererByCanvas.delete(canvas);
    // 	}
    // }
    createWebGLRenderer(params) {
        const renderer = new three_module.WebGLRenderer(params);
        // renderer.debug.checkShaderErrors = true;
        // renderer.debug.onShaderError = (gl, program, glVertexShader, glFragmentShader) => {
        // 	console.log('onShaderError', {gl, program, glVertexShader, glFragmentShader});
        // 	console.log(gl.getShaderSource(glVertexShader));
        // 	console.log(gl.getShaderSource(glFragmentShader));
        // };
        this.assignIdToRenderer(renderer);
        this.printDebugMessage([`create renderer:`, params]);
        return renderer;
    }
    assignIdToRenderer(renderer) {
        if (renderer._polygonId != null) {
            // we do not re-assign the id if there is already one
            return;
        }
        const nextId = (nextRendererId += 1);
        renderer._polygonId = nextId;
    }
    rendererId(renderer) {
        const id = renderer._polygonId;
        if (id == null) {
            console.error('renderer has no _polygonId');
            return;
        }
        return id;
    }
    getRenderingContext(canvas) {
        let gl = this._webGLContextByCanvas.get(canvas);
        if (gl) {
            return gl;
        }
        // if (this._require_webgl2) {
        gl = this._getRenderingContextWebgl(canvas, true);
        if (!gl) {
            console.warn('failed to create webgl2 context');
        }
        // }
        if (!gl) {
            gl = this._getRenderingContextWebgl(canvas, false);
        }
        if (!gl) {
            console.error('failed to create webgl context');
            return null;
        }
        if (gl._polygonjsContextId == null) {
            gl._polygonjsContextId = RenderersController._nextGlContextId++;
        }
        this._webGLContextByCanvas.set(canvas, gl);
        // gl.getExtension('OES_standard_derivatives') // for derivative normals, but it cannot work at the moment (see node Gl/DerivativeNormals)
        // to test data texture
        // gl.getExtension('OES_texture_float')
        // gl.getExtension('OES_texture_float_linear')
        return gl;
    }
    _getRenderingContextWebgl(canvas, webgl2) {
        let contextName;
        if (this.webGL2Available(canvas)) {
            contextName = WebGLContext.WEBGL2;
        }
        else {
            contextName = webgl2 ? WebGLContext.WEBGL2 : WebGLContext.WEBGL;
        }
        let gl = canvas.getContext(contextName, CONTEXT_OPTIONS);
        if (gl) {
            this.printDebugMessage(`create gl context: ${contextName}.`);
        }
        else {
            contextName = webgl2 ? WebGLContext.EXPERIMENTAL_WEBGL2 : WebGLContext.EXPERIMENTAL_WEBGL;
            this.printDebugMessage(`create gl context: ${contextName}.`);
            gl = canvas.getContext(contextName, CONTEXT_OPTIONS);
        }
        return gl;
    }
    createRenderTarget(width, height, parameters) {
        if (this.webGL2Available()) {
            const multiSampleRenderTarget = new three_module.WebGLRenderTarget(width, height, parameters);
            multiSampleRenderTarget.samples = 2;
            return multiSampleRenderTarget;
        }
        else {
            return new three_module.WebGLRenderTarget(width, height, parameters);
        }
    }
    linearRenderer() {
        return (this._linearRenderer = this._linearRenderer || this._createLinearRenderer());
    }
    _createLinearRenderer() {
        const canvas = document.createElement('canvas');
        const gl = this.getRenderingContext(canvas);
        if (!gl) {
            return;
        }
        const renderer = this.createWebGLRenderer({
            // antialias: true,
            // stencil: true,
            // depth: false,
            alpha: true,
            premultipliedAlpha: true,
            canvas,
            context: gl,
        });
        renderer.outputColorSpace = three_module.NoColorSpace;
        renderer.toneMapping = three_module.NoToneMapping;
        return renderer;
    }
}
RenderersController._nextGlContextId = 0;

;// CONCATENATED MODULE: ./src/engine/poly/PolyLibsController.ts
class PolyLibsController {
    constructor() {
        this._rootPrefix = '';
        this._root = '/three/js/libs';
        //
        //
        // KTX2
        //
        //
        this._KTX2Path = '/ktx2';
        //
        //
        // DRACO
        //
        //
        this._DRACOPath = '/draco';
        //
        //
        // DRACO GLTF
        //
        //
        this._DRACOGLTFPath = '/draco/gltf';
        //
        //
        // XATLAS
        //
        //
        this._XATLASPath = '/xatlas';
        //
        //
        // OCCT
        //
        //
        this._OCCTPath = '/occt';
        //
        //
        // MANIFOLD
        //
        //
        this._ManifoldPath = '/manifold';
    }
    root() {
        if (this._root) {
            if (this._rootPrefix.length > 0) {
                // remove heading dots if any
                const root = this._root.replace(/^(\.)/, '');
                return `${this._rootPrefix}${root}`;
            }
            else {
                return this._root;
            }
        }
    }
    setRoot(url) {
        this._root = url;
    }
    setRootPrefix(prefix) {
        this._rootPrefix = prefix;
    }
    KTX2Path() {
        return this._KTX2Path;
    }
    // setDRACOPath(path: string | null) {
    // 	this._DRACOPath = path;
    // }
    DRACOPath() {
        return this._DRACOPath;
    }
    // setDRACOGLTFPath(path: string | null) {
    // 	this._DRACOGLTFPath = path;
    // }
    DRACOGLTFPath() {
        return this._DRACOGLTFPath;
    }
    // setDRACOGLTFPath(path: string | null) {
    // 	this._DRACOGLTFPath = path;
    // }
    XATLASPath() {
        return this._XATLASPath;
    }
    OCCTPath() {
        return this._OCCTPath;
    }
    ManifoldPath() {
        return this._ManifoldPath;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/BlobsController.ts
class BlobsController {
    constructor(poly) {
        this.poly = poly;
    }
    recording() {
        return !this.poly.playerMode();
    }
    clear() { }
    clearBlobsForNode(node) { }
    async setVirtualFile(file, uniqueId) { }
    async fetchBlobGlobal(url) { }
    traverse(callback) { }
}

;// CONCATENATED MODULE: ./src/engine/poly/AssetUrlsController.ts
class AssetUrlsController {
    setMap(map) {
        this._map = map;
    }
    remapedUrl(url) {
        if (!this._map) {
            return;
        }
        const elements = url.split('?');
        const preQuery = elements[0];
        const query = elements[1];
        const remapedUrl = this._map[preQuery];
        if (remapedUrl) {
            if (query) {
                return `${remapedUrl}?${query}`;
            }
            else {
                return remapedUrl;
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/PerformanceController.ts
class PolyPerformanceformanceController {
    setPerformanceManager(p) {
        this._performanceManager = p;
    }
    performanceManager() {
        return this._performanceManager || window.performance;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/ScenesRegister.ts
class ScenesRegister {
    constructor() {
        this._scenes = new Set();
        this._registerTimeByScene = new Map();
    }
    registerScene(scene) {
        if (this._scenes.has(scene)) {
            console.warn('scene was already registered');
            return;
        }
        this._scenes.add(scene);
        this._registerTimeByScene.set(scene, performance.now());
        this._updateCache();
    }
    deregisterScene(scene) {
        this._scenes.delete(scene);
        this._registerTimeByScene.delete(scene);
        this._updateCache();
    }
    dispose() {
        const scenes = this.scenes();
        for (const scene of scenes) {
            scene.dispose();
        }
    }
    lastRegisteredScene() {
        return this._lastRegisteredScene;
    }
    scenes() {
        const scenes = [];
        this._scenes.forEach((scene) => scenes.push(scene));
        return scenes;
    }
    _updateCache() {
        this._lastRegisteredScene = undefined;
        this._registerTimeByScene.forEach((registerTime, scene) => {
            if (this._lastRegisteredScene == undefined) {
                this._lastRegisteredScene = scene;
            }
            else {
                const lastRegisterTime = this._registerTimeByScene.get(this._lastRegisteredScene);
                if (registerTime != null && lastRegisterTime != null) {
                    if (registerTime > lastRegisterTime) {
                        this._lastRegisteredScene = scene;
                    }
                }
            }
        });
    }
}

// EXTERNAL MODULE: ./src/engine/poly/thirdParty/Mapbox.ts
var Mapbox = __webpack_require__(75292);
;// CONCATENATED MODULE: ./src/engine/poly/thirdParty/MarkerTracking.ts
class PolyMarkerTrackingController {
    constructor() {
        this._controller = null;
    }
    setConfig(config) {
        this._config = config;
    }
    barCodeUrl(type, value) {
        if (this._config) {
            return this._config.barcodeUrl(type, value);
        }
    }
    barCodeTypes() {
        var _a;
        return ((_a = this._config) === null || _a === void 0 ? void 0 : _a.barCodes.types) || [''];
    }
    config() {
        return this._config;
    }
    hasController() {
        return this._config != null;
    }
    createController(options) {
        if (!this._config) {
            return;
        }
        const controller = this._config.createController(options);
        this._controller = controller;
        return controller;
    }
    controller() {
        return this._controller;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/ThirdPartyController.ts


class PolyThirdPartyController {
    markerTracking() {
        return (this._markerTracking = this._markerTracking || new PolyMarkerTrackingController());
    }
    mapbox() {
        return (this._mapbox = this._mapbox || new Mapbox/* PolyThirdPartyMapboxController */.i());
    }
}

// EXTERNAL MODULE: ./src/engine/poly/PolyOnObjectsAddRemoveHooksController.ts
var PolyOnObjectsAddRemoveHooksController = __webpack_require__(62618);
;// CONCATENATED MODULE: ./src/engine/poly/PolyOnSceneUpdatedHooksController.ts
class PolyOnSceneUpdatedHooksController {
    constructor() {
        this._map = new Map();
    }
    registerHook(node, hook) {
        this._map.set(node, hook);
        this._updateCache();
    }
    unregisterHook(node) {
        this._map.delete(node);
        this._updateCache();
    }
    runHooks() {
        const hooks = this._hooks;
        if (!hooks) {
            return;
        }
        for (let hook of hooks) {
            hook();
        }
    }
    hookedNodes() {
        return Array.from(this._map.keys());
    }
    _updateCache() {
        if (this._map.size == 0) {
            this._hooks = undefined;
        }
        else {
            this._hooks = this._hooks || [];
            this._hooks.length = 0;
            const hooks = this._hooks;
            this._map.forEach((hook) => hooks.push(hook));
        }
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/PolySpecializedChildrenController.ts
class PolySpecializedChildrenController {
    constructor() {
        this._map = new Map();
    }
    registerHook(hookName, hook) {
        this._map.set(hookName, hook);
        this._updateCache();
    }
    _updateCache() {
        this._hooks = [];
        const hooks = this._hooks;
        this._map.forEach((hook) => {
            hooks.push(hook);
        });
    }
    runHooks(displayNode, coreGroup, newObjects, params) {
        let newObjectsAreDifferent = false;
        if (this._hooks) {
            for (let hook of this._hooks) {
                const _newObjectsAreDifferent = hook(displayNode, coreGroup, newObjects, params);
                if (_newObjectsAreDifferent) {
                    newObjectsAreDifferent = true;
                }
            }
        }
        return newObjectsAreDifferent;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/plugins/Plugin.ts
class PolyPlugin {
    constructor(_name, _callback, _options) {
        this._name = _name;
        this._callback = _callback;
        this._options = _options;
    }
    name() {
        return this._name;
    }
    libraryName() {
        return this._options.libraryName;
    }
    init(poly) {
        this._callback(poly);
    }
    toJSON() {
        return {
            name: this._name,
            libraryName: this._options.libraryName,
            libraryImportPath: this._options.libraryImportPath,
        };
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/plugins/PluginsRegister.ts

class PluginsRegister {
    constructor(poly) {
        this.poly = poly;
        this._pluginsByName = new Map();
        this._pluginNameByNodeContextByType = new Map();
        this._pluginNameByOperationContextByType = new Map();
    }
    async wrapConfigurePolygonjs(callback) {
        this._configurePolygonjsPlugin =
            this._configurePolygonjsPlugin ||
                new PolyPlugin('configurePolygonjs', () => { }, { libraryImportPath: '../PolyConfig', libraryName: '' });
        this._currentPlugin = this._configurePolygonjsPlugin;
        this._pluginsByName.set(this._currentPlugin.name(), this._currentPlugin);
        await callback();
        this._currentPlugin = undefined;
    }
    register(plugin) {
        const previousCurrentPlugin = this._currentPlugin;
        this._currentPlugin = plugin;
        this._pluginsByName.set(plugin.name(), plugin);
        plugin.init(this.poly);
        this._currentPlugin = previousCurrentPlugin;
    }
    pluginByName(pluginName) {
        return this._pluginsByName.get(pluginName);
    }
    registerNode(node) {
        if (!this._currentPlugin) {
            return;
        }
        const context = node.context();
        const type = node.type();
        let mapForContext = this._pluginNameByNodeContextByType.get(context);
        if (!mapForContext) {
            mapForContext = new Map();
            this._pluginNameByNodeContextByType.set(context, mapForContext);
        }
        mapForContext.set(type, this._currentPlugin.name());
    }
    registerOperation(operation) {
        if (!this._currentPlugin) {
            return;
        }
        const context = operation.context();
        const type = operation.type();
        let mapForContext = this._pluginNameByOperationContextByType.get(context);
        if (!mapForContext) {
            mapForContext = new Map();
            this._pluginNameByOperationContextByType.set(context, mapForContext);
        }
        mapForContext.set(type, this._currentPlugin.name());
    }
    toJson() {
        const data = {
            plugins: {},
            nodes: {},
            operations: {},
        };
        this._pluginsByName.forEach((plugin, name) => {
            data.plugins[name] = plugin.toJSON();
        });
        this._pluginNameByNodeContextByType.forEach((mapForContext, context) => {
            data.nodes[context] = {};
            mapForContext.forEach((pluginName, type) => {
                data.nodes[context][type] = pluginName;
            });
        });
        this._pluginNameByOperationContextByType.forEach((mapForContext, context) => {
            data.operations[context] = {};
            mapForContext.forEach((pluginName, type) => {
                data.operations[context][type] = pluginName;
            });
        });
        return data;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/cameras/PolyCamerasRegister.ts
class PolyCamerasRegister {
    constructor(poly) {
        this._cameraNodeTypes = [];
        this._registeredViewerCreateCallbackByCamera = new Map();
    }
    registerNodeType(nodeType) {
        if (!this._cameraNodeTypes.includes(nodeType)) {
            this._cameraNodeTypes.push(nodeType);
        }
    }
    registeredNodeTypes() {
        return this._cameraNodeTypes;
    }
    register(cameraClass, viewerCreateCallback) {
        this._registeredViewerCreateCallbackByCamera.set(cameraClass, viewerCreateCallback);
    }
    createViewer(options) {
        const callback = this._registeredViewerCreateCallbackByCamera.get(options.camera.constructor);
        if (!callback) {
            console.error('no createViewer callback available');
            console.log('createViewer', options.camera, options.camera.constructor, this._registeredViewerCreateCallbackByCamera);
            return;
        }
        return callback(options);
    }
    objectRegistered(object) {
        const callback = this._registeredViewerCreateCallbackByCamera.get(object.constructor);
        return callback != null;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/modules/_BaseRegister.ts
class BaseModulesRegister {
    constructor(poly) {
        this.poly = poly;
        this._moduleByName = new Map();
    }
    register(moduleName, module, options) {
        let printWarnings = options === null || options === void 0 ? void 0 : options.printWarnings;
        if (printWarnings == null) {
            printWarnings = true;
        }
        if (this._moduleByName.has(moduleName) && printWarnings) {
            console.warn('module already registered', moduleName);
            return;
        }
        this._moduleByName.set(moduleName, module);
        module.onRegister(this.poly);
    }
    moduleNames() {
        const list = [];
        this._moduleByName.forEach((module, moduleName) => {
            list.push(moduleName);
        });
        return list;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/modules/DynamicModulesRegister.ts
// import {ModulesMap} from './All';

class DynamicModulesRegister extends BaseModulesRegister {
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/expressions/_BaseRegister.ts
class BaseExpressionRegister {
    constructor() {
        this._methodsNames = [];
        this._methodsByName = new Map();
    }
    register(expression, name) {
        this._methodsNames.push(name);
        this._methodsByName.set(name, expression);
    }
    getMethod(name) {
        return this._methodsByName.get(name);
    }
    availableMethods() {
        return this._methodsNames;
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/expressions/ExpressionRegister.ts

class ExpressionRegister extends BaseExpressionRegister {
    getMethod(name) {
        return super.getMethod(name);
    }
}

// EXTERNAL MODULE: ./src/engine/poly/registers/assemblers/_BaseRegister.ts
var _BaseRegister = __webpack_require__(74298);
;// CONCATENATED MODULE: ./src/engine/poly/registers/assemblers/AssemblersRegistry.ts

class AssemblersRegister extends _BaseRegister/* BaseAssemblersRegister */.s {
    assembler(node, name) {
        const pair = this._controllerAssemblerByName.get(name);
        if (pair) {
            const { controller, assembler } = pair;
            return new controller(node, assembler);
        }
        return pair;
    }
    unregister(name) {
        const pair = this._controllerAssemblerByName.get(name);
        super.unregister(name);
        return pair;
    }
}

// EXTERNAL MODULE: ./src/core/Type.ts
var Type = __webpack_require__(48454);
;// CONCATENATED MODULE: ./src/engine/poly/registers/nodes/NodesRegister.ts

class NodesRegister {
    constructor(poly) {
        this.poly = poly;
        this._nodesRegister = new Map();
        this._nodesRegisterCategories = new Map();
        this._nodesRegisterOptions = new Map();
    }
    static type(node) {
        return this.filterType(node.type());
    }
    static filterType(nodeType) {
        return nodeType.toLowerCase();
    }
    register(node, tabMenuCategory, options) {
        var _a, _b;
        const context = node.context();
        // if (node.type()[0].toLowerCase() != node.type()[0]) {
        // 	console.warn(`node type '${node.context()}/${node.type()}' should start with a lower case letter`);
        // }
        const nodeType = NodesRegister.type(node);
        let printWarnings = options === null || options === void 0 ? void 0 : options.printWarnings;
        if (printWarnings == null) {
            printWarnings = true;
        }
        let current_nodes_for_context = this._nodesRegister.get(context);
        if (!current_nodes_for_context) {
            current_nodes_for_context = new Map();
            this._nodesRegister.set(context, current_nodes_for_context);
        }
        const alreadyRegisteredNode = current_nodes_for_context.get(nodeType);
        if (alreadyRegisteredNode) {
            // if the node that is already registered is a polyNode, it can be overwritten by another polyNode.
            const isAlreadyRegisteredNodePolyNode = ((_b = (_a = this._nodesRegisterOptions.get(context)) === null || _a === void 0 ? void 0 : _a.get(nodeType)) === null || _b === void 0 ? void 0 : _b.polyNode) == true;
            const isNewNodePolyNode = (options === null || options === void 0 ? void 0 : options.polyNode) == true;
            if (isAlreadyRegisteredNodePolyNode && isNewNodePolyNode) {
                // we don't show a warning or return if both are polyNodes
            }
            else {
                if (printWarnings) {
                    console.warn(`node ${context}/${nodeType} already registered`);
                }
                return;
            }
        }
        current_nodes_for_context.set(nodeType, node);
        if (node.onRegister) {
            node.onRegister(this.poly);
        }
        if (tabMenuCategory) {
            let current_categories = this._nodesRegisterCategories.get(context);
            if (!current_categories) {
                current_categories = new Map();
                this._nodesRegisterCategories.set(context, current_categories);
            }
            const savedCategory = Type/* CoreType.isArray */.MR.isArray(tabMenuCategory) ? tabMenuCategory : [tabMenuCategory];
            current_categories.set(nodeType, savedCategory);
        }
        if (options) {
            let current_options = this._nodesRegisterOptions.get(context);
            if (!current_options) {
                current_options = new Map();
                this._nodesRegisterOptions.set(context, current_options);
            }
            current_options.set(nodeType, options);
        }
        this.poly.pluginsRegister.registerNode(node);
    }
    deregister(context, nodeType) {
        var _a, _b, _c;
        nodeType = NodesRegister.filterType(nodeType);
        (_a = this._nodesRegister.get(context)) === null || _a === void 0 ? void 0 : _a.delete(nodeType);
        (_b = this._nodesRegisterCategories.get(context)) === null || _b === void 0 ? void 0 : _b.delete(nodeType);
        (_c = this._nodesRegisterOptions.get(context)) === null || _c === void 0 ? void 0 : _c.delete(nodeType);
    }
    isRegistered(context, nodeType) {
        const nodes_for_context = this._nodesRegister.get(context);
        if (!nodes_for_context) {
            return false;
        }
        nodeType = NodesRegister.filterType(nodeType);
        return nodes_for_context.get(nodeType) != null;
    }
    nodeOptions(context, nodeType) {
        var _a;
        nodeType = NodesRegister.filterType(nodeType);
        return (_a = this._nodesRegisterOptions.get(context)) === null || _a === void 0 ? void 0 : _a.get(nodeType);
    }
    registeredNodesForParentNode(parentNode) {
        var _a, _b;
        const context = (_a = parentNode.childrenController) === null || _a === void 0 ? void 0 : _a.context;
        if (!context) {
            return [];
        }
        const map = this._nodesRegister.get(context);
        if (map) {
            const nodes_for_context = [];
            (_b = this._nodesRegister.get(context)) === null || _b === void 0 ? void 0 : _b.forEach((node, type) => {
                nodes_for_context.push(node);
            });
            return nodes_for_context.filter((node) => {
                const nodeType = NodesRegister.type(node);
                const options = this.nodeOptions(context, nodeType);
                if (!options) {
                    return true;
                }
                else {
                    const parentOptions = this.nodeOptions(parentNode.context(), parentNode.type());
                    if ((parentOptions === null || parentOptions === void 0 ? void 0 : parentOptions.polyNode) == true) {
                        // if parentNode is a polyNode, we should be able to create any node,
                        // otherwise we would not be able to create gl/subnetInput and gl/subnetOutput
                        // which would be problematic
                        return true;
                    }
                    const option_only = options['only'];
                    const option_except = options['except'];
                    const context_and_type = `${parentNode.context()}/${parentNode.type()}`;
                    if (option_only) {
                        return option_only.includes(context_and_type);
                    }
                    if (option_except) {
                        return !option_except.includes(context_and_type);
                    }
                    return true;
                }
            });
        }
        else {
            return [];
        }
    }
    registeredNodes(parentNode) {
        const nodesByType = {};
        const nodes = this.registeredNodesForParentNode(parentNode);
        for (let node of nodes) {
            const nodeType = NodesRegister.type(node);
            nodesByType[nodeType] = node;
        }
        return nodesByType;
    }
    registeredCategory(context, nodeType) {
        var _a;
        nodeType = NodesRegister.filterType(nodeType);
        return (_a = this._nodesRegisterCategories.get(context)) === null || _a === void 0 ? void 0 : _a.get(nodeType);
    }
    map() {
        return this._nodesRegister;
    }
}
class OperationsRegister {
    constructor(poly) {
        this.poly = poly;
        this._operation_register = new Map();
    }
    static type(node) {
        return this.filterType(node.type());
    }
    static filterType(nodeType) {
        return nodeType.toLowerCase();
    }
    register(operation, options) {
        let printWarnings = options === null || options === void 0 ? void 0 : options.printWarnings;
        if (printWarnings == null) {
            printWarnings = true;
        }
        const context = operation.context();
        let current_operations_for_context = this._operation_register.get(context);
        if (!current_operations_for_context) {
            current_operations_for_context = new Map();
            this._operation_register.set(context, current_operations_for_context);
        }
        const operationType = OperationsRegister.type(operation);
        const already_registered_operation = current_operations_for_context.get(operationType);
        if (already_registered_operation) {
            if (printWarnings) {
                const message = `operation ${context}/${operationType} already registered`;
                console.warn(message);
            }
            return;
        }
        current_operations_for_context.set(operationType, operation);
        if (operation.onRegister) {
            operation.onRegister(this.poly);
        }
        this.poly.pluginsRegister.registerOperation(operation);
    }
    registeredOperationsForContextAndParentType(context, parentNodeType) {
        var _a;
        const map = this._operation_register.get(context);
        if (map) {
            const nodes_for_context = [];
            (_a = this._operation_register.get(context)) === null || _a === void 0 ? void 0 : _a.forEach((operation, type) => {
                nodes_for_context.push(operation);
            });
            return nodes_for_context;
        }
        else {
            return [];
        }
    }
    registeredOperation(context, operationType) {
        const current_operations_for_context = this._operation_register.get(context);
        if (current_operations_for_context) {
            operationType = OperationsRegister.filterType(operationType);
            return current_operations_for_context.get(operationType);
        }
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/functions/_BaseRegister.ts
class BaseNamedFunctionRegister {
    constructor() {
        this._functionByName = new Map();
    }
    register(namedFunction, options) {
        let printWarnings = options === null || options === void 0 ? void 0 : options.printWarnings;
        if (printWarnings == null) {
            printWarnings = true;
        }
        const type = namedFunction.type();
        if (this._functionByName.has(type) && printWarnings) {
            console.warn(`namedFunction already registered`, type);
        }
        this._functionByName.set(type, namedFunction);
    }
}

;// CONCATENATED MODULE: ./src/engine/poly/registers/functions/FunctionsRegister.ts

class NamedFunctionRegister extends BaseNamedFunctionRegister {
    getFunction(functionName, node, shadersCollectionController) {
        const funcClass = this._functionByName.get(functionName);
        if (!funcClass) {
            console.error(`function not registered:'${functionName}'`);
        }
        const func = new funcClass(node, shadersCollectionController);
        return func;
        // return func as unknown as NamedFunctionMap[K];
    }
}

;// CONCATENATED MODULE: ./src/engine/Poly.ts




// import {SelfContainedScenesLoader} from './poly/SelfContainedSceneLoader';


// import {LogoController} from './poly/LogoController';




// registers







const POLYGONJS_VERSION = "1.5.60";
class PolyEngine {
    static _instance_() {
        // we are using a window globals to ensure 2 instances can never be created
        // even when the js are compiled by different means,
        // which can happen in the editor.
        if (window.__POLYGONJS_POLY_INSTANCE__) {
            return window.__POLYGONJS_POLY_INSTANCE__;
        }
        else {
            const instance = new PolyEngine();
            window.__POLYGONJS_POLY_INSTANCE__ = instance;
            // this._instance = instance
            return window.__POLYGONJS_POLY_INSTANCE__;
        }
        // return (this._instance = this._instance || new Poly());
    }
    constructor() {
        // static _instance: Poly | undefined;
        this.renderersController = new RenderersController();
        this.scenesRegister = new ScenesRegister();
        this.nodesRegister = new NodesRegister(this);
        this.operationsRegister = new OperationsRegister(this);
        this.expressionsRegister = new ExpressionRegister();
        this.assemblersRegister = new AssemblersRegister();
        this.pluginsRegister = new PluginsRegister(this);
        this.camerasRegister = new PolyCamerasRegister(this);
        this.modulesRegister = new DynamicModulesRegister(this);
        this.namedFunctionsRegister = new NamedFunctionRegister();
        this.blobs = new BlobsController(this);
        this.assetUrls = new AssetUrlsController();
        // public readonly logo = new LogoController();
        this.thirdParty = new PolyThirdPartyController();
        this.onObjectsAddRemoveHooks = new PolyOnObjectsAddRemoveHooksController/* PolyOnObjectsAddRemoveHooksController */.P4();
        this.onSceneUpdatedHooks = new PolyOnSceneUpdatedHooksController();
        this.specializedChildren = new PolySpecializedChildrenController();
        // public readonly selfContainedScenesLoader: SelfContainedScenesLoader = new SelfContainedScenesLoader();
        this.performance = new PolyPerformanceformanceController();
        this.scenesByUuid = {};
        this._playerMode = true;
        this._logger = null;
    }
    version() {
        return POLYGONJS_VERSION;
    }
    setPlayerMode(mode) {
        this._playerMode = mode;
    }
    playerMode() {
        return this._playerMode;
    }
    dispose() {
        this.scenesRegister.dispose();
        this.renderersController.dispose();
    }
    registerNode(node, tab_menu_category, options) {
        this.nodesRegister.register(node, tab_menu_category, options);
    }
    registerOperation(operation, options) {
        this.operationsRegister.register(operation, options);
    }
    registerNamedFunction(namedFunction, options) {
        this.namedFunctionsRegister.register(namedFunction, options);
    }
    registerCamera(cameraClass, viewerCreateCallback) {
        this.camerasRegister.register(cameraClass, viewerCreateCallback);
    }
    registerCameraNodeType(nodeType) {
        this.camerasRegister.registerNodeType(nodeType);
    }
    registerPlugin(plugin) {
        this.pluginsRegister.register(plugin);
    }
    wrapConfigurePolygonjs(callback) {
        this.pluginsRegister.wrapConfigurePolygonjs(callback);
    }
    registeredNodes(parentNode) {
        return this.nodesRegister.registeredNodes(parentNode);
    }
    registeredOperation(parent_context, operation_type) {
        return this.operationsRegister.registeredOperation(parent_context, operation_type);
    }
    // registeredCameraTypes() {
    // 	return this.camerasRegister.registeredTypes();
    // }
    registerModule(module, options) {
        this.modulesRegister.register(module.moduleName, module /*.module()*/, options);
    }
    inWorkerThread() {
        return false;
    }
    get libs() {
        return (this._libs_controller = this._libs_controller || new PolyLibsController());
    }
    //
    //
    // ENV
    //
    //
    setEnv(env) {
        this._env = env;
    }
    env() {
        return this._env;
    }
    //
    //
    // LOGGER
    //
    //
    setLogger(logger) {
        this._logger = logger;
    }
    logger() {
        return this._logger;
    }
    log(message, ...optionalParams) {
        var _a;
        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.log(...[message, ...optionalParams]);
    }
    warn(message, ...optionalParams) {
        var _a;
        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.warn(...[message, ...optionalParams]);
    }
    error(message, ...optionalParams) {
        var _a;
        (_a = this._logger) === null || _a === void 0 ? void 0 : _a.error(...[message, ...optionalParams]);
    }
}
const Poly = PolyEngine._instance_();


/***/ }),

/***/ 8846:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Gz": () => (/* binding */ cloneOnBeforeCompileData),
/* harmony export */   "Hc": () => (/* binding */ MaterialUserDataUniforms),
/* harmony export */   "OQ": () => (/* binding */ assignUniformViaUserData),
/* harmony export */   "VX": () => (/* binding */ assignOnBeforeCompileDataAndFunction),
/* harmony export */   "dJ": () => (/* binding */ copyOnBeforeCompileData),
/* harmony export */   "dQ": () => (/* binding */ OnBeforeCompileDataHandler),
/* harmony export */   "zA": () => (/* binding */ OnBeforeCompileDataConverter)
/* harmony export */ });
/* harmony import */ var _utils_GLParamConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(98828);

function cloneOnBeforeCompileData(data, options) {
    const { clonedParamConfigName } = options;
    let { clonedParamConfig } = options;
    const json = OnBeforeCompileDataConverter.toJSON(data);
    const clonedData = OnBeforeCompileDataConverter.fromJSON(json);
    const preservedParamConfigs = data.paramConfigs.filter((p) => p.name() != clonedParamConfigName);
    if (!clonedParamConfig) {
        clonedParamConfig = clonedData.paramConfigs.find((p) => p.name() == clonedParamConfigName);
    }
    const paramConfigs = preservedParamConfigs;
    if (clonedParamConfig) {
        paramConfigs.push(clonedParamConfig);
    }
    return {
        ...clonedData,
        paramConfigs,
    };
}
function assignUniformViaUserData(material, uniformName, newUniform) {
    const uniforms = MaterialUserDataUniforms.getUniforms(material);
    if (uniforms) {
        const currentUniform = uniforms[uniformName];
        if (currentUniform) {
            currentUniform.value = newUniform.value;
        }
        else {
            uniforms[uniformName] = newUniform;
        }
    }
    else {
        // if there are no uniforms, the material has not been compiled yet.
        // we therefore must add those to userData so that they are picked up in onBeforeCompile.
        // For instance, this can be the case for materials assigned to particles, when run without assemblers.
        // Since the assembler is responsible for assigning the additionalTextures, this is not done when they are not loaded.
        // But for this to work, we also need to make sure that the persistedConfig will not contain the uniforms in the userData
        // so those must be stripped out when saving it
        OnBeforeCompileDataHandler.addAdditionalTexture(material, uniformName, newUniform);
    }
}
class MaterialUserDataUniforms {
    static getUniforms(material) {
        var _a;
        return ((_a = material.userData) === null || _a === void 0 ? void 0 : _a.uniforms) || material.uniforms;
    }
    static setUniforms(material, uniforms) {
        material.userData.uniforms = uniforms;
    }
    static removeUniforms(material) {
        const uniforms = this.getUniforms(material);
        if (uniforms) {
            const userData = material.userData;
            delete userData['uniforms'];
        }
        return uniforms;
    }
}
function assignOnBeforeCompileDataAndFunction(scene, material, data) {
    OnBeforeCompileDataHandler.setData(material, data);
    material.onBeforeCompile = _createOnBeforeCompile(scene, material);
    // it is important that customProgramCacheKey is also set when there are no assemblers
    // as otherwise the material will all use the same key, and will override each other
    const key = `${material.uuid}:${performance.now()}`;
    material.customProgramCacheKey = () => key;
}
function copyOnBeforeCompileData(scene, params) {
    const { src, dest, shareCustomUniforms } = params;
    const data = OnBeforeCompileDataHandler.getData(src);
    if (data) {
        function cloneData(data) {
            const json = OnBeforeCompileDataConverter.toJSON(data);
            return OnBeforeCompileDataConverter.fromJSON(json);
        }
        const newData = shareCustomUniforms ? data : cloneData(data);
        assignOnBeforeCompileDataAndFunction(scene, dest, newData);
    }
}
function _createOnBeforeCompile(scene, material) {
    const onBeforeCompile = (shader) => {
        const data = OnBeforeCompileDataHandler.getData(material);
        if (!data) {
            return;
        }
        const { vertexShader, fragmentShader, paramConfigs, additionalTextureUniforms, timeDependent, resolutionDependent, raymarchingLightsWorldCoordsDependent, } = data;
        shader.vertexShader = vertexShader;
        shader.fragmentShader = fragmentShader;
        scene.uniformsController.addUniforms(shader.uniforms, {
            paramConfigs,
            additionalTextureUniforms,
            timeDependent,
            resolutionDependent,
            raymarchingLightsWorldCoordsDependent,
        });
        // also add to the material itself so that the material is easy to debug in the console, as well as in tests
        const shaderMaterial = material;
        shaderMaterial.vertexShader = shader.vertexShader;
        shaderMaterial.fragmentShader = shader.fragmentShader;
        MaterialUserDataUniforms.setUniforms(material, shader.uniforms);
        // saving the compilations count here
        // seems to have side effects and make tests fail.
        // so not using it for now
        // shaderMaterial.userData.compilationsCount = shaderMaterial.userData.compilationsCount || 0;
        // shaderMaterial.userData.compilationsCount++;
    };
    return onBeforeCompile;
}
class OnBeforeCompileDataHandler {
    static setData(material, data) {
        material.userData.onBeforeCompileData = data;
    }
    static addAdditionalTexture(material, uniformName, newUniform) {
        const data = this.getData(material);
        if (data) {
            const currentUniform = data.additionalTextureUniforms[uniformName];
            if (currentUniform == null) {
                data.additionalTextureUniforms[uniformName] = newUniform;
            }
        }
        else {
            console.warn('no data found on material', material);
        }
    }
    static getData(material) {
        return material.userData.onBeforeCompileData;
    }
    static removeData(material) {
        const data = this.getData(material);
        if (data) {
            const userData = material.userData;
            delete userData['onBeforeCompileData'];
        }
        return data;
    }
}
class OnBeforeCompileDataConverter {
    static toJSON(onBeforeCompileData) {
        const onBeforeCompileDataJSON = {
            vertexShader: onBeforeCompileData.vertexShader,
            fragmentShader: onBeforeCompileData.fragmentShader,
            timeDependent: onBeforeCompileData.timeDependent,
            resolutionDependent: onBeforeCompileData.resolutionDependent,
            raymarchingLightsWorldCoordsDependent: onBeforeCompileData.raymarchingLightsWorldCoordsDependent,
            paramConfigs: onBeforeCompileData.paramConfigs.map((pc) => pc.toJSON()),
        };
        return onBeforeCompileDataJSON;
    }
    static fromJSON(json) {
        const onBeforeCompileData = {
            ...json,
            additionalTextureUniforms: {},
            paramConfigs: json.paramConfigs.map((json) => _utils_GLParamConfig__WEBPACK_IMPORTED_MODULE_0__/* .GlParamConfig.fromJSON */ .b.fromJSON(json)),
        };
        return onBeforeCompileData;
    }
}


/***/ }),

/***/ 98828:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": () => (/* binding */ GlParamConfig)
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99477);
/* harmony import */ var _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7131);
/* harmony import */ var _poly_Assert__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(53120);
/* harmony import */ var _utils_code_configs_BaseParamConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18489);
/* harmony import */ var _poly_NodeContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62063);





class GlParamConfig extends _utils_code_configs_BaseParamConfig__WEBPACK_IMPORTED_MODULE_0__/* .BaseParamConfig */ .P {
    constructor(_type, _name, _defaultValue, _uniformName) {
        super(_type, _name, _defaultValue);
        this._uniformName = _uniformName;
    }
    toJSON() {
        return {
            type: this._type,
            name: this._name,
            defaultValue: this._defaultValue,
            uniformName: this._uniformName,
        };
    }
    static fromJSON(json) {
        return new GlParamConfig(json.type, json.name, json.defaultValue, json.uniformName);
    }
    uniformName() {
        return this._uniformName;
    }
    uniform() {
        return (this._uniform = this._uniform || this._createUniform());
    }
    _createUniform() {
        return GlParamConfig.uniformByType(this._type);
    }
    _callback(node, param) {
        GlParamConfig.callback(param, this.uniform());
        // switch (param.type) {
        // 	case ParamType.RAMP:
        // 		this.uniform.value = (param as RampParam).rampTexture();
        // 		return;
        // 	case ParamType.OPERATOR_PATH:
        // 		GlParamConfig.set_uniform_value_from_texture(param as OperatorPathParam, this.uniform);
        // 		return;
        // 	default:
        // 		this.uniform.value = param.value;
        // }
    }
    static callback(param, uniform) {
        switch (param.type()) {
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.RAMP */ ._.RAMP:
                uniform.value = param.rampTexture();
                return;
            // case ParamType.OPERATOR_PATH:
            // 	GlParamConfig.set_uniform_value_from_texture(param as OperatorPathParam, uniform);
            // 	return;
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.NODE_PATH */ ._.NODE_PATH:
                GlParamConfig.setUniformValueFromTextureFromNodePathParam(param, uniform);
                return;
            default:
                uniform.value = param.value;
        }
    }
    // TODO: refactor that to use the default values map?
    static uniformByType(type) {
        switch (type) {
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN:
                return { value: 0 };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BUTTON */ ._.BUTTON:
                return { value: 0 };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.COLOR */ ._.COLOR:
                return { value: new three__WEBPACK_IMPORTED_MODULE_2__.Color(0, 0, 0) };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT:
                return { value: 0 };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FOLDER */ ._.FOLDER:
                return { value: 0 };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.INTEGER */ ._.INTEGER:
                return { value: 0 };
            // case ParamType.OPERATOR_PATH:
            // 	return {value: 0};
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.NODE_PATH */ ._.NODE_PATH:
                return { value: 0 };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.PARAM_PATH */ ._.PARAM_PATH:
                return { value: 0 };
            // case ParamType.STRING: return {type: 't', value: null} // new Texture()}
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.RAMP */ ._.RAMP:
                return { value: null }; // new Texture()}
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING:
                return { value: null };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2:
                return { value: new three__WEBPACK_IMPORTED_MODULE_2__.Vector2(0, 0) };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3:
                return { value: new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(0, 0, 0) };
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR4 */ ._.VECTOR4:
                return { value: new three__WEBPACK_IMPORTED_MODULE_2__.Vector4(0, 0, 0, 0) };
        }
        _poly_Assert__WEBPACK_IMPORTED_MODULE_3__/* .TypeAssert.unreachable */ .f.unreachable(type);
    }
    // private static set_uniform_value_from_texture(param: OperatorPathParam, uniform: IUniform) {
    // 	const found_node = param.found_node();
    // 	if (found_node) {
    // 		if (found_node.isDirty()) {
    // 			found_node.compute().then((container) => {
    // 				const texture = container.texture();
    // 				uniform.value = texture;
    // 			});
    // 		} else {
    // 			const container = found_node.containerController.container();
    // 			const texture = container.texture();
    // 			uniform.value = texture;
    // 		}
    // 	} else {
    // 		uniform.value = null;
    // 	}
    // }
    static async setUniformValueFromTextureFromNodePathParam(param, uniform) {
        if (param.isDirty()) {
            await param.compute();
        }
        const node = param.value.nodeWithContext(_poly_NodeContext__WEBPACK_IMPORTED_MODULE_4__/* .NodeContext.COP */ .sy.COP);
        if (node) {
            if (node.isDirty()) {
                await node.compute();
            }
            const container = node.containerController.container();
            const texture = container.texture();
            uniform.value = texture;
        }
        else {
            uniform.value = null;
        }
    }
}


/***/ }),

/***/ 22317:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R_": () => (/* binding */ deregisterGeneratorsForObject),
/* harmony export */   "yV": () => (/* binding */ ActorEvaluatorGenerator)
/* harmony export */ });
/* unused harmony export generatorsForObject */
/* harmony import */ var _core_ObjectUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(41474);

const evaluatorGeneratorByObject = new WeakMap();
function registerGeneratorForObject(object, generator) {
    let set = evaluatorGeneratorByObject.get(object);
    if (!set) {
        set = new Set();
        evaluatorGeneratorByObject.set(object, set);
    }
    set.add(generator);
}
function deregisterGeneratorForObject(object, generator) {
    let set = evaluatorGeneratorByObject.get(object);
    if (!set) {
        return;
    }
    set.delete(generator);
}
function deregisterGeneratorsForObject(object) {
    let set = evaluatorGeneratorByObject.get(object);
    if (!set) {
        return;
    }
    set.forEach((evaluatorGenerator) => {
        evaluatorGenerator.disposeEvaluator(object);
    });
    evaluatorGeneratorByObject.delete(object);
}
function generatorsForObject(object) {
    return evaluatorGeneratorByObject.get(object);
}
const NOT_STORABLE_METHOD_NAMES = new Set([
    'constructor',
    'onDispose',
    'dispose',
    '__defineGetter__',
    '__defineSetter__',
    'hasOwnProperty',
    '__lookupGetter__',
    '__lookupSetter__',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toString',
    'valueOf',
    'toLocaleString',
]);
class ActorEvaluatorGenerator {
    constructor(_func) {
        this._func = _func;
        // the possible method names are not only EvaluatorMethodName,
        // but can be any string, such as "onManualTrigger1"
        this._expectedEvaluatorMethodNames = new Set();
        this._evaluatorByObject = new Map();
    }
    _createEvaluator(object) {
        return this._func(object);
    }
    setExpectedEvaluatorMethodNames(dummyEvaluator) {
        this._expectedEvaluatorMethodNames.clear();
        const methodNames = (0,_core_ObjectUtils__WEBPACK_IMPORTED_MODULE_0__/* .getObjectMethodNames */ .NH)(dummyEvaluator);
        for (const methodName of methodNames) {
            if (dummyEvaluator[methodName] && !NOT_STORABLE_METHOD_NAMES.has(methodName)) {
                this._expectedEvaluatorMethodNames.add(methodName);
            }
        }
    }
    hasExpectedEvaluatorMethodName(methodName) {
        return this._expectedEvaluatorMethodNames.has(methodName);
    }
    size() {
        return this._evaluatorByObject.size;
    }
    disposeEvaluator(object) {
        const evaluator = this._evaluatorByObject.get(object);
        if (!evaluator) {
            return;
        }
        evaluator.dispose();
        this._evaluatorByObject.delete(object);
    }
    findOrCreateEvaluator(object) {
        let evaluator = this._evaluatorByObject.get(object);
        if (!evaluator) {
            evaluator = this._createEvaluator(object);
            this._evaluatorByObject.set(object, evaluator);
            registerGeneratorForObject(object, this);
        }
        return evaluator;
    }
    traverseEvaluator(callback) {
        this._evaluatorByObject.forEach(callback);
    }
    clearObjects() {
        this._evaluatorByObject.forEach((evaluator, object) => {
            evaluator.dispose();
            deregisterGeneratorForObject(object, this);
        });
        this._evaluatorByObject.clear();
    }
}


/***/ }),

/***/ 61563:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => (/* binding */ selectedIndicesFromSelectionStates),
/* harmony export */   "Z": () => (/* binding */ updateSelectionState)
/* harmony export */ });
function updateSelectionState(selectionStates, entity, state) {
    const currentState = selectionStates.get(entity);
    if (!currentState) {
        selectionStates.set(entity, state);
    }
}
function selectedIndicesFromSelectionStates(selectionStates, selectedIndices, invert) {
    selectionStates.forEach((state, entity) => {
        const selected = (!invert && state) || (invert && !state);
        if (selected) {
            selectedIndices.add(entity.index());
        }
    });
}


/***/ }),

/***/ 18489:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": () => (/* binding */ BaseParamConfig)
/* harmony export */ });
/* harmony import */ var _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7131);
/* harmony import */ var _poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62063);


// import {ParamValueComparer} from '../../params/ParamValueComparer';
// import {ParamValueCloner} from '../../params/ParamValueCloner';
// import {CoreTextureLoader} from '../../../../../Core/Loader/Texture'
class BaseParamConfig {
    // private _texture_loader: CoreTextureLoader
    constructor(_type, _name, _defaultValue) {
        this._type = _type;
        this._name = _name;
        this._defaultValue = _defaultValue;
        if (_name == '' || _name == null) {
            throw new Error(`name must not be an empty string`);
        }
    }
    static fromParam(param) {
        return new BaseParamConfig(param.type(), param.name(), param.defaultValue());
    }
    type() {
        return this._type;
    }
    name() {
        return this._name;
    }
    defaultValue() {
        return this._defaultValue;
    }
    paramOptions() {
        const callbackBound = this._callback.bind(this);
        switch (this._type) {
            case _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH:
                return { callback: callbackBound, nodeSelection: { context: _poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.COP */ .sy.COP } };
            default:
                return { callback: callbackBound };
        }
    }
    applyToNode(node) {
        if (!node.params.has(this._name)) {
            return;
        }
        const param = node.params.get(this._name);
        if (!param) {
            return;
        }
        const additionalOptions = this.paramOptions();
        const additionalOptionNames = Object.keys(additionalOptions);
        for (const optionName of additionalOptionNames) {
            param.options.setOption(optionName, additionalOptions[optionName]);
        }
        // We force the param configs to run their callbacks to ensure that the uniforms are up to date.
        // This seems better than running the parameter options callback, since it would check
        // if the scene is loading or the node cooking, which is unnecessary for uniforms
        this.executeCallback(node, param);
        // we also have a special case for operator path,
        // since they would not have found their node at load time
        if (param.type() == _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH) {
            setTimeout(async () => {
                if (param.isDirty()) {
                    await param.compute();
                }
                param.options.executeCallback();
            }, 200);
        }
    }
    executeCallback(node, param) {
        this._callback(node, param);
    }
    _callback(node, param) { }
}


/***/ }),

/***/ 43642:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$c": () => (/* binding */ isJsConnectionPointArray),
/* harmony export */   "BR": () => (/* binding */ JsConnectionPointInitValueMap),
/* harmony export */   "Kh": () => (/* binding */ ARRAYABLE_CONNECTION_TYPES),
/* harmony export */   "N5": () => (/* binding */ JsConnectionPointComponentsCountMap),
/* harmony export */   "RC": () => (/* binding */ JsConnectionPointTypeToArrayTypeMap),
/* harmony export */   "RO": () => (/* binding */ JS_CONNECTION_TYPES_FOR_CONSTANT),
/* harmony export */   "RR": () => (/* binding */ JsConnectionPointTypeFromArrayTypeMap),
/* harmony export */   "VV": () => (/* binding */ JsParamTypeToConnectionPointTypeMap),
/* harmony export */   "Z": () => (/* binding */ POINT_ATTRIBUTE_JS_CONNECTION_POINT_TYPES),
/* harmony export */   "dK": () => (/* binding */ JsConnectionPointTypeToParamTypeMap),
/* harmony export */   "fp": () => (/* binding */ JsConnectionPoint),
/* harmony export */   "kb": () => (/* binding */ isJsConnectionPointNumber),
/* harmony export */   "mH": () => (/* binding */ PARAM_CONVERTIBLE_JS_CONNECTION_POINT_TYPES),
/* harmony export */   "mX": () => (/* binding */ JS_CONNECTION_POINT_IN_NODE_DEF),
/* harmony export */   "vm": () => (/* binding */ ARRAY_JS_CONNECTION_TYPES_SET),
/* harmony export */   "wJ": () => (/* binding */ isJsConnectionPointVector),
/* harmony export */   "wY": () => (/* binding */ isJsConnectionPointPrimitive),
/* harmony export */   "yL": () => (/* binding */ JS_CONNECTION_POINT_TYPES),
/* harmony export */   "zF": () => (/* binding */ JsConnectionPointType)
/* harmony export */ });
/* unused harmony export ARRAY_JS_CONNECTION_TYPES */
/* harmony import */ var _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7131);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(90946);


var JsConnectionPointType;
(function (JsConnectionPointType) {
    JsConnectionPointType["ANIMATION_MIXER"] = "AnimationMixer";
    JsConnectionPointType["ANIMATION_ACTION"] = "AnimationAction";
    JsConnectionPointType["BOOLEAN"] = "boolean";
    JsConnectionPointType["BOOLEAN_ARRAY"] = "boolean[]";
    JsConnectionPointType["BOX3"] = "Box3";
    JsConnectionPointType["CAMERA"] = "Camera";
    JsConnectionPointType["CATMULL_ROM_CURVE3"] = "CatmullRomCurve3";
    JsConnectionPointType["COLOR"] = "Color";
    JsConnectionPointType["COLOR_ARRAY"] = "Color[]";
    JsConnectionPointType["EULER"] = "Euler";
    JsConnectionPointType["EULER_ARRAY"] = "Euler[]";
    JsConnectionPointType["FLOAT"] = "float";
    JsConnectionPointType["FLOAT_ARRAY"] = "float[]";
    JsConnectionPointType["INT"] = "int";
    JsConnectionPointType["INT_ARRAY"] = "int[]";
    JsConnectionPointType["INTERSECTION"] = "Intersection";
    JsConnectionPointType["INTERSECTION_ARRAY"] = "Intersection[]";
    JsConnectionPointType["MATERIAL"] = "Material";
    JsConnectionPointType["MATRIX4"] = "Matrix4";
    JsConnectionPointType["MATRIX4_ARRAY"] = "Matrix4[]";
    JsConnectionPointType["NODE"] = "Node";
    JsConnectionPointType["OBJECT_3D"] = "Object3D";
    JsConnectionPointType["OBJECT_3D_ARRAY"] = "Object3D[]";
    JsConnectionPointType["PARAM"] = "Param";
    JsConnectionPointType["PLANE"] = "Plane";
    JsConnectionPointType["QUATERNION"] = "Quaternion";
    JsConnectionPointType["QUATERNION_ARRAY"] = "Quaternion[]";
    JsConnectionPointType["RAY"] = "Ray";
    JsConnectionPointType["SPHERE"] = "Sphere";
    JsConnectionPointType["STRING"] = "string";
    JsConnectionPointType["STRING_ARRAY"] = "string[]";
    JsConnectionPointType["TEXTURE"] = "Texture";
    JsConnectionPointType["TEXTURE_ARRAY"] = "Texture[]";
    JsConnectionPointType["TRIGGER"] = "trigger";
    JsConnectionPointType["VECTOR2"] = "Vector2";
    JsConnectionPointType["VECTOR2_ARRAY"] = "Vector2[]";
    JsConnectionPointType["VECTOR3"] = "Vector3";
    JsConnectionPointType["VECTOR3_ARRAY"] = "Vector3[]";
    JsConnectionPointType["VECTOR4"] = "Vector4";
    JsConnectionPointType["VECTOR4_ARRAY"] = "Vector4[]";
    // MAT3 = 'mat3',
    // MAT4 = 'mat4',
})(JsConnectionPointType || (JsConnectionPointType = {}));
const NUMBER_JS_CONNECTION_TYPES = new Set([JsConnectionPointType.FLOAT, JsConnectionPointType.INT]);
const PRIMITIVE_JS_CONNECTION_TYPES = new Set([
    JsConnectionPointType.BOOLEAN,
    JsConnectionPointType.FLOAT,
    JsConnectionPointType.INT,
    JsConnectionPointType.STRING,
]);
const VECTOR_JS_CONNECTION_TYPES = new Set([
    JsConnectionPointType.VECTOR2,
    JsConnectionPointType.VECTOR3,
    JsConnectionPointType.VECTOR4,
]);
const JS_CONNECTION_TYPES_FOR_CONSTANT = [
    JsConnectionPointType.BOOLEAN,
    JsConnectionPointType.COLOR,
    JsConnectionPointType.FLOAT,
    JsConnectionPointType.INT,
    JsConnectionPointType.STRING,
    JsConnectionPointType.VECTOR2,
    JsConnectionPointType.VECTOR3,
    JsConnectionPointType.VECTOR4,
];
function isJsConnectionPointNumber(type) {
    return NUMBER_JS_CONNECTION_TYPES.has(type);
}
function isJsConnectionPointPrimitive(type) {
    return PRIMITIVE_JS_CONNECTION_TYPES.has(type);
}
function isJsConnectionPointVector(type) {
    return VECTOR_JS_CONNECTION_TYPES.has(type);
}
function isJsConnectionPointArray(type) {
    return ARRAY_JS_CONNECTION_TYPES_SET.has(type);
}
//
//
// ALL Js Data types in an array
//
//
const JS_CONNECTION_POINT_TYPES = [
    JsConnectionPointType.ANIMATION_MIXER,
    JsConnectionPointType.ANIMATION_ACTION,
    JsConnectionPointType.BOX3,
    JsConnectionPointType.BOOLEAN,
    JsConnectionPointType.BOOLEAN_ARRAY,
    JsConnectionPointType.CAMERA,
    JsConnectionPointType.CATMULL_ROM_CURVE3,
    JsConnectionPointType.COLOR,
    JsConnectionPointType.COLOR_ARRAY,
    JsConnectionPointType.EULER,
    JsConnectionPointType.EULER_ARRAY,
    JsConnectionPointType.FLOAT,
    JsConnectionPointType.FLOAT_ARRAY,
    JsConnectionPointType.INT,
    JsConnectionPointType.INT_ARRAY,
    JsConnectionPointType.INTERSECTION,
    JsConnectionPointType.INTERSECTION_ARRAY,
    JsConnectionPointType.MATERIAL,
    JsConnectionPointType.MATRIX4,
    JsConnectionPointType.MATRIX4_ARRAY,
    JsConnectionPointType.NODE,
    JsConnectionPointType.OBJECT_3D,
    JsConnectionPointType.OBJECT_3D_ARRAY,
    JsConnectionPointType.PARAM,
    JsConnectionPointType.PLANE,
    JsConnectionPointType.QUATERNION,
    JsConnectionPointType.QUATERNION_ARRAY,
    JsConnectionPointType.RAY,
    JsConnectionPointType.SPHERE,
    JsConnectionPointType.STRING,
    JsConnectionPointType.STRING_ARRAY,
    JsConnectionPointType.TEXTURE,
    JsConnectionPointType.TEXTURE_ARRAY,
    JsConnectionPointType.TRIGGER,
    JsConnectionPointType.VECTOR2,
    JsConnectionPointType.VECTOR2_ARRAY,
    JsConnectionPointType.VECTOR3,
    JsConnectionPointType.VECTOR3_ARRAY,
    JsConnectionPointType.VECTOR4,
    JsConnectionPointType.VECTOR4_ARRAY,
    // JsConnectionPointType.MAT3,
    // JsConnectionPointType.MAT4,
];
const JsConnectionPointTypeToArrayTypeMap = {
    [JsConnectionPointType.ANIMATION_MIXER]: JsConnectionPointType.ANIMATION_MIXER,
    [JsConnectionPointType.ANIMATION_ACTION]: JsConnectionPointType.ANIMATION_ACTION,
    [JsConnectionPointType.BOOLEAN]: JsConnectionPointType.BOOLEAN_ARRAY,
    [JsConnectionPointType.BOOLEAN_ARRAY]: JsConnectionPointType.BOOLEAN_ARRAY,
    [JsConnectionPointType.BOX3]: JsConnectionPointType.BOX3,
    [JsConnectionPointType.CAMERA]: JsConnectionPointType.CAMERA,
    [JsConnectionPointType.CATMULL_ROM_CURVE3]: JsConnectionPointType.CATMULL_ROM_CURVE3,
    [JsConnectionPointType.COLOR]: JsConnectionPointType.COLOR_ARRAY,
    [JsConnectionPointType.COLOR_ARRAY]: JsConnectionPointType.COLOR_ARRAY,
    [JsConnectionPointType.EULER]: JsConnectionPointType.EULER_ARRAY,
    [JsConnectionPointType.EULER_ARRAY]: JsConnectionPointType.EULER_ARRAY,
    [JsConnectionPointType.FLOAT]: JsConnectionPointType.FLOAT_ARRAY,
    [JsConnectionPointType.FLOAT_ARRAY]: JsConnectionPointType.FLOAT_ARRAY,
    [JsConnectionPointType.INT]: JsConnectionPointType.INT_ARRAY,
    [JsConnectionPointType.INT_ARRAY]: JsConnectionPointType.INT_ARRAY,
    [JsConnectionPointType.INTERSECTION]: JsConnectionPointType.INTERSECTION_ARRAY,
    [JsConnectionPointType.INTERSECTION_ARRAY]: JsConnectionPointType.INTERSECTION_ARRAY,
    [JsConnectionPointType.MATERIAL]: JsConnectionPointType.MATERIAL,
    [JsConnectionPointType.MATRIX4]: JsConnectionPointType.MATRIX4_ARRAY,
    [JsConnectionPointType.MATRIX4_ARRAY]: JsConnectionPointType.MATRIX4_ARRAY,
    [JsConnectionPointType.NODE]: JsConnectionPointType.NODE,
    [JsConnectionPointType.OBJECT_3D]: JsConnectionPointType.OBJECT_3D_ARRAY,
    [JsConnectionPointType.OBJECT_3D_ARRAY]: JsConnectionPointType.OBJECT_3D_ARRAY,
    [JsConnectionPointType.PARAM]: JsConnectionPointType.PARAM,
    [JsConnectionPointType.PLANE]: JsConnectionPointType.PLANE,
    [JsConnectionPointType.QUATERNION]: JsConnectionPointType.QUATERNION_ARRAY,
    [JsConnectionPointType.QUATERNION_ARRAY]: JsConnectionPointType.QUATERNION_ARRAY,
    [JsConnectionPointType.RAY]: JsConnectionPointType.RAY,
    [JsConnectionPointType.SPHERE]: JsConnectionPointType.SPHERE,
    [JsConnectionPointType.STRING]: JsConnectionPointType.STRING_ARRAY,
    [JsConnectionPointType.STRING_ARRAY]: JsConnectionPointType.STRING_ARRAY,
    [JsConnectionPointType.TEXTURE]: JsConnectionPointType.TEXTURE_ARRAY,
    [JsConnectionPointType.TEXTURE_ARRAY]: JsConnectionPointType.TEXTURE_ARRAY,
    // [ActorConnectionPointType.TRACKING_RESULT_HAND]: ActorConnectionPointType.TRACKING_RESULT_HAND,
    [JsConnectionPointType.TRIGGER]: JsConnectionPointType.TRIGGER,
    [JsConnectionPointType.VECTOR2]: JsConnectionPointType.VECTOR2_ARRAY,
    [JsConnectionPointType.VECTOR2_ARRAY]: JsConnectionPointType.VECTOR2_ARRAY,
    [JsConnectionPointType.VECTOR3]: JsConnectionPointType.VECTOR3_ARRAY,
    [JsConnectionPointType.VECTOR3_ARRAY]: JsConnectionPointType.VECTOR3_ARRAY,
    [JsConnectionPointType.VECTOR4]: JsConnectionPointType.VECTOR4_ARRAY,
    [JsConnectionPointType.VECTOR4_ARRAY]: JsConnectionPointType.VECTOR4_ARRAY,
};
const JsConnectionPointTypeFromArrayTypeMap = {
    [JsConnectionPointType.ANIMATION_MIXER]: JsConnectionPointType.ANIMATION_MIXER,
    [JsConnectionPointType.ANIMATION_ACTION]: JsConnectionPointType.ANIMATION_ACTION,
    [JsConnectionPointType.BOOLEAN]: JsConnectionPointType.BOOLEAN,
    [JsConnectionPointType.BOOLEAN_ARRAY]: JsConnectionPointType.BOOLEAN,
    [JsConnectionPointType.BOX3]: JsConnectionPointType.BOX3,
    [JsConnectionPointType.CAMERA]: JsConnectionPointType.CAMERA,
    [JsConnectionPointType.CATMULL_ROM_CURVE3]: JsConnectionPointType.CATMULL_ROM_CURVE3,
    [JsConnectionPointType.COLOR]: JsConnectionPointType.COLOR,
    [JsConnectionPointType.COLOR_ARRAY]: JsConnectionPointType.COLOR,
    [JsConnectionPointType.EULER]: JsConnectionPointType.EULER,
    [JsConnectionPointType.EULER_ARRAY]: JsConnectionPointType.EULER,
    [JsConnectionPointType.FLOAT]: JsConnectionPointType.FLOAT,
    [JsConnectionPointType.FLOAT_ARRAY]: JsConnectionPointType.FLOAT,
    [JsConnectionPointType.INT]: JsConnectionPointType.INT,
    [JsConnectionPointType.INT_ARRAY]: JsConnectionPointType.INT,
    [JsConnectionPointType.INTERSECTION]: JsConnectionPointType.INTERSECTION,
    [JsConnectionPointType.INTERSECTION_ARRAY]: JsConnectionPointType.INTERSECTION,
    [JsConnectionPointType.MATERIAL]: JsConnectionPointType.MATERIAL,
    [JsConnectionPointType.MATRIX4]: JsConnectionPointType.MATRIX4,
    [JsConnectionPointType.MATRIX4_ARRAY]: JsConnectionPointType.MATRIX4,
    [JsConnectionPointType.NODE]: JsConnectionPointType.NODE,
    [JsConnectionPointType.OBJECT_3D]: JsConnectionPointType.OBJECT_3D,
    [JsConnectionPointType.OBJECT_3D_ARRAY]: JsConnectionPointType.OBJECT_3D,
    [JsConnectionPointType.PARAM]: JsConnectionPointType.PARAM,
    [JsConnectionPointType.PLANE]: JsConnectionPointType.PLANE,
    [JsConnectionPointType.QUATERNION]: JsConnectionPointType.QUATERNION,
    [JsConnectionPointType.QUATERNION_ARRAY]: JsConnectionPointType.QUATERNION,
    [JsConnectionPointType.RAY]: JsConnectionPointType.RAY,
    [JsConnectionPointType.SPHERE]: JsConnectionPointType.SPHERE,
    [JsConnectionPointType.STRING]: JsConnectionPointType.STRING,
    [JsConnectionPointType.STRING_ARRAY]: JsConnectionPointType.STRING,
    [JsConnectionPointType.TEXTURE]: JsConnectionPointType.TEXTURE,
    [JsConnectionPointType.TEXTURE_ARRAY]: JsConnectionPointType.TEXTURE,
    // [ActorConnectionPointType.TRACKING_RESULT_HAND]: ActorConnectionPointType.TRACKING_RESULT_HAND,
    [JsConnectionPointType.TRIGGER]: JsConnectionPointType.TRIGGER,
    [JsConnectionPointType.VECTOR2]: JsConnectionPointType.VECTOR2,
    [JsConnectionPointType.VECTOR2_ARRAY]: JsConnectionPointType.VECTOR2,
    [JsConnectionPointType.VECTOR3]: JsConnectionPointType.VECTOR3,
    [JsConnectionPointType.VECTOR3_ARRAY]: JsConnectionPointType.VECTOR3,
    [JsConnectionPointType.VECTOR4]: JsConnectionPointType.VECTOR4,
    [JsConnectionPointType.VECTOR4_ARRAY]: JsConnectionPointType.VECTOR4,
};
const ARRAYABLE_CONNECTION_TYPES = new Set([
    JsConnectionPointType.BOOLEAN,
    JsConnectionPointType.COLOR,
    JsConnectionPointType.FLOAT,
    JsConnectionPointType.INT,
    JsConnectionPointType.INTERSECTION,
    JsConnectionPointType.MATRIX4,
    JsConnectionPointType.QUATERNION,
    JsConnectionPointType.STRING,
    JsConnectionPointType.TEXTURE,
    JsConnectionPointType.VECTOR2,
    JsConnectionPointType.VECTOR3,
    JsConnectionPointType.VECTOR4,
]);
const ARRAY_JS_CONNECTION_TYPES = [
    JsConnectionPointType.BOOLEAN_ARRAY,
    JsConnectionPointType.COLOR_ARRAY,
    JsConnectionPointType.FLOAT_ARRAY,
    JsConnectionPointType.INT_ARRAY,
    JsConnectionPointType.INTERSECTION_ARRAY,
    JsConnectionPointType.MATRIX4_ARRAY,
    JsConnectionPointType.OBJECT_3D_ARRAY,
    JsConnectionPointType.QUATERNION_ARRAY,
    JsConnectionPointType.STRING_ARRAY,
    JsConnectionPointType.TEXTURE_ARRAY,
    JsConnectionPointType.VECTOR2_ARRAY,
    JsConnectionPointType.VECTOR3_ARRAY,
    JsConnectionPointType.VECTOR4_ARRAY,
];
const ARRAY_JS_CONNECTION_TYPES_SET = new Set(ARRAY_JS_CONNECTION_TYPES);
const PARAM_CONVERTIBLE_JS_CONNECTION_POINT_TYPES = [
    JsConnectionPointType.BOOLEAN,
    JsConnectionPointType.COLOR,
    JsConnectionPointType.FLOAT,
    JsConnectionPointType.INT,
    JsConnectionPointType.STRING,
    JsConnectionPointType.VECTOR2,
    JsConnectionPointType.VECTOR3,
    JsConnectionPointType.VECTOR4,
];
const POINT_ATTRIBUTE_JS_CONNECTION_POINT_TYPES = [
    JsConnectionPointType.COLOR,
    JsConnectionPointType.FLOAT,
    JsConnectionPointType.INT,
    JsConnectionPointType.VECTOR2,
    JsConnectionPointType.VECTOR3,
    JsConnectionPointType.VECTOR4,
];
const JsConnectionPointTypeToParamTypeMap = {
    [JsConnectionPointType.ANIMATION_MIXER]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.ANIMATION_ACTION]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.BOOLEAN]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BOOLEAN */ ._.BOOLEAN,
    [JsConnectionPointType.BOOLEAN_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.BOX3]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.CAMERA]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.CATMULL_ROM_CURVE3]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.COLOR]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.COLOR */ ._.COLOR,
    [JsConnectionPointType.COLOR_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.EULER]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.EULER_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.FLOAT]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT,
    [JsConnectionPointType.FLOAT_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.INT]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.INTEGER */ ._.INTEGER,
    [JsConnectionPointType.INT_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.INTERSECTION]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.INTERSECTION_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.MATERIAL]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.MATRIX4]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.MATRIX4_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.NODE]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH,
    [JsConnectionPointType.OBJECT_3D]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.OBJECT_3D_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.PARAM]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.PARAM_PATH */ ._.PARAM_PATH,
    [JsConnectionPointType.PLANE]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.QUATERNION]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.QUATERNION_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.RAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.SPHERE]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.STRING]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING,
    [JsConnectionPointType.STRING_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.TEXTURE]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.TEXTURE_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.TRIGGER]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.VECTOR2]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR2 */ ._.VECTOR2,
    [JsConnectionPointType.VECTOR2_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.VECTOR3]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3,
    [JsConnectionPointType.VECTOR3_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    [JsConnectionPointType.VECTOR4]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR4 */ ._.VECTOR4,
    [JsConnectionPointType.VECTOR4_ARRAY]: _poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON,
    // [JsConnectionPointType.MAT3]: undefined,
    // [JsConnectionPointType.MAT4]: undefined,
};
const JsParamTypeToConnectionPointTypeMap = {
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BOOLEAN */ ._.BOOLEAN]: JsConnectionPointType.BOOLEAN,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.COLOR */ ._.COLOR]: JsConnectionPointType.COLOR,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT]: JsConnectionPointType.FLOAT,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.INTEGER */ ._.INTEGER]: JsConnectionPointType.INT,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FOLDER */ ._.FOLDER]: undefined,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR2 */ ._.VECTOR2]: JsConnectionPointType.VECTOR2,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3]: JsConnectionPointType.VECTOR3,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR4 */ ._.VECTOR4]: JsConnectionPointType.VECTOR4,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BUTTON */ ._.BUTTON]: undefined,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH]: JsConnectionPointType.NODE,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.PARAM_PATH */ ._.PARAM_PATH]: JsConnectionPointType.PARAM,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.RAMP */ ._.RAMP]: undefined,
    [_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING]: JsConnectionPointType.STRING,
};
const JsConnectionPointInitValueMap = {
    [JsConnectionPointType.ANIMATION_ACTION]: null,
    [JsConnectionPointType.ANIMATION_MIXER]: null,
    [JsConnectionPointType.BOOLEAN]: false,
    [JsConnectionPointType.BOOLEAN_ARRAY]: null,
    [JsConnectionPointType.BOX3]: null,
    [JsConnectionPointType.CAMERA]: null,
    [JsConnectionPointType.CATMULL_ROM_CURVE3]: null,
    [JsConnectionPointType.COLOR]: [1, 1, 1],
    [JsConnectionPointType.COLOR_ARRAY]: null,
    [JsConnectionPointType.EULER]: null,
    [JsConnectionPointType.EULER_ARRAY]: null,
    [JsConnectionPointType.FLOAT]: 0,
    [JsConnectionPointType.FLOAT_ARRAY]: null,
    [JsConnectionPointType.INT]: 0,
    [JsConnectionPointType.INT_ARRAY]: null,
    [JsConnectionPointType.INTERSECTION]: null,
    [JsConnectionPointType.INTERSECTION_ARRAY]: null,
    [JsConnectionPointType.MATERIAL]: null,
    [JsConnectionPointType.MATRIX4]: null,
    [JsConnectionPointType.MATRIX4_ARRAY]: null,
    [JsConnectionPointType.NODE]: '',
    [JsConnectionPointType.OBJECT_3D]: null,
    [JsConnectionPointType.OBJECT_3D_ARRAY]: null,
    [JsConnectionPointType.PARAM]: '',
    [JsConnectionPointType.PLANE]: null,
    [JsConnectionPointType.QUATERNION]: null,
    [JsConnectionPointType.QUATERNION_ARRAY]: null,
    [JsConnectionPointType.RAY]: null,
    [JsConnectionPointType.SPHERE]: null,
    [JsConnectionPointType.STRING]: '',
    [JsConnectionPointType.STRING_ARRAY]: null,
    [JsConnectionPointType.TEXTURE]: null,
    [JsConnectionPointType.TEXTURE_ARRAY]: null,
    [JsConnectionPointType.TRIGGER]: null,
    [JsConnectionPointType.VECTOR2]: [0, 0],
    [JsConnectionPointType.VECTOR2_ARRAY]: null,
    [JsConnectionPointType.VECTOR3]: [0, 0, 0],
    [JsConnectionPointType.VECTOR3_ARRAY]: null,
    [JsConnectionPointType.VECTOR4]: [0, 0, 0, 0],
    [JsConnectionPointType.VECTOR4_ARRAY]: null,
    // [JsConnectionPointType.MAT3]: [0],
    // [JsConnectionPointType.MAT4]: [0],
};
const JsConnectionPointComponentsCountMap = {
    [JsConnectionPointType.ANIMATION_ACTION]: 1,
    [JsConnectionPointType.ANIMATION_MIXER]: 1,
    [JsConnectionPointType.BOOLEAN]: 1,
    [JsConnectionPointType.BOOLEAN_ARRAY]: 1,
    [JsConnectionPointType.BOX3]: 1,
    [JsConnectionPointType.CAMERA]: 1,
    [JsConnectionPointType.CATMULL_ROM_CURVE3]: 1,
    [JsConnectionPointType.COLOR]: 3,
    [JsConnectionPointType.COLOR_ARRAY]: 1,
    [JsConnectionPointType.EULER]: 3,
    [JsConnectionPointType.EULER_ARRAY]: 1,
    [JsConnectionPointType.FLOAT]: 1,
    [JsConnectionPointType.FLOAT_ARRAY]: 1,
    [JsConnectionPointType.INT]: 1,
    [JsConnectionPointType.INT_ARRAY]: 1,
    [JsConnectionPointType.INTERSECTION]: 1,
    [JsConnectionPointType.INTERSECTION_ARRAY]: 1,
    [JsConnectionPointType.MATERIAL]: 1,
    [JsConnectionPointType.MATRIX4]: 1,
    [JsConnectionPointType.MATRIX4_ARRAY]: 1,
    [JsConnectionPointType.NODE]: 1,
    [JsConnectionPointType.OBJECT_3D]: 1,
    [JsConnectionPointType.OBJECT_3D_ARRAY]: 1,
    [JsConnectionPointType.PARAM]: 1,
    [JsConnectionPointType.PLANE]: 1,
    [JsConnectionPointType.QUATERNION]: 1,
    [JsConnectionPointType.QUATERNION_ARRAY]: 1,
    [JsConnectionPointType.RAY]: 1,
    [JsConnectionPointType.SPHERE]: 1,
    [JsConnectionPointType.STRING]: 1,
    [JsConnectionPointType.STRING_ARRAY]: 1,
    [JsConnectionPointType.TEXTURE]: 1,
    [JsConnectionPointType.TEXTURE_ARRAY]: 1,
    [JsConnectionPointType.TRIGGER]: 1,
    [JsConnectionPointType.VECTOR2]: 2,
    [JsConnectionPointType.VECTOR2_ARRAY]: 1,
    [JsConnectionPointType.VECTOR3]: 3,
    [JsConnectionPointType.VECTOR3_ARRAY]: 1,
    [JsConnectionPointType.VECTOR4]: 4,
    [JsConnectionPointType.VECTOR4_ARRAY]: 1,
};
const JS_CONNECTION_POINT_IN_NODE_DEF = {
    inNodeDefinition: true,
};
class JsConnectionPoint extends _Base__WEBPACK_IMPORTED_MODULE_1__/* .BaseConnectionPoint */ .K {
    constructor(_name, _type, _options) {
        super(_name, _type);
        this._type = _type;
        this._options = _options;
        // if (this._init_value === undefined) {
        this._isArray = ARRAY_JS_CONNECTION_TYPES_SET.has(_type);
        this._init_value = JsConnectionPointInitValueMap[this._type];
        // }
        if (_options) {
            this._inNodeDefinition = _options.inNodeDefinition == true;
            if (_options.init_value != null) {
                this._init_value = _options.init_value;
            }
        }
    }
    type() {
        return this._type;
    }
    are_types_matched(src_type, dest_type) {
        return src_type == dest_type;
    }
    get param_type() {
        return JsConnectionPointTypeToParamTypeMap[this._type];
    }
    get init_value() {
        return this._init_value;
    }
    toJSON() {
        return (this._json = this._json || this._createJSON());
    }
    _createJSON() {
        return {
            name: this._name,
            type: this._type,
            isArray: this._isArray,
        };
    }
}


/***/ }),

/***/ 90946:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "K": () => (/* binding */ BaseConnectionPoint)
/* harmony export */ });
// import {
// 	ConnectionPointType,
// 	ConnectionPointInitValueMapGeneric,
// 	ConnectionPointInitValueMap,
// 	ConnectionPointTypeToParamTypeMap,
// 	IConnectionPointTypeToParamTypeMap,
// } from '../ConnectionPointType';
// import {ParamInitValuesTypeMap} from '../params/ParamsController';
class BaseConnectionPoint {
    constructor(_name, _type, _init_value) {
        this._name = _name;
        this._type = _type;
        this._init_value = _init_value;
        // protected _init_value: any;
        this._inNodeDefinition = false;
        // if (this._init_value === undefined) {
        // this._init_value = ConnectionPointInitValueMap[this._type];
        // }
    }
    get init_value() {
        return this._init_value;
    }
    name() {
        return this._name;
    }
    type() {
        return this._type;
    }
    are_types_matched(src_type, dest_type) {
        return true;
    }
    inNodeDefinition() {
        return this._inNodeDefinition;
    }
    // get param_type(): IConnectionPointTypeToParamTypeMap[T] {
    // 	return ConnectionPointTypeToParamTypeMap[this._type];
    // }
    // get init_value() {
    // 	return this._init_value;
    // }
    toJSON() {
        return (this._json = this._json || this._createJSON());
    }
    _createJSON() {
        return {
            name: this._name,
            type: this._type,
            // isArray: false,
        };
    }
}
// export type BaseNamedConnectionPointType = TypedNamedConnectionPoint<ConnectionPointType>;


/***/ }),

/***/ 13133:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": () => (/* binding */ OPERATIONS_COMPOSER_NODE_TYPE),
/* harmony export */   "b": () => (/* binding */ BaseOperation)
/* harmony export */ });
/* harmony import */ var _core_Type__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48454);
/* harmony import */ var _core_Walker__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(38300);


const OPERATIONS_COMPOSER_NODE_TYPE = 'operationsComposer';
class BaseOperation {
    static type() {
        throw 'type to be overriden';
    }
    type() {
        const c = this.constructor;
        return c.type();
    }
    static context() {
        console.error('operation has no node_context', this);
        throw 'context requires override';
    }
    context() {
        const c = this.constructor;
        return c.context();
    }
    constructor(_scene, states, _node) {
        this._scene = _scene;
        this.states = states;
        this._node = _node;
    }
    scene() {
        return this._scene;
    }
    cook(input_contents, params) { }
    convertExportParamData(options) {
        const { params, paramName, paramData } = options;
        const default_param = params[paramName];
        if (_core_Type__WEBPACK_IMPORTED_MODULE_0__/* .CoreType.isBoolean */ .MR.isBoolean(paramData)) {
            return paramData;
        }
        if (_core_Type__WEBPACK_IMPORTED_MODULE_0__/* .CoreType.isNumber */ .MR.isNumber(paramData)) {
            if (_core_Type__WEBPACK_IMPORTED_MODULE_0__/* .CoreType.isBoolean */ .MR.isBoolean(default_param)) {
                // if we receive 0, it may be for a boolean param,
                // so if the default is a boolean, we convert
                return paramData >= 1 ? true : false;
            }
            else {
                return paramData;
            }
        }
        if (_core_Type__WEBPACK_IMPORTED_MODULE_0__/* .CoreType.isString */ .MR.isString(paramData)) {
            if (default_param) {
                if (default_param instanceof _core_Walker__WEBPACK_IMPORTED_MODULE_1__/* .TypedNodePathParamValue */ .jI) {
                    return default_param.setPath(paramData);
                }
                if (default_param instanceof _core_Walker__WEBPACK_IMPORTED_MODULE_1__/* .TypedParamPathParamValue */ .ZD) {
                    return default_param.setPath(paramData);
                }
            }
            return paramData;
        }
        if (_core_Type__WEBPACK_IMPORTED_MODULE_0__/* .CoreType.isArray */ .MR.isArray(paramData)) {
            params[paramName].fromArray(paramData);
        }
    }
}
BaseOperation.DEFAULT_PARAMS = {};
BaseOperation.INPUT_CLONED_STATE = [];


/***/ }),

/***/ 51044:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "y": () => (/* binding */ MergeSopOperation)
/* harmony export */ });
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(57861);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99477);
/* harmony import */ var _core_MapUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(84354);
/* harmony import */ var _engine_poly_InputCloneMode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(26324);
/* harmony import */ var _core_BooleanValue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48454);
/* harmony import */ var _core_geometry_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(44604);
/* harmony import */ var _core_SetUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(41899);







class MergeSopOperation extends _Base__WEBPACK_IMPORTED_MODULE_0__/* .BaseSopOperation */ .U {
    static type() {
        return 'merge';
    }
    // TODO: improvement:
    // for compact, I should really keep track of geometry ids,
    // to make sure I am not including a geometry twice, if there is a hierarchy
    cook(inputCoreGroups, params) {
        var _a;
        let allObjects = [];
        for (const inputCoreGroup of inputCoreGroups) {
            if (inputCoreGroup) {
                const objects = inputCoreGroup.allObjects();
                if ((0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_1__/* .isBooleanTrue */ .bI)(params.compact)) {
                    for (const object of objects) {
                        object.traverse((child) => {
                            allObjects.push(child);
                        });
                    }
                }
                else {
                    // if we are not compact,
                    // we only use the current level, not children
                    for (const object of objects) {
                        allObjects.push(object);
                    }
                }
            }
        }
        if ((0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_1__/* .isBooleanTrue */ .bI)(params.compact)) {
            allObjects = MergeSopOperation.makeCompact(allObjects, params, (_a = this.states) === null || _a === void 0 ? void 0 : _a.error);
        }
        return this.createCoreGroupFromObjects(allObjects);
    }
    static makeCompact(allObjects, options, errorState) {
        const { preserveMaterials } = options;
        const materialsByObjectType = new Map();
        const objectsByType = new Map();
        const orderedObjectTypes = [];
        for (let object of allObjects) {
            object.traverse((object3d) => {
                if (object3d instanceof three__WEBPACK_IMPORTED_MODULE_2__.Group) {
                    // we do not want groups,
                    // as their children will end up being duplicated
                    return;
                }
                const objectType = object.type; //objectTypeFromConstructor(object.constructor);
                if (objectType) {
                    if (!orderedObjectTypes.includes(objectType)) {
                        orderedObjectTypes.push(objectType);
                    }
                    if (objectType) {
                        const foundMat = materialsByObjectType.get(objectType);
                        if (!foundMat) {
                            materialsByObjectType.set(objectType, object.material);
                        }
                        _core_MapUtils__WEBPACK_IMPORTED_MODULE_3__/* .MapUtils.pushOnArrayAtEntry */ .pl.pushOnArrayAtEntry(objectsByType, objectType, object);
                    }
                }
            });
        }
        const mergedObjects = [];
        orderedObjectTypes.forEach((objectType) => {
            const material = materialsByObjectType.get(objectType);
            const objects = objectsByType.get(objectType);
            if (objects && objects.length != 0) {
                // even with just 1 geometry,
                // we should still perform the merge,
                // to make sure the output is consistent.
                // The main discrepency notices is that if not merged,
                // any non-identity matrix will be preserved, when it should not
                // if (objects.length == 1) {
                // 	mergedObjects.push(objects[0]);
                // } else {
                if ((0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_1__/* .isBooleanTrue */ .bI)(preserveMaterials)) {
                    _makeCompactWithPreservedMaterials({
                        objects,
                        material,
                        objectType,
                        mergedObjects,
                        onError: (message) => {
                            errorState === null || errorState === void 0 ? void 0 : errorState.set(message);
                        },
                    });
                }
                else {
                    const coreObjectClass = (0,_core_geometry_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_4__/* .coreObjectClassFactory */ .Xr)(objects[0]);
                    coreObjectClass.mergeCompact({
                        objects,
                        material,
                        objectType,
                        mergedObjects,
                        onError: (message) => {
                            errorState === null || errorState === void 0 ? void 0 : errorState.set(message);
                        },
                    });
                }
            }
        });
        return mergedObjects;
    }
}
MergeSopOperation.DEFAULT_PARAMS = {
    compact: false,
    preserveMaterials: true,
};
MergeSopOperation.INPUT_CLONED_STATE = _engine_poly_InputCloneMode__WEBPACK_IMPORTED_MODULE_5__/* .InputCloneMode.FROM_NODE */ .m.FROM_NODE;
const objectsByMaterial = new Map();
function _makeCompactWithPreservedMaterials(options) {
    const { objects, objectType, mergedObjects, onError } = options;
    const coreObjectClass = (0,_core_geometry_CoreObjectFactory__WEBPACK_IMPORTED_MODULE_4__/* .coreObjectClassFactory */ .Xr)(objects[0]);
    objectsByMaterial.clear();
    for (let object of objects) {
        _core_MapUtils__WEBPACK_IMPORTED_MODULE_3__/* .MapUtils.addToSetAtEntry */ .pl.addToSetAtEntry(objectsByMaterial, object.material, object);
    }
    objectsByMaterial.forEach((objectSet, material) => {
        coreObjectClass.mergeCompact({
            objects: (0,_core_SetUtils__WEBPACK_IMPORTED_MODULE_6__/* .setToArray */ .T_)(objectSet, []),
            material,
            objectType,
            mergedObjects,
            onError,
        });
    });
}


/***/ }),

/***/ 57861:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "U": () => (/* binding */ BaseSopOperation)
/* harmony export */ });
/* harmony import */ var _core_geometry_Group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(76985);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13133);
/* harmony import */ var _engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(62063);
/* harmony import */ var _core_geometry_Constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73303);
/* harmony import */ var _core_geometry_util_IndexBuilder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(69285);





class BaseSopOperation extends _Base__WEBPACK_IMPORTED_MODULE_0__/* .BaseOperation */ .b {
    static context() {
        return _engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.SOP */ .sy.SOP;
    }
    cook(inputCoreGroups, params) { }
    //
    //
    // UTILS
    //
    //
    createCoreGroupFromObjects(objects) {
        const coreGroup = new _core_geometry_Group__WEBPACK_IMPORTED_MODULE_2__/* .CoreGroup */ .Q();
        coreGroup.setAllObjects(objects);
        return coreGroup;
    }
    createCoreGroupFromGeometry(geometry, type = _core_geometry_Constant__WEBPACK_IMPORTED_MODULE_3__/* .ObjectType.MESH */ .LP.MESH) {
        const object = BaseSopOperation.createObject(geometry, type);
        return this.createCoreGroupFromObjects(object ? [object] : []);
    }
    createObject(geometry, type, material) {
        return BaseSopOperation.createObject(geometry, type, material);
    }
    static createObject(geometry, type, material) {
        // ensure it has an index
        this.createIndexIfNone(geometry);
        const objectConstructor = (0,_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_3__/* .objectConstructorByObjectType */ .uy)(type) || (0,_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_3__/* .objectConstructorByObjectType */ .uy)(_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_3__/* .ObjectType.MESH */ .LP.MESH);
        material = material || _core_geometry_Constant__WEBPACK_IMPORTED_MODULE_3__/* .DEFAULT_MATERIALS */ .ee[type];
        const object = new objectConstructor(geometry, material);
        this.applyObjectDefault(object);
        return object;
    }
    static applyObjectDefault(object) {
        object.castShadow = true;
        object.receiveShadow = true;
        object.frustumCulled = false;
        object.matrixAutoUpdate = false;
    }
    createIndexIfNone(geometry) {
        BaseSopOperation.createIndexIfNone(geometry);
    }
    static createIndexIfNone(geometry) {
        _core_geometry_util_IndexBuilder__WEBPACK_IMPORTED_MODULE_4__/* .CoreGeometryIndexBuilder.createIndexIfNone */ .f.createIndexIfNone(geometry);
    }
}


/***/ }),

/***/ 53120:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "f": () => (/* binding */ TypeAssert)
/* harmony export */ });
class TypeAssert {
    static unreachable(_) {
        throw new Error("Didn't expect to get here");
    }
}


/***/ }),

/***/ 26324:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": () => (/* binding */ InputCloneMode)
/* harmony export */ });
var InputCloneMode;
(function (InputCloneMode) {
    InputCloneMode["ALWAYS"] = "always";
    InputCloneMode["NEVER"] = "never";
    InputCloneMode["FROM_NODE"] = "from_node";
})(InputCloneMode || (InputCloneMode = {}));


/***/ }),

/***/ 62063:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$4": () => (/* binding */ CameraSopNodeType),
/* harmony export */   "E": () => (/* binding */ AUDIO_ANALYSER_NODES),
/* harmony export */   "G$": () => (/* binding */ NetworkChildNodeType),
/* harmony export */   "MN": () => (/* binding */ CameraControlsNodeType),
/* harmony export */   "YX": () => (/* binding */ AudioNodeAnalyserType),
/* harmony export */   "hY": () => (/* binding */ CameraNodeType),
/* harmony export */   "kX": () => (/* binding */ NetworkNodeType),
/* harmony export */   "o2": () => (/* binding */ CAMERA_TYPES),
/* harmony export */   "sy": () => (/* binding */ NodeContext)
/* harmony export */ });
// import { JsNodeChildrenMap } from './registers/nodes/Js';
var NodeContext;
(function (NodeContext) {
    NodeContext["ANIM"] = "anim";
    NodeContext["AUDIO"] = "audio";
    // CAD = 'cad',
    NodeContext["COP"] = "cop";
    // CSG = 'csg',
    NodeContext["EVENT"] = "event";
    NodeContext["GL"] = "gl";
    NodeContext["JS"] = "js";
    NodeContext["MANAGER"] = "manager";
    NodeContext["MAT"] = "mat";
    NodeContext["OBJ"] = "obj";
    NodeContext["POST"] = "post";
    NodeContext["ROP"] = "rop";
    NodeContext["SOP"] = "sop";
})(NodeContext || (NodeContext = {}));
var NetworkNodeType;
(function (NetworkNodeType) {
    NetworkNodeType["ACTOR"] = "actorsNetwork";
    NetworkNodeType["ANIM"] = "animationsNetwork";
    NetworkNodeType["AUDIO"] = "audioNetwork";
    // CAD = 'cadNetwork',
    NetworkNodeType["COP"] = "copNetwork";
    NetworkNodeType["CSG"] = "csgNetwork";
    NetworkNodeType["EVENT"] = "eventsNetwork";
    NetworkNodeType["MAT"] = "materialsNetwork";
    NetworkNodeType["POST"] = "postProcessNetwork";
    NetworkNodeType["ROP"] = "renderersNetwork";
    NetworkNodeType["SOLVER"] = "solver";
    NetworkNodeType["SUBNET"] = "subnet";
    NetworkNodeType["DECOMPOSE"] = "decompose";
})(NetworkNodeType || (NetworkNodeType = {}));
var NetworkChildNodeType;
(function (NetworkChildNodeType) {
    NetworkChildNodeType["INPUT"] = "subnetInput";
    NetworkChildNodeType["OUTPUT"] = "subnetOutput";
})(NetworkChildNodeType || (NetworkChildNodeType = {}));
var CameraNodeType;
(function (CameraNodeType) {
    CameraNodeType["CUBE"] = "cubeCamera";
    CameraNodeType["MAPBOX"] = "mapboxCamera";
    CameraNodeType["ORTHOGRAPHIC"] = "orthographicCamera";
    CameraNodeType["PERSPECTIVE"] = "perspectiveCamera";
})(CameraNodeType || (CameraNodeType = {}));
var CameraSopNodeType;
(function (CameraSopNodeType) {
    CameraSopNodeType["CONTROLS"] = "cameraControls";
    CameraSopNodeType["CSS_RENDERER"] = "cameraCSSRenderer";
    CameraSopNodeType["FPS"] = "cameraFPS";
    CameraSopNodeType["FRAME_MODE"] = "cameraFrameMode";
    CameraSopNodeType["POST_PROCESS"] = "cameraPostProcess";
    CameraSopNodeType["RENDER_SCENE"] = "cameraRenderScene";
    CameraSopNodeType["RENDERER"] = "cameraRenderer";
    CameraSopNodeType["VIEWER_CODE"] = "cameraViewerCode";
    CameraSopNodeType["VIEW_OFFSET"] = "cameraViewOffset";
    CameraSopNodeType["WEBXR_AR"] = "cameraWebXRAR";
    CameraSopNodeType["WEBXR_VR"] = "cameraWebXRVR";
    CameraSopNodeType["WEBXR_AR_MARKER_TRACKING"] = "cameraWebXRARMarkerTracking";
})(CameraSopNodeType || (CameraSopNodeType = {}));
const CAMERA_TYPES = [CameraNodeType.MAPBOX, CameraNodeType.ORTHOGRAPHIC, CameraNodeType.PERSPECTIVE];
var CameraControlsNodeType;
(function (CameraControlsNodeType) {
    // DEVICE_ORIENTATION = 'cameraDeviceOrientationControls',
    CameraControlsNodeType["MAP"] = "cameraMapControls";
    CameraControlsNodeType["ORBIT"] = "cameraOrbitControls";
    CameraControlsNodeType["PAN_ZOOM"] = "cameraPanZoomControls";
    CameraControlsNodeType["FIRST_PERSON"] = "firstPersonControls";
    CameraControlsNodeType["PLAYER"] = "playerControls";
    CameraControlsNodeType["MOBILE_JOYSTICK"] = "mobileJoystickControls";
})(CameraControlsNodeType || (CameraControlsNodeType = {}));
// export const CAMERA_CONTROLS_NODE_TYPES: Readonly<string[]> = [
// 	// CameraControlsNodeType.DEVICE_ORIENTATION,
// 	CameraControlsNodeType.MAP,
// 	CameraControlsNodeType.ORBIT,
// 	CameraControlsNodeType.FIRST_PERSON,
// 	CameraControlsNodeType.MOBILE_JOYSTICK,
// ];
var AudioNodeAnalyserType;
(function (AudioNodeAnalyserType) {
    AudioNodeAnalyserType["FFT"] = "FFT";
    AudioNodeAnalyserType["METER"] = "meter";
    AudioNodeAnalyserType["WAVEFORM"] = "waveform";
})(AudioNodeAnalyserType || (AudioNodeAnalyserType = {}));
const AUDIO_ANALYSER_NODES = [
    AudioNodeAnalyserType.FFT,
    AudioNodeAnalyserType.METER,
    AudioNodeAnalyserType.WAVEFORM,
];


/***/ }),

/***/ 7131:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_": () => (/* binding */ ParamType)
/* harmony export */ });
var ParamType;
(function (ParamType) {
    ParamType["BOOLEAN"] = "boolean";
    ParamType["BUTTON"] = "button";
    ParamType["COLOR"] = "color";
    ParamType["FLOAT"] = "float";
    ParamType["FOLDER"] = "folder";
    ParamType["INTEGER"] = "integer";
    ParamType["PARAM_PATH"] = "param_path";
    ParamType["NODE_PATH"] = "node_path";
    ParamType["RAMP"] = "ramp";
    ParamType["STRING"] = "string";
    ParamType["VECTOR2"] = "vector2";
    ParamType["VECTOR3"] = "vector3";
    ParamType["VECTOR4"] = "vector4";
})(ParamType || (ParamType = {}));
// export type ParamTypeKey = ParamType
// export type ParamTypeKeysArray = Array<ParamTypeKey>
// const ParamTypeKeysArray: ParamTypeKeysArray = [ParamType.BOOLEAN]


/***/ }),

/***/ 62618:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P4": () => (/* binding */ PolyOnObjectsAddRemoveHooksController),
/* harmony export */   "Vr": () => (/* binding */ addToParent),
/* harmony export */   "rS": () => (/* binding */ replaceChild),
/* harmony export */   "x": () => (/* binding */ removeFromParent)
/* harmony export */ });
/* unused harmony export copyBasicObjectProperties */
/* harmony import */ var _Poly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(72931);
/* harmony import */ var _core_reactivity_ObjectHierarchyReactivity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(31654);
/* harmony import */ var _core_geometry_Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(48931);
/* harmony import */ var _nodes_js_code_assemblers_actor_ActorEvaluatorGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(22317);




var HandlerName;
(function (HandlerName) {
    HandlerName["ADD"] = "onObjectAddHookHandlerNodeIds";
    HandlerName["REMOVE"] = "onObjectRemoveHookHandlerNodeIds";
})(HandlerName || (HandlerName = {}));
function assignHookHandler(object, node, handlerName) {
    let ids = hookHandlers(object, handlerName);
    if (!ids) {
        ids = [];
        object.userData[handlerName] = ids;
    }
    const id = node.graphNodeId();
    if (!ids.includes(id)) {
        ids.push(id);
    }
}
// function removeHookHandler(object: ObjectContent<CoreObjectType>, node: HookHandler, handlerName: HandlerName) {
// 	let ids = hookHandlers(object, handlerName);
// 	if (ids) {
// 		const index = ids.indexOf(node.graphNodeId());
// 		ids.splice(index, 1);
// 	}
// }
// function assignCompletedHookHandler(
// 	object: ObjectContent<CoreObjectType>,
// 	node: HookHandler,
// 	handlerName: HandlerName
// ) {
// 	const completedHandlerName = _completedHandlerName(handlerName);
// 	let ids = completedHookHandlers(object, completedHandlerName);
// 	if (!ids) {
// 		ids = [];
// 		object.userData[completedHandlerName] = ids;
// 	}
// 	const id = node.graphNodeId();
// 	if (!ids.includes(id)) {
// 		ids.push(id);
// 	}
// }
function hookHandlers(object, handlerName) {
    return object.userData[handlerName];
}
// function completedHookHandlers(object: ObjectContent<CoreObjectType>, handlerName: CompletedHandlerName) {
// 	return object.userData[handlerName] as number[] | undefined;
// }
function runHooks(scene, parent, handlerName) {
    const children = parent.children;
    for (let child of children) {
        child.traverse((grandChild) => {
            runHookOnObject(grandChild, scene, handlerName);
        });
    }
}
function runHookOnObject(object, scene, handlerName) {
    if (object.parent) {
        const ids = hookHandlers(object, handlerName);
        if (!ids) {
            return;
        }
        // const completedHandlersIds = completedHookHandlers(object, _completedHandlerName(handlerName));
        // if (completedHandlersIds) {
        // 	for (const id of completedHandlersIds) {
        // 		const index = ids.indexOf(id);
        // 		if (index >= 0) {
        // 			ids.splice(index, 1);
        // 		}
        // 	}
        // }
        for (const id of ids) {
            const node = scene.graph.nodeFromId(id);
            if (node && !node.disposed()) {
                // when traversing the scene to run the hooks
                // we must be very careful to note update the hierarchy
                // with .add and .remove, as this will make .traverse unpredictable.
                // Instead, children must be replaced directly with:
                //
                // const index = parent.children.indexOf(oldObject);
                // parent.children[index] = newObject;
                // newObject.parent = parent;
                // we need to remove the handler before processing the object,
                // to avoid cases where it might be processed multiple times.
                // This can happen on scene load, and also when multiple objects are added via the same node,
                // and only one is new. This will still trigger the hook on the already-added objects
                // UPDATE: this impacts the particles, which are not generated correctly
                // removeHookHandler(object, node, handlerName);
                switch (handlerName) {
                    case HandlerName.ADD: {
                        node.updateObjectOnAdd(object, object.parent);
                        break;
                    }
                    case HandlerName.REMOVE: {
                        node.updateObjectOnRemove(object, object.parent);
                        break;
                    }
                }
                // assignCompletedHookHandler(object, node, handlerName);
            }
        }
    }
}
function replaceChild(parent, oldObject, newObject) {
    // new object replaces old Object directly,
    // and not using .remove and .add,
    // as this would make traversing the scenes from the hooks handler
    // unpredictable.
    const index = parent.children.indexOf(oldObject);
    if (index < 0) {
        console.warn('could not find object to replace');
        return;
    }
    parent.children[index] = newObject;
    newObject.parent = parent;
    // parent.remove(object);
    // parent.add(CSSObject);
}
function removeFromParent(scene, object) {
    const parent = object.parent;
    if (!parent) {
        return;
    }
    object.dispatchEvent(_core_geometry_Event__WEBPACK_IMPORTED_MODULE_0__/* .ON_OBJECT_BEFORE_DELETE */ .t);
    (0,_nodes_js_code_assemblers_actor_ActorEvaluatorGenerator__WEBPACK_IMPORTED_MODULE_1__/* .deregisterGeneratorsForObject */ .R_)(object);
    _Poly__WEBPACK_IMPORTED_MODULE_2__/* .Poly.onObjectsAddRemoveHooks.runOnRemoveHookOnObject */ .L.onObjectsAddRemoveHooks.runOnRemoveHookOnObject(scene, object);
    parent.remove(object);
    (0,_core_reactivity_ObjectHierarchyReactivity__WEBPACK_IMPORTED_MODULE_3__/* .updateObjectChildrenCountRef */ .g)(parent);
}
function addToParent(scene, parent, child) {
    parent.add(child);
    (0,_core_reactivity_ObjectHierarchyReactivity__WEBPACK_IMPORTED_MODULE_3__/* .updateObjectChildrenCountRef */ .g)(parent);
    _Poly__WEBPACK_IMPORTED_MODULE_2__/* .Poly.onObjectsAddRemoveHooks.runOnAddHookOnObject */ .L.onObjectsAddRemoveHooks.runOnAddHookOnObject(scene, child);
}
// export function replaceChildWithCallbackObject(
// 	parent: Object3D,
// 	oldObject: Object3D,
// 	newObjectCallback: () => Object3D
// ) {
// 	const index = parent.children.indexOf(oldObject);
// 	const newObject = newObjectCallback();
// 	parent.children[index] = newObject;
// 	newObject.parent = parent;
// }
function copyBasicObjectProperties(srcObject, destObject) {
    destObject.name = srcObject.name;
    destObject.matrixAutoUpdate = srcObject.matrixAutoUpdate;
    destObject.frustumCulled = srcObject.frustumCulled;
    destObject.layers = srcObject.layers;
    destObject.position.copy(srcObject.position);
    destObject.quaternion.copy(srcObject.quaternion);
    destObject.scale.copy(srcObject.scale);
    destObject.matrix.copy(srcObject.matrix);
}
class PolyOnObjectsAddRemoveHooksController {
    assignOnAddHookHandler(object, node) {
        assignHookHandler(object, node, HandlerName.ADD);
    }
    assignOnRemoveHookHandler(object, node) {
        assignHookHandler(object, node, HandlerName.REMOVE);
    }
    runOnAddHooks(scene, parent) {
        runHooks(scene, parent, HandlerName.ADD);
    }
    runOnRemoveHooks(scene, parent) {
        runHooks(scene, parent, HandlerName.REMOVE);
    }
    runOnAddHookOnObject(scene, object) {
        runHookOnObject(object, scene, HandlerName.ADD);
    }
    runOnRemoveHookOnObject(scene, object) {
        runHookOnObject(object, scene, HandlerName.REMOVE);
    }
}


/***/ }),

/***/ 74298:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": () => (/* binding */ AssemblerName),
/* harmony export */   "s": () => (/* binding */ BaseAssemblersRegister)
/* harmony export */ });
// import {BaseNodeType} from '../../../nodes/_Base';
var AssemblerName;
(function (AssemblerName) {
    AssemblerName["GL_CLOTH"] = "GL_CLOTH";
    AssemblerName["GL_LINE"] = "GL_LINE";
    AssemblerName["GL_MESH_BASIC"] = "GL_MESH_BASIC";
    AssemblerName["GL_MESH_DEPTH"] = "GL_MESH_DEPTH";
    AssemblerName["GL_MESH_DISTANCE"] = "GL_MESH_DISTANCE";
    AssemblerName["GL_MESH_LAMBERT"] = "GL_MESH_LAMBERT";
    AssemblerName["GL_MESH_PHONG"] = "GL_MESH_PHONG";
    AssemblerName["GL_MESH_PHYSICAL"] = "GL_MESH_PHYSICAL";
    AssemblerName["GL_MESH_STANDARD"] = "GL_MESH_STANDARD";
    AssemblerName["GL_MESH_TOON"] = "GL_MESH_TOON";
    AssemblerName["GL_PARTICLES"] = "GL_PARTICLES";
    AssemblerName["GL_POINTS"] = "GL_POINTS";
    AssemblerName["GL_POST"] = "GL_POST";
    AssemblerName["GL_RAYMARCHING"] = "GL_RAYMARCHING";
    AssemblerName["GL_TEXTURE"] = "GL_TEXTURE";
    AssemblerName["GL_TEXTURE_2D_ARRAY"] = "GL_TEXTURE_2D_ARRAY";
    AssemblerName["GL_VOLUME"] = "GL_VOLUME";
    //
    AssemblerName["JS_ACTOR"] = "JS_ACTOR";
    AssemblerName["JS_ENTITY_BUILDER"] = "JS_ENTITY_BUILDER";
    AssemblerName["JS_INSTANCE_BUILDER"] = "JS_INSTANCE_BUILDER";
    AssemblerName["JS_OBJECT_BUILDER"] = "JS_OBJECT_BUILDER";
    AssemblerName["JS_POINT_BUILDER"] = "JS_POINT_BUILDER";
    AssemblerName["JS_SDF"] = "JS_SDF";
    AssemblerName["JS_SOFT_BODY"] = "JS_SOFT_BODY";
})(AssemblerName || (AssemblerName = {}));
class BaseAssemblersRegister {
    constructor() {
        this._controllerAssemblerByName = new Map();
    }
    register(name, controller, assembler) {
        this._controllerAssemblerByName.set(name, {
            controller: controller,
            assembler: assembler,
        });
    }
    unregister(name) {
        this._controllerAssemblerByName.delete(name);
    }
    traverse(callback) {
        this._controllerAssemblerByName.forEach(callback);
    }
}


/***/ }),

/***/ 83220:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "r": () => (/* binding */ ModuleName)
/* harmony export */ });
var ModuleName;
(function (ModuleName) {
    ModuleName["CAD"] = "CAD";
    ModuleName["CSG"] = "CSG";
    ModuleName["GSAP"] = "GSAP";
    ModuleName["PBR"] = "PBR";
    ModuleName["POLY_ANIM"] = "POLY_ANIM";
    ModuleName["POLY_GL"] = "POLY_GL";
    ModuleName["POLY_JS"] = "POLY_JS";
    ModuleName["POLY_OBJ"] = "POLY_OBJ";
    ModuleName["POLY_SOP"] = "POLY_SOP";
    ModuleName["QUAD"] = "QUAD";
    ModuleName["SDF"] = "SDF";
    ModuleName["TET"] = "TET";
})(ModuleName || (ModuleName = {}));


/***/ }),

/***/ 26817:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ CADModule)
});

// EXTERNAL MODULE: ./node_modules/three/build/three.module.js
var three_module = __webpack_require__(99477);
// EXTERNAL MODULE: ./src/core/Type.ts
var Type = __webpack_require__(48454);
// EXTERNAL MODULE: ./src/core/geometry/CoreObjectFactory.ts
var CoreObjectFactory = __webpack_require__(44604);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadCommon.ts
var CadCommon = __webpack_require__(59309);
// EXTERNAL MODULE: ./src/core/geometry/entities/object/BaseCoreObject.ts + 1 modules
var BaseCoreObject = __webpack_require__(78841);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadObject.ts + 2 modules
var CadObject = __webpack_require__(79550);
// EXTERNAL MODULE: ./src/core/geometry/ObjectContent.ts
var ObjectContent = __webpack_require__(37956);
// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadLoaderSync.ts
var CadLoaderSync = __webpack_require__(16396);
// EXTERNAL MODULE: ./src/core/MapUtils.ts
var MapUtils = __webpack_require__(84354);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/utils/CadMerge.ts




const objectsByType = new Map();
function cadMergeCompact(inputObjects) {
    objectsByType.clear();
    for (const inputObject of inputObjects) {
        MapUtils/* MapUtils.pushOnArrayAtEntry */.pl.pushOnArrayAtEntry(objectsByType, inputObject.type, inputObject);
    }
    const oc = CadLoaderSync/* CadLoaderSync.oc */.T.oc();
    const newObjects = [];
    objectsByType.forEach((objects, type) => {
        switch (type) {
            case CadCommon/* CadGeometryType.EDGE */.dT.EDGE: {
                return cadMergeCompactEdges(oc, objects, newObjects);
            }
            case CadCommon/* CadGeometryType.WIRE */.dT.WIRE: {
                return cadMergeCompactWires(oc, objects, newObjects);
            }
            // case CadObjectType.FACE: {
            // 	// TODO
            // 	return;
            // }
            // case CadObjectType.SHELL: {
            // 	console.log(objects);
            // 	return;
            // }
            default: {
                for (const object of objects) {
                    newObjects.push(object);
                }
            }
        }
    });
    return newObjects;
}
function cadMergeCompactEdges(oc, objects, newObjects) {
    const api = new oc.BRepBuilderAPI_MakeWire_1();
    for (const object of objects) {
        api.Add_1(object.cadGeometry());
    }
    const wire = api.Wire();
    api.delete();
    newObjects.push(new CadObject/* CadObject */.K(wire, CadCommon/* CadGeometryType.WIRE */.dT.WIRE));
    return;
}
function cadMergeCompactWires(oc, objects, newObjects) {
    const api = new oc.BRepBuilderAPI_MakeWire_1();
    for (const object of objects) {
        api.Add_2(object.cadGeometry());
    }
    const wire = api.Wire();
    api.delete();
    newObjects.push(new CadObject/* CadObject */.K(wire, CadCommon/* CadGeometryType.WIRE */.dT.WIRE));
    return;
}

// EXTERNAL MODULE: ./src/core/geometry/entities/object/BaseCoreObjectUtils.ts
var BaseCoreObjectUtils = __webpack_require__(70965);
// EXTERNAL MODULE: ./src/core/geometry/entities/point/CorePoint.ts
var CorePoint = __webpack_require__(87727);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPoint.ts

class CadPoint extends CorePoint/* CorePoint */.A {
    constructor(object, index) {
        super(object, index);
        this._object = object;
        this._updateGeometry();
    }
    object() {
        return this._object;
    }
    setIndex(index, object) {
        this._index = index;
        if (object) {
            this._object = object;
            this._updateGeometry();
        }
        return this;
    }
    _updateGeometry() {
        const geometry = this._object.geometry;
        if (geometry) {
            this._geometry = geometry;
        }
    }
    geometry() {
        return this._geometry;
    }
    static addAttribute(object, attribName, attribute) { }
    static attributes(object) {
        return undefined;
    }
    static entitiesCount(object) {
        return 0;
    }
    position(target) {
        return target;
    }
    normal(target) {
        return target;
    }
    //
    //
    //
    //
    //
    static userDataAttribs(object) {
        return {};
    }
    static setIndexedAttribute(object, attribName, values, indices) { }
    static attribValueIndex(object, index, attribName) {
        return -1;
    }
}

// EXTERNAL MODULE: ./src/core/geometry/entities/vertex/CoreVertex.ts
var CoreVertex = __webpack_require__(38080);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadVertex.ts

class CadVertex extends CoreVertex/* CoreVertex */.k {
    constructor(object, index) {
        super(object, index);
    }
    geometry() {
        return undefined;
    }
    static attributes(object) {
        return;
    }
    static entitiesCount(object) {
        return 0;
    }
    position(target) {
        console.warn('CadVertex.position not implemented');
        return target;
    }
    normal(target) {
        console.warn('CadVertex.normal not implemented');
        return target;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadCoreObject.ts









const _bbox = new three_module.Box3();
const _bboxSize = new three_module.Vector3();
class CadCoreObject extends BaseCoreObject/* BaseCoreObject */.q {
    constructor(_object, index) {
        super(_object, index);
        this._object = _object;
        // if ((_object as TopoDS_Shape).ShapeType) {
        // 	const type = cadObjectTypeFromShape(oc, _object as any);
        // 	if (type != null && type != _type) {
        // 		console.error('got type', type, 'instead of expected', _type);
        // 	}
        // }
    }
    type() {
        return this._object.type;
    }
    static fromGeometry(geometry, type) {
        const cadObject = new CadObject/* CadObject */.K(geometry, type);
        return new CadCoreObject(cadObject, 0);
    }
    object() {
        return this._object;
    }
    static position(object, target) {
        object.boundingBox(_bbox);
        _bbox.getCenter(target);
    }
    boundingBox(target) {
        this._object.boundingBox(target);
    }
    boundingSphere(target) {
        this.boundingBox(_bbox);
        _bbox.getSize(_bboxSize);
        _bbox.getCenter(target.center);
        const diameter = Math.max(_bboxSize.x, _bboxSize.y, _bboxSize.z);
        target.radius = diameter * 0.5;
    }
    static objectData(object) {
        const data = (0,BaseCoreObjectUtils/* objectData */.Sq)(object);
        data.pointsCount = CadPoint.entitiesCount(object);
        data.verticesCount = CadVertex.entitiesCount(object);
        const primitiveClass = primitiveClassFactoryNonAbstract(object);
        data.primitivesCount = (primitiveClass === null || primitiveClass === void 0 ? void 0 : primitiveClass.entitiesCount(object)) || 0;
        data.primitiveName = (primitiveClass === null || primitiveClass === void 0 ? void 0 : primitiveClass.primitiveName()) || '';
        return data;
    }
    static applyMatrix(object, matrix, transformTargetType, transformSpace, transformMode) {
        object.applyMatrix4(matrix);
    }
    static mergeCompact(options) {
        const { objects, material, mergedObjects, onError } = options;
        try {
            const firstObject = objects[0];
            if (!firstObject) {
                return;
            }
            const newObjects = cadMergeCompact(objects);
            for (const newObject of newObjects) {
                (0,ObjectContent/* objectContentCopyProperties */.Br)(firstObject, newObject);
                if (material) {
                    newObject.material = material;
                }
            }
            mergedObjects.push(...newObjects);
        }
        catch (e) {
            onError(e.message || 'unknown error');
        }
    }
}

// EXTERNAL MODULE: ./src/engine/poly/Assert.ts
var Assert = __webpack_require__(53120);
// EXTERNAL MODULE: ./src/core/geometry/entities/primitive/CorePrimitive.ts
var CorePrimitive = __webpack_require__(19760);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitive.ts

class CadPrimitive extends CorePrimitive/* CorePrimitive */.n {
    constructor(object, index) {
        super(object, index);
    }
    static entitiesCount(object) {
        return 0;
    }
    geometry() {
        return this._object.geometry;
    }
    position(target) {
        console.warn('CadPrimitive.position not implemented');
        return target;
    }
    normal(target) {
        console.warn('CadPrimitive.normal not implemented');
        return target;
    }
}

// EXTERNAL MODULE: ./src/core/geometry/modules/cad/toObject3D/CadCompound.ts
var CadCompound = __webpack_require__(47114);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitiveCompound.ts


class CadPrimitiveCompound extends CadPrimitive {
    static primitiveName() {
        return 'compound';
    }
    static entitiesCount(object) {
        const cadOobject = object;
        return (0,CadCompound/* cadCompoundSubObjectsCount */.G)(cadOobject);
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitiveCompSolid.ts

class CadPrimitiveCompSolid extends CadPrimitive {
    static primitiveName() {
        return 'compSolid';
    }
    static entitiesCount(object) {
        return 0;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitiveEdge.ts

class CadPrimitiveEdge extends CadPrimitive {
    static primitiveName() {
        return 'edge';
    }
    static entitiesCount(object) {
        return 0;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitiveWire.ts

class CadPrimitiveWire extends CadPrimitive {
    static primitiveName() {
        return 'wire';
    }
    static entitiesCount(object) {
        return 0;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitiveFace.ts

class CadPrimitiveFace extends CadPrimitive {
    static primitiveName() {
        return 'face';
    }
    static entitiesCount(object) {
        return 0;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitiveShell.ts

class CadPrimitiveShell extends CadPrimitive {
    static primitiveName() {
        return 'shell';
    }
    static entitiesCount(object) {
        return 0;
    }
}

// EXTERNAL MODULE: ./src/core/geometry/modules/cad/CadTraverse.ts
var CadTraverse = __webpack_require__(34802);
;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadPrimitiveSolid.ts



class CadPrimitiveSolid extends CadPrimitive {
    static primitiveName() {
        return 'face';
    }
    static entitiesCount(object) {
        const oc = CadLoaderSync/* CadLoaderSync.oc */.T.oc();
        const cadOobject = object;
        let count = 0;
        const shape = cadOobject.geometry;
        (0,CadTraverse/* traverseFaces */.Ob)(oc, shape, (face) => {
            count++;
        });
        return count;
    }
}

;// CONCATENATED MODULE: ./src/core/geometry/modules/cad/CadModule.ts
// import {ModuleName} from '../../../engine/poly/registers/modules/Common';
// import {BaseModule} from '../../../engine/poly/registers/modules/_BaseModule';















const CAD_TESSELATION_PARAMS = {
    linearTolerance: 0,
    angularTolerance: 0,
    curveAbscissa: 0,
    curveTolerance: 0,
    wireframe: false,
    displayMeshes: false,
    displayEdges: false,
    meshesColor: new three_module.Color(),
    edgesColor: new three_module.Color(),
};
function updateCADTesselationParams(params) {
    CAD_TESSELATION_PARAMS.linearTolerance = params.CADLinearTolerance;
    CAD_TESSELATION_PARAMS.angularTolerance = params.CADAngularTolerance;
    CAD_TESSELATION_PARAMS.curveAbscissa = params.CADCurveAbscissa;
    CAD_TESSELATION_PARAMS.curveTolerance = params.CADCurveTolerance;
    //
    CAD_TESSELATION_PARAMS.wireframe = params.CADWireframe;
    CAD_TESSELATION_PARAMS.displayMeshes = params.CADDisplayMeshes;
    CAD_TESSELATION_PARAMS.displayEdges = params.CADDisplayEdges;
    CAD_TESSELATION_PARAMS.meshesColor.copy(params.CADMeshesColor);
    CAD_TESSELATION_PARAMS.edgesColor.copy(params.CADEdgesColor);
}
const onAddSpecializedChildren = (displayNode, coreGroup, newObjects, params) => {
    let newObjectsAreDifferent = false;
    const newCadObjects = coreGroup.cadObjects();
    if (newCadObjects && newCadObjects.length != 0) {
        updateCADTesselationParams(params);
        for (const cadObject of newCadObjects) {
            const newObject3D = cadObject.toObject3D(CAD_TESSELATION_PARAMS, displayNode);
            if (newObject3D) {
                newObjectsAreDifferent = true;
                if (Type/* CoreType.isArray */.MR.isArray(newObject3D)) {
                    newObjects.push(...newObject3D);
                }
                else {
                    newObjects.push(newObject3D);
                }
            }
        }
    }
    return newObjectsAreDifferent;
};
// primitive methods
const primitiveClassFactoryNonAbstract = (object) => {
    if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
        const type = object.type;
        switch (type) {
            case CadCommon/* CadGeometryType.POINT_2D */.dT.POINT_2D: {
                return;
            }
            case CadCommon/* CadGeometryType.CURVE_2D */.dT.CURVE_2D: {
                return;
            }
            case CadCommon/* CadGeometryType.VERTEX */.dT.VERTEX: {
                return;
            }
            case CadCommon/* CadGeometryType.EDGE */.dT.EDGE: {
                return CadPrimitiveEdge;
            }
            case CadCommon/* CadGeometryType.WIRE */.dT.WIRE: {
                return CadPrimitiveWire;
            }
            case CadCommon/* CadGeometryType.FACE */.dT.FACE: {
                return CadPrimitiveFace;
            }
            case CadCommon/* CadGeometryType.SHELL */.dT.SHELL: {
                return CadPrimitiveShell;
            }
            case CadCommon/* CadGeometryType.SOLID */.dT.SOLID: {
                return CadPrimitiveSolid;
            }
            case CadCommon/* CadGeometryType.COMPSOLID */.dT.COMPSOLID: {
                return CadPrimitiveCompSolid;
            }
            case CadCommon/* CadGeometryType.COMPOUND */.dT.COMPOUND: {
                return CadPrimitiveCompound;
            }
        }
        Assert/* TypeAssert.unreachable */.f.unreachable(type);
    }
};
function onCadModuleRegister(poly) {
    //
    //
    // CORE OBJECT CHECKS
    //
    //
    // point methods
    const pointClassFactory = (object) => {
        if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
            return CadPoint;
        }
    };
    const pointInstanceFactory = (object, index = 0) => {
        if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
            return new CadPoint(object, index);
        }
    };
    // vertex methods
    const vertexClassFactory = (object) => {
        if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
            return CadVertex;
        }
    };
    const vertexInstanceFactory = (object, index = 0) => {
        if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
            return new CadVertex(object, index);
        }
    };
    // primitive methods
    const primitiveClassFactory = primitiveClassFactoryNonAbstract;
    const primitiveInstanceFactory = (object, index = 0) => {
        if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
            const type = object.type;
            switch (type) {
                case CadCommon/* CadGeometryType.POINT_2D */.dT.POINT_2D: {
                    return;
                }
                case CadCommon/* CadGeometryType.CURVE_2D */.dT.CURVE_2D: {
                    return;
                }
                case CadCommon/* CadGeometryType.VERTEX */.dT.VERTEX: {
                    return;
                }
                case CadCommon/* CadGeometryType.EDGE */.dT.EDGE: {
                    return new CadPrimitiveEdge(object, index);
                }
                case CadCommon/* CadGeometryType.WIRE */.dT.WIRE: {
                    return new CadPrimitiveWire(object, index);
                }
                case CadCommon/* CadGeometryType.FACE */.dT.FACE: {
                    return new CadPrimitiveFace(object, index);
                }
                case CadCommon/* CadGeometryType.SHELL */.dT.SHELL: {
                    return new CadPrimitiveShell(object, index);
                }
                case CadCommon/* CadGeometryType.SOLID */.dT.SOLID: {
                    return new CadPrimitiveSolid(object, index);
                }
                case CadCommon/* CadGeometryType.COMPSOLID */.dT.COMPSOLID: {
                    return new CadPrimitiveCompSolid(object, index);
                }
                case CadCommon/* CadGeometryType.COMPOUND */.dT.COMPOUND: {
                    return new CadPrimitiveCompound(object, index);
                }
            }
            Assert/* TypeAssert.unreachable */.f.unreachable(type);
        }
    };
    // object methods
    const objectClassFactory = (object) => {
        if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
            return CadCoreObject;
        }
    };
    const objectInstanceFactory = (object, index = 0) => {
        if (CadCommon/* CAD_GEOMETRY_TYPES_SET.has */.AF.has(object.type)) {
            return new CadCoreObject(object, index);
        }
    };
    //
    const factoryFunctions = {
        pointClass: pointClassFactory,
        pointInstance: pointInstanceFactory,
        vertexClass: vertexClassFactory,
        vertexInstance: vertexInstanceFactory,
        primitiveClass: primitiveClassFactory,
        primitiveInstance: primitiveInstanceFactory,
        objectClass: objectClassFactory,
        objectInstance: objectInstanceFactory,
    };
    (0,CoreObjectFactory/* registerFactoryFunctions */.Sv)(factoryFunctions);
    //
    //
    // SPECIALIZED CHILDREN
    //
    //
    poly.specializedChildren.registerHook('CAD', onAddSpecializedChildren);
}
// export class CADModule extends BaseModule<ModuleName.CAD> {
// 	moduleName() {
// 		return ModuleName.CAD;
// 	}
// 	// module(){
// 	// }
// 	onRegister() {
// 		const classCheckFunction:CoreObjectClassFactoryCheckFunction = (object: ObjectContent<CoreObjectType>)=>{
// 			if(CAD_GEOMETRY_TYPES_SET.has(object.type as CadGeometryType)){
// 				return CadCoreObject
// 			}
// 		}
// 		const instanceCheckFunction:CoreObjectInstanceFactoryCheckFunction = (object: ObjectContent<CoreObjectType>,index:number=0)=>{
// 			if(CAD_GEOMETRY_TYPES_SET.has(object.type as CadGeometryType)){
// 				return new CadCoreObject(object as CadObject<CadGeometryType>, index)
// 			}
// 		}
// 		const checkFunctions: CoreObjectFactoryCheckFunctions = {
// 			class: classCheckFunction,
// 			instance: instanceCheckFunction,
// 		}
// 		registerCoreObjectCheckFunctions(checkFunctions);
// 	}
// }

// EXTERNAL MODULE: ./src/engine/poly/registers/modules/Common.ts
var Common = __webpack_require__(83220);
;// CONCATENATED MODULE: ./src/engine/poly/registers/modules/entryPoints/CAD.ts


const CADModule = {
    moduleName: Common/* ModuleName.CAD */.r.CAD,
    // module: cadModule,
    onRegister: onCadModuleRegister,
};



/***/ }),

/***/ 9335:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GF": () => (/* binding */ SopTypeFile),
/* harmony export */   "So": () => (/* binding */ SopExporter),
/* harmony export */   "aB": () => (/* binding */ SopType),
/* harmony export */   "dk": () => (/* binding */ SopTypeFileMulti)
/* harmony export */ });
var SopType;
(function (SopType) {
    SopType["ACTOR"] = "actor";
    SopType["ACTOR_INSTANCE"] = "actorInstance";
    SopType["ACTOR_POINT"] = "actorPoint";
    SopType["ADD"] = "add";
    SopType["ADJACENCY"] = "adjacency";
    SopType["ANIMATION_COPY"] = "animationCopy";
    SopType["ATTRIB_ADD_MULT"] = "attribAddMult";
    SopType["ATTRIB_COPY"] = "attribCopy";
    SopType["ATTRIB_CREATE"] = "attribCreate";
    SopType["ATTRIB_DELETE"] = "attribDelete";
    SopType["ATTRIB_ID"] = "attribId";
    SopType["ATTRIB_PROMOTE"] = "attribPromote";
    SopType["ATTRIB_RENAME"] = "attribRename";
    SopType["ATTRIB_SET_AT_INDEX"] = "attribSetAtIndex";
    SopType["ATTRIB_TRANSFER"] = "attribTransfer";
    SopType["AUDIO_NOTES"] = "audioNotes";
    SopType["AXES_HELPER"] = "axesHelper";
    SopType["BBOX_SCATTER"] = "bboxScatter";
    SopType["BLEND"] = "blend";
    SopType["BOX"] = "box";
    SopType["BOX_LINES"] = "boxLines";
    SopType["BVH"] = "BVH";
    SopType["BVH_VISUALIZER"] = "BVHVisualizer";
    SopType["CACHE"] = "cache";
    //
    SopType["CAD_BOOLEAN"] = "CADBoolean";
    SopType["CAD_BOX"] = "CADBox";
    SopType["CAD_CIRCLE"] = "CADCircle";
    SopType["CAD_CIRCLE_2D"] = "CADCircle2D";
    SopType["CAD_CIRCLE_3_POINTS"] = "CADCircle3Points";
    SopType["CAD_CONE"] = "CADCone";
    SopType["CAD_CONVERT_DIMENSION"] = "CADConvertDimension";
    SopType["CAD_CURVE_2D_TO_SURFACE"] = "CADCurve2DToSurface";
    SopType["CAD_CURVE_FROM_POINTS"] = "CADCurveFromPoints";
    SopType["CAD_CURVE_FROM_POINTS_2D"] = "CADCurveFromPoints2D";
    SopType["CAD_CURVE_TRIM"] = "CADCurveTrim";
    SopType["CAD_ELLIPSE"] = "CADEllipse";
    SopType["CAD_ELLIPSE_2D"] = "CADEllipse2D";
    SopType["CAD_EXPORTER_STEP"] = "CADExporterSTEP";
    SopType["CAD_EXTRUDE"] = "CADExtrude";
    SopType["CAD_FILE_STEP"] = "CADFileSTEP";
    SopType["CAD_FILLET"] = "CADFillet";
    SopType["CAD_GROUP"] = "CADGroup";
    SopType["CAD_LOFT"] = "CADLoft";
    SopType["CAD_MIRROR"] = "CADMirror";
    SopType["CAD_PIPE"] = "CADPipe";
    SopType["CAD_POINT"] = "CADPoint";
    SopType["CAD_POINT_2D"] = "CADPoint2D";
    SopType["CAD_POINTS_FROM_CURVE"] = "CADPointsFromCurve";
    SopType["CAD_RECTANGLE"] = "CADRectangle";
    SopType["CAD_REVOLUTION"] = "CADRevolution";
    SopType["CAD_SEGMENT"] = "CADSegment";
    SopType["CAD_SPHERE"] = "CADSphere";
    SopType["CAD_THICKNESS"] = "CADThickness";
    SopType["CAD_TORUS"] = "CADTorus";
    SopType["CAD_TRANSFORM"] = "CADTransform";
    SopType["CAD_TRANSFORM_2D"] = "CADTransform2D";
    SopType["CAD_TRIANGULATE"] = "CADTriangulate";
    SopType["CAD_TUBE"] = "CADTube";
    SopType["CAD_UNPACK"] = "CADUnpack";
    SopType["CAD_WEDGE"] = "CADWedge";
    //
    SopType["CAMERA_PROJECT"] = "cameraProject";
    SopType["CAPSULE"] = "capsule";
    SopType["CIRCLE"] = "circle";
    SopType["CIRCLE_3_POINTS"] = "circle3Points";
    SopType["CLOTH_PREPARE"] = "clothPrepare";
    SopType["CLOTH_SOLVER"] = "clothSolver";
    SopType["COLOR"] = "color";
    SopType["CONE"] = "cone";
    SopType["CONTACT_SHADOWS"] = "contactShadows";
    SopType["COPY"] = "copy";
    SopType["CURVE_FROM_POINTS"] = "curveFromPoints";
    //
    SopType["CSG_ARC"] = "CSGArc";
    SopType["CSG_BOOLEAN"] = "CSGBoolean";
    SopType["CSG_CENTER"] = "CSGCenter";
    SopType["CSG_CIRCLE"] = "CSGCircle";
    SopType["CSG_BOX"] = "CSGBox";
    SopType["CSG_DODECAHEDRON"] = "CSGDodecahedron";
    SopType["CSG_ELLIPSE"] = "CSGEllipse";
    SopType["CSG_ELLIPSOID"] = "CSGEllipsoid";
    SopType["CSG_EXPAND"] = "CSGExpand";
    SopType["CSG_EXTRUDE_LINEAR"] = "CSGExtrudeLinear";
    SopType["CSG_EXTRUDE_RECTANGULAR"] = "CSGExtrudeRectangular";
    SopType["CSG_EXTRUDE_ROTATE"] = "CSGExtrudeRotate";
    SopType["CSG_HULL"] = "CSGHull";
    SopType["CSG_LINE"] = "CSGLine";
    SopType["CSG_MIRROR"] = "CSGMirror";
    SopType["CSG_OFFSET"] = "CSGOffset";
    SopType["CSG_POLYGON"] = "CSGPolygon";
    SopType["CSG_POLYHEDRON"] = "CSGPolyhedron";
    SopType["CSG_PROJECT"] = "CSGProject";
    SopType["CSG_RECTANGLE"] = "CSGRectangle";
    SopType["CSG_SPHERE"] = "CSGSphere";
    SopType["CSG_STAR"] = "CSGStar";
    SopType["CSG_TORUS"] = "CSGTorus";
    SopType["CSG_TRANSFORM_2D"] = "CSGTransform2D";
    SopType["CSG_TRANSFORM_RESET"] = "CSGTransformReset";
    SopType["CSG_TRIANGLE"] = "CSGTriangle";
    SopType["CSG_TRIANGULATE"] = "CSGTriangulate";
    SopType["CSG_TUBE"] = "CSGTube";
    SopType["CSG_TUBE_ELLIPTIC"] = "CSGTubeElliptic";
    //
    SopType["CSS2D_OBJECT"] = "CSS2DObject";
    SopType["CSS3D_OBJECT"] = "CSS3DObject";
    SopType["DATA"] = "data";
    SopType["DATA_URL"] = "dataUrl";
    SopType["DECAL"] = "decal";
    SopType["DELETE"] = "delete";
    SopType["DELETE_BY_NAME"] = "deleteByName";
    SopType["ENTITY_BUILDER"] = "entityBuilder";
    SopType["FACET"] = "facet";
    SopType["FUSE"] = "fuse";
    SopType["GROUND_PROJECTED_SKYBOX"] = "groundProjectedSkybox";
    SopType["HIERARCHY"] = "hierarchy";
    SopType["ICOSAHEDRON"] = "icosahedron";
    //
    SopType["IFC_FILTER_CATEGORIES"] = "IFCFilterCategories";
    //
    SopType["INSTANCE"] = "instance";
    SopType["INSTANCE_BUILDER"] = "instanceBuilder";
    SopType["INSTANCED_MESH_TO_MESH"] = "instancedMeshToMesh";
    SopType["INSTANCE_UPDATE"] = "instanceUpdate";
    SopType["JITTER"] = "jitter";
    SopType["LATTICE"] = "lattice";
    SopType["LAYER"] = "layer";
    SopType["LOD"] = "lod";
    SopType["LOOK_AT"] = "lookAt";
    SopType["MAPBOX_TRANSFORM"] = "mapboxTransform";
    SopType["MATERIAL"] = "material";
    SopType["MATERIAL_PROPERTIES"] = "materialProperties";
    SopType["MERGE"] = "merge";
    SopType["METABALL"] = "metaball";
    SopType["MIRROR"] = "mirror";
    SopType["NOISE"] = "noise";
    SopType["NORMALS"] = "normals";
    SopType["NORMALS_HELPER"] = "normalsHelper";
    SopType["OBJECT_BUILDER"] = "objectBuilder";
    SopType["OBJECT_PROPERTIES"] = "objectProperties";
    SopType["OBJECTS_LAYOUT"] = "objectsLayout";
    SopType["PALETTE"] = "palette";
    SopType["PARTICLES_SYSTEM_GPU"] = "particlesSystemGpu";
    SopType["PARTICLES_SYSTEM_GPU_ATTRIBUTES"] = "particlesSystemGpuAttributes";
    SopType["PARTICLES_SYSTEM_GPU_MATERIAL"] = "particlesSystemGpuMaterial";
    SopType["PHYSICS_DEBUG"] = "physicsDebug";
    SopType["PHYSICS_GROUND"] = "physicsGround";
    SopType["PHYSICS_RBD_ATTRIBUTES"] = "physicsRBDAttributes";
    SopType["PHYSICS_RBD_JOINTS"] = "physicsRBDJoints";
    SopType["PHYSICS_WORLD"] = "physicsWorld";
    SopType["PHYSICS_PLAYER"] = "physicsPlayer";
    SopType["PLANE"] = "plane";
    SopType["POINT"] = "point";
    SopType["POINT_BUILDER"] = "pointBuilder";
    SopType["POLAR_TRANSFORM"] = "polarTransform";
    SopType["POLYWIRE"] = "polywire";
    //
    SopType["QUAD_CORNERS"] = "quadCorners";
    SopType["QUAD_EXTRUDE"] = "quadExtrude";
    SopType["QUAD_PLANE"] = "quadPlane";
    SopType["QUAD_SMOOTH"] = "quadSmooth";
    SopType["QUAD_TRIANGULATE"] = "quadTriangulate";
    SopType["QUAD_UNIQUE_NEIGHBOUR_ID"] = "quadUniqueNeighbourId";
    SopType["QUADRANGULATE"] = "quadrangulate";
    //
    SopType["RAY"] = "ray";
    SopType["REFLECTOR"] = "reflector";
    SopType["RING"] = "ring";
    SopType["ROUNDED_BOX"] = "roundedBox";
    SopType["SCATTER"] = "scatter";
    // SDF
    // SDF_BOOLEAN = 'SDFBoolean',
    // SDF_BOX = 'SDFBox',
    SopType["SDF_BUILDER"] = "SDFBuilder";
    // SDF_EXTRUDE = 'SDFExtrude',
    // SDF_REFINE = 'SDFRefine',
    // SDF_LEVEL_SET = 'SDFLevelSet',
    // SDF_SMOOTH = 'SDFSmooth',
    // SDF_SPHERE = 'SDFSphere',
    // SDF_TRIANGULATE = 'SDFTriangulate',
    // SDF_TUBE = 'SDFTube',
    //
    SopType["SET_CHILDREN"] = "setChildren";
    SopType["SET_GEOMETRY"] = "setGeometry";
    SopType["SHEAR"] = "shear";
    SopType["SHORTEST_PATH"] = "shortestPath";
    SopType["SKELETON_HELPER"] = "skeletonHelper";
    SopType["SKIN"] = "skin";
    SopType["SORT"] = "sort";
    SopType["SPHERE"] = "sphere";
    SopType["SPLIT"] = "split";
    SopType["SUBDIVIDE"] = "subdivide";
    SopType["SWITCH"] = "switch";
    SopType["TANGENT"] = "tangent";
    SopType["TANGENTS_HELPER"] = "tangentsHelper";
    //
    // TET = 'tet',
    // TET_BOX = 'tetBox',
    SopType["TET_DELETE"] = "tetDelete";
    SopType["TET_EMBED"] = "tetEmbed";
    // TET_GROW = 'tetGrow',
    // TET_MIRROR = 'tetMirror',
    SopType["TET_SOFT_BODY_SOLVER"] = "tetSoftBodySolver";
    // TET_SPLIT = 'tetSplit',
    SopType["TET_TRIANGULATE"] = "tetTriangulate";
    // TET_QUALITY = 'tetQuality',
    SopType["TETRAHEDRALIZE"] = "tetrahedralize";
    SopType["TETRAHEDRON"] = "tetrahedron";
    //
    SopType["TEXT"] = "text";
    SopType["TEXTURE_COPY"] = "textureCopy";
    SopType["TEXTURE_PROPERTIES"] = "textureProperties";
    SopType["TORUS"] = "torus";
    SopType["TORUS_KNOT"] = "torusKnot";
    SopType["TRANSFORM"] = "transform";
    SopType["TRANSFORM_COPY"] = "transformCopy";
    SopType["TRANSFORM_MULTI"] = "transformMulti";
    SopType["TRANSFORM_RESET"] = "transformReset";
    SopType["TUBE"] = "tube";
    SopType["UV_LAYOUT"] = "uvLayout";
    SopType["UV_TRANSFORM"] = "uvTransform";
    SopType["UV_UNWRAP"] = "uvUnwrap";
    SopType["WEB_XR_AR_ESTIMATED_LIGHT"] = "webXRAREstimatedLight";
    SopType["WFC_BUILDER"] = "WFCBuilder";
    SopType["WFC_DEBUG"] = "WFCDebug";
    SopType["WFC_SOLVER"] = "WFCSolver";
    SopType["WFC_RULE_FROM_PROXIMITY"] = "WFCRuleFromProximity";
    SopType["WFC_RULE_CONNECTION_FROM_SIDE_NAME"] = "WFCRuleConnectionFromSideName";
    // WFC_RULE_CONNECTION_TO_EMPTY_TILE = 'WFCRuleConnectionToEmptyTile',
    SopType["WFC_RULE_CONNECTION_TO_GRID_BORDER"] = "WFCRuleConnectionToGridBorder";
    SopType["WFC_RULE_TILE_WEIGHT"] = "WFCRuleTileWeight";
    SopType["WFC_TILE_EMPTY_OBJECT"] = "WFCTileEmptyObject";
    SopType["WFC_TILE_ERROR_OBJECT"] = "WFCTileErrorObject";
    SopType["WFC_TILE_UNRESOLVED_OBJECT"] = "WFCTileUnresolvedObject";
    SopType["WFC_TILE_PROPERTIES"] = "WFCTileProperties";
    SopType["WFC_TILE_SIDE_NAME"] = "WFCTileSideName";
    SopType["WFC_TILE_TRANSFORM"] = "WFCTileTransform";
})(SopType || (SopType = {}));
var SopTypeFile;
(function (SopTypeFile) {
    SopTypeFile["FILE_3DS"] = "file3DS";
    SopTypeFile["FILE_DRC"] = "fileDRC";
    SopTypeFile["FILE_FBX"] = "fileFBX";
    SopTypeFile["FILE_GEOJSON"] = "fileGEOJSON";
    SopTypeFile["FILE_GLTF"] = "fileGLTF";
    SopTypeFile["FILE_JSON"] = "fileJSON";
    SopTypeFile["FILE_MPD"] = "fileMPD";
    SopTypeFile["FILE_OBJ"] = "fileOBJ";
    SopTypeFile["FILE_PDB"] = "filePDB";
    SopTypeFile["FILE_PLY"] = "filePLY";
    SopTypeFile["FILE_STL"] = "fileSTL";
    SopTypeFile["FILE_SVG"] = "fileSVG";
    SopTypeFile["FILE_USDZ"] = "fileUSDZ";
    SopTypeFile["FILE_VOX"] = "fileVOX";
})(SopTypeFile || (SopTypeFile = {}));
var SopTypeFileMulti;
(function (SopTypeFileMulti) {
    SopTypeFileMulti["FILE_DRC"] = "fileMultiDRC";
    SopTypeFileMulti["FILE_FBX"] = "fileMultiFBX";
    SopTypeFileMulti["FILE_GLTF"] = "fileMultiGLTF";
    SopTypeFileMulti["FILE_JSON"] = "fileMultiJSON";
    SopTypeFileMulti["FILE_MPD"] = "fileMultiMPD";
    SopTypeFileMulti["FILE_OBJ"] = "fileMultiOBJ";
    SopTypeFileMulti["FILE_PDB"] = "fileMultiPDB";
    SopTypeFileMulti["FILE_PLY"] = "fileMultiPLY";
    SopTypeFileMulti["FILE_STL"] = "fileMultiSTL";
    SopTypeFileMulti["FILE_SVG"] = "fileMultiSVG";
})(SopTypeFileMulti || (SopTypeFileMulti = {}));
var SopExporter;
(function (SopExporter) {
    SopExporter["EXPORTER_GLTF"] = "exporterGLTF";
    SopExporter["EXPORTER_OBJ"] = "exporterOBJ";
    SopExporter["EXPORTER_PLY"] = "exporterPLY";
    SopExporter["EXPORTER_STL"] = "exporterSTL";
    SopExporter["EXPORTER_USDZ"] = "exporterUSDZ";
})(SopExporter || (SopExporter = {}));


/***/ }),

/***/ 75292:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "G": () => (/* binding */ MAPBOX_TOKEN_MISSING_ERROR_MESSAGE),
/* harmony export */   "i": () => (/* binding */ PolyThirdPartyMapboxController)
/* harmony export */ });
const MAPBOX_TOKEN_MISSING_ERROR_MESSAGE = `Set your mapbox token with "poly.thirdParty.mapbox().setToken('<YOUR TOKEN>')" in the PolyConfig.ts file, then reload the page`;
class PolyThirdPartyMapboxController {
    setToken(token) {
        this._token = token;
    }
    setGetTokenFunction(tokenFunc) {
        this._getTokenFunc = tokenFunc;
    }
    async token() {
        if (this._token) {
            return this._token;
        }
        if (this._getTokenFunc) {
            return await this._getTokenFunc();
        }
    }
}


/***/ }),

/***/ 79875:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Y": () => (/* binding */ watch)
/* harmony export */ });
/* unused harmony export watchEffect */
/* harmony import */ var _vue_reactivity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2262);
/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3577);
// src/index.ts



// src/errorHandling.ts

function callWithErrorHandling(fn, type, args) {
  let res;
  try {
    res = args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn, type, args) {
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(fn)) {
    const res = callWithErrorHandling(fn, type, args);
    if (res && (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isPromise */ .tI)(res)) {
      res.catch((err) => {
        handleError(err, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn.length; i++)
    values.push(callWithAsyncErrorHandling(fn[i], type, args));
  return values;
}
function handleError(err, type) {
  console.error(new Error(`[@vue-reactivity/watch]: ${type}`));
  console.error(err);
}
function warn(message) {
  console.warn(createError(message));
}
function createError(message) {
  return new Error(`[reactivue]: ${message}`);
}

// src/index.ts
var INITIAL_WATCHER_VALUE = {};
function watchEffect(effect, options) {
  return doWatch(effect, null, options);
}
function watch(source, cb, options) {
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush } = {}) {
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_1__/* .isRef */ .dq)(source)) {
    getter = () => source.value;
    forceTrigger = (0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_1__/* .isShallow */ .yT)(source);
  } else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_1__/* .isReactive */ .PG)(source)) {
    getter = () => source;
    deep = true;
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(source)) {
    isMultiSource = true;
    forceTrigger = source.some(_vue_reactivity__WEBPACK_IMPORTED_MODULE_1__/* .isReactive */ .PG);
    getter = () => source.map((s) => {
      if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_1__/* .isRef */ .dq)(s))
        return s.value;
      else if ((0,_vue_reactivity__WEBPACK_IMPORTED_MODULE_1__/* .isReactive */ .PG)(s))
        return traverse(s);
      else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(s))
        return callWithErrorHandling(s, "watch getter");
      else
        return warn("invalid source");
    });
  } else if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .mf)(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, "watch getter");
    } else {
      getter = () => {
        if (cleanup)
          cleanup();
        return callWithAsyncErrorHandling(source, "watch callback", [onCleanup]);
      };
    }
  } else {
    getter = _vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .NOOP */ .dG;
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn) => {
    cleanup = effect.onStop = () => {
      callWithErrorHandling(fn, "watch cleanup");
    };
  };
  let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect.active)
      return;
    if (cb) {
      const newValue = effect.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(v, oldValue[i])) : (0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .hasChanged */ .aU)(newValue, oldValue))) {
        if (cleanup)
          cleanup();
        callWithAsyncErrorHandling(cb, "watch value", [
          newValue,
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else {
    scheduler = () => {
      job();
    };
  }
  const effect = new _vue_reactivity__WEBPACK_IMPORTED_MODULE_1__/* .ReactiveEffect */ .qq(getter, scheduler);
  if (cb) {
    if (immediate)
      job();
    else
      oldValue = effect.run();
  } else {
    effect.run();
  }
  return () => effect.stop();
}
function traverse(value, seen = /* @__PURE__ */ new Set()) {
  if (!(0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isObject */ .Kn)(value) || seen.has(value))
    return value;
  seen.add(value);
  if ((0,_vue_shared__WEBPACK_IMPORTED_MODULE_0__/* .isArray */ .kJ)(value)) {
    for (let i = 0; i < value.length; i++)
      traverse(value[i], seen);
  } else if (value instanceof Map) {
    value.forEach((_, key) => {
      traverse(value.get(key), seen);
    });
  } else if (value instanceof Set) {
    value.forEach((v) => {
      traverse(v, seen);
    });
  } else {
    for (const key of Object.keys(value))
      traverse(value[key], seen);
  }
  return value;
}



/***/ }),

/***/ 17685:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _root_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(66092);


/** Built-in value references. */
var Symbol = _root_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"].Symbol */ .Z.Symbol;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Symbol);


/***/ }),

/***/ 13243:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "Z": () => (/* binding */ _baseGetTag)
});

// EXTERNAL MODULE: ./node_modules/lodash-es/_Symbol.js
var _Symbol = __webpack_require__(17685);
;// CONCATENATED MODULE: ./node_modules/lodash-es/_getRawTag.js


/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var _getRawTag_hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = _Symbol/* default */.Z ? _Symbol/* default.toStringTag */.Z.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = _getRawTag_hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

/* harmony default export */ const _getRawTag = (getRawTag);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_objectToString.js
/** Used for built-in method references. */
var _objectToString_objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var _objectToString_nativeObjectToString = _objectToString_objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return _objectToString_nativeObjectToString.call(value);
}

/* harmony default export */ const _objectToString = (objectToString);

;// CONCATENATED MODULE: ./node_modules/lodash-es/_baseGetTag.js




/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var _baseGetTag_symToStringTag = _Symbol/* default */.Z ? _Symbol/* default.toStringTag */.Z.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (_baseGetTag_symToStringTag && _baseGetTag_symToStringTag in Object(value))
    ? _getRawTag(value)
    : _objectToString(value);
}

/* harmony default export */ const _baseGetTag = (baseGetTag);


/***/ }),

/***/ 13413:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (freeGlobal);


/***/ }),

/***/ 66092:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13413);


/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = _freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z || freeSelf || Function('return this')();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (root);


/***/ }),

/***/ 77226:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObject);


/***/ }),

/***/ 18533:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (isObjectLike);


/***/ }),

/***/ 40140:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$1": () => (/* binding */ mergeVertices),
/* harmony export */   "LZ": () => (/* binding */ toCreasedNormals),
/* harmony export */   "Vs": () => (/* binding */ toTrianglesDrawMode),
/* harmony export */   "n4": () => (/* binding */ mergeGeometries),
/* harmony export */   "qf": () => (/* binding */ mergeBufferGeometries)
/* harmony export */ });
/* unused harmony exports deepCloneAttribute, deinterleaveAttribute, deinterleaveGeometry, computeMikkTSpaceTangents, mergeAttributes, mergeBufferAttributes, interleaveAttributes, estimateBytesUsed, computeMorphedAttributes, mergeGroups */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99477);


function computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {

	if ( ! MikkTSpace || ! MikkTSpace.isReady ) {

		throw new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );

	}

	if ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {

		throw new Error( 'BufferGeometryUtils: Tangents require "position", "normal", and "uv" attributes.' );

	}

	function getAttributeArray( attribute ) {

		if ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {

			const dstArray = new Float32Array( attribute.count * attribute.itemSize );

			for ( let i = 0, j = 0; i < attribute.count; i ++ ) {

				dstArray[ j ++ ] = attribute.getX( i );
				dstArray[ j ++ ] = attribute.getY( i );

				if ( attribute.itemSize > 2 ) {

					dstArray[ j ++ ] = attribute.getZ( i );

				}

			}

			return dstArray;

		}

		if ( attribute.array instanceof Float32Array ) {

			return attribute.array;

		}

		return new Float32Array( attribute.array );

	}

	// MikkTSpace algorithm requires non-indexed input.

	const _geometry = geometry.index ? geometry.toNonIndexed() : geometry;

	// Compute vertex tangents.

	const tangents = MikkTSpace.generateTangents(

		getAttributeArray( _geometry.attributes.position ),
		getAttributeArray( _geometry.attributes.normal ),
		getAttributeArray( _geometry.attributes.uv )

	);

	// Texture coordinate convention of glTF differs from the apparent
	// default of the MikkTSpace library; .w component must be flipped.

	if ( negateSign ) {

		for ( let i = 3; i < tangents.length; i += 4 ) {

			tangents[ i ] *= - 1;

		}

	}

	//

	_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );

	if ( geometry !== _geometry ) {

		geometry.copy( _geometry );

	}

	return geometry;

}

/**
 * @param  {Array<BufferGeometry>} geometries
 * @param  {Boolean} useGroups
 * @return {BufferGeometry}
 */
function mergeGeometries( geometries, useGroups = false ) {

	const isIndexed = geometries[ 0 ].index !== null;

	const attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );
	const morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );

	const attributes = {};
	const morphAttributes = {};

	const morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;

	const mergedGeometry = new three__WEBPACK_IMPORTED_MODULE_0__.BufferGeometry();

	let offset = 0;

	for ( let i = 0; i < geometries.length; ++ i ) {

		const geometry = geometries[ i ];
		let attributesCount = 0;

		// ensure that all geometries are indexed, or none

		if ( isIndexed !== ( geometry.index !== null ) ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );
			return null;

		}

		// gather attributes, exit early if they're different

		for ( const name in geometry.attributes ) {

			if ( ! attributesUsed.has( name ) ) {

				console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure "' + name + '" attribute exists among all geometries, or in none of them.' );
				return null;

			}

			if ( attributes[ name ] === undefined ) attributes[ name ] = [];

			attributes[ name ].push( geometry.attributes[ name ] );

			attributesCount ++;

		}

		// ensure geometries have the same number of attributes

		if ( attributesCount !== attributesUsed.size ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );
			return null;

		}

		// gather morph attributes, exit early if they're different

		if ( morphTargetsRelative !== geometry.morphTargetsRelative ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );
			return null;

		}

		for ( const name in geometry.morphAttributes ) {

			if ( ! morphAttributesUsed.has( name ) ) {

				console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );
				return null;

			}

			if ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];

			morphAttributes[ name ].push( geometry.morphAttributes[ name ] );

		}

		if ( useGroups ) {

			let count;

			if ( isIndexed ) {

				count = geometry.index.count;

			} else if ( geometry.attributes.position !== undefined ) {

				count = geometry.attributes.position.count;

			} else {

				console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );
				return null;

			}

			mergedGeometry.addGroup( offset, count, i );

			offset += count;

		}

	}

	// merge indices

	if ( isIndexed ) {

		let indexOffset = 0;
		const mergedIndex = [];

		for ( let i = 0; i < geometries.length; ++ i ) {

			const index = geometries[ i ].index;

			for ( let j = 0; j < index.count; ++ j ) {

				mergedIndex.push( index.getX( j ) + indexOffset );

			}

			indexOffset += geometries[ i ].attributes.position.count;

		}

		mergedGeometry.setIndex( mergedIndex );

	}

	// merge attributes

	for ( const name in attributes ) {

		const mergedAttribute = mergeAttributes( attributes[ name ] );

		if ( ! mergedAttribute ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );
			return null;

		}

		mergedGeometry.setAttribute( name, mergedAttribute );

	}

	// merge morph attributes

	for ( const name in morphAttributes ) {

		const numMorphTargets = morphAttributes[ name ][ 0 ].length;

		if ( numMorphTargets === 0 ) break;

		mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};
		mergedGeometry.morphAttributes[ name ] = [];

		for ( let i = 0; i < numMorphTargets; ++ i ) {

			const morphAttributesToMerge = [];

			for ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {

				morphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );

			}

			const mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );

			if ( ! mergedMorphAttribute ) {

				console.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );
				return null;

			}

			mergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );

		}

	}

	return mergedGeometry;

}

/**
 * @param {Array<BufferAttribute>} attributes
 * @return {BufferAttribute}
 */
function mergeAttributes( attributes ) {

	let TypedArray;
	let itemSize;
	let normalized;
	let gpuType = - 1;
	let arrayLength = 0;

	for ( let i = 0; i < attributes.length; ++ i ) {

		const attribute = attributes[ i ];

		if ( attribute.isInterleavedBufferAttribute ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. InterleavedBufferAttributes are not supported.' );
			return null;

		}

		if ( TypedArray === undefined ) TypedArray = attribute.array.constructor;
		if ( TypedArray !== attribute.array.constructor ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );
			return null;

		}

		if ( itemSize === undefined ) itemSize = attribute.itemSize;
		if ( itemSize !== attribute.itemSize ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );
			return null;

		}

		if ( normalized === undefined ) normalized = attribute.normalized;
		if ( normalized !== attribute.normalized ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );
			return null;

		}

		if ( gpuType === - 1 ) gpuType = attribute.gpuType;
		if ( gpuType !== attribute.gpuType ) {

			console.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );
			return null;

		}

		arrayLength += attribute.array.length;

	}

	const array = new TypedArray( arrayLength );
	let offset = 0;

	for ( let i = 0; i < attributes.length; ++ i ) {

		array.set( attributes[ i ].array, offset );

		offset += attributes[ i ].array.length;

	}

	const result = new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute( array, itemSize, normalized );
	if ( gpuType !== undefined ) {

		result.gpuType = gpuType;

	}

	return result;

}

/**
 * @param {BufferAttribute}
 * @return {BufferAttribute}
 */
function deepCloneAttribute( attribute ) {

	if ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {

		return deinterleaveAttribute( attribute );

	}

	if ( attribute.isInstancedBufferAttribute ) {

		return new InstancedBufferAttribute().copy( attribute );

	}

	return new BufferAttribute().copy( attribute );

}

/**
 * @param {Array<BufferAttribute>} attributes
 * @return {Array<InterleavedBufferAttribute>}
 */
function interleaveAttributes( attributes ) {

	// Interleaves the provided attributes into an InterleavedBuffer and returns
	// a set of InterleavedBufferAttributes for each attribute
	let TypedArray;
	let arrayLength = 0;
	let stride = 0;

	// calculate the length and type of the interleavedBuffer
	for ( let i = 0, l = attributes.length; i < l; ++ i ) {

		const attribute = attributes[ i ];

		if ( TypedArray === undefined ) TypedArray = attribute.array.constructor;
		if ( TypedArray !== attribute.array.constructor ) {

			console.error( 'AttributeBuffers of different types cannot be interleaved' );
			return null;

		}

		arrayLength += attribute.array.length;
		stride += attribute.itemSize;

	}

	// Create the set of buffer attributes
	const interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );
	let offset = 0;
	const res = [];
	const getters = [ 'getX', 'getY', 'getZ', 'getW' ];
	const setters = [ 'setX', 'setY', 'setZ', 'setW' ];

	for ( let j = 0, l = attributes.length; j < l; j ++ ) {

		const attribute = attributes[ j ];
		const itemSize = attribute.itemSize;
		const count = attribute.count;
		const iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );
		res.push( iba );

		offset += itemSize;

		// Move the data for each attribute into the new interleavedBuffer
		// at the appropriate offset
		for ( let c = 0; c < count; c ++ ) {

			for ( let k = 0; k < itemSize; k ++ ) {

				iba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );

			}

		}

	}

	return res;

}

// returns a new, non-interleaved version of the provided attribute
function deinterleaveAttribute( attribute ) {

	const cons = attribute.data.array.constructor;
	const count = attribute.count;
	const itemSize = attribute.itemSize;
	const normalized = attribute.normalized;

	const array = new cons( count * itemSize );
	let newAttribute;
	if ( attribute.isInstancedInterleavedBufferAttribute ) {

		newAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );

	} else {

		newAttribute = new BufferAttribute( array, itemSize, normalized );

	}

	for ( let i = 0; i < count; i ++ ) {

		newAttribute.setX( i, attribute.getX( i ) );

		if ( itemSize >= 2 ) {

			newAttribute.setY( i, attribute.getY( i ) );

		}

		if ( itemSize >= 3 ) {

			newAttribute.setZ( i, attribute.getZ( i ) );

		}

		if ( itemSize >= 4 ) {

			newAttribute.setW( i, attribute.getW( i ) );

		}

	}

	return newAttribute;

}

// deinterleaves all attributes on the geometry
function deinterleaveGeometry( geometry ) {

	const attributes = geometry.attributes;
	const morphTargets = geometry.morphTargets;
	const attrMap = new Map();

	for ( const key in attributes ) {

		const attr = attributes[ key ];
		if ( attr.isInterleavedBufferAttribute ) {

			if ( ! attrMap.has( attr ) ) {

				attrMap.set( attr, deinterleaveAttribute( attr ) );

			}

			attributes[ key ] = attrMap.get( attr );

		}

	}

	for ( const key in morphTargets ) {

		const attr = morphTargets[ key ];
		if ( attr.isInterleavedBufferAttribute ) {

			if ( ! attrMap.has( attr ) ) {

				attrMap.set( attr, deinterleaveAttribute( attr ) );

			}

			morphTargets[ key ] = attrMap.get( attr );

		}

	}

}

/**
 * @param {BufferGeometry} geometry
 * @return {number}
 */
function estimateBytesUsed( geometry ) {

	// Return the estimated memory used by this geometry in bytes
	// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account
	// for InterleavedBufferAttributes.
	let mem = 0;
	for ( const name in geometry.attributes ) {

		const attr = geometry.getAttribute( name );
		mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;

	}

	const indices = geometry.getIndex();
	mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;
	return mem;

}

/**
 * @param {BufferGeometry} geometry
 * @param {number} tolerance
 * @return {BufferGeometry}
 */
function mergeVertices( geometry, tolerance = 1e-4 ) {

	tolerance = Math.max( tolerance, Number.EPSILON );

	// Generate an index buffer if the geometry doesn't have one, or optimize it
	// if it's already available.
	const hashToIndex = {};
	const indices = geometry.getIndex();
	const positions = geometry.getAttribute( 'position' );
	const vertexCount = indices ? indices.count : positions.count;

	// next value for triangle indices
	let nextIndex = 0;

	// attributes and new attribute arrays
	const attributeNames = Object.keys( geometry.attributes );
	const tmpAttributes = {};
	const tmpMorphAttributes = {};
	const newIndices = [];
	const getters = [ 'getX', 'getY', 'getZ', 'getW' ];
	const setters = [ 'setX', 'setY', 'setZ', 'setW' ];

	// Initialize the arrays, allocating space conservatively. Extra
	// space will be trimmed in the last step.
	for ( let i = 0, l = attributeNames.length; i < l; i ++ ) {

		const name = attributeNames[ i ];
		const attr = geometry.attributes[ name ];

		tmpAttributes[ name ] = new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(
			new attr.array.constructor( attr.count * attr.itemSize ),
			attr.itemSize,
			attr.normalized
		);

		const morphAttr = geometry.morphAttributes[ name ];
		if ( morphAttr ) {

			tmpMorphAttributes[ name ] = new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(
				new morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize ),
				morphAttr.itemSize,
				morphAttr.normalized
			);

		}

	}

	// convert the error tolerance to an amount of decimal places to truncate to
	const halfTolerance = tolerance * 0.5;
	const exponent = Math.log10( 1 / tolerance );
	const hashMultiplier = Math.pow( 10, exponent );
	const hashAdditive = halfTolerance * hashMultiplier;
	for ( let i = 0; i < vertexCount; i ++ ) {

		const index = indices ? indices.getX( i ) : i;

		// Generate a hash for the vertex attributes at the current index 'i'
		let hash = '';
		for ( let j = 0, l = attributeNames.length; j < l; j ++ ) {

			const name = attributeNames[ j ];
			const attribute = geometry.getAttribute( name );
			const itemSize = attribute.itemSize;

			for ( let k = 0; k < itemSize; k ++ ) {

				// double tilde truncates the decimal value
				hash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;

			}

		}

		// Add another reference to the vertex if it's already
		// used by another index
		if ( hash in hashToIndex ) {

			newIndices.push( hashToIndex[ hash ] );

		} else {

			// copy data to the new index in the temporary attributes
			for ( let j = 0, l = attributeNames.length; j < l; j ++ ) {

				const name = attributeNames[ j ];
				const attribute = geometry.getAttribute( name );
				const morphAttr = geometry.morphAttributes[ name ];
				const itemSize = attribute.itemSize;
				const newarray = tmpAttributes[ name ];
				const newMorphArrays = tmpMorphAttributes[ name ];

				for ( let k = 0; k < itemSize; k ++ ) {

					const getterFunc = getters[ k ];
					const setterFunc = setters[ k ];
					newarray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );

					if ( morphAttr ) {

						for ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {

							newMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttr[ m ][ getterFunc ]( index ) );

						}

					}

				}

			}

			hashToIndex[ hash ] = nextIndex;
			newIndices.push( nextIndex );
			nextIndex ++;

		}

	}

	// generate result BufferGeometry
	const result = geometry.clone();
	for ( const name in geometry.attributes ) {

		const tmpAttribute = tmpAttributes[ name ];

		result.setAttribute( name, new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(
			tmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),
			tmpAttribute.itemSize,
			tmpAttribute.normalized,
		) );

		if ( ! ( name in tmpMorphAttributes ) ) continue;

		for ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {

			const tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];

			result.morphAttributes[ name ][ j ] = new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute(
				tmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),
				tmpMorphAttribute.itemSize,
				tmpMorphAttribute.normalized,
			);

		}

	}

	// indices

	result.setIndex( newIndices );

	return result;

}

/**
 * @param {BufferGeometry} geometry
 * @param {number} drawMode
 * @return {BufferGeometry}
 */
function toTrianglesDrawMode( geometry, drawMode ) {

	if ( drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TrianglesDrawMode ) {

		console.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );
		return geometry;

	}

	if ( drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TriangleFanDrawMode || drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TriangleStripDrawMode ) {

		let index = geometry.getIndex();

		// generate index if not present

		if ( index === null ) {

			const indices = [];

			const position = geometry.getAttribute( 'position' );

			if ( position !== undefined ) {

				for ( let i = 0; i < position.count; i ++ ) {

					indices.push( i );

				}

				geometry.setIndex( indices );
				index = geometry.getIndex();

			} else {

				console.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );
				return geometry;

			}

		}

		//

		const numberOfTriangles = index.count - 2;
		const newIndices = [];

		if ( drawMode === three__WEBPACK_IMPORTED_MODULE_0__.TriangleFanDrawMode ) {

			// gl.TRIANGLE_FAN

			for ( let i = 1; i <= numberOfTriangles; i ++ ) {

				newIndices.push( index.getX( 0 ) );
				newIndices.push( index.getX( i ) );
				newIndices.push( index.getX( i + 1 ) );

			}

		} else {

			// gl.TRIANGLE_STRIP

			for ( let i = 0; i < numberOfTriangles; i ++ ) {

				if ( i % 2 === 0 ) {

					newIndices.push( index.getX( i ) );
					newIndices.push( index.getX( i + 1 ) );
					newIndices.push( index.getX( i + 2 ) );

				} else {

					newIndices.push( index.getX( i + 2 ) );
					newIndices.push( index.getX( i + 1 ) );
					newIndices.push( index.getX( i ) );

				}

			}

		}

		if ( ( newIndices.length / 3 ) !== numberOfTriangles ) {

			console.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );

		}

		// build final geometry

		const newGeometry = geometry.clone();
		newGeometry.setIndex( newIndices );
		newGeometry.clearGroups();

		return newGeometry;

	} else {

		console.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );
		return geometry;

	}

}

/**
 * Calculates the morphed attributes of a morphed/skinned BufferGeometry.
 * Helpful for Raytracing or Decals.
 * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.
 * @return {Object} An Object with original position/normal attributes and morphed ones.
 */
function computeMorphedAttributes( object ) {

	const _vA = new Vector3();
	const _vB = new Vector3();
	const _vC = new Vector3();

	const _tempA = new Vector3();
	const _tempB = new Vector3();
	const _tempC = new Vector3();

	const _morphA = new Vector3();
	const _morphB = new Vector3();
	const _morphC = new Vector3();

	function _calculateMorphedAttributeData(
		object,
		attribute,
		morphAttribute,
		morphTargetsRelative,
		a,
		b,
		c,
		modifiedAttributeArray
	) {

		_vA.fromBufferAttribute( attribute, a );
		_vB.fromBufferAttribute( attribute, b );
		_vC.fromBufferAttribute( attribute, c );

		const morphInfluences = object.morphTargetInfluences;

		if ( morphAttribute && morphInfluences ) {

			_morphA.set( 0, 0, 0 );
			_morphB.set( 0, 0, 0 );
			_morphC.set( 0, 0, 0 );

			for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

				const influence = morphInfluences[ i ];
				const morph = morphAttribute[ i ];

				if ( influence === 0 ) continue;

				_tempA.fromBufferAttribute( morph, a );
				_tempB.fromBufferAttribute( morph, b );
				_tempC.fromBufferAttribute( morph, c );

				if ( morphTargetsRelative ) {

					_morphA.addScaledVector( _tempA, influence );
					_morphB.addScaledVector( _tempB, influence );
					_morphC.addScaledVector( _tempC, influence );

				} else {

					_morphA.addScaledVector( _tempA.sub( _vA ), influence );
					_morphB.addScaledVector( _tempB.sub( _vB ), influence );
					_morphC.addScaledVector( _tempC.sub( _vC ), influence );

				}

			}

			_vA.add( _morphA );
			_vB.add( _morphB );
			_vC.add( _morphC );

		}

		if ( object.isSkinnedMesh ) {

			object.applyBoneTransform( a, _vA );
			object.applyBoneTransform( b, _vB );
			object.applyBoneTransform( c, _vC );

		}

		modifiedAttributeArray[ a * 3 + 0 ] = _vA.x;
		modifiedAttributeArray[ a * 3 + 1 ] = _vA.y;
		modifiedAttributeArray[ a * 3 + 2 ] = _vA.z;
		modifiedAttributeArray[ b * 3 + 0 ] = _vB.x;
		modifiedAttributeArray[ b * 3 + 1 ] = _vB.y;
		modifiedAttributeArray[ b * 3 + 2 ] = _vB.z;
		modifiedAttributeArray[ c * 3 + 0 ] = _vC.x;
		modifiedAttributeArray[ c * 3 + 1 ] = _vC.y;
		modifiedAttributeArray[ c * 3 + 2 ] = _vC.z;

	}

	const geometry = object.geometry;
	const material = object.material;

	let a, b, c;
	const index = geometry.index;
	const positionAttribute = geometry.attributes.position;
	const morphPosition = geometry.morphAttributes.position;
	const morphTargetsRelative = geometry.morphTargetsRelative;
	const normalAttribute = geometry.attributes.normal;
	const morphNormal = geometry.morphAttributes.position;

	const groups = geometry.groups;
	const drawRange = geometry.drawRange;
	let i, j, il, jl;
	let group;
	let start, end;

	const modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );
	const modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );

	if ( index !== null ) {

		// indexed buffer geometry

		if ( Array.isArray( material ) ) {

			for ( i = 0, il = groups.length; i < il; i ++ ) {

				group = groups[ i ];

				start = Math.max( group.start, drawRange.start );
				end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

				for ( j = start, jl = end; j < jl; j += 3 ) {

					a = index.getX( j );
					b = index.getX( j + 1 );
					c = index.getX( j + 2 );

					_calculateMorphedAttributeData(
						object,
						positionAttribute,
						morphPosition,
						morphTargetsRelative,
						a, b, c,
						modifiedPosition
					);

					_calculateMorphedAttributeData(
						object,
						normalAttribute,
						morphNormal,
						morphTargetsRelative,
						a, b, c,
						modifiedNormal
					);

				}

			}

		} else {

			start = Math.max( 0, drawRange.start );
			end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

			for ( i = start, il = end; i < il; i += 3 ) {

				a = index.getX( i );
				b = index.getX( i + 1 );
				c = index.getX( i + 2 );

				_calculateMorphedAttributeData(
					object,
					positionAttribute,
					morphPosition,
					morphTargetsRelative,
					a, b, c,
					modifiedPosition
				);

				_calculateMorphedAttributeData(
					object,
					normalAttribute,
					morphNormal,
					morphTargetsRelative,
					a, b, c,
					modifiedNormal
				);

			}

		}

	} else {

		// non-indexed buffer geometry

		if ( Array.isArray( material ) ) {

			for ( i = 0, il = groups.length; i < il; i ++ ) {

				group = groups[ i ];

				start = Math.max( group.start, drawRange.start );
				end = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );

				for ( j = start, jl = end; j < jl; j += 3 ) {

					a = j;
					b = j + 1;
					c = j + 2;

					_calculateMorphedAttributeData(
						object,
						positionAttribute,
						morphPosition,
						morphTargetsRelative,
						a, b, c,
						modifiedPosition
					);

					_calculateMorphedAttributeData(
						object,
						normalAttribute,
						morphNormal,
						morphTargetsRelative,
						a, b, c,
						modifiedNormal
					);

				}

			}

		} else {

			start = Math.max( 0, drawRange.start );
			end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );

			for ( i = start, il = end; i < il; i += 3 ) {

				a = i;
				b = i + 1;
				c = i + 2;

				_calculateMorphedAttributeData(
					object,
					positionAttribute,
					morphPosition,
					morphTargetsRelative,
					a, b, c,
					modifiedPosition
				);

				_calculateMorphedAttributeData(
					object,
					normalAttribute,
					morphNormal,
					morphTargetsRelative,
					a, b, c,
					modifiedNormal
				);

			}

		}

	}

	const morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );
	const morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );

	return {

		positionAttribute: positionAttribute,
		normalAttribute: normalAttribute,
		morphedPositionAttribute: morphedPositionAttribute,
		morphedNormalAttribute: morphedNormalAttribute

	};

}

function mergeGroups( geometry ) {

	if ( geometry.groups.length === 0 ) {

		console.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );
		return geometry;

	}

	let groups = geometry.groups;

	// sort groups by material index

	groups = groups.sort( ( a, b ) => {

		if ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;

		return a.start - b.start;

	} );

	// create index for non-indexed geometries

	if ( geometry.getIndex() === null ) {

		const positionAttribute = geometry.getAttribute( 'position' );
		const indices = [];

		for ( let i = 0; i < positionAttribute.count; i += 3 ) {

			indices.push( i, i + 1, i + 2 );

		}

		geometry.setIndex( indices );

	}

	// sort index

	const index = geometry.getIndex();

	const newIndices = [];

	for ( let i = 0; i < groups.length; i ++ ) {

		const group = groups[ i ];

		const groupStart = group.start;
		const groupLength = groupStart + group.count;

		for ( let j = groupStart; j < groupLength; j ++ ) {

			newIndices.push( index.getX( j ) );

		}

	}

	geometry.dispose(); // Required to force buffer recreation
	geometry.setIndex( newIndices );

	// update groups indices

	let start = 0;

	for ( let i = 0; i < groups.length; i ++ ) {

		const group = groups[ i ];

		group.start = start;
		start += group.count;

	}

	// merge groups

	let currentGroup = groups[ 0 ];

	geometry.groups = [ currentGroup ];

	for ( let i = 1; i < groups.length; i ++ ) {

		const group = groups[ i ];

		if ( currentGroup.materialIndex === group.materialIndex ) {

			currentGroup.count += group.count;

		} else {

			currentGroup = group;
			geometry.groups.push( currentGroup );

		}

	}

	return geometry;

}


/**
 * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,
 * non-indexed geometry. Returns the geometry with smooth normals everywhere except
 * faces that meet at an angle greater than the crease angle.
 *
 * @param {BufferGeometry} geometry
 * @param {number} [creaseAngle]
 * @return {BufferGeometry}
 */
function toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {

	const creaseDot = Math.cos( creaseAngle );
	const hashMultiplier = ( 1 + 1e-10 ) * 1e2;

	// reusable vectors
	const verts = [ new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(), new three__WEBPACK_IMPORTED_MODULE_0__.Vector3(), new three__WEBPACK_IMPORTED_MODULE_0__.Vector3() ];
	const tempVec1 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const tempVec2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const tempNorm = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();
	const tempNorm2 = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3();

	// hashes a vector
	function hashVertex( v ) {

		const x = ~ ~ ( v.x * hashMultiplier );
		const y = ~ ~ ( v.y * hashMultiplier );
		const z = ~ ~ ( v.z * hashMultiplier );
		return `${x},${y},${z}`;

	}

	// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed
	// and returns the original geometry
	const resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;
	const posAttr = resultGeometry.attributes.position;
	const vertexMap = {};

	// find all the normals shared by commonly located vertices
	for ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {

		const i3 = 3 * i;
		const a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );
		const b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );
		const c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );

		tempVec1.subVectors( c, b );
		tempVec2.subVectors( a, b );

		// add the normal to the map for all vertices
		const normal = new three__WEBPACK_IMPORTED_MODULE_0__.Vector3().crossVectors( tempVec1, tempVec2 ).normalize();
		for ( let n = 0; n < 3; n ++ ) {

			const vert = verts[ n ];
			const hash = hashVertex( vert );
			if ( ! ( hash in vertexMap ) ) {

				vertexMap[ hash ] = [];

			}

			vertexMap[ hash ].push( normal );

		}

	}

	// average normals from all vertices that share a common location if they are within the
	// provided crease threshold
	const normalArray = new Float32Array( posAttr.count * 3 );
	const normAttr = new three__WEBPACK_IMPORTED_MODULE_0__.BufferAttribute( normalArray, 3, false );
	for ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {

		// get the face normal for this vertex
		const i3 = 3 * i;
		const a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );
		const b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );
		const c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );

		tempVec1.subVectors( c, b );
		tempVec2.subVectors( a, b );

		tempNorm.crossVectors( tempVec1, tempVec2 ).normalize();

		// average all normals that meet the threshold and set the normal value
		for ( let n = 0; n < 3; n ++ ) {

			const vert = verts[ n ];
			const hash = hashVertex( vert );
			const otherNormals = vertexMap[ hash ];
			tempNorm2.set( 0, 0, 0 );

			for ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {

				const otherNorm = otherNormals[ k ];
				if ( tempNorm.dot( otherNorm ) > creaseDot ) {

					tempNorm2.add( otherNorm );

				}

			}

			tempNorm2.normalize();
			normAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );

		}

	}

	resultGeometry.setAttribute( 'normal', normAttr );
	return resultGeometry;

}

function mergeBufferGeometries( geometries, useGroups = false ) {

	console.warn( 'THREE.BufferGeometryUtils: mergeBufferGeometries() has been renamed to mergeGeometries().' ); // @deprecated, r151
	return mergeGeometries( geometries, useGroups );

}

function mergeBufferAttributes( attributes ) {

	console.warn( 'THREE.BufferGeometryUtils: mergeBufferAttributes() has been renamed to mergeAttributes().' ); // @deprecated, r151
	return mergeAttributes( attributes );

}




/***/ }),

/***/ 69542:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CW": () => (/* binding */ smoothstep),
/* harmony export */   "DO": () => (/* binding */ generateUUID),
/* harmony export */   "Fv": () => (/* binding */ normalize),
/* harmony export */   "Id": () => (/* binding */ degToRad),
/* harmony export */   "ZY": () => (/* binding */ radToDeg),
/* harmony export */   "cY": () => (/* binding */ denormalize),
/* harmony export */   "iB": () => (/* binding */ smootherstep),
/* harmony export */   "qW": () => (/* binding */ DEG2RAD),
/* harmony export */   "uZ": () => (/* binding */ clamp)
/* harmony export */ });
/* unused harmony exports RAD2DEG, euclideanModulo, mapLinear, inverseLerp, lerp, damp, pingpong, randInt, randFloat, randFloatSpread, seededRandom, isPowerOfTwo, ceilPowerOfTwo, floorPowerOfTwo, setQuaternionFromProperEuler, MathUtils */
const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

let _seed = 1234567;


const DEG2RAD = Math.PI / 180;
const RAD2DEG = 180 / Math.PI;

// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
function generateUUID() {

	const d0 = Math.random() * 0xffffffff | 0;
	const d1 = Math.random() * 0xffffffff | 0;
	const d2 = Math.random() * 0xffffffff | 0;
	const d3 = Math.random() * 0xffffffff | 0;
	const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
			_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
			_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
			_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

	// .toLowerCase() here flattens concatenated strings to save heap memory space.
	return uuid.toLowerCase();

}

function clamp( value, min, max ) {

	return Math.max( min, Math.min( max, value ) );

}

// compute euclidean modulo of m % n
// https://en.wikipedia.org/wiki/Modulo_operation
function euclideanModulo( n, m ) {

	return ( ( n % m ) + m ) % m;

}

// Linear mapping from range <a1, a2> to range <b1, b2>
function mapLinear( x, a1, a2, b1, b2 ) {

	return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

}

// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
function inverseLerp( x, y, value ) {

	if ( x !== y ) {

		return ( value - x ) / ( y - x );

	} else {

		return 0;

	}

}

// https://en.wikipedia.org/wiki/Linear_interpolation
function lerp( x, y, t ) {

	return ( 1 - t ) * x + t * y;

}

// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
function damp( x, y, lambda, dt ) {

	return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

}

// https://www.desmos.com/calculator/vcsjnyz7x4
function pingpong( x, length = 1 ) {

	return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

}

// http://en.wikipedia.org/wiki/Smoothstep
function smoothstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * ( 3 - 2 * x );

}

function smootherstep( x, min, max ) {

	if ( x <= min ) return 0;
	if ( x >= max ) return 1;

	x = ( x - min ) / ( max - min );

	return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

}

// Random integer from <low, high> interval
function randInt( low, high ) {

	return low + Math.floor( Math.random() * ( high - low + 1 ) );

}

// Random float from <low, high> interval
function randFloat( low, high ) {

	return low + Math.random() * ( high - low );

}

// Random float from <-range/2, range/2> interval
function randFloatSpread( range ) {

	return range * ( 0.5 - Math.random() );

}

// Deterministic pseudo-random float in the interval [ 0, 1 ]
function seededRandom( s ) {

	if ( s !== undefined ) _seed = s;

	// Mulberry32 generator

	let t = _seed += 0x6D2B79F5;

	t = Math.imul( t ^ t >>> 15, t | 1 );

	t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

	return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

}

function degToRad( degrees ) {

	return degrees * DEG2RAD;

}

function radToDeg( radians ) {

	return radians * RAD2DEG;

}

function isPowerOfTwo( value ) {

	return ( value & ( value - 1 ) ) === 0 && value !== 0;

}

function ceilPowerOfTwo( value ) {

	return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

}

function floorPowerOfTwo( value ) {

	return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

}

function setQuaternionFromProperEuler( q, a, b, c, order ) {

	// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

	// rotations are applied to the axes in the order specified by 'order'
	// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
	// angles are in radians

	const cos = Math.cos;
	const sin = Math.sin;

	const c2 = cos( b / 2 );
	const s2 = sin( b / 2 );

	const c13 = cos( ( a + c ) / 2 );
	const s13 = sin( ( a + c ) / 2 );

	const c1_3 = cos( ( a - c ) / 2 );
	const s1_3 = sin( ( a - c ) / 2 );

	const c3_1 = cos( ( c - a ) / 2 );
	const s3_1 = sin( ( c - a ) / 2 );

	switch ( order ) {

		case 'XYX':
			q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
			break;

		case 'YZY':
			q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
			break;

		case 'ZXZ':
			q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
			break;

		case 'XZX':
			q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
			break;

		case 'YXY':
			q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
			break;

		case 'ZYZ':
			q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
			break;

		default:
			console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

	}

}

function denormalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return value / 4294967295.0;

		case Uint16Array:

			return value / 65535.0;

		case Uint8Array:

			return value / 255.0;

		case Int32Array:

			return Math.max( value / 2147483647.0, - 1.0 );

		case Int16Array:

			return Math.max( value / 32767.0, - 1.0 );

		case Int8Array:

			return Math.max( value / 127.0, - 1.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

function normalize( value, array ) {

	switch ( array.constructor ) {

		case Float32Array:

			return value;

		case Uint32Array:

			return Math.round( value * 4294967295.0 );

		case Uint16Array:

			return Math.round( value * 65535.0 );

		case Uint8Array:

			return Math.round( value * 255.0 );

		case Int32Array:

			return Math.round( value * 2147483647.0 );

		case Int16Array:

			return Math.round( value * 32767.0 );

		case Int8Array:

			return Math.round( value * 127.0 );

		default:

			throw new Error( 'Invalid component type.' );

	}

}

const MathUtils = {
	DEG2RAD: DEG2RAD,
	RAD2DEG: RAD2DEG,
	generateUUID: generateUUID,
	clamp: clamp,
	euclideanModulo: euclideanModulo,
	mapLinear: mapLinear,
	inverseLerp: inverseLerp,
	lerp: lerp,
	damp: damp,
	pingpong: pingpong,
	smoothstep: smoothstep,
	smootherstep: smootherstep,
	randInt: randInt,
	randFloat: randFloat,
	randFloatSpread: randFloatSpread,
	seededRandom: seededRandom,
	degToRad: degToRad,
	radToDeg: radToDeg,
	isPowerOfTwo: isPowerOfTwo,
	ceilPowerOfTwo: ceilPowerOfTwo,
	floorPowerOfTwo: floorPowerOfTwo,
	setQuaternionFromProperEuler: setQuaternionFromProperEuler,
	normalize: normalize,
	denormalize: denormalize
};




/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__(26817));
/******/ var __webpack_exports__CADModule = __webpack_exports__.Z;
/******/ export { __webpack_exports__CADModule as CADModule };
/******/ }
])
//# sourceMappingURL=CAD.js.map