"use strict";
import { BaseSopOperation } from "./_Base";
import { InputCloneMode } from "../../../engine/poly/InputCloneMode";
import { TypedNodePathParamValue } from "../../../core/Walker";
import { ThreejsCoreObject } from "../../../core/geometry/modules/three/ThreejsCoreObject";
import { CameraAttribute } from "../../../core/camera/CoreCamera";
import { CameraSopNodeType } from "../../poly/NodeContext";
import { CoreMask } from "../../../core/geometry/Mask";
const _CameraRendererSopOperation = class extends BaseSopOperation {
  static type() {
    return CameraSopNodeType.RENDERER;
  }
  cook(inputCoreGroups, params) {
    const coreGroup = inputCoreGroups[0];
    const objects = CoreMask.filterObjects(coreGroup, {
      group: params.group
    });
    if (this._node) {
      _CameraRendererSopOperation.updateObject({ objects, params, node: this._node, active: true });
    }
    return coreGroup;
  }
  static updateObject(options) {
    const { objects, params, node, active } = options;
    const relativeOrAbsolutePath = params.node.path();
    const foundNode = node.node(relativeOrAbsolutePath);
    if (foundNode && active) {
      const nodeId = foundNode.graphNodeId();
      for (let object of objects) {
        ThreejsCoreObject.addAttribute(object, CameraAttribute.RENDERER_NODE_ID, nodeId);
      }
    } else {
      for (let object of objects) {
        ThreejsCoreObject.deleteAttribute(object, CameraAttribute.RENDERER_NODE_ID);
      }
    }
  }
};
export let CameraRendererSopOperation = _CameraRendererSopOperation;
CameraRendererSopOperation.DEFAULT_PARAMS = {
  group: "",
  node: new TypedNodePathParamValue("")
};
CameraRendererSopOperation.INPUT_CLONED_STATE = InputCloneMode.FROM_NODE;
