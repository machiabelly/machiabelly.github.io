"use strict";
import { BaseSopOperation } from "./_Base";
import { InputCloneMode } from "../../../engine/poly/InputCloneMode";
import { ThreejsCoreObject } from "../../../core/geometry/modules/three/ThreejsCoreObject";
import { CameraAttribute } from "../../../core/camera/CoreCamera";
import { CameraSopNodeType } from "../../poly/NodeContext";
import { CoreMask } from "../../../core/geometry/Mask";
import { Vector2 } from "three";
const _CameraViewOffsetSopOperation = class extends BaseSopOperation {
  static type() {
    return CameraSopNodeType.VIEW_OFFSET;
  }
  cook(inputCoreGroups, params) {
    const coreGroup = inputCoreGroups[0];
    const objects = CoreMask.filterObjects(coreGroup, {
      group: params.group
    });
    if (this._node) {
      _CameraViewOffsetSopOperation.updateObject({ objects, params });
    }
    return coreGroup;
  }
  static updateObject(options) {
    const { objects, params } = options;
    for (let object of objects) {
      ThreejsCoreObject.addAttribute(object, CameraAttribute.VIEW_OFFSET_MIN, params.min);
      ThreejsCoreObject.addAttribute(object, CameraAttribute.VIEW_OFFSET_MAX, params.max);
    }
  }
};
export let CameraViewOffsetSopOperation = _CameraViewOffsetSopOperation;
CameraViewOffsetSopOperation.DEFAULT_PARAMS = {
  group: "",
  min: new Vector2(0, 0),
  max: new Vector2(1, 1)
};
CameraViewOffsetSopOperation.INPUT_CLONED_STATE = InputCloneMode.FROM_NODE;
