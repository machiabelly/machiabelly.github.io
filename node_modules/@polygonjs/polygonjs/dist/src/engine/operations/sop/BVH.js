"use strict";
import { BaseSopOperation } from "./_Base";
import { InputCloneMode } from "../../../engine/poly/InputCloneMode";
import { ThreeMeshBVHHelper } from "../../../core/geometry/bvh/ThreeMeshBVHHelper";
import { CENTER, AVERAGE, SAH } from "../../../core/geometry/bvh/three-mesh-bvh";
const nameByStragery = {
  [CENTER]: "center",
  [AVERAGE]: "average",
  [SAH]: "sah"
};
export const STRAGERY_MENU_ENTRIES = [CENTER, AVERAGE, SAH].map((value) => {
  return { name: nameByStragery[value], value };
});
export class BVHSopOperation extends BaseSopOperation {
  static type() {
    return "BVH";
  }
  cook(inputCoreGroups, params) {
    const inputCoreGroup = inputCoreGroups[0];
    if (inputCoreGroup) {
      const objects = inputCoreGroup.threejsObjects();
      for (let object of objects) {
        object.traverse((child) => {
          const mesh = child;
          if (mesh.isMesh) {
            const bvh = ThreeMeshBVHHelper.createBVH(mesh, {
              strategy: params.strategy,
              maxLeafTris: params.maxLeafTris,
              maxDepth: params.maxDepth,
              verbose: params.verbose
            });
            ThreeMeshBVHHelper.assignBVH(mesh, bvh);
          }
        });
      }
    }
    return inputCoreGroup;
  }
  // private _makeCompact(allMeshes: Mesh[]) {
  // 	const geometries: BufferGeometry[] = [];
  // 	let material: Material | undefined;
  // 	for (let mesh of allMeshes) {
  // 		material = material || (mesh.material as Material);
  // 		const geometry = mesh.geometry;
  // 		geometry.applyMatrix4(mesh.matrix);
  // 		geometries.push(geometry);
  // 	}
  // 	// TODO: test that this works with geometries with same attributes
  // 	try {
  // 		const mergedGeometry = CoreGeometryBuilderMerge.merge(geometries);
  // 		if (mergedGeometry) {
  // 			const mesh = this.createObject(mergedGeometry, ObjectType.MESH, material);
  // 			return mesh;
  // 		} else {
  // 			this.states?.error.set('merge failed, check that input geometries have the same attributes');
  // 		}
  // 	} catch (e) {
  // 		this.states?.error.set((e as Error).message);
  // 	}
  // }
}
BVHSopOperation.DEFAULT_PARAMS = {
  strategy: CENTER,
  maxLeafTris: 10,
  maxDepth: 40,
  verbose: false,
  keepOnlyPosition: false
};
BVHSopOperation.INPUT_CLONED_STATE = InputCloneMode.ALWAYS;
