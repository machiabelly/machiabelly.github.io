"use strict";
import { ObjectNamedFunction2 } from "./_Base";
export class addObjectToObjectClickCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectClickCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionClick;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
export class addObjectToObjectMouseClickCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectMouseClickCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionMouseClick;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
export class addObjectToObjectContextmenuCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectContextmenuCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionContextmenu;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
export class addObjectToObjectHoveredCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectHoveredCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionHover;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
export class addObjectToObjectLongPressCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectLongPressCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionLongPress;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
export class addObjectToObjectPointerdownCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectPointerdownCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionPointerdown;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
export class addObjectToObjectPointerupCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectPointerupCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionPointerup;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
export class addObjectToObjectSwipeCheck extends ObjectNamedFunction2 {
  static type() {
    return "addObjectToObjectSwipeCheck";
  }
  func(object3D, evaluator, options) {
    const controller = this.scene.actorsManager.rayObjectIntersectionSwipe;
    controller.addPropertiesForObject(object3D, options);
    evaluator.onDispose(() => {
      controller.removePropertiesForObject(object3D, options);
    });
  }
}
