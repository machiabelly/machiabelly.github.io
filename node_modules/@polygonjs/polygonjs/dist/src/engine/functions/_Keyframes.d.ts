import { NamedFunction1, NamedFunction2, NamedFunction3 } from './_Base';
import { ChannelData } from '../../core/keyframes/KeyframeCommon';
import { Channel } from '../../core/keyframes/Channel';
import { Vector2, Vector3, Vector4 } from 'three';
type ChannelData1 = ChannelData;
type ChannelData2 = [ChannelData, ChannelData];
type ChannelData3 = [ChannelData, ChannelData, ChannelData];
type ChannelData4 = [ChannelData, ChannelData, ChannelData, ChannelData];
type Channel2 = {
    x: Channel;
    y: Channel;
};
type Channel3 = {
    x: Channel;
    y: Channel;
    z: Channel;
};
type Channel4 = {
    x: Channel;
    y: Channel;
    z: Channel;
    w: Channel;
};
export declare class channelFloat extends NamedFunction1<[ChannelData1]> {
    static type(): string;
    func(data: ChannelData1): Channel;
}
export declare class channelVector2 extends NamedFunction1<[ChannelData2]> {
    static type(): string;
    func(data: ChannelData2): Channel2;
}
export declare class channelVector3 extends NamedFunction1<[ChannelData3]> {
    static type(): string;
    func(data: ChannelData3): Channel3;
}
export declare class channelVector4 extends NamedFunction1<[ChannelData4]> {
    static type(): string;
    func(data: ChannelData4): Channel4;
}
export declare class channelValueFloat extends NamedFunction2<[Channel, number]> {
    static type(): string;
    func(channel: Channel, t: number): number;
}
export declare class channelValueVector2 extends NamedFunction3<[Channel2, number, Vector2]> {
    static type(): string;
    func(channel: Channel2, t: number, target: Vector2): Vector2;
}
export declare class channelValueVector3 extends NamedFunction3<[Channel3, number, Vector3]> {
    static type(): string;
    func(channel: Channel3, t: number, target: Vector3): Vector3;
}
export declare class channelValueVector4 extends NamedFunction3<[Channel4, number, Vector4]> {
    static type(): string;
    func(channel: Channel4, t: number, target: Vector4): Vector4;
}
export {};
