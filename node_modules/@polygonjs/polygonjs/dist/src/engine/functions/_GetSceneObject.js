"use strict";
import { NamedFunction1 } from "./_Base";
import { NodeContext } from "../poly/NodeContext";
import { CoreType } from "../../core/Type";
import { getOrCreateNodeRef } from "../../core/reactivity/NodeReactivity";
import { dummyReadRefVal } from "../../core/reactivity/CoreReactivity";
export class getTexture extends NamedFunction1 {
  static type() {
    return "getTexture";
  }
  func(nodePath) {
    dummyReadRefVal(getOrCreateNodeRef(nodePath).value);
    const node = this.scene.node(nodePath);
    if (node && node.context() == NodeContext.COP) {
      if (CoreType.isFunction(node.__textureSync__)) {
        if (node.isDirty()) {
          node.compute();
        }
        return node.__textureSync__();
      }
    }
  }
}
export class getMaterial extends NamedFunction1 {
  static type() {
    return "getMaterial";
  }
  func(nodePath) {
    dummyReadRefVal(getOrCreateNodeRef(nodePath).value);
    const node = this.scene.node(nodePath);
    if (node && node.context() == NodeContext.MAT) {
      if (node && CoreType.isFunction(node.__materialSync__)) {
        if (node.isDirty()) {
          node.compute();
        }
        return node.__materialSync__();
      }
    }
  }
}
