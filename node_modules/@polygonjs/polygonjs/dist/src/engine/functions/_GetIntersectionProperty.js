"use strict";
import { NamedFunction1, NamedFunction2, ObjectNamedFunction1 } from "./_Base";
export class getIntersectionPropertyDistance extends NamedFunction1 {
  static type() {
    return "getIntersectionPropertyDistance";
  }
  func(intersection) {
    return (intersection == null ? void 0 : intersection.distance) || 0;
  }
}
export class getIntersectionPropertyFaceIndex extends NamedFunction1 {
  static type() {
    return "getIntersectionPropertyFaceIndex";
  }
  func(intersection) {
    return (intersection == null ? void 0 : intersection.faceIndex) || -1;
  }
}
export class getIntersectionPropertyObject extends ObjectNamedFunction1 {
  static type() {
    return "getIntersectionPropertyObject";
  }
  func(object3D, intersection) {
    return (intersection == null ? void 0 : intersection.object) || object3D;
  }
}
export class getIntersectionPropertyPoint extends NamedFunction2 {
  static type() {
    return "getIntersectionPropertyPoint";
  }
  func(intersection, target) {
    return intersection ? target.copy(intersection.point) : target.set(0, 0, 0);
  }
}
export class getIntersectionPropertyNormal extends NamedFunction2 {
  static type() {
    return "getIntersectionPropertyNormal";
  }
  func(intersection, target) {
    if (!intersection) {
      return target.set(0, 1, 0);
    }
    const face = intersection.face;
    if (face && face.normal) {
      target.copy(face.normal);
    } else {
      target.set(0, 1, 0);
    }
    return target;
  }
}
export class getIntersectionPropertyUv extends NamedFunction2 {
  static type() {
    return "getIntersectionPropertyUv";
  }
  func(intersection, target) {
    return (intersection == null ? void 0 : intersection.uv) ? target.copy(intersection.uv) : target.set(0, 0);
  }
}
