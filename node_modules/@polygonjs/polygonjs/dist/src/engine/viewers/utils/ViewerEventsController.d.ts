import { BaseViewerType } from '../_Base';
import { BaseSceneEventsControllerType } from '../../scene/utils/events/_BaseEventsController';
import { EventData, EventType } from '../../../core/event/EventData';
type ViewerEventListener = (e: Event) => void;
interface EventListenerWithData {
    listener: ViewerEventListener;
    data: EventData;
}
type ListenerByEventType = Map<EventType, EventListenerWithData>;
export declare class ViewerEventsController {
    protected viewer: BaseViewerType;
    protected _boundListenerMapByEventControllerType: Map<string, ListenerByEventType>;
    constructor(viewer: BaseViewerType);
    updateEvents(eventsController: BaseSceneEventsControllerType): void;
    camera(): import("three").Camera;
    canvas(): HTMLCanvasElement;
    init(): void;
    registeredEventTypes(): string[];
    dispose(): void;
}
export {};
