import type { TypedNode } from '../../../nodes/_Base';
import type { JsonImportDispatcher } from './Dispatcher';
import type { SceneJsonImporter } from '../../../io/json/import/Scene';
import { NodeContext } from '../../../poly/NodeContext';
import type { NodeJsonExporterData } from '../export/Node';
import { PolyDictionary } from '../../../../types/GlobalTypes';
type BaseNodeTypeWithIO = TypedNode<NodeContext, any>;
export declare class NodesJsonImporter<T extends BaseNodeTypeWithIO> {
    protected _node: T;
    protected dispatcher: JsonImportDispatcher;
    constructor(_node: T, dispatcher: JsonImportDispatcher);
    process_data(sceneImporter: SceneJsonImporter, data?: PolyDictionary<NodeJsonExporterData>): void;
}
export {};
