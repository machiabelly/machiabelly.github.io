import { PolyScene } from '../../../scene/PolyScene';
import { ManifestContent } from '../import/SceneData';
import { NodeJsonExporterData } from '../../json/export/Node';
import { SceneJsonExporterDataProperties } from '../../json/export/Scene';
import { PolyDictionary } from '../../../../types/GlobalTypes';
interface SceneDataManifestExporterData {
    properties: SceneJsonExporterDataProperties;
    root: NodeJsonExporterData;
    nodes: PolyDictionary<NodeJsonExporterData>;
}
export interface ChildDataContainer {
    childName: string;
    childData: NodeJsonExporterData;
    nodeFullPath: string;
}
export declare class SceneDataManifestExporter {
    readonly scene: PolyScene;
    private _manifestContent;
    private _data;
    constructor(scene: PolyScene);
    data(): Promise<{
        sceneData: SceneDataManifestExporterData;
        manifest: ManifestContent;
    }>;
    private _saveNodeData;
}
export {};
