import { Object3D } from 'three';
import { Constructor, ConvertToStrings } from '../../../../../types/GlobalTypes';
import { BaseRayObjectIntersectionsController } from './_BaseRayObjectIntersectionsController';
import { ObjectOptions, GPUOptions, CPUOptions, PriorityOptions, ButtonAndModifierOptions, ButtonAndModifierOptionsAsString } from './Common';
interface ClickOptions {
    maxCursorMoveDistance: number;
    maxDuration: number;
    callback: () => void;
}
export interface ObjectToClickOptions extends ObjectOptions {
    click: ClickOptions;
    config: ButtonAndModifierOptions;
}
export interface ObjectToClickOptionsAsString {
    priority: ConvertToStrings<PriorityOptions>;
    cpu?: ConvertToStrings<CPUOptions>;
    gpu?: ConvertToStrings<GPUOptions>;
    click: ConvertToStrings<ClickOptions>;
    config: ButtonAndModifierOptionsAsString;
}
export declare function ClickParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param max cursor move distance */
        maxCursorMoveDistance: import("../../../../nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.FLOAT>;
        /** @param max duration */
        maxDuration: import("../../../../nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
    };
} & TBase;
export declare class RayObjectIntersectionsClickController extends BaseRayObjectIntersectionsController {
    protected _propertiesListByObject: Map<Object3D, ObjectToClickOptions[]>;
    protected _intersectedStateOnPointerdownByObject: Map<Object3D, boolean>;
    protected _intersectedStateOnPointerupByObject: Map<Object3D, boolean>;
    private _objectsMatchingEventConfig;
    private _objectsIntersectedOnPointerdown;
    private _cursorMoveMonitor;
    private _pointerdownEvent;
    private _pointerdownReceivedAt;
    private _bound;
    onPointerdown(event: Readonly<PointerEvent | MouseEvent | TouchEvent>): void;
    private _onPointerup;
}
export {};
