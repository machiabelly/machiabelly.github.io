"use strict";
import { BaseMethod } from "./_Base";
export class ObjectExpression extends BaseMethod {
  static requiredArguments() {
    return [
      ["string", "path to node"],
      ["string", "attribute name"],
      ["index", "object index"]
    ];
  }
  findDependency(args) {
    return this.createDependencyFromIndexOrPath(args);
  }
  processArguments(args) {
    return new Promise(async (resolve, reject) => {
      if (args.length == 2 || args.length == 3) {
        const indexOrPath = args[0];
        const attribName = args[1];
        const objectIndex = args[2] || 0;
        let container = null;
        try {
          container = await this.getReferencedNodeContainer(indexOrPath);
        } catch (e) {
          reject(e);
        }
        if (container) {
          const value = this._get_value_from_container(container, attribName, objectIndex);
          resolve(value);
        }
      } else {
        console.warn(`${args.length} given when 2 or 3 expected`);
        resolve(0);
      }
    });
  }
  _get_value_from_container(container, attrib_name, point_index) {
    const core_group = container.coreContent();
    if (core_group) {
      const coreObject = core_group.allCoreObjects()[point_index];
      if (coreObject) {
        return coreObject.attribValue(attrib_name);
      } else {
        return 0;
      }
    } else {
      return null;
    }
  }
}
