"use strict";
import { AutoFilter } from "tone/build/esm/effect/AutoFilter";
const DEFAULTS = {
  baseFrequency: 200,
  // depth: 1,
  // frequency: 1,
  octaves: 2.6
  // type: 'sine',
  // wet: 1,
};
import { TypedAudioNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { effectParamsOptions } from "./utils/EffectsController";
const paramCallback = (node) => {
  AutoFilterAudioNode.PARAM_CALLBACK_updateEffect(node);
};
class AutoFilterAudioParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param baseFrequency */
    this.baseFrequency = ParamConfig.FLOAT(DEFAULTS.baseFrequency, {
      range: [0, 1e3],
      rangeLocked: [true, false],
      ...effectParamsOptions(paramCallback)
    });
    /** @param octaves */
    this.octaves = ParamConfig.FLOAT(DEFAULTS.octaves, {
      range: [0, 10],
      rangeLocked: [true, false],
      ...effectParamsOptions(paramCallback)
    });
  }
  // TODO: promote filter params
}
const ParamsConfig = new AutoFilterAudioParamsConfig();
export class AutoFilterAudioNode extends TypedAudioNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "autoFilter";
  }
  initializeNode() {
    this.io.inputs.setCount(1);
  }
  cook(inputContents) {
    const audioBuilder = inputContents[0];
    const effect = this._effect();
    const inputNode = audioBuilder.audioNode();
    if (inputNode) {
      inputNode.connect(effect);
    }
    audioBuilder.setAudioNode(effect);
    this.setAudioBuilder(audioBuilder);
  }
  _effect() {
    return this.__effect__ = this.__effect__ || this._createEffect();
  }
  _createEffect() {
    return new AutoFilter({
      baseFrequency: this.pv.baseFrequency,
      octaves: this.pv.octaves
    });
  }
  static PARAM_CALLBACK_updateEffect(node) {
    node._updateEffect();
  }
  _updateEffect() {
    const effect = this._effect();
    effect.baseFrequency = this.pv.baseFrequency;
    effect.octaves = this.pv.octaves;
  }
}
