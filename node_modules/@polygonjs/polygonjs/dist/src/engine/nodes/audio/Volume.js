"use strict";
import { TypedAudioNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { effectParamsOptions } from "./utils/EffectsController";
import { Volume } from "tone/build/esm/component/channel/Volume";
const VOLUME_DEFAULTS = {
  volume: 0
};
const paramCallback = (node) => {
  VolumeAudioNode.PARAM_CALLBACK_updateEffect(node);
};
class VolumeAudioParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param volume */
    this.volume = ParamConfig.FLOAT(VOLUME_DEFAULTS.volume, {
      range: [-20, 20],
      rangeLocked: [false, false],
      ...effectParamsOptions(paramCallback)
    });
  }
}
const ParamsConfig = new VolumeAudioParamsConfig();
export class VolumeAudioNode extends TypedAudioNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "volume";
  }
  initializeNode() {
    this.io.inputs.setCount(1);
  }
  cook(inputContents) {
    const audioBuilder = inputContents[0];
    const effect = this._effect();
    const inputNode = audioBuilder.audioNode();
    if (inputNode) {
      inputNode.connect(effect);
    }
    audioBuilder.setAudioNode(effect);
    this.setAudioBuilder(audioBuilder);
  }
  _effect() {
    return this.__effect__ = this.__effect__ || this._createEffect();
  }
  _createEffect() {
    return new Volume({
      volume: this.pv.volume
    });
  }
  static PARAM_CALLBACK_updateEffect(node) {
    node._updateEffect();
  }
  _updateEffect() {
    const effect = this._effect();
    effect.volume.linearRampToValueAtTime(this.pv.volume, "+1");
  }
}
