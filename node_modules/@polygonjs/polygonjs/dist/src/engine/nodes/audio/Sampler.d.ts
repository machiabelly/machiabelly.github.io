/**
 * allows to import multiple audio files to use as samples
 *
 *
 */
import { TypedAudioNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { AudioBuilder } from '../../../core/audio/AudioBuilder';
import { SamplerOptions } from 'tone/build/esm/instrument/Sampler';
import { AudioType } from '../../poly/registers/nodes/types/Audio';
export declare const SAMPLER_DEFAULTS: Partial<SamplerOptions>;
declare class SamplerAudioParamsConfig extends NodeParamsConfig {
    /** @param map of notes to load */
    urlsMap: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param base url */
    baseUrl: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param extension */
    extension: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
}
export declare class SamplerAudioNode extends TypedAudioNode<SamplerAudioParamsConfig> {
    paramsConfig: SamplerAudioParamsConfig;
    static type(): AudioType;
    initializeNode(): void;
    dispose(): void;
    cook(inputContents: AudioBuilder[]): Promise<void>;
}
export {};
