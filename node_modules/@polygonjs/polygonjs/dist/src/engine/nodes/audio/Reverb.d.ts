/**
 * Simple convolution created with decaying noise.
 * Generates an Impulse Response Buffer
 * with Tone.Offline then feeds the IR into ConvolverNode.
 * The impulse response generation is async, so you have
 * to wait until [[ready]] resolves before it will make a sound.
 *
 * See description on [Tone.js](https://tonejs.github.io/)
 *
 */
import { TypedAudioNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { AudioBuilder } from '../../../core/audio/AudioBuilder';
declare class ReverbAudioParamsConfig extends NodeParamsConfig {
    /** @param The duration of the reverb. */
    decay: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** The amount of time before the reverb is fully ramped in */
    preDelay: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class ReverbAudioNode extends TypedAudioNode<ReverbAudioParamsConfig> {
    paramsConfig: ReverbAudioParamsConfig;
    static type(): string;
    initializeNode(): void;
    cook(inputContents: AudioBuilder[]): void;
    private __effect__;
    private _effect;
    private _createEffect;
    static PARAM_CALLBACK_updateEffect(node: ReverbAudioNode): void;
    private _updateEffect;
}
export {};
