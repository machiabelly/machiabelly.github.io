/**
 * A subnet to create audio nodes
 *
 */
import { ParamLessBaseManagerObjNode } from './_BaseManager';
import { NodeContext, NetworkNodeType } from '../../poly/NodeContext';
import { AudioNodeChildrenMap } from '../../poly/registers/nodes/Audio';
import { BaseAudioNodeType } from '../audio/_Base';
import { Constructor, valueof } from '../../../types/GlobalTypes';
import { NodeCreateOptions } from '../utils/hierarchy/ChildrenController';
declare class BaseAudioObjNode extends ParamLessBaseManagerObjNode {
    static type(): NetworkNodeType;
    protected _childrenControllerContext: NodeContext;
    createNode<S extends keyof AudioNodeChildrenMap>(node_class: S, options?: NodeCreateOptions): AudioNodeChildrenMap[S];
    createNode<K extends valueof<AudioNodeChildrenMap>>(node_class: Constructor<K>, options?: NodeCreateOptions): K;
    children(): BaseAudioNodeType[];
    nodesByType<K extends keyof AudioNodeChildrenMap>(type: K): AudioNodeChildrenMap[K][];
}
export declare class AudioNetworkObjNode extends BaseAudioObjNode {
    readonly renderOrder: number;
}
export {};
