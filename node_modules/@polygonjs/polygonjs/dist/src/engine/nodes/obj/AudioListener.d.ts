/**
 * Creates an audio listener.
 *
 * @remarks
 * You typically want to parent this under the camera.
 *
 */
import { TypedObjNode } from './_Base';
import { TransformController } from './utils/TransformController';
import { FlagsControllerD } from '../utils/FlagsController';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { HierarchyController } from './utils/HierarchyController';
import { ObjType } from '../../poly/registers/nodes/types/Obj';
import { CoreAudioListener } from '../../../core/audio/AudioListener';
declare const AudioListenerParamConfig_base: {
    new (...args: any[]): {
        transform: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
        keepPosWhenParenting: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
        rotationOrder: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
        t: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
        r: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
        s: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
        scale: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
        matrixAutoUpdate: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
        updateTransformFromObject: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
    };
} & typeof NodeParamsConfig;
declare class AudioListenerParamConfig extends AudioListenerParamConfig_base {
    audio: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    /** @param soundOn */
    soundOn: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param volume */
    masterVolume: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param ensures the transform of the audio listener is updated on very frame */
    listenerTransformAutoUpdate: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class AudioListenerObjNode extends TypedObjNode<CoreAudioListener, AudioListenerParamConfig> {
    paramsConfig: AudioListenerParamConfig;
    static type(): ObjType;
    readonly hierarchyController: HierarchyController;
    readonly transformController: TransformController;
    readonly flags: FlagsControllerD;
    createObject(): CoreAudioListener;
    initializeNode(): void;
    dispose(): void;
    toggleSound(): void;
    private _setPositionalAudioNodesDirty;
    cook(): void;
    private _validateUniq;
    private _updateAudioListener;
    private _updateViewers;
    private _updateListenerAndViewers;
    static PARAM_CALLBACK_update(node: AudioListenerObjNode): void;
    private static _eventsAdded;
    private static _audioActivated;
    private _onpointerdown;
    private _onkeypress;
    static soundActivated(): boolean;
    soundActivated(): boolean;
    activateSound(): Promise<void>;
    private _boundEvents;
    addAudioActivationEvents(): void;
    private _removeAudioActivationEvents;
}
export {};
