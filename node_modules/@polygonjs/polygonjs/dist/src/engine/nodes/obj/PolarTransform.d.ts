/**
 * Allows easy position of lights, or any object around another one.
 *
 * @remarks
 * This node transforms its children with latitude and longitude controls, instead of typical translate and rotate. It makes it more intuitive to position objects such as lights.
 *
 * Note that there is an equivalent node at the SOP level
 *
 */
import { TypedObjNode } from './_Base';
import { Group } from 'three';
import { FlagsControllerD } from '../utils/FlagsController';
import { HierarchyController } from './utils/HierarchyController';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
declare class PolarTransformObjParamConfig extends NodeParamsConfig {
    /** @param center of the transform */
    center: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
    /** @param moves the objects along the longitude, which is equivalent to a rotation on the y axis */
    longitude: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param moves the objects along the latitude, which is equivalent to a rotation on the z or x axis */
    latitude: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param moves the point aways from the center */
    depth: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class PolarTransformObjNode extends TypedObjNode<Group, PolarTransformObjParamConfig> {
    paramsConfig: PolarTransformObjParamConfig;
    static type(): string;
    readonly hierarchyController: HierarchyController;
    readonly flags: FlagsControllerD;
    private _helper;
    createObject(): Group<import("three").Object3DEventMap>;
    initializeNode(): void;
    private _updateHelperHierarchy;
    private _displayedHelper;
    private __axisHelper__;
    private _axisHelper;
    private _createAxisHelper;
    private __polarGridHelper__;
    private _polarGridHelper;
    private _createPolarGridHelper;
    private _createHelper;
    private _cook_main_without_inputs_when_dirty_bound;
    private _cook_main_without_inputs_when_dirty;
    private _centerMatrix;
    private _longitudeMatrix;
    private _latitudeMatrix;
    private _depthMatrix;
    private _fullMatrix;
    private _decomposed;
    cook(): void;
    private _updateHelper;
}
export {};
