"use strict";
import { CADSopNode } from "./_BaseCAD";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { step } from "../../../core/geometry/modules/cad/CadConstant";
import { CadLoader } from "../../../core/geometry/modules/cad/CadLoader";
import { cadGeom2dCurveTranslate } from "../../../core/geometry/modules/cad/toObject3D/CadGeom2dCurve";
import { SopType } from "../../poly/registers/nodes/types/Sop";
import { CadGC } from "../../../core/geometry/modules/cad/CadCommon";
class CADCircle2DSopParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param radius */
    this.radius = ParamConfig.FLOAT(1, {
      range: [0, 2],
      rangeLocked: [true, false],
      step
    });
    /** @param center */
    this.center = ParamConfig.VECTOR2([0, 0]);
  }
}
const ParamsConfig = new CADCircle2DSopParamsConfig();
export class CADCircle2DSopNode extends CADSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return SopType.CAD_CIRCLE_2D;
  }
  async cook(inputCoreGroups) {
    const oc = await CadLoader.core(this);
    CadGC.withGC((r) => {
      const axis = r(new oc.gp_Ax22d_1());
      const circle = new oc.Geom2d_Circle_3(axis, this.pv.radius);
      cadGeom2dCurveTranslate(circle, this.pv.center);
      this.setCADGeom2dCurve(circle);
    });
  }
}
