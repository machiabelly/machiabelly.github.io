/**
 * Creates a plane visible by a mapbox camera.
 *
 * @remarks
 *
 * See [sop/mapboxCamera](/docs/nodes/sop/mapboxCamera) for info on how to setup mapbox to use with Polygonjs
 *
 */
import { BufferGeometry } from 'three';
import mapboxgl from 'mapbox-gl';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { TypedSopNode } from './_Base';
declare class MapboxPlaneSopParamsConfig extends NodeParamsConfig {
    /** @param camera lng lat */
    /** @param type of plane (grid or hexagons) */
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param plane resolution */
    resolution: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param multiplies the size of the plane. This can be useful to scale down the plane. While it would cover a smaller part of the view, it would be faster to create  */
    sizeMult: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param toggle on to make sure the plane will cover the full view */
    fullView: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param do not create polygons, only points */
    asPoints: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class MapboxPlaneSopNode extends TypedSopNode<MapboxPlaneSopParamsConfig> {
    paramsConfig: MapboxPlaneSopParamsConfig;
    static type(): string;
    private _hexagonsController;
    private transformer;
    cook(): Promise<void>;
    _buildPlane(map: mapboxgl.Map): BufferGeometry<import("three").NormalBufferAttributes> | undefined;
    private _mirrorLngLat;
    private _asHexagons;
}
export {};
