/**
 * Adds points or creates lines.
 *
 * @remarks
 * The add node can be used to add a single or multiple points.
 * If given points as input, it can also connect those points with a line.
 *
 */
import { TypedSopNode } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
declare class AddSopParamsConfig extends NodeParamsConfig {
    /** @param toggle to create points */
    createPoint: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param define the number of points to create */
    pointsCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param the position of the created points */
    position: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
    /** @param toggle on to connect the points from the input geometry */
    connectInputPoints: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param check if the last point is connected */
    connectToLastPoint: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class AddSopNode extends TypedSopNode<AddSopParamsConfig> {
    paramsConfig: AddSopParamsConfig;
    static type(): SopType;
    initializeNode(): void;
    private _operation;
    cook(input_contents: CoreGroup[]): void;
}
export {};
