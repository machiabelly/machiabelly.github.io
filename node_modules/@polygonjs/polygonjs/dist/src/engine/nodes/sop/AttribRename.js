"use strict";
import { TypedSopNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { ATTRIBUTE_CLASSES, AttribClassMenuEntries } from "../../../core/geometry/Constant";
import { AttribRenameSopOperation } from "../../operations/sop/AttribRename";
const DEFAULT = AttribRenameSopOperation.DEFAULT_PARAMS;
class AttribRenameSopParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param the group this applies to */
    this.group = ParamConfig.STRING(DEFAULT.group);
    /** @param class of the attribute to rename (object or geometry) */
    this.class = ParamConfig.INTEGER(DEFAULT.class, {
      menu: {
        entries: AttribClassMenuEntries
      }
    });
    /** @param old attribute name */
    this.oldName = ParamConfig.STRING(DEFAULT.oldName);
    /** @param new attribute name */
    this.newName = ParamConfig.STRING(DEFAULT.newName);
  }
}
const ParamsConfig = new AttribRenameSopParamsConfig();
export class AttribRenameSopNode extends TypedSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "attribRename";
  }
  initializeNode() {
    this.io.inputs.setCount(1);
    this.io.inputs.initInputsClonedState(AttribRenameSopOperation.INPUT_CLONED_STATE);
  }
  setAttribClass(attribClass) {
    this.p.class.set(ATTRIBUTE_CLASSES.indexOf(attribClass));
  }
  attribClass() {
    return ATTRIBUTE_CLASSES[this.pv.class];
  }
  cook(inputCoreGroups) {
    this._operation = this._operation || new AttribRenameSopOperation(this._scene, this.states, this);
    const coreGroup = this._operation.cook(inputCoreGroups, this.pv);
    this.setCoreGroup(coreGroup);
  }
}
