/**
 * Adds the name of notes into a string attribute.
 *
 * @remarks
 * This node is designed to work with audio nodes, and the event/raycast
 *
 */
import { TypedSopNode } from './_Base';
import { AttribClass } from '../../../core/geometry/Constant';
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
declare class AudioNotesSopParamsConfig extends NodeParamsConfig {
    /** @param the attribute class (geometry or object) */
    class: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param attribute name */
    name: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param adds an octave attribute */
    toctave: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param octave attribute name */
    octaveName: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param octave to start iterating the notes from */
    startOctave: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param last octave up to which the nodes will be added */
    endOctave: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param behavior if there are more objects than notes within the selected octave range */
    outOfRangeBehavior: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class AudioNotesSopNode extends TypedSopNode<AudioNotesSopParamsConfig> {
    paramsConfig: AudioNotesSopParamsConfig;
    static type(): SopType;
    initializeNode(): void;
    private _operation;
    cook(input_contents: CoreGroup[]): void;
    setAttribClass(attribClass: AttribClass): void;
    attribClass(): AttribClass;
}
export {};
