/**
 * Converts an input geometry to tetrahedrons
 *
 *
 *
 */
import { TetSopNode } from './_BaseTet';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
import { CoreGroup } from '../../../core/geometry/Group';
declare class TetrahedralizeSopParamsConfig extends NodeParamsConfig {
    fuseDist: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    jitter: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    innerPointsResolution: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    minQuality: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    stepByStep: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    step: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    deleteOutsideTets: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class TetrahedralizeSopNode extends TetSopNode<TetrahedralizeSopParamsConfig> {
    paramsConfig: TetrahedralizeSopParamsConfig;
    static type(): SopType;
    initializeNode(): void;
    cook(inputCoreGroups: CoreGroup[]): void;
}
export {};
