/**
 * allows the viewer created by this camera to be accessible in WebXR for VR (virtual reality)
 *
 *
 */
import { TypedSopNode } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { HierarchyParamConfigAll } from '../utils/params/ParamsConfig';
import { CameraSopNodeType } from '../../poly/NodeContext';
declare const CameraWebXRVRSopParamsConfig_base: {
    new (...args: any[]): {
        localFloor: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
        boundedFloor: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
        handTracking: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
        layers: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
        overrideReferenceSpaceType: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
        referenceSpaceType: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    };
} & typeof HierarchyParamConfigAll;
declare class CameraWebXRVRSopParamsConfig extends CameraWebXRVRSopParamsConfig_base {
}
export declare class CameraWebXRVRSopNode extends TypedSopNode<CameraWebXRVRSopParamsConfig> {
    readonly paramsConfig: CameraWebXRVRSopParamsConfig;
    static type(): CameraSopNodeType;
    protected initializeNode(): void;
    private _operation;
    cook(inputCoreGroups: CoreGroup[]): void;
}
export {};
