/**
 * A subnet to create POST PROCESS nodes
 *
 */
import { Constructor, valueof } from '../../../types/GlobalTypes';
import { BaseNetworkSopNode } from './_BaseManager';
import { NetworkNodeType, NodeContext } from '../../poly/NodeContext';
import { PostNodeChildrenMap } from '../../poly/registers/nodes/Post';
import { BasePostProcessNodeType } from '../post/_Base';
import { DisplayNodeController } from '../utils/DisplayNodeController';
import { EffectComposerController, PostProcessNetworkParamsConfig } from '../post/utils/EffectComposerController';
import { NodeCreateOptions } from '../utils/hierarchy/ChildrenController';
export declare class PostProcessNetworkSopNode extends BaseNetworkSopNode<PostProcessNetworkParamsConfig> {
    paramsConfig: PostProcessNetworkParamsConfig;
    static type(): NetworkNodeType;
    readonly effectsComposerController: EffectComposerController;
    readonly displayNodeController: DisplayNodeController;
    protected _childrenControllerContext: NodeContext;
    createNode<S extends keyof PostNodeChildrenMap>(node_class: S, options?: NodeCreateOptions): PostNodeChildrenMap[S];
    createNode<K extends valueof<PostNodeChildrenMap>>(node_class: Constructor<K>, options?: NodeCreateOptions): K;
    children(): BasePostProcessNodeType[];
    nodesByType<K extends keyof PostNodeChildrenMap>(type: K): PostNodeChildrenMap[K][];
}
