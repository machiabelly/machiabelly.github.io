import { TypedSopNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { CoreGroup } from '../../../core/geometry/Group';
import { SopTypeFile } from '../../poly/registers/nodes/types/Sop';
declare class FileGLTFParamsConfig extends NodeParamsConfig {
    /** @param url to load the geometry from */
    url: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param uses draco compression */
    draco: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param uses ktx2 compression */
    ktx2: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param sets the matrixAutoUpdate attribute for the objects loaded */
    matrixAutoUpdate: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param reload the geometry */
    reload: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
}
export declare class FileGLTFSopNode extends TypedSopNode<FileGLTFParamsConfig> {
    paramsConfig: FileGLTFParamsConfig;
    static type(): SopTypeFile;
    dispose(): void;
    private _operation;
    private operation;
    cook(inputCoreGroups: CoreGroup[]): Promise<void>;
    static PARAM_CALLBACK_reload(node: FileGLTFSopNode): void;
    private _paramCallbackReload;
}
export {};
