/**
 * Accumulates attributes based on audio analyser nodes
 *
 *
 */
import { TypedSopNode } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
declare class AttribAudioAnalyserSopParamsConfig extends NodeParamsConfig {
    /** @param the point or object index this applies to */
    index: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param values size */
    valuesSize: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param sets if audioNode0 is read */
    active0: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param attribute name */
    attrib0: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param audio node to read data from */
    audioNode0: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
    /** @param sets if audioNode0 is read */
    active1: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param attribute name */
    attrib1: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param audio node to read data from */
    audioNode1: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
    /** @param sets if audioNode0 is read */
    active2: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param attribute name */
    attrib2: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param audio node to read data from */
    audioNode2: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
}
export declare class AttribAudioAnalyserSopNode extends TypedSopNode<AttribAudioAnalyserSopParamsConfig> {
    paramsConfig: AttribAudioAnalyserSopParamsConfig;
    static type(): string;
    initializeNode(): void;
    cook(inputCoreGroups: CoreGroup[]): void;
    dispose(): void;
    private _updateGeometry;
    private _updateWithParamSet;
    private _paramSetByIndex;
    private _initParamsByIndex;
    private _registerOnTickHook;
    private _unRegisterOnTickHook;
    private _tickCallbackName;
}
export {};
