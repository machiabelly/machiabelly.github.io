"use strict";
import { TypedSopNode } from "./_Base";
import { LookAtSopOperation } from "../../operations/sop/LookAt";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { SopType } from "../../poly/registers/nodes/types/Sop";
const DEFAULT = LookAtSopOperation.DEFAULT_PARAMS;
class LookAtSopParamConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param target */
    this.target = ParamConfig.VECTOR3(DEFAULT.target);
    /** @param up vector */
    this.up = ParamConfig.VECTOR3(DEFAULT.up);
    /** @param lerp */
    this.lerp = ParamConfig.FLOAT(DEFAULT.lerp, {
      range: [0, 1],
      rangeLocked: [true, true]
    });
    /** @param invertDirection */
    this.invertDirection = ParamConfig.BOOLEAN(DEFAULT.invertDirection);
  }
}
const ParamsConfig = new LookAtSopParamConfig();
export class LookAtSopNode extends TypedSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return SopType.LOOK_AT;
  }
  initializeNode() {
    this.io.inputs.setCount(1);
    this.io.inputs.initInputsClonedState(LookAtSopOperation.INPUT_CLONED_STATE);
  }
  cook(inputCoreGroups) {
    this._operation = this._operation || new LookAtSopOperation(this.scene(), this.states, this);
    const coreGroup = this._operation.cook(inputCoreGroups, this.pv);
    this.setCoreGroup(coreGroup);
  }
}
