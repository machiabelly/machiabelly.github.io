/**
 * Assigns actor nodes to input objects
 *
 *
 */
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
import { TypedActorSopNode } from './_BaseActor';
declare class ActorSopParamsConfig extends NodeParamsConfig {
    /** @param select which objects this applies the actor behavior to */
    group: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param build actor from child nodes */
    useThisNode: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param actor node */
    node: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
}
export declare class ActorSopNode extends TypedActorSopNode<ActorSopParamsConfig> {
    readonly paramsConfig: ActorSopParamsConfig;
    static type(): SopType;
    protected initializeNode(): void;
    cook(inputCoreGroups: CoreGroup[]): Promise<void>;
    private _findActorNode;
}
export {};
