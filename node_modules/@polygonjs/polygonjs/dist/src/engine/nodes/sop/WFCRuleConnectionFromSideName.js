"use strict";
import { TypedSopNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { SopType } from "../../poly/registers/nodes/types/Sop";
import { InputCloneMode } from "../../poly/InputCloneMode";
import { ALL_SIDES } from "../../../core/wfc/WFCCommon";
import { CoreWFCTileAttribute } from "../../../core/wfc/WFCAttributes";
import { createRuleObject } from "../../../core/wfc/WFCRule";
import { stringMatchMask } from "../../../core/String";
class WFCRuleConnectionFromSideNameSopParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param src tile id */
    this.srcTileId = ParamConfig.STRING("*");
    /** @param dest tile id */
    this.destTileId = ParamConfig.STRING("*");
    /** @param side name */
    this.sideName = ParamConfig.STRING("*");
  }
}
const ParamsConfig = new WFCRuleConnectionFromSideNameSopParamsConfig();
export class WFCRuleConnectionFromSideNameSopNode extends TypedSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return SopType.WFC_RULE_CONNECTION_FROM_SIDE_NAME;
  }
  initializeNode() {
    this.io.inputs.setCount(1);
    this.io.inputs.initInputsClonedState(InputCloneMode.FROM_NODE);
  }
  async cook(inputCoreGroups) {
    const coreGroup0 = inputCoreGroups[0];
    const tileObjects = coreGroup0.threejsObjects();
    const outputObjects = [...tileObjects];
    const { srcTileId, destTileId, sideName } = this.pv;
    const srcTileObjects = tileObjects.filter(
      (tileObject) => stringMatchMask(CoreWFCTileAttribute.getTileId(tileObject), srcTileId)
    );
    const destTileObjects = tileObjects.filter(
      (tileObject) => stringMatchMask(CoreWFCTileAttribute.getTileId(tileObject), destTileId)
    );
    for (const tile0 of srcTileObjects) {
      const tileId0 = CoreWFCTileAttribute.getTileId(tile0);
      for (const side0 of ALL_SIDES) {
        const sideName0 = CoreWFCTileAttribute.getSideName(tile0, side0);
        if (sideName0 && stringMatchMask(sideName0, sideName)) {
          for (const tile1 of destTileObjects) {
            const tileId1 = CoreWFCTileAttribute.getTileId(tile1);
            for (const side1 of ALL_SIDES) {
              const sideName1 = CoreWFCTileAttribute.getSideName(tile1, side1);
              if (sideName0 == sideName1) {
                const ruleObject = createRuleObject({
                  id0: tileId0,
                  id1: tileId1,
                  side0,
                  side1
                });
                outputObjects.push(ruleObject);
              }
            }
          }
        }
      }
    }
    this.setObjects(outputObjects);
  }
}
