/**
 * Rename an attribute
 *
 *
 */
import { TypedSopNode } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { AttribClass } from '../../../core/geometry/Constant';
declare class AttribRenameSopParamsConfig extends NodeParamsConfig {
    /** @param the group this applies to */
    group: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param class of the attribute to rename (object or geometry) */
    class: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param old attribute name */
    oldName: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param new attribute name */
    newName: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
}
export declare class AttribRenameSopNode extends TypedSopNode<AttribRenameSopParamsConfig> {
    paramsConfig: AttribRenameSopParamsConfig;
    static type(): string;
    initializeNode(): void;
    setAttribClass(attribClass: AttribClass): void;
    attribClass(): AttribClass;
    private _operation;
    cook(inputCoreGroups: CoreGroup[]): void;
}
export {};
