/**
 * Creates CSS2DObjects.
 *
 * @remarks
 * This is very useful to create 2D html labels that would be positioned at specific points in the 3D world.
 * Note that the camera must be configured to use a CSS2DRenderer to display them
 *
 *
 */
import { TypedSopNode } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
import { Object3D } from 'three';
declare class CSS2DObjectSopParamsConfig extends NodeParamsConfig {
    /** @param toggles on if attributes are copied from the geometry to the html element */
    copyAttributes: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param names of the attributes that are copied from the geometry to the html element */
    attributesToCopy: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param defines if the vertex id attribute is used to create the html id attribute */
    overrideId: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param value of the html element id attribute */
    id: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param defines if the vertex class attribute is used to create the html class */
    overrideClassName: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param value of the html class */
    className: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param defines if the vertex html attribute is used to create the html content */
    overrideHTML: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param value of the html content */
    html: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
}
export declare class CSS2DObjectSopNode extends TypedSopNode<CSS2DObjectSopParamsConfig> {
    paramsConfig: CSS2DObjectSopParamsConfig;
    static type(): SopType;
    initializeNode(): void;
    cook(inputCoreGroups: CoreGroup[]): void;
    private _addAttributes;
    updateObjectOnAdd(object: Object3D, parent: Object3D): void;
}
export {};
