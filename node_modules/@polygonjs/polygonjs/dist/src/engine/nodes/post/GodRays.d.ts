import { TypedPostNode, TypedPostNodeContext } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { EffectPass } from 'postprocessing';
declare class GodRaysPostParamsConfig extends NodeParamsConfig {
    /** @param objects to emit godrays from. Note that while the mask can resolve multiple objects, only the first mesh or points will be used */
    objectMask: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param samples */
    samples: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param density */
    density: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param decay */
    decay: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param weight */
    weight: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param exposure */
    exposure: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param blur */
    blur: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param kernel size */
    kernelSize: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param resolutionScale */
    resolutionScale: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param effect opacity */
    opacity: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param render mode */
    blendFunction: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class GodRaysPostNode extends TypedPostNode<EffectPass, GodRaysPostParamsConfig> {
    paramsConfig: GodRaysPostParamsConfig;
    static type(): string;
    private _rendererSize;
    createPass(context: TypedPostNodeContext): EffectPass;
    updatePass(pass: EffectPass): void;
}
export {};
