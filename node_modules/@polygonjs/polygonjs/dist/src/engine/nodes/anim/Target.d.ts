/**
 * Target of the animation
 *
 *
 */
import { TypedAnimNode } from './_Base';
import { TimelineBuilder } from '../../../core/animation/TimelineBuilder';
export declare enum AnimTargetNodeTargetType {
    SCENE_GRAPH = "scene graph",
    NODE = "node"
}
export declare const ANIM_TARGET_TYPES: AnimTargetNodeTargetType[];
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { AnimType } from '../../poly/registers/nodes/types/Anim';
declare class TargetAnimParamsConfig extends NodeParamsConfig {
    /** @param sets if the target is a Polygonjs node, or a THREE object */
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param if set to a Polygonjs node, this is the node path */
    nodePath: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
    /** @param if set to a THREE object, this is a mask to find the objects */
    objectMask: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param sets if the matrix should be updated as the animation progresses */
    updateMatrix: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param prints which objects are targeted by this node, for debugging */
    printResolve: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
}
export declare class TargetAnimNode extends TypedAnimNode<TargetAnimParamsConfig> {
    paramsConfig: TargetAnimParamsConfig;
    static type(): AnimType;
    initializeNode(): void;
    cook(inputCoreContents: TimelineBuilder[]): void;
    setTargetType(targetType: AnimTargetNodeTargetType): void;
    private _create_target;
    private _set_update_callback;
    static PARAM_CALLBACK_print_resolve(node: TargetAnimNode): void;
    private print_resolve;
}
export {};
