/**
 * A subnet to create ROP nodes
 *
 */
import { Constructor, valueof } from '../../../types/GlobalTypes';
import { ParamLessBaseNetworkRopNode } from './_BaseManager';
import { NodeContext, NetworkNodeType } from '../../poly/NodeContext';
import { RopNodeChildrenMap } from '../../poly/registers/nodes/Rop';
import { BaseRopNodeType } from './_Base';
import { NodeCreateOptions } from '../utils/hierarchy/ChildrenController';
export declare class RenderersNetworkRopNode extends ParamLessBaseNetworkRopNode {
    static type(): NetworkNodeType;
    protected _childrenControllerContext: NodeContext;
    createNode<S extends keyof RopNodeChildrenMap>(node_class: S, options?: NodeCreateOptions): RopNodeChildrenMap[S];
    createNode<K extends valueof<RopNodeChildrenMap>>(node_class: Constructor<K>, options?: NodeCreateOptions): K;
    children(): BaseRopNodeType[];
    nodesByType<K extends keyof RopNodeChildrenMap>(type: K): RopNodeChildrenMap[K][];
}
