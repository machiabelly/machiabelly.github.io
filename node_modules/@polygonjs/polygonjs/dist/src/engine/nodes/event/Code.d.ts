/**
 * processes input events with user-defined typescript.
 *
 *
 */
import { TypedEventNode } from './_Base';
import { EventContext } from '../../scene/utils/events/_BaseEventsController';
import { BaseCodeProcessor } from '../../../core/code/FunctionBuilderUtils';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
export declare class BaseCodeEventProcessor extends BaseCodeProcessor {
    protected node: CodeEventNode;
    constructor(node: CodeEventNode);
    get pv(): import("../utils/params/ParamsValueAccessor").ParamsValueAccessorType<CodeEventParamsConfig>;
    get p(): import("../utils/params/ParamsAccessor").ParamsAccessorType<CodeEventParamsConfig>;
    get io(): import("../utils/io/IOController").IOController<import("../../poly/NodeContext").NodeContext.EVENT>;
    initializeProcessor(): void;
    processTrigger0(eventContext: EventContext<Event>): void;
    processTrigger1(eventContext: EventContext<Event>): void;
    processTrigger2(eventContext: EventContext<Event>): void;
    processTrigger3(eventContext: EventContext<Event>): void;
    processTrigger4(eventContext: EventContext<Event>): void;
    dispatchEventToOutput(outputName: string, eventContext: EventContext<Event>): void;
}
declare class CodeEventParamsConfig extends NodeParamsConfig {
    codeTypescript: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    codeJavascript: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
}
export declare class CodeEventNode extends TypedEventNode<CodeEventParamsConfig> {
    paramsConfig: CodeEventParamsConfig;
    static BaseCodeEventProcessor: typeof BaseCodeEventProcessor;
    static type(): string;
    private _lastCompiledCode;
    private _processor;
    initializeNode(): void;
    private _processTrigger0;
    private _processTrigger1;
    private _processTrigger2;
    private _processTrigger3;
    private _processTrigger4;
    _dispatchEventToOutputFromProcessor(outputName: string, eventContext: EventContext<Event>): void;
    private _compileIfRequired;
    private _compile;
}
export {};
