/**
 * Updates the flags of specific nodes
 *
 * @remarks
 * This can be useful to show/hide objects, or to cook specific networks
 *
 *
 */
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { TypedEventNode } from './_Base';
import { EventContext } from '../../scene/utils/events/_BaseEventsController';
declare class SetFlagParamsConfig extends NodeParamsConfig {
    /** @param mask to select which nodes this can change the flags of */
    mask: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param toggle on to update the display flag */
    tdisplay: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param sets how the display flag will be updated (set to a value or toggle) */
    displayMode: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param new display flag state */
    display: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param toggle on to update the bypass flag */
    tbypass: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param sets how the bypass flag will be updated (set to a value or toggle) */
    bypassMode: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param new bypass flag state */
    bypass: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param button to trigger the node. Useful to debug */
    execute: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
}
export declare class SetFlagEventNode extends TypedEventNode<SetFlagParamsConfig> {
    paramsConfig: SetFlagParamsConfig;
    static type(): string;
    initializeNode(): void;
    processEvent(eventContext: EventContext<Event>): Promise<void>;
    private _updateNodeFlags;
    private _updateNodeDisplayFlag;
    private _updateNodeBypassFlag;
    static PARAM_CALLBACK_execute(node: SetFlagEventNode): void;
}
export {};
