"use strict";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { JsConnectionPointType, JsConnectionPoint } from "../utils/io/connections/Js";
import { BaseSDFJsNode } from "./_BaseSDF";
import { Poly } from "../../Poly";
import { JsType } from "../../poly/registers/nodes/types/Js";
const OUTPUT_NAME = "float";
class SDFPlaneJsParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    this.position = ParamConfig.VECTOR3([0, 0, 0], { hidden: true });
    this.center = ParamConfig.VECTOR3([0, 0, 0]);
    this.normal = ParamConfig.VECTOR3([0, 1, 0]);
    this.offset = ParamConfig.FLOAT(0, {
      range: [-1, 1],
      rangeLocked: [false, false]
    });
  }
}
const ParamsConfig = new SDFPlaneJsParamsConfig();
export class SDFPlaneJsNode extends BaseSDFJsNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return JsType.SDF_PLANE;
  }
  initializeNode() {
    super.initializeNode();
    this.io.outputs.setNamedOutputConnectionPoints([
      new JsConnectionPoint(OUTPUT_NAME, JsConnectionPointType.FLOAT)
    ]);
  }
  setLines(shadersCollectionController) {
    const position = this.position(shadersCollectionController);
    const center = this.variableForInputParam(shadersCollectionController, this.p.center);
    const normal = this.variableForInputParam(shadersCollectionController, this.p.normal);
    const offset = this.variableForInputParam(shadersCollectionController, this.p.offset);
    const out = this.jsVarName(OUTPUT_NAME);
    const func = Poly.namedFunctionsRegister.getFunction("SDFPlane", this, shadersCollectionController);
    shadersCollectionController.addBodyOrComputed(this, [
      {
        dataType: JsConnectionPointType.FLOAT,
        varName: out,
        value: func.asString(position, center, normal, offset)
      }
    ]);
  }
}
