/**
 * get an object's children attributes and returns an array
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsConnectionPointType, ParamConvertibleJsType } from '../utils/io/connections/Js';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare enum GetChildrenAttributesInputName {
    attribName = "attribName"
}
declare class GetChildrenAttributesJsParamsConfig extends NodeParamsConfig {
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class GetChildrenAttributesJsNode extends TypedJsNode<GetChildrenAttributesJsParamsConfig> {
    readonly paramsConfig: GetChildrenAttributesJsParamsConfig;
    static type(): string;
    static readonly OUTPUT_NAME = "val";
    initializeNode(): void;
    private _currentConnectionType;
    private _nextAttribName;
    paramDefaultValue(name: GetChildrenAttributesInputName): string;
    setAttribType(type: ParamConvertibleJsType): void;
    attribType(): JsConnectionPointType;
    setAttribName(attribName: string): void;
    attribName(): string;
    setLines(shadersCollectionController: JsLinesCollectionController): void;
}
export {};
