/**
 * Updates the param of specific node
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { ParamConvertibleJsType } from '../utils/io/connections/Js';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
import { JsType } from '../../poly/registers/nodes/types/Js';
import { BaseParamType } from '../../params/_Base';
export declare enum SetParamJsNodeInputName {
    lerp = "lerp",
    val = "val"
}
declare class SetParamJsParamsConfig extends NodeParamsConfig {
    /** @param type of the parameter to update */
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class SetParamJsNode extends TypedJsNode<SetParamJsParamsConfig> {
    readonly paramsConfig: SetParamJsParamsConfig;
    static type(): JsType;
    initializeNode(): void;
    private _currentConnectionType;
    setParamType(paramType: ParamConvertibleJsType): void;
    setParamPath(paramPath: string): void;
    setParamParam(param: BaseParamType): void;
    setTriggerableLines(controller: JsLinesCollectionController): void;
    private _bodyLine;
    private _setBoolean;
    private _setColor;
    private _setFloat;
    private _setInt;
    private _setString;
    private _setVector2;
    private _setVector3;
    private _setVector4;
}
export {};
