/**
 * reads an entity attribute for a given index
 *
 *
 */
import { TypedJsNode } from './_Base';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
import { JsConnectionPointType } from '../utils/io/connections/Js';
import { JsType } from '../../poly/registers/nodes/types/Js';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { PointBuilderFunctionDataAttributeDataItem } from './code/assemblers/pointBuilder/_BasePointBuilderPersistedConfig';
export declare const ATTRIBUTE_NODE_AVAILABLE_JS_TYPES: JsConnectionPointType[];
export declare enum ImportAttributeJsNodeInput {
    INDEX = "index"
}
export declare enum ImportAttributeJsNodeOutput {
    VAL = "val"
}
declare class ImportAttributeJsParamsConfig extends NodeParamsConfig {
    name: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param entity index */
    index: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class ImportAttributeJsNode extends TypedJsNode<ImportAttributeJsParamsConfig> {
    paramsConfig: ImportAttributeJsParamsConfig;
    static type(): JsType;
    initializeNode(): void;
    private _expectedInputTypes;
    private _expectedOutputType;
    inputName(): ImportAttributeJsNodeInput;
    outputName(): ImportAttributeJsNodeOutput;
    attribData(): PointBuilderFunctionDataAttributeDataItem;
    attributeName(): string;
    jsType(): JsConnectionPointType;
    setJsType(type: JsConnectionPointType): void;
    setLines(linesController: JsLinesCollectionController): void;
}
export {};
