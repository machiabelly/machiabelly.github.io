"use strict";
import { TRIGGER_CONNECTION_NAME, TypedJsNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { JsConnectionPoint, JsConnectionPointType, JS_CONNECTION_POINT_IN_NODE_DEF } from "../utils/io/connections/Js";
import { Poly } from "../../Poly";
const CONNECTION_OPTIONS = JS_CONNECTION_POINT_IN_NODE_DEF;
class CookNodeJsParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param  node to cook */
    this.node = ParamConfig.NODE_PATH("", {
      dependentOnFoundNode: false,
      computeOnDirty: true
    });
  }
}
const ParamsConfig = new CookNodeJsParamsConfig();
export class CookNodeJsNode extends TypedJsNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "cookNode";
  }
  initializeNode() {
    this.io.inputs.setNamedInputConnectionPoints([
      new JsConnectionPoint(TRIGGER_CONNECTION_NAME, JsConnectionPointType.TRIGGER, CONNECTION_OPTIONS)
    ]);
  }
  setTriggerableLines(shadersCollectionController) {
    const node = this.pv.node.node();
    if (!node) {
      return;
    }
    const nodePath = `'${node.path()}'`;
    const func = Poly.namedFunctionsRegister.getFunction("cookNode", this, shadersCollectionController);
    const bodyLine = func.asString(nodePath);
    shadersCollectionController.addTriggerableLines(this, [bodyLine]);
  }
}
