import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class SetPhysicsRBDCylinderPropertyJsParamsConfig extends NodeParamsConfig {
    /** @param target radius */
    radius: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param target height */
    height: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param lerp factor */
    lerp: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param sets if the matrix should be updated as the animation progresses */
    updateMatrix: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class SetPhysicsRBDCylinderPropertyJsNode extends TypedJsNode<SetPhysicsRBDCylinderPropertyJsParamsConfig> {
    readonly paramsConfig: SetPhysicsRBDCylinderPropertyJsParamsConfig;
    static type(): string;
    initializeNode(): void;
    setLines(linesController: JsLinesCollectionController): void;
    setTriggerableLines(shadersCollectionController: JsLinesCollectionController): void;
}
export {};
