/**
 * converts a vector4 to a vector3
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsConnectionPointType } from '../utils/io/connections/Js';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
type AllowedType = JsConnectionPointType.VECTOR4 | JsConnectionPointType.VECTOR4_ARRAY;
declare class Vec4ToVec3ParamsJsConfig extends NodeParamsConfig {
    Vector4: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR4>;
}
export declare class Vec4ToVec3JsNode extends TypedJsNode<Vec4ToVec3ParamsJsConfig> {
    paramsConfig: Vec4ToVec3ParamsJsConfig;
    static type(): string;
    initializeNode(): void;
    _expectedInputName(index: number): string;
    _expectedOutputName(index: number): string;
    protected _expectedInputTypes(): AllowedType[];
    protected _expectedOutputTypes(): JsConnectionPointType[];
    setLines(shadersCollectionController: JsLinesCollectionController): void;
    private _setLinesAsVector4;
    private _setLinesAsVector4Array;
}
export {};
