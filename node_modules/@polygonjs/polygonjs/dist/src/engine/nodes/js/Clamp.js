"use strict";
import { Poly } from "../../Poly";
import { JsConnectionPointType, JsConnectionPointTypeFromArrayTypeMap } from "../utils/io/connections/Js";
import { MathFunctionArg3OperationFactory, DEFAULT_ALLOWED_TYPES } from "./_Math_Arg1Operation";
var ClampInput = /* @__PURE__ */ ((ClampInput2) => {
  ClampInput2["val"] = "val";
  ClampInput2["min"] = "min";
  ClampInput2["max"] = "max";
  return ClampInput2;
})(ClampInput || {});
const DefaultValues = {
  ["val" /* val */]: 0,
  ["min" /* min */]: 0,
  ["max" /* max */]: 1
};
const FUNCTION_NAME = "clamp";
export class ClampJsNode extends MathFunctionArg3OperationFactory("clamp", {
  inputPrefix: "in",
  out: "clamped"
}) {
  _coreFunction(shadersCollectionController) {
    Poly.namedFunctionsRegister.getFunction(FUNCTION_NAME, this, shadersCollectionController).asString("", "", "");
    return FUNCTION_NAME;
  }
  paramDefaultValue(name) {
    return DefaultValues[name];
  }
  _expectedInputName(index) {
    return ["val" /* val */, "min" /* min */, "max" /* max */][index];
  }
  _expectedInputTypes() {
    let first_input_type = this.io.connection_points.first_input_connection_type();
    const connectionPoints = this.io.inputs.namedInputConnectionPoints();
    if (first_input_type && connectionPoints) {
      if (!DEFAULT_ALLOWED_TYPES.includes(first_input_type)) {
        const first_connection = connectionPoints[0];
        if (first_connection) {
          first_input_type = first_connection.type();
        }
      }
    }
    const type = first_input_type || JsConnectionPointType.FLOAT;
    const boundType = JsConnectionPointTypeFromArrayTypeMap[type];
    return [type, boundType, boundType];
  }
}
