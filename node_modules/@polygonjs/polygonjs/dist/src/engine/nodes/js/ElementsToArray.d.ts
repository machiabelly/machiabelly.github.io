/**
 * creates an array
 *
 *
 *
 */
import { JsConnectionPointType, ArrayableConnectionPointType } from '../utils/io/connections/Js';
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class ElementsToArrayJsParamsConfig extends NodeParamsConfig {
}
export declare class ElementsToArrayJsNode extends TypedJsNode<ElementsToArrayJsParamsConfig> {
    readonly paramsConfig: ElementsToArrayJsParamsConfig;
    static type(): string;
    initializeNode(): void;
    protected _expectedInputTypes(): ArrayableConnectionPointType[];
    protected _expectedInputName(index: number): string;
    protected _expectedOutputName(index: number): string;
    protected _expectedOutputTypes(): (JsConnectionPointType.BOOLEAN_ARRAY | JsConnectionPointType.COLOR_ARRAY | JsConnectionPointType.FLOAT_ARRAY | JsConnectionPointType.INT_ARRAY | JsConnectionPointType.INTERSECTION_ARRAY | JsConnectionPointType.MATRIX4_ARRAY | JsConnectionPointType.QUATERNION_ARRAY | JsConnectionPointType.STRING_ARRAY | JsConnectionPointType.TEXTURE_ARRAY | JsConnectionPointType.VECTOR2_ARRAY | JsConnectionPointType.VECTOR3_ARRAY | JsConnectionPointType.VECTOR4_ARRAY)[];
    setLines(shadersCollectionController: JsLinesCollectionController): void;
    private _setLinesAsPrimitive;
    private _setLinesAsVector;
    private _setLinesAsIntersection;
    private _setLinesAsTexture;
}
export {};
