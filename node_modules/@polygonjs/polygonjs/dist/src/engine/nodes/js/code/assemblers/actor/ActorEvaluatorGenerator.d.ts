import { EvaluatorEventData, ActorEvaluator, EvaluatorMethodName } from './ActorEvaluator';
import { CoreObjectType, ObjectContent } from '../../../../../../core/geometry/ObjectContent';
type GeneratorFunction = (object: ObjectContent<CoreObjectType>) => ActorEvaluator;
type EvaluatorCallback = (evaluator: ActorEvaluator) => void;
export declare function deregisterGeneratorsForObject(object: ObjectContent<CoreObjectType>): void;
export declare function generatorsForObject(object: ObjectContent<CoreObjectType>): Set<ActorEvaluatorGenerator> | undefined;
export declare class ActorEvaluatorGenerator {
    private _func;
    private _expectedEvaluatorMethodNames;
    constructor(_func: GeneratorFunction);
    private _evaluatorByObject;
    eventDatas?: Set<EvaluatorEventData>;
    private _createEvaluator;
    setExpectedEvaluatorMethodNames(dummyEvaluator: ActorEvaluator): void;
    hasExpectedEvaluatorMethodName(methodName: EvaluatorMethodName): boolean;
    size(): number;
    disposeEvaluator(object: ObjectContent<CoreObjectType>): void;
    findOrCreateEvaluator(object: ObjectContent<CoreObjectType>): ActorEvaluator;
    traverseEvaluator(callback: EvaluatorCallback): void;
    clearObjects(): void;
}
export {};
