"use strict";
import { ParamlessTypedJsNode } from "./_Base";
import { JsConnectionPoint, JsConnectionPointType, JS_CONNECTION_POINT_IN_NODE_DEF } from "../utils/io/connections/Js";
import {
  RBDCapsuleProperty
} from "../../../core/physics/shapes/RBDCapsule";
import { inputObject3D } from "./_BaseObject3D";
import { Poly } from "../../Poly";
const CONNECTION_OPTIONS = JS_CONNECTION_POINT_IN_NODE_DEF;
export class GetPhysicsRBDCapsulePropertyJsNode extends ParamlessTypedJsNode {
  static type() {
    return "getPhysicsRBDCapsuleproperty";
  }
  initializeNode() {
    this.io.inputs.setNamedInputConnectionPoints([
      new JsConnectionPoint(JsConnectionPointType.OBJECT_3D, JsConnectionPointType.OBJECT_3D, CONNECTION_OPTIONS)
    ]);
    this.io.outputs.setNamedOutputConnectionPoints([
      new JsConnectionPoint(RBDCapsuleProperty.RADIUS, JsConnectionPointType.FLOAT),
      new JsConnectionPoint(RBDCapsuleProperty.HEIGHT, JsConnectionPointType.FLOAT)
    ]);
  }
  setLines(shadersCollectionController) {
    const usedOutputNames = this.io.outputs.used_output_names();
    const object3D = inputObject3D(this, shadersCollectionController);
    const _f = (propertyName, functionName, type) => {
      if (!usedOutputNames.includes(propertyName)) {
        return;
      }
      const func = Poly.namedFunctionsRegister.getFunction(functionName, this, shadersCollectionController);
      shadersCollectionController.addBodyOrComputed(this, [
        {
          dataType: type,
          varName: this.jsVarName(propertyName),
          value: func.asString(object3D)
        }
      ]);
    };
    _f(RBDCapsuleProperty.RADIUS, "getPhysicsRBDCapsuleRadius", JsConnectionPointType.FLOAT);
    _f(RBDCapsuleProperty.HEIGHT, "getPhysicsRBDCapsuleHeight", JsConnectionPointType.FLOAT);
  }
}
