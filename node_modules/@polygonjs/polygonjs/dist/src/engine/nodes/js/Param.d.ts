/**
 * Creates a param on the container node, which allows to control the js function without recompiling it
 *
 *
 */
import { TypedJsNode } from './_Base';
import { ParamConvertibleJsType } from '../utils/io/connections/Js';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class ParamJsParamsConfig extends NodeParamsConfig {
    name: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class ParamJsNode extends TypedJsNode<ParamJsParamsConfig> {
    paramsConfig: ParamJsParamsConfig;
    static type(): string;
    static readonly OUTPUT_NAME = "val";
    initializeNode(): void;
    setLines(shadersCollectionController: JsLinesCollectionController): void;
    setParamConfigs(): void;
    uniformName(): string;
    setJsType(type: ParamConvertibleJsType): void;
    paramsGenerating(): boolean;
}
export {};
