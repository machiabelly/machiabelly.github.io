/**
 * Updates an RBD object using left/right/froward/backward/run/jump events
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class PhysicsPlayerUpdateJsParamsConfig extends NodeParamsConfig {
    /** @param travel speed */
    speed: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param run Allowed */
    runAllowed: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param jump Force */
    runSpeedMult: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param jump Allowed */
    jumpAllowed: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param jump Force */
    jumpStrength: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param reset if position is below a threshold */
    resetIfBelowThreshold: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param height under which the player gets reset */
    resetThreshold: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class PhysicsPlayerUpdateJsNode extends TypedJsNode<PhysicsPlayerUpdateJsParamsConfig> {
    readonly paramsConfig: PhysicsPlayerUpdateJsParamsConfig;
    static type(): string;
    initializeNode(): void;
    setTriggerableLines(shadersCollectionController: JsLinesCollectionController): void;
}
export {};
