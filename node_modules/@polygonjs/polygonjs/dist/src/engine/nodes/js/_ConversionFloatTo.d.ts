import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class FloatToColorJsParamsConfig extends NodeParamsConfig {
    r: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    g: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    b: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class FloatToColorJsNode extends TypedJsNode<FloatToColorJsParamsConfig> {
    paramsConfig: FloatToColorJsParamsConfig;
    static type(): string;
    static readonly OUTPUT_NAME = "Color";
    initializeNode(): void;
    setLines(shadersCollectionController: JsLinesCollectionController): void;
}
declare class FloatToVec2JsParamsConfig extends NodeParamsConfig {
    x: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    y: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class FloatToVec2JsNode extends TypedJsNode<FloatToVec2JsParamsConfig> {
    paramsConfig: FloatToVec2JsParamsConfig;
    static type(): string;
    static readonly OUTPUT_NAME = "vec2";
    initializeNode(): void;
    setLines(shadersCollectionController: JsLinesCollectionController): void;
}
declare class FloatToVec3JsParamsConfig extends NodeParamsConfig {
    x: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    y: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    z: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class FloatToVec3JsNode extends TypedJsNode<FloatToVec3JsParamsConfig> {
    paramsConfig: FloatToVec3JsParamsConfig;
    static type(): string;
    static readonly OUTPUT_NAME = "vec3";
    initializeNode(): void;
    setLines(shadersCollectionController: JsLinesCollectionController): void;
}
declare class FloatToVec4JsParamsConfig extends NodeParamsConfig {
    x: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    y: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    z: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    w: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class FloatToVec4JsNode extends TypedJsNode<FloatToVec4JsParamsConfig> {
    paramsConfig: FloatToVec4JsParamsConfig;
    static type(): string;
    static readonly OUTPUT_NAME = "vec4";
    initializeNode(): void;
    setLines(shadersCollectionController: JsLinesCollectionController): void;
}
export {};
