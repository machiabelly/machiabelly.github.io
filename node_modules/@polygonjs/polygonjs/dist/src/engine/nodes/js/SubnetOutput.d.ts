/**
 * a subnet output is the output of a... subnet!
 *
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { NetworkChildNodeType } from '../../poly/NodeContext';
import { SubnetJsNode } from './Subnet';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class SubnetOutputJsParamsConfig extends NodeParamsConfig {
}
export declare class SubnetOutputJsNode extends TypedJsNode<SubnetOutputJsParamsConfig> {
    paramsConfig: SubnetOutputJsParamsConfig;
    static type(): Readonly<NetworkChildNodeType.OUTPUT>;
    initializeNode(): void;
    parent(): SubnetJsNode | null;
    expectedInputName(index: number): string;
    expectedInputTypes(): import("../../index_all").JsConnectionPointType[];
    setLines(shadersCollectionController: JsLinesCollectionController): void;
}
export {};
