import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class SetPhysicsRBDCuboidPropertyJsParamsConfig extends NodeParamsConfig {
    /** @param target sizes */
    sizes: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
    /** @param target size */
    size: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param lerp factor */
    lerp: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param sets if the matrix should be updated as the animation progresses */
    updateMatrix: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class SetPhysicsRBDCuboidPropertyJsNode extends TypedJsNode<SetPhysicsRBDCuboidPropertyJsParamsConfig> {
    readonly paramsConfig: SetPhysicsRBDCuboidPropertyJsParamsConfig;
    static type(): string;
    initializeNode(): void;
    setLines(linesController: JsLinesCollectionController): void;
    setTriggerableLines(shadersCollectionController: JsLinesCollectionController): void;
}
export {};
