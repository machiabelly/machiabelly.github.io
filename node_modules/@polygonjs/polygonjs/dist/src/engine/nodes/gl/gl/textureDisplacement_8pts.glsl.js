export default "float textureDisplacementDisplace__COMPONENT__(sampler2D displacementMap, float amount, vec2 vUv) {\n	return texture2D(displacementMap, vUv).__COMPONENT__ * amount;\n}\n\nTextureDisplacementResult textureDisplacement__COMPONENT__(\n	sampler2D displacementMap,\n	vec2 vUv,\n	vec2 textureSize,\n	float amount,\n	vec3 position,\n	vec3 normal,\n	vec2 tangentsPosOffset\n	){\n\n	TextureDisplacementResult result;\n	float diagonal = 1.0;//0.707;\n\n	vec2 uvLookup = vec2( vUv.x, vUv.y );\n	vec3 currentP = position + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, vUv );\n\n	vec2 texelSize = vec2( 1.0 / textureSize.x, - 1.0 / textureSize.y );\n\n	vec2 posOffset = vec2(tangentsPosOffset.x, tangentsPosOffset.y);\n\n	vec3 offset0 = position + vec3( 0.0, 						0.0, 	posOffset.y);\n	vec3 offset1 = position + vec3( diagonal * posOffset.x, 	0.0, 	diagonal * posOffset.y);\n	vec3 offset2 = position + vec3( posOffset.x, 				0.0, 	0.0);\n	vec3 offset3 = position + vec3( diagonal * posOffset.x, 	0.0, 	- diagonal * posOffset.y);\n	vec3 offset4 = position + vec3( 0.0, 						0.0, 	- posOffset.y);\n	vec3 offset5 = position + vec3( - diagonal * posOffset.x, 	0.0, 	- diagonal * posOffset.y);\n	vec3 offset6 = position + vec3( - posOffset.x, 				0.0, 	0.0);\n	vec3 offset7 = position + vec3( - diagonal * posOffset.x, 	0.0, 	diagonal * posOffset.y);\n\n	vec2 uv0 = vec2( 0.0, 						texelSize.y);\n	vec2 uv1 = vec2( diagonal * texelSize.x, 	diagonal * texelSize.y);\n	vec2 uv2 = vec2( texelSize.x, 				0.0);\n	vec2 uv3 = vec2( diagonal * texelSize.x, 	- diagonal * texelSize.y);\n	vec2 uv4 = vec2( 0.0, 						- texelSize.y);\n	vec2 uv5 = vec2( - diagonal * texelSize.x, 	- diagonal * texelSize.y);\n	vec2 uv6 = vec2( - texelSize.x, 				0.0);\n	vec2 uv7 = vec2( - diagonal * texelSize.x, 	diagonal * texelSize.y);\n\n	vec3 p0 = offset0 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv0 );\n	vec3 p1 = offset1 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv1 );\n	vec3 p2 = offset2 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv2 );\n	vec3 p3 = offset3 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv3 );\n	vec3 p4 = offset4 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv4 );\n	vec3 p5 = offset5 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv5 );\n	vec3 p6 = offset6 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv6 );\n	vec3 p7 = offset7 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvLookup + uv7 );\n\n	vec3 d0 = (p0 - currentP);\n	vec3 d1 = (p1 - currentP);\n	vec3 d2 = (p2 - currentP);\n	vec3 d3 = (p3 - currentP);\n	vec3 d4 = (p4 - currentP);\n	vec3 d5 = (p5 - currentP);\n	vec3 d6 = (p6 - currentP);\n	vec3 d7 = (p7 - currentP);\n\n	vec3 computedNormal = vec3(0.);\n	// computedNormal += cross(d0, d1);\n	// computedNormal += cross(d1, d2);\n	// computedNormal += cross(d2, d3);\n	// computedNormal += cross(d3, d4);\n	// computedNormal += cross(d4, d5);\n	// computedNormal += cross(d5, d6);\n	// computedNormal += cross(d6, d7);\n	// computedNormal += cross(d7, d0);\n	bool a = 1.0 > 0.5;\n	if(a){\n		computedNormal += cross(d0, d2);\n		computedNormal += cross(d2, d3);\n		computedNormal += cross(d3, d4);\n		computedNormal += cross(d4, d6);\n		computedNormal += cross(d6, d7);\n		computedNormal += cross(d7, d0);\n	}else{\n		computedNormal += cross(d0, d1);\n		computedNormal += cross(d1, d2);\n		computedNormal += cross(d2, d4);\n		computedNormal += cross(d4, d5);\n		computedNormal += cross(d5, d6);\n		computedNormal += cross(d6, d0);\n	}\n	result.normal = normalize(computedNormal);\n	result.position = currentP;\n\n	return result;\n\n}";
