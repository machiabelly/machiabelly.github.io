/**
 * test the input value and checks if the number is infinite or Nan.
 * If the input is a vector, the output will be true if any of its component is infinite or Nan.
 *
 *
 *
 */
import { ShadersCollectionController } from './code/utils/ShadersCollectionController';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { TypedGlNode } from './_Base';
declare class IsInfOrNanGlParamsConfig extends NodeParamsConfig {
    testIsInf: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    testIsNan: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class IsInfOrNanGlNode extends TypedGlNode<IsInfOrNanGlParamsConfig> {
    paramsConfig: IsInfOrNanGlParamsConfig;
    static type(): string;
    static OUTPUT: string;
    static INPUT: string;
    initializeNode(): void;
    private _expected_input_types;
    setLines(shadersCollectionController: ShadersCollectionController): void;
    private _functionCalls;
}
export {};
