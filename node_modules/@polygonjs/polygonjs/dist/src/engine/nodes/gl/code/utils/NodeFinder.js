"use strict";
import { GlType } from "./../../../../poly/registers/nodes/types/Gl";
import { NodeContext } from "./../../../../poly/NodeContext";
export class GlNodeFinder {
  static findOutputNodes(node) {
    const output_nodes = node.nodesByType(GlType.OUTPUT);
    return output_nodes;
  }
  static findParamGeneratingNodes(node) {
    var _a;
    const list = [];
    (_a = node.childrenController) == null ? void 0 : _a.traverseChildren(
      (child) => {
        const childGlNode = child;
        if (childGlNode.paramsGenerating()) {
          list.push(childGlNode);
        }
      },
      (child) => {
        if (!child.childrenController) {
          return child.context() == NodeContext.GL;
        } else {
          return child.context() == NodeContext.GL && child.childrenController.context == NodeContext.GL;
        }
      }
    );
    return list;
  }
  static findVaryingNodes(node) {
    const nodes = node.nodesByType(GlType.VARYING_WRITE);
    return nodes;
  }
  static findAttributeExportNodes(node) {
    const nodes = node.nodesByType(GlType.ATTRIBUTE);
    return nodes.filter((node2) => {
      return node2.isExporting();
    });
  }
  static findAjacencyNodes(node) {
    const nodes = node.nodesByType(GlType.ADJACENT_POINTS_ATTRIB_SMOOTH);
    return nodes;
  }
}
