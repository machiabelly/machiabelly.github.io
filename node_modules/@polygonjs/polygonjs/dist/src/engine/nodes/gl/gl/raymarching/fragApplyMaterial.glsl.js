export default "// start applyMaterial builder define code\n\n\n\n// --- applyMaterial SPLIT ---\nvec3 applyMaterialWithoutRefraction(vec3 p, vec3 n, vec3 rayDir, int mat, inout SDFContext sdfContext){\n\n	vec3 col = vec3(1.);\n	// --- REFLECTION NOT ALLOWED - START\n	// --- REFRACTION NOT ALLOWED - START\n	// start applyMaterial builder body code\n	\n	// --- REFLECTION NOT ALLOWED - END\n	// --- REFRACTION NOT ALLOWED - END\n	return col;\n}\n\nvec3 applyMaterialWithoutReflection(vec3 p, vec3 n, vec3 rayDir, int mat, inout SDFContext sdfContext){\n\n	vec3 col = vec3(1.);\n	// --- REFLECTION NOT ALLOWED - START\n	// --- REFRACTION NOT ALLOWED - START\n	// start applyMaterial builder body code\n	\n	// --- REFLECTION NOT ALLOWED - END\n	// --- REFRACTION NOT ALLOWED - END\n	return col;\n}\n#ifdef RAYMARCHED_REFLECTIONS\nvec3 GetReflection(vec3 p, vec3 n, vec3 rayDir, float biasMult, float roughness, int reflectionDepth, inout SDFContext sdfContextMain){\n	bool hitReflection = true;\n	vec3 reflectedColor = vec3(0.);\n	#pragma unroll_loop_start\n	for(int i=0; i < reflectionDepth; i++) {\n		if(hitReflection){\n			rayDir = reflect(rayDir, n);\n			p += n*SURF_DIST*biasMult;\n			SDFContext sdfContext = RayMarch(p, rayDir, 1.);\n			#if defined( DEBUG_STEPS_COUNT )\n				sdfContextMain.stepsCount += sdfContext.stepsCount;\n			#endif\n			if( sdfContext.d >= MAX_DIST){\n				hitReflection = false;\n				reflectedColor = envMapSample(rayDir, roughness);\n			}\n			if(hitReflection){\n				p += rayDir * sdfContext.d;\n				n = GetNormal(p);\n				vec3 matCol = applyMaterialWithoutReflection(p, n, rayDir, sdfContext.matId, sdfContextMain);\n				reflectedColor += matCol;\n			}\n		}\n	}\n	#pragma unroll_loop_end\n	return reflectedColor;\n}\n#endif\n\n#ifdef RAYMARCHED_REFRACTIONS\n// xyz for color, w for distanceInsideMedium\nvec4 GetRefractedData(vec3 p, vec3 n, vec3 rayDir, float ior, float biasMult, float roughness, float refractionMaxDist, int refractionDepth, inout SDFContext sdfContextMain){\n	bool hitRefraction = true;\n	bool changeSide = true;\n	#ifdef RAYMARCHED_REFRACTIONS_START_OUTSIDE_MEDIUM\n	float side = -1.;\n	#else\n	float side =  1.;\n	#endif\n	float iorInverted = 1. / ior;\n	vec3 refractedColor = vec3(0.);\n	float distanceInsideMedium=0.;\n	float totalRefractedDistance=0.;\n\n	#pragma unroll_loop_start\n	for(int i=0; i < refractionDepth; i++) {\n		if(hitRefraction){\n			float currentIor = side<0. ? iorInverted : ior;\n			vec3 rayDirPreRefract = rayDir;\n			rayDir = refract(rayDir, n, currentIor);\n			changeSide = dot(rayDir, rayDir)!=0.;\n			if(changeSide == true) {\n				p -= n*SURF_DIST*(2.+biasMult);\n			} else {\n				p += n*SURF_DIST*(   biasMult);\n				rayDir = reflect(rayDirPreRefract, n);\n			}\n			SDFContext sdfContext = RayMarch(p, rayDir, side);\n			#if defined( DEBUG_STEPS_COUNT )\n				sdfContextMain.stepsCount += sdfContext.stepsCount;\n			#endif\n			totalRefractedDistance += sdfContext.d;\n			if( abs(sdfContext.d) >= MAX_DIST || totalRefractedDistance > refractionMaxDist ){\n				hitRefraction = false;\n				refractedColor = envMapSample(rayDir, roughness);\n			}\n			if(hitRefraction){\n				p += rayDir * sdfContext.d;\n				n = GetNormal(p) * side;\n				vec3 matCol = applyMaterialWithoutRefraction(p, n, rayDir, sdfContext.matId, sdfContextMain);\n				refractedColor = matCol;\n\n				// same as: side < 0. ? abs(sdfContext.d) : 0.;\n				distanceInsideMedium += (side-1.)*-0.5*abs(sdfContext.d);\n				if( changeSide ){\n					side *= -1.;\n				}\n			}\n		}\n		#ifdef RAYMARCHED_REFRACTIONS_SAMPLE_ENV_MAP_ON_LAST\n		if(i == refractionDepth-1){\n			refractedColor = envMapSample(rayDir, roughness);\n		}\n		#endif\n	}\n	#pragma unroll_loop_end\n	return vec4(refractedColor, distanceInsideMedium);\n}\nfloat refractionTint(float baseValue, float tint, float distanceInsideMedium, float absorption){\n	float tintNegated = baseValue-tint;\n	float t = tintNegated*( distanceInsideMedium*absorption );\n	return max(baseValue-t, 0.);\n}\nfloat applyRefractionAbsorption(float refractedDataColor, float baseValue, float tint, float distanceInsideMedium, float absorption){\n	return refractedDataColor*refractionTint(baseValue, tint, distanceInsideMedium, absorption);\n}\nvec3 applyRefractionAbsorption(vec3 refractedDataColor, vec3 baseValue, vec3 tint, float distanceInsideMedium, float absorption){\n	return vec3(\n		refractedDataColor.r * refractionTint(baseValue.r, tint.r, distanceInsideMedium, absorption),\n		refractedDataColor.g * refractionTint(baseValue.g, tint.g, distanceInsideMedium, absorption),\n		refractedDataColor.b * refractionTint(baseValue.b, tint.b, distanceInsideMedium, absorption)\n	);\n}\n\n#endif\n\nvec3 applyMaterial(vec3 p, vec3 n, vec3 rayDir, int mat, inout SDFContext sdfContext){\n\n	vec3 col = vec3(0.);\n	// start applyMaterial builder body code\n	\n	return col;\n}\n";
