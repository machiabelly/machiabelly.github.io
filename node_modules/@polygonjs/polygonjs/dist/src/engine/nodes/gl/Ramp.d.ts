/**
 * generates a ramp as a spare parameter, which can then be used to interpolate an input value.
 *
 *
 *
 */
import { TypedGlNode } from './_Base';
import { ShadersCollectionController } from './code/utils/ShadersCollectionController';
import { ParamType } from '../../poly/ParamType';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { GlType } from '../../poly/registers/nodes/types/Gl';
declare class RampGlParamsConfig extends NodeParamsConfig {
    name: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.STRING>;
    input: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.FLOAT>;
}
export declare class RampGlNode extends TypedGlNode<RampGlParamsConfig> {
    paramsConfig: RampGlParamsConfig;
    static type(): Readonly<GlType.RAMP>;
    initializeNode(): void;
    setLines(shadersCollectionController: ShadersCollectionController): void;
    paramsGenerating(): boolean;
    setParamConfigs(): void;
    uniformName(): string;
}
export {};
