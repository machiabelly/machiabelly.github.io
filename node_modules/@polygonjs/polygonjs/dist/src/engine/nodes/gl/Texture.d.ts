/**
 * the texture node allows you to import a texture into your shaders.
 *
 * @remarks
 *
 * When this node is used inside a material or particles systems, a spare param will be added to the node, allowing you to select the texture node.
 * You'll then be able to read the texture values based on a uv input.
 *
 * And note that the uv input does not necessarily need to be an actual uv attribute on your geometry. It can be any attribute, any globals (like time) or function.
 *
 *
 *
 */
import { TypedGlNode } from './_Base';
import { ShadersCollectionController } from './code/utils/ShadersCollectionController';
import { ParamType } from '../../poly/ParamType';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { GlType } from '../../poly/registers/nodes/types/Gl';
declare class TextureGlParamsConfig extends NodeParamsConfig {
    paramName: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.STRING>;
    uv: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.VECTOR2>;
    tblur: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.BOOLEAN>;
    resolution: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.VECTOR2>;
    blurPixelsCountX: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.INTEGER>;
    blurPixelsCountY: import("../utils/params/ParamsConfig").ParamTemplate<ParamType.INTEGER>;
}
export declare class TextureGlNode extends TypedGlNode<TextureGlParamsConfig> {
    paramsConfig: TextureGlParamsConfig;
    static type(): Readonly<GlType.TEXTURE>;
    static readonly OUTPUT_NAME = "rgba";
    initializeNode(): void;
    setLines(shaders_collection_controller: ShadersCollectionController): void;
    paramsGenerating(): boolean;
    setParamConfigs(): void;
    uniformName(): string;
}
export {};
