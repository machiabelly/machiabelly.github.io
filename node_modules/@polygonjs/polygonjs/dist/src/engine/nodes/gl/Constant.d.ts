/**
 * Creates a constant
 *
 *
 */
import { TypedGlNode } from './_Base';
import { BaseParamType } from '../../params/_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { ShadersCollectionController } from './code/utils/ShadersCollectionController';
import { GlConnectionPointType } from '../utils/io/connections/Gl';
import { GlType } from '../../poly/registers/nodes/types/Gl';
declare class ConstantGlParamsConfig extends NodeParamsConfig {
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    bool: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    int: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    float: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    vec2: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    vec3: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
    color: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    vec4: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR4>;
    /** @param when using vec3, use toggle on it should be a color */
    asColor: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class ConstantGlNode extends TypedGlNode<ConstantGlParamsConfig> {
    paramsConfig: ConstantGlParamsConfig;
    static type(): GlType;
    static readonly OUTPUT_NAME = "val";
    initializeNode(): void;
    setLines(shaders_collection_controller: ShadersCollectionController): void;
    private _currentConnectionType;
    currentParam(): BaseParamType;
    private _currentVarName;
    currentValue(): string | undefined;
    setGlType(type: GlConnectionPointType): void;
}
export {};
