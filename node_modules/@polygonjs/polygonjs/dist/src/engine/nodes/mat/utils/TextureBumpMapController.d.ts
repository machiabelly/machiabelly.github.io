import { Constructor } from '../../../../types/GlobalTypes';
import { TypedMatNode } from '../_Base';
import { BaseTextureMapController } from './_BaseTextureController';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { MeshStandardMaterial } from 'three';
import { MeshPhysicalMaterial } from 'three';
import { MeshMatcapMaterial } from 'three';
import { MeshNormalMaterial } from 'three';
import { MeshToonMaterial } from 'three';
import { MaterialTexturesRecord, SetParamsTextureNodesRecord } from './_BaseController';
export declare function BumpMapParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param toggle if you want to use a bump map */
        useBumpMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the bump map COP node */
        bumpMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
        /** @param bump scale */
        bumpScale: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
        /** @param bump bias */
        bumpBias: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & TBase;
type TextureBumpMapControllerCurrentMaterial = MeshMatcapMaterial | MeshNormalMaterial | MeshPhysicalMaterial | MeshStandardMaterial | MeshToonMaterial;
declare const TextureBumpMapParamsConfig_base: {
    new (...args: any[]): {
        /** @param toggle if you want to use a bump map */
        useBumpMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the bump map COP node */
        bumpMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
        /** @param bump scale */
        bumpScale: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
        /** @param bump bias */
        bumpBias: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & typeof NodeParamsConfig;
declare class TextureBumpMapParamsConfig extends TextureBumpMapParamsConfig_base {
}
export interface TextureBumpMapControllers {
    bumpMap: TextureBumpMapController;
}
declare abstract class TextureBumpMapMatNode extends TypedMatNode<TextureBumpMapControllerCurrentMaterial, TextureBumpMapParamsConfig> {
    controllers: TextureBumpMapControllers;
    material(): Promise<TextureBumpMapControllerCurrentMaterial | undefined>;
}
export declare class TextureBumpMapController extends BaseTextureMapController {
    protected node: TextureBumpMapMatNode;
    constructor(node: TextureBumpMapMatNode);
    initializeNode(): void;
    static update(node: TextureBumpMapMatNode): Promise<void>;
    update(): Promise<void>;
    updateMaterial(material: TextureBumpMapControllerCurrentMaterial): Promise<void>;
    getTextures(material: TextureBumpMapControllerCurrentMaterial, record: MaterialTexturesRecord): void;
    setParamsFromMaterial(material: TextureBumpMapControllerCurrentMaterial, record: SetParamsTextureNodesRecord): void;
}
export {};
