"use strict";
import { NodeParamsConfig } from "../utils/params/ParamsConfig";
import {
  UniformsTransparencyParamConfig,
  UniformsTransparencyController
} from "./utils/UniformsTransparencyController";
import {
  AdvancedCommonParamConfig,
  AdvancedCommonController
} from "./utils/AdvancedCommonController";
import { MapParamConfig, TextureMapController } from "./utils/TextureMapController";
import {
  AlphaMapParamConfig,
  TextureAlphaMapController
} from "./utils/TextureAlphaMapController";
import { BaseBuilderParamConfig, TypedBuilderMatNode } from "./_BaseBuilder";
import { Poly } from "../../Poly";
import { TextureAOMapController, AOMapParamConfig } from "./utils/TextureAOMapController";
import { AssemblerName } from "../../poly/registers/assemblers/_BaseRegister";
import { FogParamConfig, UniformFogController } from "./utils/UniformsFogController";
import {
  WireframeShaderMaterialController,
  WireframeShaderMaterialParamsConfig
} from "./utils/WireframeShaderMaterialController";
import {
  TextureEnvMapSimpleController,
  EnvMapSimpleParamConfig
} from "./utils/TextureEnvMapSimpleController";
import { DefaultFolderParamConfig } from "./utils/DefaultFolder";
import { TexturesFolderParamConfig } from "./utils/TexturesFolder";
import { AdvancedFolderParamConfig } from "./utils/AdvancedFolder";
import {
  CustomMaterialMeshParamConfig,
  materialMeshAssemblerCustomMaterialRequested
} from "./utils/customMaterials/CustomMaterialMesh";
import { MatType } from "../../poly/registers/nodes/types/Mat";
class MeshBasicBuilderMatParamsConfig extends CustomMaterialMeshParamConfig(
  FogParamConfig(
    WireframeShaderMaterialParamsConfig(
      AdvancedCommonParamConfig(
        BaseBuilderParamConfig(
          /* advanced */
          AdvancedFolderParamConfig(
            EnvMapSimpleParamConfig(
              AOMapParamConfig(
                AlphaMapParamConfig(
                  MapParamConfig(
                    /* textures */
                    TexturesFolderParamConfig(
                      UniformsTransparencyParamConfig(DefaultFolderParamConfig(NodeParamsConfig))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshBasicBuilderMatParamsConfig();
export class MeshBasicBuilderMatNode extends TypedBuilderMatNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      advancedCommon: new AdvancedCommonController(this),
      alphaMap: new TextureAlphaMapController(this),
      aoMap: new TextureAOMapController(this),
      envMap: new TextureEnvMapSimpleController(this),
      uniformFog: new UniformFogController(this),
      map: new TextureMapController(this),
      uniformTransparency: new UniformsTransparencyController(this),
      wireframeShader: new WireframeShaderMaterialController(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return MatType.MESH_BASIC_BUILDER;
  }
  usedAssembler() {
    return AssemblerName.GL_MESH_BASIC;
  }
  _createAssemblerController() {
    return Poly.assemblersRegister.assembler(this, this.usedAssembler());
  }
  customMaterialRequested(customName) {
    return materialMeshAssemblerCustomMaterialRequested(this, customName);
  }
  async cook() {
    this._material = this._material || this.createMaterial();
    await Promise.all(this.controllersPromises(this._material));
    this.compileIfRequired(this._material);
    this._material.needsUpdate = true;
    this.setMaterial(this._material);
  }
}
