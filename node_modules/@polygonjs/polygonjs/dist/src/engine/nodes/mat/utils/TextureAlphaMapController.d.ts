import { Constructor } from '../../../../types/GlobalTypes';
import { TypedMatNode } from '../_Base';
import { BaseTextureMapController } from './_BaseTextureController';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { MeshBasicMaterial } from 'three';
import { MeshLambertMaterial } from 'three';
import { MeshPhongMaterial } from 'three';
import { MeshPhysicalMaterial } from 'three';
import { MeshStandardMaterial } from 'three';
import { MeshMatcapMaterial } from 'three';
import { MeshToonMaterial } from 'three';
import { PointsMaterial } from 'three';
import { MaterialTexturesRecord, SetParamsTextureNodesRecord } from './_BaseController';
export declare function AlphaMapParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param toggle if you want to use an alpha map */
        useAlphaMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the alpha map COP node */
        alphaMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
    };
} & TBase;
type TextureAlphaMapControllerCurrentMaterial = MeshBasicMaterial | MeshLambertMaterial | MeshPhongMaterial | MeshStandardMaterial | MeshPhysicalMaterial | MeshMatcapMaterial | MeshToonMaterial | PointsMaterial;
declare const TextureAlphaMapParamsConfig_base: {
    new (...args: any[]): {
        /** @param toggle if you want to use an alpha map */
        useAlphaMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the alpha map COP node */
        alphaMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
    };
} & typeof NodeParamsConfig;
declare class TextureAlphaMapParamsConfig extends TextureAlphaMapParamsConfig_base {
}
export interface TextureAlphaMapControllers {
    alphaMap: TextureAlphaMapController;
}
declare abstract class TextureAlphaMapMatNode extends TypedMatNode<TextureAlphaMapControllerCurrentMaterial, TextureAlphaMapParamsConfig> {
    controllers: TextureAlphaMapControllers;
    material(): Promise<TextureAlphaMapControllerCurrentMaterial | undefined>;
}
export declare class TextureAlphaMapController extends BaseTextureMapController {
    protected node: TextureAlphaMapMatNode;
    constructor(node: TextureAlphaMapMatNode);
    initializeNode(): void;
    static update(node: TextureAlphaMapMatNode): Promise<void>;
    update(): Promise<void>;
    updateMaterial(material: TextureAlphaMapControllerCurrentMaterial): Promise<void>;
    getTextures(material: TextureAlphaMapControllerCurrentMaterial, record: MaterialTexturesRecord): void;
    setParamsFromMaterial(material: TextureAlphaMapControllerCurrentMaterial, record: SetParamsTextureNodesRecord): void;
}
export {};
