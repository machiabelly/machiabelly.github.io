import { Constructor } from '../../../../types/GlobalTypes';
import { TypedMatNode } from '../_Base';
import { BaseTextureMapController } from './_BaseTextureController';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { MeshPhongMaterial } from 'three';
import { MaterialTexturesRecord, SetParamsTextureNodesRecord } from './_BaseController';
export declare function SpecularMapParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param toggle if you want to use a specular map */
        useSpecularMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the specular map COP node */
        specularMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
    };
} & TBase;
type TextureSpecularMapControllerCurrentMaterial = MeshPhongMaterial;
declare const TextureSpecularMapParamsConfig_base: {
    new (...args: any[]): {
        /** @param toggle if you want to use a specular map */
        useSpecularMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the specular map COP node */
        specularMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
    };
} & typeof NodeParamsConfig;
declare class TextureSpecularMapParamsConfig extends TextureSpecularMapParamsConfig_base {
}
export interface TextureSpecularMapControllers {
    specularMap: TextureSpecularMapController;
}
declare abstract class TextureSpecularMapMatNode extends TypedMatNode<TextureSpecularMapControllerCurrentMaterial, TextureSpecularMapParamsConfig> {
    controllers: TextureSpecularMapControllers;
}
export declare class TextureSpecularMapController extends BaseTextureMapController {
    protected node: TextureSpecularMapMatNode;
    constructor(node: TextureSpecularMapMatNode);
    initializeNode(): void;
    static update(node: TextureSpecularMapMatNode): Promise<void>;
    update(): Promise<void>;
    updateMaterial(material: TextureSpecularMapControllerCurrentMaterial): Promise<void>;
    getTextures(material: TextureSpecularMapControllerCurrentMaterial, record: MaterialTexturesRecord): void;
    setParamsFromMaterial(material: TextureSpecularMapControllerCurrentMaterial, record: SetParamsTextureNodesRecord): void;
}
export {};
