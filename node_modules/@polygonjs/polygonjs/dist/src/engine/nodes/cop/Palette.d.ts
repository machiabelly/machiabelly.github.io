/**
 * Generates strips of colors depending on a palette generator
 *
 *
 */
import { TypedCopNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { PaletteController } from '../utils/color/PaletteController';
import { NodeContext } from '../../poly/NodeContext';
declare class PaletteCopParamsConfig extends NodeParamsConfig {
    /** @param texture resolution */
    resolution: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param name of the palette */
    paletteName: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param click to set the node to the next palette */
    pickNext: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
    /** @param click to set the node to the previous palette */
    pickPrevious: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
    /** @param click to set the node to a random palette */
    pickRandom: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
    colorsCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param palette color 1 */
    color1: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    /** @param palette color 2 */
    color2: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    /** @param palette color 3 */
    color3: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    /** @param palette color 4 */
    color4: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    /** @param palette color 5 */
    color5: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
}
export declare class PaletteCopNode extends TypedCopNode<PaletteCopParamsConfig> {
    paramsConfig: PaletteCopParamsConfig;
    static type(): string;
    readonly paletteController: PaletteController<NodeContext.COP>;
    private _dataTexture;
    private _colorParams;
    initializeNode(): void;
    private _colors;
    cook(): void;
    private _intervalIndex;
    private _createDataTexture;
    private _createPixelBuffer;
    static PARAM_CALLBACK_reset(node: PaletteCopNode): void;
    private _reset;
}
export {};
