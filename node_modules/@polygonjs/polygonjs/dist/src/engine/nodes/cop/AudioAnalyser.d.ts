/**
 * Generates a texture from audio analyse nodes, such as [FFT](/docs/nodes/audio/FFT), [Meter](/docs/nodes/audio/meter) and [Waveform](/docs/nodes/audio/waveform).
 *
 *
 */
import { TypedCopNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
declare class AudioAnalyserCopParamsConfig extends NodeParamsConfig {
    /** @param if off, the texture will not be updated */
    activeR: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param audio node to read data from, into the RED channel */
    audioNodeR: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
    /** @param decibel range */
    rangeR: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param speed mult */
    speedMultR: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param if off, the texture will not be updated */
    activeG: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param audio node to read data from, into the GREEN channel */
    audioNodeG: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
    /** @param decibel range */
    rangeG: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param speed mult */
    speedMultG: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param if off, the texture will not be updated */
    activeB: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param audio node to read data from, into the BLUE channel */
    audioNodeB: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
    /** @param decibel range */
    rangeB: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param speed mult */
    speedMultB: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param if off, the texture will not be updated */
    activeA: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param audio node to read data from, into the ALPHA channel */
    audioNodeA: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
    /** @param decibel range */
    rangeA: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param speed mult */
    speedMultA: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class AudioAnalyserCopNode extends TypedCopNode<AudioAnalyserCopParamsConfig> {
    paramsConfig: AudioAnalyserCopParamsConfig;
    static type(): string;
    cook(): Promise<void>;
    dispose(): void;
    private _audioNodesByChannel;
    private _valuesByChannel;
    private _getAudioNodes;
    private _getAudioNode;
    private _updateTexture;
    private _valuesForChannel;
    private _updateTextureChannel;
    private _dataTexture;
    private _createDataTexture;
    private _paramSetByChannel;
    private _initParamsByChannel;
    private _registerOnTickHook;
    private _unRegisterOnTickHook;
    private _tickCallbackName;
}
export {};
