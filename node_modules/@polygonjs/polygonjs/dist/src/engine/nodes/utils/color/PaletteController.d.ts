import { BaseNodeType, TypedNode } from '../../_Base';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { NodeContext } from '../../../poly/NodeContext';
type PaletteControllerCallbackMethod = (node: PaletteAbstractNode<any>) => void;
export declare const paletteControllerCallbackOptions: (method: PaletteControllerCallbackMethod) => {
    callback: (node: BaseNodeType) => void;
};
export declare class PaletteController<NC extends NodeContext> {
    private node;
    constructor(node: PaletteAbstractNode<NC>);
    static PARAM_CALLBACK_pickNext(node: PaletteAbstractNode<any>): void;
    static PARAM_CALLBACK_pickPrevious(node: PaletteAbstractNode<any>): void;
    static PARAM_CALLBACK_pickRandom(node: PaletteAbstractNode<any>): void;
    static PARAM_CALLBACK_updateColors(node: PaletteAbstractNode<any>): void;
    PARAM_CALLBACK_pickNext(): void;
    PARAM_CALLBACK_pickPrevious(): void;
    PARAM_CALLBACK_pickRandom(): void;
    private _batchUpdatesWithPalette;
    PARAM_CALLBACK_updateColors(): void;
    private _updateColors;
}
declare class PaletteAbstractNodeParamsConfig extends NodeParamsConfig {
    /** @param name of the palette */
    paletteName: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.STRING>;
    /** @param click to set the node to the next palette */
    pickNext: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BUTTON>;
    /** @param click to set the node to the previous palette */
    pickPrevious: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BUTTON>;
    /** @param click to set the node to a random palette */
    pickRandom: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BUTTON>;
    colorsCount: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.INTEGER>;
    /** @param palette color 1 */
    color1: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.COLOR>;
    /** @param palette color 2 */
    color2: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.COLOR>;
    /** @param palette color 3 */
    color3: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.COLOR>;
    /** @param palette color 4 */
    color4: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.COLOR>;
    /** @param palette color 5 */
    color5: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.COLOR>;
}
export declare class PaletteAbstractNode<NC extends NodeContext> extends TypedNode<NC, PaletteAbstractNodeParamsConfig> {
    paramsConfig: PaletteAbstractNodeParamsConfig;
    readonly paletteController: PaletteController<NC>;
}
export {};
