import { TypedMultipleParam } from './_Multiple';
import { Number2, StringOrNumber2 } from '../../types/GlobalTypes';
import { Vector2 } from 'three';
import { ParamType } from '../poly/ParamType';
import { FloatParam } from './Float';
import { ParamValuesTypeMap } from './types/ParamValuesTypeMap';
import { ParamInitValuesTypeMap } from './types/ParamInitValuesTypeMap';
export declare class Vector2Param extends TypedMultipleParam<ParamType.VECTOR2> {
    protected _value: Vector2;
    x: FloatParam;
    y: FloatParam;
    static type(): ParamType;
    componentNames(): Readonly<string[]>;
    defaultValueSerialized(): StringOrNumber2;
    _prefilterInvalidRawInput(rawInput: any): Vector2 | StringOrNumber2;
    valueSerialized(): Number2;
    private _copied_value;
    protected _copyValue(param: Vector2Param): void;
    protected _cloneRawInput(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR2]): Vector2 | StringOrNumber2;
    static areRawInputEqual(raw_input1: ParamInitValuesTypeMap[ParamType.VECTOR2], raw_input2: ParamInitValuesTypeMap[ParamType.VECTOR2]): boolean;
    static areValuesEqual(val1: ParamValuesTypeMap[ParamType.VECTOR2], val2: ParamValuesTypeMap[ParamType.VECTOR2]): boolean;
    initComponents(): void;
    setValueFromComponents(): void;
}
