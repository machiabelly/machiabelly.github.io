import { Number4, StringOrNumber4 } from '../../types/GlobalTypes';
import { TypedMultipleParam } from './_Multiple';
import { Vector4 } from 'three';
import { ParamType } from '../poly/ParamType';
import { FloatParam } from './Float';
import { ParamValuesTypeMap } from './types/ParamValuesTypeMap';
import { ParamInitValuesTypeMap } from './types/ParamInitValuesTypeMap';
export declare class Vector4Param extends TypedMultipleParam<ParamType.VECTOR4> {
    protected _value: Vector4;
    x: FloatParam;
    y: FloatParam;
    z: FloatParam;
    w: FloatParam;
    static type(): ParamType;
    componentNames(): Readonly<string[]>;
    defaultValueSerialized(): StringOrNumber4;
    _prefilterInvalidRawInput(rawInput: any): Vector4 | StringOrNumber4;
    valueSerialized(): Number4;
    private _copied_value;
    protected _copyValue(param: Vector4Param): void;
    protected _cloneRawInput(rawInput: ParamInitValuesTypeMap[ParamType.VECTOR4]): Vector4 | StringOrNumber4;
    static areRawInputEqual(rawInput1: ParamInitValuesTypeMap[ParamType.VECTOR4], rawInput2: ParamInitValuesTypeMap[ParamType.VECTOR4]): boolean;
    static areValuesEqual(val1: ParamValuesTypeMap[ParamType.VECTOR4], val2: ParamValuesTypeMap[ParamType.VECTOR4]): boolean;
    initComponents(): void;
    setValueFromComponents(): void;
}
