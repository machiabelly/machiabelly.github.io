"use strict";
import { Poly } from "../../../../engine/Poly";
import { CoreType } from "../../../Type";
import { NodeParamProxiesRegister } from "../../NodeParamProxiesRegister";
import { animBuilderCommonVars } from "../Common";
import { animBuilderStartTimeline } from "../StartTimeline";
import { AnimBuilderWithOp } from "../WithOp";
export function populateVarsForSingleNumber(param, targetValue, options) {
  if (!CoreType.isNumber(targetValue)) {
    Poly.warn(
      `TimelineBuilderProperty error: cannot animate float/integer param '${param.path()}' with targetValue`,
      targetValue
    );
    return;
  }
  const proxy = NodeParamProxiesRegister.paramProxy(param);
  if (!proxy) {
    return;
  }
  const keyframes = options.timelineBuilder.keyframes();
  const interpolant = keyframes ? keyframes.createInterpolant() : void 0;
  const vars = animBuilderCommonVars(options.timelineBuilder);
  vars.onUpdate = () => {
    proxy.update(interpolant);
  };
  if (keyframes) {
    targetValue = 1;
  }
  const operation = options.timelineBuilder.operation();
  vars.proxyValue = AnimBuilderWithOp(param.value, targetValue, operation);
  animBuilderStartTimeline({ ...options, vars, target: proxy, registerableProp: param });
}
export function populateVarsForNumber(options) {
  const { vars, targetValue, targetProperty, propertyNames, operation } = options;
  for (const property_name of propertyNames) {
    vars[property_name] = AnimBuilderWithOp(targetProperty, targetValue, operation);
  }
}
