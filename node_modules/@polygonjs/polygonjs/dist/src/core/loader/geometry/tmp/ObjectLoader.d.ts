export class ObjectLoader extends Loader<any, string> {
    constructor(manager: any);
    load(url: any, onLoad: any, onProgress: any, onError: any): void;
    loadAsync(url: any, onProgress: any): Promise<Object3D<import("three").Object3DEventMap>>;
    parse(json: any, onLoad: any): Object3D<import("three").Object3DEventMap>;
    parseAsync(json: any): Promise<Object3D<import("three").Object3DEventMap>>;
    parseShapes(json: any): {};
    parseSkeletons(json: any, object: any): {};
    parseGeometries(json: any, shapes: any): {};
    parseMaterials(json: any, textures: any): {};
    parseAnimations(json: any): {};
    parseImages(json: any, onLoad: any): {};
    parseImagesAsync(json: any): Promise<{}>;
    parseTextures(json: any, images: any): {};
    parseObject(data: any, geometries: any, materials: any, textures: any, animations: any): Object3D<import("three").Object3DEventMap>;
    bindSkeletons(object: any, skeletons: any): void;
}
import { Loader } from 'three';
import { Object3D } from 'three';
