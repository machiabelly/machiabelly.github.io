"use strict";
import {
  CorePhysicsAttribute,
  PhysicsRBDColliderType,
  physicsAttribNameLive,
  PhysicsRBDRadiusAttribute
} from "../PhysicsAttribute";
import { _getRBDFromObject } from "../PhysicsRBD";
import { getPhysicsRBDRadius, RBDCommonProperty } from "./_CommonHeightRadius";
import { touchRBDProperty } from "../../reactivity/RBDPropertyReactivity";
import { coreObjectClassFactory } from "../../geometry/CoreObjectFactory";
const EXPECTED_TYPE = PhysicsRBDColliderType.SPHERE;
export function createPhysicsSphere(PhysicsLib2, object) {
  const radius = CorePhysicsAttribute.getRadius(object) * object.scale.y;
  return PhysicsLib2.ColliderDesc.ball(radius);
}
const attributeRadiusLive = physicsAttribNameLive(PhysicsRBDRadiusAttribute.RADIUS);
export function currentRadius(object, collider) {
  const coreObjectClass = coreObjectClassFactory(object);
  let _currentRadius = coreObjectClass.attribValue(object, attributeRadiusLive);
  if (_currentRadius == null) {
    const shape = collider.shape;
    _currentRadius = shape.radius;
    coreObjectClass.setAttribute(object, attributeRadiusLive, _currentRadius);
  }
  return _currentRadius;
}
export function _getPhysicsRBDSphereRadius(object) {
  return getPhysicsRBDRadius(EXPECTED_TYPE, object);
}
export function _setPhysicsRBDSphereProperty(object, targetRadius, lerp, updateObjectMatrix) {
  const body = _getRBDFromObject(object);
  if (!body) {
    console.warn("no rbd found");
    return;
  }
  const colliderType = CorePhysicsAttribute.getColliderType(object);
  if (colliderType == null || colliderType != EXPECTED_TYPE) {
    return;
  }
  const collidersCount = body.numColliders();
  const originalRadiusAttrib = CorePhysicsAttribute.getRadius(object);
  for (let i = 0; i < collidersCount; i++) {
    const collider = body.collider(i);
    if (!collider) {
      return;
    }
    if (lerp < 1) {
      targetRadius = lerp * targetRadius + (1 - lerp) * currentRadius(object, collider);
    }
    collider.setRadius(targetRadius);
    const coreObjectClass = coreObjectClassFactory(object);
    coreObjectClass.setAttribute(object, attributeRadiusLive, targetRadius);
    touchRBDProperty(object, RBDCommonProperty.RADIUS);
    const newScale = targetRadius / originalRadiusAttrib;
    object.scale.set(newScale, newScale, newScale);
    if (updateObjectMatrix) {
      object.updateMatrix();
    }
  }
}
