import { PolyDictionary } from '../../../../types/GlobalTypes';
import { AttribSize, AttribType, GroupString } from '../../Constant';
import { CoreGroup } from '../../Group';
import { CoreObjectType, ObjectContent } from '../../ObjectContent';
import { CorePrimitive } from './CorePrimitive';
export declare function primitives<T extends CoreObjectType>(coreGroup: CoreGroup, target: CorePrimitive<T>[]): CorePrimitive<T>[];
export declare function primitiveAttribNamesFromCoreGroup(coreGroup: CoreGroup): string[];
export declare function primitiveAttribSizesFromCoreGroup(coreGroup: CoreGroup): PolyDictionary<AttribSize>;
export declare function primitiveAttribTypesFromCoreGroup(coreGroup: CoreGroup): PolyDictionary<AttribType>;
export declare function primitivesCountFromObject<T extends CoreObjectType>(object: ObjectContent<T>): number;
export declare function primitivesFromObject<T extends CoreObjectType>(object: ObjectContent<T>, target: CorePrimitive<T>[]): CorePrimitive<T>[];
export declare function primitivesFromObjectFromGroup<T extends CoreObjectType>(object: ObjectContent<T>, group: GroupString, target: CorePrimitive<T>[]): CorePrimitive<T>[];
export declare function primitiveAttributeNames<T extends CoreObjectType>(object: ObjectContent<T>): string[];
export declare function primitiveAttributeSizes<T extends CoreObjectType>(object: ObjectContent<T>): PolyDictionary<AttribSize>;
export declare function primitiveAttributeTypes<T extends CoreObjectType>(object: ObjectContent<T>): PolyDictionary<AttribType>;
