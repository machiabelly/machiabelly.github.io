"use strict";
import { BufferAttribute } from "three";
import { CoreType } from "../../Type";
export function addAttributesFromPoint(geometry, point, attributeNames) {
  const pointsCount = geometry.getAttribute("position").count;
  for (const attributeName of attributeNames) {
    addAttributeFromPoint(geometry, point, attributeName, pointsCount);
  }
}
function addAttributeFromPoint(geometry, point, attributeName, pointsCount) {
  const value = point.attribValue(attributeName);
  if (!CoreType.isString(value)) {
    const size = point.attribSize(attributeName);
    let values = new Array(pointsCount * size);
    switch (size) {
      case 1: {
        values.fill(value);
        break;
      }
      default: {
        for (let i = 0; i < pointsCount; i++) {
          value.toArray(values, i * size);
        }
      }
    }
    const attribute = new BufferAttribute(new Float32Array(values), size);
    geometry.setAttribute(attributeName, attribute);
  }
}
