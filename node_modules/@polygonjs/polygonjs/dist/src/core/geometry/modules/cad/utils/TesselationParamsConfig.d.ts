import { BaseNodeType } from '../../../../../engine/nodes/_Base';
import { Constructor } from '../../../../../types/GlobalTypes';
export declare function SOPCADTesselationParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param linear Tolerance */
        linearTolerance: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param angular Tolerance */
        angularTolerance: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param curve Abscissa */
        curveAbscissa: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param curve Tolerance */
        curveTolerance: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param display edges */
        displayEdges: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param edges color */
        edgesColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param display meshes */
        displayMeshes: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param meshes color */
        meshesColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param wireframe */
        wireframe: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
    };
} & TBase;
export declare function OBJCADTesselationParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param linear Tolerance */
        CADLinearTolerance: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param angular Tolerance */
        CADAngularTolerance: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param curve Abscissa */
        CADCurveAbscissa: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param curve Tolerance */
        CADCurveTolerance: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param display edges */
        CADDisplayEdges: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param edges color */
        CADEdgesColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param display meshes */
        CADDisplayMeshes: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param meshes color */
        CADMeshesColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param wireframe */
        CADWireframe: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
    };
} & TBase;
export declare const TESSELATION_PARAM_NAMES: Set<string>;
export declare function addCADTesselationParamsCallback(node: BaseNodeType, callback: () => void): void;
