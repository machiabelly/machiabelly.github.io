import { Vector3, BufferAttribute } from 'three';
import { ObjectGeometryMap, CoreObjectType, ObjectContent } from '../../ObjectContent';
import { CorePoint } from '../../entities/point/CorePoint';
import { PointAttributesDict } from '../../entities/point/Common';
import { SDFObject } from './SDFObject';
export declare class SDFPoint extends CorePoint<CoreObjectType.SDF> {
    protected _geometry?: ObjectGeometryMap[CoreObjectType.SDF];
    protected _object: SDFObject;
    constructor(object: SDFObject, index: number);
    object(): SDFObject;
    setIndex(index: number, object?: SDFObject): this;
    private _updateGeometry;
    geometry(): import("./manifold/manifold-encapsulated-types").Manifold | undefined;
    static addAttribute<T extends CoreObjectType>(object: ObjectContent<T>, attribName: string, attribute: BufferAttribute): void;
    static attributes<T extends CoreObjectType>(object: ObjectContent<T>): PointAttributesDict | undefined;
    static entitiesCount<T extends CoreObjectType>(object: ObjectContent<T>): number;
    position(target: Vector3): Vector3;
    normal(target: Vector3): Vector3;
    static userDataAttribs<T extends CoreObjectType>(object: ObjectContent<T>): {};
    static setIndexedAttribute<T extends CoreObjectType>(object: ObjectContent<T>, attribName: string, values: string[], indices: number[]): void;
    static attribValueIndex<T extends CoreObjectType>(object: ObjectContent<T>, index: number, attribName: string): number;
}
