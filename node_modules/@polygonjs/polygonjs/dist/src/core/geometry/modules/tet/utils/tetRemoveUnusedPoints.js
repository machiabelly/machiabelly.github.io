"use strict";
export function tetRemoveUnusedPoints(tetGeometry) {
  const usedPointIds = /* @__PURE__ */ new Set();
  tetGeometry.tetrahedrons.forEach((tet) => {
    tet.pointIds.forEach((pointId) => {
      usedPointIds.add(pointId);
    });
  });
  tetGeometry.points.forEach((point, pointId) => {
    if (!usedPointIds.has(pointId)) {
      tetGeometry.removePoint(pointId);
    }
  });
  return tetGeometry;
}
