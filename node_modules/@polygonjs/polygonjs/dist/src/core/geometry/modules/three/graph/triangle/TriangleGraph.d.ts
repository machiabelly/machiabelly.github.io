import { TriangleEdge } from './TriangleEdge';
import { TriangleNode } from './TriangleNode';
import { Number3 } from '../../../../../../types/GlobalTypes';
import { PrimitiveGraph } from '../../../../entities/primitive/PrimitiveGraph';
export declare class TriangleGraph extends PrimitiveGraph {
    private _nextTriangleId;
    private _trianglesById;
    private _edgesByTriangleId;
    private _edgesById;
    private _edgeIds;
    constructor();
    addTriangle(triangle: Number3): TriangleNode;
    removeTriangle(triangleId: number): void;
    traverseTriangles(callback: (triangle: TriangleNode) => void): void;
    edgesByTriangleId(id: number): TriangleEdge[] | undefined;
    triangle(triangleId: number): TriangleNode | undefined;
    edgeIds(target: string[]): string[];
    edge(edgeId: string): TriangleEdge | undefined;
    neighbourIndex(primitiveIndex: number, neighbourIndex: number, withSharedEdge: boolean): number;
    neighboursCount(primitiveIndex: number, withSharedEdge: boolean): number;
}
