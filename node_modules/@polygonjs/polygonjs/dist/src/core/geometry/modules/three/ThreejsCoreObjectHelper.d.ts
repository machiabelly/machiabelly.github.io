import { Object3D } from 'three';
import { PolyScene } from '../../../../engine/scene/PolyScene';
import { BaseSopNodeType } from '../../../../../src/engine/nodes/sop/_Base';
import { JsIConnectionPointTypeToDataTypeMap, ParamConvertibleJsType } from '../../../../engine/nodes/utils/io/connections/Js';
export interface CoreObjectHelperOptions<S extends PolyScene> {
    scene: S;
    object: Object3D;
}
interface CreateObjectOptions<S extends PolyScene> {
    object: Object3D;
}
type OnAttributeChangeCallback<T> = (newValue: T, prevValue: T) => void;
export declare class CoreObjectHelper<S extends PolyScene> {
    readonly options: CoreObjectHelperOptions<S>;
    private _watchStopHandles;
    readonly object: Object3D;
    constructor(options: CoreObjectHelperOptions<S>);
    dispose(): void;
    onAttributeUpdate<T extends ParamConvertibleJsType>(attribName: string, attribType: T, defaultValue: JsIConnectionPointTypeToDataTypeMap[T], callback: OnAttributeChangeCallback<JsIConnectionPointTypeToDataTypeMap[T]>): void;
}
type CreateCoreObjectHelper<S extends PolyScene, T extends CoreObjectHelper<S>> = (options: CreateObjectOptions<S>) => T;
export declare function objectFromNode<S extends PolyScene, T extends CoreObjectHelper<S>>(node: BaseSopNodeType, objectName: string, creatFunction: CreateCoreObjectHelper<S, T>): Promise<T | undefined>;
export {};
