"use strict";
import { cadGeometryTypeFromShape } from "../CadCommon";
import { CadGeometryType } from "../CadCommon";
import { Vector2 } from "three";
import { cadPnt2dTransform } from "../toObject3D/CadPnt2d";
import { cadGeom2dCurveTransform } from "../toObject3D/CadGeom2dCurve";
import { cadShapeTransform } from "../toObject3D/CadShapeCommon";
import { CadLoaderSync } from "../CadLoaderSync";
import { CoreCadType } from "../CadCoreType";
const t2 = new Vector2();
const p2 = new Vector2();
export function cadTransform(cadObject, t, r, s, p) {
  const newGeometry = cadGeometryTransform(cadObject.type, cadObject.cadGeometry(), t, r, s, p);
  if (newGeometry) {
    const oc = CadLoaderSync.oc();
    if (CoreCadType.isGeometryShape(newGeometry)) {
      const newType = cadGeometryTypeFromShape(oc, newGeometry);
      if (newType) {
        cadObject.setGeometry(newGeometry, newType);
      }
    } else {
    }
  }
}
export function cadGeometryTransform(type, geometry, t, r, s, p) {
  switch (type) {
    case CadGeometryType.POINT_2D: {
      t2.set(t.x, t.y);
      cadPnt2dTransform(geometry, t2);
      return geometry;
    }
    case CadGeometryType.CURVE_2D: {
      t2.set(t.x, t.y);
      p2.set(p.x, p.y);
      cadGeom2dCurveTransform(geometry, t2, r.z, s, p2);
      return geometry;
    }
    case CadGeometryType.VERTEX:
    case CadGeometryType.EDGE:
    case CadGeometryType.WIRE:
    case CadGeometryType.FACE:
    case CadGeometryType.SHELL:
    case CadGeometryType.SOLID:
    case CadGeometryType.COMPSOLID:
    case CadGeometryType.COMPOUND: {
      const newShape = cadShapeTransform(geometry, t, r, s, p);
      return newShape;
    }
  }
}
