import { TriangleGraph } from './TriangleGraph';
export declare function triangleGraphFromGeometry(geometry: THREE.BufferGeometry): TriangleGraph | undefined;
export declare function triangleGraphExpandEdges(graph: TriangleGraph, startEdgeIds: Readonly<Set<string>>, target: Set<string>, excluded?: Readonly<Set<string>>): void;
export declare function getFirstEdgeIdBetweenTriangles(graph: TriangleGraph, edgeIds: string[]): string | undefined;
export declare function sortEdgesFromLargestToSmallest(edgeIds: string[], edgeLengthById: Map<string, number>): void;
export declare function triangleGraphFindNextLargest(edgeLengthById: Map<string, number>, graph: TriangleGraph, startEdgeId: string, visited: Readonly<Set<string>>): string | undefined;
export declare function triangleGraphFindExpandedEdge(edgeLengthById: Map<string, number>, graph: TriangleGraph, startEdgeId: string, seed: number, step: number, irregularAmount: number, visited: Readonly<Set<string>>, randomSample3: (step: number) => string | undefined): string | undefined;
