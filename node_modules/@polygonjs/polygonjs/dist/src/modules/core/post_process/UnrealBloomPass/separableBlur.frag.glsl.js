export default "#include <common>\nvarying vec2 vUv;\nuniform sampler2D colorTexture;\nuniform vec2 texSize;\nuniform vec2 direction;\n\nfloat gaussianPdf(in float x, in float sigma) {\n	return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n}\nvoid main() {\n	vec2 invSize = 1.0 / texSize;\n	float fSigma = float(SIGMA);\n	float weightSum = gaussianPdf(0.0, fSigma);\n	vec3 diffuseSum = texture2D( colorTexture, vUv).rgb * weightSum;\n	for( int i = 1; i < KERNEL_RADIUS; i ++ ) {\n		float x = float(i);\n		float w = gaussianPdf(x, fSigma);\n		vec2 uvOffset = direction * invSize * x;\n		vec3 sample1 = texture2D( colorTexture, vUv + uvOffset).rgb;\n		vec3 sample2 = texture2D( colorTexture, vUv - uvOffset).rgb;\n		diffuseSum += (sample1 + sample2) * w;\n		weightSum += 2.0 * w;\n	}\n	gl_FragColor = vec4(diffuseSum/weightSum, 1.0);\n}";
