/**
 * Creates a Mesh Basic Material, which can be extended with GL nodes.
 *
 * @remarks
 * This node can create children, which will be GL nodes. The GLSL code generated by the nodes will extend the Material.
 *
 */

import {NodeParamsConfig} from '../utils/params/ParamsConfig';
import {
	UniformsTransparencyParamConfig,
	UniformsTransparencyController,
	UniformsTransparencyControllers,
} from './utils/UniformsTransparencyController';
import {
	AdvancedCommonParamConfig,
	AdvancedCommonController,
	AdvancedCommonControllers,
} from './utils/AdvancedCommonController';
import {MapParamConfig, TextureMapController, TextureMapControllers} from './utils/TextureMapController';
import {
	AlphaMapParamConfig,
	TextureAlphaMapController,
	TextureAlphaMapControllers,
} from './utils/TextureAlphaMapController';
import {ShaderAssemblerBasic} from '../gl/code/assemblers/materials/Basic';
import {BaseBuilderParamConfig, TypedBuilderMatNode} from './_BaseBuilder';
import {Poly} from '../../Poly';
import {TextureAOMapController, AOMapParamConfig, TextureAOMapControllers} from './utils/TextureAOMapController';
import {AssemblerName} from '../../poly/registers/assemblers/_BaseRegister';
import {FogParamConfig, UniformFogController, UniformFogControllers} from './utils/UniformsFogController';
import {
	WireframeShaderMaterialController,
	WireframeShaderMaterialParamsConfig,
	WireframeShaderMaterialControllers,
} from './utils/WireframeShaderMaterialController';
import {
	TextureEnvMapSimpleController,
	EnvMapSimpleParamConfig,
	TextureEnvMapSimpleControllers,
} from './utils/TextureEnvMapSimpleController';
import {DefaultFolderParamConfig} from './utils/DefaultFolder';
import {TexturesFolderParamConfig} from './utils/TexturesFolder';
import {AdvancedFolderParamConfig} from './utils/AdvancedFolder';
import {Material} from 'three';
import {MeshBasicMaterial} from 'three';
import {CustomMaterialName, IUniforms} from '../../../core/geometry/Material';
import {
	CustomMaterialMeshParamConfig,
	materialMeshAssemblerCustomMaterialRequested,
} from './utils/customMaterials/CustomMaterialMesh';
import {GlAssemblerController} from '../gl/code/Controller';
import {MatType} from '../../poly/registers/nodes/types/Mat';
interface MeshBasicBuilderControllers
	extends AdvancedCommonControllers,
		UniformFogControllers,
		TextureAlphaMapControllers,
		TextureAOMapControllers,
		TextureEnvMapSimpleControllers,
		TextureMapControllers,
		UniformsTransparencyControllers,
		WireframeShaderMaterialControllers {}

interface MeshBasicBuilderMaterial extends MeshBasicMaterial {
	vertexShader: string;
	fragmentShader: string;
	uniforms: IUniforms;
	customMaterials: {
		[key in CustomMaterialName]?: Material;
	};
}
class MeshBasicBuilderMatParamsConfig extends CustomMaterialMeshParamConfig(
	FogParamConfig(
		WireframeShaderMaterialParamsConfig(
			AdvancedCommonParamConfig(
				BaseBuilderParamConfig(
					/* advanced */
					AdvancedFolderParamConfig(
						EnvMapSimpleParamConfig(
							AOMapParamConfig(
								AlphaMapParamConfig(
									MapParamConfig(
										/* textures */
										TexturesFolderParamConfig(
											UniformsTransparencyParamConfig(DefaultFolderParamConfig(NodeParamsConfig))
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
) {}
const ParamsConfig = new MeshBasicBuilderMatParamsConfig();

export class MeshBasicBuilderMatNode extends TypedBuilderMatNode<
	MeshBasicBuilderMaterial,
	ShaderAssemblerBasic,
	MeshBasicBuilderMatParamsConfig
> {
	override paramsConfig = ParamsConfig;
	static override type() {
		return MatType.MESH_BASIC_BUILDER;
	}
	public override usedAssembler(): Readonly<AssemblerName.GL_MESH_BASIC> {
		return AssemblerName.GL_MESH_BASIC;
	}
	protected _createAssemblerController(): GlAssemblerController<ShaderAssemblerBasic> | undefined {
		return Poly.assemblersRegister.assembler(this, this.usedAssembler());
	}
	public override customMaterialRequested(customName: CustomMaterialName): boolean {
		return materialMeshAssemblerCustomMaterialRequested(this, customName);
	}
	readonly controllers: MeshBasicBuilderControllers = {
		advancedCommon: new AdvancedCommonController(this),
		alphaMap: new TextureAlphaMapController(this),
		aoMap: new TextureAOMapController(this),
		envMap: new TextureEnvMapSimpleController(this),
		uniformFog: new UniformFogController(this),
		map: new TextureMapController(this),
		uniformTransparency: new UniformsTransparencyController(this),
		wireframeShader: new WireframeShaderMaterialController(this),
	};
	protected override controllersList = Object.values(this.controllers);

	override async cook() {
		this._material = this._material || this.createMaterial();
		await Promise.all(this.controllersPromises(this._material));
		this.compileIfRequired(this._material);
		this._material.needsUpdate = true;

		this.setMaterial(this._material);
	}
}
