"use strict";
import { FrequencyShifter } from "tone/build/esm/effect/FrequencyShifter";
const DEFAULTS = { frequency: 0 };
import { TypedAudioNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
class FrequencyShifterAudioParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param frequency */
    this.frequency = ParamConfig.FLOAT(DEFAULTS.frequency, {
      range: [0, 100],
      rangeLocked: [true, false]
    });
  }
}
const ParamsConfig = new FrequencyShifterAudioParamsConfig();
export class FrequencyShifterAudioNode extends TypedAudioNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "frequencyShifter";
  }
  initializeNode() {
    this.io.inputs.setCount(1);
  }
  cook(inputContents) {
    const audioBuilder = inputContents[0];
    const effect = new FrequencyShifter({
      frequency: this.pv.frequency
    });
    const inputNode = audioBuilder.audioNode();
    if (inputNode) {
      inputNode.connect(effect);
    }
    audioBuilder.setAudioNode(effect);
    this.setAudioBuilder(audioBuilder);
  }
}
