/**
 * Sets a limit to how many events can be processed.
 *
 *
 */
import { TypedEventNode } from './_Base';
import { EventContext } from '../../scene/utils/events/_BaseEventsController';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
declare class LimitEventParamsConfig extends NodeParamsConfig {
    /** @param max number of events that can be processed */
    maxCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param resets the count */
    reset: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
}
export declare class LimitEventNode extends TypedEventNode<LimitEventParamsConfig> {
    paramsConfig: LimitEventParamsConfig;
    static type(): string;
    private _process_count;
    private _last_dispatched;
    initializeNode(): void;
    processEvent(event_context: EventContext<Event>): void;
    private processEventTrigger;
    private process_event_reset;
    static PARAM_CALLBACK_reset(node: LimitEventNode): void;
}
export {};
