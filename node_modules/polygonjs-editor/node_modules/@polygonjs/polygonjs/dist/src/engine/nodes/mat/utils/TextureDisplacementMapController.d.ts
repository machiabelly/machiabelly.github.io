import { Constructor } from '../../../../types/GlobalTypes';
import { TypedMatNode } from '../_Base';
import { BaseTextureMapController } from './_BaseTextureController';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { MeshMatcapMaterial } from 'three';
import { MeshStandardMaterial } from 'three';
import { MeshPhysicalMaterial } from 'three';
import { MeshNormalMaterial } from 'three';
import { MeshToonMaterial } from 'three';
import { MaterialTexturesRecord, SetParamsTextureNodesRecord } from './_BaseController';
export declare function DisplacementMapParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param toggle if you want to use a displacement map */
        useDisplacementMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the displacement map COP node */
        displacementMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
        /** @param displacement scale */
        displacementScale: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
        /** @param displacement bias */
        displacementBias: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & TBase;
type TextureDisplacementMapControllerCurrentMaterial = MeshMatcapMaterial | MeshNormalMaterial | MeshStandardMaterial | MeshPhysicalMaterial | MeshToonMaterial;
declare const TextureDisplacementMapParamsConfig_base: {
    new (...args: any[]): {
        /** @param toggle if you want to use a displacement map */
        useDisplacementMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the displacement map COP node */
        displacementMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
        /** @param displacement scale */
        displacementScale: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
        /** @param displacement bias */
        displacementBias: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & typeof NodeParamsConfig;
declare class TextureDisplacementMapParamsConfig extends TextureDisplacementMapParamsConfig_base {
}
export interface TextureDisplacementMapControllers {
    displacementMap: TextureDisplacementMapController;
}
declare abstract class TextureDisplacementMapMatNode extends TypedMatNode<TextureDisplacementMapControllerCurrentMaterial, TextureDisplacementMapParamsConfig> {
    controllers: TextureDisplacementMapControllers;
    material(): Promise<TextureDisplacementMapControllerCurrentMaterial | undefined>;
}
export declare class TextureDisplacementMapController extends BaseTextureMapController {
    protected node: TextureDisplacementMapMatNode;
    constructor(node: TextureDisplacementMapMatNode);
    initializeNode(): void;
    static update(node: TextureDisplacementMapMatNode): Promise<void>;
    update(): Promise<void>;
    updateMaterial(material: TextureDisplacementMapControllerCurrentMaterial): Promise<void>;
    getTextures(material: TextureDisplacementMapControllerCurrentMaterial, record: MaterialTexturesRecord): void;
    setParamsFromMaterial(material: TextureDisplacementMapControllerCurrentMaterial, record: SetParamsTextureNodesRecord): void;
}
export {};
