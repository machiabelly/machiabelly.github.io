/**
 * Creates a WebGLRenderer
 *
 * @param
 * By default, a camera will create its own renderer, with sensible defaults. But there may be cases where you want to override those defaults. In those situation, simply create this node, and set the camera renderer param to it.
 *
 */
import { TypedRopNode } from './_Base';
import { RopType } from '../../poly/registers/nodes/types/Rop';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { PathTracingRendererContainer } from './utils/pathTracing/PathTracingRendererContainer';
import { ModuleName } from '../../poly/registers/modules/Common';
declare class PathTracingRendererRopParamsConfig extends NodeParamsConfig {
    realtime: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    /** @param display samples count */
    displayDebug: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param useWorker */
    useWorker: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param samples */
    maxSamplesCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param resolutionScale */
    resolutionScale: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param bounces */
    bounces: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param bounces inside transmissive material */
    transmissiveBounces: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param stableNoise*/
    stableNoise: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param multipleImportanceSampling */
    multipleImportanceSampling: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param filterGlossyFactor */
    filterGlossyFactor: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param backgroundBlur*/
    backgroundBlur: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param environmentIntensity*/
    environmentIntensity: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    denoise: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    denoiseSigma: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    denoiseThreshold: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    denoiseKSigma: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param toggle on to have alpha on (change requires page reload) */
    /** @param toggle on to have antialias on (change requires page reload) */
    /** @param tiles */
    tiles: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param force update */
    sequenceRender: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    /** @param frame range */
    f: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param samples */
    samplesPerAnimationFrame: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param resolution */
    resolution: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR2>;
    /** @param fileName */
    fileName: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    framePadding: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class PathTracingRendererRopNode extends TypedRopNode<PathTracingRendererRopParamsConfig> {
    paramsConfig: PathTracingRendererRopParamsConfig;
    static type(): Readonly<RopType.PATH_TRACING>;
    requiredModules(): ModuleName[];
    private _pathTracingRenderer;
    private _webGLRenderer;
    protected initializeNode(): void;
    dispose(): void;
    private _createWebGLRenderer;
    private _createPathTracingRenderer;
    renderer(canvas: HTMLCanvasElement, gl: WebGLRenderingContext): PathTracingRendererContainer;
    cook(): void;
    private _updateRenderer;
    static PARAM_CALLBACK_generate(node: PathTracingRendererRopNode): void;
    private _paramCallbackGenerate;
    static PARAM_CALLBACK_update(node: PathTracingRendererRopNode): void;
    private _paramCallbackUpdate;
}
export {};
