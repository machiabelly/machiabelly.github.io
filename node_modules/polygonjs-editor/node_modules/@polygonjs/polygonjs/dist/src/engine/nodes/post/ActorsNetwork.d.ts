/**
 * A subnet to create actor nodes
 *
 */
import { ParamLessBaseNetworkPostNode } from './_BaseManager';
import { NodeContext, NetworkNodeType } from '../../poly/NodeContext';
import { JsNodeChildrenMap } from '../../poly/registers/nodes/Js';
import { BaseJsNodeType } from '../js/_Base';
import { Constructor, valueof } from '../../../types/GlobalTypes';
import { NodeCreateOptions } from '../utils/hierarchy/ChildrenController';
import { ActorPersistedConfig } from '../js/code/assemblers/actor/ActorPersistedConfig';
import { AssemblerName } from '../../poly/registers/assemblers/_BaseRegister';
import { JsAssemblerController } from '../js/code/Controller';
import { JsAssemblerActor } from '../js/code/assemblers/actor/ActorAssembler';
import { ActorCompilationController } from '../../../core/actor/ActorCompilationController';
export declare class ActorsNetworkPostNode extends ParamLessBaseNetworkPostNode {
    static type(): NetworkNodeType;
    protected _childrenControllerContext: NodeContext;
    createNode<S extends keyof JsNodeChildrenMap>(node_class: S, options?: NodeCreateOptions): JsNodeChildrenMap[S];
    createNode<K extends valueof<JsNodeChildrenMap>>(node_class: Constructor<K>, options?: NodeCreateOptions): K;
    children(): BaseJsNodeType[];
    nodesByType<K extends keyof JsNodeChildrenMap>(type: K): JsNodeChildrenMap[K][];
    childrenAllowed(): boolean;
    sceneReadonly(): boolean;
    readonly persisted_config: ActorPersistedConfig;
    assemblerController(): JsAssemblerController<JsAssemblerActor> | undefined;
    usedAssembler(): Readonly<AssemblerName.JS_ACTOR>;
    protected _assemblerController: JsAssemblerController<JsAssemblerActor> | undefined;
    private _createAssemblerController;
    readonly compilationController: ActorCompilationController;
    compile(): void;
    cook(): void;
}
