export default "const float width = resolution.x;\nconst float height = resolution.y;\n\nvec3 __FUNCTION__NAME__(\n	sampler2D texturePosition,\n	vec2 particleUv,\n	vec3 currentPosition,\n	// repulse\n	bool repulse,\n	float repulseAmount,\n	float repulseMinDist,\n	float repulseMaxDist,\n	// attract\n	bool attract,\n	float attractAmount,\n	float attractStartDist,\n	float attractMidDist,\n	float attractEndDist\n	){\n\n	vec3 otherPosition, dir;\n	float distSquared, dist;\n	vec3 repulseForce = vec3( 0.0, 0.0, 0.0);\n	vec3 attractForce = vec3( 0.0, 0.0, 0.0);\n	int repulsorsCount = 0;\n	int attractorsCount = 0;\n\n	float repulseRange = abs(repulseMaxDist - repulseMinDist);\n	float attractRange0 = abs(attractMidDist - attractStartDist);\n	float attractRange1 = abs(attractEndDist - attractMidDist);\n\n	for ( float y = 0.0; y < height; y++ ) {\n		for ( float x = 0.0; x < width; x++ ) {\n\n			// ignore if this is self\n			if(x == particleUv.x && y == particleUv.y) continue;\n\n			vec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;\n			otherPosition = texture2D( texturePosition, ref ).__COMPONENT__;\n\n			dir = otherPosition - currentPosition;\n			dist = length( dir );\n\n			if(repulse){\n				if(dist < repulseMaxDist){\n					float repulseRatio = (dist - repulseMinDist) / repulseRange;\n					repulseRatio = max(repulseRatio, 0.0);\n					repulseForce += -repulseAmount * (1.0 - repulseRatio) * dir;\n					repulsorsCount++;\n				}\n			}\n			if(attract){\n				if( dist > attractStartDist && dist < attractMidDist ){\n					float attractRatio0 = (dist - attractStartDist) / attractRange0;\n					attractForce += attractAmount * attractRatio0 * dir;\n					attractorsCount++;\n				} else {\n					if( dist > attractMidDist && dist < attractEndDist ){\n						float attractRatio1 = (dist - attractMidDist) / attractRange1;\n						attractForce += attractAmount * (1.0-attractRatio1) * dir;\n						attractorsCount++;\n					}\n				}\n			}\n		}\n	}\n\n	vec3 force = vec3( 0.0, 0.0, 0.0);\n	if(repulsorsCount > 0){\n		force += repulseForce / float(repulsorsCount);\n	}\n	if(attractorsCount > 0){\n		force += attractForce / float(attractorsCount);\n	}\n	return force;\n\n}";
