/**
 * Returns the value previous returned by the input node
 *
 *
 */
import { TypedJsNode } from './_Base';
import { JsConnectionPointType } from '../utils/io/connections/Js';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare enum PreviousValueJsNodeInputName {
    current = "current",
    offset = "offset"
}
declare class PreviousJsParamsConfig extends NodeParamsConfig {
    offset: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class PreviousValueJsNode extends TypedJsNode<PreviousJsParamsConfig> {
    paramsConfig: PreviousJsParamsConfig;
    static type(): string;
    static readonly OUTPUT_NAME = "prev";
    initializeNode(): void;
    paramDefaultValue(name: PreviousValueJsNodeInputName): number;
    protected _expectedInputTypes(): JsConnectionPointType[];
    protected _expectedInputName(index: number): string;
    protected _expectedOutputName(index: number): string;
    protected _expectedOutputTypes(): JsConnectionPointType[];
    setLines(shadersCollectionController: JsLinesCollectionController): void;
    private _functionName;
}
export {};
