export default "\n\nvec3 __FUNCTION__NAME__(\n	sampler2D texturePosition,\n	vec2 particleUv,\n	vec3 currentPosition,\n	// attract\n	float amount,\n	float startDist,\n	float midDist,\n	float endDist\n	){\n\n	vec3 otherPosition, otherVelocity, dir;\n	float distSquared, dist;\n	vec3 attractForce = vec3( 0.0, 0.0, 0.0);\n	int attractorsCount = 0;\n\n	float range0 = abs(midDist - startDist);\n	float range1 = abs(endDist - midDist);\n\n	const float width = resolution.x;\n	const float height = resolution.y;\n	for ( float y = 0.0; y < height; y++ ) {\n		for ( float x = 0.0; x < width; x++ ) {\n\n			// ignore if this is self\n			if(x == particleUv.x && y == particleUv.y) continue;\n\n			vec2 ref = vec2( x + 0.5, y + 0.5 ) / resolution.xy;\n			otherPosition = texture2D( texturePosition, ref ).__COMPONENT__;\n\n			dir = otherPosition - currentPosition;\n			dist = length( dir );\n\n			if( dist > startDist && dist < midDist ){\n				float attractRatio0 = (dist - startDist) / range0;\n				attractForce += amount * attractRatio0 * dir;\n				attractorsCount++;\n			} else {\n				if( dist > midDist && dist < endDist ){\n					float attractRatio1 = (dist - midDist) / range1;\n					attractForce += amount * (1.0-attractRatio1) * dir;\n					attractorsCount++;\n				}\n			}\n		}\n	}\n\n	vec3 force = vec3( 0.0, 0.0, 0.0);\n	if(attractorsCount > 0){\n		force += attractForce / float(attractorsCount);\n	}\n	return force;\n\n}";
