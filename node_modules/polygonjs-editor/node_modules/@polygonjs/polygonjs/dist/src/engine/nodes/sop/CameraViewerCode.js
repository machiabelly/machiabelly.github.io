"use strict";
import { TypedSopNode } from "./_Base";
import { CameraViewerCodeSopOperation } from "../../operations/sop/CameraViewerCode";
import { HierarchyParamConfigAll } from "../utils/params/ParamsConfig";
import { CameraSopNodeType } from "../../poly/NodeContext";
import { CoreCameraViewerCodeParamConfig } from "../../../core/camera/CoreCameraViewerCodeController";
class CameraViewerCodeSopParamsConfig extends CoreCameraViewerCodeParamConfig(HierarchyParamConfigAll) {
}
const ParamsConfig = new CameraViewerCodeSopParamsConfig();
export class CameraViewerCodeSopNode extends TypedSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return CameraSopNodeType.VIEWER_CODE;
  }
  initializeNode() {
    this.io.inputs.setCount(1);
    this.io.inputs.initInputsClonedState(CameraViewerCodeSopOperation.INPUT_CLONED_STATE);
  }
  cook(inputCoreGroups) {
    this._operation = this._operation || new CameraViewerCodeSopOperation(this._scene, this.states, this);
    const coreGroup = this._operation.cook(inputCoreGroups, this.pv);
    this.setCoreGroup(coreGroup);
  }
}
