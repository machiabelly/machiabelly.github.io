import { BaseFileMultiSopNode } from './utils/file/_BaseSopFileMulti';
import { SopTypeFileMulti } from '../../poly/registers/nodes/types/Sop';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { GLTFLoaderHandler } from '../../../core/loader/geometry/GLTF';
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
declare class FileMultiGLTFParamsConfig extends NodeParamsConfig {
    /** @param url to load the geometry from */
    url: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param uses draco compression */
    draco: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param uses ktx2 compression */
    ktx2: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param sets the matrixAutoUpdate attribute for the objects loaded */
    matrixAutoUpdate: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param reload the geometry */
    reload: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BUTTON>;
}
export declare class FileMultiGLTFSopNode extends BaseFileMultiSopNode<GLTF, FileMultiGLTFParamsConfig> {
    paramsConfig: FileMultiGLTFParamsConfig;
    static type(): SopTypeFileMulti;
    protected _createLoader(url: string): GLTFLoaderHandler;
    protected _loadWithLoader(loader: GLTFLoaderHandler): Promise<import("three").Object3D<import("three").Object3DEventMap>[] | undefined>;
}
export {};
