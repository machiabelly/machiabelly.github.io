"use strict";
import { UniformsUtils } from "three";
import { ShaderMaterial } from "three";
import { ShaderLib } from "three";
import { RGBADepthPacking } from "three";
import { BasicDepthPacking } from "three";
import { ShaderAssemblerMaterial } from "../../_BaseMaterial";
import TemplateVertex from "../../../../templates/custom/points/CustomPointsDepth.vert.glsl";
import TemplateFragment from "../../../../templates/custom/mesh/CustomMeshDepth.frag.glsl";
import { ShaderName } from "../../../../../../utils/shaders/ShaderName";
const INSERT_DEFINE_AFTER_MAP = /* @__PURE__ */ new Map([
  [ShaderName.VERTEX, "// INSERT DEFINES"],
  [ShaderName.FRAGMENT, "// INSERT DEFINES"]
]);
const INSERT_BODY_AFTER_MAP = /* @__PURE__ */ new Map([
  [ShaderName.VERTEX, "// INSERT BODY"],
  [ShaderName.FRAGMENT, "// INSERT BODY"]
]);
export class ShaderAssemblerCustomPointsDepth extends ShaderAssemblerMaterial {
  // _color_declaration() { return 'vec4 diffuseColor' }
  // _template_shader(){ return ShaderLib.standard }
  templateShader() {
    const template = ShaderLib.depth;
    const uniforms = UniformsUtils.clone(template.uniforms);
    uniforms["size"] = { value: 1 };
    uniforms["scale"] = { value: 1 };
    return {
      vertexShader: TemplateVertex,
      fragmentShader: TemplateFragment,
      uniforms
    };
  }
  insertDefineAfter(shader_name) {
    return INSERT_DEFINE_AFTER_MAP.get(shader_name);
  }
  insertBodyAfter(shader_name) {
    return INSERT_BODY_AFTER_MAP.get(shader_name);
  }
  depthPacking() {
    return RGBADepthPacking;
  }
  createMaterial() {
    const template_shader = this.templateShader();
    return new ShaderMaterial({
      // vertexColors: VertexColors,
      // side: FrontSide,
      // transparent: true,
      // fog: true,
      // lights: true,
      defines: {
        USE_SIZEATTENUATION: 1,
        DEPTH_PACKING: this.depthPacking()
      },
      uniforms: UniformsUtils.clone(template_shader.uniforms),
      vertexShader: template_shader.vertexShader,
      fragmentShader: template_shader.fragmentShader
    });
  }
}
export class ShaderAssemblerCustomPointsDepthForRender extends ShaderAssemblerCustomPointsDepth {
  depthPacking() {
    return BasicDepthPacking;
  }
}
