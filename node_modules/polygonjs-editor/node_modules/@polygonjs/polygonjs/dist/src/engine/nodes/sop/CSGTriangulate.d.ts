/**
 * Converts input CSG objects to polygon.
 *
 *
 */
import { CSGSopNode } from './_BaseCSG';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { CoreGroup } from '../../../core/geometry/Group';
import { SopType } from '../../poly/registers/nodes/types/Sop';
declare const CSGTriangulateSopParamsConfig_base: {
    new (...args: any[]): {
        facetAngle: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
        linesColor: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
        meshesColor: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
        wireframe: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    };
} & typeof NodeParamsConfig;
declare class CSGTriangulateSopParamsConfig extends CSGTriangulateSopParamsConfig_base {
}
export declare class CSGTriangulateSopNode extends CSGSopNode<CSGTriangulateSopParamsConfig> {
    readonly paramsConfig: CSGTriangulateSopParamsConfig;
    static type(): SopType;
    protected initializeNode(): void;
    cook(inputCoreGroups: CoreGroup[]): Promise<void>;
}
export {};
