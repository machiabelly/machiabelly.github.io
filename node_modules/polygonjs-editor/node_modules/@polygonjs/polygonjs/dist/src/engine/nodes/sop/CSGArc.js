"use strict";
import { CSGSopNode } from "./_BaseCSG";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { vector2ToCsgVec2 } from "../../../core/geometry/modules/csg/CsgVecToVector";
import { step } from "../../../core/geometry/modules/csg/CsgConstant";
import { SopType } from "../../poly/registers/nodes/types/Sop";
import { primitives } from "@jscad/modeling";
const { arc } = primitives;
class CSGArcSopParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param radius */
    this.radius = ParamConfig.FLOAT(1, { range: [0, 10] });
    /** @param segments */
    this.segments = ParamConfig.INTEGER(32, {
      range: [4, 128],
      rangeLocked: [true, false]
    });
    /** @param center */
    this.center = ParamConfig.VECTOR2([0, 0]);
    /** @param make tangents */
    this.makeTangent = ParamConfig.BOOLEAN(0);
    /** @param start angle */
    this.startAngle = ParamConfig.FLOAT(0, {
      range: [0, 2 * Math.PI],
      rangeLocked: [true, true],
      step
    });
    /** @param end angle */
    this.endAngle = ParamConfig.FLOAT("$PI", {
      range: [0, 2 * Math.PI],
      rangeLocked: [true, true],
      step
    });
  }
}
const ParamsConfig = new CSGArcSopParamsConfig();
export class CSGArcSopNode extends CSGSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this._center = [0, 0];
  }
  static type() {
    return SopType.CSG_ARC;
  }
  cook(inputCoreGroups) {
    vector2ToCsgVec2(this.pv.center, this._center);
    const { radius, segments, makeTangent, startAngle, endAngle } = this.pv;
    const geo = arc({
      center: this._center,
      radius,
      segments,
      makeTangent,
      startAngle,
      endAngle
    });
    this.setCSGGeometry(geo);
  }
}
