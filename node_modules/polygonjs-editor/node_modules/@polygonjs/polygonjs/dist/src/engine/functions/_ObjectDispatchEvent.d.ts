import { Object3D } from 'three';
import { ObjectNamedFunction0, ObjectNamedFunction1, ObjectNamedFunction2, ObjectNamedFunction3 } from './_Base';
import { ActorEvaluator } from '../nodes/js/code/assemblers/actor/ActorEvaluator';
type Listener = () => void;
export declare function onObjectDispatchFunctionNameByEventName(eventName: string): string;
export declare class objectDispatchEvent extends ObjectNamedFunction1<[string]> {
    static type(): string;
    func(object3D: Object3D, eventName: string): void;
}
export declare class getObjectLastDispatchedEventName extends ObjectNamedFunction0 {
    static type(): string;
    func(object3D: Object3D): string;
}
export declare class objectAddEventListeners extends ObjectNamedFunction3<[string, ActorEvaluator, Listener]> {
    static type(): string;
    func(object3D: Object3D, eventNamesList: string, evaluator: ActorEvaluator, boundListener: Listener): string;
}
export declare class objectAddOnBeforeDeleteEventListener extends ObjectNamedFunction2<[ActorEvaluator, Listener]> {
    static type(): string;
    func(object3D: Object3D, evaluator: ActorEvaluator, boundListener: Listener): string;
}
export {};
