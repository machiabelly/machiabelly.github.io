"use strict";
import { TypedJsNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { JsConnectionPoint, JsConnectionPointType } from "../utils/io/connections/Js";
import { Ray } from "three";
import { Poly } from "../../Poly";
class RayJsParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param ray origin */
    this.origin = ParamConfig.VECTOR3([0, 0, 0]);
    /** @param ray direction */
    this.direction = ParamConfig.VECTOR3([0, 0, 1]);
  }
}
const ParamsConfig = new RayJsParamsConfig();
export class RayJsNode extends TypedJsNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "ray";
  }
  initializeNode() {
    super.initializeNode();
    this.io.outputs.setNamedOutputConnectionPoints([
      new JsConnectionPoint(JsConnectionPointType.RAY, JsConnectionPointType.RAY)
    ]);
  }
  setLines(shadersCollectionController) {
    const origin = this.variableForInputParam(shadersCollectionController, this.p.origin);
    const direction = this.variableForInputParam(shadersCollectionController, this.p.direction);
    const out = this.jsVarName(JsConnectionPointType.RAY);
    const tmpVarName = shadersCollectionController.addVariable(this, new Ray());
    const func = Poly.namedFunctionsRegister.getFunction("raySet", this, shadersCollectionController);
    const bodyLine = func.asString(origin, direction, tmpVarName);
    shadersCollectionController.addBodyOrComputed(this, [
      { dataType: JsConnectionPointType.RAY, varName: out, value: bodyLine }
    ]);
  }
}
