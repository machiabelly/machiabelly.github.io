"use strict";
import { LineType } from "./LineType";
import { NetworkChildNodeType } from "../../../../poly/NodeContext";
const LINE_SUFFIXES = {
  [LineType.FUNCTION_DECLARATION]: "",
  [LineType.DEFINE]: ";",
  [LineType.BODY]: ";"
};
const LINE_PREFIXES = {
  [LineType.FUNCTION_DECLARATION]: "",
  [LineType.DEFINE]: "",
  [LineType.BODY]: "	"
};
const BLOCK_START_LAST_CHAR = "{";
const BLOCK_END_LAST_CHAR = "}";
export class CodeFormatter {
  static nodeComment(node, lineType) {
    let line = `// ${node.path()}`;
    let prefix = LINE_PREFIXES[lineType];
    if (lineType == LineType.BODY) {
      let distance = this.nodeDistanceToMaterial(node);
      if (node.type() == NetworkChildNodeType.OUTPUT) {
        distance += 1;
      }
      prefix = prefix.repeat(distance);
    }
    if (lineType == LineType.BODY) {
      line = `${prefix}${line}`;
    }
    return line;
  }
  static lineWrap(node, line, lineType) {
    let add_suffix = true;
    if (line.includes("#if") || line.includes("#else") || line.includes("#endif") || line.includes("#pragma unroll_loop_")) {
      add_suffix = false;
    }
    let prefix = LINE_PREFIXES[lineType];
    if (lineType == LineType.BODY) {
      prefix = prefix.repeat(this.nodeDistanceToMaterial(node));
    }
    line = `${prefix}${line}`;
    if (add_suffix) {
      const last_char = line[line.length - 1];
      const suffix = LINE_SUFFIXES[lineType];
      const lineIsEmpty = line.trim().length == 0;
      const lineIsComment = line.trim().startsWith("//");
      if (last_char != suffix && last_char != BLOCK_START_LAST_CHAR && last_char != BLOCK_END_LAST_CHAR && !lineIsEmpty && !lineIsComment) {
        line += suffix;
      }
    }
    return line;
  }
  static post_line_separator(lineType) {
    return lineType == LineType.BODY ? "	" : "";
  }
  static nodeDistanceToMaterial(node) {
    const parent = node.parent();
    if (!parent) {
      return 0;
    }
    if (parent.context() != node.context()) {
      return 1;
    } else {
      return 1 + this.nodeDistanceToMaterial(parent);
    }
  }
}
