/**
 * Transfers an attribute from right input to left input
 *
 * @remarks
 * This can be useful to create heatmap.
 *
 */
import { TypedSopNode } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
declare class AttribTransferSopParamsConfig extends NodeParamsConfig {
    /** @param source group to transfer from (right input, or input 1) */
    srcGroup: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param dest group to transfer to (left input, or input 0) */
    destGroup: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param name of the attribute to transfer */
    name: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param max number of samples to use */
    maxSamplesCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param max distance to search points to transfer from */
    distanceThreshold: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param blend width */
    blendWidth: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class AttribTransferSopNode extends TypedSopNode<AttribTransferSopParamsConfig> {
    paramsConfig: AttribTransferSopParamsConfig;
    static type(): SopType;
    initializeNode(): void;
    cook(inputCoreGroups: CoreGroup[]): Promise<void>;
    private _transferAttributes;
    private _addAttributeIfRequired;
    private _transferAttributesForPoint;
    private _interpolatePoints;
}
export {};
