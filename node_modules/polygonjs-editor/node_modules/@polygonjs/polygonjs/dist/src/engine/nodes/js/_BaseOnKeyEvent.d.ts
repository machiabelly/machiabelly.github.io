/**
 * sends a trigger when a keyboard key is pressed
 *
 *
 */
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { BaseUserInputJsNode } from './_BaseUserInput';
import { CoreEventEmitter } from '../../../core/event/CoreEventEmitter';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare class BaseOnKeyEventJsParamsConfig extends NodeParamsConfig {
    /** @param set which element triggers the event */
    element: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param space separated list of accepted key codes. If this is empty then any key is accepted. */
    keyCodes: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param requires ctrlKey */
    ctrlKey: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param requires altKey */
    altKey: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param requires shiftKey */
    shiftKey: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param requires metaKey */
    metaKey: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare abstract class BaseOnKeyEventJsNode extends BaseUserInputJsNode<BaseOnKeyEventJsParamsConfig> {
    readonly paramsConfig: BaseOnKeyEventJsParamsConfig;
    isTriggering(): boolean;
    initializeNode(): void;
    eventEmitter(): CoreEventEmitter;
    setEventEmitter(emitter: CoreEventEmitter): void;
    setTriggeringLines(shadersCollectionController: JsLinesCollectionController, triggeredMethods: string): void;
}
export {};
