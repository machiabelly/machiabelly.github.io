export default "// https://iquilezles.org/articles/distfunctions/\n\n\n/*\n*\n* SDF PRIMITIVES\n*\n*/\nfloat sdSphere( vec3 p, float s )\n{\n	return length(p)-s;\n}\nfloat sdCutSphere( vec3 p, float r, float h )\n{\n	// sampling independent computations (only depend on shape)\n	float w = sqrt(r*r-h*h);\n\n	// sampling dependant computations\n	vec2 q = vec2( length(p.xz), p.y );\n	float s = max( (h-r)*q.x*q.x+w*w*(h+r-2.0*q.y), h*q.x-w*q.y );\n	return (s<0.0) ? length(q)-r :\n				(q.x<w) ? h - q.y :\n					length(q-vec2(w,h));\n}\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n	// sampling independent computations (only depend on shape)\n	float w = sqrt(r*r-h*h);\n	\n	// sampling dependant computations\n	vec2 q = vec2( length(p.xz), p.y );\n	return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n							abs(length(q)-r) ) - t;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n	vec3 q = abs(p) - b*0.5;\n	return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n	vec3 q = abs(p) - b*0.5;\n	return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n		p = abs(p  )-b*0.5;\n	vec3 q = abs(p+e)-e;\n	return min(min(\n		length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n		length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n		length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n	vec3 pa = p - a, ba = b - a;\n	float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n	return length( pa - ba*h ) - r;\n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n	p.y -= clamp( p.y, 0.0, h );\n	return length( p ) - r;\n}\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n	// c is the sin/cos of the angle, h is height\n	// Alternatively pass q instead of (c,h),\n	// which is the point at the base in 2D\n	vec2 q = h*vec2(c.x/c.y,-1.0);\n\n	vec2 w = vec2( length(p.xz), p.y );\n	vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n	vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n	float k = sign( q.y );\n	float d = min(dot( a, a ),dot(b, b));\n	float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n	return sqrt(d)*sign(s);\n}\nfloat sdConeWrapped(vec3 pos, float angle, float height){\n	return sdCone(pos, vec2(sin(angle), cos(angle)), height);\n}\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n	float b = (r1-r2)/h;\n	float a = sqrt(1.0-b*b);\n\n	vec2 q = vec2( length(p.xz), p.y );\n	float k = dot(q,vec2(-b,a));\n	if( k<0.0 ) return length(q) - r1;\n	if( k>a*h ) return length(q-vec2(0.0,h)) - r2;\n	return dot(q, vec2(a,b) ) - r1;\n}\nfloat sdOctogonPrism( in vec3 p, in float r, float h )\n{\n	const vec3 k = vec3(-0.9238795325,  // sqrt(2+sqrt(2))/2 \n						0.3826834323,   // sqrt(2-sqrt(2))/2\n						0.4142135623 ); // sqrt(2)-1 \n	// reflections\n	p = abs(p);\n	p.xy -= 2.0*min(dot(vec2( k.x,k.y),p.xy),0.0)*vec2( k.x,k.y);\n	p.xy -= 2.0*min(dot(vec2(-k.x,k.y),p.xy),0.0)*vec2(-k.x,k.y);\n	// polygon side\n	p.xy -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n	vec2 d = vec2( length(p.xy)*sign(p.y), p.z-h );\n	return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n	const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n	p = abs(p);\n	p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n	vec2 d = vec2(\n		length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n		p.z-h.y );\n	return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdHorseshoe( in vec3 p, in float angle, in float r, in float le, vec2 w )\n{\n	vec2 c = vec2(cos(angle),sin(angle));\n	p.x = abs(p.x);\n	float l = length(p.xy);\n	p.xy = mat2(-c.x, c.y, \n			c.y, c.x)*p.xy;\n	p.xy = vec2((p.y>0.0 || p.x>0.0)?p.x:l*sign(-c.x),\n				(p.x>0.0)?p.y:l );\n	p.xy = vec2(p.x,abs(p.y-r))-vec2(le,0.0);\n	\n	vec2 q = vec2(length(max(p.xy,0.0)) + min(0.0,max(p.x,p.y)),p.z);\n	vec2 d = abs(q) - w;\n	return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n	vec3 q = abs(p);\n	return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\nfloat sdPyramid( vec3 p, float h)\n{\n	float m2 = h*h + 0.25;\n\n	p.xz = abs(p.xz);\n	p.xz = (p.z>p.x) ? p.zx : p.xz;\n	p.xz -= 0.5;\n\n	vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n\n	float s = max(-q.x,0.0);\n	float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n\n	float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n	float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n\n	float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n\n	return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n	// n must be normalized\n	return dot(p,n) + h;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n	vec2 q = vec2(length(p.xz)-t.x,p.y);\n	return length(q)-t.y;\n}\nfloat sdCappedTorus(in vec3 p, in float an, in float ra, in float rb)\n{\n	vec2 sc = vec2(sin(an),cos(an));\n	p.x = abs(p.x);\n	float k = (sc.y*p.x>sc.x*p.z) ? dot(p.xz,sc) : length(p.xz);\n	return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n// c is the sin/cos of the desired cone angle\nfloat sdSolidAngle(vec3 pos, vec2 c, float radius)\n{\n	vec2 p = vec2( length(pos.xz), pos.y );\n	float l = length(p) - radius;\n	float m = length(p - c*clamp(dot(p,c),0.0,radius) );\n	return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\nfloat sdSolidAngleWrapped(vec3 pos, float angle, float radius){\n	return sdSolidAngle(pos, vec2(sin(angle), cos(angle)), radius);\n}\nfloat sdTube( vec3 p, float r )\n{\n	return length(p.xz)-r;\n}\nfloat sdTubeCapped( vec3 p, float h, float r )\n{\n	vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n	return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c, float thickness )\n{\n	vec3 ba = b - a; vec3 pa = p - a;\n	vec3 cb = c - b; vec3 pb = p - b;\n	vec3 ac = a - c; vec3 pc = p - c;\n	vec3 nor = cross( ba, ac );\n\n	return - thickness + sqrt(\n		(sign(dot(cross(ba,nor),pa)) +\n		sign(dot(cross(cb,nor),pb)) +\n		sign(dot(cross(ac,nor),pc))<2.0)\n		?\n		min( min(\n		dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n		dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n		dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n		:\n		dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\nfloat udQuad( vec3 p, vec3 a, vec3 b, vec3 c, vec3 d, float thickness )\n{\n	vec3 ba = b - a; vec3 pa = p - a;\n	vec3 cb = c - b; vec3 pb = p - b;\n	vec3 dc = d - c; vec3 pc = p - c;\n	vec3 ad = a - d; vec3 pd = p - d;\n	vec3 nor = cross( ba, ad );\n\n	return - thickness + sqrt(\n		(sign(dot(cross(ba,nor),pa)) +\n		sign(dot(cross(cb,nor),pb)) +\n		sign(dot(cross(dc,nor),pc)) +\n		sign(dot(cross(ad,nor),pd))<3.0)\n		?\n		min( min( min(\n		dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n		dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n		dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ),\n		dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )\n		:\n		dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n/*\n*\n* SDF OPERATIONS\n*\n*/\nfloat SDFUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat SDFSubtract( float d1, float d2 ) { return max(-d1,d2); }\nfloat SDFIntersect( float d1, float d2 ) { return max(d1,d2); }\n\nfloat SDFSmoothUnion( float d1, float d2, float k ) {\n	float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n	return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat SDFSmoothSubtract( float d1, float d2, float k ) {\n	float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n	return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat SDFSmoothIntersect( float d1, float d2, float k ) {\n	float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n	return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nvec4 SDFElongateFast( in vec3 p, in vec3 h )\n{\n	return vec4( p-clamp(p,-h,h), 0.0 );\n}\nvec4 SDFElongateSlow( in vec3 p, in vec3 h )\n{\n	vec3 q = abs(p)-h;\n	return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\nfloat SDFOnion( in float sdf, in float thickness )\n{\n	return abs(sdf)-thickness;\n}";
