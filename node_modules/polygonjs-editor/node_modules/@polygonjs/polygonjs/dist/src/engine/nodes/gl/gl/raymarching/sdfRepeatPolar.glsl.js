export default "\n/*\nSDF Repeat in polar coordinates\n*/\n// vec3 SDFRepeatPolar( vec3 p, in vec3 c )\n// {\n// 	vec3 polar = cartesianToPolar(p);\n// 	polar.x = SDFRepeat(polar.x, c.x);\n// 	polar.y = SDFRepeat(polar.y, c.y);\n// 	polar.z = SDFRepeat(polar.z, c.z);\n// 	return polarToCartesian(polar);\n// }\n// vec3 SDFRepeatPolarX( vec3 p, in vec3 c )\n// {\n// 	vec3 polar = cartesianToPolar(p);\n// 	polar.x = SDFRepeat(polar.x, c.x);\n// 	return polarToCartesian(polar);\n// }\n// vec3 SDFRepeatPolarY( vec3 p, in vec3 c )\n// {\n// 	vec3 polar = cartesianToPolar(p);\n// 	polar.y = SDFRepeat(polar.y, c.y);\n// 	return polarToCartesian(polar);\n// }\nvec3 SDFRepeatPolarZ( in vec3 p, in float c )\n{\n	vec3 polar = cartesianToPolar(p);\n	polar.z = SDFRepeat(polar.z, c);\n	return polarToCartesian(polar);\n}\n// vec3 SDFRepeatPolarXY( vec3 p, in vec3 c )\n// {\n// 	vec3 polar = cartesianToPolar(p);\n// 	polar.x = SDFRepeat(polar.x, c.x);\n// 	polar.y = SDFRepeat(polar.y, c.y);\n// 	return polarToCartesian(polar);\n// }\n// vec3 SDFRepeatPolarXZ( vec3 p, in vec3 c )\n// {\n// 	vec3 polar = cartesianToPolar(p);\n// 	polar.x = SDFRepeat(polar.x, c.x);\n// 	polar.z = SDFRepeat(polar.z, c.z);\n// 	return polarToCartesian(polar);\n// }\n// vec3 SDFRepeatPolarYZ( vec3 p, in vec3 c )\n// {\n// 	vec3 polar = cartesianToPolar(p);\n// 	polar.y = SDFRepeat(polar.y, c.y);\n// 	polar.z = SDFRepeat(polar.z, c.z);\n// 	return polarToCartesian(polar);\n// }";
