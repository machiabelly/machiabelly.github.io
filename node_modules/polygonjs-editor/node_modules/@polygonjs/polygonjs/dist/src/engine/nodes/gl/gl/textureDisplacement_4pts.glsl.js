export default "float textureDisplacementDisplace__COMPONENT__(sampler2D displacementMap, float amount, vec2 vUv) {\n	return texture2D(displacementMap, vUv).__COMPONENT__ * amount;\n}\n\nTextureDisplacementResult textureDisplacement__COMPONENT__(\n	sampler2D displacementMap,\n	vec2 vUv,\n	vec2 textureSize,\n	float amount,\n	vec3 position,\n	vec3 normal,\n	vec2 tangentsPosOffset\n	){\n\n	TextureDisplacementResult result;\n\n	result.position = position + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, vUv );\n\n	vec3 tangent = vec3(0.0, 0.0, 1.0);\n	vec3 bitangent = vec3(1.0, 0.0, 0.0);\n	vec2 texelSize = vec2( 1.0 / textureSize.x, 1.0 / textureSize.y );\n\n	// tangent\n	vec3 PosT0 = position + tangent * tangentsPosOffset.y;\n	vec3 PosT1 = position - tangent * tangentsPosOffset.y;\n	vec2 uvT0 = vUv + vec2(0.0, -texelSize.y);\n	vec2 uvT1 = vUv + vec2(0.0, +texelSize.y);\n\n	// bittangent\n	vec3 PosBT0 = position + bitangent * tangentsPosOffset.x;\n	vec3 PosBT1 = position - bitangent * tangentsPosOffset.x;\n	vec2 uvBT0 = vUv + vec2(+texelSize.x, 0.0);\n	vec2 uvBT1 = vUv + vec2(-texelSize.x, 0.0);\n\n	// disp\n	vec3 dispT0 = PosT0 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvT0 );\n	vec3 dispT1 = PosT1 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvT1 );\n	vec3 dispBT0 = PosBT0 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvBT0 );\n	vec3 dispBT1 = PosBT1 + normal * textureDisplacementDisplace__COMPONENT__( displacementMap, amount, uvBT1 );\n\n	vec3 dispT = normalize(dispT0 - dispT1);\n	vec3 dispBT = normalize(dispBT0 - dispBT1);\n	result.normal = normalize(cross(dispT, dispBT));\n\n	return result;\n\n}";
