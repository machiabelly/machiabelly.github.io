import { TypedSopNode } from './../../_Base';
import { NodeParamsConfig } from '../../../utils/params/ParamsConfig';
import { BaseFileSopOperation } from '../../../../operations/sop/utils/File/_BaseFileOperation';
import { Group } from 'three';
interface FileSopNodeOptions {
    type: string;
    operation: typeof BaseFileSopOperation;
    extensions: string[];
}
declare class BaseFileParamsConfigResult extends NodeParamsConfig {
    url: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.STRING>;
    matrixAutoUpdate: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
    reload: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BUTTON>;
}
export declare class FileDummySopOperation extends BaseFileSopOperation<Group> {
    static type(): Readonly<'fileDummy'>;
    protected _createGeoLoaderHandler(params: any): any;
}
export declare class BaseFileSopNodeFactoryResult extends TypedSopNode<BaseFileParamsConfigResult> {
}
export declare function fileSopNodeFactory(options: FileSopNodeOptions): typeof BaseFileSopNodeFactoryResult;
export {};
