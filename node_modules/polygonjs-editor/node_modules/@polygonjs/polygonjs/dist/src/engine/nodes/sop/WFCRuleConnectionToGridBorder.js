"use strict";
import { TypedSopNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { SopType } from "../../poly/registers/nodes/types/Sop";
import { InputCloneMode } from "../../poly/InputCloneMode";
import { ALL_SIDES } from "../../../core/wfc/WFCCommon";
import { GRID_BORDER_ID, GRID_BORDER_SIDE_NAME } from "../../../core/wfc/WFCConstant";
import { CoreWFCTileAttribute } from "../../../core/wfc/WFCAttributes";
import { createRuleObject } from "../../../core/wfc/WFCRule";
import { stringMatchMask } from "../../../core/String";
class WFCRuleConnectionToGridBorderSopParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param src tile id */
    this.tileId = ParamConfig.STRING("*");
    /** @param side name */
    this.sideName = ParamConfig.STRING("*");
  }
}
const ParamsConfig = new WFCRuleConnectionToGridBorderSopParamsConfig();
export class WFCRuleConnectionToGridBorderSopNode extends TypedSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return SopType.WFC_RULE_CONNECTION_TO_GRID_BORDER;
  }
  initializeNode() {
    this.io.inputs.setCount(1);
    this.io.inputs.initInputsClonedState(InputCloneMode.FROM_NODE);
  }
  async cook(inputCoreGroups) {
    const coreGroup0 = inputCoreGroups[0];
    const inputObjects = coreGroup0.threejsObjects();
    const { tileId, sideName } = this.pv;
    const tileObjects = inputObjects.filter(
      (tileObject) => stringMatchMask(CoreWFCTileAttribute.getTileId(tileObject), tileId)
    );
    const outputObjects = [...inputObjects];
    for (const tile of tileObjects) {
      const tileId2 = CoreWFCTileAttribute.getTileId(tile);
      for (const side0 of ALL_SIDES) {
        const sideName0 = CoreWFCTileAttribute.getSideName(tile, side0);
        if (sideName0 && stringMatchMask(sideName0, sideName)) {
          const ruleObject = createRuleObject({
            id0: tileId2,
            id1: GRID_BORDER_ID,
            side0,
            side1: GRID_BORDER_SIDE_NAME
          });
          outputObjects.push(ruleObject);
        }
      }
    }
    this.setObjects(outputObjects);
  }
}
