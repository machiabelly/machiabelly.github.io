"use strict";
import { Vibrato } from "tone/build/esm/effect/Vibrato";
const DEFAULTS = {
  depth: 0.1,
  frequency: 5,
  maxDelay: 5e-3
};
import { TypedAudioNode } from "./_Base";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
class VibratoAudioParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param maxDelay */
    this.maxDelay = ParamConfig.FLOAT(DEFAULTS.maxDelay, {
      range: [0, 1],
      rangeLocked: [true, false]
    });
    /** @param frequency */
    this.frequency = ParamConfig.FLOAT(DEFAULTS.frequency, {
      range: [0, 10],
      rangeLocked: [true, false]
    });
    /** @param depth */
    this.depth = ParamConfig.FLOAT(DEFAULTS.depth, {
      range: [0, 1],
      rangeLocked: [true, true]
    });
  }
}
const ParamsConfig = new VibratoAudioParamsConfig();
export class VibratoAudioNode extends TypedAudioNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "vibrato";
  }
  initializeNode() {
    this.io.inputs.setCount(1);
  }
  cook(inputContents) {
    const audioBuilder = inputContents[0];
    const effect = this._createEffect();
    const inputNode = audioBuilder.audioNode();
    if (inputNode) {
      inputNode.connect(effect);
    }
    audioBuilder.setAudioNode(effect);
    this.setAudioBuilder(audioBuilder);
  }
  _createEffect() {
    return new Vibrato({
      maxDelay: this.pv.maxDelay,
      frequency: this.pv.frequency,
      depth: this.pv.depth
    });
  }
}
