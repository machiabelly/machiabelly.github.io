/**
 * Receives multiple events
 *
 * @remarks
 * This is useful when you want to allow an downstream node to be triggered by multiple possible events
 *
 */
import { TypedEventNode } from './_Base';
import { EventContext } from '../../scene/utils/events/_BaseEventsController';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
declare class AnyEventParamsConfig extends NodeParamsConfig {
    /** @param toggle on to ensure events are transfered */
    active: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param number of possible events */
    inputsCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class AnyEventNode extends TypedEventNode<AnyEventParamsConfig> {
    paramsConfig: AnyEventParamsConfig;
    static type(): string;
    initializeNode(): void;
    private _expected_input_types;
    protected _input_name(index: number): string;
    processEvent(event_context: EventContext<Event>): Promise<void>;
}
export {};
