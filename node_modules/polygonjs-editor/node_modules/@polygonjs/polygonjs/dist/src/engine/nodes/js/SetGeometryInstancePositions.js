"use strict";
import { TypedJsNode } from "./_Base";
import { NodeParamsConfig } from "../utils/params/ParamsConfig";
import { JsConnectionPointType } from "../utils/io/connections/Js";
import { inputObject3D, setObject3DOutputLine } from "./_BaseObject3D";
import { Poly } from "../../Poly";
export const SetGeometryInstancePositionsInputName = {
  [JsConnectionPointType.TRIGGER]: JsConnectionPointType.TRIGGER,
  [JsConnectionPointType.OBJECT_3D]: JsConnectionPointType.OBJECT_3D,
  position: "position",
  lerp: "lerp",
  attributeNeedsUpdate: "attributeNeedsUpdate"
};
const INPUT_NAMES = [
  SetGeometryInstancePositionsInputName.trigger,
  SetGeometryInstancePositionsInputName.Object3D,
  SetGeometryInstancePositionsInputName.position,
  SetGeometryInstancePositionsInputName.lerp,
  SetGeometryInstancePositionsInputName.attributeNeedsUpdate
];
const DefaultValues = {
  [SetGeometryInstancePositionsInputName.lerp]: 1,
  [SetGeometryInstancePositionsInputName.attributeNeedsUpdate]: true
};
class SetGeometryInstancePositionsJsParamsConfig extends NodeParamsConfig {
}
const ParamsConfig = new SetGeometryInstancePositionsJsParamsConfig();
export class SetGeometryInstancePositionsJsNode extends TypedJsNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "setGeometryInstancePositions";
  }
  initializeNode() {
    super.initializeNode();
    this.io.connection_points.set_expected_input_types_function(this.expectedInputTypes.bind(this));
    this.io.connection_points.set_expected_output_types_function(this._expectedOutputTypes.bind(this));
    this.io.connection_points.set_output_name_function(
      (i) => [JsConnectionPointType.TRIGGER, JsConnectionPointType.OBJECT_3D][i]
    );
    this.io.connection_points.set_input_name_function(this._expectedInputName.bind(this));
  }
  paramDefaultValue(name) {
    return DefaultValues[name];
  }
  expectedInputTypes() {
    return [
      JsConnectionPointType.TRIGGER,
      JsConnectionPointType.OBJECT_3D,
      JsConnectionPointType.VECTOR3_ARRAY,
      JsConnectionPointType.FLOAT,
      JsConnectionPointType.BOOLEAN
    ];
  }
  _expectedOutputTypes() {
    return [JsConnectionPointType.TRIGGER, JsConnectionPointType.OBJECT_3D];
  }
  _expectedInputName(index) {
    return INPUT_NAMES[index];
  }
  setLines(linesController) {
    setObject3DOutputLine(this, linesController);
  }
  setTriggerableLines(shadersCollectionController) {
    const object3D = inputObject3D(this, shadersCollectionController);
    const positions = this.variableForInput(
      shadersCollectionController,
      SetGeometryInstancePositionsInputName.position
    );
    const lerp = this.variableForInput(shadersCollectionController, SetGeometryInstancePositionsInputName.lerp);
    const attributeNeedsUpdate = this.variableForInput(
      shadersCollectionController,
      SetGeometryInstancePositionsInputName.attributeNeedsUpdate
    );
    const func = Poly.namedFunctionsRegister.getFunction(
      "setGeometryInstancePositions",
      this,
      shadersCollectionController
    );
    const bodyLine = func.asString(object3D, positions, lerp, attributeNeedsUpdate);
    shadersCollectionController.addTriggerableLines(this, [bodyLine]);
  }
}
