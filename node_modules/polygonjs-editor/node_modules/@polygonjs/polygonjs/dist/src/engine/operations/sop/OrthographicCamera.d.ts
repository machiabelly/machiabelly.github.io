import { BaseSopOperation } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { OrthographicCamera, Vector3 } from 'three';
import { InputCloneMode } from '../../../engine/poly/InputCloneMode';
import { DefaultOperationParams } from '../../../core/operations/_Base';
import { CameraNodeType } from '../../poly/NodeContext';
import type { BaseNodeType } from '../../nodes/_Base';
interface CreateOrthographicCameraParams {
    size: number;
    near: number;
    far: number;
}
interface OrthographicCameraSopParams extends CreateOrthographicCameraParams, DefaultOperationParams {
    size: number;
    position: Vector3;
    rotation: Vector3;
    showHelper: boolean;
    matrixAutoUpdate: boolean;
    name: string;
}
interface AttributeOptions {
    size: number;
}
export declare class OrthographicCameraSopOperation extends BaseSopOperation {
    static readonly DEFAULT_PARAMS: OrthographicCameraSopParams;
    static readonly INPUT_CLONED_STATE = InputCloneMode.NEVER;
    static type(): Readonly<CameraNodeType.ORTHOGRAPHIC>;
    static onRegister: import("../../poly/registers/nodes/NodesRegister").OnNodeRegisterCallback;
    cook(inputCoreGroups: CoreGroup[], params: OrthographicCameraSopParams): CoreGroup;
    static createCamera(params: CreateOrthographicCameraParams, nodeGenerator?: BaseNodeType): OrthographicCamera;
    static setCameraAttributes(camera: OrthographicCamera, options: AttributeOptions): void;
}
export {};
