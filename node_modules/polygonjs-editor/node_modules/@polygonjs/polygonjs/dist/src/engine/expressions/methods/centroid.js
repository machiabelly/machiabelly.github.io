"use strict";
import { BaseMethod } from "./_Base";
import { Box3, Vector3 } from "three";
const tmpBox = new Box3();
const tmpCenter = new Vector3();
export class CentroidExpression extends BaseMethod {
  static requiredArguments() {
    return [
      ["string", "path to node"],
      ["string", "component_name, x,y or z"]
    ];
  }
  findDependency(args) {
    return this.createDependencyFromIndexOrPath(args);
  }
  async processArguments(args) {
    if (args.length >= 1) {
      const index_or_path = args[0];
      const component_name = args[1];
      const container = await this.getReferencedNodeContainer(index_or_path);
      if (container) {
        const coreGroup = container.coreContent();
        if (coreGroup) {
          coreGroup.boundingBox(tmpBox);
          tmpBox.getCenter(tmpCenter);
          if (component_name) {
            const value = tmpCenter[component_name];
            if (value != null) {
              return value;
            } else {
              return 0;
            }
          } else {
            return tmpCenter;
          }
        }
      }
    }
    return 0;
  }
}
