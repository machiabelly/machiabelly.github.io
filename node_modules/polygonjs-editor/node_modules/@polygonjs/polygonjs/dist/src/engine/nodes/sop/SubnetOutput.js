"use strict";
import { TypedSopNode } from "./_Base";
import { NodeParamsConfig } from "../utils/params/ParamsConfig";
import { InputCloneMode } from "../../poly/InputCloneMode";
import { NetworkChildNodeType } from "../../poly/NodeContext";
class SopSubnetOutputSopParamsConfig extends NodeParamsConfig {
}
const ParamsConfig = new SopSubnetOutputSopParamsConfig();
export class SubnetOutputSopNode extends TypedSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return NetworkChildNodeType.OUTPUT;
  }
  initializeNode() {
    this.io.inputs.setCount(1);
    this.io.outputs.setHasNoOutput();
    this.io.inputs.initInputsClonedState(InputCloneMode.NEVER);
  }
  cook(inputCoreGroups) {
    this.setCoreGroup(inputCoreGroups[0]);
  }
}
