import { AMSynthAudioNode } from '../../../nodes/audio/AMSynth';
import { AutoFilterAudioNode } from '../../../nodes/audio/AutoFilter';
import { AutoWahAudioNode } from '../../../nodes/audio/AutoWah';
import { BitCrusherAudioNode } from '../../../nodes/audio/BitCrusher';
import { ChebyshevAudioNode } from '../../../nodes/audio/Chebyshev';
import { ChorusAudioNode } from '../../../nodes/audio/Chorus';
import { DistortionAudioNode } from '../../../nodes/audio/Distortion';
import { EnvelopeAudioNode } from '../../../nodes/audio/Envelope';
import { FFTAudioNode } from '../../../nodes/audio/FFT';
import { FMSynthAudioNode } from '../../../nodes/audio/FMSynth';
import { FeedbackDelayAudioNode } from '../../../nodes/audio/FeedbackDelay';
import { FetchAudioNode } from '../../../nodes/audio/Fetch';
import { FileAudioNode } from '../../../nodes/audio/File';
import { FrequencyShifterAudioNode } from '../../../nodes/audio/FrequencyShifter';
import { MeterAudioNode } from '../../../nodes/audio/Meter';
import { MonoSynthAudioNode } from '../../../nodes/audio/MonoSynth';
import { NoiseAudioNode } from '../../../nodes/audio/Noise';
import { NullAudioNode } from '../../../nodes/audio/Null';
import { PhaserAudioNode } from '../../../nodes/audio/Phaser';
import { PingPongDelayAudioNode } from '../../../nodes/audio/PingPongDelay';
import { PitchShiftAudioNode } from '../../../nodes/audio/PitchShift';
import { PlayInstrumentAudioNode } from '../../../nodes/audio/PlayInstrument';
import { PolySynthAudioNode } from '../../../nodes/audio/PolySynth';
import { ReverbAudioNode } from '../../../nodes/audio/Reverb';
import { SamplerAudioNode } from '../../../nodes/audio/Sampler';
import { StereoWidenerAudioNode } from '../../../nodes/audio/StereoWidener';
import { SwitchAudioNode } from '../../../nodes/audio/Switch';
import { SynthAudioNode } from '../../../nodes/audio/Synth';
import { TremoloAudioNode } from '../../../nodes/audio/Tremolo';
import { UserMediaAudioNode } from '../../../nodes/audio/UserMedia';
import { VibratoAudioNode } from '../../../nodes/audio/Vibrato';
import { VolumeAudioNode } from '../../../nodes/audio/Volume';
import { WaveformAudioNode } from '../../../nodes/audio/Waveform';
import { ActorsNetworkAudioNode } from '../../../nodes/audio/ActorsNetwork';
import { AnimationsNetworkAudioNode } from '../../../nodes/audio/AnimationsNetwork';
import { AudioNetworkAudioNode } from '../../../nodes/audio/AudioNetwork';
import { CopNetworkAudioNode } from '../../../nodes/audio/CopNetwork';
import { EventsNetworkAudioNode } from '../../../nodes/audio/EventsNetwork';
import { MaterialsNetworkAudioNode } from '../../../nodes/audio/MaterialsNetwork';
import { PostProcessNetworkAudioNode } from '../../../nodes/audio/PostProcessNetwork';
import { RenderersNetworkAudioNode } from '../../../nodes/audio/RenderersNetwork';
export interface AudioNodeChildrenMap {
    AMSynth: AMSynthAudioNode;
    autoFilter: AutoFilterAudioNode;
    autoWah: AutoWahAudioNode;
    bitCrusher: BitCrusherAudioNode;
    chebyshev: ChebyshevAudioNode;
    chorus: ChorusAudioNode;
    distortion: DistortionAudioNode;
    envelope: EnvelopeAudioNode;
    FFT: FFTAudioNode;
    FMSynth: FMSynthAudioNode;
    feedbackDelay: FeedbackDelayAudioNode;
    fetch: FetchAudioNode;
    file: FileAudioNode;
    frequencyShifter: FrequencyShifterAudioNode;
    meter: MeterAudioNode;
    monoSynth: MonoSynthAudioNode;
    noise: NoiseAudioNode;
    null: NullAudioNode;
    phaser: PhaserAudioNode;
    pingPongDelay: PingPongDelayAudioNode;
    pitchShift: PitchShiftAudioNode;
    playInstrument: PlayInstrumentAudioNode;
    polySynth: PolySynthAudioNode;
    reverb: ReverbAudioNode;
    sampler: SamplerAudioNode;
    stereoWidener: StereoWidenerAudioNode;
    switch: SwitchAudioNode;
    synth: SynthAudioNode;
    tremolo: TremoloAudioNode;
    userMedia: UserMediaAudioNode;
    vibrato: VibratoAudioNode;
    volume: VolumeAudioNode;
    waveform: WaveformAudioNode;
    actorsNetwork: ActorsNetworkAudioNode;
    animationsNetwork: AnimationsNetworkAudioNode;
    audioNetwork: AudioNetworkAudioNode;
    copNetwork: CopNetworkAudioNode;
    eventsNetwork: EventsNetworkAudioNode;
    materialsNetwork: MaterialsNetworkAudioNode;
    postProcessNetwork: PostProcessNetworkAudioNode;
    renderersNetwork: RenderersNetworkAudioNode;
}
import { PolyEngine } from '../../../Poly';
export declare class AudioRegister {
    static run(poly: PolyEngine): void;
}
