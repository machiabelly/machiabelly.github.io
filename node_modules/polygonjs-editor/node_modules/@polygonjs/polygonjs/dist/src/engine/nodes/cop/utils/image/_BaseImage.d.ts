import { TypedCopNode } from './../../_Base';
import { BaseNodeType } from '../../../_Base';
import { NodeParamsConfig } from '../../../utils/params/ParamsConfig';
import { TextureParamsController } from './../../utils/TextureParamsController';
import { BaseCoreImageLoader } from '../../../../../core/loader/texture/_BaseImageLoader';
interface CopImageNodeFactoryOptions {
    type: string;
    defaultUrl: string;
    extensions: string[];
    getLoader: (url: string, node: BaseNodeType) => BaseCoreImageLoader;
}
declare const BaseImageCopParamsConfig_base: {
    new (...args: any[]): {
        checkFileType: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
    };
} & {
    new (...args: any[]): {
        tcolorSpace: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        colorSpace: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.STRING>;
        tmapping: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        mapping: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
        twrap: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        wrapS: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
        wrapT: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
        tminFilter: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        minFilter: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
        tmagFilter: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        magFilter: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
        tanisotropy: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        useRendererMaxAnisotropy: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        anisotropy: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
        tflipY: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        flipY: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        ttransform: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        offset: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.VECTOR2>;
        repeat: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.VECTOR2>;
        rotation: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.FLOAT>;
        center: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.VECTOR2>;
        tadvanced: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        tformat: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        format: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
        ttype: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BOOLEAN>;
        type: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.INTEGER>;
    };
} & {
    new (...args: any[]): {
        /** @param url to fetch the image from */
        url: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.STRING>;
        /** @param reload the image */
        reload: import("../../../utils/params/ParamsConfig").ParamTemplate<import("../../../../index_all").ParamType.BUTTON>;
    };
} & typeof NodeParamsConfig;
declare class BaseImageCopParamsConfig extends BaseImageCopParamsConfig_base {
}
export declare class copImageNodeFactoryFactoryResult extends TypedCopNode<BaseImageCopParamsConfig> {
    paramsConfig: BaseImageCopParamsConfig;
    readonly textureParamsController: TextureParamsController;
}
export declare function copImageNodeFactoryFactory(options: CopImageNodeFactoryOptions): typeof copImageNodeFactoryFactoryResult;
export {};
