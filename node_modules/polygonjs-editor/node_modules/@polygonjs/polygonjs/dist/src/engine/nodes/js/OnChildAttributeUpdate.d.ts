/**
 * sends a trigger when a child attribute has been updated
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsConnectionPointType, ParamConvertibleJsType } from '../utils/io/connections/Js';
import { JsType } from '../../poly/registers/nodes/types/Js';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
declare enum OnChildAttributeUpdateInputName {
    attribName = "attribName"
}
declare class OnChildAttributeUpdateJsParamsConfig extends NodeParamsConfig {
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class OnChildAttributeUpdateJsNode extends TypedJsNode<OnChildAttributeUpdateJsParamsConfig> {
    readonly paramsConfig: OnChildAttributeUpdateJsParamsConfig;
    static type(): JsType;
    isTriggering(): boolean;
    static readonly OUTPUT_NEW_VALUES = "newValues";
    static readonly OUTPUT_PREV_VALUES = "previousValues";
    initializeNode(): void;
    private _currentConnectionType;
    private _nextAttribName;
    paramDefaultValue(name: OnChildAttributeUpdateInputName): string;
    setAttribType(type: ParamConvertibleJsType): void;
    attribType(): JsConnectionPointType;
    setAttribName(attribName: string): void;
    attributeName(): string;
    setLines(shadersCollectionController: JsLinesCollectionController): void;
    setTriggeringLines(shadersCollectionController: JsLinesCollectionController, triggeredMethods: string): void;
}
export {};
