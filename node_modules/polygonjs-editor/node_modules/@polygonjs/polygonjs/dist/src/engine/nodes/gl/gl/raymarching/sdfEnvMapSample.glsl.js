export default "\nstruct EnvMapProps {\n	vec3 tint;\n	float intensity;\n	float roughness;\n	float fresnel;\n	float fresnelPower;\n};\nuniform sampler2D envMap;\nuniform float envMapIntensity;\nuniform float roughness;\n#ifdef ROTATE_ENV_MAP_Y\n	uniform float envMapRotationY;\n#endif\nvec3 envMapSample(vec3 rayDir, float envMapRoughness){\n	// http://www.pocketgl.com/reflections/\n	vec3 env = vec3(0.);\n	// vec2 uv = vec2( atan( -rayDir.z, -rayDir.x ) * RECIPROCAL_PI2 + 0.5, rayDir.y * 0.5 + 0.5 );\n	// vec3 env = texture2D(map, uv).rgb;\n	#ifdef ENVMAP_TYPE_CUBE_UV\n		#ifdef ROTATE_ENV_MAP_Y\n			rayDir = rotateWithAxisAngle(rayDir, vec3(0.,1.,0.), envMapRotationY);\n		#endif\n		env = textureCubeUV(envMap, rayDir, envMapRoughness * roughness).rgb;\n	#endif\n	return env;\n}\nvec3 envMapSampleWithFresnel(vec3 rayDir, EnvMapProps envMapProps, vec3 n, vec3 cameraPosition){\n	// http://www.pocketgl.com/reflections/\n	vec3 env = envMapSample(rayDir, envMapProps.roughness);\n	float fresnel = pow(1.-dot(normalize(cameraPosition), n), envMapProps.fresnelPower);\n	float fresnelFactor = (1.-envMapProps.fresnel) + envMapProps.fresnel*fresnel;\n	return env * envMapIntensity * envMapProps.tint * envMapProps.intensity * fresnelFactor;\n}";
