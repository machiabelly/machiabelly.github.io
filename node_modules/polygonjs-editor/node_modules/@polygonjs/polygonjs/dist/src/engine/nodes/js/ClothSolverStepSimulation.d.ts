/**
 * Steps through a cloth simulation
 *
 *
 */
import { TypedJsNode } from './_Base';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
export declare enum ClothSolverStepSimulationOutput {
    TEXTURE_SIZE = "tSize",
    TEXTURE_POSITION0 = "tPosition0",
    TEXTURE_POSITION1 = "tPosition1",
    TEXTURE_NORMAL = "tNormal",
    TEXTURE_ORIGINAL_RT = "tOriginalRT",
    TEXTURE_VISCOSITY_SPRING_T = "tViscositySpringT",
    TEXTURE_PREVIOUS_RT0 = "tPreviousRT0",
    TEXTURE_PREVIOUS_RT1 = "tPreviousRT1",
    TEXTURE_TARGET_RT0 = "targetRT0",
    TEXTURE_TARGET_RT1 = "targetRT1",
    TEXTURE_NORMALS_RT = "tNormalsRT",
    TEXTURE_POSITION_RT0 = "tPositionRT0",
    TEXTURE_POSITION_RT1 = "tPositionRT1",
    TEXTURE_ADJACENT_RT0 = "tAdjacentsRT0",
    TEXTURE_ADJACENT_RT1 = "tAdjacentsRT1",
    TEXTURE_DISTANCE_RT0 = "tDistanceRT0",
    TEXTURE_DISTANCE_RT1 = "tDistanceRT1",
    MATERIAL_INTEGRATION = "integrationMat"
}
declare class ClothSolverStepSimulationJsParamsConfig extends NodeParamsConfig {
    stepsCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    constraintInfluence: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    viscosity: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    spring: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
}
export declare class ClothSolverStepSimulationJsNode extends TypedJsNode<ClothSolverStepSimulationJsParamsConfig> {
    readonly paramsConfig: ClothSolverStepSimulationJsParamsConfig;
    static type(): string;
    initializeNode(): void;
    setLines(linesController: JsLinesCollectionController): void;
    setTriggerableLines(linesController: JsLinesCollectionController): void;
    private _refToString;
    private _addRefs;
}
export {};
