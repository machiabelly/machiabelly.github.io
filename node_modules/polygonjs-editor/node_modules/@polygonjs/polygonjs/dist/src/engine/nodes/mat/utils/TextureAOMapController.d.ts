import { Constructor } from '../../../../types/GlobalTypes';
import { TypedMatNode } from '../_Base';
import { BaseTextureMapController } from './_BaseTextureController';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { MeshBasicMaterial } from 'three';
import { MeshLambertMaterial } from 'three';
import { MeshPhysicalMaterial } from 'three';
import { MeshStandardMaterial } from 'three';
import { MeshToonMaterial } from 'three';
import { MaterialTexturesRecord, SetParamsTextureNodesRecord } from './_BaseController';
export declare function AOMapParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param toggle if you want to use an ambient occlusion map */
        useAOMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the AO map COP node */
        aoMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
        /** @param ambient occlusion intensity */
        aoMapIntensity: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & TBase;
type TextureAOMapControllerCurrentMaterial = MeshBasicMaterial | MeshLambertMaterial | MeshStandardMaterial | MeshPhysicalMaterial | MeshToonMaterial;
declare const TextureAOMapParamsConfig_base: {
    new (...args: any[]): {
        /** @param toggle if you want to use an ambient occlusion map */
        useAOMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the AO map COP node */
        aoMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
        /** @param ambient occlusion intensity */
        aoMapIntensity: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & typeof NodeParamsConfig;
declare class TextureAOMapParamsConfig extends TextureAOMapParamsConfig_base {
}
export interface TextureAOMapControllers {
    aoMap: TextureAOMapController;
}
declare abstract class TextureAOMapMatNode extends TypedMatNode<TextureAOMapControllerCurrentMaterial, TextureAOMapParamsConfig> {
    controllers: TextureAOMapControllers;
    material(): Promise<TextureAOMapControllerCurrentMaterial | undefined>;
}
export declare class TextureAOMapController extends BaseTextureMapController {
    protected node: TextureAOMapMatNode;
    constructor(node: TextureAOMapMatNode);
    initializeNode(): void;
    static update(node: TextureAOMapMatNode): Promise<void>;
    update(): Promise<void>;
    updateMaterial(material: TextureAOMapControllerCurrentMaterial): Promise<void>;
    getTextures(material: TextureAOMapControllerCurrentMaterial, record: MaterialTexturesRecord): void;
    setParamsFromMaterial(material: TextureAOMapControllerCurrentMaterial, record: SetParamsTextureNodesRecord): void;
}
export {};
