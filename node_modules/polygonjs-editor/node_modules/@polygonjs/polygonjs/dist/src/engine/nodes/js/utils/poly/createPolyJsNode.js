"use strict";
import { PolyNodeParamsConfig } from "../../../utils/poly/PolyNodeParamsConfig";
import { PolyNodeController } from "../../../utils/poly/PolyNodeController";
import { TypedSubnetJsNode, TypedSubnetJsParamsConfigMixin } from "../../Subnet";
import { NodeParamsConfig } from "../../../utils/params/ParamsConfig";
import { ModuleName } from "../../../../poly/registers/modules/Common";
import { NodeContext } from "../../../../poly/NodeContext";
function createPolyJsNode(nodeType, definition, polyNodeControllerClass) {
  class SubnetJsParamsConfig extends TypedSubnetJsParamsConfigMixin(NodeParamsConfig) {
  }
  const ParamsConfig = PolyNodeParamsConfig.ParamsConfig(definition, SubnetJsParamsConfig);
  class BasePolyJsNode extends TypedSubnetJsNode {
    constructor() {
      super(...arguments);
      this.paramsConfig = ParamsConfig;
      this.polyNodeController = new polyNodeControllerClass(this, definition);
    }
    static type() {
      return nodeType;
    }
    requiredModules() {
      return [ModuleName.POLY_JS];
    }
    _expectedInputTypes() {
      var _a, _b;
      return ((_b = (_a = definition.inputs) == null ? void 0 : _a.typed) == null ? void 0 : _b.types.map((t) => t.type)) || [];
    }
    _expectedInputName(index) {
      var _a, _b;
      const names = ((_b = (_a = definition.inputs) == null ? void 0 : _a.typed) == null ? void 0 : _b.types.map((t) => t.name)) || [];
      return names[index];
    }
    _expectedOutputTypes() {
      return this._expectedInputTypes();
    }
    _expectedOutputName(index) {
      return this._expectedInputName(index);
    }
  }
  return BasePolyJsNode;
}
export function onPolyJsModuleRegister(poly) {
  PolyNodeController.registerCreatePolyNodeFunctionForContext(NodeContext.JS, createPolyJsNode);
}
