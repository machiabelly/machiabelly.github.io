"use strict";
import { BaseRaySphereJsNode } from "./_BaseRaySphere";
import { JsConnectionPoint, JsConnectionPointType, JS_CONNECTION_POINT_IN_NODE_DEF } from "../utils/io/connections/Js";
import { Poly } from "../../Poly";
const CONNECTION_OPTIONS = JS_CONNECTION_POINT_IN_NODE_DEF;
const OUTPUT_NAME = "intersects";
export class RayIntersectsSphereJsNode extends BaseRaySphereJsNode {
  static type() {
    return "rayIntersectsSphere";
  }
  initializeNode() {
    super.initializeNode();
    this.io.outputs.setNamedOutputConnectionPoints([
      new JsConnectionPoint(OUTPUT_NAME, JsConnectionPointType.BOOLEAN, CONNECTION_OPTIONS)
    ]);
  }
  setLines(shadersCollectionController) {
    const ray = this.variableForInput(shadersCollectionController, JsConnectionPointType.RAY);
    const sphere = this.variableForInput(shadersCollectionController, JsConnectionPointType.SPHERE);
    const out = this.jsVarName(OUTPUT_NAME);
    const func = Poly.namedFunctionsRegister.getFunction("rayIntersectsSphere", this, shadersCollectionController);
    const bodyLine = func.asString(ray, sphere);
    shadersCollectionController.addBodyOrComputed(this, [
      { dataType: JsConnectionPointType.VECTOR3, varName: out, value: bodyLine }
    ]);
  }
}
