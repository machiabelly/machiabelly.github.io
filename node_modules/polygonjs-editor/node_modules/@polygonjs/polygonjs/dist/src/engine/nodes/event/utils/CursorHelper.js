"use strict";
import { CoreVector } from "../../../../core/Vector";
class MouseHelperClass {
  constructor() {
    this._rectByCanvas = /* @__PURE__ */ new Map();
    this._resetCacheBound = this._resetCache.bind(this);
    window.addEventListener("resize", this._resetCacheBound);
    document.addEventListener("scroll", this._resetCacheBound);
  }
  static instance() {
    return this._instance = this._instance || new MouseHelperClass();
  }
  setEventOffset(cursorPage, canvas, offset) {
    let rect = this._rectByCanvas.get(canvas);
    if (!rect) {
      rect = canvas.getBoundingClientRect();
      this._rectByCanvas.set(canvas, rect);
    }
    offset.offsetX = cursorPage.clientX - rect.left;
    offset.offsetY = cursorPage.clientY - rect.top;
  }
  _resetCache() {
    this._rectByCanvas.clear();
  }
}
const MouseHelper = MouseHelperClass.instance();
const _offset = { offsetX: 0, offsetY: 0 };
export class CursorHelper {
  // protected _cursor: Vector2 = new Vector2();
  setCursorForCPU(context, target) {
    this.setCursor(context, target);
    target.x = target.x * 2 - 1;
    target.y = -target.y * 2 + 1;
  }
  setCursorForGPU(context, target) {
    this.setCursor(context, target);
    target.y = 1 - target.y;
  }
  setCursor(context, target) {
    var _a;
    const canvas = (_a = context.viewer) == null ? void 0 : _a.canvas();
    if (!canvas) {
      return;
    }
    const event = context.event;
    if (event instanceof PointerEvent || event instanceof MouseEvent || event instanceof DragEvent) {
      MouseHelper.setEventOffset(event, canvas, _offset);
    }
    if (window.TouchEvent && event instanceof TouchEvent) {
      const touch = event.touches[0];
      if (touch) {
        MouseHelper.setEventOffset(touch, canvas, _offset);
      }
    }
    this._updateFromCursor(canvas, target);
  }
  _updateFromCursor(canvas, target) {
    if (canvas.offsetWidth <= 0 || canvas.offsetHeight <= 0) {
      console.warn("zero size canvas", canvas);
      target.set(0, 0);
    } else {
      target.x = _offset.offsetX / canvas.offsetWidth;
      target.y = _offset.offsetY / canvas.offsetHeight;
    }
    if (!CoreVector.isVector2Valid(target)) {
      console.warn("invalid number detected");
      console.warn(target.toArray(), _offset.offsetX, _offset.offsetY, canvas.offsetWidth, canvas.offsetHeight);
      return;
    }
  }
  // protected _remapCursor() {}
}
