"use strict";
import ATTRIB_SMOOTH from "./gl/neighbour/attribSmooth.glsl";
import { TypedGlNode } from "./_Base";
import { ThreeToGl } from "../../../../src/core/ThreeToGl";
import { ParamConfig, NodeParamsConfig } from "../utils/params/ParamsConfig";
import { GlConnectionPointType, GlConnectionPoint } from "../utils/io/connections/Gl";
import { FunctionGLDefinition } from "./utils/GLDefinition";
const OUTPUT_NAME = "attrib";
class NeighbourAttribSmoothGlParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    this.positionAttribName = ParamConfig.STRING("position");
    this.position = ParamConfig.VECTOR3([0, 0, 0], {
      separatorAfter: true
    });
    // attribType = ParamConfig.INTEGER(GL_CONNECTION_POINT_TYPES.indexOf(GlConnectionPointType.FLOAT), {
    // 	menu: {
    // 		entries: GL_CONNECTION_POINT_TYPES.map((name, i) => {
    // 			return {name: name, value: i};
    // 		}),
    // 	},
    // 	separatorBefore: true,
    // });
    this.attribName = ParamConfig.STRING("h");
    this.attribValue = ParamConfig.FLOAT(0);
    this.maxDist = ParamConfig.FLOAT(2, {
      range: [0, 10],
      rangeLocked: [true, false],
      separatorBefore: true
    });
    this.deltaThreshold = ParamConfig.FLOAT(1, {
      range: [0, 1],
      rangeLocked: [true, false]
    });
    this.smoothAmount = ParamConfig.FLOAT(1, {
      range: [0, 1],
      rangeLocked: [true, false]
    });
  }
}
const ParamsConfig = new NeighbourAttribSmoothGlParamsConfig();
export class NeighbourAttribSmoothGlNode extends TypedGlNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "neighbourAttribSmooth";
  }
  initializeNode() {
    super.initializeNode();
    this.io.outputs.setNamedOutputConnectionPoints([
      new GlConnectionPoint(OUTPUT_NAME, GlConnectionPointType.FLOAT)
    ]);
  }
  setLines(shadersCollectionController) {
    const bodyLines = [];
    const position = ThreeToGl.vector3(this.variableForInputParam(this.p.position));
    const maxDist = ThreeToGl.float(this.variableForInputParam(this.p.maxDist));
    const attribValue = ThreeToGl.float(this.variableForInputParam(this.p.attribValue));
    const deltaThreshold = ThreeToGl.float(this.variableForInputParam(this.p.deltaThreshold));
    const smoothAmount = ThreeToGl.float(this.variableForInputParam(this.p.smoothAmount));
    const out = this.glVarName(OUTPUT_NAME);
    const assembler = shadersCollectionController.assembler();
    const globalsHandler = assembler.globalsHandler();
    if (!globalsHandler) {
      return;
    }
    if (globalsHandler.attribTextureData) {
      const globalsTextureHandler = globalsHandler;
      const positionTextureData = globalsTextureHandler.attribTextureData(this.pv.positionAttribName);
      const attribTextureData = globalsTextureHandler.attribTextureData(this.pv.attribName);
      if (positionTextureData && attribTextureData) {
        const { textureName, uvName } = positionTextureData;
        const attribTextureName = attribTextureData.textureName;
        const attribComponent = attribTextureData.component;
        const positionComponent = positionTextureData.component;
        const args = [
          textureName,
          uvName,
          position,
          // smooth
          attribTextureName,
          attribValue,
          maxDist,
          deltaThreshold,
          smoothAmount
        ].join(", ");
        const { functionName, functionDeclaration } = this._templateFunctionDefinition({
          positionComponent,
          attribComponent
        });
        shadersCollectionController.addDefinitions(this, [new FunctionGLDefinition(this, functionDeclaration)]);
        bodyLines.push(`float ${out} = ${functionName}(${args})`);
      }
    }
    shadersCollectionController.addBodyLines(this, bodyLines);
  }
  _templateFunctionDefinition(options) {
    const functionName = `${this.type()}${this.graphNodeId()}`;
    const functionDeclaration = ATTRIB_SMOOTH.replace("__FUNCTION__NAME__", functionName).replace("__COMPONENT__", options.positionComponent).replace("__COMPONENT_ATTRIB__", options.attribComponent);
    return {
      functionName,
      functionDeclaration
    };
  }
}
