import { Constructor } from '../../../../types/GlobalTypes';
import { BaseController, SetParamsTextureNodesRecord } from './_BaseController';
import { TypedMatNode } from '../_Base';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { Material, MeshBasicMaterial, MeshStandardMaterial } from 'three';
import { ShadowMaterial } from 'three';
export declare function ColorParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param material color */
        color: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.COLOR>;
        /** @param defines if the color attribute on the geometry is used */
        useVertexColors: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param sets the material to transparent */
        transparent: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param sets the material opacity */
        opacity: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
        /** @param sets the min alpha below which the material is invisible */
        alphaTest: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & TBase;
export type ColoredMaterial = MeshBasicMaterial | ShadowMaterial | MeshStandardMaterial;
export declare function isValidColoredMaterial(material?: Material): material is ColoredMaterial;
declare const ColorParamsConfig_base: {
    new (...args: any[]): {
        /** @param material color */
        color: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.COLOR>;
        /** @param defines if the color attribute on the geometry is used */
        useVertexColors: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param sets the material to transparent */
        transparent: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param sets the material opacity */
        opacity: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
        /** @param sets the min alpha below which the material is invisible */
        alphaTest: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.FLOAT>;
    };
} & typeof NodeParamsConfig;
declare class ColorParamsConfig extends ColorParamsConfig_base {
}
export interface ColorsControllers {
    colors: ColorsController;
}
declare class ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {
    controllers: ColorsControllers;
    material(): Promise<ColoredMaterial | undefined>;
}
export declare class ColorsController extends BaseController {
    protected node: ColoredMatNode;
    constructor(node: ColoredMatNode);
    static update(node: ColoredMatNode): Promise<void>;
    updateMaterial(material: ColoredMaterial): void;
    setParamsFromMaterial(material: ColoredMaterial, record: SetParamsTextureNodesRecord): void;
}
export {};
