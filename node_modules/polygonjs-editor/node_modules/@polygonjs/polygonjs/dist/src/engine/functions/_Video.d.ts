import { VideoEvent } from '../../core/VideoEvent';
import { ActorEvaluator } from '../nodes/js/code/assemblers/actor/ActorEvaluator';
import { NodeEventListener } from '../nodes/_Base';
import { NamedFunction1, NamedFunction3 } from './_Base';
type CallbackByVideoEvent = Record<VideoEvent, NodeEventListener>;
export declare class addVideoEventListener extends NamedFunction3<[string, CallbackByVideoEvent, ActorEvaluator]> {
    static type(): string;
    func(nodePath: string, listeners: CallbackByVideoEvent, evaluator: ActorEvaluator): void;
}
export declare class getVideoPropertyCurrentTime extends NamedFunction1<[string]> {
    static type(): string;
    func(nodePath: string): number;
}
export declare class getVideoPropertyDuration extends NamedFunction1<[string]> {
    static type(): string;
    func(nodePath: string): number;
}
export declare class getVideoPropertyPlaying extends NamedFunction1<[string]> {
    static type(): string;
    func(nodePath: string): boolean;
}
export declare class getVideoPropertyMuted extends NamedFunction1<[string]> {
    static type(): string;
    func(nodePath: string): boolean;
}
export {};
