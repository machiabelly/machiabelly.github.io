import { BaseNodeGlMathFunctionArg3GlNode } from './_BaseMathFunction';
import { GlConnectionPointType } from '../utils/io/connections/Gl';
import { PolyDictionary } from '../../../types/GlobalTypes';
interface MathArg3Options {
    in?: [string, string, string];
    out?: string;
    out_type?: GlConnectionPointType;
    method?: string;
    default?: PolyDictionary<any>;
    functions?: string[];
}
export declare function MathFunctionArg3Factory(type: string, options?: MathArg3Options): typeof BaseNodeGlMathFunctionArg3GlNode;
declare const ClampGlNode_base: typeof BaseNodeGlMathFunctionArg3GlNode;
export declare class ClampGlNode extends ClampGlNode_base {
    protected _expected_output_types(): GlConnectionPointType[];
}
declare const FaceforwardGlNode_base: typeof BaseNodeGlMathFunctionArg3GlNode;
export declare class FaceforwardGlNode extends FaceforwardGlNode_base {
}
declare const SmoothstepGlNode_base: typeof BaseNodeGlMathFunctionArg3GlNode;
export declare class SmoothstepGlNode extends SmoothstepGlNode_base {
    protected _expected_output_types(): GlConnectionPointType[];
}
export {};
