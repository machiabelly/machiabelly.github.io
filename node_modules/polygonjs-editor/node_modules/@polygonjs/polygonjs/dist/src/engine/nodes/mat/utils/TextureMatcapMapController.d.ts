import { Constructor } from '../../../../types/GlobalTypes';
import { TypedMatNode } from '../_Base';
import { BaseTextureMapController } from './_BaseTextureController';
import { NodeParamsConfig } from '../../utils/params/ParamsConfig';
import { MeshMatcapMaterial } from 'three';
import { MaterialTexturesRecord, SetParamsTextureNodesRecord } from './_BaseController';
export declare function MatcapMapParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param toggle if you want to use a matcap map */
        useMatcapMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the matcap map COP node */
        matcapMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
    };
} & TBase;
type TextureMatcapMaterial = MeshMatcapMaterial;
type TextureMatCapControllerCurrentMaterial = TextureMatcapMaterial;
declare const TextureMatcapMapParamsConfig_base: {
    new (...args: any[]): {
        /** @param toggle if you want to use a matcap map */
        useMatcapMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.BOOLEAN>;
        /** @param specify the matcap map COP node */
        matcapMap: import("../../utils/params/ParamsConfig").ParamTemplate<import("../../../index_all").ParamType.NODE_PATH>;
    };
} & typeof NodeParamsConfig;
declare class TextureMatcapMapParamsConfig extends TextureMatcapMapParamsConfig_base {
}
export interface TextureMatcapMapControllers {
    matcap: TextureMatcapMapController;
}
declare abstract class TextureMatcapMapMatNode extends TypedMatNode<TextureMatCapControllerCurrentMaterial, TextureMatcapMapParamsConfig> {
    controllers: TextureMatcapMapControllers;
    material(): Promise<MeshMatcapMaterial | undefined>;
}
export declare class TextureMatcapMapController extends BaseTextureMapController {
    protected node: TextureMatcapMapMatNode;
    constructor(node: TextureMatcapMapMatNode);
    initializeNode(): void;
    static update(node: TextureMatcapMapMatNode): Promise<void>;
    update(): Promise<void>;
    updateMaterial(material: TextureMatCapControllerCurrentMaterial): Promise<void>;
    getTextures(material: TextureMatCapControllerCurrentMaterial, record: MaterialTexturesRecord): void;
    setParamsFromMaterial(material: TextureMatCapControllerCurrentMaterial, record: SetParamsTextureNodesRecord): void;
}
export {};
