import type { Object3D, Color, Material, Vector2, Vector3, Vector4, Texture } from 'three';
import { NamedFunction3, NamedFunction5, NamedFunction6, ObjectNamedFunction1, ObjectNamedFunction2 } from './_Base';
export declare class setObjectMaterial extends ObjectNamedFunction1<[Material]> {
    static type(): string;
    func(object3D: Object3D, material: Material): void;
}
export declare class setObjectMaterialColor extends ObjectNamedFunction2<[Color, number]> {
    static type(): string;
    func(object3D: Object3D, color: Color, lerp: number): void;
}
export declare class setMaterialColor extends NamedFunction3<[Material, Color, number]> {
    static type(): string;
    func(material: Material, color: Color, lerp: number): void;
}
export declare class setMaterialEmissiveColor extends NamedFunction3<[Material, Color, number]> {
    static type(): string;
    func(material: Material, color: Color, lerp: number): void;
}
declare const setMaterialMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialMap extends setMaterialMap_base {
}
declare const setMaterialAlphaMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialAlphaMap extends setMaterialAlphaMap_base {
}
declare const setMaterialAOMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialAOMap extends setMaterialAOMap_base {
}
declare const setMaterialDisplacementMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialDisplacementMap extends setMaterialDisplacementMap_base {
}
declare const setMaterialEnvMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialEnvMap extends setMaterialEnvMap_base {
}
declare const setMaterialEmissiveMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialEmissiveMap extends setMaterialEmissiveMap_base {
}
declare const setMaterialMetalnessMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialMetalnessMap extends setMaterialMetalnessMap_base {
}
declare const setMaterialRoughnessMap_base: {
    new (node: import("../nodes/_Base").BaseNodeType, shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined): {
        func(material: Material, texture: Texture): void;
        async: boolean;
        asString(args_0: string, args_1: string): string;
        type(): string;
        readonly scene: import("../index_all").PolyScene;
        readonly jsNode?: import("../nodes/js/_Base").BaseJsNodeType | undefined;
        readonly functionNode: import("../nodes/js/code/Controller").AssemblerControllerNode<import("../nodes/js/code/assemblers/_Base").BaseJsShaderAssembler>;
        readonly timeController: import("../scene/utils/TimeController").TimeController;
        readonly node: import("../nodes/_Base").BaseNodeType;
        readonly shadersCollectionController?: import("../nodes/js/code/utils/JsLinesCollectionController").JsLinesCollectionController | undefined;
    };
    type(): string;
};
export declare class setMaterialRoughnessMap extends setMaterialRoughnessMap_base {
}
export declare class setMaterialOpacity extends NamedFunction3<[Material, number, number]> {
    static type(): string;
    func(material: Material, opacity: number, lerp: number): void;
}
export declare class setMaterialUniformNumber extends NamedFunction6<[Material, string, number, number, boolean, boolean]> {
    static type(): string;
    func(material: Material, uniformName: string, value: number, lerp: number, addPrefix: boolean, printWarnings: boolean): void;
}
type VectorColorUniform = Color | Vector2 | Vector3 | Vector4;
export declare class setMaterialUniformVectorColor extends NamedFunction6<[
    Material,
    string,
    VectorColorUniform,
    number,
    boolean,
    boolean
]> {
    static type(): string;
    func(material: Material, uniformName: string, value: VectorColorUniform, lerp: number, addPrefix: boolean, printWarnings: boolean): void;
}
export declare class setMaterialUniformTexture extends NamedFunction5<[Material, string, Texture, boolean, boolean]> {
    static type(): string;
    func(material: Material, uniformName: string, value: Texture, addPrefix: boolean, printWarnings: boolean): void;
}
export {};
