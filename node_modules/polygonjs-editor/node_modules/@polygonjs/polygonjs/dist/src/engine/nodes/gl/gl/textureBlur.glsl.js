export default "vec4 textureBlur3x1(sampler2D map, vec2 uv, vec2 resolution){\n\n	vec2 offset = vec2(1.0/resolution.x, 0.0);\n	vec4 blurResult = texture2D(map, uv) +\n		texture2D(map, uv-offset) +\n		texture2D(map, uv+offset);\n\n	return blurResult / 3.0;\n}\n\nvec4 textureBlur5x1(sampler2D map, vec2 uv, vec2 resolution){\n\n	vec2 offset1 = vec2(1.0/resolution.x, 0.0);\n	vec2 offset2 = vec2(2.0/resolution.x, 0.0);\n	vec4 blurResult = texture2D(map, uv) +\n		texture2D(map, uv-offset1) +\n		texture2D(map, uv+offset1) +\n		texture2D(map, uv-offset2) +\n		texture2D(map, uv+offset2);\n\n	return blurResult * 0.2;\n}\nvec4 textureBlur7x1(sampler2D map, vec2 uv, vec2 resolution){\n\n	vec2 offset1 = vec2(1.0/resolution.x, 0.0);\n	vec2 offset2 = vec2(2.0/resolution.x, 0.0);\n	vec2 offset3 = vec2(3.0/resolution.x, 0.0);\n	vec4 blurResult = texture2D(map, uv) +\n		texture2D(map, uv-offset1) +\n		texture2D(map, uv+offset1) +\n		texture2D(map, uv-offset2) +\n		texture2D(map, uv+offset2) +\n		texture2D(map, uv-offset3) +\n		texture2D(map, uv+offset3);\n\n	return blurResult / 7.0;\n}\n\nvec4 textureBlur1x3(sampler2D map, vec2 uv, vec2 resolution){\n\n	vec2 offset = vec2(0.0, 1.0/resolution.y);\n	vec4 blurResult = texture2D(map, uv) +\n		texture2D(map, uv-offset) +\n		texture2D(map, uv+offset);\n\n	return blurResult / 3.0;\n}\nvec4 textureBlur1x5(sampler2D map, vec2 uv, vec2 resolution){\n\n	vec2 offset1 = vec2(0.0, 1.0/resolution.x);\n	vec2 offset2 = vec2(0.0, 2.0/resolution.x);\n	vec4 blurResult = texture2D(map, uv) +\n		texture2D(map, uv-offset1) +\n		texture2D(map, uv+offset1) +\n		texture2D(map, uv-offset2) +\n		texture2D(map, uv+offset2);\n\n	return blurResult * 0.2;\n}\nvec4 textureBlur1x7(sampler2D map, vec2 uv, vec2 resolution){\n\n	vec2 offset1 = vec2(0.0, 1.0/resolution.x);\n	vec2 offset2 = vec2(0.0, 2.0/resolution.x);\n	vec2 offset3 = vec2(0.0, 3.0/resolution.x);\n	vec4 blurResult = texture2D(map, uv) +\n		texture2D(map, uv-offset1) +\n		texture2D(map, uv+offset1) +\n		texture2D(map, uv-offset2) +\n		texture2D(map, uv+offset2) +\n		texture2D(map, uv-offset3) +\n		texture2D(map, uv+offset3);\n\n	return blurResult / 7.0;\n}\n\nvec4 textureBlur3x3(sampler2D map, vec2 uv, vec2 resolution){\n\n	vec2 offsetX = vec2(1.0/resolution.x, 0.0);\n	vec2 offsetY = vec2(0.0, 1.0/resolution.y);\n	vec4 blurResult = texture2D(map, uv) +\n		texture2D(map, uv-offsetY) +\n		texture2D(map, uv+offsetX-offsetY) +\n		texture2D(map, uv+offsetX) +\n		texture2D(map, uv+offsetX+offsetY) +\n		texture2D(map, uv+offsetY) +\n		texture2D(map, uv-offsetX+offsetY) +\n		texture2D(map, uv-offsetX) +\n		texture2D(map, uv-offsetX-offsetY);\n\n	return blurResult / 9.0;\n}\nvec4 textureBlur3x5(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-3;x<=3;x++){\n		for(int y=-5;y<=5;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 77.0;\n}\nvec4 textureBlur5x3(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-5;x<=5;x++){\n		for(int y=-3;y<=3;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 77.0;\n}\nvec4 textureBlur5x5(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-5;x<=5;x++){\n		for(int y=-5;y<=5;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 121.0;\n}\nvec4 textureBlur3x7(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-3;x<=3;x++){\n		for(int y=-7;y<=7;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 105.0;\n}\nvec4 textureBlur7x3(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-7;x<=7;x++){\n		for(int y=-3;y<=3;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 105.0;\n}\nvec4 textureBlur5x7(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-5;x<=5;x++){\n		for(int y=-7;y<=7;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 165.0;\n}\nvec4 textureBlur7x5(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-7;x<=7;x++){\n		for(int y=-5;y<=5;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 165.0;\n}\nvec4 textureBlur7x7(sampler2D map, vec2 uv, vec2 resolution){\n	vec4 blurResult = vec4(0.0);\n	for(int x=-7;x<=7;x++){\n		for(int y=-7;y<=7;y++){\n			blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n		}\n	}\n	return blurResult / 225.0;\n}\n\n// vec4 textureBlurXY(sampler2D map, vec2 uv, vec2 resolution, int pixelsX, int pixelsY){\n// 	vec4 blurResult = vec4(0.0);\n// 	// this loop unrolling does not work on iphone\n// 	for(int x = -1*pixelsX; x <= pixelsX; x+=1 ){\n// 		// for(int y = -pixelsY; y <= pixelsY; y++ ){\n// 			// blurResult += texture2D(map, uv + vec2(float(x)/resolution.x, float(y)/resolution.x));\n// 		// }\n// 	}\n// 	return blurResult / ((float(pixelsX)*2.0+1.0) * (float(pixelsY)*2.0+1.0));\n// }\n\nvec4 textureBlur(sampler2D map, vec2 uv, vec2 resolution, int pixelsX, int pixelsY){\n	// the clamp are added in js when calling this function;\n	// UPDATE: clamp, min or max seem to create issues on iphone, so they are skipped for now\n	// pixelsX = clamp(pixelsX, 1, 4);\n	// pixelsY = clamp(pixelsY, 1, 4);\n\n	if(pixelsX == 1){\n		if(pixelsY == 1){ return texture2D(map, uv); }\n		if(pixelsY == 2){ return textureBlur1x3(map, uv, resolution); }\n		if(pixelsY == 3){ return textureBlur1x5(map, uv, resolution); }\n		if(pixelsY == 4){ return textureBlur1x7(map, uv, resolution); }\n	}\n	if(pixelsX == 2){\n		if(pixelsY == 1){ return textureBlur3x1(map, uv, resolution); }\n		if(pixelsY == 2){ return textureBlur3x3(map, uv, resolution); }\n		if(pixelsY == 3){ return textureBlur3x5(map, uv, resolution); }\n		if(pixelsY == 4){ return textureBlur3x7(map, uv, resolution); }\n	}\n	if(pixelsX == 3){\n		if(pixelsY == 1){ return textureBlur5x1(map, uv, resolution); }\n		if(pixelsY == 2){ return textureBlur5x3(map, uv, resolution); }\n		if(pixelsY == 3){ return textureBlur5x5(map, uv, resolution); }\n		if(pixelsY == 4){ return textureBlur5x7(map, uv, resolution); }\n	}\n	if(pixelsX == 4){\n		if(pixelsY == 1){ return textureBlur7x1(map, uv, resolution); }\n		if(pixelsY == 2){ return textureBlur7x3(map, uv, resolution); }\n		if(pixelsY == 3){ return textureBlur7x5(map, uv, resolution); }\n		if(pixelsY == 4){ return textureBlur7x7(map, uv, resolution); }\n	}\n\n	return texture2D(map, uv);\n}";
