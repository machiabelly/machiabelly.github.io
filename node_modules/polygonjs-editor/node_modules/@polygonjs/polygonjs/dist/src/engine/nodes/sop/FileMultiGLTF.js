"use strict";
import { BaseFileMultiSopNode } from "./utils/file/_BaseSopFileMulti";
import { SopTypeFileMulti } from "../../poly/registers/nodes/types/Sop";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { ASSETS_ROOT } from "../../../core/loader/AssetsUtils";
import { GLTFLoaderHandler } from "../../../core/loader/geometry/GLTF";
import { FileGLTFSopOperation } from "../../operations/sop/FileGLTF";
import { EXTENSIONS_BY_NODE_TYPE_BY_CONTEXT } from "../../../core/loader/FileExtensionRegister";
import { NodeContext } from "../../poly/NodeContext";
const DEFAULT = FileGLTFSopOperation.DEFAULT_PARAMS;
class FileMultiGLTFParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    /** @param url to load the geometry from */
    this.url = ParamConfig.STRING(`${ASSETS_ROOT}/models/\`@name\`.glb`, {
      fileBrowse: { extensions: EXTENSIONS_BY_NODE_TYPE_BY_CONTEXT[NodeContext.SOP][SopTypeFileMulti.FILE_GLTF] },
      expression: { forEntities: true }
    });
    /** @param uses draco compression */
    this.draco = ParamConfig.BOOLEAN(DEFAULT.draco);
    /** @param uses ktx2 compression */
    this.ktx2 = ParamConfig.BOOLEAN(DEFAULT.ktx2);
    /** @param sets the matrixAutoUpdate attribute for the objects loaded */
    this.matrixAutoUpdate = ParamConfig.BOOLEAN(false);
    /** @param reload the geometry */
    this.reload = ParamConfig.BUTTON(null, {
      callback: (node) => {
        BaseFileMultiSopNode.PARAM_CALLBACK_reload(node);
      }
    });
  }
}
const ParamsConfig = new FileMultiGLTFParamsConfig();
export class FileMultiGLTFSopNode extends BaseFileMultiSopNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return SopTypeFileMulti.FILE_GLTF;
  }
  _createLoader(url) {
    return new GLTFLoaderHandler(url, this);
  }
  _loadWithLoader(loader) {
    return loader.load({
      draco: this.pv.draco,
      ktx2: this.pv.ktx2,
      node: this
    });
  }
}
