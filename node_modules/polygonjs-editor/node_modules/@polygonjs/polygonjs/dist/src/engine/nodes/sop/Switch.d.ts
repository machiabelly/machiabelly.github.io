/**
 * Allows to switch between different inputs.
 *
 *
 *
 */
import { TypedSopNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
declare class SwitchSopParamsConfig extends NodeParamsConfig {
    /** @param sets which input is used */
    input: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param number of inputs that this node can merge geometries from */
    inputsCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class SwitchSopNode extends TypedSopNode<SwitchSopParamsConfig> {
    paramsConfig: SwitchSopParamsConfig;
    static type(): SopType;
    initializeNode(): void;
    cook(): Promise<void>;
    private _callbackUpdateInputsEvaluation;
    static PARAM_CALLBACK_setInputsEvaluation(node: SwitchSopNode): void;
    private _callbackUpdateInputsCount;
    static PARAM_CALLBACK_setInputsCount(node: SwitchSopNode): void;
}
export {};
