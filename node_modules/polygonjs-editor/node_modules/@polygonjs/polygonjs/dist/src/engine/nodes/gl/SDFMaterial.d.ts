import { GlType } from './../../poly/registers/nodes/types/Gl';
import { TypedGlNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { ShadersCollectionController } from './code/utils/ShadersCollectionController';
declare class SDFMaterialGlParamsConfig extends NodeParamsConfig {
    globals: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    color: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    useEnvMap: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    useReflection: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    useRefraction: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    lighting: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    useLights: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    diffuse: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    emissive: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    envMap: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    envMapTint: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    envMapIntensity: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    envMapRoughness: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    envMapFresnel: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    envMapFresnelPower: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    reflection: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    reflectionTint: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    reflectionDepth: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    reflectivity: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    reflectionBiasMult: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    refraction: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FOLDER>;
    refractionTint: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.COLOR>;
    ior: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    splitRGB: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    iorOffset: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.VECTOR3>;
    transmission: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    absorption: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    refractionDepth: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    refractionMaxDist: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    refractionBiasMult: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    sampleEnvMapOnLastRefractionRay: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    refractionStartOutsideMedium: import("./../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class SDFMaterialGlNode extends TypedGlNode<SDFMaterialGlParamsConfig> {
    paramsConfig: SDFMaterialGlParamsConfig;
    static type(): GlType;
    initializeNode(): void;
    materialIdName(): string;
    private _materialId;
    setLines(shadersCollectionController: ShadersCollectionController): void;
}
export {};
