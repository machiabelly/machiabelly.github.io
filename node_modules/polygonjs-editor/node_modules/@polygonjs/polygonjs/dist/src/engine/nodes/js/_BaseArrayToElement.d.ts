import { JsConnectionPointType, JsConnectionPointTypeArray } from '../utils/io/connections/Js';
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
export declare const ALLOWED_INPUT_TYPES: Set<JsConnectionPointTypeArray>;
export declare class BaseArrayElementJsNode<T extends NodeParamsConfig> extends TypedJsNode<T> {
    initializeNode(): void;
    protected _expectedInputTypes(): JsConnectionPointType[];
    protected _expectedInputName(index: number): string;
    protected _expectedOutputName(index: number): string;
    protected _expectedOutputTypes(): (JsConnectionPointType.ANIMATION_MIXER | JsConnectionPointType.ANIMATION_ACTION | JsConnectionPointType.BOOLEAN | JsConnectionPointType.BOX3 | JsConnectionPointType.CAMERA | JsConnectionPointType.CATMULL_ROM_CURVE3 | JsConnectionPointType.COLOR | JsConnectionPointType.EULER | JsConnectionPointType.FLOAT | JsConnectionPointType.INT | JsConnectionPointType.INTERSECTION | JsConnectionPointType.MATERIAL | JsConnectionPointType.MATRIX4 | JsConnectionPointType.NODE | JsConnectionPointType.OBJECT_3D | JsConnectionPointType.PARAM | JsConnectionPointType.PLANE | JsConnectionPointType.QUATERNION | JsConnectionPointType.RAY | JsConnectionPointType.SPHERE | JsConnectionPointType.STRING | JsConnectionPointType.TEXTURE | JsConnectionPointType.TRIGGER | JsConnectionPointType.VECTOR2 | JsConnectionPointType.VECTOR3 | JsConnectionPointType.VECTOR4)[];
    setLines(linesController: JsLinesCollectionController): void;
    protected _setLinesAsPrimitive(linesController: JsLinesCollectionController): void;
    protected _setLinesAsVector(linesController: JsLinesCollectionController): void;
}
