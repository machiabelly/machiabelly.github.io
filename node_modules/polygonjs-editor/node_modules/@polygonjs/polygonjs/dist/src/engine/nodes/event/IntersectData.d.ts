/**
 * Populates informations from an IntersectData into its parameters
 *
 * @remarks
 *
 * This node typically works with the event/raycast
 *
 */
import { TypedEventNode } from './_Base';
import { Intersection } from 'three';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
export declare enum TargetType {
    SCENE_GRAPH = "scene graph",
    NODE = "node"
}
export declare const TARGET_TYPES: TargetType[];
declare class IntersectDataParamsConfig extends NodeParamsConfig {
    /** @param geometry vertex attribute to read */
    attributeName: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param type of attribute */
    attributeType: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
    /** @param attribute value for float */
    attributeValue1: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param attribute value that attributeValue1 is set to when no object is intersected */
    resetValue1: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    /** @param attribute value for string */
    attributeValues: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
    /** @param attribute value that attributeValues is set to when no object is intersected */
    resetValues: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.STRING>;
}
export declare class IntersectDataEventNode extends TypedEventNode<IntersectDataParamsConfig> {
    paramsConfig: IntersectDataParamsConfig;
    static type(): string;
    static readonly INPUT_HIT = "hit";
    static readonly INPUT_MISS = "miss";
    initializeNode(): void;
    private _processHit;
    private _processMiss;
    private _resolveIntersectAttribute;
    static resolveObjectAttribute(intersection: Intersection, attribName: string): string | number | undefined;
}
export {};
