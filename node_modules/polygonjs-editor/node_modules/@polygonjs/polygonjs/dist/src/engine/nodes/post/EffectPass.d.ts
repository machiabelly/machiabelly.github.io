/**
 * Adds an effect pass, which can combine multiples passes into 1.
 *
 *
 */
import { TypedPostNode, TypedPostNodeContext } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { EffectPass } from 'postprocessing';
import { PostType } from '../../poly/registers/nodes/types/Post';
export declare const RANGE: number[];
declare class EffectPassPostParamsConfig extends NodeParamsConfig {
    /** @param number of inputs that this node can merge geometries from */
    inputsCount: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class EffectPassPostNode extends TypedPostNode<EffectPass, EffectPassPostParamsConfig> {
    paramsConfig: EffectPassPostParamsConfig;
    static type(): PostType;
    initializeNode(): void;
    _setupComposerIfActive(context: TypedPostNodeContext): void;
    updatePass(pass: EffectPass): void;
    private _callbackUpdateInputsCount;
    static PARAM_CALLBACK_setInputsCount(node: EffectPassPostNode): void;
}
export {};
