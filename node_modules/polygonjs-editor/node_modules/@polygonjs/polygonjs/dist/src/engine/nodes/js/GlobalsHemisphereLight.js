"use strict";
import { TypedJsNode } from "./_Base";
import { NodeParamsConfig } from "../utils/params/ParamsConfig";
import { JsType } from "../../poly/registers/nodes/types/Js";
import { JsConnectionPoint, JsConnectionPointType } from "../utils/io/connections/Js";
import { ObjectVariableHemisphereLight, ObjectVariableLight } from "./code/assemblers/objectBuilder/ObjectVariables";
import { ObjectBuilderAssemblerConstant } from "./code/assemblers/objectBuilder/ObjectBuilderAssemblerCommon";
import { Color } from "three";
class GlobalsHemisphereLightJsParamsConfig extends NodeParamsConfig {
}
const ParamsConfig = new GlobalsHemisphereLightJsParamsConfig();
export class GlobalsHemisphereLightJsNode extends TypedJsNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return JsType.GLOBALS_HEMISPHERE_LIGHT;
  }
  initializeNode() {
    super.initializeNode();
    this.io.outputs.setNamedOutputConnectionPoints([
      new JsConnectionPoint(ObjectVariableLight.INTENSITY, JsConnectionPointType.FLOAT),
      new JsConnectionPoint(ObjectVariableHemisphereLight.SKY_COLOR, JsConnectionPointType.COLOR),
      new JsConnectionPoint(ObjectVariableHemisphereLight.GROUND_COLOR, JsConnectionPointType.COLOR)
    ]);
  }
  setLines(linesController) {
    const bodyLines = [];
    const usedOutputNames = this.io.outputs.used_output_names();
    for (const outputName of usedOutputNames) {
      const varName = this.jsVarName(outputName);
      switch (outputName) {
        case ObjectVariableLight.INTENSITY: {
          bodyLines.push(`if( ${ObjectBuilderAssemblerConstant.OBJECT_3D}.${outputName} != null ){
						${varName} = ${ObjectBuilderAssemblerConstant.OBJECT_3D}.${outputName}
					} else {
						${varName} = 0;
					}`);
          break;
        }
        case ObjectVariableHemisphereLight.SKY_COLOR:
        case ObjectVariableHemisphereLight.GROUND_COLOR: {
          const paramName = outputName == ObjectVariableHemisphereLight.SKY_COLOR ? "color" : "groundColor";
          linesController.addVariable(this, new Color(), varName);
          bodyLines.push(`if( ${ObjectBuilderAssemblerConstant.OBJECT_3D}.${paramName} != null ){
						${varName}.copy(${ObjectBuilderAssemblerConstant.OBJECT_3D}.${paramName})
					}`);
          break;
        }
      }
    }
    linesController._addBodyLines(this, bodyLines);
  }
}
