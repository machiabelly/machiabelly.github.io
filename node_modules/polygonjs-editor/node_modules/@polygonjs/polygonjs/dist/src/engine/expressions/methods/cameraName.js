"use strict";
import { Poly } from "../../Poly";
import { BaseMethod } from "./_Base";
export class CameraNameExpression extends BaseMethod {
  static requiredArguments() {
    return [
      ["string", "path to node"],
      ["number", "object index"]
    ];
  }
  findDependency(args) {
    return this.createDependencyFromIndexOrPath(args);
  }
  async processArguments(args) {
    if (args.length == 2) {
      const index_or_path = args[0];
      let objectIndex = parseInt(args[1]);
      if (isNaN(objectIndex)) {
        objectIndex = 0;
      }
      const container = await this.getReferencedNodeContainer(index_or_path);
      if (container) {
        const coreContent = container.coreContent();
        if (coreContent) {
          const object = coreContent.threejsObjects().filter((object2) => Poly.camerasRegister.objectRegistered(object2))[objectIndex];
          if (object) {
            return object.name;
          }
        }
      }
    }
    return "";
  }
}
