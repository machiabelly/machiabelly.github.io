"use strict";
import { BaseSDFGlNode } from "./_BaseSDF";
import { ThreeToGl } from "../../../../src/core/ThreeToGl";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { GlConnectionPointType, GlConnectionPoint } from "../utils/io/connections/Gl";
import { GlType } from "../../poly/registers/nodes/types/Gl";
const OUTPUT_NAME = "float";
class SDFConeRoundGlParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    this.position = ParamConfig.VECTOR3([0, 0, 0], { hidden: true });
    this.center = ParamConfig.VECTOR3([0, 0, 0]);
    this.height = ParamConfig.FLOAT(1);
    this.radius1 = ParamConfig.FLOAT(0.5);
    this.radius2 = ParamConfig.FLOAT(0.2);
  }
}
const ParamsConfig = new SDFConeRoundGlParamsConfig();
export class SDFConeRoundGlNode extends BaseSDFGlNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return GlType.SDF_CONE_ROUND;
  }
  initializeNode() {
    super.initializeNode();
    this.io.outputs.setNamedOutputConnectionPoints([
      new GlConnectionPoint(OUTPUT_NAME, GlConnectionPointType.FLOAT)
    ]);
  }
  setLines(shadersCollectionController) {
    const position = this.position();
    const center = ThreeToGl.vector3(this.variableForInputParam(this.p.center));
    const height = ThreeToGl.float(this.variableForInputParam(this.p.height));
    const radius1 = ThreeToGl.float(this.variableForInputParam(this.p.radius1));
    const radius2 = ThreeToGl.float(this.variableForInputParam(this.p.radius2));
    const float = this.glVarName(OUTPUT_NAME);
    const bodyLine = `float ${float} = sdRoundCone(${position} - ${center}, ${radius1}, ${radius2}, ${height})`;
    shadersCollectionController.addBodyLines(this, [bodyLine]);
    this._addSDFMethods(shadersCollectionController);
  }
}
