"use strict";
import { ParamlessTypedJsNode } from "./_Base";
import { JsConnectionPoint, JsConnectionPointType, JS_CONNECTION_POINT_IN_NODE_DEF } from "../utils/io/connections/Js";
import { inputObject3D } from "./_BaseObject3D";
import { createVariable } from "./code/assemblers/_BaseJsPersistedConfigUtils";
import { Poly } from "../../Poly";
const CONNECTION_OPTIONS = JS_CONNECTION_POINT_IN_NODE_DEF;
var GetObjectWorldPositionJsNodeInputName = /* @__PURE__ */ ((GetObjectWorldPositionJsNodeInputName2) => {
  GetObjectWorldPositionJsNodeInputName2["worldPosition"] = "worldPosition";
  return GetObjectWorldPositionJsNodeInputName2;
})(GetObjectWorldPositionJsNodeInputName || {});
export class GetObjectWorldPositionJsNode extends ParamlessTypedJsNode {
  static type() {
    return "getObjectWorldPosition";
  }
  initializeNode() {
    this.io.inputs.setNamedInputConnectionPoints([
      new JsConnectionPoint(JsConnectionPointType.OBJECT_3D, JsConnectionPointType.OBJECT_3D, CONNECTION_OPTIONS)
    ]);
    this.io.outputs.setNamedOutputConnectionPoints([
      new JsConnectionPoint("worldPosition" /* worldPosition */, JsConnectionPointType.VECTOR3)
    ]);
  }
  setLines(shadersCollectionController) {
    const object3D = inputObject3D(this, shadersCollectionController);
    const varName = this.jsVarName("worldPosition" /* worldPosition */);
    const variable = createVariable(JsConnectionPointType.VECTOR3);
    const tmpVarName = variable ? shadersCollectionController.addVariable(this, variable) : void 0;
    if (!tmpVarName) {
      return;
    }
    const func = Poly.namedFunctionsRegister.getFunction(
      "getObjectWorldPosition",
      this,
      shadersCollectionController
    );
    shadersCollectionController.addBodyOrComputed(this, [
      { dataType: JsConnectionPointType.PLANE, varName, value: func.asString(object3D, tmpVarName) }
    ]);
  }
}
