"use strict";
import { JsConnectionPointType } from "../utils/io/connections/Js";
import { ParamlessTypedJsNode } from "./_Base";
import { Poly } from "../../Poly";
import { createVariable } from "./code/assemblers/_BaseJsPersistedConfigUtils";
var NormalizeJsNodeInputName = /* @__PURE__ */ ((NormalizeJsNodeInputName2) => {
  NormalizeJsNodeInputName2["VALUE"] = "v";
  return NormalizeJsNodeInputName2;
})(NormalizeJsNodeInputName || {});
const DefaultValues = {
  ["v" /* VALUE */]: 1
};
const OUTPUT_NAME = "val";
const ALLOWED_INPUT_TYPES = [
  JsConnectionPointType.VECTOR2,
  JsConnectionPointType.VECTOR3,
  JsConnectionPointType.VECTOR4
];
function functionNameByType(type) {
  switch (type) {
    case JsConnectionPointType.VECTOR2: {
      return "normalizeVector2";
    }
    case JsConnectionPointType.VECTOR3: {
      return "normalizeVector3";
    }
    case JsConnectionPointType.VECTOR4: {
      return "normalizeVector4";
    }
  }
}
export class NormalizeJsNode extends ParamlessTypedJsNode {
  static type() {
    return "normalize";
  }
  initializeNode() {
    super.initializeNode();
    this.io.connection_points.set_expected_input_types_function(this._expectedInputTypes.bind(this));
    this.io.connection_points.set_expected_output_types_function(this._expectedOutputTypes.bind(this));
    this.io.connection_points.set_input_name_function(this._expectedInputName.bind(this));
    this.io.connection_points.set_output_name_function(this._expectedOutputName.bind(this));
  }
  setLines(shadersCollectionController) {
    const input = this.variableForInput(shadersCollectionController, this._expectedInputName(0));
    const varName = this.jsVarName(this._expectedOutputName(0));
    const inputType = this._expectedInputTypes()[0];
    const variable = createVariable(inputType);
    const tmpVarName = variable ? shadersCollectionController.addVariable(this, variable) : void 0;
    if (!tmpVarName) {
      return;
    }
    const functionName = functionNameByType(inputType);
    if (functionName) {
      const func = Poly.namedFunctionsRegister.getFunction(functionName, this, shadersCollectionController);
      shadersCollectionController.addBodyOrComputed(this, [
        { dataType: inputType, varName, value: func.asString(input, tmpVarName) }
      ]);
      return;
    }
  }
  _expectedInputTypes() {
    const firstType = this.io.connection_points.first_input_connection_type();
    const type = firstType && ALLOWED_INPUT_TYPES.includes(firstType) ? firstType : JsConnectionPointType.VECTOR3;
    return [type];
  }
  _expectedOutputTypes() {
    const inputType = this._expectedInputTypes()[0];
    return [inputType];
  }
  _expectedInputName(index) {
    return ["v" /* VALUE */][index];
  }
  _expectedOutputName(index) {
    return OUTPUT_NAME;
  }
  paramDefaultValue(name) {
    return DefaultValues[name];
  }
}
