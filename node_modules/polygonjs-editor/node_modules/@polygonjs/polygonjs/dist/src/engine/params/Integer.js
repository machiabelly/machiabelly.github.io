"use strict";
import { TypedNumericParam } from "./_Numeric";
import { ParamType } from "../poly/ParamType";
import { CoreString } from "../../core/String";
import { CoreType } from "../../core/Type";
export class IntegerParam extends TypedNumericParam {
  static type() {
    return ParamType.INTEGER;
  }
  defaultValueSerialized() {
    return this._default_value;
  }
  rawInputSerialized() {
    return this._raw_input;
  }
  valueSerialized() {
    return this.value;
  }
  _copyValue(param) {
    this.set(param.valueSerialized());
  }
  _prefilterInvalidRawInput(raw_input) {
    if (CoreType.isArray(raw_input)) {
      return raw_input[0];
    }
    if (CoreType.isString(raw_input) && CoreString.isNumber(raw_input)) {
      const num = parseInt(raw_input);
      if (num != null) {
        const converted = this.convert(num);
        if (converted != null) {
          return converted;
        }
      }
    }
    if (CoreType.isNumber(raw_input)) {
      const converted = this.convert(raw_input);
      if (converted != null) {
        return converted;
      }
    }
    return raw_input;
  }
  static areRawInputEqual(raw_input1, raw_input2) {
    return raw_input1 == raw_input2;
  }
  static areValuesEqual(val1, val2) {
    return val1 == val2;
  }
  static convert(raw_val) {
    if (CoreType.isNumber(raw_val)) {
      return Math.round(raw_val);
    } else {
      if (CoreType.isBoolean(raw_val)) {
        return raw_val ? 1 : 0;
      } else {
        if (CoreString.isNumber(raw_val)) {
          const parsed = parseInt(raw_val);
          if (CoreType.isNumber(parsed)) {
            return parsed;
          }
        }
      }
      return null;
    }
  }
  convert(raw_val) {
    const result = IntegerParam.convert(raw_val);
    if (result != null) {
      let validVal = this.options.ensureInRange(result);
      validVal = this.options.ensureValueInMenuEntries(validVal);
      return validVal;
    } else {
      return result;
    }
  }
}
