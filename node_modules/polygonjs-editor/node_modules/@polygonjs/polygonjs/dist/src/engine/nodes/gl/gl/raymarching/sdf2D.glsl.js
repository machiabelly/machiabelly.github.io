export default "float sdBox( in vec2 p, in vec2 b )\n{\n	vec2 d = abs(p)-b;\n	return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdCircle( vec2 p, float r )\n{\n	return length(p) - r;\n}\nfloat sdHeart( in vec2 p )\n{\n	p.x = abs(p.x);\n\n	if( p.y+p.x>1.0 )\n		return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n	return sqrt(min(dot2(p-vec2(0.00,1.00)),\n					dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\nfloat sdCross( in vec2 p, in vec2 b, float r ) \n{\n	p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n	vec2  q = p - b;\n	float k = max(q.y,q.x);\n	vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n	return sign(k)*length(max(w,0.0)) + r;\n}\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{\n	p = abs(p);\n	return length(p-min(p.x+p.y,w)*0.5) - r;\n}\nfloat sdStairs( in vec2 p, in vec2 wh, in float n )\n{\n	vec2 ba = wh*n;\n	float d = min(dot2(p-vec2(clamp(p.x,0.0,ba.x),0.0)), \n				  dot2(p-vec2(ba.x,clamp(p.y,0.0,ba.y))) );\n	float s = sign(max(-p.y,p.x-ba.x) );\n\n	float dia = length(wh);\n	p = mat2(wh.x,-wh.y, wh.y,wh.x)*p/dia;\n	float id = clamp(round(p.x/dia),0.0,n-1.0);\n	p.x = p.x - id*dia;\n	p = mat2(wh.x, wh.y,-wh.y,wh.x)*p/dia;\n\n	float hh = wh.y/2.0;\n	p.y -= hh;\n	if( p.y>hh*sign(p.x) ) s=1.0;\n	p = (id<0.5 || p.x>0.0) ? p : -p;\n	d = min( d, dot2(p-vec2(0.0,clamp(p.y,-hh,hh))) );\n	d = min( d, dot2(p-vec2(clamp(p.x,0.0,wh.x),hh)) );\n		\n	return sqrt(d)*s;\n}\n\nfloat SDFExtrudeX( in vec3 p, in float sdf, in float h )\n{\n	vec2 w = vec2( sdf, abs(p.x) - h );\n	return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\nfloat SDFExtrudeY( in vec3 p, in float sdf, in float h )\n{\n	vec2 w = vec2( sdf, abs(p.y) - h );\n	return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\nfloat SDFExtrudeZ( in vec3 p, in float sdf, in float h )\n{\n	vec2 w = vec2( sdf, abs(p.z) - h );\n	return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nvec2 SDFRevolutionX( in vec3 p, float o )\n{\n	return vec2( length(p.yz) - o, p.x );\n}\nvec2 SDFRevolutionY( in vec3 p, float o )\n{\n	return vec2( length(p.xz) - o, p.y );\n}\nvec2 SDFRevolutionZ( in vec3 p, float o )\n{\n	return vec2( length(p.xy) - o, p.z );\n}";
