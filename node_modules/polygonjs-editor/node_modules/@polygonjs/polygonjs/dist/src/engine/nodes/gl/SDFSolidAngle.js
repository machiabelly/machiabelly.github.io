"use strict";
import { BaseSDFGlNode } from "./_BaseSDF";
import { ThreeToGl } from "../../../../src/core/ThreeToGl";
import { NodeParamsConfig, ParamConfig } from "../utils/params/ParamsConfig";
import { GlConnectionPointType, GlConnectionPoint } from "../utils/io/connections/Gl";
import { GlType } from "../../poly/registers/nodes/types/Gl";
const OUTPUT_NAME = "float";
class SDFSolidAngleGlParamsConfig extends NodeParamsConfig {
  constructor() {
    super(...arguments);
    this.position = ParamConfig.VECTOR3([0, 0, 0], { hidden: true });
    this.center = ParamConfig.VECTOR3([0, 0, 0]);
    this.angle = ParamConfig.FLOAT(0.25 * Math.PI, {
      range: [0, Math.PI],
      rangeLocked: [true, false],
      step: 1e-5
    });
    this.radius = ParamConfig.FLOAT(0.5);
  }
}
const ParamsConfig = new SDFSolidAngleGlParamsConfig();
export class SDFSolidAngleGlNode extends BaseSDFGlNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return GlType.SDF_SOLID_ANGLE;
  }
  initializeNode() {
    super.initializeNode();
    this.io.outputs.setNamedOutputConnectionPoints([
      new GlConnectionPoint(OUTPUT_NAME, GlConnectionPointType.FLOAT)
    ]);
  }
  setLines(shadersCollectionController) {
    const position = this.position();
    const center = ThreeToGl.vector3(this.variableForInputParam(this.p.center));
    const angle = ThreeToGl.vector2(this.variableForInputParam(this.p.angle));
    const radius = ThreeToGl.float(this.variableForInputParam(this.p.radius));
    const float = this.glVarName(OUTPUT_NAME);
    const bodyLine = `float ${float} = sdSolidAngleWrapped(${position} - ${center}, ${angle}, ${radius})`;
    shadersCollectionController.addBodyLines(this, [bodyLine]);
    this._addSDFMethods(shadersCollectionController);
  }
}
