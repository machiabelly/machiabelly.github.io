export default "// // --- REFRACTION - START\n// vec3 refractedColor = vec3(0.);\n// float ior = __ior__;\n// float biasMult = __refractionBiasMult__;\n// vec3 tint = __refractionTint__;\n// float absorbtion = __absorbtion__;\n// if(__splitRGB__){\n// 	vec3 offset = __iorOffset__;\n// 	vec4 refractedDataR = GetRefractedData(p, n, rayDir, ior+offset.x, biasMult, __envMap__, __refractionDepth__);\n// 	vec4 refractedDataG = GetRefractedData(p, n, rayDir, ior+offset.y, biasMult, __envMap__, __refractionDepth__);\n// 	vec4 refractedDataB = GetRefractedData(p, n, rayDir, ior+offset.z, biasMult, __envMap__, __refractionDepth__);\n// 	refractedColor.r = applyRefractionAbsorbtion(refractedDataR, tint, absorbtion).r;\n// 	refractedColor.g = applyRefractionAbsorbtion(refractedDataG, tint, absorbtion).g;\n// 	refractedColor.b = applyRefractionAbsorbtion(refractedDataB, tint, absorbtion).b;\n// } else {\n// 	vec4 refractedData = GetRefractedData(p, n, rayDir, ior, biasMult, __envMap__, __refractionDepth__);\n// 	refractedColor = applyRefractionAbsorbtion(refractedData, tint, absorbtion);\n// }\n// col += refractedColor * __transmission__;\n// // --- REFRACTION - END";
