/**
 * get an object attribute
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { ParamConvertibleJsType } from '../utils/io/connections/Js';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
import { JsType } from '../../poly/registers/nodes/types/Js';
declare enum GetObjectAttributeInputName {
    attribName = "attribName"
}
declare class GetObjectAttributeJsParamsConfig extends NodeParamsConfig {
    type: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class GetObjectAttributeJsNode extends TypedJsNode<GetObjectAttributeJsParamsConfig> {
    readonly paramsConfig: GetObjectAttributeJsParamsConfig;
    static type(): JsType;
    initializeNode(): void;
    private _expectedInputTypes;
    private _expectedInputNames;
    private _expectedOutputTypes;
    private _expectedOutputNames;
    private _currentConnectionType;
    defaultValueName(): string;
    private _nextAttribName;
    paramDefaultValue(name: GetObjectAttributeInputName): string;
    setAttribType(type: ParamConvertibleJsType): void;
    setAttribName(attribName: string): void;
    attributeName(): string;
    setLines(linesController: JsLinesCollectionController): void;
}
export {};
