/**
 * compares 2 input values and generates a boolean value
 *
 * @remarks
 *
 * This node is frequently used with the [gl/TwoWaySwitch](/docs/nodes/gl/TwoWaySwitch)
 *
 */
import { TypedGlNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { ShadersCollectionController } from './code/utils/ShadersCollectionController';
import { GlConnectionPointType } from '../utils/io/connections/Gl';
export declare enum GlCompareTestName {
    EQUAL = "Equal",
    LESS_THAN = "Less Than",
    GREATER_THAN = "Greater Than",
    LESS_THAN_OR_EQUAL = "Less Than Or Equal",
    GREATER_THAN_OR_EQUAL = "Greater Than Or Equal",
    NOT_EQUAL = "Not Equal"
}
declare enum GlCompareTestOperation {
    EQUAL = "==",
    LESS_THAN = "<",
    GREATER_THAN = ">",
    LESS_THAN_OR_EQUAL = "<=",
    GREATER_THAN_OR_EQUAL = ">=",
    NOT_EQUAL = "!="
}
declare class CompareGlParamsConfig extends NodeParamsConfig {
    test: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.INTEGER>;
}
export declare class CompareGlNode extends TypedGlNode<CompareGlParamsConfig> {
    paramsConfig: CompareGlParamsConfig;
    static type(): string;
    initializeNode(): void;
    setTestName(test: GlCompareTestName): void;
    testName(): GlCompareTestName;
    operator(): GlCompareTestOperation;
    protected _gl_input_name(index: number): string;
    protected _expected_input_type(): GlConnectionPointType[];
    setLines(shaders_collection_controller: ShadersCollectionController): void;
}
export {};
