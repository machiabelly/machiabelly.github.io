"use strict";
import { ParamlessTypedJsNode } from "./_Base";
import { JsConnectionPoint, JsConnectionPointType, JS_CONNECTION_POINT_IN_NODE_DEF } from "../utils/io/connections/Js";
import { Poly } from "../../Poly";
const CONNECTION_OPTIONS = JS_CONNECTION_POINT_IN_NODE_DEF;
var GetPhysicsRBDJsNodeOutput = /* @__PURE__ */ ((GetPhysicsRBDJsNodeOutput2) => {
  GetPhysicsRBDJsNodeOutput2["RBD_ID"] = "RBDId";
  return GetPhysicsRBDJsNodeOutput2;
})(GetPhysicsRBDJsNodeOutput || {});
export class GetPhysicsRBDJsNode extends ParamlessTypedJsNode {
  static type() {
    return "getPhysicsRBD";
  }
  initializeNode() {
    this.io.inputs.setNamedInputConnectionPoints([
      new JsConnectionPoint("RBDId" /* RBD_ID */, JsConnectionPointType.STRING, CONNECTION_OPTIONS)
    ]);
    this.io.outputs.setNamedOutputConnectionPoints([
      new JsConnectionPoint(JsConnectionPointType.OBJECT_3D, JsConnectionPointType.OBJECT_3D, CONNECTION_OPTIONS)
    ]);
  }
  setLines(linesController) {
    const rbdId = this.variableForInput(linesController, "RBDId" /* RBD_ID */);
    const out = this.jsVarName(JsConnectionPointType.OBJECT_3D);
    const func = Poly.namedFunctionsRegister.getFunction("getPhysicsRBD", this, linesController);
    linesController.addBodyOrComputed(this, [
      {
        dataType: JsConnectionPointType.OBJECT_3D,
        varName: out,
        value: func.asString(rbdId)
      }
    ]);
  }
}
