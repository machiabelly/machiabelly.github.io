"use strict";
import { TypedJsNode } from "./_Base";
import { NodeParamsConfig } from "../utils/params/ParamsConfig";
import { JsType } from "../../poly/registers/nodes/types/Js";
class OutputJsParamsConfig extends NodeParamsConfig {
}
const ParamsConfig = new OutputJsParamsConfig();
export class OutputJsNode extends TypedJsNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return JsType.OUTPUT;
  }
  initializeNode() {
    super.initializeNode();
    this.lifecycle.onAfterAdded(() => {
      var _a, _b;
      (_b = (_a = this.functionNode()) == null ? void 0 : _a.assemblerController()) == null ? void 0 : _b.add_output_inputs(this);
    });
  }
  setLines(linesController) {
    var _a, _b;
    (_b = (_a = this.functionNode()) == null ? void 0 : _a.assemblerController()) == null ? void 0 : _b.assembler.setNodeLinesOutput(this, linesController);
  }
}
