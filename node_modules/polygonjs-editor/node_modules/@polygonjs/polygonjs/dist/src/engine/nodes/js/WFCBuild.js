"use strict";
import { NodeParamsConfig } from "../utils/params/ParamsConfig";
import { JsType } from "../../poly/registers/nodes/types/Js";
import { Poly } from "../../Poly";
import { inputObject3D } from "./_BaseObject3D";
import { BaseTriggerAndObjectJsNode } from "./_BaseTriggerAndObject";
import { JS_CONNECTION_POINT_IN_NODE_DEF, JsConnectionPoint, JsConnectionPointType } from "../utils/io/connections/Js";
var WFCBuildJsNodeInput = /* @__PURE__ */ ((WFCBuildJsNodeInput2) => {
  WFCBuildJsNodeInput2["SOLVER_OBJECT"] = "solverObject";
  return WFCBuildJsNodeInput2;
})(WFCBuildJsNodeInput || {});
const CONNECTION_OPTIONS = JS_CONNECTION_POINT_IN_NODE_DEF;
class WFCBuildJsParamsConfig extends NodeParamsConfig {
}
const ParamsConfig = new WFCBuildJsParamsConfig();
export class WFCBuildJsNode extends BaseTriggerAndObjectJsNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return JsType.WFC_BUILD;
  }
  _additionalInputs() {
    return [
      new JsConnectionPoint(
        "solverObject" /* SOLVER_OBJECT */,
        JsConnectionPointType.OBJECT_3D,
        CONNECTION_OPTIONS
      )
    ];
  }
  _additionalOutputs() {
    return [
      new JsConnectionPoint(
        "solverObject" /* SOLVER_OBJECT */,
        JsConnectionPointType.OBJECT_3D,
        CONNECTION_OPTIONS
      )
    ];
  }
  // override setLines(linesController: JsLinesCollectionController) {
  // 	super.setLines(linesController);
  // 	vector3OutputFromParam(this, this.p.position, linesController);
  // 	floatOutputFromParam(this, this.p.lerp, linesController);
  // 	booleanOutputFromParam(this, this.p.updateMatrix, linesController);
  // }
  setTriggerableLines(linesController) {
    const object3D = inputObject3D(this, linesController);
    const solverObject = this.variableForInput(linesController, "solverObject" /* SOLVER_OBJECT */);
    const func = Poly.namedFunctionsRegister.getFunction("WFCBuild", this, linesController);
    const bodyLine = func.asString(object3D, solverObject);
    linesController.addTriggerableLines(this, [bodyLine]);
  }
}
