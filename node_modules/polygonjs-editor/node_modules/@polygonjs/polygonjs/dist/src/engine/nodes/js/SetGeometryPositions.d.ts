/**
 * Update the geometry positions
 *
 *
 */
import { TypedJsNode } from './_Base';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { JsConnectionPointType } from '../utils/io/connections/Js';
import { JsLinesCollectionController } from './code/utils/JsLinesCollectionController';
export declare const SetGeometryPositionsInputName: {
    trigger: JsConnectionPointType;
    Object3D: JsConnectionPointType;
    values: string;
    lerp: string;
    attributeNeedsUpdate: string;
    computeNormals: string;
    computeTangents: string;
};
declare class SetGeometryPositionsJsParamsConfig extends NodeParamsConfig {
    lerp: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.FLOAT>;
    attributeNeedsUpdate: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    computeNormals: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    computeTangents: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
}
export declare class SetGeometryPositionsJsNode extends TypedJsNode<SetGeometryPositionsJsParamsConfig> {
    readonly paramsConfig: SetGeometryPositionsJsParamsConfig;
    static type(): string;
    initializeNode(): void;
    paramDefaultValue(name: string): number | boolean;
    expectedInputTypes(): JsConnectionPointType[];
    protected _expectedInputName(index: number): string;
    protected _expectedOutputTypes(): JsConnectionPointType[];
    protected _expectedOutputNames(i: number): JsConnectionPointType;
    setLines(linesController: JsLinesCollectionController): void;
    setTriggerableLines(shadersCollectionController: JsLinesCollectionController): void;
}
export {};
