/**
 * Copies the transform from one set of objects to another
 *
 *
 *
 */
import { TypedSopNode } from './_Base';
import { CoreGroup } from '../../../core/geometry/Group';
import { NodeParamsConfig } from '../utils/params/ParamsConfig';
import { SopType } from '../../poly/registers/nodes/types/Sop';
declare class TransformCopySopParamConfig extends NodeParamsConfig {
    /** @param toggle on if the second input should be used */
    useSecondInput: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.BOOLEAN>;
    /** @param use a reference object */
    reference: import("../utils/params/ParamsConfig").ParamTemplate<import("../../index_all").ParamType.NODE_PATH>;
}
export declare class TransformCopySopNode extends TypedSopNode<TransformCopySopParamConfig> {
    paramsConfig: TransformCopySopParamConfig;
    static type(): SopType;
    initializeNode(): void;
    cook(input_contents: CoreGroup[]): void;
    private _copy_from_src_objects;
    private _copy_from_found_node;
}
export {};
