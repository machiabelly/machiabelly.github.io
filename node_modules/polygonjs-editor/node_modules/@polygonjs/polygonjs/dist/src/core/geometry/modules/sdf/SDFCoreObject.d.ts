import { Matrix4, Box3, Sphere, Vector3 } from 'three';
import { SDFObject } from './SDFObject';
import { BaseCoreObject } from '../../entities/object/BaseCoreObject';
import { CoreObjectType, MergeCompactOptions } from '../../ObjectContent';
import { TransformTargetType } from '../../../Transform';
import { ObjectTransformMode, ObjectTransformSpace } from '../../../TransformSpace';
export declare class SDFCoreObject extends BaseCoreObject<CoreObjectType.SDF> {
    protected _object: SDFObject;
    constructor(_object: SDFObject, index: number);
    static position(object: SDFObject, target: Vector3): void;
    boundingBox(target: Box3): void;
    boundingSphere(target: Sphere): void;
    static applyMatrix(object: SDFObject, matrix: Matrix4, transformTargetType: TransformTargetType, transformSpace: ObjectTransformSpace, transformMode: ObjectTransformMode): void;
    static mergeCompact(options: MergeCompactOptions): void;
}
