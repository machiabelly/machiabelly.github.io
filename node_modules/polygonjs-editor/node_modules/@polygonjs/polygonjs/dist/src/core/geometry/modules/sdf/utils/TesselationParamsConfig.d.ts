import { BaseNodeType } from '../../../../../engine/nodes/_Base';
import { Constructor } from '../../../../../types/GlobalTypes';
export declare function SOPSDFTesselationParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param linear Tolerance */
        facetAngle: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param meshes color */
        meshesColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param wireframe */
        wireframe: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
    };
} & TBase;
export declare function OBJSDFTesselationParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param linear Tolerance */
        SDFFacetAngle: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.FLOAT>;
        /** @param meshes color */
        SDFMeshesColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param wireframe */
        SDFWireframe: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
    };
} & TBase;
export declare const TESSELATION_PARAM_NAMES: Set<string>;
export declare function addSDFTesselationParamsCallback(node: BaseNodeType, callback: () => void): void;
