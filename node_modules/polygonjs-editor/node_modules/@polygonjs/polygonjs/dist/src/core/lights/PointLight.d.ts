import { Constructor } from '../../types/GlobalTypes';
import { Vector2, Color, Mesh, PointLight } from 'three';
import { DefaultOperationParams } from '../operations/_Base';
export interface PointLightParams extends DefaultOperationParams {
    color: Color;
    intensity: number;
    decay: number;
    distance: number;
    name: string;
    castShadow: boolean;
    shadowAutoUpdate: boolean;
    shadowUpdateOnNextRender: boolean;
    shadowRes: Vector2;
    shadowBias: number;
    shadowNear: number;
    shadowFar: number;
    showHelper: boolean;
    helperSize: number;
    raymarchingPenumbra: number;
    raymarchingShadowBiasAngle: number;
    raymarchingShadowBiasDistance: number;
}
export declare const DEFAULT_POINT_LIGHT_PARAMS: PointLightParams;
export declare function PointLightParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        light: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FOLDER>;
        /** @param light color */
        color: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.COLOR>;
        /** @param light intensity */
        intensity: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param light decay */
        decay: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param light distance */
        distance: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param toggle to show helper */
        showHelper: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.BOOLEAN>;
        /** @param helper size */
        helperSize: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param light name */
        name: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.STRING>;
        shadow: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FOLDER>;
        /** @param toggle to cast shadows */
        castShadow: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.BOOLEAN>;
        /** @param toggle off if the shadows do not need to be regenerated */
        shadowAutoUpdate: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.BOOLEAN>;
        /** @param press button to update the shadows on next render */
        shadowUpdateOnNextRender: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.BOOLEAN>;
        /** @param shadow res */
        shadowRes: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.VECTOR2>;
        /** @param shadow bias */
        shadowBias: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param shadow camera near */
        shadowNear: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param shadow camera far */
        shadowFar: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param display shadow on a plane behind the light */
        raymarching: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FOLDER>;
        /** @param this affects the shadows cast inside raymarchingBuilder materials */
        raymarchingPenumbra: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param shadow bias */
        raymarchingShadowBiasAngle: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
        /** @param shadow bias */
        raymarchingShadowBiasDistance: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.FLOAT>;
    };
} & TBase;
interface Options {
    helperSize: number;
    light: PointLight;
}
export declare class CorePointLightHelper {
    private _material;
    createObject(): Mesh<import("three").BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>;
    createAndBuildObject(options: Options): Mesh<import("three").BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>;
    buildHelper(object: Mesh): Mesh<import("three").BufferGeometry<import("three").NormalBufferAttributes>, import("three").Material | import("three").Material[], import("three").Object3DEventMap>;
    private _matrixScale;
    update(object: Mesh, options: Options): void;
}
export {};
