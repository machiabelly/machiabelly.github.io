import { BaseNodeType } from '../../../../../engine/nodes/_Base';
import { Constructor } from '../../../../../types/GlobalTypes';
export declare function SOPQUADTesselationParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param triangles */
        triangles: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param split quads */
        splitQuads: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param wireframe */
        wireframe: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param wireframe color */
        wireframeColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param center */
        center: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param innerRadius */
        innerRadius: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param outerRadius */
        outerRadius: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param pointAttributes */
        pointAttributes: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.STRING>;
        /** @param primitiveAttributes */
        primitiveAttributes: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.STRING>;
    };
} & TBase;
export declare function OBJQUADTesselationParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param wireframe */
        QUADTriangles: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param split quads */
        QUADSplitQuads: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param wireframe */
        QUADWireframe: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param wireframe color */
        QUADWireframeColor: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.COLOR>;
        /** @param center */
        QUADCenter: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param QUADInnerRadius */
        QUADInnerRadius: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param QUADOuterRadius */
        QUADOuterRadius: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param pointAttributes */
        QUADPointAttributes: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.STRING>;
        /** @param primitiveAttributes */
        QUADPrimitiveAttributes: import("../../../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../../../engine/index_all").ParamType.STRING>;
    };
} & TBase;
export declare const TESSELATION_PARAM_NAMES: Set<string>;
export declare function addQUADTesselationParamsCallback(node: BaseNodeType, callback: () => void): void;
