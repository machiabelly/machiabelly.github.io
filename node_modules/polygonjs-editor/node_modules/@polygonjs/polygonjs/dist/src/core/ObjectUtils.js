"use strict";
import { arrayIsEqual } from "./ArrayUtils";
import { CoreType } from "./Type";
import cloneDeep from "lodash-es/cloneDeep";
import clone from "lodash-es/clone";
export function getObjectMethodNames(obj) {
  let properties = /* @__PURE__ */ new Set();
  let currentObj = obj;
  do {
    Object.getOwnPropertyNames(currentObj).map((item) => properties.add(item));
  } while (currentObj = Object.getPrototypeOf(currentObj));
  return [...properties.keys()].filter((item) => typeof obj[item] === "function");
}
export function objectIsEqual(object0, object1) {
  if (CoreType.isBoolean(object0) && CoreType.isBoolean(object1)) {
    return object0 == object1;
  }
  if (CoreType.isNumber(object0) && CoreType.isNumber(object1)) {
    return object0 == object1;
  }
  if (CoreType.isString(object0) && CoreType.isString(object1)) {
    return object0 == object1;
  }
  if (CoreType.isObject(object0) && CoreType.isObject(object1)) {
    const keys0 = Object.keys(object0);
    const keys1 = Object.keys(object1);
    if (!arrayIsEqual(keys0, keys1)) {
      return false;
    }
    return JSON.stringify(object0) == JSON.stringify(object1);
  }
  return false;
}
export function objectMerge(object0, object1) {
  return Object.assign(object0, object1);
}
export function objectClone(value) {
  return clone(value);
}
export function objectCloneDeep(value) {
  return cloneDeep(value);
}
