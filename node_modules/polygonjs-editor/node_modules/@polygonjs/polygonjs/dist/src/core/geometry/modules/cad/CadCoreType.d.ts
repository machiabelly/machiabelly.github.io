import { CadGeometryType } from './CadCommon';
import type { CadTypeMap, CadShape } from './CadCommon';
import type { CadObject } from './CadObject';
import { CoreObjectType, ObjectContent } from '../../ObjectContent';
export declare function isCADObject(o: ObjectContent<CoreObjectType>): boolean;
export declare class CoreCadType {
    static isPoint2d(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.POINT_2D>;
    static isGeom2dCurve(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.CURVE_2D>;
    static isVertex(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.VERTEX>;
    static isEdge(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.EDGE>;
    static isWire(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.WIRE>;
    static isFace(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.FACE>;
    static isShell(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.SHELL>;
    static isSolid(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.SOLID>;
    static isCompsolid(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.COMPSOLID>;
    static isCompound(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.COMPOUND>;
    static isShape(object: CadObject<CadGeometryType>): object is CadObject<CadGeometryType.VERTEX> | CadObject<CadGeometryType.EDGE> | CadObject<CadGeometryType.WIRE> | CadObject<CadGeometryType.FACE> | CadObject<CadGeometryType.SHELL> | CadObject<CadGeometryType.SOLID> | CadObject<CadGeometryType.COMPSOLID> | CadObject<CadGeometryType.COMPOUND>;
    static isGeometryShape<T extends CadGeometryType>(geometry: CadTypeMap[T] | CadShape): geometry is CadShape;
}
