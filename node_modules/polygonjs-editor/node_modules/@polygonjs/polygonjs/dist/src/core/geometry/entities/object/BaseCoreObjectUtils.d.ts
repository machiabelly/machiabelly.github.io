import { AttribValue, PolyDictionary } from '../../../../types/GlobalTypes';
import { CoreObjectType, ObjectContent } from '../../ObjectContent';
import { AttribSize, AttribType, ObjectData } from '../../Constant';
import type { BaseCoreObject } from '../../entities/object/BaseCoreObject';
export type AttributeDictionary = PolyDictionary<AttribValue>;
export declare function objectData<T extends CoreObjectType>(object: ObjectContent<T>): ObjectData;
export declare function coreObjectsAttribSizesByName<T extends CoreObjectType>(coreObjects: BaseCoreObject<T>[]): PolyDictionary<AttribSize[]>;
export declare function coreObjectAttributeTypesByName<T extends CoreObjectType>(coreObjects: BaseCoreObject<T>[]): PolyDictionary<AttribType[]>;
export declare function coreObjectsAttribNames<T extends CoreObjectType>(coreObjects: BaseCoreObject<T>[]): string[];
