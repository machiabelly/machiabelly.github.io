import { Constructor, PolyDictionary } from '../../types/GlobalTypes';
import { BaseNodeType } from '../../engine/nodes/_Base';
export declare class BaseCodeProcessor {
    protected node: BaseNodeType;
    constructor(node: BaseNodeType);
}
interface BuildCodeNodeFunctionOptions<T extends BaseCodeProcessor> {
    BaseCodeProcessor: Constructor<T>;
    BaseCodeProcessorName: string;
    node: BaseNodeType;
    functionBody: string;
    otherVariables?: PolyDictionary<any>;
}
export declare function buildCodeNodeFunction<T extends BaseCodeProcessor>(options: BuildCodeNodeFunctionOptions<T>): Constructor<T> | undefined;
export {};
