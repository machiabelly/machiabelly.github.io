import { Object3D } from 'three';
import { ToneAudioNode } from 'tone/build/esm/core/context/ToneAudioNode';
export declare enum DistanceModel {
    LINEAR = "linear",
    INVERSE = "inverse",
    EXPONENTIAL = "exponential"
}
export declare const DISTANCE_MODELS: DistanceModel[];
export declare class CorePositionalAudio extends Object3D {
    private tonePanner;
    private pannerNode;
    listenerTransformAutoUpdate: boolean;
    constructor();
    disconnect(): void;
    private _currentAudioNode;
    setInput(audioNode: ToneAudioNode | undefined): void;
    connect(audioNode: ToneAudioNode): void;
    getRefDistance(): number;
    setRefDistance(value: number): this;
    getRolloffFactor(): number;
    setRolloffFactor(value: number): this;
    getDistanceModel(): DistanceModelType;
    setDistanceModel(value: DistanceModel): this;
    getMaxDistance(): number;
    setMaxDistance(value: number): this;
    setDirectionalCone(coneInnerAngle: number, coneOuterAngle: number, coneOuterGain: number): this;
    coneInnerAngle(): number;
    coneOuterAngle(): number;
    updateMatrixWorld(force: boolean): void;
}
