import { Vector3, TypedArray } from 'three';
import { Number3, Number9 } from '../../types/GlobalTypes';
type AllowedArray = TypedArray | Number3 | Number9 | number[];
export declare function vecSetZero(a: AllowedArray, anr: number): void;
export declare function vecScale(a: AllowedArray, anr: number, scale: number): void;
export declare function vecCopy(a: AllowedArray, anr: number, b: AllowedArray, bnr: number): void;
export declare function vecAdd(a: AllowedArray, anr: number, b: AllowedArray, bnr: number, scale?: number): void;
export declare function vecAddVector3(a: AllowedArray, anr: number, v3: Vector3): void;
export declare function vecSetDiff(dst: AllowedArray, dnr: number, a: AllowedArray, anr: number, b: AllowedArray, bnr: number, scale?: number): void;
export declare function vecLengthSquared(a: AllowedArray, anr: number): number;
export declare function vecDistSquared(a: AllowedArray, anr: number, b: AllowedArray, bnr: number): number;
export declare function vecDot(a: AllowedArray, anr: number, b: AllowedArray, bnr: number): number;
export declare function vecSetCross(a: AllowedArray, anr: number, b: AllowedArray, bnr: number, c: AllowedArray, cnr: number): void;
export declare function matSetMult(A: AllowedArray, a: AllowedArray, anr: number, b: AllowedArray, bnr: number): void;
export declare function matSetInverse(A: Number9): void;
export {};
