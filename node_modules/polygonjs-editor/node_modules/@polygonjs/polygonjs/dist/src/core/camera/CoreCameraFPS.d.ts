import { Constructor } from '../../types/GlobalTypes';
import { Camera } from 'three';
export declare function CoreCameraFPSParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param expected FPS */
        maxFPS: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.INTEGER>;
        /** @param allow dynamic change. If this is true, the viewer will check the attribute on the camera at every frame, before adapting the FPS. This allows to change the FPS at a later stage */
        allowDynamicChange: import("../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../engine/index_all").ParamType.BOOLEAN>;
    };
} & TBase;
interface CreateViewerFPSOptions {
    camera: Camera;
}
export interface ViewerFPSConfig {
    minDelta: () => number;
}
export declare function isDeltaValid(accumulatedDelta: number, condig: ViewerFPSConfig): boolean;
export declare class CoreCameraViewerFPSController {
    static viewerFPSConfig(options: CreateViewerFPSOptions): ViewerFPSConfig | undefined;
}
export {};
