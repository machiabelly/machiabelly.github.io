"use strict";
export function setFirstValue(set) {
  for (const k of set) {
    return k;
  }
}
let i = 0;
export function setToArray(set, target) {
  target.length = set.size;
  i = 0;
  set.forEach((elem) => {
    target[i] = elem;
    i++;
  });
  return target;
}
export function setUnion(set0, set1, target) {
  target.clear();
  set0.forEach((val) => target.add(val));
  set1.forEach((val) => target.add(val));
  return target;
}
export function setIntersection(set0, set1, target) {
  target.clear();
  set0.forEach((val) => {
    if (set1.has(val)) {
      target.add(val);
    }
  });
  set1.forEach((val) => {
    if (set0.has(val)) {
      target.add(val);
    }
  });
  return target;
}
export function setDifference(set0, set1, target) {
  target.clear();
  set0.forEach((val) => {
    if (!set1.has(val)) {
      target.add(val);
    }
  });
  return target;
}
export function setXOR(set0, set1, target) {
  target.clear();
  set0.forEach((val) => {
    if (!set1.has(val)) {
      target.add(val);
    }
  });
  set1.forEach((val) => {
    if (!set0.has(val)) {
      target.add(val);
    }
  });
  return target;
}
