import { Constructor } from '../../../types/GlobalTypes';
import { MarkerTrackingControllerConfig } from '../../webXR/markerTracking/Common';
import { PolyScene } from '../../../engine/scene/PolyScene';
import { Camera } from 'three';
export declare function CoreCameraMarkerTrackingParamConfig<TBase extends Constructor>(Base: TBase): {
    new (...args: any[]): {
        /** @param select if you want to use the webcam or an image/video as tracking source */
        sourceMode: import("../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../engine/index_all").ParamType.INTEGER>;
        /** @param image or video url */
        sourceUrl: import("../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../engine/index_all").ParamType.STRING>;
        /** @param transformMode */
        transformMode: import("../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../engine/index_all").ParamType.INTEGER>;
        /** @param smooth */
        smooth: import("../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../engine/index_all").ParamType.BOOLEAN>;
        /** @param  smooth count */
        smoothCount: import("../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../engine/index_all").ParamType.INTEGER>;
        /** @param barcode type */
        barCodeType: import("../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../engine/index_all").ParamType.STRING>;
        /** @param barcode value */
        barCodeValue: import("../../../engine/nodes/utils/params/ParamsConfig").ParamTemplate<import("../../../engine/index_all").ParamType.INTEGER>;
    };
} & TBase;
interface MarkerTrackingControllerOptions {
    camera: Camera;
    scene: PolyScene;
    canvas: HTMLCanvasElement;
    onError: (errorMessage: string) => void;
}
export declare class CoreCameraMarkerTrackingController {
    static process(options: MarkerTrackingControllerOptions): MarkerTrackingControllerConfig | undefined;
}
export {};
