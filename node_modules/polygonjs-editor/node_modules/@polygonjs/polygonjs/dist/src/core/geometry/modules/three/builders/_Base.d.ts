import { BufferGeometry } from 'three';
import { BaseCorePoint } from '../../../entities/point/CorePoint';
import { PolyDictionary } from '../../../../../types/GlobalTypes';
import { CoreObjectType, ObjectContent } from '../../../ObjectContent';
export declare abstract class CoreGeometryBuilderBase {
    fromPoints<T extends CoreObjectType>(object: ObjectContent<T>, points: BaseCorePoint[]): BufferGeometry;
    protected abstract _filterPoints(points: BaseCorePoint[]): BaseCorePoint[];
    protected abstract _indicesFromPoints(new_index_by_old_index: PolyDictionary<number>, old_geometry: BufferGeometry): number[] | undefined;
}
