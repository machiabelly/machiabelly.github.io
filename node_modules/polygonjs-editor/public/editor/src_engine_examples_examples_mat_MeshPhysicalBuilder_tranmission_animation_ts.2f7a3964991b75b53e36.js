(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshPhysicalBuilder_tranmission_animation_ts"],{

/***/ 40679:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21410);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo12 = parentNode.createNode("geo");
    geo12.setName("geo1");
    function create_MAT(geo13) {
      var MAT2 = geo13.createNode("materialsNetwork");
      MAT2.setName("MAT");
      function create_meshPhysicalBuilder_SIMPLE(MAT3) {
        var meshPhysicalBuilder_SIMPLE2 = MAT3.createNode("meshPhysicalBuilder");
        meshPhysicalBuilder_SIMPLE2.setName("meshPhysicalBuilder_SIMPLE");
        function create_abs1(meshPhysicalBuilder_SIMPLE3) {
          var abs12 = meshPhysicalBuilder_SIMPLE3.createNode("abs");
          abs12.setName("abs1");
          abs12.uiData.setPosition(-150, 600);
          abs12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          abs12.params.postCreateSpareParams();
          abs12.params.runOnSceneLoadHooks();
          return abs12;
        }
        function create_constant1(meshPhysicalBuilder_SIMPLE3) {
          var constant12 = meshPhysicalBuilder_SIMPLE3.createNode("constant");
          constant12.setName("constant1");
          constant12.uiData.setPosition(-500, 250);
          constant12.p.type.set(4);
          constant12.params.postCreateSpareParams();
          constant12.params.runOnSceneLoadHooks();
          return constant12;
        }
        function create_distance1(meshPhysicalBuilder_SIMPLE3) {
          var distance12 = meshPhysicalBuilder_SIMPLE3.createNode("distance");
          distance12.setName("distance1");
          distance12.uiData.setPosition(-300, 150);
          distance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "p0", [0, 0, 0], { spare: true, editable: false });
          distance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "p1", [0, 0, 0], { spare: true, editable: false });
          distance12.params.postCreateSpareParams();
          distance12.params.runOnSceneLoadHooks();
          return distance12;
        }
        function create_fitFrom01ToVariance1(meshPhysicalBuilder_SIMPLE3) {
          var fitFrom01ToVariance12 = meshPhysicalBuilder_SIMPLE3.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance12.setName("fitFrom01ToVariance1");
          fitFrom01ToVariance12.uiData.setPosition(-50, 600);
          fitFrom01ToVariance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance12.params.get("center").set(1);
          fitFrom01ToVariance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance12.params.postCreateSpareParams();
          fitFrom01ToVariance12.params.runOnSceneLoadHooks();
          return fitFrom01ToVariance12;
        }
        function create_globals1(meshPhysicalBuilder_SIMPLE3) {
          var globals12 = meshPhysicalBuilder_SIMPLE3.createNode("globals");
          globals12.setName("globals1");
          globals12.uiData.setPosition(-750, -50);
          globals12.params.postCreateSpareParams();
          globals12.params.runOnSceneLoadHooks();
          return globals12;
        }
        function create_globals2(meshPhysicalBuilder_SIMPLE3) {
          var globals22 = meshPhysicalBuilder_SIMPLE3.createNode("globals");
          globals22.setName("globals2");
          globals22.uiData.setPosition(-600, 400);
          globals22.params.postCreateSpareParams();
          globals22.params.runOnSceneLoadHooks();
          return globals22;
        }
        function create_multAdd1(meshPhysicalBuilder_SIMPLE3) {
          var multAdd12 = meshPhysicalBuilder_SIMPLE3.createNode("multAdd");
          multAdd12.setName("multAdd1");
          multAdd12.uiData.setPosition(-450, 600);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd12.params.get("mult").set(3);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd12.params.postCreateSpareParams();
          multAdd12.params.runOnSceneLoadHooks();
          return multAdd12;
        }
        function create_output1(meshPhysicalBuilder_SIMPLE3) {
          var output12 = meshPhysicalBuilder_SIMPLE3.createNode("output");
          output12.setName("output1");
          output12.uiData.setPosition(250, 0);
          output12.params.postCreateSpareParams();
          output12.params.runOnSceneLoadHooks();
          return output12;
        }
        function create_sin1(meshPhysicalBuilder_SIMPLE3) {
          var sin12 = meshPhysicalBuilder_SIMPLE3.createNode("sin");
          sin12.setName("sin1");
          sin12.uiData.setPosition(-300, 600);
          sin12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin12.params.postCreateSpareParams();
          sin12.params.runOnSceneLoadHooks();
          return sin12;
        }
        var abs1 = create_abs1(meshPhysicalBuilder_SIMPLE2);
        var constant1 = create_constant1(meshPhysicalBuilder_SIMPLE2);
        var distance1 = create_distance1(meshPhysicalBuilder_SIMPLE2);
        var fitFrom01ToVariance1 = create_fitFrom01ToVariance1(meshPhysicalBuilder_SIMPLE2);
        var globals1 = create_globals1(meshPhysicalBuilder_SIMPLE2);
        var globals2 = create_globals2(meshPhysicalBuilder_SIMPLE2);
        var multAdd1 = create_multAdd1(meshPhysicalBuilder_SIMPLE2);
        var output1 = create_output1(meshPhysicalBuilder_SIMPLE2);
        var sin1 = create_sin1(meshPhysicalBuilder_SIMPLE2);
        abs1.setInput("in", sin1, "val");
        distance1.setInput("p0", globals1, "position");
        distance1.setInput("p1", constant1, "val");
        fitFrom01ToVariance1.setInput("val", abs1, "val");
        multAdd1.setInput("value", globals2, "time");
        output1.setInput("thickness", fitFrom01ToVariance1, "val");
        sin1.setInput("radians", multAdd1, "val");
        meshPhysicalBuilder_SIMPLE2.uiData.setPosition(0, -100);
        meshPhysicalBuilder_SIMPLE2.p.useEnvMap.set(true);
        meshPhysicalBuilder_SIMPLE2.p.envMap.set("../../../COP/envMap");
        meshPhysicalBuilder_SIMPLE2.p.metalness.set(0.12);
        meshPhysicalBuilder_SIMPLE2.p.roughness.set(0);
        meshPhysicalBuilder_SIMPLE2.p.transmission.set(1);
        meshPhysicalBuilder_SIMPLE2.p.ior.set(1.439989);
        meshPhysicalBuilder_SIMPLE2.p.thickness.set(2.4);
        meshPhysicalBuilder_SIMPLE2.params.postCreateSpareParams();
        meshPhysicalBuilder_SIMPLE2.params.runOnSceneLoadHooks();
        return meshPhysicalBuilder_SIMPLE2;
      }
      function create_meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE(MAT3) {
        var meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2 = MAT3.createNode("meshPhysicalBuilder");
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.setName("meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE");
        function create_abs1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var abs12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("abs");
          abs12.setName("abs1");
          abs12.uiData.setPosition(-150, 600);
          abs12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          abs12.params.postCreateSpareParams();
          abs12.params.runOnSceneLoadHooks();
          return abs12;
        }
        function create_constant1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var constant12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("constant");
          constant12.setName("constant1");
          constant12.uiData.setPosition(-1250, 950);
          constant12.p.type.set(4);
          constant12.p.vec3.set([-0.41822157029002605, 0.703117159699047, -0.12690997843084403]);
          constant12.params.postCreateSpareParams();
          constant12.params.runOnSceneLoadHooks();
          return constant12;
        }
        function create_distance1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var distance12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("distance");
          distance12.setName("distance1");
          distance12.uiData.setPosition(-950, 800);
          distance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "p0", [0, 0, 0], { spare: true, editable: false });
          distance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "p1", [0, 0, 0], { spare: true, editable: false });
          distance12.params.postCreateSpareParams();
          distance12.params.runOnSceneLoadHooks();
          return distance12;
        }
        function create_fitFrom01ToVariance1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var fitFrom01ToVariance12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance12.setName("fitFrom01ToVariance1");
          fitFrom01ToVariance12.uiData.setPosition(-50, 600);
          fitFrom01ToVariance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance12.params.get("center").set(1);
          fitFrom01ToVariance12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance12.params.postCreateSpareParams();
          fitFrom01ToVariance12.params.runOnSceneLoadHooks();
          return fitFrom01ToVariance12;
        }
        function create_globals1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var globals12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("globals");
          globals12.setName("globals1");
          globals12.uiData.setPosition(-1350, 600);
          globals12.params.postCreateSpareParams();
          globals12.params.runOnSceneLoadHooks();
          return globals12;
        }
        function create_globals2(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var globals22 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("globals");
          globals22.setName("globals2");
          globals22.uiData.setPosition(-600, 400);
          globals22.params.postCreateSpareParams();
          globals22.params.runOnSceneLoadHooks();
          return globals22;
        }
        function create_multAdd1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var multAdd12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("multAdd");
          multAdd12.setName("multAdd1");
          multAdd12.uiData.setPosition(-450, 600);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd12.params.get("mult").set(3);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: false });
          multAdd12.params.postCreateSpareParams();
          multAdd12.params.runOnSceneLoadHooks();
          return multAdd12;
        }
        function create_multAdd2(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var multAdd22 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("multAdd");
          multAdd22.setName("multAdd2");
          multAdd22.uiData.setPosition(-800, 800);
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd22.params.get("mult").set(2);
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd22.params.postCreateSpareParams();
          multAdd22.params.runOnSceneLoadHooks();
          return multAdd22;
        }
        function create_negate1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var negate12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("negate");
          negate12.setName("negate1");
          negate12.uiData.setPosition(-600, 750);
          negate12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          negate12.params.postCreateSpareParams();
          negate12.params.runOnSceneLoadHooks();
          return negate12;
        }
        function create_output1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var output12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("output");
          output12.setName("output1");
          output12.uiData.setPosition(250, 0);
          output12.params.postCreateSpareParams();
          output12.params.runOnSceneLoadHooks();
          return output12;
        }
        function create_sin1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3) {
          var sin12 = meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE3.createNode("sin");
          sin12.setName("sin1");
          sin12.uiData.setPosition(-300, 600);
          sin12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin12.params.postCreateSpareParams();
          sin12.params.runOnSceneLoadHooks();
          return sin12;
        }
        var abs1 = create_abs1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var constant1 = create_constant1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var distance1 = create_distance1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var fitFrom01ToVariance1 = create_fitFrom01ToVariance1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var globals1 = create_globals1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var globals2 = create_globals2(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var multAdd1 = create_multAdd1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var multAdd2 = create_multAdd2(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var negate1 = create_negate1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var output1 = create_output1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        var sin1 = create_sin1(meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2);
        abs1.setInput("in", sin1, "val");
        distance1.setInput("p0", globals1, "position");
        distance1.setInput("p1", constant1, "val");
        fitFrom01ToVariance1.setInput("val", abs1, "val");
        multAdd1.setInput("value", globals2, "time");
        multAdd1.setInput("postAdd", negate1, "val");
        multAdd2.setInput("value", distance1, "val");
        negate1.setInput("in", multAdd2, "val");
        output1.setInput("thickness", fitFrom01ToVariance1, "val");
        sin1.setInput("radians", multAdd1, "val");
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.uiData.setPosition(0, 200);
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.p.useEnvMap.set(true);
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.p.envMap.set("../../../COP/envMap");
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.p.metalness.set(0.12);
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.p.roughness.set(0);
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.p.transmission.set(1);
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.p.ior.set(1.439989);
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.p.thickness.set(2.4);
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.params.postCreateSpareParams();
        meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2.params.runOnSceneLoadHooks();
        return meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE2;
      }
      var meshPhysicalBuilder_SIMPLE = create_meshPhysicalBuilder_SIMPLE(MAT2);
      var meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE = create_meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE(MAT2);
      MAT2.uiData.setPosition(-450, 200);
      MAT2.params.postCreateSpareParams();
      MAT2.params.runOnSceneLoadHooks();
      return { MAT: MAT2, meshPhysicalBuilder_SIMPLE, meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE };
    }
    function create_fileGLTF2(geo13) {
      var fileGLTF22 = geo13.createNode("fileGLTF");
      fileGLTF22.setName("fileGLTF2");
      fileGLTF22.uiData.setPosition(-100, -150);
      fileGLTF22.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/resources/threedscans.com/horse_head.glb"
      );
      fileGLTF22.params.postCreateSpareParams();
      fileGLTF22.params.runOnSceneLoadHooks();
      return fileGLTF22;
    }
    function create_material1(geo13) {
      var material12 = geo13.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(50, 100);
      material12.p.group.set("*");
      material12.p.material.set("../MAT/meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_material2(geo13) {
      var material22 = geo13.createNode("material");
      material22.setName("material2");
      material22.uiData.setPosition(-200, 100);
      material22.p.group.set("*");
      material22.p.material.set("../MAT/meshPhysicalBuilder_SIMPLE");
      material22.params.postCreateSpareParams();
      material22.params.runOnSceneLoadHooks();
      return material22;
    }
    function create_merge1(geo13) {
      var merge12 = geo13.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(-50, 300);
      merge12.flags.display.set(true);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_transform1(geo13) {
      var transform12 = geo13.createNode("transform");
      transform12.setName("transform1");
      transform12.uiData.setPosition(50, -50);
      transform12.p.applyOn.set(1);
      transform12.p.t.set([-0.42343116063859215, 0, 0]);
      transform12.params.postCreateSpareParams();
      transform12.params.runOnSceneLoadHooks();
      return transform12;
    }
    function create_transform2(geo13) {
      var transform22 = geo13.createNode("transform");
      transform22.setName("transform2");
      transform22.uiData.setPosition(-200, -50);
      transform22.p.applyOn.set(1);
      transform22.p.t.set([0.8255372086449795, 0, 0]);
      transform22.params.postCreateSpareParams();
      transform22.params.runOnSceneLoadHooks();
      return transform22;
    }
    var MAT = create_MAT(geo12);
    var fileGLTF2 = create_fileGLTF2(geo12);
    var material1 = create_material1(geo12);
    var material2 = create_material2(geo12);
    var merge1 = create_merge1(geo12);
    var transform1 = create_transform1(geo12);
    var transform2 = create_transform2(geo12);
    material1.setInput(0, transform1);
    material2.setInput(0, transform2);
    merge1.setInput(0, material2);
    merge1.setInput(1, material1);
    transform1.setInput(0, fileGLTF2);
    transform2.setInput(0, fileGLTF2);
    geo12.uiData.setPosition(-50, -150);
    geo12.flags.display.set(true);
    geo12.params.postCreateSpareParams();
    geo12.params.runOnSceneLoadHooks();
    return { geo1: geo12, MAT };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return hemisphereLight1;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events12 = perspectiveCamera13.createNode("eventsNetwork");
      events12.setName("events1");
      function create_cameraOrbitControls1(events13) {
        var cameraOrbitControls12 = events13.createNode("cameraOrbitControls");
        cameraOrbitControls12.setName("cameraOrbitControls1");
        cameraOrbitControls12.uiData.setPosition(150, 50);
        cameraOrbitControls12.p.target.set([0.15647768284029934, 0.9092471051888197, 0.5129758568425138]);
        cameraOrbitControls12.params.postCreateSpareParams();
        cameraOrbitControls12.params.runOnSceneLoadHooks();
        return cameraOrbitControls12;
      }
      var cameraOrbitControls1 = create_cameraOrbitControls1(events12);
      events12.uiData.setPosition(-200, 50);
      events12.params.postCreateSpareParams();
      events12.params.runOnSceneLoadHooks();
      return { events1: events12, cameraOrbitControls1 };
    }
    var events1 = create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([0.19955218333974073, 1.1514460830975124, -2.474873075483834]);
    perspectiveCamera12.p.r.set([-175.36717412010273, 0.8240470923712626, 179.93322588655778]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return { perspectiveCamera1: perspectiveCamera12, events1 };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    function create_envMap(COP2) {
      var envMap2 = COP2.createNode("envMap");
      envMap2.setName("envMap");
      envMap2.uiData.setPosition(50, 200);
      envMap2.params.postCreateSpareParams();
      envMap2.params.runOnSceneLoadHooks();
      return envMap2;
    }
    function create_imageEnv(COP2) {
      var imageEnv2 = COP2.createNode("imageEXR");
      imageEnv2.setName("imageEnv");
      imageEnv2.uiData.setPosition(50, 100);
      imageEnv2.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv2.params.postCreateSpareParams();
      imageEnv2.params.runOnSceneLoadHooks();
      return imageEnv2;
    }
    function create_imageUv(COP2) {
      var imageUv2 = COP2.createNode("image");
      imageUv2.setName("imageUv");
      imageUv2.uiData.setPosition(-100, 100);
      imageUv2.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv2.p.tflipY.set(true);
      imageUv2.params.postCreateSpareParams();
      imageUv2.params.runOnSceneLoadHooks();
      return imageUv2;
    }
    var envMap = create_envMap(COP);
    var imageEnv = create_imageEnv(COP);
    var imageUv = create_imageUv(COP);
    envMap.setInput(0, imageEnv);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { COP, imageUv };
  }
  function create_ground(parentNode) {
    var ground = parentNode.createNode("geo");
    ground.setName("ground");
    function create_MAT(ground2) {
      var MAT2 = ground2.createNode("materialsNetwork");
      MAT2.setName("MAT");
      function create_COP2(MAT3) {
        var COP2 = MAT3.createNode("copNetwork");
        COP2.setName("COP");
        function create_image_DIFF(COP3) {
          var image_DIFF2 = COP3.createNode("image");
          image_DIFF2.setName("image_DIFF");
          image_DIFF2.uiData.setPosition(0, 0);
          image_DIFF2.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/floor_tiles_06/2k/diffuse.jpg"
          );
          image_DIFF2.p.tcolorSpace.set(true);
          image_DIFF2.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_1__.SRGBColorSpace);
          image_DIFF2.p.tminFilter.set(true);
          image_DIFF2.p.tmagFilter.set(true);
          image_DIFF2.p.tanisotropy.set(true);
          image_DIFF2.p.useRendererMaxAnisotropy.set(true);
          image_DIFF2.params.postCreateSpareParams();
          image_DIFF2.params.runOnSceneLoadHooks();
          return image_DIFF2;
        }
        function create_image_ROUGHNESS(COP3) {
          var image_ROUGHNESS2 = COP3.createNode("image");
          image_ROUGHNESS2.setName("image_ROUGHNESS");
          image_ROUGHNESS2.uiData.setPosition(0, 200);
          image_ROUGHNESS2.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/floor_tiles_06/2k/rough.jpg"
          );
          image_ROUGHNESS2.p.tminFilter.set(true);
          image_ROUGHNESS2.p.tmagFilter.set(true);
          image_ROUGHNESS2.p.tanisotropy.set(true);
          image_ROUGHNESS2.p.useRendererMaxAnisotropy.set(true);
          image_ROUGHNESS2.params.postCreateSpareParams();
          image_ROUGHNESS2.params.runOnSceneLoadHooks();
          return image_ROUGHNESS2;
        }
        var image_DIFF = create_image_DIFF(COP2);
        var image_ROUGHNESS = create_image_ROUGHNESS(COP2);
        COP2.uiData.setPosition(300, 0);
        COP2.params.postCreateSpareParams();
        COP2.params.runOnSceneLoadHooks();
        return { COP: COP2, image_DIFF, image_ROUGHNESS };
      }
      function create_meshPhysical1(MAT3) {
        var meshPhysical12 = MAT3.createNode("meshPhysical");
        meshPhysical12.setName("meshPhysical1");
        meshPhysical12.uiData.setPosition(0, 0);
        meshPhysical12.p.useMap.set(true);
        meshPhysical12.p.map.set("../COP/image_DIFF");
        meshPhysical12.p.useRoughnessMap.set(true);
        meshPhysical12.p.roughnessMap.set("../COP/image_ROUGHNESS");
        meshPhysical12.p.useFog.set(true);
        meshPhysical12.params.postCreateSpareParams();
        meshPhysical12.params.runOnSceneLoadHooks();
        return meshPhysical12;
      }
      var COP = create_COP2(MAT2);
      var meshPhysical1 = create_meshPhysical1(MAT2);
      MAT2.uiData.setPosition(-100, 150);
      MAT2.params.postCreateSpareParams();
      MAT2.params.runOnSceneLoadHooks();
      return { MAT: MAT2, COP, meshPhysical1 };
    }
    function create_material1(ground2) {
      var material12 = ground2.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(100, 150);
      material12.p.material.set("../MAT/meshPhysical1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_plane1(ground2) {
      var plane12 = ground2.createNode("plane");
      plane12.setName("plane1");
      plane12.uiData.setPosition(100, 0);
      plane12.p.size.set([9, 9]);
      plane12.params.postCreateSpareParams();
      plane12.params.runOnSceneLoadHooks();
      return plane12;
    }
    function create_uvTransform1(ground2) {
      var uvTransform12 = ground2.createNode("uvTransform");
      uvTransform12.setName("uvTransform1");
      uvTransform12.uiData.setPosition(100, 250);
      uvTransform12.flags.display.set(true);
      uvTransform12.p.s.set([2.3000000000000003, 2.3000000000000003]);
      uvTransform12.params.postCreateSpareParams();
      uvTransform12.params.runOnSceneLoadHooks();
      return uvTransform12;
    }
    var MAT = create_MAT(ground);
    var material1 = create_material1(ground);
    var plane1 = create_plane1(ground);
    var uvTransform1 = create_uvTransform1(ground);
    material1.setInput(0, plane1);
    uvTransform1.setInput(0, material1);
    ground.uiData.setPosition(-50, -250);
    ground.flags.display.set(true);
    ground.params.postCreateSpareParams();
    ground.params.runOnSceneLoadHooks();
    return { ground, MAT };
  }
  function create_text_hint(parentNode) {
    var text_hint = parentNode.createNode("geo");
    text_hint.setName("text_hint");
    function create_MAT(text_hint2) {
      var MAT2 = text_hint2.createNode("materialsNetwork");
      MAT2.setName("MAT");
      function create_meshBasic1(MAT3) {
        var meshBasic12 = MAT3.createNode("meshBasic");
        meshBasic12.setName("meshBasic1");
        meshBasic12.uiData.setPosition(-50, 200);
        meshBasic12.params.postCreateSpareParams();
        meshBasic12.params.runOnSceneLoadHooks();
        return meshBasic12;
      }
      var meshBasic1 = create_meshBasic1(MAT2);
      MAT2.uiData.setPosition(-250, 350);
      MAT2.params.postCreateSpareParams();
      MAT2.params.runOnSceneLoadHooks();
      return { MAT: MAT2, meshBasic1 };
    }
    function create_material1(text_hint2) {
      var material12 = text_hint2.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(100, 450);
      material12.flags.display.set(true);
      material12.p.material.set("../MAT/meshBasic1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_merge1(text_hint2) {
      var merge12 = text_hint2.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(100, 300);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_text1(text_hint2) {
      var text12 = text_hint2.createNode("text");
      text12.setName("text1");
      text12.uiData.setPosition(-50, 0);
      text12.p.font.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/fonts/SourceCodePro-Black.ttf"
      );
      text12.p.text.set("thickness changing\nover time");
      text12.p.type.set(1);
      text12.p.size.set(0.1);
      text12.p.justifyMode.set(1);
      text12.params.postCreateSpareParams();
      text12.params.runOnSceneLoadHooks();
      return text12;
    }
    function create_text2(text_hint2) {
      var text22 = text_hint2.createNode("text");
      text22.setName("text2");
      text22.uiData.setPosition(200, 0);
      text22.p.font.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/fonts/SourceCodePro-Black.ttf"
      );
      text22.p.text.set("thickness changing\nover time\nand with distance from head");
      text22.p.type.set(1);
      text22.p.size.set('ch("../text1/size")');
      text22.params.postCreateSpareParams();
      text22.params.runOnSceneLoadHooks();
      return text22;
    }
    function create_transform1(text_hint2) {
      var transform12 = text_hint2.createNode("transform");
      transform12.setName("transform1");
      transform12.uiData.setPosition(-50, 150);
      transform12.p.t.set([0.26888794557298235, 1.7530739286367523, 0]);
      transform12.p.r.set([0, 180, 0]);
      transform12.params.postCreateSpareParams();
      transform12.params.runOnSceneLoadHooks();
      return transform12;
    }
    function create_transform2(text_hint2) {
      var transform22 = text_hint2.createNode("transform");
      transform22.setName("transform2");
      transform22.uiData.setPosition(200, 150);
      transform22.p.t.set([0.04235557163031184, 'ch("../transform1/ty")', 0]);
      transform22.p.r.set([0, 180, 0]);
      transform22.params.postCreateSpareParams();
      transform22.params.runOnSceneLoadHooks();
      return transform22;
    }
    var MAT = create_MAT(text_hint);
    var material1 = create_material1(text_hint);
    var merge1 = create_merge1(text_hint);
    var text1 = create_text1(text_hint);
    var text2 = create_text2(text_hint);
    var transform1 = create_transform1(text_hint);
    var transform2 = create_transform2(text_hint);
    material1.setInput(0, merge1);
    merge1.setInput(0, transform1);
    merge1.setInput(1, transform2);
    transform1.setInput(0, text1);
    transform2.setInput(0, text2);
    text_hint.uiData.setPosition(-50, -350);
    text_hint.flags.display.set(true);
    text_hint.params.postCreateSpareParams();
    text_hint.params.runOnSceneLoadHooks();
    return { text_hint, MAT };
  }
  var geo1 = create_geo1(root);
  create_hemisphereLight1(root);
  var { perspectiveCamera1 } = create_perspectiveCamera1(root);
  create_COP(root);
  create_ground(root);
  create_text_hint(root);
  scene.play();
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: geo1.MAT.meshPhysicalBuilder_WITH_DISTANCE_FROM_SOURCE.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshPhysicalBuilder_tranmission_animation_ts.2f7a3964991b75b53e36.js.map