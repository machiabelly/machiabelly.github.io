(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_advanced_Portal_ts"],{

/***/ 6620:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52070);




function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  const scene_root_nodes = {};
  function create_ground(parentNode) {
    var ground = parentNode.createNode("geo");
    ground.setName("ground");
    const ground_nodes = {};
    function create_MAT(ground2) {
      var MAT = ground2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandardBuilder1(MAT2) {
        var meshStandardBuilder1 = MAT2.createNode("meshStandardBuilder");
        meshStandardBuilder1.setName("meshStandardBuilder1");
        const meshStandardBuilder1_nodes = {};
        function create_checkers1(meshStandardBuilder12) {
          var checkers1 = meshStandardBuilder12.createNode("checkers");
          checkers1.setName("checkers1");
          const checkers1_nodes = {};
          checkers1.uiData.setPosition(50, 200);
          checkers1.params.postCreateSpareParams();
          checkers1.params.runOnSceneLoadHooks();
          return { node: checkers1, children: checkers1_nodes };
        }
        function create_constant1(meshStandardBuilder12) {
          var constant1 = meshStandardBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(50, -150);
          constant1.p.type.set(4);
          constant1.p.color.set([0.24313725490196078, 0.5098039215686274, 0.8549019607843137]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(meshStandardBuilder12) {
          var constant2 = meshStandardBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(0, 0);
          constant2.p.type.set(4);
          constant2.p.color.set([0.047058823529411764, 0.10196078431372549, 0.17647058823529413]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_floatToVec2_1(meshStandardBuilder12) {
          var floatToVec2_1 = meshStandardBuilder12.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-100, 200);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(meshStandardBuilder12) {
          var globals1 = meshStandardBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-450, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_mix1(meshStandardBuilder12) {
          var mix1 = meshStandardBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(250, 0);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(meshStandardBuilder12) {
          var output1 = meshStandardBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(400, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_vec3ToFloat1(meshStandardBuilder12) {
          var vec3ToFloat1 = meshStandardBuilder12.createNode("vec3ToFloat");
          vec3ToFloat1.setName("vec3ToFloat1");
          const vec3ToFloat1_nodes = {};
          vec3ToFloat1.uiData.setPosition(-200, 200);
          vec3ToFloat1.params.postCreateSpareParams();
          vec3ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec3ToFloat1, children: vec3ToFloat1_nodes };
        }
        meshStandardBuilder1_nodes["checkers1"] = create_checkers1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant1"] = create_constant1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant2"] = create_constant2(meshStandardBuilder1);
        meshStandardBuilder1_nodes["floatToVec2_1"] = create_floatToVec2_1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["globals1"] = create_globals1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["mix1"] = create_mix1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["output1"] = create_output1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["vec3ToFloat1"] = create_vec3ToFloat1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["checkers1"].node.setInput(
          "uv",
          meshStandardBuilder1_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshStandardBuilder1_nodes["vec3ToFloat1"].node,
          "x"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "y",
          meshStandardBuilder1_nodes["vec3ToFloat1"].node,
          "z"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value0",
          meshStandardBuilder1_nodes["constant1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value1",
          meshStandardBuilder1_nodes["constant2"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "blend",
          meshStandardBuilder1_nodes["checkers1"].node,
          "checker"
        );
        meshStandardBuilder1_nodes["output1"].node.setInput(
          "color",
          meshStandardBuilder1_nodes["mix1"].node,
          "mix"
        );
        meshStandardBuilder1_nodes["vec3ToFloat1"].node.setInput(
          "vec",
          meshStandardBuilder1_nodes["globals1"].node,
          "position"
        );
        if (meshStandardBuilder1.childrenController) {
          meshStandardBuilder1.childrenController.selection.set([]);
        }
        meshStandardBuilder1.uiData.setPosition(0, 200);
        meshStandardBuilder1.params.postCreateSpareParams();
        meshStandardBuilder1.params.runOnSceneLoadHooks();
        return { node: meshStandardBuilder1, children: meshStandardBuilder1_nodes };
      }
      MAT_nodes["meshStandardBuilder1"] = create_meshStandardBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-200, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_box1(ground2) {
      var box1 = ground2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(0, 100);
      box1.p.sizes.set([9.98, 1, 9.98]);
      box1.p.center.set([0, -0.5, 0]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_material1(ground2) {
      var material1 = ground2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 300);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshStandardBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    ground_nodes["MAT"] = create_MAT(ground);
    ground_nodes["box1"] = create_box1(ground);
    ground_nodes["material1"] = create_material1(ground);
    ground_nodes["material1"].node.setInput(0, ground_nodes["box1"].node);
    if (ground.childrenController) {
      ground.childrenController.selection.set([]);
    }
    ground.uiData.setPosition(-50, -550);
    ground.flags.display.set(true);
    ground.p.CSGWireframe.options.setOption("editable", void 0);
    ground.p.TetScale.options.setOption("editable", void 0);
    ground.p.TetDisplayLines.options.setOption("editable", void 0);
    ground.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    ground.p.TetDisplayPoints.options.setOption("editable", void 0);
    ground.p.TetDisplayCenter.options.setOption("editable", void 0);
    ground.p.TetDisplaySphere.options.setOption("editable", void 0);
    ground.params.postCreateSpareParams();
    ground.params.runOnSceneLoadHooks();
    return { node: ground, children: ground_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 250);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_image1(COP2) {
      var image1 = COP2.createNode("image");
      image1.setName("image1");
      const image1_nodes = {};
      image1.uiData.setPosition(-200, 100);
      image1.params.postCreateSpareParams();
      image1.params.runOnSceneLoadHooks();
      return { node: image1, children: image1_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.tminFilter.set(true);
      imageEnv.p.tmagFilter.set(true);
      imageEnv.p.tanisotropy.set(true);
      imageEnv.p.useRendererMaxAnisotropy.set(true);
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["image1"] = create_image1(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([COP_nodes["image1"].node]);
    }
    COP.uiData.setPosition(-300, 50);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(50, -50);
      hemisphereLight1.p.intensity.set(0.52);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_layer1(lights2) {
      var layer1 = lights2.createNode("layer");
      layer1.setName("layer1");
      const layer1_nodes = {};
      layer1.uiData.setPosition(100, 450);
      layer1.flags.display.set(true);
      layer1.p.layer0.set(1);
      layer1.p.layer1.set(1);
      layer1.params.postCreateSpareParams();
      layer1.params.runOnSceneLoadHooks();
      return { node: layer1, children: layer1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(100, 300);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(300, 150);
      polarTransform1.p.center.set([0, 0.7, 0]);
      polarTransform1.p.latitude.set(25.2);
      polarTransform1.p.depth.set(3);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_spotLight1(lights2) {
      var spotLight1 = lights2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(300, -50);
      spotLight1.p.decay.set(0.1);
      spotLight1.p.distance.set(10);
      spotLight1.p.castShadow.set(true);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["layer1"] = create_layer1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["spotLight1"] = create_spotLight1(lights);
    lights_nodes["layer1"].node.setInput(0, lights_nodes["merge1"].node);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["spotLight1"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([lights_nodes["layer1"].node]);
    }
    lights.uiData.setComment(
      "lights are on layer 1, so that they can be scene by the main camera, as well as the 2 portal cameras"
    );
    lights.uiData.setPosition(-50, -100);
    lights.flags.display.set(true);
    lights.p.CSGWireframe.options.setOption("editable", void 0);
    lights.p.TetScale.options.setOption("editable", void 0);
    lights.p.TetDisplayLines.options.setOption("editable", void 0);
    lights.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    lights.p.TetDisplayPoints.options.setOption("editable", void 0);
    lights.p.TetDisplayCenter.options.setOption("editable", void 0);
    lights.p.TetDisplaySphere.options.setOption("editable", void 0);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-0.4422146759872393, 1.3946072619096272, -0.2715351363687555]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(0, 150);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_layer1(cameras2) {
      var layer1 = cameras2.createNode("layer");
      layer1.setName("layer1");
      const layer1_nodes = {};
      layer1.uiData.setPosition(300, 150);
      layer1.p.layersCount.set(2);
      layer1.p.updateMode0.set(0);
      layer1.p.layer0.set(1);
      layer1.p.layer1.set(10);
      layer1.p.layer2.set(10);
      layer1.params.postCreateSpareParams();
      layer1.params.runOnSceneLoadHooks();
      return { node: layer1, children: layer1_nodes };
    }
    function create_layer2(cameras2) {
      var layer2 = cameras2.createNode("layer");
      layer2.setName("layer2");
      const layer2_nodes = {};
      layer2.uiData.setPosition(650, 150);
      layer2.p.layersCount.set(2);
      layer2.p.updateMode0.set(0);
      layer2.p.layer0.set(1);
      layer2.p.layer1.set(11);
      layer2.p.layer2.set(11);
      layer2.params.postCreateSpareParams();
      layer2.params.runOnSceneLoadHooks();
      return { node: layer2, children: layer2_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(450, 350);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera1(cameras2) {
      var perspectiveCamera1 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera1.setName("perspectiveCamera1");
      const perspectiveCamera1_nodes = {};
      perspectiveCamera1.uiData.setPosition(0, -50);
      perspectiveCamera1.p.position.set([4.813232669931391, 2.6687430511585744, 0.7996355235590844]);
      perspectiveCamera1.p.rotation.set([-49.946110033795904, 72.42521768100464, 48.59202598525957]);
      perspectiveCamera1.params.postCreateSpareParams();
      perspectiveCamera1.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
    }
    function create_perspectiveCamera_PORTAL_1(cameras2) {
      var perspectiveCamera_PORTAL_1 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_PORTAL_1.setName("perspectiveCamera_PORTAL_1");
      const perspectiveCamera_PORTAL_1_nodes = {};
      perspectiveCamera_PORTAL_1.uiData.setPosition(300, -50);
      perspectiveCamera_PORTAL_1.params.postCreateSpareParams();
      perspectiveCamera_PORTAL_1.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_PORTAL_1, children: perspectiveCamera_PORTAL_1_nodes };
    }
    function create_perspectiveCamera_PORTAL_2(cameras2) {
      var perspectiveCamera_PORTAL_2 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_PORTAL_2.setName("perspectiveCamera_PORTAL_2");
      const perspectiveCamera_PORTAL_2_nodes = {};
      perspectiveCamera_PORTAL_2.uiData.setPosition(650, -50);
      perspectiveCamera_PORTAL_2.params.postCreateSpareParams();
      perspectiveCamera_PORTAL_2.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_PORTAL_2, children: perspectiveCamera_PORTAL_2_nodes };
    }
    function create_setChildren1(cameras2) {
      var setChildren1 = cameras2.createNode("setChildren");
      setChildren1.setName("setChildren1");
      const setChildren1_nodes = {};
      setChildren1.uiData.setPosition(0, 500);
      setChildren1.flags.display.set(true);
      setChildren1.params.postCreateSpareParams();
      setChildren1.params.runOnSceneLoadHooks();
      return { node: setChildren1, children: setChildren1_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["layer1"] = create_layer1(cameras);
    cameras_nodes["layer2"] = create_layer2(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera1"] = create_perspectiveCamera1(cameras);
    cameras_nodes["perspectiveCamera_PORTAL_1"] = create_perspectiveCamera_PORTAL_1(cameras);
    cameras_nodes["perspectiveCamera_PORTAL_2"] = create_perspectiveCamera_PORTAL_2(cameras);
    cameras_nodes["setChildren1"] = create_setChildren1(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera1"].node);
    cameras_nodes["layer1"].node.setInput(0, cameras_nodes["perspectiveCamera_PORTAL_1"].node);
    cameras_nodes["layer2"].node.setInput(0, cameras_nodes["perspectiveCamera_PORTAL_2"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["layer1"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["layer2"].node);
    cameras_nodes["setChildren1"].node.setInput(0, cameras_nodes["cameraControls1"].node);
    cameras_nodes["setChildren1"].node.setInput(1, cameras_nodes["merge1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setComment(
      "we have 3 cameras setup inside this node:\n- the main one through which we see the scene\n- and 2 other cameras, parented under the main one. They each are set to other layers, so that each views only what is visible in their respective portals"
    );
    cameras.uiData.setPosition(-50, 50);
    cameras.flags.display.set(true);
    cameras.p.CSGWireframe.options.setOption("editable", void 0);
    cameras.p.TetScale.options.setOption("editable", void 0);
    cameras.p.TetDisplayLines.options.setOption("editable", void 0);
    cameras.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    cameras.p.TetDisplayPoints.options.setOption("editable", void 0);
    cameras.p.TetDisplayCenter.options.setOption("editable", void 0);
    cameras.p.TetDisplaySphere.options.setOption("editable", void 0);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  function create_portal_1_content(parentNode) {
    var portal_1_content = parentNode.createNode("geo");
    portal_1_content.setName("portal_1_content");
    const portal_1_content_nodes = {};
    function create_actor1(portal_1_content2) {
      var actor1 = portal_1_content2.createNode("actor");
      actor1.setName("actor1");
      const actor1_nodes = {};
      function create_floatToVec3_1(actor12) {
        var floatToVec3_1 = actor12.createNode("floatToVec3");
        floatToVec3_1.setName("floatToVec3_1");
        const floatToVec3_1_nodes = {};
        floatToVec3_1.uiData.setPosition(200, 100);
        floatToVec3_1.p.y.set(0.36);
        floatToVec3_1.params.postCreateSpareParams();
        floatToVec3_1.params.runOnSceneLoadHooks();
        return { node: floatToVec3_1, children: floatToVec3_1_nodes };
      }
      function create_multAdd1(actor12) {
        var multAdd1 = actor12.createNode("multAdd");
        multAdd1.setName("multAdd1");
        const multAdd1_nodes = {};
        multAdd1.uiData.setPosition(100, 200);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, {
          spare: true,
          editable: false,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, {
          spare: true,
          editable: true,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, {
          spare: true,
          editable: true,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.params.get("mult").set(2);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, {
          spare: true,
          editable: true,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.params.postCreateSpareParams();
        multAdd1.params.runOnSceneLoadHooks();
        return { node: multAdd1, children: multAdd1_nodes };
      }
      function create_onTick1(actor12) {
        var onTick1 = actor12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-300, 0);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_setObjectPosition1(actor12) {
        var setObjectPosition1 = actor12.createNode("setObjectPosition");
        setObjectPosition1.setName("setObjectPosition1");
        const setObjectPosition1_nodes = {};
        setObjectPosition1.uiData.setPosition(400, 0);
        setObjectPosition1.params.postCreateSpareParams();
        setObjectPosition1.params.runOnSceneLoadHooks();
        return { node: setObjectPosition1, children: setObjectPosition1_nodes };
      }
      function create_sin1(actor12) {
        var sin1 = actor12.createNode("sin");
        sin1.setName("sin1");
        const sin1_nodes = {};
        sin1.uiData.setPosition(0, 100);
        sin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "angle", 0, {
          spare: true,
          editable: false,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        sin1.params.postCreateSpareParams();
        sin1.params.runOnSceneLoadHooks();
        return { node: sin1, children: sin1_nodes };
      }
      actor1_nodes["floatToVec3_1"] = create_floatToVec3_1(actor1);
      actor1_nodes["multAdd1"] = create_multAdd1(actor1);
      actor1_nodes["onTick1"] = create_onTick1(actor1);
      actor1_nodes["setObjectPosition1"] = create_setObjectPosition1(actor1);
      actor1_nodes["sin1"] = create_sin1(actor1);
      actor1_nodes["floatToVec3_1"].node.setInput("z", actor1_nodes["sin1"].node, "sin");
      actor1_nodes["multAdd1"].node.setInput("value", actor1_nodes["sin1"].node, "sin");
      actor1_nodes["setObjectPosition1"].node.setInput("trigger", actor1_nodes["onTick1"].node, "trigger");
      actor1_nodes["setObjectPosition1"].node.setInput("position", actor1_nodes["floatToVec3_1"].node, "vec3");
      actor1_nodes["sin1"].node.setInput("angle", actor1_nodes["onTick1"].node, "time");
      if (actor1.childrenController) {
        actor1.childrenController.selection.set([actor1_nodes["floatToVec3_1"].node]);
      }
      actor1.uiData.setPosition(-50, 450);
      actor1.params.postCreateSpareParams();
      actor1.params.runOnSceneLoadHooks();
      return { node: actor1, children: actor1_nodes };
    }
    function create_fileGLTF1(portal_1_content2) {
      var fileGLTF1 = portal_1_content2.createNode("fileGLTF");
      fileGLTF1.setName("fileGLTF1");
      const fileGLTF1_nodes = {};
      fileGLTF1.uiData.setPosition(-50, 50);
      fileGLTF1.params.postCreateSpareParams();
      fileGLTF1.params.runOnSceneLoadHooks();
      return { node: fileGLTF1, children: fileGLTF1_nodes };
    }
    function create_icosahedron1(portal_1_content2) {
      var icosahedron1 = portal_1_content2.createNode("icosahedron");
      icosahedron1.p.radius.set(0.4);
      icosahedron1.p.center.y.set(1);
      const icosahedron1_nodes = {};
      icosahedron1.uiData.setPosition(-100, 50);
      return { node: icosahedron1, children: icosahedron1_nodes };
    }
    function create_layer1(portal_1_content2) {
      var layer1 = portal_1_content2.createNode("layer");
      layer1.setName("layer1");
      const layer1_nodes = {};
      layer1.uiData.setPosition(-50, 600);
      layer1.flags.display.set(true);
      layer1.p.updateMode0.set(0);
      layer1.p.layer0.set(10);
      layer1.p.updateMode1.set(0);
      layer1.p.layer1.set(10);
      layer1.params.postCreateSpareParams();
      layer1.params.runOnSceneLoadHooks();
      return { node: layer1, children: layer1_nodes };
    }
    function create_transform1(portal_1_content2) {
      var transform1 = portal_1_content2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-50, 250);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([0, 0.8708513361205484, 0]);
      transform1.p.scale.set(1.22);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    portal_1_content_nodes["actor1"] = create_actor1(portal_1_content);
    portal_1_content_nodes["fileGLTF1"] = create_fileGLTF1(portal_1_content);
    portal_1_content_nodes["icosahedron1"] = create_icosahedron1(portal_1_content);
    portal_1_content_nodes["layer1"] = create_layer1(portal_1_content);
    portal_1_content_nodes["transform1"] = create_transform1(portal_1_content);
    portal_1_content_nodes["actor1"].node.setInput(0, portal_1_content_nodes["transform1"].node);
    portal_1_content_nodes["layer1"].node.setInput(0, portal_1_content_nodes["actor1"].node);
    portal_1_content_nodes["transform1"].node.setInput(0, portal_1_content_nodes["fileGLTF1"].node);
    portal_1_content_nodes["transform1"].node.setInput(0, portal_1_content_nodes["icosahedron1"].node);
    if (portal_1_content.childrenController) {
      portal_1_content.childrenController.selection.set([]);
    }
    portal_1_content.uiData.setComment(
      "this contains the content of the first portal, and sets it up to be on layer 10"
    );
    portal_1_content.uiData.setPosition(200, -400);
    portal_1_content.flags.display.set(true);
    portal_1_content.p.CSGWireframe.options.setOption("editable", void 0);
    portal_1_content.p.TetScale.options.setOption("editable", void 0);
    portal_1_content.p.TetDisplayLines.options.setOption("editable", void 0);
    portal_1_content.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    portal_1_content.p.TetDisplayPoints.options.setOption("editable", void 0);
    portal_1_content.p.TetDisplayCenter.options.setOption("editable", void 0);
    portal_1_content.p.TetDisplaySphere.options.setOption("editable", void 0);
    portal_1_content.params.postCreateSpareParams();
    portal_1_content.params.runOnSceneLoadHooks();
    return { node: portal_1_content, children: portal_1_content_nodes };
  }
  function create_portal_2_content(parentNode) {
    var portal_2_content = parentNode.createNode("geo");
    portal_2_content.setName("portal_2_content");
    const portal_2_content_nodes = {};
    function create_MAT(portal_2_content2) {
      var MAT = portal_2_content2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        const meshStandard1_nodes = {};
        meshStandard1.uiData.setPosition(0, 0);
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return { node: meshStandard1, children: meshStandard1_nodes };
      }
      MAT_nodes["meshStandard1"] = create_meshStandard1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-200, 450);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_actor1(portal_2_content2) {
      var actor1 = portal_2_content2.createNode("actor");
      actor1.setName("actor1");
      const actor1_nodes = {};
      function create_floatToVec3_1(actor12) {
        var floatToVec3_1 = actor12.createNode("floatToVec3");
        floatToVec3_1.setName("floatToVec3_1");
        const floatToVec3_1_nodes = {};
        floatToVec3_1.uiData.setPosition(200, 100);
        floatToVec3_1.p.y.set(0.36);
        floatToVec3_1.params.postCreateSpareParams();
        floatToVec3_1.params.runOnSceneLoadHooks();
        return { node: floatToVec3_1, children: floatToVec3_1_nodes };
      }
      function create_multAdd1(actor12) {
        var multAdd1 = actor12.createNode("multAdd");
        multAdd1.setName("multAdd1");
        const multAdd1_nodes = {};
        multAdd1.uiData.setPosition(100, 200);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, {
          spare: true,
          editable: false,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, {
          spare: true,
          editable: true,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, {
          spare: true,
          editable: true,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.params.get("mult").set(2);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, {
          spare: true,
          editable: true,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        multAdd1.params.postCreateSpareParams();
        multAdd1.params.runOnSceneLoadHooks();
        return { node: multAdd1, children: multAdd1_nodes };
      }
      function create_onTick1(actor12) {
        var onTick1 = actor12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-300, 0);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_setObjectPosition1(actor12) {
        var setObjectPosition1 = actor12.createNode("setObjectPosition");
        setObjectPosition1.setName("setObjectPosition1");
        const setObjectPosition1_nodes = {};
        setObjectPosition1.uiData.setPosition(400, 0);
        setObjectPosition1.params.postCreateSpareParams();
        setObjectPosition1.params.runOnSceneLoadHooks();
        return { node: setObjectPosition1, children: setObjectPosition1_nodes };
      }
      function create_sin1(actor12) {
        var sin1 = actor12.createNode("sin");
        sin1.setName("sin1");
        const sin1_nodes = {};
        sin1.uiData.setPosition(0, 100);
        sin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "angle", 0, {
          spare: true,
          editable: false,
          computeOnDirty: true,
          dependentOnFoundParam: false
        });
        sin1.params.postCreateSpareParams();
        sin1.params.runOnSceneLoadHooks();
        return { node: sin1, children: sin1_nodes };
      }
      actor1_nodes["floatToVec3_1"] = create_floatToVec3_1(actor1);
      actor1_nodes["multAdd1"] = create_multAdd1(actor1);
      actor1_nodes["onTick1"] = create_onTick1(actor1);
      actor1_nodes["setObjectPosition1"] = create_setObjectPosition1(actor1);
      actor1_nodes["sin1"] = create_sin1(actor1);
      actor1_nodes["floatToVec3_1"].node.setInput("z", actor1_nodes["sin1"].node, "sin");
      actor1_nodes["multAdd1"].node.setInput("value", actor1_nodes["sin1"].node, "sin");
      actor1_nodes["setObjectPosition1"].node.setInput("trigger", actor1_nodes["onTick1"].node, "trigger");
      actor1_nodes["setObjectPosition1"].node.setInput("position", actor1_nodes["floatToVec3_1"].node, "vec3");
      actor1_nodes["sin1"].node.setInput("angle", actor1_nodes["onTick1"].node, "time");
      if (actor1.childrenController) {
        actor1.childrenController.selection.set([actor1_nodes["floatToVec3_1"].node]);
      }
      actor1.uiData.setPosition(0, 200);
      actor1.params.postCreateSpareParams();
      actor1.params.runOnSceneLoadHooks();
      return { node: actor1, children: actor1_nodes };
    }
    function create_fileGLTF1(portal_2_content2) {
      var fileGLTF1 = portal_2_content2.createNode("fileGLTF");
      fileGLTF1.setName("fileGLTF1");
      const fileGLTF1_nodes = {};
      fileGLTF1.uiData.setPosition(0, -200);
      fileGLTF1.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/resources/threedscans.com/rhino.glb"
      );
      fileGLTF1.params.postCreateSpareParams();
      fileGLTF1.params.runOnSceneLoadHooks();
      return { node: fileGLTF1, children: fileGLTF1_nodes };
    }
    function create_torusKnot1(portal_1_content) {
      var torusKnot1 = portal_1_content.createNode("torusKnot");
      torusKnot1.p.radius.set(0.3);
      torusKnot1.p.radiusTube.set(0.1);
      torusKnot1.p.center.y.set(1);
      const torusKnot1_nodes = {};
      torusKnot1.uiData.setPosition(-200, -200);
      return { node: torusKnot1, children: torusKnot1_nodes };
    }
    function create_layer1(portal_2_content2) {
      var layer1 = portal_2_content2.createNode("layer");
      layer1.setName("layer1");
      const layer1_nodes = {};
      layer1.uiData.setPosition(0, 350);
      layer1.p.updateMode0.set(0);
      layer1.p.layer0.set(11);
      layer1.p.updateMode1.set(0);
      layer1.p.layer1.set(11);
      layer1.params.postCreateSpareParams();
      layer1.params.runOnSceneLoadHooks();
      return { node: layer1, children: layer1_nodes };
    }
    function create_material1(portal_2_content2) {
      var material1 = portal_2_content2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 450);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshStandard1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_transform1(portal_2_content2) {
      var transform1 = portal_2_content2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(0, 0);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([0, 0.8708513361205484, 0]);
      transform1.p.scale.set(1.22);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    portal_2_content_nodes["MAT"] = create_MAT(portal_2_content);
    portal_2_content_nodes["actor1"] = create_actor1(portal_2_content);
    portal_2_content_nodes["fileGLTF1"] = create_fileGLTF1(portal_2_content);
    portal_2_content_nodes["torusKnot1"] = create_torusKnot1(portal_2_content);
    portal_2_content_nodes["layer1"] = create_layer1(portal_2_content);
    portal_2_content_nodes["material1"] = create_material1(portal_2_content);
    portal_2_content_nodes["transform1"] = create_transform1(portal_2_content);
    portal_2_content_nodes["actor1"].node.setInput(0, portal_2_content_nodes["transform1"].node);
    portal_2_content_nodes["layer1"].node.setInput(0, portal_2_content_nodes["actor1"].node);
    portal_2_content_nodes["material1"].node.setInput(0, portal_2_content_nodes["layer1"].node);
    portal_2_content_nodes["transform1"].node.setInput(0, portal_2_content_nodes["fileGLTF1"].node);
    portal_2_content_nodes["transform1"].node.setInput(0, portal_2_content_nodes["torusKnot1"].node);
    if (portal_2_content.childrenController) {
      portal_2_content.childrenController.selection.set([]);
    }
    portal_2_content.uiData.setComment(
      "this contains the content of the second portal, and sets it up to be on layer 11"
    );
    portal_2_content.uiData.setPosition(500, -400);
    portal_2_content.flags.display.set(true);
    portal_2_content.p.CSGWireframe.options.setOption("editable", void 0);
    portal_2_content.p.TetScale.options.setOption("editable", void 0);
    portal_2_content.p.TetDisplayLines.options.setOption("editable", void 0);
    portal_2_content.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    portal_2_content.p.TetDisplayPoints.options.setOption("editable", void 0);
    portal_2_content.p.TetDisplayCenter.options.setOption("editable", void 0);
    portal_2_content.p.TetDisplaySphere.options.setOption("editable", void 0);
    portal_2_content.params.postCreateSpareParams();
    portal_2_content.params.runOnSceneLoadHooks();
    return { node: portal_2_content, children: portal_2_content_nodes };
  }
  function create_portals(parentNode) {
    var portals = parentNode.createNode("geo");
    portals.setName("portals");
    const portals_nodes = {};
    function create_COP2(portals2) {
      var COP = portals2.createNode("copNetwork");
      COP.setName("COP");
      const COP_nodes = {};
      function create_render1(COP2) {
        var render1 = COP2.createNode("render");
        render1.setName("render1");
        const render1_nodes = {};
        render1.uiData.setPosition(-100, 0);
        render1.p.cameraPath.set("*/perspectiveCamera_PORTAL_1");
        render1.params.postCreateSpareParams();
        render1.params.runOnSceneLoadHooks();
        return { node: render1, children: render1_nodes };
      }
      function create_render2(COP2) {
        var render2 = COP2.createNode("render");
        render2.setName("render2");
        const render2_nodes = {};
        render2.uiData.setPosition(-100, 150);
        render2.p.cameraPath.set("*/perspectiveCamera_PORTAL_2");
        render2.params.postCreateSpareParams();
        render2.params.runOnSceneLoadHooks();
        return { node: render2, children: render2_nodes };
      }
      COP_nodes["render1"] = create_render1(COP);
      COP_nodes["render2"] = create_render2(COP);
      if (COP.childrenController) {
        COP.childrenController.selection.set([]);
      }
      COP.uiData.setComment(
        "Inside there, we have 2 cop/render nodes, which are used to render the scene on a texture"
      );
      COP.uiData.setPosition(-500, 650);
      COP.params.postCreateSpareParams();
      COP.params.runOnSceneLoadHooks();
      return { node: COP, children: COP_nodes };
    }
    function create_MAT(portals2) {
      var MAT = portals2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshBasicBuilder_PORTAL_1(MAT2) {
        var meshBasicBuilder_PORTAL_1 = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder_PORTAL_1.setName("meshBasicBuilder_PORTAL_1");
        const meshBasicBuilder_PORTAL_1_nodes = {};
        function create_divide1(meshBasicBuilder_PORTAL_12) {
          var divide1 = meshBasicBuilder_PORTAL_12.createNode("divide");
          divide1.setName("divide1");
          const divide1_nodes = {};
          divide1.uiData.setPosition(-300, 400);
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div0", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div1", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div2", 1, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.params.postCreateSpareParams();
          divide1.params.runOnSceneLoadHooks();
          return { node: divide1, children: divide1_nodes };
        }
        function create_divide2(meshBasicBuilder_PORTAL_12) {
          var divide2 = meshBasicBuilder_PORTAL_12.createNode("divide");
          divide2.setName("divide2");
          const divide2_nodes = {};
          divide2.uiData.setPosition(-300, 500);
          divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div0", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div1", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div2", 1, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide2.params.postCreateSpareParams();
          divide2.params.runOnSceneLoadHooks();
          return { node: divide2, children: divide2_nodes };
        }
        function create_floatToVec2_1(meshBasicBuilder_PORTAL_12) {
          var floatToVec2_1 = meshBasicBuilder_PORTAL_12.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-50, 450);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(meshBasicBuilder_PORTAL_12) {
          var globals1 = meshBasicBuilder_PORTAL_12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-750, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_multAdd2(meshBasicBuilder_PORTAL_12) {
          var multAdd2 = meshBasicBuilder_PORTAL_12.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(100, 450);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "value", [0, 0], {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "preAdd", [0, 0], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "mult", [1, 1], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "postAdd", [0, 0], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_output1(meshBasicBuilder_PORTAL_12) {
          var output1 = meshBasicBuilder_PORTAL_12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(550, 250);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_texture1(meshBasicBuilder_PORTAL_12) {
          var texture1 = meshBasicBuilder_PORTAL_12.createNode("texture");
          texture1.setName("texture1");
          const texture1_nodes = {};
          texture1.uiData.setPosition(250, 300);
          texture1.params.postCreateSpareParams();
          texture1.params.runOnSceneLoadHooks();
          return { node: texture1, children: texture1_nodes };
        }
        function create_vec2ToFloat1(meshBasicBuilder_PORTAL_12) {
          var vec2ToFloat1 = meshBasicBuilder_PORTAL_12.createNode("vec2ToFloat");
          vec2ToFloat1.setName("vec2ToFloat1");
          const vec2ToFloat1_nodes = {};
          vec2ToFloat1.uiData.setPosition(-500, 550);
          vec2ToFloat1.params.postCreateSpareParams();
          vec2ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec2ToFloat1, children: vec2ToFloat1_nodes };
        }
        function create_vec4ToFloat1(meshBasicBuilder_PORTAL_12) {
          var vec4ToFloat1 = meshBasicBuilder_PORTAL_12.createNode("vec4ToFloat");
          vec4ToFloat1.setName("vec4ToFloat1");
          const vec4ToFloat1_nodes = {};
          vec4ToFloat1.uiData.setPosition(-500, 400);
          vec4ToFloat1.params.postCreateSpareParams();
          vec4ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec4ToFloat1, children: vec4ToFloat1_nodes };
        }
        function create_vec4ToVec3_1(meshBasicBuilder_PORTAL_12) {
          var vec4ToVec3_1 = meshBasicBuilder_PORTAL_12.createNode("vec4ToVec3");
          vec4ToVec3_1.setName("vec4ToVec3_1");
          const vec4ToVec3_1_nodes = {};
          vec4ToVec3_1.uiData.setPosition(350, 300);
          vec4ToVec3_1.params.postCreateSpareParams();
          vec4ToVec3_1.params.runOnSceneLoadHooks();
          return { node: vec4ToVec3_1, children: vec4ToVec3_1_nodes };
        }
        meshBasicBuilder_PORTAL_1_nodes["divide1"] = create_divide1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["divide2"] = create_divide2(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["floatToVec2_1"] = create_floatToVec2_1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["globals1"] = create_globals1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["multAdd2"] = create_multAdd2(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["output1"] = create_output1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["texture1"] = create_texture1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["vec2ToFloat1"] = create_vec2ToFloat1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["vec4ToFloat1"] = create_vec4ToFloat1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["vec4ToVec3_1"] = create_vec4ToVec3_1(meshBasicBuilder_PORTAL_1);
        meshBasicBuilder_PORTAL_1_nodes["divide1"].node.setInput(
          "div0",
          meshBasicBuilder_PORTAL_1_nodes["vec4ToFloat1"].node,
          "x"
        );
        meshBasicBuilder_PORTAL_1_nodes["divide1"].node.setInput(
          "div1",
          meshBasicBuilder_PORTAL_1_nodes["vec2ToFloat1"].node,
          "x"
        );
        meshBasicBuilder_PORTAL_1_nodes["divide2"].node.setInput(
          "div0",
          meshBasicBuilder_PORTAL_1_nodes["vec4ToFloat1"].node,
          "y"
        );
        meshBasicBuilder_PORTAL_1_nodes["divide2"].node.setInput(
          "div1",
          meshBasicBuilder_PORTAL_1_nodes["vec2ToFloat1"].node,
          "y"
        );
        meshBasicBuilder_PORTAL_1_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshBasicBuilder_PORTAL_1_nodes["divide1"].node,
          "divide"
        );
        meshBasicBuilder_PORTAL_1_nodes["floatToVec2_1"].node.setInput(
          "y",
          meshBasicBuilder_PORTAL_1_nodes["divide2"].node,
          "divide"
        );
        meshBasicBuilder_PORTAL_1_nodes["multAdd2"].node.setInput(
          "value",
          meshBasicBuilder_PORTAL_1_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshBasicBuilder_PORTAL_1_nodes["output1"].node.setInput(
          "color",
          meshBasicBuilder_PORTAL_1_nodes["vec4ToVec3_1"].node,
          "vec3"
        );
        meshBasicBuilder_PORTAL_1_nodes["output1"].node.setInput(
          "alpha",
          meshBasicBuilder_PORTAL_1_nodes["vec4ToVec3_1"].node,
          "w"
        );
        meshBasicBuilder_PORTAL_1_nodes["texture1"].node.setInput(
          "uv",
          meshBasicBuilder_PORTAL_1_nodes["multAdd2"].node,
          "val"
        );
        meshBasicBuilder_PORTAL_1_nodes["vec2ToFloat1"].node.setInput(
          "vec",
          meshBasicBuilder_PORTAL_1_nodes["globals1"].node,
          "resolution"
        );
        meshBasicBuilder_PORTAL_1_nodes["vec4ToFloat1"].node.setInput(
          "vec",
          meshBasicBuilder_PORTAL_1_nodes["globals1"].node,
          "gl_FragCoord"
        );
        meshBasicBuilder_PORTAL_1_nodes["vec4ToVec3_1"].node.setInput(
          "vec4",
          meshBasicBuilder_PORTAL_1_nodes["texture1"].node,
          "rgba"
        );
        if (meshBasicBuilder_PORTAL_1.childrenController) {
          meshBasicBuilder_PORTAL_1.childrenController.selection.set([]);
        }
        meshBasicBuilder_PORTAL_1.uiData.setPosition(0, 0);
        meshBasicBuilder_PORTAL_1.p.transparent.set(true);
        meshBasicBuilder_PORTAL_1.p.alphaTest.set(0.01);
        meshBasicBuilder_PORTAL_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "texture1", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__/* .NodeContext.COP */ .sy.COP }
        });
        meshBasicBuilder_PORTAL_1.params.get("texture1").set("../../COP/render1");
        meshBasicBuilder_PORTAL_1.params.get("texture1").options.setOption("editable", void 0);
        meshBasicBuilder_PORTAL_1.params.postCreateSpareParams();
        meshBasicBuilder_PORTAL_1.params.runOnSceneLoadHooks();
        return { node: meshBasicBuilder_PORTAL_1, children: meshBasicBuilder_PORTAL_1_nodes };
      }
      function create_meshBasicBuilder_PORTAL_2(MAT2) {
        var meshBasicBuilder_PORTAL_2 = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder_PORTAL_2.setName("meshBasicBuilder_PORTAL_2");
        const meshBasicBuilder_PORTAL_2_nodes = {};
        function create_divide1(meshBasicBuilder_PORTAL_22) {
          var divide1 = meshBasicBuilder_PORTAL_22.createNode("divide");
          divide1.setName("divide1");
          const divide1_nodes = {};
          divide1.uiData.setPosition(-300, 400);
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div0", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div1", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div2", 1, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.params.postCreateSpareParams();
          divide1.params.runOnSceneLoadHooks();
          return { node: divide1, children: divide1_nodes };
        }
        function create_divide2(meshBasicBuilder_PORTAL_22) {
          var divide2 = meshBasicBuilder_PORTAL_22.createNode("divide");
          divide2.setName("divide2");
          const divide2_nodes = {};
          divide2.uiData.setPosition(-300, 500);
          divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div0", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div1", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div2", 1, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide2.params.postCreateSpareParams();
          divide2.params.runOnSceneLoadHooks();
          return { node: divide2, children: divide2_nodes };
        }
        function create_floatToVec2_1(meshBasicBuilder_PORTAL_22) {
          var floatToVec2_1 = meshBasicBuilder_PORTAL_22.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-50, 450);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(meshBasicBuilder_PORTAL_22) {
          var globals1 = meshBasicBuilder_PORTAL_22.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-750, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_multAdd2(meshBasicBuilder_PORTAL_22) {
          var multAdd2 = meshBasicBuilder_PORTAL_22.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(100, 450);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "value", [0, 0], {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "preAdd", [0, 0], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "mult", [1, 1], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "postAdd", [0, 0], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_output1(meshBasicBuilder_PORTAL_22) {
          var output1 = meshBasicBuilder_PORTAL_22.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(550, 250);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_texture1(meshBasicBuilder_PORTAL_22) {
          var texture1 = meshBasicBuilder_PORTAL_22.createNode("texture");
          texture1.setName("texture1");
          const texture1_nodes = {};
          texture1.uiData.setPosition(250, 300);
          texture1.params.postCreateSpareParams();
          texture1.params.runOnSceneLoadHooks();
          return { node: texture1, children: texture1_nodes };
        }
        function create_vec2ToFloat1(meshBasicBuilder_PORTAL_22) {
          var vec2ToFloat1 = meshBasicBuilder_PORTAL_22.createNode("vec2ToFloat");
          vec2ToFloat1.setName("vec2ToFloat1");
          const vec2ToFloat1_nodes = {};
          vec2ToFloat1.uiData.setPosition(-500, 550);
          vec2ToFloat1.params.postCreateSpareParams();
          vec2ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec2ToFloat1, children: vec2ToFloat1_nodes };
        }
        function create_vec4ToFloat1(meshBasicBuilder_PORTAL_22) {
          var vec4ToFloat1 = meshBasicBuilder_PORTAL_22.createNode("vec4ToFloat");
          vec4ToFloat1.setName("vec4ToFloat1");
          const vec4ToFloat1_nodes = {};
          vec4ToFloat1.uiData.setPosition(-500, 400);
          vec4ToFloat1.params.postCreateSpareParams();
          vec4ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec4ToFloat1, children: vec4ToFloat1_nodes };
        }
        function create_vec4ToVec3_1(meshBasicBuilder_PORTAL_22) {
          var vec4ToVec3_1 = meshBasicBuilder_PORTAL_22.createNode("vec4ToVec3");
          vec4ToVec3_1.setName("vec4ToVec3_1");
          const vec4ToVec3_1_nodes = {};
          vec4ToVec3_1.uiData.setPosition(350, 300);
          vec4ToVec3_1.params.postCreateSpareParams();
          vec4ToVec3_1.params.runOnSceneLoadHooks();
          return { node: vec4ToVec3_1, children: vec4ToVec3_1_nodes };
        }
        meshBasicBuilder_PORTAL_2_nodes["divide1"] = create_divide1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["divide2"] = create_divide2(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["floatToVec2_1"] = create_floatToVec2_1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["globals1"] = create_globals1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["multAdd2"] = create_multAdd2(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["output1"] = create_output1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["texture1"] = create_texture1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["vec2ToFloat1"] = create_vec2ToFloat1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["vec4ToFloat1"] = create_vec4ToFloat1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["vec4ToVec3_1"] = create_vec4ToVec3_1(meshBasicBuilder_PORTAL_2);
        meshBasicBuilder_PORTAL_2_nodes["divide1"].node.setInput(
          "div0",
          meshBasicBuilder_PORTAL_2_nodes["vec4ToFloat1"].node,
          "x"
        );
        meshBasicBuilder_PORTAL_2_nodes["divide1"].node.setInput(
          "div1",
          meshBasicBuilder_PORTAL_2_nodes["vec2ToFloat1"].node,
          "x"
        );
        meshBasicBuilder_PORTAL_2_nodes["divide2"].node.setInput(
          "div0",
          meshBasicBuilder_PORTAL_2_nodes["vec4ToFloat1"].node,
          "y"
        );
        meshBasicBuilder_PORTAL_2_nodes["divide2"].node.setInput(
          "div1",
          meshBasicBuilder_PORTAL_2_nodes["vec2ToFloat1"].node,
          "y"
        );
        meshBasicBuilder_PORTAL_2_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshBasicBuilder_PORTAL_2_nodes["divide1"].node,
          "divide"
        );
        meshBasicBuilder_PORTAL_2_nodes["floatToVec2_1"].node.setInput(
          "y",
          meshBasicBuilder_PORTAL_2_nodes["divide2"].node,
          "divide"
        );
        meshBasicBuilder_PORTAL_2_nodes["multAdd2"].node.setInput(
          "value",
          meshBasicBuilder_PORTAL_2_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshBasicBuilder_PORTAL_2_nodes["output1"].node.setInput(
          "color",
          meshBasicBuilder_PORTAL_2_nodes["vec4ToVec3_1"].node,
          "vec3"
        );
        meshBasicBuilder_PORTAL_2_nodes["output1"].node.setInput(
          "alpha",
          meshBasicBuilder_PORTAL_2_nodes["vec4ToVec3_1"].node,
          "w"
        );
        meshBasicBuilder_PORTAL_2_nodes["texture1"].node.setInput(
          "uv",
          meshBasicBuilder_PORTAL_2_nodes["multAdd2"].node,
          "val"
        );
        meshBasicBuilder_PORTAL_2_nodes["vec2ToFloat1"].node.setInput(
          "vec",
          meshBasicBuilder_PORTAL_2_nodes["globals1"].node,
          "resolution"
        );
        meshBasicBuilder_PORTAL_2_nodes["vec4ToFloat1"].node.setInput(
          "vec",
          meshBasicBuilder_PORTAL_2_nodes["globals1"].node,
          "gl_FragCoord"
        );
        meshBasicBuilder_PORTAL_2_nodes["vec4ToVec3_1"].node.setInput(
          "vec4",
          meshBasicBuilder_PORTAL_2_nodes["texture1"].node,
          "rgba"
        );
        if (meshBasicBuilder_PORTAL_2.childrenController) {
          meshBasicBuilder_PORTAL_2.childrenController.selection.set([]);
        }
        meshBasicBuilder_PORTAL_2.uiData.setPosition(0, 150);
        meshBasicBuilder_PORTAL_2.p.transparent.set(true);
        meshBasicBuilder_PORTAL_2.p.alphaTest.set(0.01);
        meshBasicBuilder_PORTAL_2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "texture1", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__/* .NodeContext.COP */ .sy.COP }
        });
        meshBasicBuilder_PORTAL_2.params.get("texture1").set("../../COP/render2");
        meshBasicBuilder_PORTAL_2.params.get("texture1").options.setOption("editable", void 0);
        meshBasicBuilder_PORTAL_2.params.postCreateSpareParams();
        meshBasicBuilder_PORTAL_2.params.runOnSceneLoadHooks();
        return { node: meshBasicBuilder_PORTAL_2, children: meshBasicBuilder_PORTAL_2_nodes };
      }
      MAT_nodes["meshBasicBuilder_PORTAL_1"] = create_meshBasicBuilder_PORTAL_1(MAT);
      MAT_nodes["meshBasicBuilder_PORTAL_2"] = create_meshBasicBuilder_PORTAL_2(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setComment(
        "the materials used on the portal boxes are reading a texture, but  are not using the geometry UVs to display those. Instead, we project them using the screen coordinates."
      );
      MAT.uiData.setPosition(-500, 400);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_box1(portals2) {
      var box1 = portals2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(200, -100);
      box1.p.center.set([0, 0.5, 0.5]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_box2(portals2) {
      var box2 = portals2.createNode("box");
      box2.setName("box2");
      const box2_nodes = {};
      box2.uiData.setPosition(650, -100);
      box2.p.center.set([0, 0.5, -0.5]);
      box2.params.postCreateSpareParams();
      box2.params.runOnSceneLoadHooks();
      return { node: box2, children: box2_nodes };
    }
    function create_circle1(portals2) {
      var circle1 = portals2.createNode("circle");
      circle1.setName("circle1");
      const circle1_nodes = {};
      circle1.uiData.setPosition(-200, -100);
      circle1.p.segments.set(4);
      circle1.p.direction.set([0, 0, 1]);
      circle1.params.postCreateSpareParams();
      circle1.params.runOnSceneLoadHooks();
      return { node: circle1, children: circle1_nodes };
    }
    function create_clip1(portals2) {
      var clip1 = portals2.createNode("clip");
      clip1.setName("clip1");
      const clip1_nodes = {};
      clip1.uiData.setPosition(200, 250);
      clip1.p.direction.set([0, 0, 1]);
      clip1.p.keepBelowPlane.set(false);
      clip1.p.keepAbovePlane.set(true);
      clip1.params.postCreateSpareParams();
      clip1.params.runOnSceneLoadHooks();
      return { node: clip1, children: clip1_nodes };
    }
    function create_clip2(portals2) {
      var clip2 = portals2.createNode("clip");
      clip2.setName("clip2");
      const clip2_nodes = {};
      clip2.uiData.setPosition(650, 250);
      clip2.p.direction.set([0, 0, -1]);
      clip2.p.keepBelowPlane.set(false);
      clip2.p.keepAbovePlane.set(true);
      clip2.params.postCreateSpareParams();
      clip2.params.runOnSceneLoadHooks();
      return { node: clip2, children: clip2_nodes };
    }
    function create_material1(portals2) {
      var material1 = portals2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(200, 350);
      material1.p.material.set("../MAT/meshBasicBuilder_PORTAL_1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_material2(portals2) {
      var material2 = portals2.createNode("material");
      material2.setName("material2");
      const material2_nodes = {};
      material2.uiData.setPosition(650, 350);
      material2.p.material.set("../MAT/meshBasicBuilder_PORTAL_2");
      material2.params.postCreateSpareParams();
      material2.params.runOnSceneLoadHooks();
      return { node: material2, children: material2_nodes };
    }
    function create_merge1(portals2) {
      var merge1 = portals2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(0, 850);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_merge2(portals2) {
      var merge2 = portals2.createNode("merge");
      merge2.setName("merge2");
      const merge2_nodes = {};
      merge2.uiData.setPosition(450, 700);
      merge2.params.postCreateSpareParams();
      merge2.params.runOnSceneLoadHooks();
      return { node: merge2, children: merge2_nodes };
    }
    function create_objectProperties1(portals2) {
      var objectProperties1 = portals2.createNode("objectProperties");
      objectProperties1.setName("objectProperties1");
      const objectProperties1_nodes = {};
      objectProperties1.uiData.setComment(
        "this box will have the render from the portal 1 camera projected on it"
      );
      objectProperties1.uiData.setPosition(200, 450);
      objectProperties1.p.tcastShadow.set(true);
      objectProperties1.p.castShadow.set(false);
      objectProperties1.params.postCreateSpareParams();
      objectProperties1.params.runOnSceneLoadHooks();
      return { node: objectProperties1, children: objectProperties1_nodes };
    }
    function create_objectProperties2(portals2) {
      var objectProperties2 = portals2.createNode("objectProperties");
      objectProperties2.setName("objectProperties2");
      const objectProperties2_nodes = {};
      objectProperties2.uiData.setComment(
        "this box will have the render from the portal 2 camera projected on it"
      );
      objectProperties2.uiData.setPosition(650, 450);
      objectProperties2.p.tcastShadow.set(true);
      objectProperties2.p.castShadow.set(false);
      objectProperties2.params.postCreateSpareParams();
      objectProperties2.params.runOnSceneLoadHooks();
      return { node: objectProperties2, children: objectProperties2_nodes };
    }
    function create_transform1(portals2) {
      var transform1 = portals2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-200, 50);
      transform1.p.r.set([0, 0, 45]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_transform2(portals2) {
      var transform2 = portals2.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setPosition(-200, 300);
      transform2.p.t.set([0, "-bbox(0, 'min').y", 0]);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    function create_transform3(portals2) {
      var transform3 = portals2.createNode("transform");
      transform3.setName("transform3");
      const transform3_nodes = {};
      transform3.uiData.setComment(
        "This is the square shaped line that acts as a portal, but only visually. The real work is handled by the 2 boxes"
      );
      transform3.uiData.setPosition(-200, 450);
      transform3.p.s.set(['ch("../transform4/sx")', 'ch("../transform4/sy")', 'ch("../transform4/sz")']);
      transform3.params.postCreateSpareParams();
      transform3.params.runOnSceneLoadHooks();
      return { node: transform3, children: transform3_nodes };
    }
    function create_transform4(portals2) {
      var transform4 = portals2.createNode("transform");
      transform4.setName("transform4");
      const transform4_nodes = {};
      transform4.uiData.setPosition(200, 50);
      transform4.p.t.set([0, 0, -0.02]);
      transform4.p.s.set([1.586362637113738, 2.380429327620241, 5.008960173271132]);
      transform4.params.postCreateSpareParams();
      transform4.params.runOnSceneLoadHooks();
      return { node: transform4, children: transform4_nodes };
    }
    function create_transform5(portals2) {
      var transform5 = portals2.createNode("transform");
      transform5.setName("transform5");
      const transform5_nodes = {};
      transform5.uiData.setPosition(-200, 150);
      transform5.p.scale.set('1/bbox(0,"size").x');
      transform5.params.postCreateSpareParams();
      transform5.params.runOnSceneLoadHooks();
      return { node: transform5, children: transform5_nodes };
    }
    function create_transform6(portals2) {
      var transform6 = portals2.createNode("transform");
      transform6.setName("transform6");
      const transform6_nodes = {};
      transform6.uiData.setPosition(0, 1050);
      transform6.flags.display.set(true);
      transform6.p.t.set([0, 0.0980530305258962, 0]);
      transform6.params.postCreateSpareParams();
      transform6.params.runOnSceneLoadHooks();
      return { node: transform6, children: transform6_nodes };
    }
    function create_transform7(portals2) {
      var transform7 = portals2.createNode("transform");
      transform7.setName("transform7");
      const transform7_nodes = {};
      transform7.uiData.setPosition(650, 50);
      transform7.p.t.set([0, 0, 0.02]);
      transform7.p.s.set([1.586362637113738, 2.380429327620241, 4.095891187107659]);
      transform7.params.postCreateSpareParams();
      transform7.params.runOnSceneLoadHooks();
      return { node: transform7, children: transform7_nodes };
    }
    portals_nodes["COP"] = create_COP2(portals);
    portals_nodes["MAT"] = create_MAT(portals);
    portals_nodes["box1"] = create_box1(portals);
    portals_nodes["box2"] = create_box2(portals);
    portals_nodes["circle1"] = create_circle1(portals);
    portals_nodes["clip1"] = create_clip1(portals);
    portals_nodes["clip2"] = create_clip2(portals);
    portals_nodes["material1"] = create_material1(portals);
    portals_nodes["material2"] = create_material2(portals);
    portals_nodes["merge1"] = create_merge1(portals);
    portals_nodes["merge2"] = create_merge2(portals);
    portals_nodes["objectProperties1"] = create_objectProperties1(portals);
    portals_nodes["objectProperties2"] = create_objectProperties2(portals);
    portals_nodes["transform1"] = create_transform1(portals);
    portals_nodes["transform2"] = create_transform2(portals);
    portals_nodes["transform3"] = create_transform3(portals);
    portals_nodes["transform4"] = create_transform4(portals);
    portals_nodes["transform5"] = create_transform5(portals);
    portals_nodes["transform6"] = create_transform6(portals);
    portals_nodes["transform7"] = create_transform7(portals);
    portals_nodes["clip1"].node.setInput(0, portals_nodes["transform4"].node);
    portals_nodes["clip2"].node.setInput(0, portals_nodes["transform7"].node);
    portals_nodes["material1"].node.setInput(0, portals_nodes["clip1"].node);
    portals_nodes["material2"].node.setInput(0, portals_nodes["clip2"].node);
    portals_nodes["merge1"].node.setInput(0, portals_nodes["transform3"].node);
    portals_nodes["merge1"].node.setInput(1, portals_nodes["merge2"].node);
    portals_nodes["merge2"].node.setInput(0, portals_nodes["objectProperties1"].node);
    portals_nodes["merge2"].node.setInput(1, portals_nodes["objectProperties2"].node);
    portals_nodes["objectProperties1"].node.setInput(0, portals_nodes["material1"].node);
    portals_nodes["objectProperties2"].node.setInput(0, portals_nodes["material2"].node);
    portals_nodes["transform1"].node.setInput(0, portals_nodes["circle1"].node);
    portals_nodes["transform2"].node.setInput(0, portals_nodes["transform5"].node);
    portals_nodes["transform3"].node.setInput(0, portals_nodes["transform2"].node);
    portals_nodes["transform4"].node.setInput(0, portals_nodes["box1"].node);
    portals_nodes["transform5"].node.setInput(0, portals_nodes["transform1"].node);
    portals_nodes["transform6"].node.setInput(0, portals_nodes["merge1"].node);
    portals_nodes["transform7"].node.setInput(0, portals_nodes["box2"].node);
    if (portals.childrenController) {
      portals.childrenController.selection.set([
        portals_nodes["box2"].node,
        portals_nodes["transform7"].node,
        portals_nodes["material2"].node,
        portals_nodes["objectProperties2"].node,
        portals_nodes["clip2"].node
      ]);
    }
    portals.uiData.setComment(
      "the portals are created like this:\n- we create 2 simple boxes\n- on every frame, we render the scene as viewed by the 2 portal cameras\n- we project the renders on the boxes, giving the illusion that they are portals"
    );
    portals.uiData.setPosition(-50, -400);
    portals.flags.display.set(true);
    portals.p.CSGWireframe.options.setOption("editable", void 0);
    portals.p.TetScale.options.setOption("editable", void 0);
    portals.p.TetDisplayLines.options.setOption("editable", void 0);
    portals.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    portals.p.TetDisplayPoints.options.setOption("editable", void 0);
    portals.p.TetDisplayCenter.options.setOption("editable", void 0);
    portals.p.TetDisplaySphere.options.setOption("editable", void 0);
    portals.params.postCreateSpareParams();
    portals.params.runOnSceneLoadHooks();
    return { node: portals, children: portals_nodes };
  }
  scene_root_nodes["ground"] = create_ground(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene_root_nodes["portal_1_content"] = create_portal_1_content(root);
  scene_root_nodes["portal_2_content"] = create_portal_2_content(root);
  scene_root_nodes["portals"] = create_portals(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera1",
    focusedNodes: scene_root_nodes["portals"].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_advanced_Portal_ts.e247a754d4a980b5cabc.js.map