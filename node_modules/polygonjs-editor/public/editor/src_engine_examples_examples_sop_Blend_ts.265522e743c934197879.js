(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Blend_ts"],{

/***/ 68002:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ addPerspectiveCameraOBJWithOrbitControls; }
/* harmony export */ });

function addPerspectiveCameraOBJWithOrbitControls(root) {
  const perspectiveCamera1 = root.createNode("perspectiveCamera");
  perspectiveCamera1.p.t.set([5, 5, 5]);
  const events1 = perspectiveCamera1.createNode("eventsNetwork");
  const orbitsControls = events1.createNode("cameraOrbitControls");
  perspectiveCamera1.p.controls.setNode(orbitsControls);
  return { perspectiveCamera1 };
}


/***/ }),

/***/ 77581:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _ExampleUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68002);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const geo = root.createNode("geo");
  const box = geo.createNode("box");
  const sphere = geo.createNode("sphere");
  box.p.size.set(1);
  box.p.divisions.set([10, 10, 10]);
  const normals = geo.createNode("normals");
  normals.setInput(0, box);
  normals.p.edit.set(true);
  normals.p.updateX.set(true);
  normals.p.updateY.set(true);
  normals.p.updateZ.set(true);
  normals.p.x.set("@P.x");
  normals.p.y.set("@P.y");
  normals.p.z.set("@P.z");
  const ray = geo.createNode("ray");
  ray.setInput(0, normals);
  ray.setInput(1, sphere);
  const blend = geo.createNode("blend");
  blend.setInput(0, box);
  blend.setInput(1, ray);
  blend.flags.display.set(true);
  blend.uiData.setComment(
    `This node blends the box into a sphere.

		Try and change the blend parameter to see how this affects its output`
  );
  root.createNode("hemisphereLight");
  const { perspectiveCamera1 } = (0,_ExampleUtils__WEBPACK_IMPORTED_MODULE_0__/* .addPerspectiveCameraOBJWithOrbitControls */ .n)(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [blend],
    autoLayout: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Blend_ts.265522e743c934197879.js.map