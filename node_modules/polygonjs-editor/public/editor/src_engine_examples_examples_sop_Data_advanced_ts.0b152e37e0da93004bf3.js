(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Data_advanced_ts"],{

/***/ 59952:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_box1(geo12) {
      var box1 = geo12.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(-450, -400);
      box1.p.size.set(0.42);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_circle1(geo12) {
      var circle1 = geo12.createNode("circle");
      circle1.setName("circle1");
      const circle1_nodes = {};
      circle1.uiData.setComment(
        "Using expressions, the radius, segments and arcAngle parameters are referencing the attributes of the points created by the data1 node above.\nTry changing the values of the data1 node and see how that changes the output of the copy node"
      );
      circle1.uiData.setPosition(-200, -400);
      circle1.p.radius.set("point('../data1', 'radius', 0)");
      circle1.p.segments.set("point('../data1', 'segments', 0)");
      circle1.p.arcAngle.set("point('../data1', 'angle', 0)");
      circle1.params.postCreateSpareParams();
      circle1.params.runOnSceneLoadHooks();
      return { node: circle1, children: circle1_nodes };
    }
    function create_copy1(geo12) {
      var copy1 = geo12.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setPosition(-300, -100);
      copy1.flags.display.set(true);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_data1(geo12) {
      var data1 = geo12.createNode("data");
      data1.setName("data1");
      const data1_nodes = {};
      data1.uiData.setComment(
        "Try changing the values inside this node, and see how that impacts the output of the copy node"
      );
      data1.uiData.setPosition(-200, -650);
      data1.p.data.set('[{"radius":3, "angle":90, "segments": 6}]');
      data1.params.postCreateSpareParams();
      data1.params.runOnSceneLoadHooks();
      return { node: data1, children: data1_nodes };
    }
    geo1_nodes["box1"] = create_box1(geo1);
    geo1_nodes["circle1"] = create_circle1(geo1);
    geo1_nodes["copy1"] = create_copy1(geo1);
    geo1_nodes["data1"] = create_data1(geo1);
    geo1_nodes["copy1"].node.setInput(0, geo1_nodes["box1"].node);
    geo1_nodes["copy1"].node.setInput(1, geo1_nodes["circle1"].node);
    geo1.uiData.setPosition(0, -50);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    grid.uiData.setPosition(0, -150);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(200, 200);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.6610931372932695, -1.5878491680619118, -1.544847541286043]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    perspectiveCamera1.uiData.setPosition(-150, 200);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([4.0859463258358675, 5.868268087915243, 1.3055653371223168]);
    perspectiveCamera1.p.r.set([-68.72444324394021, 22.97761684435261, 45.07194773819147]);
    perspectiveCamera1.p.s.set([1, 0.9999999999999998, 1]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: Object.values(scene_root_nodes["geo1"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Data_advanced_ts.0b152e37e0da93004bf3.js.map