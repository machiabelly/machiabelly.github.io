(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_CameraWebXRVR_basic_ts"],{

/***/ 58300:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_env(parentNode) {
    var env = parentNode.createNode("geo");
    env.setName("env");
    const env_nodes = {};
    function create_boxLines1(env2) {
      var boxLines1 = env2.createNode("boxLines");
      boxLines1.setName("boxLines1");
      const boxLines1_nodes = {};
      boxLines1.uiData.setPosition(-150, 200);
      boxLines1.p.divisions.set([11, 11, 11]);
      boxLines1.p.center.set([0, 0.5, 0]);
      boxLines1.params.postCreateSpareParams();
      boxLines1.params.runOnSceneLoadHooks();
      return { node: boxLines1, children: boxLines1_nodes };
    }
    function create_merge1(env2) {
      var merge1 = env2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-50, 550);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_sphere1(env2) {
      var sphere1 = env2.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(100, 200);
      sphere1.p.radius.set(0.45);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    function create_transform1(env2) {
      var transform1 = env2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-150, 350);
      transform1.p.scale.set(10);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_transform2(env2) {
      var transform2 = env2.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setPosition(100, 350);
      transform2.p.t.set([-2.579839561371403, 1.1380381878791985, -2.33002363287183]);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    env_nodes["boxLines1"] = create_boxLines1(env);
    env_nodes["merge1"] = create_merge1(env);
    env_nodes["sphere1"] = create_sphere1(env);
    env_nodes["transform1"] = create_transform1(env);
    env_nodes["transform2"] = create_transform2(env);
    env_nodes["merge1"].node.setInput(0, env_nodes["transform1"].node);
    env_nodes["merge1"].node.setInput(1, env_nodes["transform2"].node);
    env_nodes["transform1"].node.setInput(0, env_nodes["boxLines1"].node);
    env_nodes["transform2"].node.setInput(0, env_nodes["sphere1"].node);
    if (env.childrenController) {
      env.childrenController.selection.set([env_nodes["sphere1"].node]);
    }
    env.uiData.setPosition(-50, -150);
    env.flags.display.set(true);
    env.params.postCreateSpareParams();
    env.params.runOnSceneLoadHooks();
    return { node: env, children: env_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([0.009551706323916092, 0.49956781418231494, -0.2404906439486597]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(-450, 50);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraWebXRVR1(cameras2) {
      var cameraWebXRVR1 = cameras2.createNode("cameraWebXRVR");
      cameraWebXRVR1.setName("cameraWebXRVR1");
      const cameraWebXRVR1_nodes = {};
      cameraWebXRVR1.uiData.setComment(
        "with this node, you give VR (virtual reality) capability to the camera. When setting the display flag to this one (or any downstream node), and if the camera is selected in the viewer, you will see a `VR button` in the viewer.\n\nClicking on it from a device that supports VR will allow you to see the scene in virtual reality."
      );
      cameraWebXRVR1.uiData.setPosition(-100, 50);
      cameraWebXRVR1.params.postCreateSpareParams();
      cameraWebXRVR1.params.runOnSceneLoadHooks();
      return { node: cameraWebXRVR1, children: cameraWebXRVR1_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setComment(
        "Here we merge 2 cameras.\n\nThe right one is to navigate the scene in AR, while the left one is to view and edit it when not in AR.\n\nIt is recommended to have different camera configurations like this, so that you can edit and debug your scene easily, without having to access your AR device."
      );
      merge1.uiData.setPosition(-250, 400);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG.setName("perspectiveCamera_DEBUG");
      const perspectiveCamera_DEBUG_nodes = {};
      perspectiveCamera_DEBUG.uiData.setPosition(-450, -100);
      perspectiveCamera_DEBUG.p.position.set([3, 3, 3]);
      perspectiveCamera_DEBUG.params.postCreateSpareParams();
      perspectiveCamera_DEBUG.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes };
    }
    function create_perspectiveCamera_VR(cameras2) {
      var perspectiveCamera_VR = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_VR.setName("perspectiveCamera_VR");
      const perspectiveCamera_VR_nodes = {};
      perspectiveCamera_VR.uiData.setPosition(-100, -100);
      perspectiveCamera_VR.p.position.set([0, 1.6, 0]);
      perspectiveCamera_VR.params.postCreateSpareParams();
      perspectiveCamera_VR.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_VR, children: perspectiveCamera_VR_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraWebXRVR1"] = create_cameraWebXRVR1(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera_DEBUG"] = create_perspectiveCamera_DEBUG(cameras);
    cameras_nodes["perspectiveCamera_VR"] = create_perspectiveCamera_VR(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_DEBUG"].node);
    cameras_nodes["cameraWebXRVR1"].node.setInput(0, cameras_nodes["perspectiveCamera_VR"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["cameraControls1"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraWebXRVR1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(-50, -50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(0, 150);
      hemisphereLight1.flags.display.set(true);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    if (lights.childrenController) {
      lights.childrenController.selection.set([]);
    }
    lights.uiData.setPosition(-50, 50);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  scene_root_nodes["env"] = create_env(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene_root_nodes["lights"] = create_lights(root);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_VR",
    focusedNodes: Object.values(scene_root_nodes["cameras"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_CameraWebXRVR_basic_ts.ebaeec63db0a8b3265de.js.map