(self["webpackChunk"] = self["webpackChunk"] || []).push([["_polygonjs_polygonjs_src_engine_nodes_mat_LineBasic_ts-_polygonjs_polygonjs_src_engine_nodes_-af07fa"],{

/***/ 87000:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": function() { return /* binding */ LineBasicMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(78058);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90476);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96949);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





class LineBasicMatParamsConfig extends (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_0__/* .AdvancedCommonParamConfig */ .E)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .NodeParamsConfig */ .yI) {
  constructor() {
    super(...arguments);
    /** @param line color */
    this.color = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.COLOR */ .XC.COLOR([1, 1, 1]);
    /** @param line width */
    this.lineWidth = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, {
      range: [1, 10],
      rangeLocked: [true, false]
    });
  }
}
const ParamsConfig = new LineBasicMatParamsConfig();
class LineBasicMatNode extends _Base__WEBPACK_IMPORTED_MODULE_2__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_0__/* .AdvancedCommonController */ .h(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_3__/* .MatType.LINE_BASIC */ .M.LINE_BASIC;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_4__.LineBasicMaterial({
      color: 16777215,
      linewidth: 1
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this._material.color.copy(this.pv.color);
      this._material.linewidth = this.pv.lineWidth;
      this._material.needsUpdate = true;
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 94978:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": function() { return /* binding */ MeshBasicMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(78058);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(96949);
/* harmony import */ var _utils_ColorsController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(40330);
/* harmony import */ var _utils_FogController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30082);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(87732);
/* harmony import */ var _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(71607);
/* harmony import */ var _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(94135);
/* harmony import */ var _utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(97564);
/* harmony import */ var _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(28985);
/* harmony import */ var _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58206);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(99233);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(45231);
/* harmony import */ var _utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73777);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

















class MeshBasicMatParamsConfig extends (0,_utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogParamConfig */ .N9)(
  (0,_utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeParamConfig */ .M)(
    (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonParamConfig */ .E)(
      /* advanced */
      (0,_utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_3__/* .AdvancedFolderParamConfig */ .A)(
        (0,_utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_4__/* .LightMapParamConfig */ .T)(
          (0,_utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_5__/* .EnvMapSimpleParamConfig */ .R)(
            (0,_utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_6__/* .AOMapParamConfig */ .T)(
              (0,_utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_7__/* .AlphaMapParamConfig */ .T)(
                (0,_utils_TextureMapController__WEBPACK_IMPORTED_MODULE_8__/* .MapParamConfig */ .D)(
                  /* textures */
                  (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_9__/* .TexturesFolderParamConfig */ .o)(
                    (0,_utils_ColorsController__WEBPACK_IMPORTED_MODULE_10__/* .ColorParamConfig */ .Pn)((0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_11__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_12__/* .NodeParamsConfig */ .yI))
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshBasicMatParamsConfig();
class MeshBasicMatNode extends _Base__WEBPACK_IMPORTED_MODULE_13__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      colors: new _utils_ColorsController__WEBPACK_IMPORTED_MODULE_10__/* .ColorsController */ .br(this),
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonController */ .h(this),
      alphaMap: new _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_7__/* .TextureAlphaMapController */ .s(this),
      aoMap: new _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_6__/* .TextureAOMapController */ .Z(this),
      envMap: new _utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_5__/* .TextureEnvMapSimpleController */ .z(this),
      fog: new _utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogController */ .j2(this),
      lightMap: new _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_4__/* .TextureLightMapController */ .$(this),
      map: new _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_8__/* .TextureMapController */ .g(this),
      wireframe: new _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeController */ .U(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_14__/* .MatType.MESH_BASIC */ .M.MESH_BASIC;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_15__.MeshBasicMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_15__.FrontSide,
      color: 16777215,
      opacity: 1
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 40453:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "p": function() { return /* binding */ MeshMatcapMatNode; }
});

// EXTERNAL MODULE: ../@polygonjs/polygonjs/node_modules/three/build/three.module.js
var three_module = __webpack_require__(21410);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/_Base.ts
var _Base = __webpack_require__(78058);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/utils/params/ParamsConfig.ts
var ParamsConfig = __webpack_require__(96949);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/ColorsController.ts
var ColorsController = __webpack_require__(40330);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/AdvancedCommonController.ts
var AdvancedCommonController = __webpack_require__(90476);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureMapController.ts
var TextureMapController = __webpack_require__(87732);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureAlphaMapController.ts
var TextureAlphaMapController = __webpack_require__(71607);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureBumpMapController.ts
var TextureBumpMapController = __webpack_require__(89328);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureNormalMapController.ts
var TextureNormalMapController = __webpack_require__(19767);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureDisplacementMapController.ts
var TextureDisplacementMapController = __webpack_require__(70967);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/_BaseTextureController.ts
var _BaseTextureController = __webpack_require__(68342);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureMatcapMapController.ts

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function MatcapMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a matcap map */
      this.useMatcapMap = ParamsConfig/* ParamConfig.BOOLEAN */.XC.BOOLEAN(0, (0,_BaseTextureController/* BooleanParamOptions */.wF)(TextureMatcapMapController));
      /** @param specify the matcap map COP node */
      this.matcapMap = ParamsConfig/* ParamConfig.NODE_PATH */.XC.NODE_PATH("", (0,_BaseTextureController/* NodePathOptions */.C9)(TextureMatcapMapController, "useMatcapMap"));
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return true;
}
class TextureMatcapMapParamsConfig extends MatcapMapParamConfig(ParamsConfig/* NodeParamsConfig */.yI) {
}
class TextureMatcapMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureMatcapMapController extends _BaseTextureController/* BaseTextureMapController */.oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useMatcapMap, this.node.p.matcapMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.matcap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "matcap", this.node.p.useMatcapMap, this.node.p.matcapMap);
    });
  }
  getTextures(material, record) {
    record.set("matcap", material.matcap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("matcap");
    this.node.p.useMatcapMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.matcapMap.setNode(mapNode, { relative: true });
    }
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/FlatShadingController.ts
var FlatShadingController = __webpack_require__(90201);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/FogController.ts
var FogController = __webpack_require__(30082);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/DefaultFolder.ts
var DefaultFolder = __webpack_require__(99233);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TexturesFolder.ts
var TexturesFolder = __webpack_require__(45231);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/AdvancedFolder.ts
var AdvancedFolder = __webpack_require__(73777);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Mat.ts
var Mat = __webpack_require__(41545);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshMatcap.ts

var MeshMatcap_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};


















class MeshMatCapMatParamsConfig extends (0,FogController/* FogParamConfig */.N9)(
  (0,AdvancedCommonController/* AdvancedCommonParamConfig */.E)(
    (0,FlatShadingController/* FlatShadingParamConfig */.s)(
      /* advanced */
      (0,AdvancedFolder/* AdvancedFolderParamConfig */.A)(
        (0,TextureNormalMapController/* NormalMapParamConfig */.$)(
          (0,TextureDisplacementMapController/* DisplacementMapParamConfig */.n)(
            (0,TextureBumpMapController/* BumpMapParamConfig */.w)(
              (0,TextureAlphaMapController/* AlphaMapParamConfig */.T)(
                (0,TextureMapController/* MapParamConfig */.D)(
                  MatcapMapParamConfig(
                    /* textures */
                    (0,TexturesFolder/* TexturesFolderParamConfig */.o)(
                      (0,ColorsController/* ColorParamConfig */.Pn)((0,DefaultFolder/* DefaultFolderParamConfig */.b)(ParamsConfig/* NodeParamsConfig */.yI))
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const MeshMatcap_ParamsConfig = new MeshMatCapMatParamsConfig();
class MeshMatcapMatNode extends _Base/* PrimitiveMatNode */.Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = MeshMatcap_ParamsConfig;
    this.controllers = {
      colors: new ColorsController/* ColorsController */.br(this),
      advancedCommon: new AdvancedCommonController/* AdvancedCommonController */.h(this),
      alphaMap: new TextureAlphaMapController/* TextureAlphaMapController */.s(this),
      bumpMap: new TextureBumpMapController/* TextureBumpMapController */.T(this),
      displacementMap: new TextureDisplacementMapController/* TextureDisplacementMapController */.u(this),
      fog: new FogController/* FogController */.j2(this),
      flatShading: new FlatShadingController/* FlatShadingController */.C(this),
      map: new TextureMapController/* TextureMapController */.g(this),
      matcap: new TextureMatcapMapController(this),
      normalMap: new TextureNormalMapController/* TextureNormalMapController */.w(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return Mat/* MatType.MESH_MATCAP */.M.MESH_MATCAP;
  }
  createMaterial() {
    return new three_module.MeshMatcapMaterial({
      vertexColors: false,
      side: three_module.FrontSide,
      color: 16777215,
      opacity: 1
    });
  }
  cook() {
    return MeshMatcap_async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 69312:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": function() { return /* binding */ MeshPhongMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(78058);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(96949);
/* harmony import */ var _utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(40330);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(87732);
/* harmony import */ var _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(71607);
/* harmony import */ var _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(89328);
/* harmony import */ var _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19767);
/* harmony import */ var _utils_TextureSpecularMapController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(36725);
/* harmony import */ var _utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(97564);
/* harmony import */ var _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(69228);
/* harmony import */ var _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(70967);
/* harmony import */ var _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28985);
/* harmony import */ var _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(94135);
/* harmony import */ var _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(90201);
/* harmony import */ var _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58206);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(41545);
/* harmony import */ var _utils_FogController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30082);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(99233);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(45231);
/* harmony import */ var _utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73777);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};























class MeshPhongMatParamsConfig extends (0,_utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogParamConfig */ .N9)(
  (0,_utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeParamConfig */ .M)(
    (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonParamConfig */ .E)(
      (0,_utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__/* .FlatShadingParamConfig */ .s)(
        /* advanced */
        (0,_utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_4__/* .AdvancedFolderParamConfig */ .A)(
          (0,_utils_TextureSpecularMapController__WEBPACK_IMPORTED_MODULE_5__/* .SpecularMapParamConfig */ .E)(
            (0,_utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__/* .NormalMapParamConfig */ .$)(
              (0,_utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__/* .LightMapParamConfig */ .T)(
                (0,_utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_8__/* .EnvMapSimpleParamConfig */ .R)(
                  (0,_utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__/* .EmissiveMapParamConfig */ .f)(
                    (0,_utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__/* .DisplacementMapParamConfig */ .n)(
                      (0,_utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__/* .BumpMapParamConfig */ .w)(
                        (0,_utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__/* .AOMapParamConfig */ .T)(
                          (0,_utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__/* .AlphaMapParamConfig */ .T)(
                            (0,_utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__/* .MapParamConfig */ .D)(
                              /* textures */
                              (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_15__/* .TexturesFolderParamConfig */ .o)(
                                (0,_utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__/* .ColorParamConfig */ .Pn)(
                                  (0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_17__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_18__/* .NodeParamsConfig */ .yI)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshPhongMatParamsConfig();
class MeshPhongMatNode extends _Base__WEBPACK_IMPORTED_MODULE_19__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      colors: new _utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__/* .ColorsController */ .br(this),
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonController */ .h(this),
      alphaMap: new _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__/* .TextureAlphaMapController */ .s(this),
      aoMap: new _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__/* .TextureAOMapController */ .Z(this),
      bumpMap: new _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__/* .TextureBumpMapController */ .T(this),
      displacementMap: new _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__/* .TextureDisplacementMapController */ .u(this),
      emissiveMap: new _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__/* .TextureEmissiveMapController */ .z(this),
      envMap: new _utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_8__/* .TextureEnvMapSimpleController */ .z(this),
      fog: new _utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogController */ .j2(this),
      flatShading: new _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__/* .FlatShadingController */ .C(this),
      lightMap: new _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__/* .TextureLightMapController */ .$(this),
      map: new _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__/* .TextureMapController */ .g(this),
      normalMap: new _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__/* .TextureNormalMapController */ .w(this),
      specularMap: new _utils_TextureSpecularMapController__WEBPACK_IMPORTED_MODULE_5__/* .TextureSpecularMapController */ .M(this),
      wireframe: new _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeController */ .U(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_20__/* .MatType.MESH_PHONG */ .M.MESH_PHONG;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_21__.MeshPhongMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_21__.FrontSide,
      color: 16777215,
      opacity: 1
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 65349:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "l": function() { return /* binding */ MeshPhysicalMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(78058);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(96949);
/* harmony import */ var _utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(40330);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(87732);
/* harmony import */ var _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(71607);
/* harmony import */ var _utils_TextureEnvMapController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5481);
/* harmony import */ var _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(89328);
/* harmony import */ var _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19767);
/* harmony import */ var _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(69228);
/* harmony import */ var _utils_TextureMetalnessRoughnessMapController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(94440);
/* harmony import */ var _utils_MeshPhysicalController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(23746);
/* harmony import */ var _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28985);
/* harmony import */ var _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(70967);
/* harmony import */ var _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(94135);
/* harmony import */ var _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58206);
/* harmony import */ var _utils_FogController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30082);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(99233);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(45231);
/* harmony import */ var _utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73777);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};























class MeshPhysicalMatParamsConfig extends (0,_utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogParamConfig */ .N9)(
  (0,_utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeParamConfig */ .M)(
    (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonParamConfig */ .E)(
      /* advanced */
      (0,_utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_3__/* .AdvancedFolderParamConfig */ .A)(
        (0,_utils_MeshPhysicalController__WEBPACK_IMPORTED_MODULE_4__/* .MeshPhysicalParamConfig */ .Vs)(
          (0,_utils_TextureMetalnessRoughnessMapController__WEBPACK_IMPORTED_MODULE_5__/* .MetalnessRoughnessMapParamConfig */ .EO)(
            (0,_utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__/* .NormalMapParamConfig */ .$)(
              (0,_utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__/* .LightMapParamConfig */ .T)(
                (0,_utils_TextureEnvMapController__WEBPACK_IMPORTED_MODULE_8__/* .EnvMapParamConfig */ .s7)(
                  (0,_utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__/* .EmissiveMapParamConfig */ .f)(
                    (0,_utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__/* .DisplacementMapParamConfig */ .n)(
                      (0,_utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__/* .BumpMapParamConfig */ .w)(
                        (0,_utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__/* .AOMapParamConfig */ .T)(
                          (0,_utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__/* .AlphaMapParamConfig */ .T)(
                            (0,_utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__/* .MapParamConfig */ .D)(
                              /* textures */
                              (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_15__/* .TexturesFolderParamConfig */ .o)(
                                (0,_utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__/* .ColorParamConfig */ .Pn)(
                                  (0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_17__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_18__/* .NodeParamsConfig */ .yI)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshPhysicalMatParamsConfig();
class MeshPhysicalMatNode extends _Base__WEBPACK_IMPORTED_MODULE_19__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      colors: new _utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__/* .ColorsController */ .br(this),
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonController */ .h(this),
      alphaMap: new _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__/* .TextureAlphaMapController */ .s(this),
      aoMap: new _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__/* .TextureAOMapController */ .Z(this),
      bumpMap: new _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__/* .TextureBumpMapController */ .T(this),
      displacementMap: new _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__/* .TextureDisplacementMapController */ .u(this),
      emissiveMap: new _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__/* .TextureEmissiveMapController */ .z(this),
      envMap: new _utils_TextureEnvMapController__WEBPACK_IMPORTED_MODULE_8__/* .TextureEnvMapController */ .nz(this),
      fog: new _utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogController */ .j2(this),
      lightMap: new _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__/* .TextureLightMapController */ .$(this),
      map: new _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__/* .TextureMapController */ .g(this),
      metalnessRoughnessMap: new _utils_TextureMetalnessRoughnessMapController__WEBPACK_IMPORTED_MODULE_5__/* .TextureMetalnessRoughnessMapController */ .Ae(this),
      normalMap: new _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__/* .TextureNormalMapController */ .w(this),
      physical: new _utils_MeshPhysicalController__WEBPACK_IMPORTED_MODULE_4__/* .MeshPhysicalController */ .y(this),
      wireframe: new _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeController */ .U(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_20__/* .MatType.MESH_PHYSICAL */ .M.MESH_PHYSICAL;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_21__.MeshPhysicalMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_21__.FrontSide,
      color: 16777215,
      opacity: 1,
      metalness: 1,
      roughness: 0
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 13076:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Q": function() { return /* binding */ MeshStandardMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(78058);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(96949);
/* harmony import */ var _utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(40330);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(87732);
/* harmony import */ var _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(71607);
/* harmony import */ var _utils_TextureEnvMapController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5481);
/* harmony import */ var _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(89328);
/* harmony import */ var _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19767);
/* harmony import */ var _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(69228);
/* harmony import */ var _utils_TextureMetalnessRoughnessMapController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(94440);
/* harmony import */ var _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28985);
/* harmony import */ var _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(70967);
/* harmony import */ var _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(90201);
/* harmony import */ var _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(94135);
/* harmony import */ var _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58206);
/* harmony import */ var _utils_FogController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30082);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(99233);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(45231);
/* harmony import */ var _utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73777);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};























class MeshStandardMatParamsConfig extends (0,_utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogParamConfig */ .N9)(
  (0,_utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeParamConfig */ .M)(
    (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonParamConfig */ .E)(
      (0,_utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__/* .FlatShadingParamConfig */ .s)(
        /* advanced */
        (0,_utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_4__/* .AdvancedFolderParamConfig */ .A)(
          (0,_utils_TextureMetalnessRoughnessMapController__WEBPACK_IMPORTED_MODULE_5__/* .MetalnessRoughnessMapParamConfig */ .EO)(
            (0,_utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__/* .NormalMapParamConfig */ .$)(
              (0,_utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__/* .LightMapParamConfig */ .T)(
                (0,_utils_TextureEnvMapController__WEBPACK_IMPORTED_MODULE_8__/* .EnvMapParamConfig */ .s7)(
                  (0,_utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__/* .EmissiveMapParamConfig */ .f)(
                    (0,_utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__/* .DisplacementMapParamConfig */ .n)(
                      (0,_utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__/* .BumpMapParamConfig */ .w)(
                        (0,_utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__/* .AOMapParamConfig */ .T)(
                          (0,_utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__/* .AlphaMapParamConfig */ .T)(
                            (0,_utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__/* .MapParamConfig */ .D)(
                              /* textures */
                              (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_15__/* .TexturesFolderParamConfig */ .o)(
                                (0,_utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__/* .ColorParamConfig */ .Pn)(
                                  (0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_17__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_18__/* .NodeParamsConfig */ .yI)
                                )
                              )
                            )
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshStandardMatParamsConfig();
class MeshStandardMatNode extends _Base__WEBPACK_IMPORTED_MODULE_19__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      colors: new _utils_ColorsController__WEBPACK_IMPORTED_MODULE_16__/* .ColorsController */ .br(this),
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonController */ .h(this),
      alphaMap: new _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_13__/* .TextureAlphaMapController */ .s(this),
      aoMap: new _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_12__/* .TextureAOMapController */ .Z(this),
      bumpMap: new _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_11__/* .TextureBumpMapController */ .T(this),
      displacementMap: new _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_10__/* .TextureDisplacementMapController */ .u(this),
      emissiveMap: new _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_9__/* .TextureEmissiveMapController */ .z(this),
      envMap: new _utils_TextureEnvMapController__WEBPACK_IMPORTED_MODULE_8__/* .TextureEnvMapController */ .nz(this),
      fog: new _utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogController */ .j2(this),
      flatShading: new _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__/* .FlatShadingController */ .C(this),
      lightMap: new _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_7__/* .TextureLightMapController */ .$(this),
      map: new _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_14__/* .TextureMapController */ .g(this),
      metalnessRoughnessMap: new _utils_TextureMetalnessRoughnessMapController__WEBPACK_IMPORTED_MODULE_5__/* .TextureMetalnessRoughnessMapController */ .Ae(this),
      normalMap: new _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_6__/* .TextureNormalMapController */ .w(this),
      wireframe: new _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeController */ .U(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_20__/* .MatType.MESH_STANDARD */ .M.MESH_STANDARD;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_21__.MeshStandardMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_21__.FrontSide,
      color: 16777215,
      opacity: 1,
      metalness: 1,
      roughness: 0
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 46584:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": function() { return /* binding */ MeshToonMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(78058);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(96949);
/* harmony import */ var _utils_ColorsController__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(40330);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(87732);
/* harmony import */ var _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(71607);
/* harmony import */ var _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(89328);
/* harmony import */ var _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(69228);
/* harmony import */ var _utils_TextureGradientMapController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(69602);
/* harmony import */ var _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19767);
/* harmony import */ var _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(70967);
/* harmony import */ var _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28985);
/* harmony import */ var _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(94135);
/* harmony import */ var _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58206);
/* harmony import */ var _utils_FogController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30082);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(99233);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(45231);
/* harmony import */ var _utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(73777);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





















class MeshToonMatParamsConfig extends (0,_utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogParamConfig */ .N9)(
  (0,_utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeParamConfig */ .M)(
    (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonParamConfig */ .E)(
      /* advanced */
      (0,_utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_3__/* .AdvancedFolderParamConfig */ .A)(
        (0,_utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_4__/* .NormalMapParamConfig */ .$)(
          (0,_utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_5__/* .LightMapParamConfig */ .T)(
            (0,_utils_TextureGradientMapController__WEBPACK_IMPORTED_MODULE_6__/* .GradientMapParamConfig */ .P)(
              (0,_utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_7__/* .EmissiveMapParamConfig */ .f)(
                (0,_utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_8__/* .DisplacementMapParamConfig */ .n)(
                  (0,_utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_9__/* .BumpMapParamConfig */ .w)(
                    (0,_utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_10__/* .AOMapParamConfig */ .T)(
                      (0,_utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_11__/* .AlphaMapParamConfig */ .T)(
                        (0,_utils_TextureMapController__WEBPACK_IMPORTED_MODULE_12__/* .MapParamConfig */ .D)(
                          /* textures */
                          (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_13__/* .TexturesFolderParamConfig */ .o)(
                            (0,_utils_ColorsController__WEBPACK_IMPORTED_MODULE_14__/* .ColorParamConfig */ .Pn)((0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_15__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_16__/* .NodeParamsConfig */ .yI))
                          )
                        )
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshToonMatParamsConfig();
class MeshToonMatNode extends _Base__WEBPACK_IMPORTED_MODULE_17__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      colors: new _utils_ColorsController__WEBPACK_IMPORTED_MODULE_14__/* .ColorsController */ .br(this),
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonController */ .h(this),
      alphaMap: new _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_11__/* .TextureAlphaMapController */ .s(this),
      aoMap: new _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_10__/* .TextureAOMapController */ .Z(this),
      bumpMap: new _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_9__/* .TextureBumpMapController */ .T(this),
      displacementMap: new _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_8__/* .TextureDisplacementMapController */ .u(this),
      emissiveMap: new _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_7__/* .TextureEmissiveMapController */ .z(this),
      fog: new _utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogController */ .j2(this),
      gradientMap: new _utils_TextureGradientMapController__WEBPACK_IMPORTED_MODULE_6__/* .TextureGradientMapController */ .o(this),
      lightMap: new _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_5__/* .TextureLightMapController */ .$(this),
      map: new _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_12__/* .TextureMapController */ .g(this),
      normalMap: new _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_4__/* .TextureNormalMapController */ .w(this),
      wireframe: new _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeController */ .U(this)
    };
    this.controllerNames = Object.keys(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_18__/* .MatType.MESH_TOON */ .M.MESH_TOON;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_19__.MeshToonMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_19__.FrontSide,
      color: 16777215,
      opacity: 1
    });
  }
  initializeNode() {
    this.params.onParamsCreated("init controllers", () => {
      for (const controllerName of this.controllerNames) {
        this.controllers[controllerName].initializeNode();
      }
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 83760:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": function() { return /* binding */ PointsMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(78058);
/* harmony import */ var _utils_ColorsController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(40330);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(87732);
/* harmony import */ var _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(71607);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(96949);
/* harmony import */ var _utils_UniformsFogController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9161);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(99233);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(45231);
/* harmony import */ var _utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(73777);
/* harmony import */ var _utils_PointsSizeController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(46049);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};














class PointsMatParamsConfig extends (0,_utils_UniformsFogController__WEBPACK_IMPORTED_MODULE_0__/* .FogParamConfig */ .N)(
  (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_1__/* .AdvancedCommonParamConfig */ .E)(
    /* advanced */
    (0,_utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedFolderParamConfig */ .A)(
      (0,_utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_3__/* .AlphaMapParamConfig */ .T)(
        (0,_utils_TextureMapController__WEBPACK_IMPORTED_MODULE_4__/* .MapParamConfig */ .D)(
          /* textures */
          (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_5__/* .TexturesFolderParamConfig */ .o)(
            (0,_utils_ColorsController__WEBPACK_IMPORTED_MODULE_6__/* .ColorParamConfig */ .Pn)((0,_utils_PointsSizeController__WEBPACK_IMPORTED_MODULE_7__/* .PointsParamConfig */ .v)((0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_8__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_9__/* .NodeParamsConfig */ .yI)))
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new PointsMatParamsConfig();
class PointsMatNode extends _Base__WEBPACK_IMPORTED_MODULE_10__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      colors: new _utils_ColorsController__WEBPACK_IMPORTED_MODULE_6__/* .ColorsController */ .br(this),
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_1__/* .AdvancedCommonController */ .h(this),
      alphaMap: new _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_3__/* .TextureAlphaMapController */ .s(this),
      map: new _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_4__/* .TextureMapController */ .g(this),
      pointsSize: new _utils_PointsSizeController__WEBPACK_IMPORTED_MODULE_7__/* .PointsSizeController */ .E(this),
      uniformFog: new _utils_UniformsFogController__WEBPACK_IMPORTED_MODULE_0__/* .UniformFogController */ .z(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_11__/* .MatType.POINTS */ .M.POINTS;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_12__.PointsMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_12__.FrontSide,
      color: 16777215,
      opacity: 1
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 40330:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Pn": function() { return /* binding */ ColorParamConfig; },
/* harmony export */   "br": function() { return /* binding */ ColorsController; },
/* harmony export */   "rI": function() { return /* binding */ isValidColoredMaterial; }
/* harmony export */ });
/* harmony import */ var _BaseController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4418);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);
/* harmony import */ var _core_BooleanValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19037);
/* harmony import */ var _core_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10109);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21410);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};






function ColorParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param material color */
      this.color = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.COLOR */ .XC.COLOR([1, 1, 1], {
        // conversion: ColorConversion.SRGB_TO_LINEAR,
      });
      /** @param defines if the color attribute on the geometry is used */
      this.useVertexColors = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, { separatorAfter: true });
      /** @param sets the material to transparent */
      this.transparent = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0);
      /** @param sets the material opacity */
      this.opacity = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1);
      /** @param sets the min alpha below which the material is invisible */
      this.alphaTest = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0);
    }
  };
}
function isValidColoredMaterial(material) {
  if (!material) {
    return false;
  }
  return material.color != null;
}
class ColorParamsConfig extends ColorParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class ColoredMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
const _tmpColor = new three__WEBPACK_IMPORTED_MODULE_1__.Color();
const _tmpColorArray = [0, 0, 0];
class ColorsController extends _BaseController__WEBPACK_IMPORTED_MODULE_2__/* .BaseController */ .x {
  constructor(node) {
    super(node);
    this.node = node;
  }
  static update(node) {
    return __async(this, null, function* () {
      const container = yield node.compute();
      const material = container.material();
      if (!isValidColoredMaterial(material)) {
        return;
      }
      node.controllers.colors.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    const pv = this.node.pv;
    material.color.copy(pv.color);
    const newVertexColor = (0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_3__/* .isBooleanTrue */ .bI)(pv.useVertexColors);
    if (newVertexColor != material.vertexColors) {
      material.vertexColors = newVertexColor;
      material.needsUpdate = true;
    }
    material.opacity = pv.opacity;
    material.transparent = pv.transparent;
    material.alphaTest = pv.alphaTest;
  }
  setParamsFromMaterial(material, record) {
    const p = this.node.p;
    _tmpColor.copy(material.color).toArray(_tmpColorArray);
    p.color.set(_tmpColorArray);
    p.color.setConversion(_core_Color__WEBPACK_IMPORTED_MODULE_4__/* .ColorConversion.NONE */ .Yx.NONE);
    p.useVertexColors.set(material.vertexColors);
    p.opacity.set(material.opacity);
    p.transparent.set(material.transparent);
    p.alphaTest.set(material.alphaTest);
  }
}


/***/ }),

/***/ 90201:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C": function() { return /* binding */ FlatShadingController; },
/* harmony export */   "s": function() { return /* binding */ FlatShadingParamConfig; }
/* harmony export */ });
/* harmony import */ var _BaseController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4418);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function FlatShadingParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param defines if the material is flat shaded */
      this.flatShading = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, {
        separatorAfter: true
      });
    }
  };
}
class FlatShadingParamsConfig extends FlatShadingParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.flatShading != null;
}
class FlatShadingMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class FlatShadingController extends _BaseController__WEBPACK_IMPORTED_MODULE_1__/* .BaseController */ .x {
  constructor(node) {
    super(node);
    this.node = node;
  }
  static update(node) {
    return __async(this, null, function* () {
      const material = yield node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      node.controllers.flatShading.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    material.flatShading = this.node.pv.flatShading;
  }
  setParamsFromMaterial(material, record) {
    this.node.p.flatShading.set(material.flatShading);
  }
}


/***/ }),

/***/ 23746:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Vs": function() { return /* binding */ MeshPhysicalParamConfig; },
/* harmony export */   "y": function() { return /* binding */ MeshPhysicalController; }
/* harmony export */ });
/* unused harmony export isValidMaterial */
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(21410);
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);
/* harmony import */ var _core_BooleanValue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(19037);
/* harmony import */ var _core_Color__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10109);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};







const ATTENUATION_DISTANCE_MIN = 1e-4;
function MeshPhysicalParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param Represents the thickness of the clear coat layer, from 0.0 to 1.0 */
      this.clearcoat = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0, { separatorBefore: true });
      /** @param toggle if you want to use a roughness map */
      this.useClearCoatMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(MeshPhysicalController));
      /** @param specify the roughness map COP node */
      this.clearcoatMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(MeshPhysicalController, "useClearCoatMap"));
      /** @param toggle if you want to use a clear coat normal map */
      this.useClearCoatNormalMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(MeshPhysicalController));
      /** @param specify the roughness map COP node */
      this.clearcoatNormalMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH(
        "",
        (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(MeshPhysicalController, "useClearCoatNormalMap")
      );
      /** @param How much the normal map affects the material. Typical ranges are 0-1 */
      this.clearcoatNormalScale = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.VECTOR2 */ .XC.VECTOR2([1, 1], { visibleIf: { useClearCoatNormalMap: 1 } });
      /** @param clearcoatRoughness */
      this.clearcoatRoughness = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0);
      /** @param toggle if you want to use a clear cloat map */
      this.useClearCoatRoughnessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(MeshPhysicalController));
      /** @param specify the roughness map COP node */
      this.clearcoatRoughnessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH(
        "",
        (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(MeshPhysicalController, "useClearCoatRoughnessMap")
      );
      /** @param toggle if you want to use sheen */
      this.useSheen = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, {
        separatorBefore: true
      });
      /** @param The intensity of the sheen layer, from 0.0 to 1.0. Default is 0.0. */
      this.sheen = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0, {
        range: [0, 1],
        rangeLocked: [true, false],
        visibleIf: { useSheen: 1 }
      });
      /** @param If a color is assigned to this property, the material will use a special sheen BRDF intended for rendering cloth materials such as velvet. The sheen color provides the ability to create two-tone specular materials. null by default */
      this.sheenRoughness = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, {
        range: [0, 1],
        rangeLocked: [true, false],
        visibleIf: { useSheen: 1 }
      });
      /** @param If a color is assigned to this property, the material will use a special sheen BRDF intended for rendering cloth materials such as velvet. The sheen color provides the ability to create two-tone specular materials. null by default */
      this.sheenColor = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.COLOR */ .XC.COLOR([1, 1, 1], {
        visibleIf: { useSheen: 1 }
      });
      /** @param toggle if you want to use iridescence */
      this.useIridescence = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, {
        separatorBefore: true
      });
      /** @param Iridescence amount */
      this.iridescence = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, {
        range: [0, 10],
        rangeLocked: [true, false],
        visibleIf: { useIridescence: 1 }
      });
      /** @param iridescence index of refraction */
      this.iridescenceIOR = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1.3, {
        range: [1, 10],
        rangeLocked: [false, false],
        visibleIf: { useIridescence: 1 }
      });
      /** @param Iridescence Thickness Range */
      this.iridescenceThicknessRange = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.VECTOR2 */ .XC.VECTOR2([0, 1], {
        visibleIf: { useIridescence: 1 }
      });
      /** @param toggle if you want to use an iridescence map */
      this.useIridescenceMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadProps(__spreadValues({}, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(MeshPhysicalController)), {
        visibleIf: { useIridescence: 1 }
      }));
      /** @param specify the iridescence map COP node */
      this.iridescenceMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", __spreadProps(__spreadValues({}, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(MeshPhysicalController, "useIridescenceMap")), {
        visibleIf: { useIridescence: 1, useIridescenceMap: 1 }
      }));
      /** @param toggle if you want to use an iridescence map */
      this.useIridescenceThicknessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadProps(__spreadValues({}, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(MeshPhysicalController)), {
        visibleIf: { useIridescence: 1 }
      }));
      /** @param specify the iridescence map COP node */
      this.iridescenceThicknessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", __spreadProps(__spreadValues({}, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(MeshPhysicalController, "useIridescenceThicknessMap")), {
        visibleIf: { useIridescence: 1, useIridescenceThicknessMap: 1 }
      }));
      /** @param Degree of transmission (or optical transparency), from 0.0 to 1.0. Default is 0.0.
      Thin, transparent or semitransparent, plastic or glass materials remain largely reflective even if they are fully transmissive. The transmission property can be used to model these materials.
      When transmission is non-zero, opacity should be set to 1.  */
      this.transmission = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0, {
        separatorBefore: true,
        range: [0, 1]
      });
      /** @param toggle if you want to use a transmission map */
      this.useTransmissionMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0);
      /** @param specify the roughness map COP node */
      this.transmissionMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", { visibleIf: { useTransmissionMap: 1 } });
      /** @param Index-of-refraction for non-metallic materials */
      this.ior = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1.5, {
        range: [1, 2.3333],
        rangeLocked: [true, true]
      });
      /** @param thickness  */
      this.thickness = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0.01, {
        range: [0, 10],
        rangeLocked: [true, false]
      });
      /** @param toggle if you want to use a thickness map */
      this.useThicknessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0);
      /** @param specify the roughness map COP node */
      this.thicknessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", { visibleIf: { useThicknessMap: 1 } });
      /** @param attenuation distance */
      this.attenuationDistance = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(100, {
        range: [ATTENUATION_DISTANCE_MIN, 100],
        rangeLocked: [true, false],
        step: 0.01
      });
      /** @param attenuation color */
      this.attenuationColor = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.COLOR */ .XC.COLOR([1, 1, 1]);
    }
  };
}
function isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.clearcoatRoughness != null;
}
class TextureClearCoatMapParamsConfig extends MeshPhysicalParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureClearCoatMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
const tmpMeshPhysicalForIOR = new three__WEBPACK_IMPORTED_MODULE_2__.MeshPhysicalMaterial();
const tmpN2 = [0, 0];
const tmpN3 = [0, 0, 0];
class MeshPhysicalController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
    this._sheenColorClone = new three__WEBPACK_IMPORTED_MODULE_2__.Color();
    this._iridescenceRange = [0, 0];
  }
  initializeNode() {
    this.add_hooks(this.node.p.useClearCoatMap, this.node.p.clearcoatMap);
    this.add_hooks(this.node.p.useClearCoatNormalMap, this.node.p.clearcoatNormalMap);
    this.add_hooks(this.node.p.useClearCoatRoughnessMap, this.node.p.clearcoatRoughnessMap);
    this.add_hooks(this.node.p.useTransmissionMap, this.node.p.transmissionMap);
    this.add_hooks(this.node.p.useThicknessMap, this.node.p.thicknessMap);
    this.add_hooks(this.node.p.useIridescenceMap, this.node.p.iridescenceMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      const container = yield node.compute();
      const material = container.material();
      if (!isValidMaterial(material)) {
        return;
      }
      node.controllers.physical.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      const pv = this.node.pv;
      const mat = material;
      tmpMeshPhysicalForIOR.ior = pv.ior;
      mat.reflectivity = tmpMeshPhysicalForIOR.reflectivity;
      mat.clearcoat = pv.clearcoat;
      if (mat.clearcoatNormalScale != null) {
        mat.clearcoatNormalScale.copy(pv.clearcoatNormalScale);
      }
      mat.clearcoatRoughness = pv.clearcoatRoughness;
      if ((0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_3__/* .isBooleanTrue */ .bI)(pv.useSheen)) {
        this._sheenColorClone.copy(pv.sheenColor);
        mat.sheen = pv.sheen;
        mat.sheenRoughness = pv.sheenRoughness;
        mat.sheenColor = this._sheenColorClone;
      } else {
        mat.sheen = 0;
      }
      if ((0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_3__/* .isBooleanTrue */ .bI)(pv.useIridescence)) {
        mat.iridescence = pv.iridescence;
        mat.iridescenceIOR = pv.iridescenceIOR;
        mat.iridescenceThicknessRange = pv.iridescenceThicknessRange.toArray(this._iridescenceRange);
      } else {
        mat.iridescence = 0;
      }
      mat.transmission = pv.transmission;
      mat.thickness = pv.thickness;
      mat.attenuationDistance = pv.attenuationDistance;
      mat.attenuationColor = pv.attenuationColor;
      yield Promise.all([
        this._update(material, "clearcoatMap", this.node.p.useClearCoatMap, this.node.p.clearcoatMap),
        this._update(
          material,
          "clearcoatNormalMap",
          this.node.p.useClearCoatNormalMap,
          this.node.p.clearcoatNormalMap
        ),
        this._update(
          material,
          "clearcoatRoughnessMap",
          this.node.p.useClearCoatRoughnessMap,
          this.node.p.clearcoatRoughnessMap
        ),
        this._update(material, "transmissionMap", this.node.p.useTransmissionMap, this.node.p.transmissionMap),
        this._update(material, "thicknessMap", this.node.p.useThicknessMap, this.node.p.thicknessMap),
        this._update(material, "iridescenceMap", this.node.p.useIridescenceMap, this.node.p.iridescenceMap),
        this._update(
          material,
          "iridescenceThicknessMap",
          this.node.p.useIridescenceThicknessMap,
          this.node.p.iridescenceThicknessMap
        )
      ]);
    });
  }
  getTextures(material, record) {
    record.set("clearcoatMap", material.clearcoatMap);
    record.set("clearcoatNormalMap", material.clearcoatNormalMap);
    record.set("clearcoatRoughnessMap", material.clearcoatRoughnessMap);
    record.set("transmissionMap", material.transmissionMap);
    record.set("thicknessMap", material.thicknessMap);
    record.set("iridescenceMap", material.iridescenceMap);
    record.set("iridescenceThicknessMap", material.iridescenceThicknessMap);
  }
  setParamsFromMaterial(material, record) {
    const clearcoatMap = () => {
      const mapNode = record.get("clearcoatMap");
      this.node.p.useClearCoatMap.set(mapNode != null);
      if (mapNode) {
        this.node.p.clearcoatMap.setNode(mapNode, { relative: true });
      }
    };
    const clearcoatNormalMap = () => {
      const mapNode = record.get("clearcoatNormalMap");
      this.node.p.useClearCoatNormalMap.set(mapNode != null);
      if (mapNode) {
        this.node.p.clearcoatNormalMap.setNode(mapNode, { relative: true });
      }
    };
    const clearcoatRoughnessMap = () => {
      const mapNode = record.get("clearcoatRoughnessMap");
      this.node.p.useClearCoatRoughnessMap.set(mapNode != null);
      if (mapNode) {
        this.node.p.clearcoatRoughnessMap.setNode(mapNode, { relative: true });
      }
    };
    const transmissionMap = () => {
      const mapNode = record.get("transmissionMap");
      this.node.p.useTransmissionMap.set(mapNode != null);
      if (mapNode) {
        this.node.p.transmissionMap.setNode(mapNode, { relative: true });
      }
    };
    const thicknessMap = () => {
      const mapNode = record.get("thicknessMap");
      this.node.p.useThicknessMap.set(mapNode != null);
      if (mapNode) {
        this.node.p.thicknessMap.setNode(mapNode, { relative: true });
      }
    };
    const iridescenceMap = () => {
      const mapNode = record.get("iridescenceMap");
      this.node.p.useIridescenceMap.set(mapNode != null);
      if (mapNode) {
        this.node.p.iridescenceMap.setNode(mapNode, { relative: true });
      }
    };
    const iridescenceThicknessMap = () => {
      const mapNode = record.get("iridescenceThicknessMap");
      this.node.p.useIridescenceThicknessMap.set(mapNode != null);
      if (mapNode) {
        this.node.p.iridescenceThicknessMap.setNode(mapNode, { relative: true });
      }
    };
    clearcoatMap();
    clearcoatNormalMap();
    clearcoatRoughnessMap();
    transmissionMap();
    thicknessMap();
    iridescenceMap();
    iridescenceThicknessMap();
    const p = this.node.p;
    p.ior.set(material.ior);
    p.clearcoat.set(material.clearcoat);
    material.clearcoatNormalScale.toArray(tmpN2);
    p.clearcoatNormalScale.set(tmpN2);
    p.clearcoatRoughness.set(material.clearcoatRoughness);
    material.sheenColor.toArray(tmpN3);
    p.sheenColor.set(tmpN3);
    p.sheenColor.setConversion(_core_Color__WEBPACK_IMPORTED_MODULE_4__/* .ColorConversion.NONE */ .Yx.NONE);
    p.sheen.set(material.sheen);
    p.sheenRoughness.set(material.sheenRoughness);
    p.transmission.set(material.transmission);
    p.thickness.set(material.thickness);
    p.attenuationDistance.set(material.attenuationDistance);
    material.attenuationColor.toArray(tmpN3);
    p.attenuationColor.set(tmpN3);
    p.attenuationColor.setConversion(_core_Color__WEBPACK_IMPORTED_MODULE_4__/* .ColorConversion.NONE */ .Yx.NONE);
    p.iridescence.set(material.iridescence);
    p.iridescenceIOR.set(material.iridescenceIOR);
    p.iridescenceThicknessRange.set(material.iridescenceThicknessRange);
  }
}


/***/ }),

/***/ 46049:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "E": function() { return /* binding */ PointsSizeController; },
/* harmony export */   "v": function() { return /* binding */ PointsParamConfig; }
/* harmony export */ });
/* harmony import */ var _BaseController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4418);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);
/* harmony import */ var _core_BooleanValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19037);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




function PointsParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.size = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, {
        range: [0, 10],
        rangeLocked: [true, false]
      });
      this.sizeAttenuation = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(1, {
        separatorAfter: true
      });
    }
  };
}
class PointsParamsConfig extends PointsParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
function isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.size != null;
}
class PointsSizeMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class PointsSizeController extends _BaseController__WEBPACK_IMPORTED_MODULE_1__/* .BaseController */ .x {
  constructor(node) {
    super(node);
    this.node = node;
  }
  static update(node) {
    return __async(this, null, function* () {
      const material = yield node.material();
      if (!isValidMaterial(material)) {
        return;
      }
      node.controllers.pointsSize.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    const pv = this.node.pv;
    material.size = pv.size;
    const previousSizeAttenuation = material.sizeAttenuation;
    const newSizeAttenuation = (0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_2__/* .isBooleanTrue */ .bI)(pv.sizeAttenuation);
    if (previousSizeAttenuation != newSizeAttenuation) {
      material.sizeAttenuation = newSizeAttenuation;
      material.needsUpdate = true;
    }
  }
}


/***/ }),

/***/ 94135:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": function() { return /* binding */ AOMapParamConfig; },
/* harmony export */   "Z": function() { return /* binding */ TextureAOMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function AOMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use an ambient occlusion map */
      this.useAOMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureAOMapController)));
      /** @param specify the AO map COP node */
      this.aoMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureAOMapController, "useAOMap"));
      /** @param ambient occlusion intensity */
      this.aoMapIntensity = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, { range: [0, 1], rangeLocked: [false, false], visibleIf: { useAOMap: 1 } });
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.aoMapIntensity != null;
}
class TextureAOMapParamsConfig extends AOMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureAOMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureAOMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useAOMap, this.node.p.aoMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.aoMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "aoMap", this.node.p.useAOMap, this.node.p.aoMap);
      material.aoMapIntensity = this.node.pv.aoMapIntensity;
    });
  }
  getTextures(material, record) {
    record.set("aoMap", material.aoMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("aoMap");
    this.node.p.useAOMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.aoMap.setNode(mapNode, { relative: true });
    }
    this.node.p.aoMapIntensity.set(material.aoMapIntensity);
  }
}


/***/ }),

/***/ 71607:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": function() { return /* binding */ AlphaMapParamConfig; },
/* harmony export */   "s": function() { return /* binding */ TextureAlphaMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function AlphaMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use an alpha map */
      this.useAlphaMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureAlphaMapController)));
      /** @param specify the alpha map COP node */
      this.alphaMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureAlphaMapController, "useAlphaMap"));
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return true;
}
class TextureAlphaMapParamsConfig extends AlphaMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureAlphaMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureAlphaMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useAlphaMap, this.node.p.alphaMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.alphaMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "alphaMap", this.node.p.useAlphaMap, this.node.p.alphaMap);
    });
  }
  getTextures(material, record) {
    record.set("alphaMap", material.alphaMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("aoMap");
    this.node.p.useAlphaMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.alphaMap.setNode(mapNode, { relative: true });
    }
  }
}


/***/ }),

/***/ 89328:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "T": function() { return /* binding */ TextureBumpMapController; },
/* harmony export */   "w": function() { return /* binding */ BumpMapParamConfig; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function BumpMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a bump map */
      this.useBumpMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureBumpMapController)));
      /** @param specify the bump map COP node */
      this.bumpMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureBumpMapController, "useBumpMap"));
      /** @param bump scale */
      this.bumpScale = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, __spreadValues({
        range: [0, 1],
        rangeLocked: [false, false]
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureBumpMapController, "useBumpMap")));
      /** @param bump bias */
      this.bumpBias = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0, __spreadValues({
        range: [0, 1],
        rangeLocked: [false, false]
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureBumpMapController, "useBumpMap")));
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.bumpScale != null;
}
class TextureBumpMapParamsConfig extends BumpMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureBumpMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureBumpMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useBumpMap, this.node.p.bumpMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.bumpMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "bumpMap", this.node.p.useBumpMap, this.node.p.bumpMap);
      material.bumpScale = this.node.pv.bumpScale;
    });
  }
  getTextures(material, record) {
    record.set("bumpMap", material.bumpMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("emissiveMap");
    this.node.p.useBumpMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.bumpMap.setNode(mapNode, { relative: true });
    }
    this.node.p.bumpScale.set(material.bumpScale);
  }
}


/***/ }),

/***/ 70967:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ DisplacementMapParamConfig; },
/* harmony export */   "u": function() { return /* binding */ TextureDisplacementMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function DisplacementMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a displacement map */
      this.useDisplacementMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureDisplacementMapController)));
      /** @param specify the displacement map COP node */
      this.displacementMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH(
        "",
        (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureDisplacementMapController, "useDisplacementMap")
      );
      /** @param displacement scale */
      this.displacementScale = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, __spreadValues({
        range: [0, 1],
        rangeLocked: [false, false]
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureDisplacementMapController, "useDisplacementMap")));
      /** @param displacement bias */
      this.displacementBias = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(0, __spreadValues({
        range: [0, 1],
        rangeLocked: [false, false]
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureDisplacementMapController, "useDisplacementMap")));
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.displacementScale != null;
}
class TextureDisplacementMapParamsConfig extends DisplacementMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureDisplacementMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureDisplacementMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useDisplacementMap, this.node.p.displacementMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.displacementMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "displacementMap", this.node.p.useDisplacementMap, this.node.p.displacementMap);
      material.displacementScale = this.node.pv.displacementScale;
      material.displacementBias = this.node.pv.displacementBias;
    });
  }
  getTextures(material, record) {
    record.set("displacementMap", material.displacementMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("emissiveMap");
    this.node.p.useDisplacementMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.displacementMap.setNode(mapNode, { relative: true });
    }
    this.node.p.displacementScale.set(material.displacementScale);
    this.node.p.displacementBias.set(material.displacementBias);
  }
}


/***/ }),

/***/ 69228:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "f": function() { return /* binding */ EmissiveMapParamConfig; },
/* harmony export */   "z": function() { return /* binding */ TextureEmissiveMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);
/* harmony import */ var _core_Color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10109);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




function EmissiveMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param emissive color */
      this.emissive = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.COLOR */ .XC.COLOR([0, 0, 0], { separatorBefore: true });
      /** @param toggle if you want to use a emissive map */
      this.useEmissiveMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureEmissiveMapController));
      /** @param specify the emissive map COP node */
      this.emissiveMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureEmissiveMapController, "useEmissiveMap"));
      /** @param emissive intensity */
      this.emissiveIntensity = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1);
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.emissive != null;
}
class TextureEmissiveMapParamsConfig extends EmissiveMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureEmissiveMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
const tmpN3 = [0, 0, 0];
class TextureEmissiveMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useEmissiveMap, this.node.p.emissiveMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.emissiveMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "emissiveMap", this.node.p.useEmissiveMap, this.node.p.emissiveMap);
      material.emissive.copy(this.node.pv.emissive);
      material.emissiveIntensity = this.node.pv.emissiveIntensity;
    });
  }
  getTextures(material, record) {
    record.set("emissiveMap", material.emissiveMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("emissiveMap");
    this.node.p.useEmissiveMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.emissiveMap.setNode(mapNode, { relative: true });
    }
    material.emissive.toArray(tmpN3);
    this.node.p.emissive.set(tmpN3);
    this.node.p.emissive.setConversion(_core_Color__WEBPACK_IMPORTED_MODULE_2__/* .ColorConversion.NONE */ .Yx.NONE);
    this.node.p.emissiveIntensity.set(material.emissiveIntensity);
  }
}


/***/ }),

/***/ 5481:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_v": function() { return /* binding */ isValidEnvMapMaterial; },
/* harmony export */   "nz": function() { return /* binding */ TextureEnvMapController; },
/* harmony export */   "s7": function() { return /* binding */ EnvMapParamConfig; }
/* harmony export */ });
/* unused harmony export ENV_MAP_OPERATION_DEFAULT_PARAMS */
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96949);
/* harmony import */ var _core_Walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(742);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




const ENV_MAP_OPERATION_DEFAULT_PARAMS = {
  useEnvMap: false,
  envMap: new _core_Walker__WEBPACK_IMPORTED_MODULE_0__/* .TypedNodePathParamValue */ .jI(""),
  envMapIntensity: 1
};
const DEFAULT_PARAMS = ENV_MAP_OPERATION_DEFAULT_PARAMS;
function EnvMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use an environment map */
      this.useEnvMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(DEFAULT_PARAMS.useEnvMap, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BooleanParamOptions */ .wF)(TextureEnvMapController)));
      /** @param specify the environment map COP node */
      this.envMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .NodePathOptions */ .C9)(TextureEnvMapController, "useEnvMap"));
      /** @param environment intensity */
      this.envMapIntensity = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.FLOAT */ .XC.FLOAT(DEFAULT_PARAMS.envMapIntensity, { visibleIf: { useEnvMap: 1 } });
    }
  };
}
function isValidEnvMapMaterial(material) {
  if (!material) {
    return false;
  }
  return material.isMeshStandardMaterial || material.isMeshPhysicalMaterial;
}
class TextureEnvMapParamsConfig extends EnvMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .NodeParamsConfig */ .yI) {
}
class TextureEnvMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureEnvMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useEnvMap, this.node.p.envMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.envMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!isValidEnvMapMaterial(material)) {
        return;
      }
      this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "envMap", this.node.p.useEnvMap, this.node.p.envMap);
      material.envMapIntensity = this.node.pv.envMapIntensity;
    });
  }
  getTextures(material, record) {
    record.set("envMap", material.envMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("envMap");
    this.node.p.useEnvMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.envMap.setNode(mapNode, { relative: true });
    }
    this.node.p.envMapIntensity.set(material.envMapIntensity);
  }
}


/***/ }),

/***/ 97564:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "R": function() { return /* binding */ EnvMapSimpleParamConfig; },
/* harmony export */   "z": function() { return /* binding */ TextureEnvMapSimpleController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96949);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21410);
/* harmony import */ var _poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12764);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





var CombineOperation = /* @__PURE__ */ ((CombineOperation2) => {
  CombineOperation2["MULT"] = "mult";
  CombineOperation2["ADD"] = "add";
  CombineOperation2["MIX"] = "mix";
  return CombineOperation2;
})(CombineOperation || {});
const COMBINE_OPERATIONS = ["mult" /* MULT */, "add" /* ADD */, "mix" /* MIX */];
const OperationByName = {
  ["mult" /* MULT */]: three__WEBPACK_IMPORTED_MODULE_0__.MultiplyOperation,
  ["add" /* ADD */]: three__WEBPACK_IMPORTED_MODULE_0__.AddOperation,
  ["mix" /* MIX */]: three__WEBPACK_IMPORTED_MODULE_0__.MixOperation
};
const NameByOperation = {
  [three__WEBPACK_IMPORTED_MODULE_0__.MultiplyOperation]: "mult" /* MULT */,
  [three__WEBPACK_IMPORTED_MODULE_0__.AddOperation]: "add" /* ADD */,
  [three__WEBPACK_IMPORTED_MODULE_0__.MixOperation]: "mix" /* MIX */
};
function EnvMapSimpleParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use an environment map */
      this.useEnvMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BooleanParamOptions */ .wF)(TextureEnvMapSimpleController)));
      /** @param specify the environment map COP node. Note that this only works with CubeCamera */
      this.envMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH(
        "",
        (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .NodePathOptions */ .C9)(TextureEnvMapSimpleController, "useEnvMap", {
          types: [_poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__/* .CopType.CUBE_MAP */ .y.CUBE_MAP, _poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__/* .CopType.CUBE_MAP_FROM_SCENE */ .y.CUBE_MAP_FROM_SCENE, _poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__/* .CopType.CUBE_CAMERA */ .y.CUBE_CAMERA]
        })
      );
      /** @param defines how the env map is combined with the color */
      this.combine = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.INTEGER */ .XC.INTEGER(0, {
        visibleIf: { useEnvMap: 1 },
        menu: {
          entries: COMBINE_OPERATIONS.map((name, value) => {
            return { name, value };
          })
        }
      });
      /** @param environment intensity */
      this.reflectivity = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, { visibleIf: { useEnvMap: 1 } });
      /** @param refraction ratio */
      this.refractionRatio = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.FLOAT */ .XC.FLOAT(0.98, {
        range: [-1, 1],
        rangeLocked: [false, false],
        visibleIf: { useEnvMap: 1 }
      });
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.reflectivity != null;
}
class TextureEnvMapSimpleParamsConfig extends EnvMapSimpleParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .NodeParamsConfig */ .yI) {
}
class TextureEnvMapSimpleMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureEnvMapSimpleController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useEnvMap, this.node.p.envMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.envMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "envMap", this.node.p.useEnvMap, this.node.p.envMap);
      const combine = OperationByName[COMBINE_OPERATIONS[this.node.pv.combine]];
      material.combine = combine;
      material.reflectivity = this.node.pv.reflectivity;
      material.refractionRatio = this.node.pv.refractionRatio;
    });
  }
  getTextures(material, record) {
    record.set("envMap", material.envMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("envMap");
    this.node.p.useEnvMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.envMap.setNode(mapNode, { relative: true });
    }
    this.node.p.combine.set(COMBINE_OPERATIONS.indexOf(NameByOperation[material.combine]));
    this.node.p.reflectivity.set(material.reflectivity);
    this.node.p.refractionRatio.set(material.refractionRatio);
  }
}


/***/ }),

/***/ 69602:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "P": function() { return /* binding */ GradientMapParamConfig; },
/* harmony export */   "o": function() { return /* binding */ TextureGradientMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function GradientMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a gradient map */
      this.useGradientMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadProps(__spreadValues({}, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureGradientMapController)), {
        separatorBefore: true
      }));
      /** Gradient map for toon shading. It's required to set Texture.minFilter and Texture.magFilter to THREE.NearestFilter when using this type of texture */
      this.gradientMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureGradientMapController, "useGradientMap"));
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return true;
}
class TextureGradientMapParamsConfig extends GradientMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureGradientMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureGradientMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useGradientMap, this.node.p.gradientMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.gradientMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "gradientMap", this.node.p.useGradientMap, this.node.p.gradientMap);
    });
  }
  getTextures(material, record) {
    record.set("gradientMap", material.gradientMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("gradientMap");
    this.node.p.useGradientMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.gradientMap.setNode(mapNode, { relative: true });
    }
  }
}


/***/ }),

/***/ 28985:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": function() { return /* binding */ TextureLightMapController; },
/* harmony export */   "T": function() { return /* binding */ LightMapParamConfig; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function LightMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a light map */
      this.useLightMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureLightMapController)));
      /** @param specify the light map COP node */
      this.lightMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureLightMapController, "useLightMap"));
      /** @param light. When set to 0, reflections from environment maps will be very sharp, or blurred when 1. Any value between 0 and 1 can help modulate this. */
      this.lightMapIntensity = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, {
        visibleIf: { useLightMap: 1 }
      });
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.lightMapIntensity != null;
}
class TextureLightMapParamsConfig extends LightMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureLightMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureLightMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useLightMap, this.node.p.lightMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.lightMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "lightMap", this.node.p.useLightMap, this.node.p.lightMap);
      material.lightMapIntensity = this.node.pv.lightMapIntensity;
    });
  }
  getTextures(material, record) {
    record.set("lightMap", material.lightMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("lightMap");
    this.node.p.useLightMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.lightMap.setNode(mapNode, { relative: true });
    }
    this.node.p.lightMapIntensity.set(material.lightMapIntensity);
  }
}


/***/ }),

/***/ 87732:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "D": function() { return /* binding */ MapParamConfig; },
/* harmony export */   "g": function() { return /* binding */ TextureMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function MapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle on to use a map affecting color */
      this.useMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadProps(__spreadValues({}, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureMapController)), {
        separatorBefore: true
      }));
      /** @param texture map affecting color */
      this.map = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureMapController, "useMap"));
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return true;
}
class TextureMapParamsConfig extends MapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useMap, this.node.p.map);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.map.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        console.warn("invalid mat for TextureMapController", material);
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "map", this.node.p.useMap, this.node.p.map);
    });
  }
  getTextures(material, record) {
    record.set("map", material.map);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("map");
    this.node.p.useMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.map.setNode(mapNode, { relative: true });
    }
  }
}


/***/ }),

/***/ 94440:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ae": function() { return /* binding */ TextureMetalnessRoughnessMapController; },
/* harmony export */   "EO": function() { return /* binding */ MetalnessRoughnessMapParamConfig; }
/* harmony export */ });
/* unused harmony export METALNESS_ROUGHNESS_OPERATION_DEFAULT_PARAMS */
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96949);
/* harmony import */ var _core_Walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(742);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




const METALNESS_ROUGHNESS_OPERATION_DEFAULT_PARAMS = {
  useMetalnessMap: false,
  metalnessMap: new _core_Walker__WEBPACK_IMPORTED_MODULE_0__/* .TypedNodePathParamValue */ .jI(""),
  metalness: 0,
  useRoughnessMap: false,
  roughnessMap: new _core_Walker__WEBPACK_IMPORTED_MODULE_0__/* .TypedNodePathParamValue */ .jI(""),
  roughness: 1
};
const DEFAULT_PARAMS = METALNESS_ROUGHNESS_OPERATION_DEFAULT_PARAMS;
function MetalnessRoughnessMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a metalness map */
      this.useMetalnessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(DEFAULT_PARAMS.useMetalnessMap, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BooleanParamOptions */ .wF)(TextureMetalnessRoughnessMapController)));
      /** @param specify the metalness map COP node */
      this.metalnessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH(
        "",
        (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .NodePathOptions */ .C9)(TextureMetalnessRoughnessMapController, "useMetalnessMap")
      );
      /** @param metalness. It's recommended to either set this value to 0 or to 1, as objects are either metallic or not. Any value in between tends to look like an alien plastic */
      this.metalness = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.FLOAT */ .XC.FLOAT(DEFAULT_PARAMS.metalness);
      // a default of 0 is good to non builder materials, but 1 should be better for builders, in case metalness is multiplied with this param from its child output node
      /** @param toggle if you want to use a roughness map */
      this.useRoughnessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(DEFAULT_PARAMS.useRoughnessMap, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BooleanParamOptions */ .wF)(TextureMetalnessRoughnessMapController)));
      /** @param specify the roughness map COP node */
      this.roughnessMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH(
        "",
        (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .NodePathOptions */ .C9)(TextureMetalnessRoughnessMapController, "useRoughnessMap")
      );
      /** @param roughness. When set to 0, reflections from environment maps will be very sharp, or blurred when 1. Any value between 0 and 1 can help modulate this. */
      this.roughness = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.FLOAT */ .XC.FLOAT(DEFAULT_PARAMS.roughness);
    }
  };
}
function _isValidMaterial(material) {
  if (!material) {
    return false;
  }
  return material.metalness != null;
}
class TextureMetalnessMapParamsConfig extends MetalnessRoughnessMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .NodeParamsConfig */ .yI) {
}
class TextureMetalnessMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class TextureMetalnessRoughnessMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useMetalnessMap, this.node.p.metalnessMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.metalnessRoughnessMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!_isValidMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      material.metalness = this.node.pv.metalness;
      material.roughness = this.node.pv.roughness;
      yield Promise.all([
        this._update(material, "metalnessMap", this.node.p.useMetalnessMap, this.node.p.metalnessMap),
        this._update(material, "roughnessMap", this.node.p.useRoughnessMap, this.node.p.roughnessMap)
      ]);
    });
  }
  getTextures(material, record) {
    record.set("metalnessMap", material.metalnessMap);
    record.set("roughnessMap", material.roughnessMap);
  }
  setParamsFromMaterial(material, record) {
    const metalnessMapNode = record.get("metalnessMap");
    const roughnessMapNode = record.get("roughnessMap");
    this.node.p.useMetalnessMap.set(metalnessMapNode != null);
    this.node.p.useRoughnessMap.set(roughnessMapNode != null);
    if (metalnessMapNode) {
      this.node.p.metalnessMap.setNode(metalnessMapNode, { relative: true });
    }
    if (roughnessMapNode) {
      this.node.p.roughnessMap.setNode(roughnessMapNode, { relative: true });
    }
    this.node.p.metalness.set(material.metalness);
    this.node.p.roughness.set(material.roughness);
  }
}


/***/ }),

/***/ 19767:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": function() { return /* binding */ NormalMapParamConfig; },
/* harmony export */   "w": function() { return /* binding */ TextureNormalMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(96949);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21410);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




var NormalMapMode = /* @__PURE__ */ ((NormalMapMode2) => {
  NormalMapMode2["TANGENT"] = "tangent";
  NormalMapMode2["OBJECT"] = "object";
  return NormalMapMode2;
})(NormalMapMode || {});
const NORMAL_MAP_MODES = ["tangent" /* TANGENT */, "object" /* OBJECT */];
const NormalMapModeByName = {
  ["tangent" /* TANGENT */]: three__WEBPACK_IMPORTED_MODULE_0__.TangentSpaceNormalMap,
  ["object" /* OBJECT */]: three__WEBPACK_IMPORTED_MODULE_0__.ObjectSpaceNormalMap
};
const NormalNameByMode = {
  [three__WEBPACK_IMPORTED_MODULE_0__.TangentSpaceNormalMap]: "tangent" /* TANGENT */,
  [three__WEBPACK_IMPORTED_MODULE_0__.ObjectSpaceNormalMap]: "object" /* OBJECT */
};
function NormalMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a normal map */
      this.useNormalMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, __spreadValues({
        separatorBefore: true
      }, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BooleanParamOptions */ .wF)(TextureNormalMapController)));
      /** @param specify the normal map COP node */
      this.normalMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .NodePathOptions */ .C9)(TextureNormalMapController, "useNormalMap"));
      /** @param type of normal map being used */
      this.normalMapType = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.INTEGER */ .XC.INTEGER(0, {
        visibleIf: { useNormalMap: 1 },
        menu: {
          entries: NORMAL_MAP_MODES.map((name, value) => {
            return { name, value };
          })
        }
      });
      /** @param How much the normal map affects the material. Typical ranges are 0-1 */
      this.normalScale = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.VECTOR2 */ .XC.VECTOR2([1, 1], { visibleIf: { useNormalMap: 1 } });
      /** @param Normal Map Scale Multiplier, which multiples normalScale */
      this.normalScaleMult = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, {
        range: [0, 1],
        rangeLocked: [false, false],
        visibleIf: { useNormalMap: 1 }
      });
    }
  };
}
function isTextureNormalMapMaterial(material) {
  if (!material) {
    return false;
  }
  return material.normalScale != null;
}
class TextureNormalMapParamsConfig extends NormalMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_1__/* .NodeParamsConfig */ .yI) {
}
class TextureNormalMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
const tmpN2 = [0, 0];
class TextureNormalMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_2__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useNormalMap, this.node.p.normalMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.normalMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!isTextureNormalMapMaterial(material)) {
        return;
      }
      yield this.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      const { p, pv } = this.node;
      yield this._update(material, "normalMap", p.useNormalMap, p.normalMap);
      const normalMapType = NormalMapModeByName[NORMAL_MAP_MODES[pv.normalMapType]];
      const mat = material;
      mat.normalMapType = normalMapType;
      mat.normalScale.copy(pv.normalScale).multiplyScalar(pv.normalScaleMult);
    });
  }
  getTextures(material, record) {
    record.set("normalMap", material.normalMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("normalMap");
    const p = this.node.p;
    p.useNormalMap.set(mapNode != null);
    if (mapNode) {
      p.normalMap.setNode(mapNode, { relative: true });
    }
    material.normalScale.toArray(tmpN2);
    p.normalScale.set(tmpN2);
    p.normalMapType.set(NORMAL_MAP_MODES.indexOf(NormalNameByMode[material.normalMapType]));
  }
}


/***/ }),

/***/ 36725:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "E": function() { return /* binding */ SpecularMapParamConfig; },
/* harmony export */   "M": function() { return /* binding */ TextureSpecularMapController; }
/* harmony export */ });
/* harmony import */ var _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68342);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



function SpecularMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle if you want to use a specular map */
      this.useSpecularMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BooleanParamOptions */ .wF)(TextureSpecularMapController));
      /** @param specify the specular map COP node */
      this.specularMap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", (0,_BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .NodePathOptions */ .C9)(TextureSpecularMapController, "useSpecularMap"));
    }
  };
}
function isTextureSpecularMapMaterial(material) {
  if (!material) {
    return false;
  }
  return material.isMeshPhongMaterial != null;
}
class TextureSpecularMapParamsConfig extends SpecularMapParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class TextureSpecularMapMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  // abstract override createMaterial(): TextureSpecularMapControllerCurrentMaterial;
}
class TextureSpecularMapController extends _BaseTextureController__WEBPACK_IMPORTED_MODULE_1__/* .BaseTextureMapController */ .oU {
  constructor(node) {
    super(node);
    this.node = node;
  }
  initializeNode() {
    this.add_hooks(this.node.p.useSpecularMap, this.node.p.specularMap);
  }
  static update(node) {
    return __async(this, null, function* () {
      node.controllers.specularMap.update();
    });
  }
  update() {
    return __async(this, null, function* () {
      const material = yield this.node.material();
      if (!isTextureSpecularMapMaterial(material)) {
        return;
      }
      this.node.controllers.specularMap.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    return __async(this, null, function* () {
      yield this._update(material, "specularMap", this.node.p.useSpecularMap, this.node.p.specularMap);
    });
  }
  getTextures(material, record) {
    record.set("specularMap", material.specularMap);
  }
  setParamsFromMaterial(material, record) {
    const mapNode = record.get("specularMap");
    this.node.p.useSpecularMap.set(mapNode != null);
    if (mapNode) {
      this.node.p.specularMap.setNode(mapNode, { relative: true });
    }
  }
}


/***/ }),

/***/ 58206:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "M": function() { return /* binding */ WireframeParamConfig; },
/* harmony export */   "U": function() { return /* binding */ WireframeController; }
/* harmony export */ });
/* harmony import */ var _BaseController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4418);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);
/* harmony import */ var _core_BooleanValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19037);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




var LineCapType = /* @__PURE__ */ ((LineCapType2) => {
  LineCapType2["ROUND"] = "round";
  LineCapType2["BUTT"] = "butt";
  LineCapType2["SQUARE"] = "square";
  return LineCapType2;
})(LineCapType || {});
const LINE_CAP_TYPES = ["round" /* ROUND */, "butt" /* BUTT */, "square" /* SQUARE */];
var LineJoinType = /* @__PURE__ */ ((LineJoinType2) => {
  LineJoinType2["ROUND"] = "round";
  LineJoinType2["BEVEL"] = "bevel";
  LineJoinType2["MITER"] = "miter";
  return LineJoinType2;
})(LineJoinType || {});
const LINE_JOIN_TYPES = ["round" /* ROUND */, "bevel" /* BEVEL */, "miter" /* MITER */];
function WireframeParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle on to set material to wireframe */
      this.wireframe = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0, { separatorBefore: true });
      /** @param wireframe line width */
      this.wireframeLinewidth = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FLOAT */ .XC.FLOAT(1, {
        range: [0, 5],
        rangeLocked: [true, false],
        visibleIf: { wireframe: 1 }
      });
      /** @param define appearance of line ends */
      this.wireframeLinecap = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.INTEGER */ .XC.INTEGER(0, {
        menu: {
          entries: LINE_CAP_TYPES.map((name, value) => {
            return { name, value };
          })
        },
        visibleIf: { wireframe: 1 }
      });
      /** @param Define appearance of line joints */
      this.wireframeLinejoin = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.INTEGER */ .XC.INTEGER(0, {
        menu: {
          entries: LINE_JOIN_TYPES.map((name, value) => {
            return { name, value };
          })
        },
        visibleIf: { wireframe: 1 },
        separatorAfter: true
      });
    }
  };
}
function isValidWireframeMaterial(material) {
  if (!material) {
    return false;
  }
  return material.wireframe != null;
}
class WireframeParamsConfig extends WireframeParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
class WireframedMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
  material() {
    return __async(this, null, function* () {
      const container = yield this.compute();
      return container.material();
    });
  }
}
class WireframeController extends _BaseController__WEBPACK_IMPORTED_MODULE_1__/* .BaseController */ .x {
  constructor(node) {
    super(node);
    this.node = node;
  }
  static update(node) {
    return __async(this, null, function* () {
      const material = yield node.material();
      if (!isValidWireframeMaterial(material)) {
        return;
      }
      node.controllers.wireframe.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    const pv = this.node.pv;
    material.wireframe = (0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_2__/* .isBooleanTrue */ .bI)(pv.wireframe);
    material.wireframeLinewidth = pv.wireframeLinewidth;
    material.wireframeLinecap = LINE_CAP_TYPES[pv.wireframeLinecap];
    material.wireframeLinejoin = LINE_JOIN_TYPES[pv.wireframeLinejoin];
    material.needsUpdate = true;
  }
  getTextures(material, record) {
  }
  setParamsFromMaterial(material, record) {
    this.node.p.wireframe.set(material.wireframe);
    this.node.p.wireframeLinewidth.set(material.wireframeLinewidth);
    this.node.p.wireframeLinecap.set(LINE_CAP_TYPES.indexOf(material.wireframeLinecap));
    this.node.p.wireframeLinejoin.set(LINE_JOIN_TYPES.indexOf(material.wireframeLinejoin));
  }
}


/***/ }),

/***/ 68342:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "C9": function() { return /* binding */ NodePathOptions; },
/* harmony export */   "oU": function() { return /* binding */ BaseTextureMapController; },
/* harmony export */   "wF": function() { return /* binding */ BooleanParamOptions; }
/* harmony export */ });
/* unused harmony export TextureMapParamConfig */
/* harmony import */ var _BaseController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4418);
/* harmony import */ var _poly_NodeContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52070);
/* harmony import */ var _Poly__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(99934);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




function TextureMapParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.useMap = ParamConfig.BOOLEAN(0);
      this.map = ParamConfig.NODE_PATH("", { visibleIf: { useMap: 1 } });
    }
  };
}
function BooleanParamOptions(controller_class) {
  return {
    cook: false,
    callback: (node, param) => {
      controller_class.update(node);
    }
  };
}
function NodePathOptions(controller, use_map_name, options) {
  return {
    visibleIf: { [use_map_name]: 1 },
    nodeSelection: { context: _poly_NodeContext__WEBPACK_IMPORTED_MODULE_0__/* .NodeContext.COP */ .sy.COP, types: options == null ? void 0 : options.types },
    cook: false,
    callback: (node, param) => {
      controller.update(node);
    }
  };
}
const CALLBACK_NAME = "TextureController";
class BaseTextureMapController extends _BaseController__WEBPACK_IMPORTED_MODULE_1__/* .BaseController */ .x {
  constructor(node) {
    super(node);
    this.node = node;
    this.updateBound = this.update.bind(this);
  }
  add_hooks(use_map_param, path_param) {
    use_map_param.addPostDirtyHook(CALLBACK_NAME, this.updateBound);
    path_param.addPostDirtyHook(CALLBACK_NAME, this.updateBound);
  }
  static update(node) {
    return __async(this, null, function* () {
    });
  }
  update() {
    return __async(this, null, function* () {
    });
  }
  _update(material, mat_attrib_name, use_map_param, path_param) {
    return __async(this, null, function* () {
      const mat = material;
      const attr_name = mat_attrib_name;
      yield this._update_texture_on_material(mat, attr_name, use_map_param, path_param);
    });
  }
  //
  //
  // FOR CASES WHERE THE TEXTURE IS ON THE MATERIAL
  //
  //
  _update_texture_on_material(material, mat_attrib_name, use_map_param, path_param) {
    return __async(this, null, function* () {
      yield this._update_required_attribute(
        material,
        material,
        mat_attrib_name,
        use_map_param,
        path_param,
        this._apply_texture_on_material.bind(this),
        this._remove_texture_from_material.bind(this)
      );
    });
  }
  _apply_texture_on_material(material, texture_owner, mat_attrib_name, newTexture) {
    const currentTexture = texture_owner[mat_attrib_name];
    let textureChangeRequired = false;
    if (currentTexture) {
      if (currentTexture.uuid != newTexture.uuid) {
        textureChangeRequired = true;
      }
    }
    if (currentTexture == null || textureChangeRequired) {
      texture_owner[mat_attrib_name] = newTexture;
      material.needsUpdate = true;
    }
    _Poly__WEBPACK_IMPORTED_MODULE_2__/* .Poly.onSceneUpdatedHooks.runHooks */ .L.onSceneUpdatedHooks.runHooks();
  }
  _remove_texture_from_material(material, texture_owner, mat_attrib_name) {
    if (texture_owner[mat_attrib_name]) {
      texture_owner[mat_attrib_name] = null;
      material.needsUpdate = true;
    }
    _Poly__WEBPACK_IMPORTED_MODULE_2__/* .Poly.onSceneUpdatedHooks.runHooks */ .L.onSceneUpdatedHooks.runHooks();
  }
  //
  //
  // MAIN ALGO to decide if texture should be updated
  //
  //
  _update_required_attribute(material, texture_owner, mat_attrib_name, use_map_param, path_param, update_callback, remove_callback) {
    return __async(this, null, function* () {
      if (use_map_param.isDirty()) {
        yield use_map_param.compute();
      }
      const use_map = use_map_param.value;
      if (use_map) {
        if (path_param.isDirty()) {
          yield path_param.compute();
        }
        const texture_node = path_param.value.nodeWithContext(_poly_NodeContext__WEBPACK_IMPORTED_MODULE_0__/* .NodeContext.COP */ .sy.COP);
        if (texture_node) {
          const container = yield texture_node.compute();
          const texture = container.texture();
          if (texture) {
            yield update_callback(material, texture_owner, mat_attrib_name, texture);
            return;
          }
        }
      }
      remove_callback(material, texture_owner, mat_attrib_name);
    });
  }
}


/***/ }),

/***/ 41545:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "M": function() { return /* binding */ MatType; }
/* harmony export */ });

var MatType = /* @__PURE__ */ ((MatType2) => {
  MatType2["LINE_BASIC"] = "lineBasic";
  MatType2["LINE_BASIC_BUILDER"] = "lineBasicBuilder";
  MatType2["MESH_BASIC"] = "meshBasic";
  MatType2["MESH_BASIC_BUILDER"] = "meshBasicBuilder";
  MatType2["MESH_DEPTH_BUILDER"] = "meshDepthBuilder";
  MatType2["MESH_DISTANCE_BUILDER"] = "meshDistanceBuilder";
  MatType2["MESH_LAMBERT"] = "meshLambert";
  MatType2["MESH_LAMBERT_BUILDER"] = "meshLambertBuilder";
  MatType2["MESH_MATCAP"] = "meshMatcap";
  MatType2["MESH_NORMAL"] = "meshNormal";
  MatType2["MESH_PHONG"] = "meshPhong";
  MatType2["MESH_PHONG_BUILDER"] = "meshPhongBuilder";
  MatType2["MESH_PHYSICAL"] = "meshPhysical";
  MatType2["MESH_PHYSICAL_BUILDER"] = "meshPhysicalBuilder";
  MatType2["MESH_STANDARD"] = "meshStandard";
  MatType2["MESH_STANDARD_BUILDER"] = "meshStandardBuilder";
  MatType2["MESH_TOON"] = "meshToon";
  MatType2["MESH_TOON_BUILDER"] = "meshToonBuilder";
  MatType2["POINTS"] = "points";
  MatType2["POINTS_BUILDER"] = "pointsBuilder";
  MatType2["RAY_MARCHING_BUILDER"] = "rayMarchingBuilder";
  MatType2["SHADOW"] = "shadow";
  MatType2["SKY"] = "sky";
  MatType2["VOLUME"] = "volume";
  MatType2["VOLUME_BUILDER"] = "volumeBuilder";
  return MatType2;
})(MatType || {});


/***/ })

}])
//# sourceMappingURL=_polygonjs_polygonjs_src_engine_nodes_mat_LineBasic_ts-_polygonjs_polygonjs_src_engine_nodes_-af07fa.4618d06f61d54b5b8e7a.js.map