(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_DataUrl_ts"],{

/***/ 62841:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_attribRename1(geo12) {
      var attribRename1 = geo12.createNode("attribRename");
      attribRename1.setName("attribRename1");
      const attribRename1_nodes = {};
      attribRename1.uiData.setComment(
        'the "scale" attribute from the .json fetched by the dataUrl node is just a single number. But polygonjs in order to scale the input geometry, polygonjs either expected a "scale" as a vector3 (which is 3 numbers, for x,y and z), or "pscale", which is 1 number. So in this case, we rename scale to pscale.'
      );
      attribRename1.uiData.setPosition(-300, 50);
      attribRename1.p.oldName.set("scale");
      attribRename1.p.newName.set("pscale");
      attribRename1.params.postCreateSpareParams();
      attribRename1.params.runOnSceneLoadHooks();
      return { node: attribRename1, children: attribRename1_nodes };
    }
    function create_copy1(geo12) {
      var copy1 = geo12.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setPosition(-450, 200);
      copy1.flags.display.set(true);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_dataUrl1(geo12) {
      var dataUrl1 = geo12.createNode("dataUrl");
      dataUrl1.setName("dataUrl1");
      const dataUrl1_nodes = {};
      dataUrl1.uiData.setPosition(-300, -50);
      dataUrl1.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/nodes/sop/DataUrl/basicWithPosition.json"
      );
      dataUrl1.p.readAttribNamesFromFile.set(false);
      dataUrl1.params.postCreateSpareParams();
      dataUrl1.params.runOnSceneLoadHooks();
      return { node: dataUrl1, children: dataUrl1_nodes };
    }
    function create_sphere1(geo12) {
      var sphere1 = geo12.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(-550, -50);
      sphere1.p.radius.set(0.17);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    geo1_nodes["attribRename1"] = create_attribRename1(geo1);
    geo1_nodes["copy1"] = create_copy1(geo1);
    geo1_nodes["dataUrl1"] = create_dataUrl1(geo1);
    geo1_nodes["sphere1"] = create_sphere1(geo1);
    geo1_nodes["attribRename1"].node.setInput(0, geo1_nodes["dataUrl1"].node);
    geo1_nodes["copy1"].node.setInput(0, geo1_nodes["sphere1"].node);
    geo1_nodes["copy1"].node.setInput(1, geo1_nodes["attribRename1"].node);
    geo1.uiData.setPosition(-50, -150);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.19481413645251316, -0.3632623540938973, 0.026343369935729433]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([3.3515089795469395, 2.238496194729893, 1.05494065232559]);
    perspectiveCamera12.p.r.set([-68.42878677264257, 51.72997319630067, 63.27190169100017]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera12, children: perspectiveCamera1_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  const perspectiveCamera1 = scene_root_nodes["perspectiveCamera1"].node;
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [scene_root_nodes["geo1"].children["dataUrl1"].node],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_DataUrl_ts.edfb634f04321092fb1c.js.map