{"version":3,"file":"src_engine_examples_examples_sop_Instance_ts.ad9dcd7d9c959de35205.js","mappings":";;;;;;;;;AAYO,SAAS,yCAAyC,MAAuB;AAE/E,QAAM,qBAAqB,KAAK,WAAW,mBAAmB;AAC9D,qBAAmB,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAEpC,QAAM,UAAU,mBAAmB,WAAW,eAAe;AAC7D,QAAM,iBAAiB,QAAQ,WAAW,qBAAqB;AAC/D,qBAAmB,EAAE,SAAS,QAAQ,cAAc;AAEpD,SAAO,EAAC,mBAAkB;AAC3B;;;;;;;;;;;;;;;ACtB0B;AAE6B;AAEhD,SAAS,WAAW,SAA2C;AACrE,QAAM,EAAC,MAAK,IAAI;AAChB,QAAM,OAAO,MAAM,KAAK;AACxB,QAAM,MAAM,KAAK,WAAW,KAAK;AAGjC,QAAM,OAAO,IAAI,WAAW,SAAS;AACrC,OAAK,EAAE,IAAI,IAAI,GAAG,kGAAW,qBAAqB;AAGlD,QAAM,YAAY,IAAI,WAAW,WAAW;AAC5C,YAAU,SAAS,GAAG,IAAI;AAC1B,YAAU,EAAE,KAAK,IAAI,CAAC;AAGtB,QAAM,YAAY,IAAI,WAAW,WAAW;AAC5C,YAAU,SAAS,GAAG,SAAS;AAC/B,YAAU,EAAE,MAAM,IAAI,IAAI;AAC1B,YAAU,EAAE,EAAE,EAAE,IAAI,EAAE;AAGtB,QAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,QAAM,UAAU,IAAI,WAAW,SAAS;AACxC,UAAQ,SAAS,GAAG,MAAM;AAC1B,UAAQ,EAAE,YAAY,IAAI,GAAI;AAG9B,QAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,SAAO,SAAS,GAAG,OAAO;AAG1B,QAAM,WAAW,IAAI,WAAW,UAAU;AAC1C,WAAS,SAAS,GAAG,SAAS;AAC9B,WAAS,SAAS,GAAG,MAAM;AAC3B,WAAS,MAAM,QAAQ,IAAI,IAAI;AAI/B,QAAM,MAAM,KAAK,WAAW,kBAAkB;AAC9C,MAAI,QAAQ,KAAK;AACjB,QAAM,WAAW,IAAI,WAAW,oBAAoB;AACpD,QAAM,SAAS,SAAS,WAAW,QAAQ;AAE3C,QAAM,oBAAoB,SAAS,WAAW,mBAAmB;AACjE,SAAO,SAAS,YAAY,mBAAmB,UAAU;AACzD,SAAO,SAAS,UAAU,mBAAmB,QAAQ;AACrD,WAAS,EAAE,SAAS,QAAQ,QAAQ;AAEpC,WAAS,OAAO;AAAA,IACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOD;AAGA,OAAK,WAAW,iBAAiB;AAEjC,QAAM,EAAC,mBAAkB,IAAI,gGAAwC,CAAC,IAAI;AAE1E,SAAO;AAAA,IACN;AAAA,IACA,YAAY,mBAAmB,KAAK;AAAA,IACpC,cAAc,CAAC,QAAQ;AAAA,IACvB,YAAY;AAAA,EACb;AACD","sources":["webpack:///../src/engine/examples/ExampleUtils.ts","webpack:///../src/engine/examples/examples/sop/Instance.ts"],"sourcesContent":["import type {BaseNodeType} from './../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\nimport type {RootManagerNode} from './../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\n// import {PolyScene} from './../../../@polygonjs/polygonjs/src/engine/scene/PolyScene';\n// export function initDefaultScene(scene: PolyScene) {\n// \tconst root = scene.root();\n\n// \t// create a box and a sphere\n// \tconst geo = root.createNode('geo');\n\n// \treturn {scene, root, geo};\n// }\n\nexport function addPerspectiveCameraOBJWithOrbitControls(root: RootManagerNode) {\n\t// create a camera\n\tconst perspectiveCamera1 = root.createNode('perspectiveCamera');\n\tperspectiveCamera1.p.t.set([5, 5, 5]);\n\t// add orbitControls\n\tconst events1 = perspectiveCamera1.createNode('eventsNetwork');\n\tconst orbitsControls = events1.createNode('cameraOrbitControls');\n\tperspectiveCamera1.p.controls.setNode(orbitsControls);\n\n\treturn {perspectiveCamera1};\n}\n\ninterface ReturnedNodeData {\n\tnode: BaseNodeType;\n\tchildren: Record<string, ReturnedNodeData>;\n}\nexport type ReturnedNodeDataDict = Record<string, ReturnedNodeData>;\n","import {ASSETS_ROOT} from './../../../../../@polygonjs/polygonjs/src/core/loader/AssetsUtils';\nimport type {ExampleData, DataCallbackOptions} from '../../Common';\nimport {addPerspectiveCameraOBJWithOrbitControls} from '../../ExampleUtils';\n\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst geo = root.createNode('geo');\n\n\t// import dolphin geo\n\tconst file = geo.createNode('fileOBJ');\n\tfile.p.url.set(`${ASSETS_ROOT}/models/dolphin.obj`);\n\n\t// hierarchy to remove the parent and only keep the object with a geometry\n\tconst hierarchy = geo.createNode('hierarchy');\n\thierarchy.setInput(0, file);\n\thierarchy.p.mode.set(1);\n\n\t// scale and rotate the dolphin\n\tconst transform = geo.createNode('transform');\n\ttransform.setInput(0, hierarchy);\n\ttransform.p.scale.set(0.05);\n\ttransform.p.r.y.set(90);\n\n\t// create a sphere to instanciate the dolphins onto\n\tconst sphere = geo.createNode('sphere');\n\tconst scatter = geo.createNode('scatter');\n\tscatter.setInput(0, sphere);\n\tscatter.p.pointsCount.set(5000);\n\n\t// add some jitter\n\tconst jitter = geo.createNode('jitter');\n\tjitter.setInput(0, scatter);\n\n\t// create the instance node\n\tconst instance = geo.createNode('instance');\n\tinstance.setInput(0, transform);\n\tinstance.setInput(1, jitter);\n\tinstance.flags.display.set(true);\n\n\t// create a material to render the instance.\n\t// We only have to extend the existing materials\n\tconst MAT = root.createNode('materialsNetwork');\n\tMAT.setName('MAT');\n\tconst material = MAT.createNode('meshLambertBuilder');\n\tconst output = material.createNode('output');\n\t// all we have to do in the material is to plug an instanceTransform node into the output\n\tconst instanceTransform = material.createNode('instanceTransform');\n\toutput.setInput('position', instanceTransform, 'position');\n\toutput.setInput('normal', instanceTransform, 'normal');\n\tinstance.p.material.setNode(material);\n\n\tinstance.uiData.setComment(\n\t\t`This examples demonstrates how to create instances,\nwhich allow to display multiple geometries.\n\nIn this case, we are loading a dolphin geometry, which is about 1400 polygons,\nand **instancing it 5000 times**.\n\nThis gives us about **7 millions polygons**!`\n\t);\n\n\t// add a light\n\troot.createNode('hemisphereLight');\n\n\tconst {perspectiveCamera1} = addPerspectiveCameraOBJWithOrbitControls(root);\n\n\treturn {\n\t\tscene,\n\t\tcameraPath: perspectiveCamera1.path(),\n\t\tfocusedNodes: [instance],\n\t\tautoLayout: true,\n\t};\n}\n\n// export const sopInstance = [\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_NODE}/sop/instance`,\n// \t\tcreateData,\n// \t\tcategories: [ExampleCategory.INSTANCING],\n// \t\trelatedNodes: [InstanceSopNode],\n// \t\tlabel: 'Basic',\n// \t}),\n// \t// new Example({name: `${ExamplePrefix.BY_NODE}/sop/instance/withInputObject`, createData}),\n// \t// new Example({name: `${ExamplePrefix.BY_CATEGORY}/instancing`, createData}),\n// \t// new Example({name: `${ExamplePrefix.BY_CATEGORY}/instancing/withInputObject`, createData}),\n// ];\n"],"names":[],"sourceRoot":""}