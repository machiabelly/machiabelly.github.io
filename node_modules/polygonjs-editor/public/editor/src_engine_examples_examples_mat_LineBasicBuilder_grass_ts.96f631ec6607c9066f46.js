(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_LineBasicBuilder_grass_ts"],{

/***/ 4985:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52070);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    grid.uiData.setPosition(50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(200, 250);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_builder2DArray1(COP2) {
      var builder2DArray1 = COP2.createNode("builder2DArray");
      builder2DArray1.setName("builder2DArray1");
      const builder2DArray1_nodes = {};
      function create_add1(builder2DArray12) {
        var add1 = builder2DArray12.createNode("add");
        add1.setName("add1");
        const add1_nodes = {};
        add1.uiData.setPosition(550, 250);
        add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], { spare: true, editable: false });
        add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], { spare: true, editable: false });
        add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add2", [0, 0, 0], { spare: true, editable: true });
        add1.params.postCreateSpareParams();
        add1.params.runOnSceneLoadHooks();
        return { node: add1, children: add1_nodes };
      }
      function create_add2(builder2DArray12) {
        var add2 = builder2DArray12.createNode("add");
        add2.setName("add2");
        const add2_nodes = {};
        add2.uiData.setPosition(150, 400);
        add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], { spare: true, editable: false });
        add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], { spare: true, editable: false });
        add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add2", [0, 0, 0], { spare: true, editable: true });
        add2.params.postCreateSpareParams();
        add2.params.runOnSceneLoadHooks();
        return { node: add2, children: add2_nodes };
      }
      function create_constant1(builder2DArray12) {
        var constant1 = builder2DArray12.createNode("constant");
        constant1.setName("constant1");
        const constant1_nodes = {};
        constant1.uiData.setPosition(-300, 300);
        constant1.params.postCreateSpareParams();
        constant1.params.runOnSceneLoadHooks();
        return { node: constant1, children: constant1_nodes };
      }
      function create_floatToVec3_1(builder2DArray12) {
        var floatToVec3_1 = builder2DArray12.createNode("floatToVec3");
        floatToVec3_1.setName("floatToVec3_1");
        const floatToVec3_1_nodes = {};
        floatToVec3_1.uiData.setPosition(-450, 750);
        floatToVec3_1.params.postCreateSpareParams();
        floatToVec3_1.params.runOnSceneLoadHooks();
        return { node: floatToVec3_1, children: floatToVec3_1_nodes };
      }
      function create_floatToVec3_2(builder2DArray12) {
        var floatToVec3_2 = builder2DArray12.createNode("floatToVec3");
        floatToVec3_2.setName("floatToVec3_2");
        const floatToVec3_2_nodes = {};
        floatToVec3_2.uiData.setPosition(-450, 500);
        floatToVec3_2.params.postCreateSpareParams();
        floatToVec3_2.params.runOnSceneLoadHooks();
        return { node: floatToVec3_2, children: floatToVec3_2_nodes };
      }
      function create_floatToVec3_3(builder2DArray12) {
        var floatToVec3_3 = builder2DArray12.createNode("floatToVec3");
        floatToVec3_3.setName("floatToVec3_3");
        const floatToVec3_3_nodes = {};
        floatToVec3_3.uiData.setPosition(-450, 350);
        floatToVec3_3.params.postCreateSpareParams();
        floatToVec3_3.params.runOnSceneLoadHooks();
        return { node: floatToVec3_3, children: floatToVec3_3_nodes };
      }
      function create_floatToVec3_4(builder2DArray12) {
        var floatToVec3_4 = builder2DArray12.createNode("floatToVec3");
        floatToVec3_4.setName("floatToVec3_4");
        const floatToVec3_4_nodes = {};
        floatToVec3_4.uiData.setPosition(-200, 300);
        floatToVec3_4.params.postCreateSpareParams();
        floatToVec3_4.params.runOnSceneLoadHooks();
        return { node: floatToVec3_4, children: floatToVec3_4_nodes };
      }
      function create_globals1(builder2DArray12) {
        var globals1 = builder2DArray12.createNode("globals");
        globals1.setName("globals1");
        const globals1_nodes = {};
        globals1.uiData.setPosition(-1e3, 300);
        globals1.params.postCreateSpareParams();
        globals1.params.runOnSceneLoadHooks();
        return { node: globals1, children: globals1_nodes };
      }
      function create_multAdd1(builder2DArray12) {
        var multAdd1 = builder2DArray12.createNode("multAdd");
        multAdd1.setName("multAdd1");
        const multAdd1_nodes = {};
        multAdd1.uiData.setPosition(-550, 500);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multAdd1.params.get("mult").set(0.2);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
        multAdd1.params.postCreateSpareParams();
        multAdd1.params.runOnSceneLoadHooks();
        return { node: multAdd1, children: multAdd1_nodes };
      }
      function create_multAdd2(builder2DArray12) {
        var multAdd2 = builder2DArray12.createNode("multAdd");
        multAdd2.setName("multAdd2");
        const multAdd2_nodes = {};
        multAdd2.uiData.setPosition(-550, 350);
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multAdd2.params.get("mult").set(-0.1);
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
        multAdd2.params.postCreateSpareParams();
        multAdd2.params.runOnSceneLoadHooks();
        return { node: multAdd2, children: multAdd2_nodes };
      }
      function create_multAdd3(builder2DArray12) {
        var multAdd3 = builder2DArray12.createNode("multAdd");
        multAdd3.setName("multAdd3");
        const multAdd3_nodes = {};
        multAdd3.uiData.setPosition(-700, 200);
        multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
        multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
        multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multAdd3.params.get("mult").set(0.42);
        multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
        multAdd3.params.postCreateSpareParams();
        multAdd3.params.runOnSceneLoadHooks();
        return { node: multAdd3, children: multAdd3_nodes };
      }
      function create_multAdd4(builder2DArray12) {
        var multAdd4 = builder2DArray12.createNode("multAdd");
        multAdd4.setName("multAdd4");
        const multAdd4_nodes = {};
        multAdd4.uiData.setPosition(550, 500);
        multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [0, 0, 0], { spare: true, editable: false });
        multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "preAdd", [0, 0, 0], { spare: true, editable: true });
        multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "mult", [1, 1, 1], { spare: true, editable: true });
        multAdd4.params.get("mult").set([0.5, 0.5, 0.5]);
        multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "postAdd", [0, 0, 0], { spare: true, editable: true });
        multAdd4.params.get("postAdd").set([0.5, 0.5, 0.5]);
        multAdd4.params.postCreateSpareParams();
        multAdd4.params.runOnSceneLoadHooks();
        return { node: multAdd4, children: multAdd4_nodes };
      }
      function create_multAdd5(builder2DArray12) {
        var multAdd5 = builder2DArray12.createNode("multAdd");
        multAdd5.setName("multAdd5");
        const multAdd5_nodes = {};
        multAdd5.uiData.setPosition(450, 700);
        multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
        multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
        multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
        multAdd5.params.get("postAdd").set(0.5);
        multAdd5.params.postCreateSpareParams();
        multAdd5.params.runOnSceneLoadHooks();
        return { node: multAdd5, children: multAdd5_nodes };
      }
      function create_multScalar1(builder2DArray12) {
        var multScalar1 = builder2DArray12.createNode("multScalar");
        multScalar1.setName("multScalar1");
        const multScalar1_nodes = {};
        multScalar1.uiData.setPosition(-50, 750);
        multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
        multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multScalar1.params.get("mult").set(0.55);
        multScalar1.params.postCreateSpareParams();
        multScalar1.params.runOnSceneLoadHooks();
        return { node: multScalar1, children: multScalar1_nodes };
      }
      function create_multScalar2(builder2DArray12) {
        var multScalar2 = builder2DArray12.createNode("multScalar");
        multScalar2.setName("multScalar2");
        const multScalar2_nodes = {};
        multScalar2.uiData.setPosition(-300, 600);
        multScalar2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
        multScalar2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multScalar2.params.get("mult").set(0.19);
        multScalar2.params.postCreateSpareParams();
        multScalar2.params.runOnSceneLoadHooks();
        return { node: multScalar2, children: multScalar2_nodes };
      }
      function create_noise1(builder2DArray12) {
        var noise1 = builder2DArray12.createNode("noise");
        noise1.setName("noise1");
        const noise1_nodes = {};
        noise1.uiData.setPosition(300, 500);
        noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "amp", [1, 1, 1], { spare: true, editable: false });
        noise1.params.get("amp").set([0.1, 0.1, 0.1]);
        noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
        noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
        noise1.params.get("freq").set([10, 0.01, 10]);
        noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: false });
        noise1.params.postCreateSpareParams();
        noise1.params.runOnSceneLoadHooks();
        return { node: noise1, children: noise1_nodes };
      }
      function create_noise2(builder2DArray12) {
        var noise2 = builder2DArray12.createNode("noise");
        noise2.setName("noise2");
        const noise2_nodes = {};
        noise2.uiData.setPosition(-50, 400);
        noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "amp", [1, 1, 1], { spare: true, editable: false });
        noise2.params.get("amp").set([0.95, 0.95, 0.95]);
        noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
        noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
        noise2.params.get("freq").set([2.7, 1, 2.7]);
        noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: false });
        noise2.params.postCreateSpareParams();
        noise2.params.runOnSceneLoadHooks();
        return { node: noise2, children: noise2_nodes };
      }
      function create_noise3(builder2DArray12) {
        var noise3 = builder2DArray12.createNode("noise");
        noise3.setName("noise3");
        const noise3_nodes = {};
        noise3.uiData.setPosition(300, 700);
        noise3.p.outputType.set(1);
        noise3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "amp", 1, { spare: true, editable: true });
        noise3.params.get("amp").set(0.42);
        noise3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
        noise3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
        noise3.params.get("freq").set([100, 100, 100]);
        noise3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: true });
        noise3.params.postCreateSpareParams();
        noise3.params.runOnSceneLoadHooks();
        return { node: noise3, children: noise3_nodes };
      }
      function create_null1(builder2DArray12) {
        var null1 = builder2DArray12.createNode("null");
        null1.setName("null1");
        const null1_nodes = {};
        null1.uiData.setPosition(-550, 750);
        null1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
        null1.params.postCreateSpareParams();
        null1.params.runOnSceneLoadHooks();
        return { node: null1, children: null1_nodes };
      }
      function create_null2(builder2DArray12) {
        var null2 = builder2DArray12.createNode("null");
        null2.setName("null2");
        const null2_nodes = {};
        null2.uiData.setPosition(-200, 200);
        null2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "in", [0, 0, 0], { spare: true, editable: false });
        null2.params.postCreateSpareParams();
        null2.params.runOnSceneLoadHooks();
        return { node: null2, children: null2_nodes };
      }
      function create_null3(builder2DArray12) {
        var null3 = builder2DArray12.createNode("null");
        null3.setName("null3");
        const null3_nodes = {};
        null3.uiData.setPosition(-750, 350);
        null3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
        null3.params.postCreateSpareParams();
        null3.params.runOnSceneLoadHooks();
        return { node: null3, children: null3_nodes };
      }
      function create_output1(builder2DArray12) {
        var output1 = builder2DArray12.createNode("output");
        output1.setName("output1");
        const output1_nodes = {};
        output1.uiData.setPosition(700, 500);
        output1.params.postCreateSpareParams();
        output1.params.runOnSceneLoadHooks();
        return { node: output1, children: output1_nodes };
      }
      function create_vec2ToVec3_1(builder2DArray12) {
        var vec2ToVec3_1 = builder2DArray12.createNode("vec2ToVec3");
        vec2ToVec3_1.setName("vec2ToVec3_1");
        const vec2ToVec3_1_nodes = {};
        vec2ToVec3_1.uiData.setPosition(-550, 100);
        vec2ToVec3_1.params.postCreateSpareParams();
        vec2ToVec3_1.params.runOnSceneLoadHooks();
        return { node: vec2ToVec3_1, children: vec2ToVec3_1_nodes };
      }
      builder2DArray1_nodes["add1"] = create_add1(builder2DArray1);
      builder2DArray1_nodes["add2"] = create_add2(builder2DArray1);
      builder2DArray1_nodes["constant1"] = create_constant1(builder2DArray1);
      builder2DArray1_nodes["floatToVec3_1"] = create_floatToVec3_1(builder2DArray1);
      builder2DArray1_nodes["floatToVec3_2"] = create_floatToVec3_2(builder2DArray1);
      builder2DArray1_nodes["floatToVec3_3"] = create_floatToVec3_3(builder2DArray1);
      builder2DArray1_nodes["floatToVec3_4"] = create_floatToVec3_4(builder2DArray1);
      builder2DArray1_nodes["globals1"] = create_globals1(builder2DArray1);
      builder2DArray1_nodes["multAdd1"] = create_multAdd1(builder2DArray1);
      builder2DArray1_nodes["multAdd2"] = create_multAdd2(builder2DArray1);
      builder2DArray1_nodes["multAdd3"] = create_multAdd3(builder2DArray1);
      builder2DArray1_nodes["multAdd4"] = create_multAdd4(builder2DArray1);
      builder2DArray1_nodes["multAdd5"] = create_multAdd5(builder2DArray1);
      builder2DArray1_nodes["multScalar1"] = create_multScalar1(builder2DArray1);
      builder2DArray1_nodes["multScalar2"] = create_multScalar2(builder2DArray1);
      builder2DArray1_nodes["noise1"] = create_noise1(builder2DArray1);
      builder2DArray1_nodes["noise2"] = create_noise2(builder2DArray1);
      builder2DArray1_nodes["noise3"] = create_noise3(builder2DArray1);
      builder2DArray1_nodes["null1"] = create_null1(builder2DArray1);
      builder2DArray1_nodes["null2"] = create_null2(builder2DArray1);
      builder2DArray1_nodes["null3"] = create_null3(builder2DArray1);
      builder2DArray1_nodes["output1"] = create_output1(builder2DArray1);
      builder2DArray1_nodes["vec2ToVec3_1"] = create_vec2ToVec3_1(builder2DArray1);
      builder2DArray1_nodes["add1"].node.setInput("add0", builder2DArray1_nodes["null2"].node, "val");
      builder2DArray1_nodes["add1"].node.setInput("add1", builder2DArray1_nodes["noise1"].node, "noise");
      builder2DArray1_nodes["add2"].node.setInput("add0", builder2DArray1_nodes["null2"].node, "val");
      builder2DArray1_nodes["add2"].node.setInput("add1", builder2DArray1_nodes["noise2"].node, "noise");
      builder2DArray1_nodes["floatToVec3_1"].node.setInput("x", builder2DArray1_nodes["null1"].node, "val");
      builder2DArray1_nodes["floatToVec3_1"].node.setInput("y", builder2DArray1_nodes["null1"].node, "val");
      builder2DArray1_nodes["floatToVec3_1"].node.setInput("z", builder2DArray1_nodes["null1"].node, "val");
      builder2DArray1_nodes["floatToVec3_2"].node.setInput("x", builder2DArray1_nodes["multAdd1"].node, "val");
      builder2DArray1_nodes["floatToVec3_3"].node.setInput("z", builder2DArray1_nodes["multAdd2"].node, "val");
      builder2DArray1_nodes["floatToVec3_4"].node.setInput("x", builder2DArray1_nodes["constant1"].node, "val");
      builder2DArray1_nodes["floatToVec3_4"].node.setInput("y", builder2DArray1_nodes["constant1"].node, "val");
      builder2DArray1_nodes["floatToVec3_4"].node.setInput("z", builder2DArray1_nodes["constant1"].node, "val");
      builder2DArray1_nodes["multAdd1"].node.setInput("value", builder2DArray1_nodes["null3"].node, "val");
      builder2DArray1_nodes["multAdd2"].node.setInput("value", builder2DArray1_nodes["null3"].node, "val");
      builder2DArray1_nodes["multAdd3"].node.setInput("value", builder2DArray1_nodes["globals1"].node, "layer");
      builder2DArray1_nodes["multAdd4"].node.setInput("value", builder2DArray1_nodes["noise1"].node, "noise");
      builder2DArray1_nodes["multAdd5"].node.setInput("value", builder2DArray1_nodes["noise3"].node, "noise");
      builder2DArray1_nodes["multScalar1"].node.setInput(
        "value",
        builder2DArray1_nodes["floatToVec3_1"].node,
        "vec3"
      );
      builder2DArray1_nodes["multScalar2"].node.setInput(
        "value",
        builder2DArray1_nodes["floatToVec3_1"].node,
        "vec3"
      );
      builder2DArray1_nodes["noise1"].node.setInput("amp", builder2DArray1_nodes["multScalar1"].node, "val");
      builder2DArray1_nodes["noise1"].node.setInput("position", builder2DArray1_nodes["add2"].node, "sum");
      builder2DArray1_nodes["noise1"].node.setInput(
        "offset",
        builder2DArray1_nodes["floatToVec3_2"].node,
        "vec3"
      );
      builder2DArray1_nodes["noise2"].node.setInput("amp", builder2DArray1_nodes["floatToVec3_4"].node, "vec3");
      builder2DArray1_nodes["noise2"].node.setInput("position", builder2DArray1_nodes["null2"].node, "val");
      builder2DArray1_nodes["noise2"].node.setInput(
        "offset",
        builder2DArray1_nodes["floatToVec3_3"].node,
        "vec3"
      );
      builder2DArray1_nodes["noise3"].node.setInput("position", builder2DArray1_nodes["add2"].node, "sum");
      builder2DArray1_nodes["null1"].node.setInput("in", builder2DArray1_nodes["globals1"].node, "layer");
      builder2DArray1_nodes["null2"].node.setInput("in", builder2DArray1_nodes["vec2ToVec3_1"].node, "vec3");
      builder2DArray1_nodes["null3"].node.setInput("in", builder2DArray1_nodes["globals1"].node, "time");
      builder2DArray1_nodes["output1"].node.setInput("color", builder2DArray1_nodes["multAdd4"].node, "val");
      builder2DArray1_nodes["output1"].node.setInput("alpha", builder2DArray1_nodes["multAdd5"].node, "val");
      builder2DArray1_nodes["vec2ToVec3_1"].node.setInput("vec2", builder2DArray1_nodes["globals1"].node, "uv");
      builder2DArray1_nodes["vec2ToVec3_1"].node.setInput("z", builder2DArray1_nodes["multAdd3"].node, "val");
      builder2DArray1.uiData.setPosition(-100, 400);
      builder2DArray1.params.postCreateSpareParams();
      builder2DArray1.params.runOnSceneLoadHooks();
      return { node: builder2DArray1, children: builder2DArray1_nodes };
    }
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["builder2DArray1"] = create_builder2DArray1(COP);
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setPosition(-150, 350);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_grass(parentNode) {
    var grass = parentNode.createNode("geo");
    grass.setName("grass");
    const grass_nodes = {};
    function create_MAT(grass2) {
      var MAT = grass2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_lineBasicBuilder_NON_OPTIMISED(MAT2) {
        var lineBasicBuilder_NON_OPTIMISED = MAT2.createNode("lineBasicBuilder");
        lineBasicBuilder_NON_OPTIMISED.setName("lineBasicBuilder_NON_OPTIMISED");
        const lineBasicBuilder_NON_OPTIMISED_nodes = {};
        function create_attribute1(lineBasicBuilder_NON_OPTIMISED2) {
          var attribute1 = lineBasicBuilder_NON_OPTIMISED2.createNode("attribute");
          attribute1.setName("attribute1");
          const attribute1_nodes = {};
          attribute1.uiData.setPosition(-800, 700);
          attribute1.p.name.set("instancePosition");
          attribute1.p.type.set(2);
          attribute1.params.postCreateSpareParams();
          attribute1.params.runOnSceneLoadHooks();
          return { node: attribute1, children: attribute1_nodes };
        }
        function create_attribute2(lineBasicBuilder_NON_OPTIMISED2) {
          var attribute2 = lineBasicBuilder_NON_OPTIMISED2.createNode("attribute");
          attribute2.setName("attribute2");
          const attribute2_nodes = {};
          attribute2.uiData.setPosition(-750, 500);
          attribute2.p.name.set("ptn");
          attribute2.params.postCreateSpareParams();
          attribute2.params.runOnSceneLoadHooks();
          return { node: attribute2, children: attribute2_nodes };
        }
        function create_constant1(lineBasicBuilder_NON_OPTIMISED2) {
          var constant1 = lineBasicBuilder_NON_OPTIMISED2.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-750, 300);
          constant1.p.type.set(4);
          constant1.p.color.set([0.011764705882352941, 0.10980392156862745, 0.01568627450980392]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(lineBasicBuilder_NON_OPTIMISED2) {
          var constant2 = lineBasicBuilder_NON_OPTIMISED2.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-750, 400);
          constant2.p.type.set(4);
          constant2.p.color.set([0.25098039215686274, 0.4392156862745098, 0.06274509803921569]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_constant3(lineBasicBuilder_NON_OPTIMISED2) {
          var constant3 = lineBasicBuilder_NON_OPTIMISED2.createNode("constant");
          constant3.setName("constant3");
          const constant3_nodes = {};
          constant3.uiData.setPosition(-450, 550);
          constant3.p.type.set(4);
          constant3.p.color.set([0.4392156862745098, 0.4235294117647059, 0.06274509803921569]);
          constant3.p.asColor.set(true);
          constant3.params.postCreateSpareParams();
          constant3.params.runOnSceneLoadHooks();
          return { node: constant3, children: constant3_nodes };
        }
        function create_fitFrom01_1(lineBasicBuilder_NON_OPTIMISED2) {
          var fitFrom01_1 = lineBasicBuilder_NON_OPTIMISED2.createNode("fitFrom01");
          fitFrom01_1.setName("fitFrom01_1");
          const fitFrom01_1_nodes = {};
          fitFrom01_1.uiData.setPosition(-600, 500);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fitFrom01_1.params.get("destMin").set(-0.1);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fitFrom01_1.params.postCreateSpareParams();
          fitFrom01_1.params.runOnSceneLoadHooks();
          return { node: fitFrom01_1, children: fitFrom01_1_nodes };
        }
        function create_instanceTransform1(lineBasicBuilder_NON_OPTIMISED2) {
          var instanceTransform1 = lineBasicBuilder_NON_OPTIMISED2.createNode("instanceTransform");
          instanceTransform1.setName("instanceTransform1");
          const instanceTransform1_nodes = {};
          instanceTransform1.uiData.setPosition(-350, -100);
          instanceTransform1.params.postCreateSpareParams();
          instanceTransform1.params.runOnSceneLoadHooks();
          return { node: instanceTransform1, children: instanceTransform1_nodes };
        }
        function create_mix1(lineBasicBuilder_NON_OPTIMISED2) {
          var mix1 = lineBasicBuilder_NON_OPTIMISED2.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(-350, 350);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.get("blend").set(0.65);
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_mix2(lineBasicBuilder_NON_OPTIMISED2) {
          var mix2 = lineBasicBuilder_NON_OPTIMISED2.createNode("mix");
          mix2.setName("mix2");
          const mix2_nodes = {};
          mix2.uiData.setPosition(-250, 450);
          mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix2.params.postCreateSpareParams();
          mix2.params.runOnSceneLoadHooks();
          return { node: mix2, children: mix2_nodes };
        }
        function create_noise1(lineBasicBuilder_NON_OPTIMISED2) {
          var noise1 = lineBasicBuilder_NON_OPTIMISED2.createNode("noise");
          noise1.setName("noise1");
          const noise1_nodes = {};
          noise1.uiData.setPosition(-650, 700);
          noise1.p.outputType.set(1);
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "amp", 1, { spare: true, editable: true });
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
          noise1.params.get("freq").set([0.6, 0.6, 0.6]);
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: true });
          noise1.params.postCreateSpareParams();
          noise1.params.runOnSceneLoadHooks();
          return { node: noise1, children: noise1_nodes };
        }
        function create_output1(lineBasicBuilder_NON_OPTIMISED2) {
          var output1 = lineBasicBuilder_NON_OPTIMISED2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(500, 150);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_smoothstep1(lineBasicBuilder_NON_OPTIMISED2) {
          var smoothstep1 = lineBasicBuilder_NON_OPTIMISED2.createNode("smoothstep");
          smoothstep1.setName("smoothstep1");
          const smoothstep1_nodes = {};
          smoothstep1.uiData.setPosition(-450, 700);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "edge0", 0, { spare: true, editable: true });
          smoothstep1.params.get("edge0").set(0.71);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "edge1", 1, { spare: true, editable: true });
          smoothstep1.params.get("edge1").set(0.86);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "x", 0, { spare: true, editable: false });
          smoothstep1.params.postCreateSpareParams();
          smoothstep1.params.runOnSceneLoadHooks();
          return { node: smoothstep1, children: smoothstep1_nodes };
        }
        function create_subnet_length_variation(lineBasicBuilder_NON_OPTIMISED2) {
          var subnet_length_variation = lineBasicBuilder_NON_OPTIMISED2.createNode("subnet");
          subnet_length_variation.setName("subnet_length_variation");
          const subnet_length_variation_nodes = {};
          subnet_length_variation.p.inputType0.set(4);
          subnet_length_variation.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input0", [0, 0, 0], {
            spare: true,
            editable: true
          });
          subnet_length_variation.params.postCreateSpareParams();
          subnet_length_variation.params.runOnSceneLoadHooks();
          function create_attribute3(subnet_length_variation2) {
            var attribute3 = subnet_length_variation2.createNode("attribute");
            attribute3.setName("attribute3");
            const attribute3_nodes = {};
            attribute3.uiData.setPosition(-1550, -50);
            attribute3.p.name.set("instancePosition");
            attribute3.p.type.set(2);
            attribute3.params.postCreateSpareParams();
            attribute3.params.runOnSceneLoadHooks();
            return { node: attribute3, children: attribute3_nodes };
          }
          function create_floatToVec3_3(subnet_length_variation2) {
            var floatToVec3_3 = subnet_length_variation2.createNode("floatToVec3");
            floatToVec3_3.setName("floatToVec3_3");
            const floatToVec3_3_nodes = {};
            floatToVec3_3.uiData.setPosition(-1300, -50);
            floatToVec3_3.params.postCreateSpareParams();
            floatToVec3_3.params.runOnSceneLoadHooks();
            return { node: floatToVec3_3, children: floatToVec3_3_nodes };
          }
          function create_globals1(subnet_length_variation2) {
            var globals1 = subnet_length_variation2.createNode("globals");
            globals1.setName("globals1");
            const globals1_nodes = {};
            globals1.uiData.setPosition(-1500, -350);
            globals1.params.postCreateSpareParams();
            globals1.params.runOnSceneLoadHooks();
            return { node: globals1, children: globals1_nodes };
          }
          function create_length1(subnet_length_variation2) {
            var length1 = subnet_length_variation2.createNode("length");
            length1.setName("length1");
            const length1_nodes = {};
            length1.uiData.setPosition(-900, -150);
            length1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "x", [0, 0, 0], { spare: true, editable: false });
            length1.params.postCreateSpareParams();
            length1.params.runOnSceneLoadHooks();
            return { node: length1, children: length1_nodes };
          }
          function create_multAdd2(subnet_length_variation2) {
            var multAdd2 = subnet_length_variation2.createNode("multAdd");
            multAdd2.setName("multAdd2");
            const multAdd2_nodes = {};
            multAdd2.uiData.setPosition(-1050, -50);
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [0, 0, 0], { spare: true, editable: false });
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "preAdd", [0, 0, 0], { spare: true, editable: true });
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "mult", [1, 1, 1], { spare: true, editable: true });
            multAdd2.params.get("mult").set([0.5, 0.5, 0.5]);
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "postAdd", [0, 0, 0], { spare: true, editable: true });
            multAdd2.params.get("postAdd").set([1, 1, 1]);
            multAdd2.params.postCreateSpareParams();
            multAdd2.params.runOnSceneLoadHooks();
            return { node: multAdd2, children: multAdd2_nodes };
          }
          function create_multScalar2(subnet_length_variation2) {
            var multScalar2 = subnet_length_variation2.createNode("multScalar");
            multScalar2.setName("multScalar2");
            const multScalar2_nodes = {};
            multScalar2.uiData.setPosition(-800, -300);
            multScalar2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
            multScalar2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: false });
            multScalar2.params.postCreateSpareParams();
            multScalar2.params.runOnSceneLoadHooks();
            return { node: multScalar2, children: multScalar2_nodes };
          }
          function create_noise2(subnet_length_variation2) {
            var noise2 = subnet_length_variation2.createNode("noise");
            noise2.setName("noise2");
            const noise2_nodes = {};
            noise2.uiData.setPosition(-1150, -50);
            noise2.p.outputType.set(3);
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "amp", [1, 1, 1], { spare: true, editable: true });
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
            noise2.params.get("freq").set([0.5, 0.5, 0.5]);
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: true });
            noise2.params.get("offset").set([0, 3.2, 0]);
            noise2.params.postCreateSpareParams();
            noise2.params.runOnSceneLoadHooks();
            return { node: noise2, children: noise2_nodes };
          }
          function create_subnetOutput1(subnet_length_variation2) {
            var subnetOutput1 = subnet_length_variation2.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(-600, -300);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          function create_vec3ToFloat1(subnet_length_variation2) {
            var vec3ToFloat1 = subnet_length_variation2.createNode("vec3ToFloat");
            vec3ToFloat1.setName("vec3ToFloat1");
            const vec3ToFloat1_nodes = {};
            vec3ToFloat1.uiData.setPosition(-1400, -50);
            vec3ToFloat1.params.postCreateSpareParams();
            vec3ToFloat1.params.runOnSceneLoadHooks();
            return { node: vec3ToFloat1, children: vec3ToFloat1_nodes };
          }
          subnet_length_variation_nodes["attribute3"] = create_attribute3(subnet_length_variation);
          subnet_length_variation_nodes["floatToVec3_3"] = create_floatToVec3_3(subnet_length_variation);
          subnet_length_variation_nodes["globals1"] = create_globals1(subnet_length_variation);
          subnet_length_variation_nodes["length1"] = create_length1(subnet_length_variation);
          subnet_length_variation_nodes["multAdd2"] = create_multAdd2(subnet_length_variation);
          subnet_length_variation_nodes["multScalar2"] = create_multScalar2(subnet_length_variation);
          subnet_length_variation_nodes["noise2"] = create_noise2(subnet_length_variation);
          subnet_length_variation_nodes["subnetOutput1"] = create_subnetOutput1(subnet_length_variation);
          subnet_length_variation_nodes["vec3ToFloat1"] = create_vec3ToFloat1(subnet_length_variation);
          subnet_length_variation_nodes["floatToVec3_3"].node.setInput(
            "x",
            subnet_length_variation_nodes["vec3ToFloat1"].node,
            "x"
          );
          subnet_length_variation_nodes["floatToVec3_3"].node.setInput(
            "z",
            subnet_length_variation_nodes["vec3ToFloat1"].node,
            "z"
          );
          subnet_length_variation_nodes["length1"].node.setInput(
            "x",
            subnet_length_variation_nodes["multAdd2"].node,
            "val"
          );
          subnet_length_variation_nodes["multAdd2"].node.setInput(
            "value",
            subnet_length_variation_nodes["noise2"].node,
            "noise"
          );
          subnet_length_variation_nodes["multScalar2"].node.setInput(
            "value",
            subnet_length_variation_nodes["globals1"].node,
            "position"
          );
          subnet_length_variation_nodes["multScalar2"].node.setInput(
            "mult",
            subnet_length_variation_nodes["length1"].node,
            "val"
          );
          subnet_length_variation_nodes["noise2"].node.setInput(
            "position",
            subnet_length_variation_nodes["floatToVec3_3"].node,
            "vec3"
          );
          subnet_length_variation_nodes["subnetOutput1"].node.setInput(
            "input0",
            subnet_length_variation_nodes["multScalar2"].node,
            "val"
          );
          subnet_length_variation_nodes["vec3ToFloat1"].node.setInput(
            "vec",
            subnet_length_variation_nodes["attribute3"].node,
            "val"
          );
          subnet_length_variation.uiData.setPosition(-550, -100);
          subnet_length_variation.p.inputType0.set(4);
          subnet_length_variation.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input0", [0, 0, 0], {
            spare: true,
            editable: true
          });
          subnet_length_variation.params.postCreateSpareParams();
          subnet_length_variation.params.runOnSceneLoadHooks();
          return { node: subnet_length_variation, children: subnet_length_variation_nodes };
        }
        function create_subnet_noise(lineBasicBuilder_NON_OPTIMISED2) {
          var subnet_noise = lineBasicBuilder_NON_OPTIMISED2.createNode("subnet");
          subnet_noise.setName("subnet_noise");
          const subnet_noise_nodes = {};
          subnet_noise.p.inputsCount.set(3);
          subnet_noise.p.inputType0.set(4);
          subnet_noise.p.inputType1.set(4);
          subnet_noise.p.inputType2.set(4);
          subnet_noise.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input0", [0, 0, 0], { spare: true, editable: false });
          subnet_noise.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input1", [0, 0, 0], { spare: true, editable: true });
          subnet_noise.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input2", [0, 0, 0], { spare: true, editable: true });
          subnet_noise.params.postCreateSpareParams();
          subnet_noise.params.runOnSceneLoadHooks();
          function create_add1(subnet_noise2) {
            var add1 = subnet_noise2.createNode("add");
            add1.setName("add1");
            const add1_nodes = {};
            add1.uiData.setPosition(-200, -150);
            add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], { spare: true, editable: false });
            add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], { spare: true, editable: false });
            add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add2", [0, 0, 0], { spare: true, editable: true });
            add1.params.postCreateSpareParams();
            add1.params.runOnSceneLoadHooks();
            return { node: add1, children: add1_nodes };
          }
          function create_add2(subnet_noise2) {
            var add2 = subnet_noise2.createNode("add");
            add2.setName("add2");
            const add2_nodes = {};
            add2.uiData.setPosition(-800, -350);
            add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], { spare: true, editable: false });
            add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], { spare: true, editable: false });
            add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add2", [0, 0, 0], { spare: true, editable: true });
            add2.params.postCreateSpareParams();
            add2.params.runOnSceneLoadHooks();
            return { node: add2, children: add2_nodes };
          }
          function create_attribute12(subnet_noise2) {
            var attribute1 = subnet_noise2.createNode("attribute");
            attribute1.setName("attribute1");
            const attribute1_nodes = {};
            attribute1.uiData.setPosition(-1150, 350);
            attribute1.p.name.set("ptn");
            attribute1.params.postCreateSpareParams();
            attribute1.params.runOnSceneLoadHooks();
            return { node: attribute1, children: attribute1_nodes };
          }
          function create_floatToVec3_1(subnet_noise2) {
            var floatToVec3_1 = subnet_noise2.createNode("floatToVec3");
            floatToVec3_1.setName("floatToVec3_1");
            const floatToVec3_1_nodes = {};
            floatToVec3_1.uiData.setPosition(-900, 200);
            floatToVec3_1.params.postCreateSpareParams();
            floatToVec3_1.params.runOnSceneLoadHooks();
            return { node: floatToVec3_1, children: floatToVec3_1_nodes };
          }
          function create_floatToVec3_2(subnet_noise2) {
            var floatToVec3_2 = subnet_noise2.createNode("floatToVec3");
            floatToVec3_2.setName("floatToVec3_2");
            const floatToVec3_2_nodes = {};
            floatToVec3_2.uiData.setPosition(-1100, -50);
            floatToVec3_2.params.postCreateSpareParams();
            floatToVec3_2.params.runOnSceneLoadHooks();
            return { node: floatToVec3_2, children: floatToVec3_2_nodes };
          }
          function create_floatToVec3_3(subnet_noise2) {
            var floatToVec3_3 = subnet_noise2.createNode("floatToVec3");
            floatToVec3_3.setName("floatToVec3_3");
            const floatToVec3_3_nodes = {};
            floatToVec3_3.uiData.setPosition(-1050, -200);
            floatToVec3_3.params.postCreateSpareParams();
            floatToVec3_3.params.runOnSceneLoadHooks();
            return { node: floatToVec3_3, children: floatToVec3_3_nodes };
          }
          function create_globals2(subnet_noise2) {
            var globals2 = subnet_noise2.createNode("globals");
            globals2.setName("globals2");
            const globals2_nodes = {};
            globals2.uiData.setPosition(-1350, -150);
            globals2.params.postCreateSpareParams();
            globals2.params.runOnSceneLoadHooks();
            return { node: globals2, children: globals2_nodes };
          }
          function create_multAdd1(subnet_noise2) {
            var multAdd1 = subnet_noise2.createNode("multAdd");
            multAdd1.setName("multAdd1");
            const multAdd1_nodes = {};
            multAdd1.uiData.setPosition(-1200, -50);
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multAdd1.params.get("mult").set(0.2);
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
            multAdd1.params.postCreateSpareParams();
            multAdd1.params.runOnSceneLoadHooks();
            return { node: multAdd1, children: multAdd1_nodes };
          }
          function create_multAdd2(subnet_noise2) {
            var multAdd2 = subnet_noise2.createNode("multAdd");
            multAdd2.setName("multAdd2");
            const multAdd2_nodes = {};
            multAdd2.uiData.setPosition(-1150, -200);
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multAdd2.params.get("mult").set(-0.1);
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
            multAdd2.params.postCreateSpareParams();
            multAdd2.params.runOnSceneLoadHooks();
            return { node: multAdd2, children: multAdd2_nodes };
          }
          function create_multScalar1(subnet_noise2) {
            var multScalar1 = subnet_noise2.createNode("multScalar");
            multScalar1.setName("multScalar1");
            const multScalar1_nodes = {};
            multScalar1.uiData.setPosition(-700, 200);
            multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
            multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multScalar1.params.get("mult").set(0.55);
            multScalar1.params.postCreateSpareParams();
            multScalar1.params.runOnSceneLoadHooks();
            return { node: multScalar1, children: multScalar1_nodes };
          }
          function create_multScalar2(subnet_noise2) {
            var multScalar2 = subnet_noise2.createNode("multScalar");
            multScalar2.setName("multScalar2");
            const multScalar2_nodes = {};
            multScalar2.uiData.setPosition(-850, 50);
            multScalar2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
            multScalar2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multScalar2.params.get("mult").set(0.19);
            multScalar2.params.postCreateSpareParams();
            multScalar2.params.runOnSceneLoadHooks();
            return { node: multScalar2, children: multScalar2_nodes };
          }
          function create_noise12(subnet_noise2) {
            var noise1 = subnet_noise2.createNode("noise");
            noise1.setName("noise1");
            const noise1_nodes = {};
            noise1.uiData.setPosition(-350, -50);
            noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "amp", [1, 1, 1], { spare: true, editable: false });
            noise1.params.get("amp").set([0.1, 0.1, 0.1]);
            noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
            noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
            noise1.params.get("freq").set([0.7, 0.1, 0.7]);
            noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: false });
            noise1.params.postCreateSpareParams();
            noise1.params.runOnSceneLoadHooks();
            return { node: noise1, children: noise1_nodes };
          }
          function create_noise2(subnet_noise2) {
            var noise2 = subnet_noise2.createNode("noise");
            noise2.setName("noise2");
            const noise2_nodes = {};
            noise2.uiData.setPosition(-900, -300);
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "amp", [1, 1, 1], { spare: true, editable: false });
            noise2.params.get("amp").set([0.95, 0.95, 0.95]);
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
            noise2.params.get("freq").set([0.19999999999999996, 0.19999999999999996, 0.19999999999999996]);
            noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: false });
            noise2.params.postCreateSpareParams();
            noise2.params.runOnSceneLoadHooks();
            return { node: noise2, children: noise2_nodes };
          }
          function create_null1(subnet_noise2) {
            var null1 = subnet_noise2.createNode("null");
            null1.setName("null1");
            const null1_nodes = {};
            null1.uiData.setPosition(-1e3, 200);
            null1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
            null1.params.postCreateSpareParams();
            null1.params.runOnSceneLoadHooks();
            return { node: null1, children: null1_nodes };
          }
          function create_subnetInput1(subnet_noise2) {
            var subnetInput1 = subnet_noise2.createNode("subnetInput");
            subnetInput1.setName("subnetInput1");
            const subnetInput1_nodes = {};
            subnetInput1.uiData.setPosition(-1100, -300);
            subnetInput1.params.postCreateSpareParams();
            subnetInput1.params.runOnSceneLoadHooks();
            return { node: subnetInput1, children: subnetInput1_nodes };
          }
          function create_subnetOutput1(subnet_noise2) {
            var subnetOutput1 = subnet_noise2.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(0, -200);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          subnet_noise_nodes["add1"] = create_add1(subnet_noise);
          subnet_noise_nodes["add2"] = create_add2(subnet_noise);
          subnet_noise_nodes["attribute1"] = create_attribute12(subnet_noise);
          subnet_noise_nodes["floatToVec3_1"] = create_floatToVec3_1(subnet_noise);
          subnet_noise_nodes["floatToVec3_2"] = create_floatToVec3_2(subnet_noise);
          subnet_noise_nodes["floatToVec3_3"] = create_floatToVec3_3(subnet_noise);
          subnet_noise_nodes["globals2"] = create_globals2(subnet_noise);
          subnet_noise_nodes["multAdd1"] = create_multAdd1(subnet_noise);
          subnet_noise_nodes["multAdd2"] = create_multAdd2(subnet_noise);
          subnet_noise_nodes["multScalar1"] = create_multScalar1(subnet_noise);
          subnet_noise_nodes["multScalar2"] = create_multScalar2(subnet_noise);
          subnet_noise_nodes["noise1"] = create_noise12(subnet_noise);
          subnet_noise_nodes["noise2"] = create_noise2(subnet_noise);
          subnet_noise_nodes["null1"] = create_null1(subnet_noise);
          subnet_noise_nodes["subnetInput1"] = create_subnetInput1(subnet_noise);
          subnet_noise_nodes["subnetOutput1"] = create_subnetOutput1(subnet_noise);
          subnet_noise_nodes["add1"].node.setInput("add0", subnet_noise_nodes["subnetInput1"].node, "input0");
          subnet_noise_nodes["add1"].node.setInput("add1", subnet_noise_nodes["noise1"].node, "noise");
          subnet_noise_nodes["add2"].node.setInput("add0", subnet_noise_nodes["subnetInput1"].node, "input0");
          subnet_noise_nodes["add2"].node.setInput("add1", subnet_noise_nodes["noise2"].node, "noise");
          subnet_noise_nodes["floatToVec3_1"].node.setInput("x", subnet_noise_nodes["null1"].node, "val");
          subnet_noise_nodes["floatToVec3_1"].node.setInput("y", subnet_noise_nodes["null1"].node, "val");
          subnet_noise_nodes["floatToVec3_1"].node.setInput("z", subnet_noise_nodes["null1"].node, "val");
          subnet_noise_nodes["floatToVec3_2"].node.setInput("x", subnet_noise_nodes["multAdd1"].node, "val");
          subnet_noise_nodes["floatToVec3_3"].node.setInput("z", subnet_noise_nodes["multAdd2"].node, "val");
          subnet_noise_nodes["multAdd1"].node.setInput("value", subnet_noise_nodes["globals2"].node, "time");
          subnet_noise_nodes["multAdd2"].node.setInput("value", subnet_noise_nodes["globals2"].node, "time");
          subnet_noise_nodes["multScalar1"].node.setInput(
            "value",
            subnet_noise_nodes["floatToVec3_1"].node,
            "vec3"
          );
          subnet_noise_nodes["multScalar2"].node.setInput(
            "value",
            subnet_noise_nodes["floatToVec3_1"].node,
            "vec3"
          );
          subnet_noise_nodes["noise1"].node.setInput("amp", subnet_noise_nodes["multScalar1"].node, "val");
          subnet_noise_nodes["noise1"].node.setInput("position", subnet_noise_nodes["add2"].node, "sum");
          subnet_noise_nodes["noise1"].node.setInput(
            "offset",
            subnet_noise_nodes["floatToVec3_2"].node,
            "vec3"
          );
          subnet_noise_nodes["noise2"].node.setInput("amp", subnet_noise_nodes["multScalar2"].node, "val");
          subnet_noise_nodes["noise2"].node.setInput(
            "position",
            subnet_noise_nodes["subnetInput1"].node,
            "input0"
          );
          subnet_noise_nodes["noise2"].node.setInput(
            "offset",
            subnet_noise_nodes["floatToVec3_3"].node,
            "vec3"
          );
          subnet_noise_nodes["null1"].node.setInput("in", subnet_noise_nodes["attribute1"].node, "val");
          subnet_noise_nodes["subnetOutput1"].node.setInput("input0", subnet_noise_nodes["add1"].node, "sum");
          subnet_noise.uiData.setPosition(-150, -100);
          subnet_noise.p.inputsCount.set(3);
          subnet_noise.p.inputType0.set(4);
          subnet_noise.p.inputType1.set(4);
          subnet_noise.p.inputType2.set(4);
          subnet_noise.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input0", [0, 0, 0], { spare: true, editable: false });
          subnet_noise.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input1", [0, 0, 0], { spare: true, editable: true });
          subnet_noise.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "input2", [0, 0, 0], { spare: true, editable: true });
          subnet_noise.params.postCreateSpareParams();
          subnet_noise.params.runOnSceneLoadHooks();
          return { node: subnet_noise, children: subnet_noise_nodes };
        }
        function create_varyingRead1(lineBasicBuilder_NON_OPTIMISED2) {
          var varyingRead1 = lineBasicBuilder_NON_OPTIMISED2.createNode("varyingRead");
          varyingRead1.setName("varyingRead1");
          const varyingRead1_nodes = {};
          varyingRead1.uiData.setPosition(250, 350);
          varyingRead1.p.name.set("basecolor");
          varyingRead1.p.type.set(2);
          varyingRead1.params.postCreateSpareParams();
          varyingRead1.params.runOnSceneLoadHooks();
          return { node: varyingRead1, children: varyingRead1_nodes };
        }
        function create_varyingWrite1(lineBasicBuilder_NON_OPTIMISED2) {
          var varyingWrite1 = lineBasicBuilder_NON_OPTIMISED2.createNode("varyingWrite");
          varyingWrite1.setName("varyingWrite1");
          const varyingWrite1_nodes = {};
          varyingWrite1.uiData.setComment(
            "using the varyingWrite/varyingRead instead of setting the color directly allows us to set the color in the vertex shader, as opposed to the fragment shader, which would be less performant."
          );
          varyingWrite1.uiData.setPosition(-150, 450);
          varyingWrite1.p.name.set("basecolor");
          varyingWrite1.p.type.set(2);
          varyingWrite1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "vertex", [0, 0, 0], { spare: true, editable: false });
          varyingWrite1.params.postCreateSpareParams();
          varyingWrite1.params.runOnSceneLoadHooks();
          return { node: varyingWrite1, children: varyingWrite1_nodes };
        }
        lineBasicBuilder_NON_OPTIMISED_nodes["attribute1"] = create_attribute1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["attribute2"] = create_attribute2(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["constant1"] = create_constant1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["constant2"] = create_constant2(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["constant3"] = create_constant3(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["fitFrom01_1"] = create_fitFrom01_1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["instanceTransform1"] = create_instanceTransform1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["mix1"] = create_mix1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["mix2"] = create_mix2(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["noise1"] = create_noise1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["output1"] = create_output1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["smoothstep1"] = create_smoothstep1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["subnet_length_variation"] = create_subnet_length_variation(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["subnet_noise"] = create_subnet_noise(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["varyingRead1"] = create_varyingRead1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["varyingWrite1"] = create_varyingWrite1(lineBasicBuilder_NON_OPTIMISED);
        lineBasicBuilder_NON_OPTIMISED_nodes["fitFrom01_1"].node.setInput(
          "val",
          lineBasicBuilder_NON_OPTIMISED_nodes["attribute2"].node,
          "val"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["instanceTransform1"].node.setInput(
          "position",
          lineBasicBuilder_NON_OPTIMISED_nodes["subnet_length_variation"].node,
          "input0"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["mix1"].node.setInput(
          "value0",
          lineBasicBuilder_NON_OPTIMISED_nodes["constant1"].node,
          "val"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["mix1"].node.setInput(
          "value1",
          lineBasicBuilder_NON_OPTIMISED_nodes["constant2"].node,
          "val"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["mix1"].node.setInput(
          "blend",
          lineBasicBuilder_NON_OPTIMISED_nodes["fitFrom01_1"].node,
          "val"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["mix2"].node.setInput(
          "value0",
          lineBasicBuilder_NON_OPTIMISED_nodes["mix1"].node,
          "mix"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["mix2"].node.setInput(
          "value1",
          lineBasicBuilder_NON_OPTIMISED_nodes["constant3"].node,
          "val"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["mix2"].node.setInput(
          "blend",
          lineBasicBuilder_NON_OPTIMISED_nodes["smoothstep1"].node,
          "val"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["noise1"].node.setInput(
          "position",
          lineBasicBuilder_NON_OPTIMISED_nodes["attribute1"].node,
          "val"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["output1"].node.setInput(
          "position",
          lineBasicBuilder_NON_OPTIMISED_nodes["subnet_noise"].node,
          "input0"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["output1"].node.setInput(
          "color",
          lineBasicBuilder_NON_OPTIMISED_nodes["varyingRead1"].node,
          "fragment"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["smoothstep1"].node.setInput(
          "x",
          lineBasicBuilder_NON_OPTIMISED_nodes["noise1"].node,
          "noise"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["subnet_noise"].node.setInput(
          "input0",
          lineBasicBuilder_NON_OPTIMISED_nodes["instanceTransform1"].node,
          "position"
        );
        lineBasicBuilder_NON_OPTIMISED_nodes["varyingWrite1"].node.setInput(
          "vertex",
          lineBasicBuilder_NON_OPTIMISED_nodes["mix2"].node,
          "mix"
        );
        lineBasicBuilder_NON_OPTIMISED.uiData.setPosition(0, 100);
        lineBasicBuilder_NON_OPTIMISED.p.linewidth.set(6.5);
        lineBasicBuilder_NON_OPTIMISED.params.postCreateSpareParams();
        lineBasicBuilder_NON_OPTIMISED.params.runOnSceneLoadHooks();
        return { node: lineBasicBuilder_NON_OPTIMISED, children: lineBasicBuilder_NON_OPTIMISED_nodes };
      }
      function create_lineBasicBuilder_OPTIMISED(MAT2) {
        var lineBasicBuilder_OPTIMISED = MAT2.createNode("lineBasicBuilder");
        lineBasicBuilder_OPTIMISED.setName("lineBasicBuilder_OPTIMISED");
        const lineBasicBuilder_OPTIMISED_nodes = {};
        function create_add1(lineBasicBuilder_OPTIMISED2) {
          var add1 = lineBasicBuilder_OPTIMISED2.createNode("add");
          add1.setName("add1");
          const add1_nodes = {};
          add1.uiData.setPosition(350, -400);
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], { spare: true, editable: false });
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], { spare: true, editable: false });
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add2", [0, 0, 0], { spare: true, editable: true });
          add1.params.postCreateSpareParams();
          add1.params.runOnSceneLoadHooks();
          return { node: add1, children: add1_nodes };
        }
        function create_attribute2(lineBasicBuilder_OPTIMISED2) {
          var attribute2 = lineBasicBuilder_OPTIMISED2.createNode("attribute");
          attribute2.setName("attribute2");
          const attribute2_nodes = {};
          attribute2.uiData.setPosition(-750, 500);
          attribute2.p.name.set("ptn");
          attribute2.params.postCreateSpareParams();
          attribute2.params.runOnSceneLoadHooks();
          return { node: attribute2, children: attribute2_nodes };
        }
        function create_attribute3(lineBasicBuilder_OPTIMISED2) {
          var attribute3 = lineBasicBuilder_OPTIMISED2.createNode("attribute");
          attribute3.setName("attribute3");
          const attribute3_nodes = {};
          attribute3.uiData.setPosition(-800, -50);
          attribute3.p.name.set("ptn");
          attribute3.params.postCreateSpareParams();
          attribute3.params.runOnSceneLoadHooks();
          return { node: attribute3, children: attribute3_nodes };
        }
        function create_attribute4(lineBasicBuilder_OPTIMISED2) {
          var attribute4 = lineBasicBuilder_OPTIMISED2.createNode("attribute");
          attribute4.setName("attribute4");
          const attribute4_nodes = {};
          attribute4.uiData.setPosition(-800, -200);
          attribute4.p.name.set("ptuv");
          attribute4.p.type.set(1);
          attribute4.params.postCreateSpareParams();
          attribute4.params.runOnSceneLoadHooks();
          return { node: attribute4, children: attribute4_nodes };
        }
        function create_constant1(lineBasicBuilder_OPTIMISED2) {
          var constant1 = lineBasicBuilder_OPTIMISED2.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-750, 300);
          constant1.p.type.set(4);
          constant1.p.color.set([0.011764705882352941, 0.10980392156862745, 0.01568627450980392]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(lineBasicBuilder_OPTIMISED2) {
          var constant2 = lineBasicBuilder_OPTIMISED2.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-750, 400);
          constant2.p.type.set(4);
          constant2.p.color.set([0.25098039215686274, 0.4392156862745098, 0.06274509803921569]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_constant4(lineBasicBuilder_OPTIMISED2) {
          var constant4 = lineBasicBuilder_OPTIMISED2.createNode("constant");
          constant4.setName("constant4");
          const constant4_nodes = {};
          constant4.uiData.setPosition(-350, 0);
          constant4.p.float.set(0.15);
          constant4.params.postCreateSpareParams();
          constant4.params.runOnSceneLoadHooks();
          return { node: constant4, children: constant4_nodes };
        }
        function create_fitFrom01_1(lineBasicBuilder_OPTIMISED2) {
          var fitFrom01_1 = lineBasicBuilder_OPTIMISED2.createNode("fitFrom01");
          fitFrom01_1.setName("fitFrom01_1");
          const fitFrom01_1_nodes = {};
          fitFrom01_1.uiData.setPosition(-600, 500);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fitFrom01_1.params.get("destMin").set(-0.1);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fitFrom01_1.params.postCreateSpareParams();
          fitFrom01_1.params.runOnSceneLoadHooks();
          return { node: fitFrom01_1, children: fitFrom01_1_nodes };
        }
        function create_floatToInt1(lineBasicBuilder_OPTIMISED2) {
          var floatToInt1 = lineBasicBuilder_OPTIMISED2.createNode("floatToInt");
          floatToInt1.setName("floatToInt1");
          const floatToInt1_nodes = {};
          floatToInt1.uiData.setPosition(-550, -50);
          floatToInt1.params.postCreateSpareParams();
          floatToInt1.params.runOnSceneLoadHooks();
          return { node: floatToInt1, children: floatToInt1_nodes };
        }
        function create_floatToVec3_1(lineBasicBuilder_OPTIMISED2) {
          var floatToVec3_1 = lineBasicBuilder_OPTIMISED2.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(-250, 0);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_globals1(lineBasicBuilder_OPTIMISED2) {
          var globals1 = lineBasicBuilder_OPTIMISED2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-900, -200);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_globals2(lineBasicBuilder_OPTIMISED2) {
          var globals2 = lineBasicBuilder_OPTIMISED2.createNode("globals");
          globals2.setName("globals2");
          const globals2_nodes = {};
          globals2.uiData.setPosition(-550, -550);
          globals2.params.postCreateSpareParams();
          globals2.params.runOnSceneLoadHooks();
          return { node: globals2, children: globals2_nodes };
        }
        function create_instanceTransform1(lineBasicBuilder_OPTIMISED2) {
          var instanceTransform1 = lineBasicBuilder_OPTIMISED2.createNode("instanceTransform");
          instanceTransform1.setName("instanceTransform1");
          const instanceTransform1_nodes = {};
          instanceTransform1.uiData.setPosition(150, -600);
          instanceTransform1.params.postCreateSpareParams();
          instanceTransform1.params.runOnSceneLoadHooks();
          return { node: instanceTransform1, children: instanceTransform1_nodes };
        }
        function create_mix1(lineBasicBuilder_OPTIMISED2) {
          var mix1 = lineBasicBuilder_OPTIMISED2.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(-350, 350);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.get("blend").set(0.65);
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_multAdd1(lineBasicBuilder_OPTIMISED2) {
          var multAdd1 = lineBasicBuilder_OPTIMISED2.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-650, -50);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.params.get("mult").set(4);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_multAdd2(lineBasicBuilder_OPTIMISED2) {
          var multAdd2 = lineBasicBuilder_OPTIMISED2.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(-100, -200);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [0, 0, 0], { spare: true, editable: false });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "preAdd", [0, 0, 0], { spare: true, editable: true });
          multAdd2.params.get("preAdd").set([-0.5, -0.5, -0.5]);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "mult", [1, 1, 1], { spare: true, editable: false });
          multAdd2.params.get("mult").set([2, 2, 2]);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "postAdd", [0, 0, 0], { spare: true, editable: true });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_multAdd3(lineBasicBuilder_OPTIMISED2) {
          var multAdd3 = lineBasicBuilder_OPTIMISED2.createNode("multAdd");
          multAdd3.setName("multAdd3");
          const multAdd3_nodes = {};
          multAdd3.uiData.setPosition(-200, -450);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd3.params.get("preAdd").set(-0.5);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd3.params.get("mult").set(2);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd3.params.get("postAdd").set(1.6);
          multAdd3.params.postCreateSpareParams();
          multAdd3.params.runOnSceneLoadHooks();
          return { node: multAdd3, children: multAdd3_nodes };
        }
        function create_multScalar1(lineBasicBuilder_OPTIMISED2) {
          var multScalar1 = lineBasicBuilder_OPTIMISED2.createNode("multScalar");
          multScalar1.setName("multScalar1");
          const multScalar1_nodes = {};
          multScalar1.uiData.setPosition(-100, -550);
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: false });
          multScalar1.params.postCreateSpareParams();
          multScalar1.params.runOnSceneLoadHooks();
          return { node: multScalar1, children: multScalar1_nodes };
        }
        function create_output1(lineBasicBuilder_OPTIMISED2) {
          var output1 = lineBasicBuilder_OPTIMISED2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(650, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_texture2DArray1(lineBasicBuilder_OPTIMISED2) {
          var texture2DArray1 = lineBasicBuilder_OPTIMISED2.createNode("texture2DArray");
          texture2DArray1.setName("texture2DArray1");
          const texture2DArray1_nodes = {};
          texture2DArray1.uiData.setPosition(-400, -200);
          texture2DArray1.p.layer.set(1);
          texture2DArray1.params.postCreateSpareParams();
          texture2DArray1.params.runOnSceneLoadHooks();
          return { node: texture2DArray1, children: texture2DArray1_nodes };
        }
        function create_vec2ToVec3_1(lineBasicBuilder_OPTIMISED2) {
          var vec2ToVec3_1 = lineBasicBuilder_OPTIMISED2.createNode("vec2ToVec3");
          vec2ToVec3_1.setName("vec2ToVec3_1");
          const vec2ToVec3_1_nodes = {};
          vec2ToVec3_1.uiData.setPosition(-550, -150);
          vec2ToVec3_1.params.postCreateSpareParams();
          vec2ToVec3_1.params.runOnSceneLoadHooks();
          return { node: vec2ToVec3_1, children: vec2ToVec3_1_nodes };
        }
        function create_vec4ToVec3_1(lineBasicBuilder_OPTIMISED2) {
          var vec4ToVec3_1 = lineBasicBuilder_OPTIMISED2.createNode("vec4ToVec3");
          vec4ToVec3_1.setName("vec4ToVec3_1");
          const vec4ToVec3_1_nodes = {};
          vec4ToVec3_1.uiData.setPosition(-250, -200);
          vec4ToVec3_1.params.postCreateSpareParams();
          vec4ToVec3_1.params.runOnSceneLoadHooks();
          return { node: vec4ToVec3_1, children: vec4ToVec3_1_nodes };
        }
        lineBasicBuilder_OPTIMISED_nodes["add1"] = create_add1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["attribute2"] = create_attribute2(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["attribute3"] = create_attribute3(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["attribute4"] = create_attribute4(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["constant1"] = create_constant1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["constant2"] = create_constant2(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["constant4"] = create_constant4(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["fitFrom01_1"] = create_fitFrom01_1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["floatToInt1"] = create_floatToInt1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["floatToVec3_1"] = create_floatToVec3_1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["globals1"] = create_globals1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["globals2"] = create_globals2(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["instanceTransform1"] = create_instanceTransform1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["mix1"] = create_mix1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["multAdd1"] = create_multAdd1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["multAdd2"] = create_multAdd2(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["multAdd3"] = create_multAdd3(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["multScalar1"] = create_multScalar1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["output1"] = create_output1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["texture2DArray1"] = create_texture2DArray1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["vec2ToVec3_1"] = create_vec2ToVec3_1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["vec4ToVec3_1"] = create_vec4ToVec3_1(lineBasicBuilder_OPTIMISED);
        lineBasicBuilder_OPTIMISED_nodes["add1"].node.setInput(
          "add0",
          lineBasicBuilder_OPTIMISED_nodes["instanceTransform1"].node,
          "position"
        );
        lineBasicBuilder_OPTIMISED_nodes["add1"].node.setInput(
          "add1",
          lineBasicBuilder_OPTIMISED_nodes["multAdd2"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["fitFrom01_1"].node.setInput(
          "val",
          lineBasicBuilder_OPTIMISED_nodes["attribute2"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["floatToInt1"].node.setInput(
          "float",
          lineBasicBuilder_OPTIMISED_nodes["multAdd1"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["floatToVec3_1"].node.setInput(
          "x",
          lineBasicBuilder_OPTIMISED_nodes["constant4"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["floatToVec3_1"].node.setInput(
          "y",
          lineBasicBuilder_OPTIMISED_nodes["constant4"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["floatToVec3_1"].node.setInput(
          "z",
          lineBasicBuilder_OPTIMISED_nodes["constant4"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["instanceTransform1"].node.setInput(
          "position",
          lineBasicBuilder_OPTIMISED_nodes["multScalar1"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["mix1"].node.setInput(
          "value0",
          lineBasicBuilder_OPTIMISED_nodes["constant1"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["mix1"].node.setInput(
          "value1",
          lineBasicBuilder_OPTIMISED_nodes["constant2"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["mix1"].node.setInput(
          "blend",
          lineBasicBuilder_OPTIMISED_nodes["fitFrom01_1"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["multAdd1"].node.setInput(
          "value",
          lineBasicBuilder_OPTIMISED_nodes["attribute3"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["multAdd2"].node.setInput(
          "value",
          lineBasicBuilder_OPTIMISED_nodes["vec4ToVec3_1"].node,
          "vec3"
        );
        lineBasicBuilder_OPTIMISED_nodes["multAdd2"].node.setInput(
          "mult",
          lineBasicBuilder_OPTIMISED_nodes["floatToVec3_1"].node,
          "vec3"
        );
        lineBasicBuilder_OPTIMISED_nodes["multAdd3"].node.setInput(
          "value",
          lineBasicBuilder_OPTIMISED_nodes["vec4ToVec3_1"].node,
          "w"
        );
        lineBasicBuilder_OPTIMISED_nodes["multScalar1"].node.setInput(
          "value",
          lineBasicBuilder_OPTIMISED_nodes["globals2"].node,
          "position"
        );
        lineBasicBuilder_OPTIMISED_nodes["multScalar1"].node.setInput(
          "mult",
          lineBasicBuilder_OPTIMISED_nodes["multAdd3"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["output1"].node.setInput(
          "position",
          lineBasicBuilder_OPTIMISED_nodes["add1"].node,
          "sum"
        );
        lineBasicBuilder_OPTIMISED_nodes["output1"].node.setInput(
          "color",
          lineBasicBuilder_OPTIMISED_nodes["mix1"].node,
          "mix"
        );
        lineBasicBuilder_OPTIMISED_nodes["texture2DArray1"].node.setInput(
          "uv",
          lineBasicBuilder_OPTIMISED_nodes["attribute4"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["texture2DArray1"].node.setInput(
          "layer",
          lineBasicBuilder_OPTIMISED_nodes["floatToInt1"].node,
          "int"
        );
        lineBasicBuilder_OPTIMISED_nodes["vec2ToVec3_1"].node.setInput(
          "vec2",
          lineBasicBuilder_OPTIMISED_nodes["attribute4"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["vec2ToVec3_1"].node.setInput(
          "z",
          lineBasicBuilder_OPTIMISED_nodes["multAdd1"].node,
          "val"
        );
        lineBasicBuilder_OPTIMISED_nodes["vec4ToVec3_1"].node.setInput(
          "vec4",
          lineBasicBuilder_OPTIMISED_nodes["texture2DArray1"].node,
          "rgba"
        );
        lineBasicBuilder_OPTIMISED.uiData.setPosition(0, 0);
        lineBasicBuilder_OPTIMISED.p.linewidth.set(6.5);
        lineBasicBuilder_OPTIMISED.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "texture3D1", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.COP */ .sy.COP }
        });
        lineBasicBuilder_OPTIMISED.params.get("texture3D1").set("../../../COP/builder2DArray1");
        lineBasicBuilder_OPTIMISED.params.get("texture3D1").options.setOption("nodeSelection", { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.COP */ .sy.COP });
        lineBasicBuilder_OPTIMISED.params.get("texture3D1").options.setOption("editable", void 0);
        lineBasicBuilder_OPTIMISED.params.postCreateSpareParams();
        lineBasicBuilder_OPTIMISED.params.runOnSceneLoadHooks();
        return { node: lineBasicBuilder_OPTIMISED, children: lineBasicBuilder_OPTIMISED_nodes };
      }
      function create_meshBasic_GROUND(MAT2) {
        var meshBasic_GROUND = MAT2.createNode("meshBasic");
        meshBasic_GROUND.setName("meshBasic_GROUND");
        const meshBasic_GROUND_nodes = {};
        meshBasic_GROUND.uiData.setPosition(0, 250);
        meshBasic_GROUND.p.color.set([0.06274509803921569, 0.20392156862745098, 0.03529411764705882]);
        meshBasic_GROUND.params.postCreateSpareParams();
        meshBasic_GROUND.params.runOnSceneLoadHooks();
        return { node: meshBasic_GROUND, children: meshBasic_GROUND_nodes };
      }
      MAT_nodes["lineBasicBuilder_NON_OPTIMISED"] = create_lineBasicBuilder_NON_OPTIMISED(MAT);
      MAT_nodes["lineBasicBuilder_OPTIMISED"] = create_lineBasicBuilder_OPTIMISED(MAT);
      MAT_nodes["meshBasic_GROUND"] = create_meshBasic_GROUND(MAT);
      MAT.uiData.setPosition(-450, 500);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_attribId1(grass2) {
      var attribId1 = grass2.createNode("attribId");
      attribId1.setName("attribId1");
      const attribId1_nodes = {};
      attribId1.uiData.setPosition(-350, 300);
      attribId1.p.id.set(false);
      attribId1.p.idName.set("pt");
      attribId1.p.idnName.set("ptn");
      attribId1.params.postCreateSpareParams();
      attribId1.params.runOnSceneLoadHooks();
      return { node: attribId1, children: attribId1_nodes };
    }
    function create_attribRename1(grass2) {
      var attribRename1 = grass2.createNode("attribRename");
      attribRename1.setName("attribRename1");
      const attribRename1_nodes = {};
      attribRename1.uiData.setPosition(-50, 350);
      attribRename1.p.oldName.set("uv");
      attribRename1.p.newName.set("ptuv");
      attribRename1.params.postCreateSpareParams();
      attribRename1.params.runOnSceneLoadHooks();
      return { node: attribRename1, children: attribRename1_nodes };
    }
    function create_instance1(grass2) {
      var instance1 = grass2.createNode("instance");
      instance1.setName("instance1");
      const instance1_nodes = {};
      instance1.uiData.setComment(
        "this demo includes 2 different shaders for the grass. the one currently displayed is optimised, as it reads the noise from a 3D texture. But that comes at a visual cost, as there is less variation in that noise."
      );
      instance1.uiData.setPosition(-300, 600);
      instance1.flags.display.set(true);
      instance1.p.attributesToCopy.set("instance* id* ptn ptuv");
      instance1.p.material.set("../MAT/lineBasicBuilder_OPTIMISED");
      instance1.params.postCreateSpareParams();
      instance1.params.runOnSceneLoadHooks();
      return { node: instance1, children: instance1_nodes };
    }
    function create_instance2(grass2) {
      var instance2 = grass2.createNode("instance");
      instance2.setName("instance2");
      const instance2_nodes = {};
      instance2.uiData.setComment(
        "If you set the display flag on that node, you can see the less optimised, but nicer grass. It is less optimised as the noise is calculated for every vertex, and not inside a texture. But that allows nicer variation."
      );
      instance2.uiData.setPosition(100, 600);
      instance2.p.attributesToCopy.set("instance* id* ptn ptuv");
      instance2.p.material.set("../MAT/lineBasicBuilder_NON_OPTIMISED");
      instance2.params.postCreateSpareParams();
      instance2.params.runOnSceneLoadHooks();
      return { node: instance2, children: instance2_nodes };
    }
    function create_line1(grass2) {
      var line1 = grass2.createNode("line");
      line1.setName("line1");
      const line1_nodes = {};
      line1.uiData.setPosition(-350, 100);
      line1.p.pointsCount.set(5);
      line1.p.direction.set([0, 0, 1]);
      line1.params.postCreateSpareParams();
      line1.params.runOnSceneLoadHooks();
      return { node: line1, children: line1_nodes };
    }
    function create_objectMerge1(grass2) {
      var objectMerge1 = grass2.createNode("objectMerge");
      objectMerge1.setName("objectMerge1");
      const objectMerge1_nodes = {};
      objectMerge1.uiData.setPosition(-50, 50);
      objectMerge1.p.geometry.set("../../ground/OUT");
      objectMerge1.params.postCreateSpareParams();
      objectMerge1.params.runOnSceneLoadHooks();
      return { node: objectMerge1, children: objectMerge1_nodes };
    }
    function create_scatter1(grass2) {
      var scatter1 = grass2.createNode("scatter");
      scatter1.setName("scatter1");
      const scatter1_nodes = {};
      scatter1.uiData.setPosition(-50, 200);
      scatter1.p.pointsCount.set(2e5);
      scatter1.p.transferAttributes.set(true);
      scatter1.p.attributesToTransfer.set("uv");
      scatter1.params.postCreateSpareParams();
      scatter1.params.runOnSceneLoadHooks();
      return { node: scatter1, children: scatter1_nodes };
    }
    grass_nodes["MAT"] = create_MAT(grass);
    grass_nodes["attribId1"] = create_attribId1(grass);
    grass_nodes["attribRename1"] = create_attribRename1(grass);
    grass_nodes["instance1"] = create_instance1(grass);
    grass_nodes["instance2"] = create_instance2(grass);
    grass_nodes["line1"] = create_line1(grass);
    grass_nodes["objectMerge1"] = create_objectMerge1(grass);
    grass_nodes["scatter1"] = create_scatter1(grass);
    grass_nodes["attribId1"].node.setInput(0, grass_nodes["line1"].node);
    grass_nodes["attribRename1"].node.setInput(0, grass_nodes["scatter1"].node);
    grass_nodes["instance1"].node.setInput(0, grass_nodes["attribId1"].node);
    grass_nodes["instance1"].node.setInput(1, grass_nodes["attribRename1"].node);
    grass_nodes["instance2"].node.setInput(0, grass_nodes["attribId1"].node);
    grass_nodes["instance2"].node.setInput(1, grass_nodes["attribRename1"].node);
    grass_nodes["scatter1"].node.setInput(0, grass_nodes["objectMerge1"].node);
    grass.uiData.setPosition(50, 50);
    grass.flags.display.set(true);
    grass.params.postCreateSpareParams();
    grass.params.runOnSceneLoadHooks();
    return { node: grass, children: grass_nodes };
  }
  function create_deer(parentNode) {
    var deer = parentNode.createNode("geo");
    deer.setName("deer");
    const deer_nodes = {};
    function create_MAT(deer2) {
      var MAT = deer2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshLambertBuilder_INSTANCES(MAT2) {
        var meshLambertBuilder_INSTANCES = MAT2.createNode("meshLambertBuilder");
        meshLambertBuilder_INSTANCES.setName("meshLambertBuilder_INSTANCES");
        const meshLambertBuilder_INSTANCES_nodes = {};
        function create_constant1(meshLambertBuilder_INSTANCES2) {
          var constant1 = meshLambertBuilder_INSTANCES2.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(0, 250);
          constant1.p.type.set(4);
          constant1.p.color.set([0.41568627450980394, 0.17254901960784313, 0.043137254901960784]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_globals1(meshLambertBuilder_INSTANCES2) {
          var globals1 = meshLambertBuilder_INSTANCES2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-200, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_instanceTransform1(meshLambertBuilder_INSTANCES2) {
          var instanceTransform1 = meshLambertBuilder_INSTANCES2.createNode("instanceTransform");
          instanceTransform1.setName("instanceTransform1");
          const instanceTransform1_nodes = {};
          instanceTransform1.uiData.setPosition(0, 0);
          instanceTransform1.params.postCreateSpareParams();
          instanceTransform1.params.runOnSceneLoadHooks();
          return { node: instanceTransform1, children: instanceTransform1_nodes };
        }
        function create_output1(meshLambertBuilder_INSTANCES2) {
          var output1 = meshLambertBuilder_INSTANCES2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        meshLambertBuilder_INSTANCES_nodes["constant1"] = create_constant1(meshLambertBuilder_INSTANCES);
        meshLambertBuilder_INSTANCES_nodes["globals1"] = create_globals1(meshLambertBuilder_INSTANCES);
        meshLambertBuilder_INSTANCES_nodes["instanceTransform1"] = create_instanceTransform1(meshLambertBuilder_INSTANCES);
        meshLambertBuilder_INSTANCES_nodes["output1"] = create_output1(meshLambertBuilder_INSTANCES);
        meshLambertBuilder_INSTANCES_nodes["output1"].node.setInput(
          "position",
          meshLambertBuilder_INSTANCES_nodes["instanceTransform1"].node,
          "position"
        );
        meshLambertBuilder_INSTANCES_nodes["output1"].node.setInput(
          "normal",
          meshLambertBuilder_INSTANCES_nodes["instanceTransform1"].node,
          "normal"
        );
        meshLambertBuilder_INSTANCES_nodes["output1"].node.setInput(
          "color",
          meshLambertBuilder_INSTANCES_nodes["constant1"].node,
          "val"
        );
        meshLambertBuilder_INSTANCES.uiData.setPosition(0, 0);
        meshLambertBuilder_INSTANCES.params.postCreateSpareParams();
        meshLambertBuilder_INSTANCES.params.runOnSceneLoadHooks();
        return { node: meshLambertBuilder_INSTANCES, children: meshLambertBuilder_INSTANCES_nodes };
      }
      MAT_nodes["meshLambertBuilder_INSTANCES"] = create_meshLambertBuilder_INSTANCES(MAT);
      MAT.uiData.setPosition(-400, 550);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_fileOBJ1(deer2) {
      var fileOBJ1 = deer2.createNode("fileOBJ");
      fileOBJ1.setName("fileOBJ1");
      const fileOBJ1_nodes = {};
      fileOBJ1.uiData.setPosition(-350, -100);
      fileOBJ1.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/deer.obj");
      fileOBJ1.params.postCreateSpareParams();
      fileOBJ1.params.runOnSceneLoadHooks();
      return { node: fileOBJ1, children: fileOBJ1_nodes };
    }
    function create_hierarchy1(deer2) {
      var hierarchy1 = deer2.createNode("hierarchy");
      hierarchy1.setName("hierarchy1");
      const hierarchy1_nodes = {};
      hierarchy1.uiData.setPosition(-350, 50);
      hierarchy1.p.mode.set(1);
      hierarchy1.params.postCreateSpareParams();
      hierarchy1.params.runOnSceneLoadHooks();
      return { node: hierarchy1, children: hierarchy1_nodes };
    }
    function create_instance1(deer2) {
      var instance1 = deer2.createNode("instance");
      instance1.setName("instance1");
      const instance1_nodes = {};
      instance1.uiData.setPosition(-50, 500);
      instance1.flags.display.set(true);
      instance1.p.material.set("../MAT/meshLambertBuilder_INSTANCES");
      instance1.params.postCreateSpareParams();
      instance1.params.runOnSceneLoadHooks();
      return { node: instance1, children: instance1_nodes };
    }
    function create_objectMerge1(deer2) {
      var objectMerge1 = deer2.createNode("objectMerge");
      objectMerge1.setName("objectMerge1");
      const objectMerge1_nodes = {};
      objectMerge1.uiData.setPosition(100, 100);
      objectMerge1.p.geometry.set("../../ground/OUT");
      objectMerge1.params.postCreateSpareParams();
      objectMerge1.params.runOnSceneLoadHooks();
      return { node: objectMerge1, children: objectMerge1_nodes };
    }
    function create_scatter1(deer2) {
      var scatter1 = deer2.createNode("scatter");
      scatter1.setName("scatter1");
      const scatter1_nodes = {};
      scatter1.uiData.setPosition(100, 300);
      scatter1.p.pointsCount.set(21);
      scatter1.p.seed.set(4);
      scatter1.params.postCreateSpareParams();
      scatter1.params.runOnSceneLoadHooks();
      return { node: scatter1, children: scatter1_nodes };
    }
    function create_transform1(deer2) {
      var transform1 = deer2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-350, 200);
      transform1.p.scale.set(4e-3);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_transform2(deer2) {
      var transform2 = deer2.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setPosition(-350, 350);
      transform2.p.r.set([90, 0, 0]);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    deer_nodes["MAT"] = create_MAT(deer);
    deer_nodes["fileOBJ1"] = create_fileOBJ1(deer);
    deer_nodes["hierarchy1"] = create_hierarchy1(deer);
    deer_nodes["instance1"] = create_instance1(deer);
    deer_nodes["objectMerge1"] = create_objectMerge1(deer);
    deer_nodes["scatter1"] = create_scatter1(deer);
    deer_nodes["transform1"] = create_transform1(deer);
    deer_nodes["transform2"] = create_transform2(deer);
    deer_nodes["hierarchy1"].node.setInput(0, deer_nodes["fileOBJ1"].node);
    deer_nodes["instance1"].node.setInput(0, deer_nodes["transform2"].node);
    deer_nodes["instance1"].node.setInput(1, deer_nodes["scatter1"].node);
    deer_nodes["scatter1"].node.setInput(0, deer_nodes["objectMerge1"].node);
    deer_nodes["transform1"].node.setInput(0, deer_nodes["hierarchy1"].node);
    deer_nodes["transform2"].node.setInput(0, deer_nodes["transform1"].node);
    deer.uiData.setPosition(50, -50);
    deer.flags.display.set(true);
    deer.params.postCreateSpareParams();
    deer.params.runOnSceneLoadHooks();
    return { node: deer, children: deer_nodes };
  }
  function create_sky(parentNode) {
    var sky = parentNode.createNode("geo");
    sky.setName("sky");
    const sky_nodes = {};
    function create_MAT(sky2) {
      var MAT = sky2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_sky1(MAT2) {
        var sky1 = MAT2.createNode("sky");
        sky1.setName("sky1");
        const sky1_nodes = {};
        sky1.uiData.setPosition(-50, 100);
        sky1.params.postCreateSpareParams();
        sky1.params.runOnSceneLoadHooks();
        return { node: sky1, children: sky1_nodes };
      }
      MAT_nodes["sky1"] = create_sky1(MAT);
      MAT.uiData.setPosition(-350, 350);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(sky2) {
      var material1 = sky2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setComment("here we assign the sky material to the sphere");
      material1.uiData.setPosition(-150, 350);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/sky1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_sphere1(sky2) {
      var sphere1 = sky2.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setComment(
        "in order to have a sky that always appears to be far enough, we set the radius of the sphere to a large value, like 1000 in this case.\n\nThe material is set with depthWrite=false, so the far plane of the camera can remain closer than the radius."
      );
      sphere1.uiData.setPosition(-150, -100);
      sphere1.p.radius.set(1e3);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    sky_nodes["MAT"] = create_MAT(sky);
    sky_nodes["material1"] = create_material1(sky);
    sky_nodes["sphere1"] = create_sphere1(sky);
    sky_nodes["material1"].node.setInput(0, sky_nodes["sphere1"].node);
    sky.uiData.setPosition(50, -350);
    sky.flags.display.set(true);
    sky.params.postCreateSpareParams();
    sky.params.runOnSceneLoadHooks();
    return { node: sky, children: sky_nodes };
  }
  function create_ground(parentNode) {
    var ground = parentNode.createNode("geo");
    ground.setName("ground");
    const ground_nodes = {};
    function create_BVH1(ground2) {
      var BVH1 = ground2.createNode("BVH");
      BVH1.setName("BVH1");
      const BVH1_nodes = {};
      BVH1.uiData.setPosition(250, 450);
      BVH1.params.postCreateSpareParams();
      BVH1.params.runOnSceneLoadHooks();
      return { node: BVH1, children: BVH1_nodes };
    }
    function create_MAT(ground2) {
      var MAT = ground2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshBasic_GROUND(MAT2) {
        var meshBasic_GROUND = MAT2.createNode("meshBasic");
        meshBasic_GROUND.setName("meshBasic_GROUND");
        const meshBasic_GROUND_nodes = {};
        meshBasic_GROUND.uiData.setPosition(0, 200);
        meshBasic_GROUND.p.color.set([0.06274509803921569, 0.20392156862745098, 0.03529411764705882]);
        meshBasic_GROUND.params.postCreateSpareParams();
        meshBasic_GROUND.params.runOnSceneLoadHooks();
        return { node: meshBasic_GROUND, children: meshBasic_GROUND_nodes };
      }
      MAT_nodes["meshBasic_GROUND"] = create_meshBasic_GROUND(MAT);
      MAT.uiData.setPosition(-400, 400);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_OUT(ground2) {
      var OUT = ground2.createNode("null");
      OUT.setName("OUT");
      const OUT_nodes = {};
      OUT.uiData.setPosition(0, 300);
      OUT.params.postCreateSpareParams();
      OUT.params.runOnSceneLoadHooks();
      return { node: OUT, children: OUT_nodes };
    }
    function create_material1(ground2) {
      var material1 = ground2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 450);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshBasic_GROUND");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_noise1(ground2) {
      var noise1 = ground2.createNode("noise");
      noise1.setName("noise1");
      const noise1_nodes = {};
      noise1.uiData.setPosition(0, 50);
      noise1.p.amplitude.set(4.9);
      noise1.p.freq.set([-0.0060000000000000366, -0.0060000000000000366, -0.0060000000000000366]);
      noise1.p.offset.set([0, 0, 26.7]);
      noise1.p.useNormals.set(true);
      noise1.params.postCreateSpareParams();
      noise1.params.runOnSceneLoadHooks();
      return { node: noise1, children: noise1_nodes };
    }
    function create_plane1(ground2) {
      var plane1 = ground2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(0, -100);
      plane1.p.size.set([100, 100]);
      plane1.p.stepSize.set(1.2);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    function create_transform1(ground2) {
      var transform1 = ground2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(0, 150);
      transform1.p.t.set([0, 2.9124666555513055, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    ground_nodes["BVH1"] = create_BVH1(ground);
    ground_nodes["MAT"] = create_MAT(ground);
    ground_nodes["OUT"] = create_OUT(ground);
    ground_nodes["material1"] = create_material1(ground);
    ground_nodes["noise1"] = create_noise1(ground);
    ground_nodes["plane1"] = create_plane1(ground);
    ground_nodes["transform1"] = create_transform1(ground);
    ground_nodes["BVH1"].node.setInput(0, ground_nodes["OUT"].node);
    ground_nodes["OUT"].node.setInput(0, ground_nodes["transform1"].node);
    ground_nodes["material1"].node.setInput(0, ground_nodes["OUT"].node);
    ground_nodes["noise1"].node.setInput(0, ground_nodes["plane1"].node);
    ground_nodes["transform1"].node.setInput(0, ground_nodes["noise1"].node);
    ground.uiData.setPosition(50, -150);
    ground.flags.display.set(true);
    ground.params.postCreateSpareParams();
    ground.params.runOnSceneLoadHooks();
    return { node: ground, children: ground_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-2.2722008611214197, -4.837105783327925, -5.831399653270125]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      cameraControls1.uiData.setPosition(-250, 0);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraControls2(cameras2) {
      var cameraControls2 = cameras2.createNode("cameraControls");
      cameraControls2.setName("cameraControls2");
      const cameraControls2_nodes = {};
      function create_firstPersonControls1(cameraControls22) {
        var firstPersonControls1 = cameraControls22.createNode("firstPersonControls");
        firstPersonControls1.setName("firstPersonControls1");
        const firstPersonControls1_nodes = {};
        firstPersonControls1.uiData.setPosition(-50, 100);
        firstPersonControls1.p.colliderObject.set("../../../ground/BVH1");
        firstPersonControls1.p.capsuleHeight.set(2.3);
        firstPersonControls1.p.translateSpeed.set(2.8);
        firstPersonControls1.p.jumpStrength.set(33);
        firstPersonControls1.p.runSpeedMult.set(3.5);
        firstPersonControls1.p.startPosition.set([2, 8, 2]);
        firstPersonControls1.params.postCreateSpareParams();
        firstPersonControls1.params.runOnSceneLoadHooks();
        return { node: firstPersonControls1, children: firstPersonControls1_nodes };
      }
      cameraControls2_nodes["firstPersonControls1"] = create_firstPersonControls1(cameraControls2);
      cameraControls2.uiData.setPosition(100, 0);
      cameraControls2.p.node.set("firstPersonControls1");
      cameraControls2.params.postCreateSpareParams();
      cameraControls2.params.runOnSceneLoadHooks();
      return { node: cameraControls2, children: cameraControls2_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-50, 250);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera_DEFAULT(cameras2) {
      var perspectiveCamera_DEFAULT = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEFAULT.setName("perspectiveCamera_DEFAULT");
      const perspectiveCamera_DEFAULT_nodes = {};
      perspectiveCamera_DEFAULT.uiData.setPosition(-250, -150);
      perspectiveCamera_DEFAULT.p.position.set([38.209757624522666, 5.765865527128806, 17.396731045118557]);
      perspectiveCamera_DEFAULT.p.rotation.set([-20.557631344293608, 67.54394377269432, 19.116007839944945]);
      perspectiveCamera_DEFAULT.params.postCreateSpareParams();
      perspectiveCamera_DEFAULT.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEFAULT, children: perspectiveCamera_DEFAULT_nodes };
    }
    function create_perspectiveCamera_FPS(cameras2) {
      var perspectiveCamera_FPS = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_FPS.setName("perspectiveCamera_FPS");
      const perspectiveCamera_FPS_nodes = {};
      perspectiveCamera_FPS.uiData.setPosition(100, -150);
      perspectiveCamera_FPS.params.postCreateSpareParams();
      perspectiveCamera_FPS.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_FPS, children: perspectiveCamera_FPS_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraControls2"] = create_cameraControls2(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera_DEFAULT"] = create_perspectiveCamera_DEFAULT(cameras);
    cameras_nodes["perspectiveCamera_FPS"] = create_perspectiveCamera_FPS(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_DEFAULT"].node);
    cameras_nodes["cameraControls2"].node.setInput(0, cameras_nodes["perspectiveCamera_FPS"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["cameraControls1"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraControls2"].node);
    cameras.uiData.setPosition(50, 150);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["grass"] = create_grass(root);
  scene_root_nodes["deer"] = create_deer(root);
  scene_root_nodes["sky"] = create_sky(root);
  scene_root_nodes["ground"] = create_ground(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_DEFAULT",
    focusedNodes: scene_root_nodes["grass"].node.nodesByType("instance"),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_LineBasicBuilder_grass_ts.96f631ec6607c9066f46.js.map