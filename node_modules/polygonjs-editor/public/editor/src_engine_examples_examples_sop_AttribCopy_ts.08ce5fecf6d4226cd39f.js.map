{"version":3,"file":"src_engine_examples_examples_sop_AttribCopy_ts.08ce5fecf6d4226cd39f.js","mappings":";;;;;;;;;AAYO,SAAS,yCAAyC,MAAuB;AAE/E,QAAM,qBAAqB,KAAK,WAAW,mBAAmB;AAC9D,qBAAmB,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAEpC,QAAM,UAAU,mBAAmB,WAAW,eAAe;AAC7D,QAAM,iBAAiB,QAAQ,WAAW,qBAAqB;AAC/D,qBAAmB,EAAE,SAAS,QAAQ,cAAc;AAEpD,SAAO,EAAC,mBAAkB;AAC3B;;;;;;;;;;;;;;;ACtB0B;AAE6B;AAEhD,SAAS,WAAW,SAA2C;AACrE,QAAM,EAAC,MAAK,IAAI;AAChB,QAAM,OAAO,MAAM,KAAK;AACxB,QAAM,MAAM,KAAK,WAAW,KAAK;AAEjC,QAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,SAAO,EAAE,OAAO,IAAI,GAAG;AACvB,SAAO,EAAE,OAAO,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC;AAGjC,QAAM,aAAa,IAAI,WAAW,YAAY;AAC9C,aAAW,eAAe,8GAAiB;AAC3C,aAAW,SAAS,GAAG,MAAM;AAC7B,aAAW,EAAE,KAAK,IAAI,IAAI;AAC1B,aAAW,EAAE,SAAS,IAAI,IAAI;AAC9B,aAAW,EAAE,QAAQ,IAAI,UAAU;AAGnC,QAAM,YAAY,IAAI,WAAW,WAAW;AAC5C,YAAU,SAAS,GAAG,UAAU;AAChC,YAAU,EAAE,EAAE,EAAE,IAAI,CAAC;AAGrB,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,SAAS,GAAG,MAAM;AACxB,QAAM,SAAS,GAAG,SAAS;AAC3B,QAAM,MAAM,QAAQ,IAAI,IAAI;AAG5B,OAAK,WAAW,iBAAiB;AAEjC,QAAM,EAAC,mBAAkB,IAAI,gGAAwC,CAAC,IAAI;AAE1E,SAAO;AAAA,IACN;AAAA,IACA,YAAY,mBAAmB,KAAK;AAAA,IACpC,cAAc,CAAC,UAAU;AAAA,IACzB,YAAY;AAAA,EACb;AACD","sources":["webpack:///../src/engine/examples/ExampleUtils.ts","webpack:///../src/engine/examples/examples/sop/AttribCopy.ts"],"sourcesContent":["import type {BaseNodeType} from './../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\nimport type {RootManagerNode} from './../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\n// import {PolyScene} from './../../../@polygonjs/polygonjs/src/engine/scene/PolyScene';\n// export function initDefaultScene(scene: PolyScene) {\n// \tconst root = scene.root();\n\n// \t// create a box and a sphere\n// \tconst geo = root.createNode('geo');\n\n// \treturn {scene, root, geo};\n// }\n\nexport function addPerspectiveCameraOBJWithOrbitControls(root: RootManagerNode) {\n\t// create a camera\n\tconst perspectiveCamera1 = root.createNode('perspectiveCamera');\n\tperspectiveCamera1.p.t.set([5, 5, 5]);\n\t// add orbitControls\n\tconst events1 = perspectiveCamera1.createNode('eventsNetwork');\n\tconst orbitsControls = events1.createNode('cameraOrbitControls');\n\tperspectiveCamera1.p.controls.setNode(orbitsControls);\n\n\treturn {perspectiveCamera1};\n}\n\ninterface ReturnedNodeData {\n\tnode: BaseNodeType;\n\tchildren: Record<string, ReturnedNodeData>;\n}\nexport type ReturnedNodeDataDict = Record<string, ReturnedNodeData>;\n","import {AttribClass} from '../../../../../@polygonjs/polygonjs/src/core/geometry/Constant';\nimport type {ExampleData, DataCallbackOptions} from '../../Common';\nimport {addPerspectiveCameraOBJWithOrbitControls} from '../../ExampleUtils';\n\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst geo = root.createNode('geo');\n\t// create a sphere\n\tconst sphere = geo.createNode('sphere');\n\tsphere.p.radius.set(0.5);\n\tsphere.p.center.set([0.5, 0.5, 0]);\n\n\t// copy the uv to the position\n\tconst attribCopy = geo.createNode('attribCopy');\n\tattribCopy.setAttribClass(AttribClass.POINT);\n\tattribCopy.setInput(0, sphere);\n\tattribCopy.p.name.set('uv');\n\tattribCopy.p.tnewName.set(true);\n\tattribCopy.p.newName.set('position');\n\n\t// flatten the resulting geo\n\tconst transform = geo.createNode('transform');\n\ttransform.setInput(0, attribCopy);\n\ttransform.p.t.z.set(0);\n\n\t// create a blend node to blend from the sphere and its uv projected version\n\tconst blend = geo.createNode('blend');\n\tblend.setInput(0, sphere);\n\tblend.setInput(1, transform);\n\tblend.flags.display.set(true);\n\n\t// add a light\n\troot.createNode('hemisphereLight');\n\n\tconst {perspectiveCamera1} = addPerspectiveCameraOBJWithOrbitControls(root);\n\n\treturn {\n\t\tscene,\n\t\tcameraPath: perspectiveCamera1.path(),\n\t\tfocusedNodes: [attribCopy],\n\t\tautoLayout: true,\n\t};\n}\n// export const sopAttribCopy = [\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_NODE}/sop/attribCopy`,\n// \t\tcreateData,\n// \t\trelatedNodes: [AttribCopySopNode],\n// \t}),\n// ];\n"],"names":[],"sourceRoot":""}