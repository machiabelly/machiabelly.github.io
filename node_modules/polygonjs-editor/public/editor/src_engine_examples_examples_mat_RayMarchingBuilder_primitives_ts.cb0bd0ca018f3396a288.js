(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_primitives_ts"],{

/***/ 83288:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  const scene_root_nodes = {};
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(-100, -200);
      hemisphereLight1.p.intensity.set(0.2);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(50, 150);
      merge1.io.inputs.overrideClonedState(true);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(200, -50);
      polarTransform1.io.inputs.overrideClonedState(true);
      polarTransform1.p.latitude.set(64.8);
      polarTransform1.p.depth.set(5.5);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_spotLight1(lights2) {
      var spotLight1 = lights2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(200, -200);
      spotLight1.p.color.set([0.9725490196078431, 0.9647058823529412, 0.7254901960784313]);
      spotLight1.p.intensity.set(4);
      spotLight1.p.decay.set(1);
      spotLight1.p.penumbra.set(0);
      spotLight1.p.raymarchingPenumbra.set(0);
      spotLight1.p.showHelper.set(true);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["spotLight1"] = create_spotLight1(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["spotLight1"].node);
    lights.uiData.setPosition(-50, -50);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_raymarchedObject(parentNode) {
    var raymarchedObject = parentNode.createNode("geo");
    raymarchedObject.setName("raymarchedObject");
    const raymarchedObject_nodes = {};
    function create_MAT(raymarchedObject2) {
      var MAT = raymarchedObject2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        const rayMarchingBuilder1_nodes = {};
        function create_SDFBox2(rayMarchingBuilder12) {
          var SDFBox2 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox2.setName("SDFBox2");
          const SDFBox2_nodes = {};
          SDFBox2.uiData.setPosition(-650, 300);
          SDFBox2.p.center.set([0, 0, 3]);
          SDFBox2.p.sizes.set([6.6, 2.4, 1.4]);
          SDFBox2.params.postCreateSpareParams();
          SDFBox2.params.runOnSceneLoadHooks();
          return { node: SDFBox2, children: SDFBox2_nodes };
        }
        function create_SDFBox3(rayMarchingBuilder12) {
          var SDFBox3 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox3.setName("SDFBox3");
          const SDFBox3_nodes = {};
          SDFBox3.uiData.setPosition(-650, 650);
          SDFBox3.p.center.set([0, 0, 1]);
          SDFBox3.p.sizes.set([7, 2.5, 1.6]);
          SDFBox3.params.postCreateSpareParams();
          SDFBox3.params.runOnSceneLoadHooks();
          return { node: SDFBox3, children: SDFBox3_nodes };
        }
        function create_SDFBox4(rayMarchingBuilder12) {
          var SDFBox4 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox4.setName("SDFBox4");
          const SDFBox4_nodes = {};
          SDFBox4.uiData.setPosition(-600, 950);
          SDFBox4.p.center.set([0, 0, -1]);
          SDFBox4.p.sizes.set([7, 2.5, 1.6]);
          SDFBox4.params.postCreateSpareParams();
          SDFBox4.params.runOnSceneLoadHooks();
          return { node: SDFBox4, children: SDFBox4_nodes };
        }
        function create_SDFBox5(rayMarchingBuilder12) {
          var SDFBox5 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox5.setName("SDFBox5");
          const SDFBox5_nodes = {};
          SDFBox5.uiData.setPosition(-600, 1300);
          SDFBox5.p.center.set([0, 0, -3]);
          SDFBox5.p.sizes.set([7, 2.5, 1]);
          SDFBox5.params.postCreateSpareParams();
          SDFBox5.params.runOnSceneLoadHooks();
          return { node: SDFBox5, children: SDFBox5_nodes };
        }
        function create_SDFBox6(rayMarchingBuilder12) {
          var SDFBox6 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox6.setName("SDFBox6");
          const SDFBox6_nodes = {};
          SDFBox6.uiData.setPosition(-550, 1750);
          SDFBox6.p.center.set([0, 0, -5]);
          SDFBox6.p.sizes.set([7, 2.5, 2.1]);
          SDFBox6.params.postCreateSpareParams();
          SDFBox6.params.runOnSceneLoadHooks();
          return { node: SDFBox6, children: SDFBox6_nodes };
        }
        function create_SDFBox7(rayMarchingBuilder12) {
          var SDFBox7 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox7.setName("SDFBox7");
          const SDFBox7_nodes = {};
          SDFBox7.uiData.setPosition(-550, 2050);
          SDFBox7.p.center.set([1.3, 0, -7]);
          SDFBox7.p.sizes.set([5.3, 2.5, 2.1]);
          SDFBox7.params.postCreateSpareParams();
          SDFBox7.params.runOnSceneLoadHooks();
          return { node: SDFBox7, children: SDFBox7_nodes };
        }
        function create_SDFContext1(rayMarchingBuilder12) {
          var SDFContext1 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext1.setName("SDFContext1");
          const SDFContext1_nodes = {};
          SDFContext1.uiData.setPosition(-200, -450);
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext1.params.postCreateSpareParams();
          SDFContext1.params.runOnSceneLoadHooks();
          return { node: SDFContext1, children: SDFContext1_nodes };
        }
        function create_SDFContext2(rayMarchingBuilder12) {
          var SDFContext2 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext2.setName("SDFContext2");
          const SDFContext2_nodes = {};
          SDFContext2.uiData.setPosition(900, 1800);
          SDFContext2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext2.params.postCreateSpareParams();
          SDFContext2.params.runOnSceneLoadHooks();
          return { node: SDFContext2, children: SDFContext2_nodes };
        }
        function create_SDFMaterial1(rayMarchingBuilder12) {
          var SDFMaterial1 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial1.setName("SDFMaterial1");
          const SDFMaterial1_nodes = {};
          SDFMaterial1.uiData.setPosition(-400, -350);
          SDFMaterial1.params.postCreateSpareParams();
          SDFMaterial1.params.runOnSceneLoadHooks();
          return { node: SDFMaterial1, children: SDFMaterial1_nodes };
        }
        function create_SDFMaterial2(rayMarchingBuilder12) {
          var SDFMaterial2 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial2.setName("SDFMaterial2");
          const SDFMaterial2_nodes = {};
          SDFMaterial2.uiData.setPosition(650, 2e3);
          SDFMaterial2.p.useEnvMap.set(true);
          SDFMaterial2.p.envMapFresnel.set(1);
          SDFMaterial2.params.postCreateSpareParams();
          SDFMaterial2.params.runOnSceneLoadHooks();
          return { node: SDFMaterial2, children: SDFMaterial2_nodes };
        }
        function create_SDFMin1(rayMarchingBuilder12) {
          var SDFMin1 = rayMarchingBuilder12.createNode("SDFMin");
          SDFMin1.setName("SDFMin1");
          const SDFMin1_nodes = {};
          SDFMin1.uiData.setPosition(0, 1850);
          SDFMin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFMin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFMin1.params.postCreateSpareParams();
          SDFMin1.params.runOnSceneLoadHooks();
          return { node: SDFMin1, children: SDFMin1_nodes };
        }
        function create_SDFMin16(rayMarchingBuilder12) {
          var SDFMin16 = rayMarchingBuilder12.createNode("SDFMin");
          SDFMin16.setName("SDFMin16");
          const SDFMin16_nodes = {};
          SDFMin16.uiData.setPosition(200, 850);
          SDFMin16.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFMin16.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFMin16.params.postCreateSpareParams();
          SDFMin16.params.runOnSceneLoadHooks();
          return { node: SDFMin16, children: SDFMin16_nodes };
        }
        function create_SDFMin22(rayMarchingBuilder12) {
          var SDFMin22 = rayMarchingBuilder12.createNode("SDFMin");
          SDFMin22.setName("SDFMin22");
          const SDFMin22_nodes = {};
          SDFMin22.uiData.setPosition(400, 1250);
          SDFMin22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFMin22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFMin22.params.postCreateSpareParams();
          SDFMin22.params.runOnSceneLoadHooks();
          return { node: SDFMin22, children: SDFMin22_nodes };
        }
        function create_SDFMin4(rayMarchingBuilder12) {
          var SDFMin4 = rayMarchingBuilder12.createNode("SDFMin");
          SDFMin4.setName("SDFMin4");
          const SDFMin4_nodes = {};
          SDFMin4.uiData.setPosition(1650, 250);
          SDFMin4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "sdf0", "0", { spare: true, editable: false });
          SDFMin4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "sdf1", "0", { spare: true, editable: false });
          SDFMin4.params.postCreateSpareParams();
          SDFMin4.params.runOnSceneLoadHooks();
          return { node: SDFMin4, children: SDFMin4_nodes };
        }
        function create_SDFMin8(rayMarchingBuilder12) {
          var SDFMin8 = rayMarchingBuilder12.createNode("SDFMin");
          SDFMin8.setName("SDFMin8");
          const SDFMin8_nodes = {};
          SDFMin8.uiData.setPosition(-100, 450);
          SDFMin8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFMin8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFMin8.params.postCreateSpareParams();
          SDFMin8.params.runOnSceneLoadHooks();
          return { node: SDFMin8, children: SDFMin8_nodes };
        }
        function create_SDFMin9(rayMarchingBuilder12) {
          var SDFMin9 = rayMarchingBuilder12.createNode("SDFMin");
          SDFMin9.setName("SDFMin9");
          const SDFMin9_nodes = {};
          SDFMin9.uiData.setPosition(-100, 1100);
          SDFMin9.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFMin9.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFMin9.params.postCreateSpareParams();
          SDFMin9.params.runOnSceneLoadHooks();
          return { node: SDFMin9, children: SDFMin9_nodes };
        }
        function create_SDFPlane1(rayMarchingBuilder12) {
          var SDFPlane1 = rayMarchingBuilder12.createNode("SDFPlane");
          SDFPlane1.setName("SDFPlane1");
          const SDFPlane1_nodes = {};
          SDFPlane1.uiData.setPosition(-450, -600);
          SDFPlane1.p.center.set([0, -1, 0]);
          SDFPlane1.params.postCreateSpareParams();
          SDFPlane1.params.runOnSceneLoadHooks();
          return { node: SDFPlane1, children: SDFPlane1_nodes };
        }
        function create_checkers1(rayMarchingBuilder12) {
          var checkers1 = rayMarchingBuilder12.createNode("checkers");
          checkers1.setName("checkers1");
          const checkers1_nodes = {};
          checkers1.uiData.setPosition(-850, -100);
          checkers1.params.postCreateSpareParams();
          checkers1.params.runOnSceneLoadHooks();
          return { node: checkers1, children: checkers1_nodes };
        }
        function create_compare1(rayMarchingBuilder12) {
          var compare1 = rayMarchingBuilder12.createNode("compare");
          compare1.setName("compare1");
          const compare1_nodes = {};
          compare1.uiData.setPosition(-400, 200);
          compare1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          compare1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: true });
          compare1.params.get("value1").set(0.15);
          compare1.params.postCreateSpareParams();
          compare1.params.runOnSceneLoadHooks();
          return { node: compare1, children: compare1_nodes };
        }
        function create_compare2(rayMarchingBuilder12) {
          var compare2 = rayMarchingBuilder12.createNode("compare");
          compare2.setName("compare2");
          const compare2_nodes = {};
          compare2.uiData.setPosition(-400, 550);
          compare2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          compare2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: true });
          compare2.params.get("value1").set(0.15);
          compare2.params.postCreateSpareParams();
          compare2.params.runOnSceneLoadHooks();
          return { node: compare2, children: compare2_nodes };
        }
        function create_compare3(rayMarchingBuilder12) {
          var compare3 = rayMarchingBuilder12.createNode("compare");
          compare3.setName("compare3");
          const compare3_nodes = {};
          compare3.uiData.setPosition(-400, 850);
          compare3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          compare3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: true });
          compare3.params.get("value1").set(0.15);
          compare3.params.postCreateSpareParams();
          compare3.params.runOnSceneLoadHooks();
          return { node: compare3, children: compare3_nodes };
        }
        function create_compare4(rayMarchingBuilder12) {
          var compare4 = rayMarchingBuilder12.createNode("compare");
          compare4.setName("compare4");
          const compare4_nodes = {};
          compare4.uiData.setPosition(-400, 1200);
          compare4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          compare4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: true });
          compare4.params.get("value1").set(0.15);
          compare4.params.postCreateSpareParams();
          compare4.params.runOnSceneLoadHooks();
          return { node: compare4, children: compare4_nodes };
        }
        function create_compare5(rayMarchingBuilder12) {
          var compare5 = rayMarchingBuilder12.createNode("compare");
          compare5.setName("compare5");
          const compare5_nodes = {};
          compare5.uiData.setPosition(-350, 1650);
          compare5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          compare5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: true });
          compare5.params.get("value1").set(0.15);
          compare5.params.postCreateSpareParams();
          compare5.params.runOnSceneLoadHooks();
          return { node: compare5, children: compare5_nodes };
        }
        function create_compare6(rayMarchingBuilder12) {
          var compare6 = rayMarchingBuilder12.createNode("compare");
          compare6.setName("compare6");
          const compare6_nodes = {};
          compare6.uiData.setPosition(-350, 1950);
          compare6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          compare6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: true });
          compare6.params.get("value1").set(0.15);
          compare6.params.postCreateSpareParams();
          compare6.params.runOnSceneLoadHooks();
          return { node: compare6, children: compare6_nodes };
        }
        function create_constant1(rayMarchingBuilder12) {
          var constant1 = rayMarchingBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-900, -400);
          constant1.p.type.set(4);
          constant1.p.color.set([0.4396571738310091, 0.5647115056965487, 0.9646862478936612]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(rayMarchingBuilder12) {
          var constant2 = rayMarchingBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-900, -300);
          constant2.p.type.set(4);
          constant2.p.color.set([0.8796223968851662, 0.9911020971136257, 0.9911020971136257]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_constant3(rayMarchingBuilder12) {
          var constant3 = rayMarchingBuilder12.createNode("constant");
          constant3.setName("constant3");
          const constant3_nodes = {};
          constant3.uiData.setPosition(400, 2e3);
          constant3.p.type.set(4);
          constant3.p.color.set([0.4910208498384856, 0.85499260812105, 0.4019777798219466]);
          constant3.p.asColor.set(true);
          constant3.params.postCreateSpareParams();
          constant3.params.runOnSceneLoadHooks();
          return { node: constant3, children: constant3_nodes };
        }
        function create_floatToVec2_1(rayMarchingBuilder12) {
          var floatToVec2_1 = rayMarchingBuilder12.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-1e3, -100);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(rayMarchingBuilder12) {
          var globals1 = rayMarchingBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1200, -100);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_ifThen1(rayMarchingBuilder12) {
          var ifThen1 = rayMarchingBuilder12.createNode("ifThen");
          ifThen1.setName("ifThen1");
          const ifThen1_nodes = {};
          ifThen1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen1.params.postCreateSpareParams();
          ifThen1.params.runOnSceneLoadHooks();
          function create_SDFBox1(ifThen12) {
            var SDFBox1 = ifThen12.createNode("SDFBox");
            SDFBox1.setName("SDFBox1");
            const SDFBox1_nodes = {};
            SDFBox1.uiData.setPosition(-150, 200);
            SDFBox1.p.center.set([-3, 0, 3]);
            SDFBox1.params.postCreateSpareParams();
            SDFBox1.params.runOnSceneLoadHooks();
            return { node: SDFBox1, children: SDFBox1_nodes };
          }
          function create_SDFBoxFrame1(ifThen12) {
            var SDFBoxFrame1 = ifThen12.createNode("SDFBoxFrame");
            SDFBoxFrame1.setName("SDFBoxFrame1");
            const SDFBoxFrame1_nodes = {};
            SDFBoxFrame1.uiData.setPosition(-150, 350);
            SDFBoxFrame1.p.center.set([-1, 0, 3]);
            SDFBoxFrame1.p.width.set(0.07);
            SDFBoxFrame1.params.postCreateSpareParams();
            SDFBoxFrame1.params.runOnSceneLoadHooks();
            return { node: SDFBoxFrame1, children: SDFBoxFrame1_nodes };
          }
          function create_SDFBoxRound1(ifThen12) {
            var SDFBoxRound1 = ifThen12.createNode("SDFBoxRound");
            SDFBoxRound1.setName("SDFBoxRound1");
            const SDFBoxRound1_nodes = {};
            SDFBoxRound1.uiData.setPosition(-150, 500);
            SDFBoxRound1.p.center.set([1, 0, 3]);
            SDFBoxRound1.p.radius.set(0.13);
            SDFBoxRound1.params.postCreateSpareParams();
            SDFBoxRound1.params.runOnSceneLoadHooks();
            return { node: SDFBoxRound1, children: SDFBoxRound1_nodes };
          }
          function create_SDFCapsule1(ifThen12) {
            var SDFCapsule1 = ifThen12.createNode("SDFCapsule");
            SDFCapsule1.setName("SDFCapsule1");
            const SDFCapsule1_nodes = {};
            SDFCapsule1.uiData.setPosition(-150, 650);
            SDFCapsule1.p.center.set([3, 0, 3]);
            SDFCapsule1.p.start.set([-0.4, 0, 0]);
            SDFCapsule1.params.postCreateSpareParams();
            SDFCapsule1.params.runOnSceneLoadHooks();
            return { node: SDFCapsule1, children: SDFCapsule1_nodes };
          }
          function create_SDFMin12(ifThen12) {
            var SDFMin1 = ifThen12.createNode("SDFMin");
            SDFMin1.setName("SDFMin1");
            const SDFMin1_nodes = {};
            SDFMin1.uiData.setPosition(0, 250);
            SDFMin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin1.params.postCreateSpareParams();
            SDFMin1.params.runOnSceneLoadHooks();
            return { node: SDFMin1, children: SDFMin1_nodes };
          }
          function create_SDFMin2(ifThen12) {
            var SDFMin2 = ifThen12.createNode("SDFMin");
            SDFMin2.setName("SDFMin2");
            const SDFMin2_nodes = {};
            SDFMin2.uiData.setPosition(50, 550);
            SDFMin2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin2.params.postCreateSpareParams();
            SDFMin2.params.runOnSceneLoadHooks();
            return { node: SDFMin2, children: SDFMin2_nodes };
          }
          function create_SDFMin3(ifThen12) {
            var SDFMin3 = ifThen12.createNode("SDFMin");
            SDFMin3.setName("SDFMin3");
            const SDFMin3_nodes = {};
            SDFMin3.uiData.setPosition(150, 400);
            SDFMin3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin3.params.postCreateSpareParams();
            SDFMin3.params.runOnSceneLoadHooks();
            return { node: SDFMin3, children: SDFMin3_nodes };
          }
          function create_subnetInput1(ifThen12) {
            var subnetInput1 = ifThen12.createNode("subnetInput");
            subnetInput1.setName("subnetInput1");
            const subnetInput1_nodes = {};
            subnetInput1.uiData.setPosition(-100, 0);
            subnetInput1.params.postCreateSpareParams();
            subnetInput1.params.runOnSceneLoadHooks();
            return { node: subnetInput1, children: subnetInput1_nodes };
          }
          function create_subnetOutput1(ifThen12) {
            var subnetOutput1 = ifThen12.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(300, 400);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          ifThen1_nodes["SDFBox1"] = create_SDFBox1(ifThen1);
          ifThen1_nodes["SDFBoxFrame1"] = create_SDFBoxFrame1(ifThen1);
          ifThen1_nodes["SDFBoxRound1"] = create_SDFBoxRound1(ifThen1);
          ifThen1_nodes["SDFCapsule1"] = create_SDFCapsule1(ifThen1);
          ifThen1_nodes["SDFMin1"] = create_SDFMin12(ifThen1);
          ifThen1_nodes["SDFMin2"] = create_SDFMin2(ifThen1);
          ifThen1_nodes["SDFMin3"] = create_SDFMin3(ifThen1);
          ifThen1_nodes["subnetInput1"] = create_subnetInput1(ifThen1);
          ifThen1_nodes["subnetOutput1"] = create_subnetOutput1(ifThen1);
          ifThen1_nodes["SDFMin1"].node.setInput("sdf0", ifThen1_nodes["SDFBox1"].node, "float");
          ifThen1_nodes["SDFMin1"].node.setInput("sdf1", ifThen1_nodes["SDFBoxFrame1"].node, "float");
          ifThen1_nodes["SDFMin2"].node.setInput("sdf0", ifThen1_nodes["SDFBoxRound1"].node, "float");
          ifThen1_nodes["SDFMin2"].node.setInput("sdf1", ifThen1_nodes["SDFCapsule1"].node, "float");
          ifThen1_nodes["SDFMin3"].node.setInput("sdf0", ifThen1_nodes["SDFMin1"].node, "min");
          ifThen1_nodes["SDFMin3"].node.setInput("sdf1", ifThen1_nodes["SDFMin2"].node, "min");
          ifThen1_nodes["subnetOutput1"].node.setInput("input0", ifThen1_nodes["SDFMin3"].node, "min");
          ifThen1.uiData.setPosition(-250, 300);
          ifThen1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen1.params.postCreateSpareParams();
          ifThen1.params.runOnSceneLoadHooks();
          return { node: ifThen1, children: ifThen1_nodes };
        }
        function create_ifThen2(rayMarchingBuilder12) {
          var ifThen2 = rayMarchingBuilder12.createNode("ifThen");
          ifThen2.setName("ifThen2");
          const ifThen2_nodes = {};
          ifThen2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen2.params.postCreateSpareParams();
          ifThen2.params.runOnSceneLoadHooks();
          function create_SDFCapsuleVertical1(ifThen22) {
            var SDFCapsuleVertical1 = ifThen22.createNode("SDFCapsuleVertical");
            SDFCapsuleVertical1.setName("SDFCapsuleVertical1");
            const SDFCapsuleVertical1_nodes = {};
            SDFCapsuleVertical1.uiData.setPosition(-150, 200);
            SDFCapsuleVertical1.p.center.set([-3, 0, 1]);
            SDFCapsuleVertical1.params.postCreateSpareParams();
            SDFCapsuleVertical1.params.runOnSceneLoadHooks();
            return { node: SDFCapsuleVertical1, children: SDFCapsuleVertical1_nodes };
          }
          function create_SDFCone1(ifThen22) {
            var SDFCone1 = ifThen22.createNode("SDFCone");
            SDFCone1.setName("SDFCone1");
            const SDFCone1_nodes = {};
            SDFCone1.uiData.setPosition(-150, 350);
            SDFCone1.p.center.set([-1, 0.3, 1]);
            SDFCone1.p.angle.set(0.76503);
            SDFCone1.params.postCreateSpareParams();
            SDFCone1.params.runOnSceneLoadHooks();
            return { node: SDFCone1, children: SDFCone1_nodes };
          }
          function create_SDFConeRound1(ifThen22) {
            var SDFConeRound1 = ifThen22.createNode("SDFConeRound");
            SDFConeRound1.setName("SDFConeRound1");
            const SDFConeRound1_nodes = {};
            SDFConeRound1.uiData.setPosition(-150, 500);
            SDFConeRound1.p.center.set([1, 0, 1]);
            SDFConeRound1.params.postCreateSpareParams();
            SDFConeRound1.params.runOnSceneLoadHooks();
            return { node: SDFConeRound1, children: SDFConeRound1_nodes };
          }
          function create_SDFHexagonalPrism1(ifThen22) {
            var SDFHexagonalPrism1 = ifThen22.createNode("SDFHexagonalPrism");
            SDFHexagonalPrism1.setName("SDFHexagonalPrism1");
            const SDFHexagonalPrism1_nodes = {};
            SDFHexagonalPrism1.uiData.setPosition(-150, 650);
            SDFHexagonalPrism1.p.center.set([3, 0, 1]);
            SDFHexagonalPrism1.p.radius.set(0.4);
            SDFHexagonalPrism1.p.height.set(0.24);
            SDFHexagonalPrism1.params.postCreateSpareParams();
            SDFHexagonalPrism1.params.runOnSceneLoadHooks();
            return { node: SDFHexagonalPrism1, children: SDFHexagonalPrism1_nodes };
          }
          function create_SDFMin5(ifThen22) {
            var SDFMin5 = ifThen22.createNode("SDFMin");
            SDFMin5.setName("SDFMin5");
            const SDFMin5_nodes = {};
            SDFMin5.uiData.setPosition(0, 250);
            SDFMin5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin5.params.postCreateSpareParams();
            SDFMin5.params.runOnSceneLoadHooks();
            return { node: SDFMin5, children: SDFMin5_nodes };
          }
          function create_SDFMin6(ifThen22) {
            var SDFMin6 = ifThen22.createNode("SDFMin");
            SDFMin6.setName("SDFMin6");
            const SDFMin6_nodes = {};
            SDFMin6.uiData.setPosition(50, 550);
            SDFMin6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin6.params.postCreateSpareParams();
            SDFMin6.params.runOnSceneLoadHooks();
            return { node: SDFMin6, children: SDFMin6_nodes };
          }
          function create_SDFMin7(ifThen22) {
            var SDFMin7 = ifThen22.createNode("SDFMin");
            SDFMin7.setName("SDFMin7");
            const SDFMin7_nodes = {};
            SDFMin7.uiData.setPosition(150, 400);
            SDFMin7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin7.params.postCreateSpareParams();
            SDFMin7.params.runOnSceneLoadHooks();
            return { node: SDFMin7, children: SDFMin7_nodes };
          }
          function create_subnetInput1(ifThen22) {
            var subnetInput1 = ifThen22.createNode("subnetInput");
            subnetInput1.setName("subnetInput1");
            const subnetInput1_nodes = {};
            subnetInput1.uiData.setPosition(-100, 0);
            subnetInput1.params.postCreateSpareParams();
            subnetInput1.params.runOnSceneLoadHooks();
            return { node: subnetInput1, children: subnetInput1_nodes };
          }
          function create_subnetOutput1(ifThen22) {
            var subnetOutput1 = ifThen22.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(300, 400);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          ifThen2_nodes["SDFCapsuleVertical1"] = create_SDFCapsuleVertical1(ifThen2);
          ifThen2_nodes["SDFCone1"] = create_SDFCone1(ifThen2);
          ifThen2_nodes["SDFConeRound1"] = create_SDFConeRound1(ifThen2);
          ifThen2_nodes["SDFHexagonalPrism1"] = create_SDFHexagonalPrism1(ifThen2);
          ifThen2_nodes["SDFMin5"] = create_SDFMin5(ifThen2);
          ifThen2_nodes["SDFMin6"] = create_SDFMin6(ifThen2);
          ifThen2_nodes["SDFMin7"] = create_SDFMin7(ifThen2);
          ifThen2_nodes["subnetInput1"] = create_subnetInput1(ifThen2);
          ifThen2_nodes["subnetOutput1"] = create_subnetOutput1(ifThen2);
          ifThen2_nodes["SDFMin5"].node.setInput("sdf0", ifThen2_nodes["SDFCapsuleVertical1"].node, "float");
          ifThen2_nodes["SDFMin5"].node.setInput("sdf1", ifThen2_nodes["SDFCone1"].node, "float");
          ifThen2_nodes["SDFMin6"].node.setInput("sdf0", ifThen2_nodes["SDFConeRound1"].node, "float");
          ifThen2_nodes["SDFMin6"].node.setInput("sdf1", ifThen2_nodes["SDFHexagonalPrism1"].node, "float");
          ifThen2_nodes["SDFMin7"].node.setInput("sdf0", ifThen2_nodes["SDFMin5"].node, "min");
          ifThen2_nodes["SDFMin7"].node.setInput("sdf1", ifThen2_nodes["SDFMin6"].node, "min");
          ifThen2_nodes["subnetOutput1"].node.setInput("input0", ifThen2_nodes["SDFMin7"].node, "min");
          ifThen2.uiData.setPosition(-250, 650);
          ifThen2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen2.params.postCreateSpareParams();
          ifThen2.params.runOnSceneLoadHooks();
          return { node: ifThen2, children: ifThen2_nodes };
        }
        function create_ifThen3(rayMarchingBuilder12) {
          var ifThen3 = rayMarchingBuilder12.createNode("ifThen");
          ifThen3.setName("ifThen3");
          const ifThen3_nodes = {};
          ifThen3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen3.params.postCreateSpareParams();
          ifThen3.params.runOnSceneLoadHooks();
          function create_SDFLink1(ifThen32) {
            var SDFLink1 = ifThen32.createNode("SDFLink");
            SDFLink1.setName("SDFLink1");
            const SDFLink1_nodes = {};
            SDFLink1.uiData.setPosition(-200, 150);
            SDFLink1.p.center.set([-3, 0.2, -1]);
            SDFLink1.p.halfLength.set(0.63);
            SDFLink1.p.radius1.set(0.44);
            SDFLink1.p.radius2.set(0.15);
            SDFLink1.params.postCreateSpareParams();
            SDFLink1.params.runOnSceneLoadHooks();
            return { node: SDFLink1, children: SDFLink1_nodes };
          }
          function create_SDFMin10(ifThen32) {
            var SDFMin10 = ifThen32.createNode("SDFMin");
            SDFMin10.setName("SDFMin10");
            const SDFMin10_nodes = {};
            SDFMin10.uiData.setPosition(0, 550);
            SDFMin10.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin10.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin10.params.postCreateSpareParams();
            SDFMin10.params.runOnSceneLoadHooks();
            return { node: SDFMin10, children: SDFMin10_nodes };
          }
          function create_SDFMin11(ifThen32) {
            var SDFMin11 = ifThen32.createNode("SDFMin");
            SDFMin11.setName("SDFMin11");
            const SDFMin11_nodes = {};
            SDFMin11.uiData.setPosition(100, 400);
            SDFMin11.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin11.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin11.params.postCreateSpareParams();
            SDFMin11.params.runOnSceneLoadHooks();
            return { node: SDFMin11, children: SDFMin11_nodes };
          }
          function create_SDFMin92(ifThen32) {
            var SDFMin9 = ifThen32.createNode("SDFMin");
            SDFMin9.setName("SDFMin9");
            const SDFMin9_nodes = {};
            SDFMin9.uiData.setPosition(-50, 250);
            SDFMin9.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin9.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin9.params.postCreateSpareParams();
            SDFMin9.params.runOnSceneLoadHooks();
            return { node: SDFMin9, children: SDFMin9_nodes };
          }
          function create_SDFOctahedron1(ifThen32) {
            var SDFOctahedron1 = ifThen32.createNode("SDFOctahedron");
            SDFOctahedron1.setName("SDFOctahedron1");
            const SDFOctahedron1_nodes = {};
            SDFOctahedron1.uiData.setPosition(-200, 350);
            SDFOctahedron1.p.center.set([-1, 0, -1]);
            SDFOctahedron1.params.postCreateSpareParams();
            SDFOctahedron1.params.runOnSceneLoadHooks();
            return { node: SDFOctahedron1, children: SDFOctahedron1_nodes };
          }
          function create_SDFOctogonalPrism1(ifThen32) {
            var SDFOctogonalPrism1 = ifThen32.createNode("SDFOctogonalPrism");
            SDFOctogonalPrism1.setName("SDFOctogonalPrism1");
            const SDFOctogonalPrism1_nodes = {};
            SDFOctogonalPrism1.uiData.setPosition(-200, 500);
            SDFOctogonalPrism1.p.center.set([1, 0, -1]);
            SDFOctogonalPrism1.p.radius.set(0.57);
            SDFOctogonalPrism1.p.height.set(0.2);
            SDFOctogonalPrism1.params.postCreateSpareParams();
            SDFOctogonalPrism1.params.runOnSceneLoadHooks();
            return { node: SDFOctogonalPrism1, children: SDFOctogonalPrism1_nodes };
          }
          function create_SDFPyramid1(ifThen32) {
            var SDFPyramid1 = ifThen32.createNode("SDFPyramid");
            SDFPyramid1.setName("SDFPyramid1");
            const SDFPyramid1_nodes = {};
            SDFPyramid1.uiData.setPosition(-200, 650);
            SDFPyramid1.p.center.set([3, 0, -1]);
            SDFPyramid1.params.postCreateSpareParams();
            SDFPyramid1.params.runOnSceneLoadHooks();
            return { node: SDFPyramid1, children: SDFPyramid1_nodes };
          }
          function create_subnetInput1(ifThen32) {
            var subnetInput1 = ifThen32.createNode("subnetInput");
            subnetInput1.setName("subnetInput1");
            const subnetInput1_nodes = {};
            subnetInput1.uiData.setPosition(-100, 0);
            subnetInput1.params.postCreateSpareParams();
            subnetInput1.params.runOnSceneLoadHooks();
            return { node: subnetInput1, children: subnetInput1_nodes };
          }
          function create_subnetOutput1(ifThen32) {
            var subnetOutput1 = ifThen32.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(300, 400);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          ifThen3_nodes["SDFLink1"] = create_SDFLink1(ifThen3);
          ifThen3_nodes["SDFMin10"] = create_SDFMin10(ifThen3);
          ifThen3_nodes["SDFMin11"] = create_SDFMin11(ifThen3);
          ifThen3_nodes["SDFMin9"] = create_SDFMin92(ifThen3);
          ifThen3_nodes["SDFOctahedron1"] = create_SDFOctahedron1(ifThen3);
          ifThen3_nodes["SDFOctogonalPrism1"] = create_SDFOctogonalPrism1(ifThen3);
          ifThen3_nodes["SDFPyramid1"] = create_SDFPyramid1(ifThen3);
          ifThen3_nodes["subnetInput1"] = create_subnetInput1(ifThen3);
          ifThen3_nodes["subnetOutput1"] = create_subnetOutput1(ifThen3);
          ifThen3_nodes["SDFMin10"].node.setInput("sdf0", ifThen3_nodes["SDFOctogonalPrism1"].node, "float");
          ifThen3_nodes["SDFMin10"].node.setInput("sdf1", ifThen3_nodes["SDFPyramid1"].node, "float");
          ifThen3_nodes["SDFMin11"].node.setInput("sdf0", ifThen3_nodes["SDFMin9"].node, "min");
          ifThen3_nodes["SDFMin11"].node.setInput("sdf1", ifThen3_nodes["SDFMin10"].node, "min");
          ifThen3_nodes["SDFMin9"].node.setInput("sdf0", ifThen3_nodes["SDFLink1"].node, "float");
          ifThen3_nodes["SDFMin9"].node.setInput("sdf1", ifThen3_nodes["SDFOctahedron1"].node, "float");
          ifThen3_nodes["subnetOutput1"].node.setInput("input0", ifThen3_nodes["SDFMin11"].node, "min");
          ifThen3.uiData.setPosition(-250, 950);
          ifThen3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen3.params.postCreateSpareParams();
          ifThen3.params.runOnSceneLoadHooks();
          return { node: ifThen3, children: ifThen3_nodes };
        }
        function create_ifThen4(rayMarchingBuilder12) {
          var ifThen4 = rayMarchingBuilder12.createNode("ifThen");
          ifThen4.setName("ifThen4");
          const ifThen4_nodes = {};
          ifThen4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen4.params.postCreateSpareParams();
          ifThen4.params.runOnSceneLoadHooks();
          function create_SDFMin12(ifThen42) {
            var SDFMin12 = ifThen42.createNode("SDFMin");
            SDFMin12.setName("SDFMin12");
            const SDFMin12_nodes = {};
            SDFMin12.uiData.setPosition(0, 250);
            SDFMin12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin12.params.postCreateSpareParams();
            SDFMin12.params.runOnSceneLoadHooks();
            return { node: SDFMin12, children: SDFMin12_nodes };
          }
          function create_SDFMin13(ifThen42) {
            var SDFMin13 = ifThen42.createNode("SDFMin");
            SDFMin13.setName("SDFMin13");
            const SDFMin13_nodes = {};
            SDFMin13.uiData.setPosition(50, 550);
            SDFMin13.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin13.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin13.params.postCreateSpareParams();
            SDFMin13.params.runOnSceneLoadHooks();
            return { node: SDFMin13, children: SDFMin13_nodes };
          }
          function create_SDFMin14(ifThen42) {
            var SDFMin14 = ifThen42.createNode("SDFMin");
            SDFMin14.setName("SDFMin14");
            const SDFMin14_nodes = {};
            SDFMin14.uiData.setPosition(150, 400);
            SDFMin14.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin14.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin14.params.postCreateSpareParams();
            SDFMin14.params.runOnSceneLoadHooks();
            return { node: SDFMin14, children: SDFMin14_nodes };
          }
          function create_SDFQuad1(ifThen42) {
            var SDFQuad1 = ifThen42.createNode("SDFQuad");
            SDFQuad1.setName("SDFQuad1");
            const SDFQuad1_nodes = {};
            SDFQuad1.uiData.setPosition(-150, 150);
            SDFQuad1.p.center.set([-3, 0, -3]);
            SDFQuad1.params.postCreateSpareParams();
            SDFQuad1.params.runOnSceneLoadHooks();
            return { node: SDFQuad1, children: SDFQuad1_nodes };
          }
          function create_SDFRhombus1(ifThen42) {
            var SDFRhombus1 = ifThen42.createNode("SDFRhombus");
            SDFRhombus1.setName("SDFRhombus1");
            const SDFRhombus1_nodes = {};
            SDFRhombus1.uiData.setPosition(-150, 350);
            SDFRhombus1.p.center.set([-1, 0, -3]);
            SDFRhombus1.p.length1.set(0.92);
            SDFRhombus1.p.length2.set(0.52);
            SDFRhombus1.p.height.set(0.12);
            SDFRhombus1.p.radius.set(0.09);
            SDFRhombus1.params.postCreateSpareParams();
            SDFRhombus1.params.runOnSceneLoadHooks();
            return { node: SDFRhombus1, children: SDFRhombus1_nodes };
          }
          function create_SDFSolidAngle1(ifThen42) {
            var SDFSolidAngle1 = ifThen42.createNode("SDFSolidAngle");
            SDFSolidAngle1.setName("SDFSolidAngle1");
            const SDFSolidAngle1_nodes = {};
            SDFSolidAngle1.uiData.setPosition(-150, 550);
            SDFSolidAngle1.p.center.set([1, 0, -3]);
            SDFSolidAngle1.params.postCreateSpareParams();
            SDFSolidAngle1.params.runOnSceneLoadHooks();
            return { node: SDFSolidAngle1, children: SDFSolidAngle1_nodes };
          }
          function create_SDFSphere1(ifThen42) {
            var SDFSphere1 = ifThen42.createNode("SDFSphere");
            SDFSphere1.setName("SDFSphere1");
            const SDFSphere1_nodes = {};
            SDFSphere1.uiData.setPosition(-150, 700);
            SDFSphere1.p.center.set([3, 0, -3]);
            SDFSphere1.p.radius.set(0.62);
            SDFSphere1.params.postCreateSpareParams();
            SDFSphere1.params.runOnSceneLoadHooks();
            return { node: SDFSphere1, children: SDFSphere1_nodes };
          }
          function create_subnetInput1(ifThen42) {
            var subnetInput1 = ifThen42.createNode("subnetInput");
            subnetInput1.setName("subnetInput1");
            const subnetInput1_nodes = {};
            subnetInput1.uiData.setPosition(-100, 0);
            subnetInput1.params.postCreateSpareParams();
            subnetInput1.params.runOnSceneLoadHooks();
            return { node: subnetInput1, children: subnetInput1_nodes };
          }
          function create_subnetOutput1(ifThen42) {
            var subnetOutput1 = ifThen42.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(300, 400);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          ifThen4_nodes["SDFMin12"] = create_SDFMin12(ifThen4);
          ifThen4_nodes["SDFMin13"] = create_SDFMin13(ifThen4);
          ifThen4_nodes["SDFMin14"] = create_SDFMin14(ifThen4);
          ifThen4_nodes["SDFQuad1"] = create_SDFQuad1(ifThen4);
          ifThen4_nodes["SDFRhombus1"] = create_SDFRhombus1(ifThen4);
          ifThen4_nodes["SDFSolidAngle1"] = create_SDFSolidAngle1(ifThen4);
          ifThen4_nodes["SDFSphere1"] = create_SDFSphere1(ifThen4);
          ifThen4_nodes["subnetInput1"] = create_subnetInput1(ifThen4);
          ifThen4_nodes["subnetOutput1"] = create_subnetOutput1(ifThen4);
          ifThen4_nodes["SDFMin12"].node.setInput("sdf0", ifThen4_nodes["SDFQuad1"].node, "float");
          ifThen4_nodes["SDFMin12"].node.setInput("sdf1", ifThen4_nodes["SDFRhombus1"].node, "float");
          ifThen4_nodes["SDFMin13"].node.setInput("sdf0", ifThen4_nodes["SDFSolidAngle1"].node, "float");
          ifThen4_nodes["SDFMin13"].node.setInput("sdf1", ifThen4_nodes["SDFSphere1"].node, "float");
          ifThen4_nodes["SDFMin14"].node.setInput("sdf0", ifThen4_nodes["SDFMin12"].node, "min");
          ifThen4_nodes["SDFMin14"].node.setInput("sdf1", ifThen4_nodes["SDFMin13"].node, "min");
          ifThen4_nodes["subnetOutput1"].node.setInput("input0", ifThen4_nodes["SDFMin14"].node, "min");
          ifThen4.uiData.setPosition(-250, 1300);
          ifThen4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen4.params.postCreateSpareParams();
          ifThen4.params.runOnSceneLoadHooks();
          return { node: ifThen4, children: ifThen4_nodes };
        }
        function create_ifThen5(rayMarchingBuilder12) {
          var ifThen5 = rayMarchingBuilder12.createNode("ifThen");
          ifThen5.setName("ifThen5");
          const ifThen5_nodes = {};
          ifThen5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen5.params.postCreateSpareParams();
          ifThen5.params.runOnSceneLoadHooks();
          function create_SDFMin17(ifThen52) {
            var SDFMin17 = ifThen52.createNode("SDFMin");
            SDFMin17.setName("SDFMin17");
            const SDFMin17_nodes = {};
            SDFMin17.uiData.setPosition(-50, 250);
            SDFMin17.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin17.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin17.params.postCreateSpareParams();
            SDFMin17.params.runOnSceneLoadHooks();
            return { node: SDFMin17, children: SDFMin17_nodes };
          }
          function create_SDFMin18(ifThen52) {
            var SDFMin18 = ifThen52.createNode("SDFMin");
            SDFMin18.setName("SDFMin18");
            const SDFMin18_nodes = {};
            SDFMin18.uiData.setPosition(-50, 550);
            SDFMin18.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin18.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin18.params.postCreateSpareParams();
            SDFMin18.params.runOnSceneLoadHooks();
            return { node: SDFMin18, children: SDFMin18_nodes };
          }
          function create_SDFMin19(ifThen52) {
            var SDFMin19 = ifThen52.createNode("SDFMin");
            SDFMin19.setName("SDFMin19");
            const SDFMin19_nodes = {};
            SDFMin19.uiData.setPosition(100, 350);
            SDFMin19.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin19.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin19.params.postCreateSpareParams();
            SDFMin19.params.runOnSceneLoadHooks();
            return { node: SDFMin19, children: SDFMin19_nodes };
          }
          function create_SDFSphereCut1(ifThen52) {
            var SDFSphereCut1 = ifThen52.createNode("SDFSphereCut");
            SDFSphereCut1.setName("SDFSphereCut1");
            const SDFSphereCut1_nodes = {};
            SDFSphereCut1.uiData.setPosition(-250, 200);
            SDFSphereCut1.p.center.set([-3, 0, -5]);
            SDFSphereCut1.p.radius.set(0.61);
            SDFSphereCut1.p.height.set(0.12);
            SDFSphereCut1.params.postCreateSpareParams();
            SDFSphereCut1.params.runOnSceneLoadHooks();
            return { node: SDFSphereCut1, children: SDFSphereCut1_nodes };
          }
          function create_SDFSphereHollow1(ifThen52) {
            var SDFSphereHollow1 = ifThen52.createNode("SDFSphereHollow");
            SDFSphereHollow1.setName("SDFSphereHollow1");
            const SDFSphereHollow1_nodes = {};
            SDFSphereHollow1.uiData.setPosition(-250, 300);
            SDFSphereHollow1.p.center.set([-1, 0, -5]);
            SDFSphereHollow1.p.radius.set(0.63);
            SDFSphereHollow1.p.height.set(0.4);
            SDFSphereHollow1.p.thickness.set(0.03);
            SDFSphereHollow1.params.postCreateSpareParams();
            SDFSphereHollow1.params.runOnSceneLoadHooks();
            return { node: SDFSphereHollow1, children: SDFSphereHollow1_nodes };
          }
          function create_SDFTorus1(ifThen52) {
            var SDFTorus1 = ifThen52.createNode("SDFTorus");
            SDFTorus1.setName("SDFTorus1");
            const SDFTorus1_nodes = {};
            SDFTorus1.uiData.setPosition(-250, 450);
            SDFTorus1.p.center.set([1, 0, -5]);
            SDFTorus1.p.radius1.set(0.55);
            SDFTorus1.params.postCreateSpareParams();
            SDFTorus1.params.runOnSceneLoadHooks();
            return { node: SDFTorus1, children: SDFTorus1_nodes };
          }
          function create_SDFTriangle1(ifThen52) {
            var SDFTriangle1 = ifThen52.createNode("SDFTriangle");
            SDFTriangle1.setName("SDFTriangle1");
            const SDFTriangle1_nodes = {};
            SDFTriangle1.uiData.setPosition(-250, 600);
            SDFTriangle1.p.center.set([3, 0, -5]);
            SDFTriangle1.params.postCreateSpareParams();
            SDFTriangle1.params.runOnSceneLoadHooks();
            return { node: SDFTriangle1, children: SDFTriangle1_nodes };
          }
          function create_subnetInput1(ifThen52) {
            var subnetInput1 = ifThen52.createNode("subnetInput");
            subnetInput1.setName("subnetInput1");
            const subnetInput1_nodes = {};
            subnetInput1.uiData.setPosition(-100, 0);
            subnetInput1.params.postCreateSpareParams();
            subnetInput1.params.runOnSceneLoadHooks();
            return { node: subnetInput1, children: subnetInput1_nodes };
          }
          function create_subnetOutput1(ifThen52) {
            var subnetOutput1 = ifThen52.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(300, 400);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          ifThen5_nodes["SDFMin17"] = create_SDFMin17(ifThen5);
          ifThen5_nodes["SDFMin18"] = create_SDFMin18(ifThen5);
          ifThen5_nodes["SDFMin19"] = create_SDFMin19(ifThen5);
          ifThen5_nodes["SDFSphereCut1"] = create_SDFSphereCut1(ifThen5);
          ifThen5_nodes["SDFSphereHollow1"] = create_SDFSphereHollow1(ifThen5);
          ifThen5_nodes["SDFTorus1"] = create_SDFTorus1(ifThen5);
          ifThen5_nodes["SDFTriangle1"] = create_SDFTriangle1(ifThen5);
          ifThen5_nodes["subnetInput1"] = create_subnetInput1(ifThen5);
          ifThen5_nodes["subnetOutput1"] = create_subnetOutput1(ifThen5);
          ifThen5_nodes["SDFMin17"].node.setInput("sdf0", ifThen5_nodes["SDFSphereCut1"].node, "float");
          ifThen5_nodes["SDFMin17"].node.setInput("sdf1", ifThen5_nodes["SDFSphereHollow1"].node, "float");
          ifThen5_nodes["SDFMin18"].node.setInput("sdf0", ifThen5_nodes["SDFTorus1"].node, "float");
          ifThen5_nodes["SDFMin18"].node.setInput("sdf1", ifThen5_nodes["SDFTriangle1"].node, "float");
          ifThen5_nodes["SDFMin19"].node.setInput("sdf0", ifThen5_nodes["SDFMin17"].node, "min");
          ifThen5_nodes["SDFMin19"].node.setInput("sdf1", ifThen5_nodes["SDFMin18"].node, "min");
          ifThen5_nodes["subnetOutput1"].node.setInput("input0", ifThen5_nodes["SDFMin19"].node, "min");
          ifThen5.uiData.setPosition(-200, 1750);
          ifThen5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen5.params.postCreateSpareParams();
          ifThen5.params.runOnSceneLoadHooks();
          return { node: ifThen5, children: ifThen5_nodes };
        }
        function create_ifThen6(rayMarchingBuilder12) {
          var ifThen6 = rayMarchingBuilder12.createNode("ifThen");
          ifThen6.setName("ifThen6");
          const ifThen6_nodes = {};
          ifThen6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen6.params.postCreateSpareParams();
          ifThen6.params.runOnSceneLoadHooks();
          function create_SDFHorseShoe1(ifThen62) {
            var SDFHorseShoe1 = ifThen62.createNode("SDFHorseShoe");
            SDFHorseShoe1.setName("SDFHorseShoe1");
            const SDFHorseShoe1_nodes = {};
            SDFHorseShoe1.uiData.setPosition(-100, 650);
            SDFHorseShoe1.p.center.set([3, 0, -7]);
            SDFHorseShoe1.p.angle.set(1.26046);
            SDFHorseShoe1.p.radius.set(0.73);
            SDFHorseShoe1.p.length.set(0.8);
            SDFHorseShoe1.p.thickness.set(0.12);
            SDFHorseShoe1.p.width.set(0.24);
            SDFHorseShoe1.params.postCreateSpareParams();
            SDFHorseShoe1.params.runOnSceneLoadHooks();
            return { node: SDFHorseShoe1, children: SDFHorseShoe1_nodes };
          }
          function create_SDFMin20(ifThen62) {
            var SDFMin20 = ifThen62.createNode("SDFMin");
            SDFMin20.setName("SDFMin20");
            const SDFMin20_nodes = {};
            SDFMin20.uiData.setPosition(150, 350);
            SDFMin20.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin20.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin20.params.postCreateSpareParams();
            SDFMin20.params.runOnSceneLoadHooks();
            return { node: SDFMin20, children: SDFMin20_nodes };
          }
          function create_SDFMin21(ifThen62) {
            var SDFMin21 = ifThen62.createNode("SDFMin");
            SDFMin21.setName("SDFMin21");
            const SDFMin21_nodes = {};
            SDFMin21.uiData.setPosition(250, 500);
            SDFMin21.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFMin21.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFMin21.params.postCreateSpareParams();
            SDFMin21.params.runOnSceneLoadHooks();
            return { node: SDFMin21, children: SDFMin21_nodes };
          }
          function create_SDFTriangularPrism1(ifThen62) {
            var SDFTriangularPrism1 = ifThen62.createNode("SDFTriangularPrism");
            SDFTriangularPrism1.setName("SDFTriangularPrism1");
            const SDFTriangularPrism1_nodes = {};
            SDFTriangularPrism1.uiData.setPosition(-100, 250);
            SDFTriangularPrism1.p.center.set([-1, 0, -7]);
            SDFTriangularPrism1.p.radius.set(0.48);
            SDFTriangularPrism1.p.height.set(0.29);
            SDFTriangularPrism1.params.postCreateSpareParams();
            SDFTriangularPrism1.params.runOnSceneLoadHooks();
            return { node: SDFTriangularPrism1, children: SDFTriangularPrism1_nodes };
          }
          function create_SDFTube1(ifThen62) {
            var SDFTube1 = ifThen62.createNode("SDFTube");
            SDFTube1.setName("SDFTube1");
            const SDFTube1_nodes = {};
            SDFTube1.uiData.setPosition(-100, 400);
            SDFTube1.p.center.set([1, 0, -7]);
            SDFTube1.p.radius.set(0.39);
            SDFTube1.p.height.set(0.39);
            SDFTube1.params.postCreateSpareParams();
            SDFTube1.params.runOnSceneLoadHooks();
            return { node: SDFTube1, children: SDFTube1_nodes };
          }
          function create_subnetInput1(ifThen62) {
            var subnetInput1 = ifThen62.createNode("subnetInput");
            subnetInput1.setName("subnetInput1");
            const subnetInput1_nodes = {};
            subnetInput1.uiData.setPosition(-100, 0);
            subnetInput1.params.postCreateSpareParams();
            subnetInput1.params.runOnSceneLoadHooks();
            return { node: subnetInput1, children: subnetInput1_nodes };
          }
          function create_subnetOutput1(ifThen62) {
            var subnetOutput1 = ifThen62.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(450, 400);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          ifThen6_nodes["SDFHorseShoe1"] = create_SDFHorseShoe1(ifThen6);
          ifThen6_nodes["SDFMin20"] = create_SDFMin20(ifThen6);
          ifThen6_nodes["SDFMin21"] = create_SDFMin21(ifThen6);
          ifThen6_nodes["SDFTriangularPrism1"] = create_SDFTriangularPrism1(ifThen6);
          ifThen6_nodes["SDFTube1"] = create_SDFTube1(ifThen6);
          ifThen6_nodes["subnetInput1"] = create_subnetInput1(ifThen6);
          ifThen6_nodes["subnetOutput1"] = create_subnetOutput1(ifThen6);
          ifThen6_nodes["SDFMin20"].node.setInput("sdf0", ifThen6_nodes["SDFTriangularPrism1"].node, "float");
          ifThen6_nodes["SDFMin20"].node.setInput("sdf1", ifThen6_nodes["SDFTube1"].node, "float");
          ifThen6_nodes["SDFMin21"].node.setInput("sdf0", ifThen6_nodes["SDFMin20"].node, "min");
          ifThen6_nodes["SDFMin21"].node.setInput("sdf1", ifThen6_nodes["SDFHorseShoe1"].node, "float");
          ifThen6_nodes["subnetOutput1"].node.setInput("input0", ifThen6_nodes["SDFMin21"].node, "min");
          ifThen6.uiData.setPosition(-200, 2050);
          ifThen6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          ifThen6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: false });
          ifThen6.params.postCreateSpareParams();
          ifThen6.params.runOnSceneLoadHooks();
          return { node: ifThen6, children: ifThen6_nodes };
        }
        function create_mix1(rayMarchingBuilder12) {
          var mix1 = rayMarchingBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(-600, -350);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(1950, 250);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_vec3ToFloat1(rayMarchingBuilder12) {
          var vec3ToFloat1 = rayMarchingBuilder12.createNode("vec3ToFloat");
          vec3ToFloat1.setName("vec3ToFloat1");
          const vec3ToFloat1_nodes = {};
          vec3ToFloat1.uiData.setPosition(-1100, -100);
          vec3ToFloat1.params.postCreateSpareParams();
          vec3ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec3ToFloat1, children: vec3ToFloat1_nodes };
        }
        rayMarchingBuilder1_nodes["SDFBox2"] = create_SDFBox2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox3"] = create_SDFBox3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox4"] = create_SDFBox4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox5"] = create_SDFBox5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox6"] = create_SDFBox6(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox7"] = create_SDFBox7(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"] = create_SDFContext1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext2"] = create_SDFContext2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial1"] = create_SDFMaterial1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial2"] = create_SDFMaterial2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMin1"] = create_SDFMin1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMin16"] = create_SDFMin16(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMin22"] = create_SDFMin22(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMin4"] = create_SDFMin4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMin8"] = create_SDFMin8(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMin9"] = create_SDFMin9(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFPlane1"] = create_SDFPlane1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["checkers1"] = create_checkers1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["compare1"] = create_compare1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["compare2"] = create_compare2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["compare3"] = create_compare3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["compare4"] = create_compare4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["compare5"] = create_compare5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["compare6"] = create_compare6(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant1"] = create_constant1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant2"] = create_constant2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant3"] = create_constant3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec2_1"] = create_floatToVec2_1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals1"] = create_globals1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["ifThen1"] = create_ifThen1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["ifThen2"] = create_ifThen2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["ifThen3"] = create_ifThen3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["ifThen4"] = create_ifThen4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["ifThen5"] = create_ifThen5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["ifThen6"] = create_ifThen6(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["mix1"] = create_mix1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["vec3ToFloat1"] = create_vec3ToFloat1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFPlane1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial1"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFContext2"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFMin22"].node,
          "min"
        );
        rayMarchingBuilder1_nodes["SDFContext2"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial2"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["mix1"].node,
          "mix"
        );
        rayMarchingBuilder1_nodes["SDFMaterial2"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["constant3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFMin1"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["ifThen5"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["SDFMin1"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["ifThen6"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["SDFMin16"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFMin8"].node,
          "min"
        );
        rayMarchingBuilder1_nodes["SDFMin16"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFMin9"].node,
          "min"
        );
        rayMarchingBuilder1_nodes["SDFMin22"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFMin16"].node,
          "min"
        );
        rayMarchingBuilder1_nodes["SDFMin22"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFMin1"].node,
          "min"
        );
        rayMarchingBuilder1_nodes["SDFMin4"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFContext1"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["SDFMin4"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFContext2"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["SDFMin8"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["ifThen1"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["SDFMin8"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["ifThen2"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["SDFMin9"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["ifThen3"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["SDFMin9"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["ifThen4"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["checkers1"].node.setInput(
          "uv",
          rayMarchingBuilder1_nodes["floatToVec2_1"].node,
          "vec2"
        );
        rayMarchingBuilder1_nodes["compare1"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["SDFBox2"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["compare2"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["SDFBox3"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["compare3"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["SDFBox4"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["compare4"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["SDFBox5"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["compare5"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["SDFBox6"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["compare6"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["SDFBox7"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["floatToVec2_1"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["vec3ToFloat1"].node,
          "x"
        );
        rayMarchingBuilder1_nodes["floatToVec2_1"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["vec3ToFloat1"].node,
          "z"
        );
        rayMarchingBuilder1_nodes["ifThen1"].node.setInput(
          "condition",
          rayMarchingBuilder1_nodes["compare1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["ifThen1"].node.setInput(
          "input0",
          rayMarchingBuilder1_nodes["SDFBox2"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["ifThen2"].node.setInput(
          "condition",
          rayMarchingBuilder1_nodes["compare2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["ifThen2"].node.setInput(
          "input0",
          rayMarchingBuilder1_nodes["SDFBox3"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["ifThen3"].node.setInput(
          "condition",
          rayMarchingBuilder1_nodes["compare3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["ifThen3"].node.setInput(
          "input0",
          rayMarchingBuilder1_nodes["SDFBox4"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["ifThen4"].node.setInput(
          "condition",
          rayMarchingBuilder1_nodes["compare4"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["ifThen4"].node.setInput(
          "input0",
          rayMarchingBuilder1_nodes["SDFBox5"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["ifThen5"].node.setInput(
          "condition",
          rayMarchingBuilder1_nodes["compare5"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["ifThen5"].node.setInput(
          "input0",
          rayMarchingBuilder1_nodes["SDFBox6"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["ifThen6"].node.setInput(
          "condition",
          rayMarchingBuilder1_nodes["compare6"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["ifThen6"].node.setInput(
          "input0",
          rayMarchingBuilder1_nodes["SDFBox7"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["mix1"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["constant1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["mix1"].node.setInput(
          "value1",
          rayMarchingBuilder1_nodes["constant2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["mix1"].node.setInput(
          "blend",
          rayMarchingBuilder1_nodes["checkers1"].node,
          "checker"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFMin4"].node,
          "min"
        );
        rayMarchingBuilder1_nodes["vec3ToFloat1"].node.setInput(
          "vec",
          rayMarchingBuilder1_nodes["globals1"].node,
          "position"
        );
        rayMarchingBuilder1.uiData.setPosition(-50, 0);
        rayMarchingBuilder1.p.maxSteps.set(39);
        rayMarchingBuilder1.p.maxDist.set(32.68);
        rayMarchingBuilder1.p.surfDist.set(2e-3);
        rayMarchingBuilder1.p.useEnvMap.set(1);
        rayMarchingBuilder1.p.envMap.set("/COP/envMap");
        rayMarchingBuilder1.p.front.set(true);
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      MAT.uiData.setPosition(-200, 250);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(raymarchedObject2) {
      var material1 = raymarchedObject2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 250);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_plane1(raymarchedObject2) {
      var plane1 = raymarchedObject2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(0, 50);
      plane1.p.size.set([50, 50]);
      plane1.p.center.set([0, -1, 0]);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    raymarchedObject_nodes["MAT"] = create_MAT(raymarchedObject);
    raymarchedObject_nodes["material1"] = create_material1(raymarchedObject);
    raymarchedObject_nodes["plane1"] = create_plane1(raymarchedObject);
    raymarchedObject_nodes["material1"].node.setInput(0, raymarchedObject_nodes["plane1"].node);
    raymarchedObject.uiData.setPosition(-50, -150);
    raymarchedObject.flags.display.set(true);
    raymarchedObject.params.postCreateSpareParams();
    raymarchedObject.params.runOnSceneLoadHooks();
    return { node: raymarchedObject, children: raymarchedObject_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([1.3013170423818436, -0.8879858917145013, -1.4138887422114657]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      cameraControls1.uiData.setPosition(-100, 0);
      cameraControls1.flags.display.set(true);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_perspectiveCamera_MAIN(cameras2) {
      var perspectiveCamera_MAIN = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_MAIN.setName("perspectiveCamera_MAIN");
      const perspectiveCamera_MAIN_nodes = {};
      perspectiveCamera_MAIN.uiData.setPosition(-100, -150);
      perspectiveCamera_MAIN.p.position.set([5, 5, 5]);
      perspectiveCamera_MAIN.params.postCreateSpareParams();
      perspectiveCamera_MAIN.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_MAIN, children: perspectiveCamera_MAIN_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["perspectiveCamera_MAIN"] = create_perspectiveCamera_MAIN(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_MAIN"].node);
    cameras.uiData.setPosition(-50, 50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["raymarchedObject"] = create_raymarchedObject(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_MAIN",
    focusedNodes: scene_root_nodes["raymarchedObject"].children["MAT"].children["rayMarchingBuilder1"].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_primitives_ts.cb0bd0ca018f3396a288.js.map