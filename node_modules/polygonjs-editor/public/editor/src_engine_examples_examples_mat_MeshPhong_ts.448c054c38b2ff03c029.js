(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshPhong_ts"],{

/***/ 28602:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo12 = parentNode.createNode("geo");
    geo12.setName("geo1");
    function create_MAT(geo13) {
      var MAT = geo13.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshPhong1(MAT2) {
        var meshPhong1 = MAT2.createNode("meshPhong");
        meshPhong1.setName("meshPhong1");
        meshPhong1.uiData.setPosition(-50, -50);
        meshPhong1.p.color.set([0.9333333333333333, 0.8, 0.6470588235294118]);
        meshPhong1.params.postCreateSpareParams();
        meshPhong1.params.runOnSceneLoadHooks();
        return meshPhong1;
      }
      function create_meshPhong2(MAT2) {
        var meshPhong2 = MAT2.createNode("meshPhong");
        meshPhong2.setName("meshPhong2");
        meshPhong2.uiData.setPosition(-50, 100);
        meshPhong2.params.postCreateSpareParams();
        meshPhong2.params.runOnSceneLoadHooks();
        return meshPhong2;
      }
      function create_meshPhong3(MAT2) {
        var meshPhong3 = MAT2.createNode("meshPhong");
        meshPhong3.setName("meshPhong3");
        meshPhong3.uiData.setPosition(-50, 250);
        meshPhong3.p.useVertexColors.set(true);
        meshPhong3.p.useEnvMap.set(true);
        meshPhong3.p.envMap.set("../../../COP/envMap");
        meshPhong3.p.reflectivity.set(0.93);
        meshPhong3.params.postCreateSpareParams();
        meshPhong3.params.runOnSceneLoadHooks();
        return meshPhong3;
      }
      create_meshPhong1(MAT);
      create_meshPhong2(MAT);
      create_meshPhong3(MAT);
      MAT.uiData.setPosition(-350, 200);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_color1(geo13) {
      var color12 = geo13.createNode("color");
      color12.setName("color1");
      color12.uiData.setPosition(300, -250);
      color12.p.fromAttribute.set(true);
      color12.p.attribName.set("position");
      color12.params.postCreateSpareParams();
      color12.params.runOnSceneLoadHooks();
      return color12;
    }
    function create_color2(geo13) {
      var color22 = geo13.createNode("color");
      color22.setName("color2");
      color22.uiData.setComment(
        "we use 2 color nodes to set the color attribute of this geometry. This is then picked up by the material assigned to it."
      );
      color22.uiData.setPosition(300, -150);
      color22.p.attribName.set("position");
      color22.p.color.set(["@Cd.r", "if(@P.y>0.5,1,0)", "@Cd.g"]);
      color22.params.postCreateSpareParams();
      color22.params.runOnSceneLoadHooks();
      return color22;
    }
    function create_fileGLTF1(geo13) {
      var fileGLTF12 = geo13.createNode("fileGLTF");
      fileGLTF12.setName("fileGLTF1");
      fileGLTF12.uiData.setPosition(50, -800);
      fileGLTF12.params.postCreateSpareParams();
      fileGLTF12.params.runOnSceneLoadHooks();
      return fileGLTF12;
    }
    function create_hierarchy1(geo13) {
      var hierarchy12 = geo13.createNode("hierarchy");
      hierarchy12.setName("hierarchy1");
      hierarchy12.uiData.setPosition(50, -700);
      hierarchy12.p.mode.set(1);
      hierarchy12.params.postCreateSpareParams();
      hierarchy12.params.runOnSceneLoadHooks();
      return hierarchy12;
    }
    function create_material1(geo13) {
      var material12 = geo13.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(-150, 0);
      material12.p.material.set("../MAT/meshPhong1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_material2(geo13) {
      var material22 = geo13.createNode("material");
      material22.setName("material2");
      material22.uiData.setPosition(50, 0);
      material22.p.material.set("../MAT/meshPhong2");
      material22.params.postCreateSpareParams();
      material22.params.runOnSceneLoadHooks();
      return material22;
    }
    function create_material3(geo13) {
      var material32 = geo13.createNode("material");
      material32.setName("material3");
      material32.uiData.setPosition(300, 0);
      material32.p.material.set("../MAT/meshPhong3");
      material32.params.postCreateSpareParams();
      material32.params.runOnSceneLoadHooks();
      return material32;
    }
    function create_merge1(geo13) {
      var merge12 = geo13.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(50, 350);
      merge12.flags.display.set(true);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_transform4(geo13) {
      var transform42 = geo13.createNode("transform");
      transform42.setName("transform4");
      transform42.uiData.setPosition(-150, -400);
      transform42.p.t.set([0, 0, 0.8490942039805385]);
      transform42.params.postCreateSpareParams();
      transform42.params.runOnSceneLoadHooks();
      return transform42;
    }
    function create_transform5(geo13) {
      var transform52 = geo13.createNode("transform");
      transform52.setName("transform5");
      transform52.uiData.setPosition(50, -400);
      transform52.params.postCreateSpareParams();
      transform52.params.runOnSceneLoadHooks();
      return transform52;
    }
    function create_transform6(geo13) {
      var transform62 = geo13.createNode("transform");
      transform62.setName("transform6");
      transform62.uiData.setPosition(300, -400);
      transform62.p.t.set([0, 0, -0.8490942039805385]);
      transform62.params.postCreateSpareParams();
      transform62.params.runOnSceneLoadHooks();
      return transform62;
    }
    create_MAT(geo12);
    var color1 = create_color1(geo12);
    var color2 = create_color2(geo12);
    var fileGLTF1 = create_fileGLTF1(geo12);
    var hierarchy1 = create_hierarchy1(geo12);
    var material1 = create_material1(geo12);
    var material2 = create_material2(geo12);
    var material3 = create_material3(geo12);
    var merge1 = create_merge1(geo12);
    var transform4 = create_transform4(geo12);
    var transform5 = create_transform5(geo12);
    var transform6 = create_transform6(geo12);
    color1.setInput(0, transform6);
    color2.setInput(0, color1);
    hierarchy1.setInput(0, fileGLTF1);
    material1.setInput(0, transform4);
    material2.setInput(0, transform5);
    material3.setInput(0, color2);
    merge1.setInput(0, material1);
    merge1.setInput(1, material2);
    merge1.setInput(2, material3);
    transform4.setInput(0, hierarchy1);
    transform5.setInput(0, hierarchy1);
    transform6.setInput(0, hierarchy1);
    geo12.uiData.setPosition(-50, -150);
    geo12.flags.display.set(true);
    geo12.params.postCreateSpareParams();
    geo12.params.runOnSceneLoadHooks();
    return geo12;
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return planeHelper1;
    }
    create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.03435322343011707, 0.41806574749855663, 0.18967993698156205]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([2.1915021772731733, 0.7292627449766405, -0.11494622230269118]);
    perspectiveCamera12.p.r.set([-92.91231074642486, 83.39132259672208, 92.93175761011257]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    function create_envMap(COP2) {
      var envMap2 = COP2.createNode("envMap");
      envMap2.setName("envMap");
      envMap2.uiData.setPosition(50, 200);
      envMap2.params.postCreateSpareParams();
      envMap2.params.runOnSceneLoadHooks();
      return envMap2;
    }
    function create_imageEnv(COP2) {
      var imageEnv2 = COP2.createNode("imageEXR");
      imageEnv2.setName("imageEnv");
      imageEnv2.uiData.setPosition(50, 100);
      imageEnv2.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv2.params.postCreateSpareParams();
      imageEnv2.params.runOnSceneLoadHooks();
      return imageEnv2;
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return imageUv;
    }
    var envMap = create_envMap(COP);
    var imageEnv = create_imageEnv(COP);
    create_imageUv(COP);
    envMap.setInput(0, imageEnv);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return COP;
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    function create_hemisphereLight1(lights2) {
      var hemisphereLight12 = lights2.createNode("hemisphereLight");
      hemisphereLight12.setName("hemisphereLight1");
      hemisphereLight12.uiData.setPosition(-100, 0);
      hemisphereLight12.params.postCreateSpareParams();
      hemisphereLight12.params.runOnSceneLoadHooks();
      return hemisphereLight12;
    }
    function create_merge1(lights2) {
      var merge12 = lights2.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(50, 300);
      merge12.flags.display.set(true);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_polarTransform1(lights2) {
      var polarTransform12 = lights2.createNode("polarTransform");
      polarTransform12.setName("polarTransform1");
      polarTransform12.uiData.setPosition(150, 50);
      polarTransform12.p.longitude.set(129.6);
      polarTransform12.p.latitude.set(46.8);
      polarTransform12.p.depth.set(5.8);
      polarTransform12.params.postCreateSpareParams();
      polarTransform12.params.runOnSceneLoadHooks();
      return polarTransform12;
    }
    function create_spotLight1(lights2) {
      var spotLight12 = lights2.createNode("spotLight");
      spotLight12.setName("spotLight1");
      spotLight12.uiData.setPosition(150, -150);
      spotLight12.params.postCreateSpareParams();
      spotLight12.params.runOnSceneLoadHooks();
      return spotLight12;
    }
    var hemisphereLight1 = create_hemisphereLight1(lights);
    var merge1 = create_merge1(lights);
    var polarTransform1 = create_polarTransform1(lights);
    var spotLight1 = create_spotLight1(lights);
    merge1.setInput(0, hemisphereLight1);
    merge1.setInput(1, polarTransform1);
    polarTransform1.setInput(0, spotLight1);
    lights.uiData.setPosition(-50, -50);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return lights;
  }
  var geo1 = create_geo1(root);
  create_grid(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  create_COP(root);
  create_lights(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [geo1.nodesByType("material")[0]],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshPhong_ts.448c054c38b2ff03c029.js.map