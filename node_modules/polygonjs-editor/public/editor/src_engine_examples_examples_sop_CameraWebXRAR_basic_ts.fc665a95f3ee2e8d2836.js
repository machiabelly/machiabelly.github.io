(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_CameraWebXRAR_basic_ts"],{

/***/ 94730:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([0.009551706323916092, 0.49956781418231494, -0.2404906439486597]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(-400, 100);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraWebXRAR1(cameras2) {
      var cameraWebXRAR1 = cameras2.createNode("cameraWebXRAR");
      cameraWebXRAR1.setName("cameraWebXRAR1");
      const cameraWebXRAR1_nodes = {};
      cameraWebXRAR1.uiData.setComment(
        "with this node, you give AR (augmented reality) capability to the camera. When setting the display flag to this one (or any downstream node), and if the camera is selected in the viewer, you will see an `AR button` in the viewer.\n\nClicking on it from a device that supports AR will allow you to see the scene in augmented reality."
      );
      cameraWebXRAR1.uiData.setPosition(-100, 100);
      cameraWebXRAR1.params.postCreateSpareParams();
      cameraWebXRAR1.params.runOnSceneLoadHooks();
      return { node: cameraWebXRAR1, children: cameraWebXRAR1_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setComment(
        "Here we merge 2 cameras.\n\nThe right one is to navigate the scene in AR, while the left one is to view and edit it when not in AR.\n\nIt is recommended to have different camera configurations like this, so that you can edit and debug your scene easily, without having to access your AR device."
      );
      merge1.uiData.setPosition(-250, 450);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera_AR(cameras2) {
      var perspectiveCamera_AR = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_AR.setName("perspectiveCamera_AR");
      const perspectiveCamera_AR_nodes = {};
      perspectiveCamera_AR.uiData.setPosition(-100, -100);
      perspectiveCamera_AR.params.postCreateSpareParams();
      perspectiveCamera_AR.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_AR, children: perspectiveCamera_AR_nodes };
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG.setName("perspectiveCamera_DEBUG");
      const perspectiveCamera_DEBUG_nodes = {};
      perspectiveCamera_DEBUG.uiData.setPosition(-400, -100);
      perspectiveCamera_DEBUG.p.position.set([3, 3, 3]);
      perspectiveCamera_DEBUG.params.postCreateSpareParams();
      perspectiveCamera_DEBUG.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraWebXRAR1"] = create_cameraWebXRAR1(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera_AR"] = create_perspectiveCamera_AR(cameras);
    cameras_nodes["perspectiveCamera_DEBUG"] = create_perspectiveCamera_DEBUG(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_DEBUG"].node);
    cameras_nodes["cameraWebXRAR1"].node.setInput(0, cameras_nodes["perspectiveCamera_AR"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["cameraControls1"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraWebXRAR1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(-50, -50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(0, 150);
      hemisphereLight1.flags.display.set(true);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    if (lights.childrenController) {
      lights.childrenController.selection.set([]);
    }
    lights.uiData.setPosition(-50, 50);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_model(parentNode) {
    var model = parentNode.createNode("geo");
    model.setName("model");
    const model_nodes = {};
    function create_fileOBJ1(model2) {
      var fileOBJ1 = model2.createNode("fileOBJ");
      fileOBJ1.setName("fileOBJ1");
      const fileOBJ1_nodes = {};
      fileOBJ1.uiData.setPosition(-150, 300);
      fileOBJ1.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/wolf.obj");
      fileOBJ1.params.postCreateSpareParams();
      fileOBJ1.params.runOnSceneLoadHooks();
      return { node: fileOBJ1, children: fileOBJ1_nodes };
    }
    function create_merge1(model2) {
      var merge1 = model2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-150, 600);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_planeHelper1(model2) {
      var planeHelper1 = model2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(100, 350);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    function create_transform1(model2) {
      var transform1 = model2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setComment(
        "in an AR session, the camera starts at `0,0,0`. It is therefore better to move any object you would like to see when starting in the `-Z` axis.\n\nHere the model is moved to `0, 0, -2`"
      );
      transform1.uiData.setPosition(-150, 750);
      transform1.flags.display.set(true);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([0, -0.5, -2]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    model_nodes["fileGLTF1"] = create_fileOBJ1(model);
    model_nodes["merge1"] = create_merge1(model);
    model_nodes["planeHelper1"] = create_planeHelper1(model);
    model_nodes["transform1"] = create_transform1(model);
    model_nodes["merge1"].node.setInput(0, model_nodes["fileGLTF1"].node);
    model_nodes["merge1"].node.setInput(1, model_nodes["planeHelper1"].node);
    model_nodes["transform1"].node.setInput(0, model_nodes["merge1"].node);
    if (model.childrenController) {
      model.childrenController.selection.set([]);
    }
    model.uiData.setPosition(-50, -150);
    model.flags.display.set(true);
    model.params.postCreateSpareParams();
    model.params.runOnSceneLoadHooks();
    return { node: model, children: model_nodes };
  }
  scene_root_nodes["cameras"] = create_cameras(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["model"] = create_model(root);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_AR",
    focusedNodes: Object.values(scene_root_nodes["cameras"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_CameraWebXRAR_basic_ts.fc665a95f3ee2e8d2836.js.map