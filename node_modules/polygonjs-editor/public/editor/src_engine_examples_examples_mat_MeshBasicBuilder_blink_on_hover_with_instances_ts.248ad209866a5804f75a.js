(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshBasicBuilder_blink_on_hover_with_instances_ts"],{

/***/ 86169:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return planeHelper1;
    }
    create_planeHelper1(grid);
    grid.uiData.setPosition(0, -50);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    hemisphereLight1.uiData.setPosition(200, 300);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return hemisphereLight1;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-150, 300);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([7.496148225698649, 3.960184145900027, 0]);
    perspectiveCamera12.p.r.set([-90, 69.17169338025565, 90]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    function create_envMap(COP2) {
      var envMap2 = COP2.createNode("envMap");
      envMap2.setName("envMap");
      envMap2.uiData.setPosition(50, 200);
      envMap2.params.postCreateSpareParams();
      envMap2.params.runOnSceneLoadHooks();
      return envMap2;
    }
    function create_imageEnv(COP2) {
      var imageEnv2 = COP2.createNode("imageEXR");
      imageEnv2.setName("imageEnv");
      imageEnv2.uiData.setPosition(50, 100);
      imageEnv2.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv2.params.postCreateSpareParams();
      imageEnv2.params.runOnSceneLoadHooks();
      return imageEnv2;
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return imageUv;
    }
    var envMap = create_envMap(COP);
    var imageEnv = create_imageEnv(COP);
    create_imageUv(COP);
    envMap.setInput(0, imageEnv);
    COP.uiData.setPosition(-150, 400);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return COP;
  }
  function create_blink_on_hover_with_instances(parentNode) {
    var blink_on_hover_with_instances = parentNode.createNode("geo");
    blink_on_hover_with_instances.setName("blink_on_hover_with_instances");
    function create_MAT(blink_on_hover_with_instances2) {
      var MAT = blink_on_hover_with_instances2.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshBasicBuilder_ID_FOR_RAYCAST(MAT2) {
        var meshBasicBuilder_ID_FOR_RAYCAST = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder_ID_FOR_RAYCAST.setName("meshBasicBuilder_ID_FOR_RAYCAST");
        function create_attribute1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var attribute12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("attribute");
          attribute12.setName("attribute1");
          attribute12.uiData.setPosition(-150, 0);
          attribute12.p.name.set("id");
          attribute12.params.postCreateSpareParams();
          attribute12.params.runOnSceneLoadHooks();
          return attribute12;
        }
        function create_floatToVec2_1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var floatToVec2_12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("floatToVec2");
          floatToVec2_12.setName("floatToVec2_1");
          floatToVec2_12.uiData.setPosition(-50, 250);
          floatToVec2_12.params.postCreateSpareParams();
          floatToVec2_12.params.runOnSceneLoadHooks();
          return floatToVec2_12;
        }
        function create_floatToVec3_1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var floatToVec3_12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("floatToVec3");
          floatToVec3_12.setName("floatToVec3_1");
          floatToVec3_12.uiData.setPosition(150, 0);
          floatToVec3_12.params.postCreateSpareParams();
          floatToVec3_12.params.runOnSceneLoadHooks();
          return floatToVec3_12;
        }
        function create_floatToVec3_2(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var floatToVec3_22 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("floatToVec3");
          floatToVec3_22.setName("floatToVec3_2");
          floatToVec3_22.uiData.setPosition(150, 250);
          floatToVec3_22.p.y.set(0.8);
          floatToVec3_22.p.z.set(0.58);
          floatToVec3_22.params.postCreateSpareParams();
          floatToVec3_22.params.runOnSceneLoadHooks();
          return floatToVec3_22;
        }
        function create_globals1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var globals1 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("globals");
          globals1.setName("globals1");
          globals1.uiData.setPosition(-400, -100);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return globals1;
        }
        function create_hsvToRgb1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var hsvToRgb12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("hsvToRgb");
          hsvToRgb12.setName("hsvToRgb1");
          hsvToRgb12.uiData.setPosition(300, 250);
          hsvToRgb12.params.postCreateSpareParams();
          hsvToRgb12.params.runOnSceneLoadHooks();
          return hsvToRgb12;
        }
        function create_instanceTransform1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var instanceTransform12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("instanceTransform");
          instanceTransform12.setName("instanceTransform1");
          instanceTransform12.uiData.setPosition(300, -150);
          instanceTransform12.params.postCreateSpareParams();
          instanceTransform12.params.runOnSceneLoadHooks();
          return instanceTransform12;
        }
        function create_output1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var output12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("output");
          output12.setName("output1");
          output12.uiData.setPosition(500, 0);
          output12.params.postCreateSpareParams();
          output12.params.runOnSceneLoadHooks();
          return output12;
        }
        function create_random1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var random12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("random");
          random12.setName("random1");
          random12.uiData.setPosition(50, 250);
          random12.params.postCreateSpareParams();
          random12.params.runOnSceneLoadHooks();
          return random12;
        }
        function create_round1(meshBasicBuilder_ID_FOR_RAYCAST2) {
          var round12 = meshBasicBuilder_ID_FOR_RAYCAST2.createNode("round");
          round12.setName("round1");
          round12.uiData.setPosition(-50, 0);
          round12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          round12.params.postCreateSpareParams();
          round12.params.runOnSceneLoadHooks();
          return round12;
        }
        var attribute1 = create_attribute1(meshBasicBuilder_ID_FOR_RAYCAST);
        var floatToVec2_1 = create_floatToVec2_1(meshBasicBuilder_ID_FOR_RAYCAST);
        var floatToVec3_1 = create_floatToVec3_1(meshBasicBuilder_ID_FOR_RAYCAST);
        var floatToVec3_2 = create_floatToVec3_2(meshBasicBuilder_ID_FOR_RAYCAST);
        create_globals1(meshBasicBuilder_ID_FOR_RAYCAST);
        var hsvToRgb1 = create_hsvToRgb1(meshBasicBuilder_ID_FOR_RAYCAST);
        var instanceTransform1 = create_instanceTransform1(meshBasicBuilder_ID_FOR_RAYCAST);
        var output1 = create_output1(meshBasicBuilder_ID_FOR_RAYCAST);
        var random1 = create_random1(meshBasicBuilder_ID_FOR_RAYCAST);
        var round1 = create_round1(meshBasicBuilder_ID_FOR_RAYCAST);
        floatToVec2_1.setInput("x", round1, "val");
        floatToVec3_1.setInput("x", round1, "val");
        floatToVec3_2.setInput("x", random1, "rand");
        hsvToRgb1.setInput("hsv", floatToVec3_2, "vec3");
        output1.setInput("position", instanceTransform1, "position");
        output1.setInput("normal", instanceTransform1, "normal");
        output1.setInput("color", floatToVec3_1, "vec3");
        random1.setInput("seed", floatToVec2_1, "vec2");
        round1.setInput("in", attribute1, "val");
        meshBasicBuilder_ID_FOR_RAYCAST.uiData.setPosition(0, 200);
        meshBasicBuilder_ID_FOR_RAYCAST.params.postCreateSpareParams();
        meshBasicBuilder_ID_FOR_RAYCAST.params.runOnSceneLoadHooks();
        return meshBasicBuilder_ID_FOR_RAYCAST;
      }
      function create_meshStandardBuilder1(MAT2) {
        var meshStandardBuilder1 = MAT2.createNode("meshStandardBuilder");
        meshStandardBuilder1.setName("meshStandardBuilder1");
        function create_abs1(meshStandardBuilder12) {
          var abs12 = meshStandardBuilder12.createNode("abs");
          abs12.setName("abs1");
          abs12.uiData.setPosition(150, 650);
          abs12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          abs12.params.postCreateSpareParams();
          abs12.params.runOnSceneLoadHooks();
          return abs12;
        }
        function create_attribute1(meshStandardBuilder12) {
          var attribute12 = meshStandardBuilder12.createNode("attribute");
          attribute12.setName("attribute1");
          attribute12.uiData.setPosition(-250, 250);
          attribute12.p.name.set("id");
          attribute12.params.postCreateSpareParams();
          attribute12.params.runOnSceneLoadHooks();
          return attribute12;
        }
        function create_compare1(meshStandardBuilder12) {
          var compare12 = meshStandardBuilder12.createNode("compare");
          compare12.setName("compare1");
          compare12.uiData.setPosition(0, 350);
          compare12.p.test.set(0);
          compare12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          compare12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: false });
          compare12.params.postCreateSpareParams();
          compare12.params.runOnSceneLoadHooks();
          return compare12;
        }
        function create_constant1(meshStandardBuilder12) {
          var constant12 = meshStandardBuilder12.createNode("constant");
          constant12.setName("constant1");
          constant12.uiData.setPosition(250, 800);
          constant12.p.float.set(1);
          constant12.params.postCreateSpareParams();
          constant12.params.runOnSceneLoadHooks();
          return constant12;
        }
        function create_constant2(meshStandardBuilder12) {
          var constant22 = meshStandardBuilder12.createNode("constant");
          constant22.setName("constant2");
          constant22.uiData.setPosition(400, 100);
          constant22.p.type.set(4);
          constant22.p.color.set([1, 1, 1]);
          constant22.p.asColor.set(true);
          constant22.params.postCreateSpareParams();
          constant22.params.runOnSceneLoadHooks();
          return constant22;
        }
        function create_globals1(meshStandardBuilder12) {
          var globals12 = meshStandardBuilder12.createNode("globals");
          globals12.setName("globals1");
          globals12.uiData.setPosition(-300, 750);
          globals12.params.postCreateSpareParams();
          globals12.params.runOnSceneLoadHooks();
          return globals12;
        }
        function create_instanceTransform1(meshStandardBuilder12) {
          var instanceTransform12 = meshStandardBuilder12.createNode("instanceTransform");
          instanceTransform12.setName("instanceTransform1");
          instanceTransform12.uiData.setPosition(600, -50);
          instanceTransform12.params.postCreateSpareParams();
          instanceTransform12.params.runOnSceneLoadHooks();
          return instanceTransform12;
        }
        function create_multAdd1(meshStandardBuilder12) {
          var multAdd12 = meshStandardBuilder12.createNode("multAdd");
          multAdd12.setName("multAdd1");
          multAdd12.uiData.setPosition(-100, 650);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd12.params.get("mult").set(6);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd12.params.postCreateSpareParams();
          multAdd12.params.runOnSceneLoadHooks();
          return multAdd12;
        }
        function create_multAdd2(meshStandardBuilder12) {
          var multAdd22 = meshStandardBuilder12.createNode("multAdd");
          multAdd22.setName("multAdd2");
          multAdd22.uiData.setPosition(250, 650);
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd22.params.get("mult").set(7);
          multAdd22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd22.params.get("postAdd").set(1);
          multAdd22.params.postCreateSpareParams();
          multAdd22.params.runOnSceneLoadHooks();
          return multAdd22;
        }
        function create_multScalar1(meshStandardBuilder12) {
          var multScalar12 = meshStandardBuilder12.createNode("multScalar");
          multScalar12.setName("multScalar1");
          multScalar12.uiData.setPosition(600, 250);
          multScalar12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
          multScalar12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: false });
          multScalar12.params.postCreateSpareParams();
          multScalar12.params.runOnSceneLoadHooks();
          return multScalar12;
        }
        function create_output1(meshStandardBuilder12) {
          var output12 = meshStandardBuilder12.createNode("output");
          output12.setName("output1");
          output12.uiData.setPosition(800, -50);
          output12.params.postCreateSpareParams();
          output12.params.runOnSceneLoadHooks();
          return output12;
        }
        function create_param1(meshStandardBuilder12) {
          var param12 = meshStandardBuilder12.createNode("param");
          param12.setName("param1");
          param12.uiData.setPosition(-250, 450);
          param12.p.name.set("hoveredId");
          param12.params.postCreateSpareParams();
          param12.params.runOnSceneLoadHooks();
          return param12;
        }
        function create_round1(meshStandardBuilder12) {
          var round12 = meshStandardBuilder12.createNode("round");
          round12.setName("round1");
          round12.uiData.setPosition(-100, 250);
          round12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          round12.params.postCreateSpareParams();
          round12.params.runOnSceneLoadHooks();
          return round12;
        }
        function create_round2(meshStandardBuilder12) {
          var round22 = meshStandardBuilder12.createNode("round");
          round22.setName("round2");
          round22.uiData.setPosition(-100, 450);
          round22.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          round22.params.postCreateSpareParams();
          round22.params.runOnSceneLoadHooks();
          return round22;
        }
        function create_sin1(meshStandardBuilder12) {
          var sin12 = meshStandardBuilder12.createNode("sin");
          sin12.setName("sin1");
          sin12.uiData.setPosition(50, 650);
          sin12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin12.params.postCreateSpareParams();
          sin12.params.runOnSceneLoadHooks();
          return sin12;
        }
        function create_twoWaySwitch1(meshStandardBuilder12) {
          var twoWaySwitch12 = meshStandardBuilder12.createNode("twoWaySwitch");
          twoWaySwitch12.setName("twoWaySwitch1");
          twoWaySwitch12.uiData.setPosition(400, 500);
          twoWaySwitch12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "condition", false, { spare: true, editable: false });
          twoWaySwitch12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "ifTrue", 0, { spare: true, editable: false });
          twoWaySwitch12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "ifFalse", 0, { spare: true, editable: false });
          twoWaySwitch12.params.postCreateSpareParams();
          twoWaySwitch12.params.runOnSceneLoadHooks();
          return twoWaySwitch12;
        }
        var abs1 = create_abs1(meshStandardBuilder1);
        var attribute1 = create_attribute1(meshStandardBuilder1);
        var compare1 = create_compare1(meshStandardBuilder1);
        var constant1 = create_constant1(meshStandardBuilder1);
        var constant2 = create_constant2(meshStandardBuilder1);
        var globals1 = create_globals1(meshStandardBuilder1);
        var instanceTransform1 = create_instanceTransform1(meshStandardBuilder1);
        var multAdd1 = create_multAdd1(meshStandardBuilder1);
        var multAdd2 = create_multAdd2(meshStandardBuilder1);
        var multScalar1 = create_multScalar1(meshStandardBuilder1);
        var output1 = create_output1(meshStandardBuilder1);
        var param1 = create_param1(meshStandardBuilder1);
        var round1 = create_round1(meshStandardBuilder1);
        var round2 = create_round2(meshStandardBuilder1);
        var sin1 = create_sin1(meshStandardBuilder1);
        var twoWaySwitch1 = create_twoWaySwitch1(meshStandardBuilder1);
        abs1.setInput("in", sin1, "val");
        compare1.setInput("value0", round1, "val");
        compare1.setInput("value1", round2, "val");
        multAdd1.setInput("value", globals1, "time");
        multAdd2.setInput("value", abs1, "val");
        multScalar1.setInput("value", constant2, "val");
        multScalar1.setInput("mult", twoWaySwitch1, "val");
        output1.setInput("position", instanceTransform1, "position");
        output1.setInput("normal", instanceTransform1, "normal");
        output1.setInput("color", multScalar1, "val");
        round1.setInput("in", attribute1, "val");
        round2.setInput("in", param1, "val");
        sin1.setInput("radians", multAdd1, "val");
        twoWaySwitch1.setInput("condition", compare1, "val");
        twoWaySwitch1.setInput("ifTrue", multAdd2, "val");
        twoWaySwitch1.setInput("ifFalse", constant1, "val");
        meshStandardBuilder1.uiData.setComment(
          'If you look into the parameter panel, then in the "advanced" tab, you can see at the bottom a "hoveredId" parameter. It is using an expression that refers to the event/raycast node, and will then have the id value of the sphere that is currently under the cursor.\nThis then drives the blinking effect.\n\nYou can dive inside this node to see how the material is set up.'
        );
        meshStandardBuilder1.uiData.setPosition(0, 350);
        meshStandardBuilder1.p.useMap.set(true);
        meshStandardBuilder1.p.map.set("../../../COP/imageUv");
        meshStandardBuilder1.p.useEnvMap.set(true);
        meshStandardBuilder1.p.envMap.set("../../../COP/envMap");
        meshStandardBuilder1.p.metalness.set(1);
        meshStandardBuilder1.p.roughness.set(0.05);
        meshStandardBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "hoveredId", 0, {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true
        });
        meshStandardBuilder1.params.get("hoveredId").set(
          'if(ch("../../eventsNetwork1/raycast1/pixelAlpha")>0.5, ch("../../eventsNetwork1/raycast1/pixelColorr"),-1)'
        );
        meshStandardBuilder1.params.get("hoveredId").options.setOption("editable", void 0);
        meshStandardBuilder1.params.postCreateSpareParams();
        meshStandardBuilder1.params.runOnSceneLoadHooks();
        return meshStandardBuilder1;
      }
      create_meshBasicBuilder_ID_FOR_RAYCAST(MAT);
      create_meshStandardBuilder1(MAT);
      MAT.uiData.setComment(
        "Inside this node, we create 2 materials. First is the one that is always visible, and then the one that is used by the event/raycasting node inside the eventsNetwork node."
      );
      MAT.uiData.setPosition(-400, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_attribId1(blink_on_hover_with_instances2) {
      var attribId12 = blink_on_hover_with_instances2.createNode("attribId");
      attribId12.setName("attribId1");
      attribId12.uiData.setPosition(200, 150);
      attribId12.p.idn.set(false);
      attribId12.params.postCreateSpareParams();
      attribId12.params.runOnSceneLoadHooks();
      return attribId12;
    }
    function create_eventsNetwork1(blink_on_hover_with_instances2) {
      var eventsNetwork1 = blink_on_hover_with_instances2.createNode("eventsNetwork");
      eventsNetwork1.setName("eventsNetwork1");
      function create_nodeCook1(eventsNetwork12) {
        var nodeCook12 = eventsNetwork12.createNode("nodeCook");
        nodeCook12.setName("nodeCook1");
        nodeCook12.uiData.setPosition(-400, 150);
        nodeCook12.p.mask.set("*instance*");
        nodeCook12.params.postCreateSpareParams();
        nodeCook12.params.runOnSceneLoadHooks();
        return nodeCook12;
      }
      function create_pointer1(eventsNetwork12) {
        var pointer12 = eventsNetwork12.createNode("pointer", {
          paramsInitValueOverrides: {
            pointerdown: { raw_input: false },
            pointermove: { raw_input: true }
          }
        });
        pointer12.setName("pointer1");
        pointer12.uiData.setPosition(-350, -50);
        pointer12.params.postCreateSpareParams();
        pointer12.params.runOnSceneLoadHooks();
        return pointer12;
      }
      function create_raycast1(eventsNetwork12) {
        var raycast12 = eventsNetwork12.createNode("raycast");
        raycast12.setName("raycast1");
        raycast12.uiData.setComment(
          'This raycasting node is the key to this "blinking on hover" effect. Each time it is triggered (in this case, on pointermove events), it will render the scene using the given material on a single pixel under the cursor. It will then used the value of that pixel to know the id of the sphere is under the cursor. This value is then used by the displayed material.'
        );
        raycast12.uiData.setPosition(-100, 0);
        raycast12.p.mode.set(1);
        raycast12.p.mouse.set([0.9737609329446064, 0.25464190981432355]);
        raycast12.p.overrideMaterial.set(true);
        raycast12.p.material.set("../../MAT/meshBasicBuilder_ID_FOR_RAYCAST");
        raycast12.p.pixelColor.set([38, 0, 0]);
        raycast12.p.pixelAlpha.set(1);
        raycast12.p.objectMask.set("*instancesRaycastTarget*");
        raycast12.p.traverseChildren.set(false);
        raycast12.p.tposition.set(false);
        raycast12.params.postCreateSpareParams();
        raycast12.params.runOnSceneLoadHooks();
        return raycast12;
      }
      function create_viewer1(eventsNetwork12) {
        var viewer12 = eventsNetwork12.createNode("viewer");
        viewer12.setName("viewer1");
        viewer12.uiData.setPosition(250, 0);
        viewer12.params.postCreateSpareParams();
        viewer12.params.runOnSceneLoadHooks();
        return viewer12;
      }
      var nodeCook1 = create_nodeCook1(eventsNetwork1);
      var pointer1 = create_pointer1(eventsNetwork1);
      var raycast1 = create_raycast1(eventsNetwork1);
      var viewer1 = create_viewer1(eventsNetwork1);
      raycast1.setInput("trigger", pointer1, "pointermove");
      raycast1.setInput("updateObjects", nodeCook1, "each");
      viewer1.setInput("setCss", raycast1, "hit");
      viewer1.setInput("unSetCss", raycast1, "miss");
      eventsNetwork1.uiData.setComment("Dive inside here to see how the raycasting is setup");
      eventsNetwork1.uiData.setPosition(-400, 500);
      eventsNetwork1.params.postCreateSpareParams();
      eventsNetwork1.params.runOnSceneLoadHooks();
      return eventsNetwork1;
    }
    function create_instance1(blink_on_hover_with_instances2) {
      var instance12 = blink_on_hover_with_instances2.createNode("instance");
      instance12.setName("instance1");
      instance12.uiData.setPosition(100, 500);
      instance12.flags.display.set(true);
      instance12.p.attributesToCopy.set("instance* id");
      instance12.p.material.set("../MAT/meshStandardBuilder1");
      instance12.params.postCreateSpareParams();
      instance12.params.runOnSceneLoadHooks();
      return instance12;
    }
    function create_instance_ID_DEBUG(blink_on_hover_with_instances2) {
      var instance_ID_DEBUG2 = blink_on_hover_with_instances2.createNode("instance");
      instance_ID_DEBUG2.setName("instance_ID_DEBUG");
      instance_ID_DEBUG2.uiData.setComment("This node is to test the material used by the event/raycasting node");
      instance_ID_DEBUG2.uiData.setPosition(-150, 250);
      instance_ID_DEBUG2.p.attributesToCopy.set("instance* id");
      instance_ID_DEBUG2.p.material.set("../MAT/meshBasicBuilder_ID_FOR_RAYCAST");
      instance_ID_DEBUG2.params.postCreateSpareParams();
      instance_ID_DEBUG2.params.runOnSceneLoadHooks();
      return instance_ID_DEBUG2;
    }
    function create_plane1(blink_on_hover_with_instances2) {
      var plane12 = blink_on_hover_with_instances2.createNode("plane");
      plane12.setName("plane1");
      plane12.uiData.setPosition(200, -50);
      plane12.p.size.set([13, 13]);
      plane12.params.postCreateSpareParams();
      plane12.params.runOnSceneLoadHooks();
      return plane12;
    }
    function create_sphere1(blink_on_hover_with_instances2) {
      var sphere12 = blink_on_hover_with_instances2.createNode("sphere");
      sphere12.setName("sphere1");
      sphere12.uiData.setPosition(0, -50);
      sphere12.p.radius.set(0.4);
      sphere12.params.postCreateSpareParams();
      sphere12.params.runOnSceneLoadHooks();
      return sphere12;
    }
    create_MAT(blink_on_hover_with_instances);
    var attribId1 = create_attribId1(blink_on_hover_with_instances);
    create_eventsNetwork1(blink_on_hover_with_instances);
    var instance1 = create_instance1(blink_on_hover_with_instances);
    var instance_ID_DEBUG = create_instance_ID_DEBUG(blink_on_hover_with_instances);
    var plane1 = create_plane1(blink_on_hover_with_instances);
    var sphere1 = create_sphere1(blink_on_hover_with_instances);
    attribId1.setInput(0, plane1);
    instance1.setInput(0, sphere1);
    instance1.setInput(1, attribId1);
    instance_ID_DEBUG.setInput(0, sphere1);
    instance_ID_DEBUG.setInput(1, attribId1);
    blink_on_hover_with_instances.uiData.setComment(
      'Dive inside this node to see how the "blinking on hover" effect is setup for instances. It is more performant than with separate objects, but requires a bit more work.'
    );
    blink_on_hover_with_instances.uiData.setPosition(0, 50);
    blink_on_hover_with_instances.flags.display.set(true);
    blink_on_hover_with_instances.params.postCreateSpareParams();
    blink_on_hover_with_instances.params.runOnSceneLoadHooks();
    return blink_on_hover_with_instances;
  }
  create_grid(root);
  create_hemisphereLight1(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  create_COP(root);
  create_blink_on_hover_with_instances(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshBasicBuilder_blink_on_hover_with_instances_ts.248ad209866a5804f75a.js.map