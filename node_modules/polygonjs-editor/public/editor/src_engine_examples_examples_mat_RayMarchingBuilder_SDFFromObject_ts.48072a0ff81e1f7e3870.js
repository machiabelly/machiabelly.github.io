(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_SDFFromObject_ts"],{

/***/ 79493:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": function() { return /* binding */ MAT_RAYMARCHING_BUILDER_LABEL; },
/* harmony export */   "T": function() { return /* binding */ rayMarchingBuilderActorNodeContextMenu; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_mat_RayMarchingBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13839);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52070);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12764);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




const MAT_RAYMARCHING_BUILDER_LABEL = { UPDATE_TEXTURE_SDF_BOUNDS: "Update Texture SDF Bounds" };
const rayMarchingBuilderActorNodeContextMenu = {
  nodeClass: _polygonjs_polygonjs_src_engine_nodes_mat_RayMarchingBuilder__WEBPACK_IMPORTED_MODULE_0__/* .RayMarchingBuilderMatNode */ .n,
  setupFunc: (node) => {
    const bindTextureSDFBounds = {
      entry: { id: "updateTextureSDFBounds", label: MAT_RAYMARCHING_BUILDER_LABEL.UPDATE_TEXTURE_SDF_BOUNDS },
      callback: () => {
        const spareParams = node.params.spare;
        const nodePathParams = [];
        for (let spareParam of spareParams) {
          if (spareParam.type() == _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.NODE_PATH */ ._.NODE_PATH) {
            nodePathParams.push(spareParam);
          }
        }
        function _updateNodePathBoundParams(nodePathParam) {
          return __async(this, null, function* () {
            if (nodePathParam.isDirty()) {
              yield nodePathParam.compute();
            }
            const nodeTarget = nodePathParam.value.nodeWithContext(_polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__/* .NodeContext.COP */ .sy.COP);
            if (!nodeTarget) {
              return;
            }
            const nodeType = nodeTarget.type();
            if (![_polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__/* .CopType.SDF_BLUR */ .y.SDF_BLUR, _polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__/* .CopType.SDF_FROM_OBJECT */ .y.SDF_FROM_OBJECT, _polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Cop__WEBPACK_IMPORTED_MODULE_3__/* .CopType.SDF_FROM_URL */ .y.SDF_FROM_URL].includes(nodeType)) {
              return;
            }
            const sdfNode = nodeTarget;
            const spareParamNameBoundMin = `${nodePathParam.name()}BoundMin`;
            const spareParamNameBoundMax = `${nodePathParam.name()}BoundMax`;
            const spareParamBoundMin = node.params.spare.find(
              (spareParam) => spareParam.name() == spareParamNameBoundMin
            );
            const spareParamBoundMax = node.params.spare.find(
              (spareParam) => spareParam.name() == spareParamNameBoundMax
            );
            console.log({ spareParamBoundMin, spareParamBoundMax });
            if (!(spareParamBoundMin && spareParamBoundMax)) {
              return;
            }
            const components = ["x", "y", "z"];
            const USE_CHSOP = false;
            if (USE_CHSOP) {
              spareParamBoundMin.set(
                components.map(
                  (c) => `ch(chsop('${nodePathParam.name()}')+'/${sdfNode.p.boundMin[c].name()}')`
                )
              );
              spareParamBoundMax.set(
                components.map(
                  (c) => `ch(chsop('${nodePathParam.name()}')+'/${sdfNode.p.boundMax[c].name()}')`
                )
              );
            } else {
              spareParamBoundMin.set(
                components.map(
                  (c) => `ch('${nodePathParam.rawInput()}/${sdfNode.p.boundMin[c].name()}')`
                )
              );
              spareParamBoundMax.set(
                components.map(
                  (c) => `ch('${nodePathParam.rawInput()}/${sdfNode.p.boundMax[c].name()}')`
                )
              );
            }
          });
        }
        nodePathParams.forEach(_updateNodePathBoundParams);
      }
    };
    return [bindTextureSDFBounds];
  }
};


/***/ }),

/***/ 53695:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1934);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(52070);
/* harmony import */ var _editor_components_widgets_context_menus_nodes_mat_RaymarchingBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(79493);





const contextMenuLabel = _editor_components_widgets_context_menus_nodes_mat_RaymarchingBuilder__WEBPACK_IMPORTED_MODULE_0__/* .MAT_RAYMARCHING_BUILDER_LABEL.UPDATE_TEXTURE_SDF_BOUNDS */ .F.UPDATE_TEXTURE_SDF_BOUNDS;
function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_1__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  const scene_root_nodes = {};
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setComment("This node contains the environment map");
    COP.uiData.setPosition(-400, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-0.020996863163782346, 0.44709790121997955, 0.00790189039531607]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      cameraControls1.uiData.setPosition(-350, -150);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraRenderer1(cameras2) {
      var cameraRenderer1 = cameras2.createNode("cameraRenderer");
      cameraRenderer1.setName("cameraRenderer1");
      const cameraRenderer1_nodes = {};
      function create_WebGLRenderer1(cameraRenderer12) {
        var WebGLRenderer1 = cameraRenderer12.createNode("WebGLRenderer");
        WebGLRenderer1.setName("WebGLRenderer1");
        const WebGLRenderer1_nodes = {};
        WebGLRenderer1.uiData.setPosition(0, 0);
        WebGLRenderer1.p.tpixelRatio.set(true);
        WebGLRenderer1.p.pixelRatio.set(1);
        WebGLRenderer1.params.postCreateSpareParams();
        WebGLRenderer1.params.runOnSceneLoadHooks();
        return { node: WebGLRenderer1, children: WebGLRenderer1_nodes };
      }
      cameraRenderer1_nodes["WebGLRenderer1"] = create_WebGLRenderer1(cameraRenderer1);
      cameraRenderer1.uiData.setComment(
        "If the performance of this scene was slow, you could try and un-bypass this node. This will set the pixelRatio from 2 (the default) to 1. Note that you will have to save the scene and reload it when you do so."
      );
      cameraRenderer1.uiData.setPosition(-350, 100);
      cameraRenderer1.flags.bypass.set(true);
      cameraRenderer1.flags.display.set(true);
      cameraRenderer1.p.node.set("WebGLRenderer1");
      cameraRenderer1.params.postCreateSpareParams();
      cameraRenderer1.params.runOnSceneLoadHooks();
      return { node: cameraRenderer1, children: cameraRenderer1_nodes };
    }
    function create_perspectiveCamera_MAIN(cameras2) {
      var perspectiveCamera_MAIN = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_MAIN.setName("perspectiveCamera_MAIN");
      const perspectiveCamera_MAIN_nodes = {};
      perspectiveCamera_MAIN.uiData.setPosition(-350, -250);
      perspectiveCamera_MAIN.p.position.set([1, 0.5, 1]);
      perspectiveCamera_MAIN.params.postCreateSpareParams();
      perspectiveCamera_MAIN.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_MAIN, children: perspectiveCamera_MAIN_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraRenderer1"] = create_cameraRenderer1(cameras);
    cameras_nodes["perspectiveCamera_MAIN"] = create_perspectiveCamera_MAIN(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_MAIN"].node);
    cameras_nodes["cameraRenderer1"].node.setInput(0, cameras_nodes["cameraControls1"].node);
    cameras.uiData.setComment(
      "This contains the camera setup.\nIf the performance of this scene was slow, you could try and enter this node, and un-bypass the cameraRenderer. This will set the pixelRatio from 2 (the default) to 1. Note that you will have to save the scene and reload it when you do so."
    );
    cameras.uiData.setPosition(-50, -50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(50, 0);
      hemisphereLight1.flags.display.set(true);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights.uiData.setComment(
      "This contains the light. It is not used when you load the scene, but would be if you were to change the raymarchingBuilder material node"
    );
    lights.uiData.setPosition(-50, 300);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_raymarchedObject(parentNode) {
    var raymarchedObject = parentNode.createNode("geo");
    raymarchedObject.setName("raymarchedObject");
    const raymarchedObject_nodes = {};
    function create_COP2(raymarchedObject2) {
      var COP = raymarchedObject2.createNode("copNetwork");
      COP.setName("COP");
      const COP_nodes = {};
      function create_SDFExporter1(COP2) {
        var SDFExporter1 = COP2.createNode("SDFExporter");
        SDFExporter1.setName("SDFExporter1");
        const SDFExporter1_nodes = {};
        SDFExporter1.uiData.setComment(
          "This node saves the input SDF to disk. Note that it is much more practical to use it from the local app ( https://polygonjs.com/docs/install ) as it will save it right in your textures folder of your current project."
        );
        SDFExporter1.uiData.setPosition(-150, -50);
        SDFExporter1.params.postCreateSpareParams();
        SDFExporter1.params.runOnSceneLoadHooks();
        return { node: SDFExporter1, children: SDFExporter1_nodes };
      }
      function create_SDFFromObject1(COP2) {
        var SDFFromObject1 = COP2.createNode("SDFFromObject");
        SDFFromObject1.setName("SDFFromObject1");
        const SDFFromObject1_nodes = {};
        SDFFromObject1.uiData.setComment(
          "This node creates a 3D texture representing the SDF of an object. \nNote that it can take a very long time to create an SDF with a small step size. It is therefore recommended to do it and use the SDFExporter and reload it with the SDFFromUrl"
        );
        SDFFromObject1.uiData.setPosition(-150, -400);
        SDFFromObject1.p.geometry.set("../../material2");
        SDFFromObject1.p.voxelSize.set(0.0400096);
        SDFFromObject1.p.resolution.set([34, 30, 24]);
        SDFFromObject1.p.boundMin.set([-0.6587794462839762, -0.07686367730023519, -0.4619663417339325]);
        SDFFromObject1.p.boundMax.set([0.6588004271189372, 1.0769783535881567, 0.4618737757205963]);
        SDFFromObject1.params.postCreateSpareParams();
        SDFFromObject1.params.runOnSceneLoadHooks();
        return { node: SDFFromObject1, children: SDFFromObject1_nodes };
      }
      function create_SDFFromUrl1(COP2) {
        var SDFFromUrl1 = COP2.createNode("SDFFromUrl");
        SDFFromUrl1.setName("SDFFromUrl1");
        const SDFFromUrl1_nodes = {};
        SDFFromUrl1.uiData.setComment(
          "This loads the SDF from a file or url, that was saved from the SDFExporter node. \nTry and use the presets on the params panel to change the url it loads from"
        );
        SDFFromUrl1.uiData.setPosition(-150, 250);
        SDFFromUrl1.p.url.set(
          "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/sdf/rhino.mid.bin"
        );
        SDFFromUrl1.p.resolution.set([52, 44, 36]);
        SDFFromUrl1.p.boundMin.set([-0.6297152042388916, -0.049940697848796844, -0.43309634923934937]);
        SDFFromUrl1.p.boundMax.set([0.6297361850738525, 1.0500553846359253, 0.4330037832260132]);
        SDFFromUrl1.params.postCreateSpareParams();
        SDFFromUrl1.params.runOnSceneLoadHooks();
        return { node: SDFFromUrl1, children: SDFFromUrl1_nodes };
      }
      COP_nodes["SDFExporter1"] = create_SDFExporter1(COP);
      COP_nodes["SDFFromObject1"] = create_SDFFromObject1(COP);
      COP_nodes["SDFFromUrl1"] = create_SDFFromUrl1(COP);
      COP_nodes["SDFExporter1"].node.setInput(0, COP_nodes["SDFFromObject1"].node);
      COP.uiData.setComment("In this node, we both create and load the 3D textures used as SDF in the material");
      COP.uiData.setPosition(-350, 400);
      COP.params.postCreateSpareParams();
      COP.params.runOnSceneLoadHooks();
      return { node: COP, children: COP_nodes };
    }
    function create_MAT(raymarchedObject2) {
      var MAT = raymarchedObject2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        const meshStandard1_nodes = {};
        meshStandard1.uiData.setPosition(0, 0);
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return { node: meshStandard1, children: meshStandard1_nodes };
      }
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        const rayMarchingBuilder1_nodes = {};
        function create_SDFBox1(rayMarchingBuilder12) {
          var SDFBox1 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox1.setName("SDFBox1");
          const SDFBox1_nodes = {};
          SDFBox1.uiData.setPosition(-550, -650);
          SDFBox1.p.center.set([0, -0.1, 0]);
          SDFBox1.p.sizes.set([5, 0.1, 1]);
          SDFBox1.params.postCreateSpareParams();
          SDFBox1.params.runOnSceneLoadHooks();
          return { node: SDFBox1, children: SDFBox1_nodes };
        }
        function create_SDFBox2(rayMarchingBuilder12) {
          var SDFBox2 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox2.setName("SDFBox2");
          const SDFBox2_nodes = {};
          SDFBox2.uiData.setPosition(-550, -900);
          SDFBox2.p.sizes.set([0.1, 3, 2]);
          SDFBox2.params.postCreateSpareParams();
          SDFBox2.params.runOnSceneLoadHooks();
          return { node: SDFBox2, children: SDFBox2_nodes };
        }
        function create_SDFContext1(rayMarchingBuilder12) {
          var SDFContext1 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext1.setName("SDFContext1");
          const SDFContext1_nodes = {};
          SDFContext1.uiData.setPosition(100, 0);
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext1.params.postCreateSpareParams();
          SDFContext1.params.runOnSceneLoadHooks();
          return { node: SDFContext1, children: SDFContext1_nodes };
        }
        function create_SDFMaterial1(rayMarchingBuilder12) {
          var SDFMaterial1 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial1.setName("SDFMaterial1");
          const SDFMaterial1_nodes = {};
          SDFMaterial1.uiData.setPosition(-100, 200);
          SDFMaterial1.p.useEnvMap.set(true);
          SDFMaterial1.p.useRefraction.set(true);
          SDFMaterial1.p.diffuse.set([0, 0, 0]);
          SDFMaterial1.p.envMapIntensity.set(0.14);
          SDFMaterial1.p.envMapRoughness.set(1);
          SDFMaterial1.p.refractionTint.set([0.7764705882352941, 0.5490196078431373, 0.06274509803921569]);
          SDFMaterial1.p.iorOffset.set([-0.1, 0, 0.1]);
          SDFMaterial1.p.transmission.set(2);
          SDFMaterial1.p.absorption.set(4.7);
          SDFMaterial1.params.postCreateSpareParams();
          SDFMaterial1.params.runOnSceneLoadHooks();
          return { node: SDFMaterial1, children: SDFMaterial1_nodes };
        }
        function create_SDFMin1(rayMarchingBuilder12) {
          var SDFMin1 = rayMarchingBuilder12.createNode("SDFMin");
          SDFMin1.setName("SDFMin1");
          const SDFMin1_nodes = {};
          SDFMin1.uiData.setComment(
            "This node and the ones on its left control 2 boxes that are animated and used to subtract from the rhino SDF. Try and press play to see the effect this creates"
          );
          SDFMin1.uiData.setPosition(-400, -800);
          SDFMin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFMin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFMin1.params.postCreateSpareParams();
          SDFMin1.params.runOnSceneLoadHooks();
          return { node: SDFMin1, children: SDFMin1_nodes };
        }
        function create_SDFSubtract1(rayMarchingBuilder12) {
          var SDFSubtract1 = rayMarchingBuilder12.createNode("SDFSubtract");
          SDFSubtract1.setName("SDFSubtract1");
          const SDFSubtract1_nodes = {};
          SDFSubtract1.uiData.setPosition(-100, -500);
          SDFSubtract1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFSubtract1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFSubtract1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFSubtract1.params.get("smoothFactor").set(0.03);
          SDFSubtract1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFSubtract1.params.postCreateSpareParams();
          SDFSubtract1.params.runOnSceneLoadHooks();
          return { node: SDFSubtract1, children: SDFSubtract1_nodes };
        }
        function create_constant1(rayMarchingBuilder12) {
          var constant1 = rayMarchingBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-300, 200);
          constant1.p.type.set(4);
          constant1.p.color.set([1, 1, 1]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_fit1(rayMarchingBuilder12) {
          var fit1 = rayMarchingBuilder12.createNode("fit");
          fit1.setName("fit1");
          const fit1_nodes = {};
          fit1.uiData.setPosition(-750, -650);
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit1.params.get("srcMin").set(-1);
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit1.params.get("destMin").set(0.1);
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit1.params.get("destMax").set(1.1);
          fit1.params.postCreateSpareParams();
          fit1.params.runOnSceneLoadHooks();
          return { node: fit1, children: fit1_nodes };
        }
        function create_fit2(rayMarchingBuilder12) {
          var fit2 = rayMarchingBuilder12.createNode("fit");
          fit2.setName("fit2");
          const fit2_nodes = {};
          fit2.uiData.setPosition(-750, -900);
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit2.params.get("srcMin").set(-1);
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit2.params.get("destMin").set(-0.6);
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit2.params.get("destMax").set(0.7000000000000001);
          fit2.params.postCreateSpareParams();
          fit2.params.runOnSceneLoadHooks();
          return { node: fit2, children: fit2_nodes };
        }
        function create_floatToVec3_1(rayMarchingBuilder12) {
          var floatToVec3_1 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(-650, -650);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_floatToVec3_2(rayMarchingBuilder12) {
          var floatToVec3_2 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(-650, -900);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_globals1(rayMarchingBuilder12) {
          var globals1 = rayMarchingBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1050, -650);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_globals2(rayMarchingBuilder12) {
          var globals2 = rayMarchingBuilder12.createNode("globals");
          globals2.setName("globals2");
          const globals2_nodes = {};
          globals2.uiData.setPosition(-1050, -900);
          globals2.params.postCreateSpareParams();
          globals2.params.runOnSceneLoadHooks();
          return { node: globals2, children: globals2_nodes };
        }
        function create_multAdd1(rayMarchingBuilder12) {
          var multAdd1 = rayMarchingBuilder12.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-950, -650);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.get("postAdd").set(1.16);
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_multAdd2(rayMarchingBuilder12) {
          var multAdd2 = rayMarchingBuilder12.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(-950, -900);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd2.params.get("preAdd").set(8.9);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd2.params.get("mult").set(0.84);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(300, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_sin1(rayMarchingBuilder12) {
          var sin1 = rayMarchingBuilder12.createNode("sin");
          sin1.setName("sin1");
          const sin1_nodes = {};
          sin1.uiData.setPosition(-850, -650);
          sin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin1.params.postCreateSpareParams();
          sin1.params.runOnSceneLoadHooks();
          return { node: sin1, children: sin1_nodes };
        }
        function create_sin2(rayMarchingBuilder12) {
          var sin2 = rayMarchingBuilder12.createNode("sin");
          sin2.setName("sin2");
          const sin2_nodes = {};
          sin2.uiData.setPosition(-850, -900);
          sin2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin2.params.postCreateSpareParams();
          sin2.params.runOnSceneLoadHooks();
          return { node: sin2, children: sin2_nodes };
        }
        function create_textureSDF1(rayMarchingBuilder12) {
          var textureSDF1 = rayMarchingBuilder12.createNode("textureSDF");
          textureSDF1.setName("textureSDF1");
          const textureSDF1_nodes = {};
          textureSDF1.uiData.setComment(
            "This node is the one that imports the 3D texture that creates the SDF representing the model.\nIt creates a spare parameter on the raymarching node (the parent of this node), which is used to select the texture node to import."
          );
          textureSDF1.uiData.setPosition(-300, -250);
          textureSDF1.p.paramName.set("textureSDF1");
          textureSDF1.params.postCreateSpareParams();
          textureSDF1.params.runOnSceneLoadHooks();
          return { node: textureSDF1, children: textureSDF1_nodes };
        }
        function create_textureSDF1BoundMax(rayMarchingBuilder12) {
          var textureSDF1BoundMax = rayMarchingBuilder12.createNode("param");
          textureSDF1BoundMax.setName("textureSDF1BoundMax");
          const textureSDF1BoundMax_nodes = {};
          textureSDF1BoundMax.uiData.setPosition(-600, -50);
          textureSDF1BoundMax.p.name.set("textureSDF1BoundMax");
          textureSDF1BoundMax.p.type.set(4);
          textureSDF1BoundMax.params.postCreateSpareParams();
          textureSDF1BoundMax.params.runOnSceneLoadHooks();
          return { node: textureSDF1BoundMax, children: textureSDF1BoundMax_nodes };
        }
        function create_textureSDF1BoundMin(rayMarchingBuilder12) {
          var textureSDF1BoundMin = rayMarchingBuilder12.createNode("param");
          textureSDF1BoundMin.setName("textureSDF1BoundMin");
          const textureSDF1BoundMin_nodes = {};
          textureSDF1BoundMin.uiData.setPosition(-600, -250);
          textureSDF1BoundMin.p.name.set("textureSDF1BoundMin");
          textureSDF1BoundMin.p.type.set(4);
          textureSDF1BoundMin.params.postCreateSpareParams();
          textureSDF1BoundMin.params.runOnSceneLoadHooks();
          return { node: textureSDF1BoundMin, children: textureSDF1BoundMin_nodes };
        }
        rayMarchingBuilder1_nodes["SDFBox1"] = create_SDFBox1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox2"] = create_SDFBox2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"] = create_SDFContext1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial1"] = create_SDFMaterial1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMin1"] = create_SDFMin1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFSubtract1"] = create_SDFSubtract1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant1"] = create_constant1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit1"] = create_fit1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit2"] = create_fit2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_1"] = create_floatToVec3_1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_2"] = create_floatToVec3_2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals1"] = create_globals1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals2"] = create_globals2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd1"] = create_multAdd1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd2"] = create_multAdd2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin1"] = create_sin1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin2"] = create_sin2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["textureSDF1"] = create_textureSDF1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["textureSDF1BoundMax"] = create_textureSDF1BoundMax(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["textureSDF1BoundMin"] = create_textureSDF1BoundMin(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox1"].node.setInput(
          "center",
          rayMarchingBuilder1_nodes["floatToVec3_1"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFBox2"].node.setInput(
          "center",
          rayMarchingBuilder1_nodes["floatToVec3_2"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFSubtract1"].node,
          "subtract"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial1"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["constant1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFMin1"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFBox2"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFMin1"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFBox1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFSubtract1"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFMin1"].node,
          "min"
        );
        rayMarchingBuilder1_nodes["SDFSubtract1"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["textureSDF1"].node,
          "d"
        );
        rayMarchingBuilder1_nodes["fit1"].node.setInput("val", rayMarchingBuilder1_nodes["sin1"].node, "val");
        rayMarchingBuilder1_nodes["fit2"].node.setInput("val", rayMarchingBuilder1_nodes["sin2"].node, "val");
        rayMarchingBuilder1_nodes["floatToVec3_1"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["fit1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_2"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["fit2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["multAdd1"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd2"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals2"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFContext1"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["sin1"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin2"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["textureSDF1"].node.setInput(
          "boundMin",
          rayMarchingBuilder1_nodes["textureSDF1BoundMin"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["textureSDF1"].node.setInput(
          "boundMax",
          rayMarchingBuilder1_nodes["textureSDF1BoundMax"].node,
          "val"
        );
        rayMarchingBuilder1.uiData.setComment(
          `This is the raymarching material node. There are parameters on itself that controls it, as well as nodes inside.

If you want to change the texture used as SDF, go to its "advanced" tab, scroll down, and edit the "textureSDF1" parameter.
 Note that if you change this parameter to point to another node, you need to make sure that the textureSDF1BoundMin and textureSDF1BoundMax are updated accordingly. Instead of editing their expressions manually, you can right click on this node and click on "mat/rayMarchingBuilder"->"${contextMenuLabel}"`
        );
        rayMarchingBuilder1.uiData.setPosition(0, 250);
        rayMarchingBuilder1.p.maxSteps.set(91);
        rayMarchingBuilder1.p.maxDist.set(4.96);
        rayMarchingBuilder1.p.useEnvMap.set(true);
        rayMarchingBuilder1.p.envMap.set("../../../COP/envMap");
        rayMarchingBuilder1.p.envMapRoughness.set(0);
        rayMarchingBuilder1.p.front.set(false);
        rayMarchingBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "textureSDF1", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_3__/* .NodeContext.COP */ .sy.COP }
        });
        rayMarchingBuilder1.params.get("textureSDF1").set("../../COP/SDFFromUrl1");
        rayMarchingBuilder1.params.get("textureSDF1").options.setOption("nodeSelection", { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_3__/* .NodeContext.COP */ .sy.COP });
        rayMarchingBuilder1.params.get("textureSDF1").options.setOption("editable", void 0);
        rayMarchingBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.VECTOR3 */ ._.VECTOR3, "textureSDF1BoundMin", [0, 0, 0], {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true
        });
        rayMarchingBuilder1.params.get("textureSDF1BoundMin").set([
          "ch('../../COP/SDFFromUrl1/boundMinx')",
          "ch('../../COP/SDFFromUrl1/boundMiny')",
          "ch('../../COP/SDFFromUrl1/boundMinz')"
        ]);
        rayMarchingBuilder1.params.get("textureSDF1BoundMin").options.setOption("editable", void 0);
        rayMarchingBuilder1.params.get("textureSDF1BoundMinx").options.setOption("editable", void 0);
        rayMarchingBuilder1.params.get("textureSDF1BoundMiny").options.setOption("editable", void 0);
        rayMarchingBuilder1.params.get("textureSDF1BoundMinz").options.setOption("editable", void 0);
        rayMarchingBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_2__/* .ParamType.VECTOR3 */ ._.VECTOR3, "textureSDF1BoundMax", [0, 0, 0], {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true
        });
        rayMarchingBuilder1.params.get("textureSDF1BoundMax").set([
          "ch('../../COP/SDFFromUrl1/boundMaxx')",
          "ch('../../COP/SDFFromUrl1/boundMaxy')",
          "ch('../../COP/SDFFromUrl1/boundMaxz')"
        ]);
        rayMarchingBuilder1.params.get("textureSDF1BoundMax").options.setOption("editable", void 0);
        rayMarchingBuilder1.params.get("textureSDF1BoundMaxx").options.setOption("editable", void 0);
        rayMarchingBuilder1.params.get("textureSDF1BoundMaxy").options.setOption("editable", void 0);
        rayMarchingBuilder1.params.get("textureSDF1BoundMaxz").options.setOption("editable", void 0);
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["meshStandard1"] = create_meshStandard1(MAT);
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      MAT.uiData.setComment(
        "This node contains the RayMarching material node. Dive into it to see how it is set up"
      );
      MAT.uiData.setPosition(-350, 200);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_box1(raymarchedObject2) {
      var box1 = raymarchedObject2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(-50, 50);
      box1.p.sizes.set([2, 1, 2]);
      box1.p.center.set([0, 0.5, 0]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_boxLines1(raymarchedObject2) {
      var boxLines1 = raymarchedObject2.createNode("boxLines");
      boxLines1.setName("boxLines1");
      const boxLines1_nodes = {};
      boxLines1.uiData.setComment(
        "using a boxLine node is useful when doing the lookdev of a raymarching material, as it allows to display the bounds of the box we are using. Alternatively , If you were to render on a sphere or other object, you could apply a wireframe material to it."
      );
      boxLines1.uiData.setPosition(150, 350);
      boxLines1.params.postCreateSpareParams();
      boxLines1.params.runOnSceneLoadHooks();
      return { node: boxLines1, children: boxLines1_nodes };
    }
    function create_fileGLTF1(raymarchedObject2) {
      var fileGLTF1 = raymarchedObject2.createNode("fileGLTF");
      fileGLTF1.setName("fileGLTF1");
      const fileGLTF1_nodes = {};
      fileGLTF1.uiData.setPosition(-50, -400);
      fileGLTF1.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/resources/threedscans.com/rhino.glb"
      );
      fileGLTF1.params.postCreateSpareParams();
      fileGLTF1.params.runOnSceneLoadHooks();
      return { node: fileGLTF1, children: fileGLTF1_nodes };
    }
    function create_material1(raymarchedObject2) {
      var material1 = raymarchedObject2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setComment("This applies the raymarching builder to the material");
      material1.uiData.setPosition(-50, 200);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_material2(raymarchedObject2) {
      var material2 = raymarchedObject2.createNode("material");
      material2.setName("material2");
      const material2_nodes = {};
      material2.uiData.setComment(
        "This imports the rhino geometry, which was used to create the 3D texture representing its SDF (signed distance function, which is what allows to create its shape in the raymarching material) "
      );
      material2.uiData.setPosition(-50, -250);
      material2.p.material.set("../MAT/meshStandard1");
      material2.params.postCreateSpareParams();
      material2.params.runOnSceneLoadHooks();
      return { node: material2, children: material2_nodes };
    }
    function create_merge1(raymarchedObject2) {
      var merge1 = raymarchedObject2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-50, 650);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    raymarchedObject_nodes["COP"] = create_COP2(raymarchedObject);
    raymarchedObject_nodes["MAT"] = create_MAT(raymarchedObject);
    raymarchedObject_nodes["box1"] = create_box1(raymarchedObject);
    raymarchedObject_nodes["boxLines1"] = create_boxLines1(raymarchedObject);
    raymarchedObject_nodes["fileGLTF1"] = create_fileGLTF1(raymarchedObject);
    raymarchedObject_nodes["material1"] = create_material1(raymarchedObject);
    raymarchedObject_nodes["material2"] = create_material2(raymarchedObject);
    raymarchedObject_nodes["merge1"] = create_merge1(raymarchedObject);
    raymarchedObject_nodes["boxLines1"].node.setInput(0, raymarchedObject_nodes["material1"].node);
    raymarchedObject_nodes["material1"].node.setInput(0, raymarchedObject_nodes["box1"].node);
    raymarchedObject_nodes["material2"].node.setInput(0, raymarchedObject_nodes["fileGLTF1"].node);
    raymarchedObject_nodes["merge1"].node.setInput(0, raymarchedObject_nodes["material1"].node);
    raymarchedObject_nodes["merge1"].node.setInput(1, raymarchedObject_nodes["boxLines1"].node);
    raymarchedObject.uiData.setComment(
      "This contains the raymarched object, which is the core of this scene.\nEnter this node to see how it is set up."
    );
    raymarchedObject.uiData.setPosition(-50, -300);
    raymarchedObject.flags.display.set(true);
    raymarchedObject.params.postCreateSpareParams();
    raymarchedObject.params.runOnSceneLoadHooks();
    return { node: raymarchedObject, children: raymarchedObject_nodes };
  }
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["raymarchedObject"] = create_raymarchedObject(root);
  scene.setFrame(0);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_MAIN",
    focusedNodes: [],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_SDFFromObject_ts.48072a0ff81e1f7e3870.js.map