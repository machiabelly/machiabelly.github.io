{"version":3,"file":"src_docs_pages_mdx_assets_export_mdx.b148e3deb023f8969a47.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBAAG;IAAA,IAA4B;EAAA;IAAA,gBAE5B;EAAA;IAAA,gBAEH;MAAA;IAAA;MAAA,gBAAkD;IAAA,IAAiD;EAAA;IAAA,gBAEnG;MAAA;IAAA;MAAA,gBAAoC;IAAA,IAA6B;MAAA,gBAAqE;IAAA,IAAU;MAAA,gBAAmB;IAAA,IAAU;EAAA;IAAA,gBAE7K;EAAA;IAAA;IAAA;EAAA;IAAA,gBAIA;EAAA;IAAA;MAAA,gBAEI;IAAA;MAAA,gBACA;IAAA;MAAA,gBACA;IAAA;MAAA,gBACA;IAAA;MAAA,gBACA;IAAA;EAAA;IAAA,gBAEJ;EAAA;IAAA,gBAEG;EAAA;IAAA,gBAEH;MAAA;MAAA;MAAA;IAAA;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA,aAAa,sCAAsC;AACnD,aAAa,gCAAgC;AAC7C,aAAa,uCAAuC;AACpD;;AAEA;AACA;AACA;AACA,cAAc,kCAAkC;AAChD;AACA;;AAE0D;;AAE1D;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA,IAAI,sDAAO;AACX,GAAG;AACH;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,0DAAW;AACtB,MAAM,mDAAQ;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACO;AACP,SAAS,qDAAM,qBAAqB;AACpC","sources":["webpack:///../src/docs/pages/mdx/assets/export.mdx","webpack:///../node_modules/@mdx-js/vue/lib/index.js"],"sourcesContent":[null,"/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('vue').Component<Props>} Provider\n * @typedef {import('vue').ComponentPublicInstance} ComponentPublicInstance\n */\n\n/**\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {MDXComponents | null | undefined} [components]\n *   Additional components to use (optional).\n */\n\nimport {Fragment, createVNode, inject, provide} from 'vue'\n\n/**\n * Provider for MDX context.\n *\n * @type {Provider}\n *   Provider.\n */\nexport const MDXProvider = {\n  name: 'MDXProvider',\n  props: {\n    components: {\n      default() {\n        return {}\n      },\n      type: Object\n    }\n  },\n  setup(props) {\n    provide('$mdxComponents', props.components)\n  },\n  /**\n   * @this {ComponentPublicInstance}\n   *   Context.\n   * @returns\n   *   Element.\n   */\n  render() {\n    return createVNode(\n      Fragment,\n      undefined,\n      this.$slots.default ? this.$slots.default() : []\n    )\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents() {\n  return inject('$mdxComponents', {})\n}\n"],"names":[],"sourceRoot":""}