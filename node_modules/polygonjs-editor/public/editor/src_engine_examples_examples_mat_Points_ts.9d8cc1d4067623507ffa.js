(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_Points_ts"],{

/***/ 143:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo12 = parentNode.createNode("geo");
    geo12.setName("geo1");
    function create_MAT(geo13) {
      var MAT = geo13.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_points1(MAT2) {
        var points1 = MAT2.createNode("points");
        points1.setName("points1");
        points1.uiData.setPosition(-200, -100);
        points1.p.color.set([0.10196078431372549, 0.6352941176470588, 0.06274509803921569]);
        points1.params.postCreateSpareParams();
        points1.params.runOnSceneLoadHooks();
        return points1;
      }
      function create_points2(MAT2) {
        var points2 = MAT2.createNode("points");
        points2.setName("points2");
        points2.uiData.setPosition(-200, 50);
        points2.p.size.set(0.1);
        points2.params.postCreateSpareParams();
        points2.params.runOnSceneLoadHooks();
        return points2;
      }
      function create_points3(MAT2) {
        var points3 = MAT2.createNode("points");
        points3.setName("points3");
        points3.uiData.setPosition(-200, 200);
        points3.p.size.set(0.1);
        points3.p.color.set([0.5686274509803921, 0.10588235294117647, 0.7333333333333333]);
        points3.p.useVertexColors.set(true);
        points3.params.postCreateSpareParams();
        points3.params.runOnSceneLoadHooks();
        return points3;
      }
      create_points1(MAT);
      create_points2(MAT);
      create_points3(MAT);
      MAT.uiData.setPosition(-700, 700);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_add1(geo13) {
      var add12 = geo13.createNode("add");
      add12.setName("add1");
      add12.uiData.setPosition(-500, 200);
      add12.params.postCreateSpareParams();
      add12.params.runOnSceneLoadHooks();
      return add12;
    }
    function create_color1(geo13) {
      var color12 = geo13.createNode("color");
      color12.setName("color1");
      color12.uiData.setComment(
        "with the color node, we copy the value of the position into the color.\nThen, in the material, we set useVertexColors to true, and the color attribute is then displayed."
      );
      color12.uiData.setPosition(200, 300);
      color12.p.fromAttribute.set(true);
      color12.p.attribName.set("position");
      color12.params.postCreateSpareParams();
      color12.params.runOnSceneLoadHooks();
      return color12;
    }
    function create_fileGLTF1(geo13) {
      var fileGLTF12 = geo13.createNode("fileGLTF");
      fileGLTF12.setName("fileGLTF1");
      fileGLTF12.uiData.setPosition(200, -50);
      fileGLTF12.params.postCreateSpareParams();
      fileGLTF12.params.runOnSceneLoadHooks();
      return fileGLTF12;
    }
    function create_hierarchy1(geo13) {
      var hierarchy12 = geo13.createNode("hierarchy");
      hierarchy12.setName("hierarchy1");
      hierarchy12.uiData.setPosition(200, 50);
      hierarchy12.p.mode.set(1);
      hierarchy12.params.postCreateSpareParams();
      hierarchy12.params.runOnSceneLoadHooks();
      return hierarchy12;
    }
    function create_icosahedron1(geo13) {
      var icosahedron12 = geo13.createNode("icosahedron");
      icosahedron12.setName("icosahedron1");
      icosahedron12.uiData.setPosition(-150, -50);
      icosahedron12.p.detail.set(3);
      icosahedron12.p.pointsOnly.set(true);
      icosahedron12.params.postCreateSpareParams();
      icosahedron12.params.runOnSceneLoadHooks();
      return icosahedron12;
    }
    function create_material1(geo13) {
      var material12 = geo13.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(-500, 500);
      material12.p.material.set("../MAT/points1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_material2(geo13) {
      var material22 = geo13.createNode("material");
      material22.setName("material2");
      material22.uiData.setPosition(-150, 450);
      material22.p.material.set("../MAT/points2");
      material22.params.postCreateSpareParams();
      material22.params.runOnSceneLoadHooks();
      return material22;
    }
    function create_material3(geo13) {
      var material32 = geo13.createNode("material");
      material32.setName("material3");
      material32.uiData.setPosition(200, 650);
      material32.p.material.set("../MAT/points3");
      material32.params.postCreateSpareParams();
      material32.params.runOnSceneLoadHooks();
      return material32;
    }
    function create_merge1(geo13) {
      var merge12 = geo13.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(-150, 800);
      merge12.flags.display.set(true);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_scatter1(geo13) {
      var scatter12 = geo13.createNode("scatter");
      scatter12.setName("scatter1");
      scatter12.uiData.setPosition(200, 200);
      scatter12.p.pointsCount.set(1e3);
      scatter12.params.postCreateSpareParams();
      scatter12.params.runOnSceneLoadHooks();
      return scatter12;
    }
    function create_transform1(geo13) {
      var transform12 = geo13.createNode("transform");
      transform12.setName("transform1");
      transform12.uiData.setPosition(-150, 200);
      transform12.p.t.set([0, 0.8851248236299654, 0.8895212294680235]);
      transform12.params.postCreateSpareParams();
      transform12.params.runOnSceneLoadHooks();
      return transform12;
    }
    function create_transform2(geo13) {
      var transform22 = geo13.createNode("transform");
      transform22.setName("transform2");
      transform22.uiData.setPosition(-500, 350);
      transform22.p.t.set([-0.2290163671973744, 0.5260001126615601, 2.6568871476468]);
      transform22.params.postCreateSpareParams();
      transform22.params.runOnSceneLoadHooks();
      return transform22;
    }
    function create_transform3(geo13) {
      var transform32 = geo13.createNode("transform");
      transform32.setName("transform3");
      transform32.uiData.setPosition(200, 550);
      transform32.p.t.set([0, 0, -1.0307274029156148]);
      transform32.params.postCreateSpareParams();
      transform32.params.runOnSceneLoadHooks();
      return transform32;
    }
    create_MAT(geo12);
    var add1 = create_add1(geo12);
    var color1 = create_color1(geo12);
    var fileGLTF1 = create_fileGLTF1(geo12);
    var hierarchy1 = create_hierarchy1(geo12);
    var icosahedron1 = create_icosahedron1(geo12);
    var material1 = create_material1(geo12);
    var material2 = create_material2(geo12);
    var material3 = create_material3(geo12);
    var merge1 = create_merge1(geo12);
    var scatter1 = create_scatter1(geo12);
    var transform1 = create_transform1(geo12);
    var transform2 = create_transform2(geo12);
    var transform3 = create_transform3(geo12);
    color1.setInput(0, scatter1);
    hierarchy1.setInput(0, fileGLTF1);
    material1.setInput(0, transform2);
    material2.setInput(0, transform1);
    material3.setInput(0, transform3);
    merge1.setInput(0, material1);
    merge1.setInput(1, material2);
    merge1.setInput(2, material3);
    scatter1.setInput(0, hierarchy1);
    transform1.setInput(0, icosahedron1);
    transform2.setInput(0, add1);
    transform3.setInput(0, color1);
    geo12.uiData.setPosition(-50, -150);
    geo12.flags.display.set(true);
    geo12.params.postCreateSpareParams();
    geo12.params.runOnSceneLoadHooks();
    return geo12;
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_MAT(grid2) {
      var MAT = grid2.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        meshStandard1.uiData.setPosition(0, 0);
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return meshStandard1;
      }
      create_meshStandard1(MAT);
      MAT.uiData.setPosition(-200, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_box1(grid2) {
      var box12 = grid2.createNode("box");
      box12.setName("box1");
      box12.uiData.setPosition(0, 150);
      box12.p.sizes.set([14.100000000000001, 1, 15.000000000000002]);
      box12.p.center.set([0, -0.5, 0]);
      box12.params.postCreateSpareParams();
      box12.params.runOnSceneLoadHooks();
      return box12;
    }
    function create_material1(grid2) {
      var material12 = grid2.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(0, 300);
      material12.flags.display.set(true);
      material12.p.material.set("../MAT/meshStandard1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    create_MAT(grid);
    var box1 = create_box1(grid);
    var material1 = create_material1(grid);
    material1.setInput(0, box1);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.4450607455842677, 0.12056184442484857, 0.39944034088649893]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([2.72, 1.897431802728435, -2.001289293650634]);
    perspectiveCamera12.p.r.set([-143.49346974556994, 46.653080010520405, 151.70926169569614]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_spotLight1(parentNode) {
    var spotLight12 = parentNode.createNode("spotLight");
    spotLight12.setName("spotLight1");
    spotLight12.uiData.setPosition(200, 200);
    spotLight12.flags.display.set(true);
    spotLight12.p.penumbra.set(0.46);
    spotLight12.p.castShadow.set(true);
    spotLight12.p.shadowRes.set([2048, 2048]);
    spotLight12.params.postCreateSpareParams();
    spotLight12.params.runOnSceneLoadHooks();
    return spotLight12;
  }
  function create_polarTransform1(parentNode) {
    var polarTransform12 = parentNode.createNode("polarTransform");
    polarTransform12.setName("polarTransform1");
    polarTransform12.uiData.setPosition(200, 100);
    polarTransform12.flags.display.set(false);
    polarTransform12.p.longitude.set(7.2);
    polarTransform12.p.latitude.set(36);
    polarTransform12.p.depth.set(10);
    polarTransform12.params.postCreateSpareParams();
    polarTransform12.params.runOnSceneLoadHooks();
    return polarTransform12;
  }
  var geo1 = create_geo1(root);
  create_grid(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  var spotLight1 = create_spotLight1(root);
  var polarTransform1 = create_polarTransform1(root);
  spotLight1.setInput(0, polarTransform1);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [geo1.nodesByType("material")[0]],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_Points_ts.9d8cc1d4067623507ffa.js.map