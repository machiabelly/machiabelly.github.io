(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Data_advancedWithCopy_ts"],{

/***/ 29568:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_pointsBuilder1(MAT2) {
        var pointsBuilder1 = MAT2.createNode("pointsBuilder");
        pointsBuilder1.setName("pointsBuilder1");
        const pointsBuilder1_nodes = {};
        function create_constant1(pointsBuilder12) {
          var constant1 = pointsBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(50, 200);
          constant1.p.float.set(0.11);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_disk1(pointsBuilder12) {
          var disk1 = pointsBuilder12.createNode("disk");
          disk1.setName("disk1");
          const disk1_nodes = {};
          disk1.uiData.setPosition(-50, 100);
          disk1.p.center.set([0.5, 0.5]);
          disk1.p.radius.set(0.31);
          disk1.p.feather.set(0.03);
          disk1.params.postCreateSpareParams();
          disk1.params.runOnSceneLoadHooks();
          return { node: disk1, children: disk1_nodes };
        }
        function create_globals1(pointsBuilder12) {
          var globals1 = pointsBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-200, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_output1(pointsBuilder12) {
          var output1 = pointsBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        pointsBuilder1_nodes["constant1"] = create_constant1(pointsBuilder1);
        pointsBuilder1_nodes["disk1"] = create_disk1(pointsBuilder1);
        pointsBuilder1_nodes["globals1"] = create_globals1(pointsBuilder1);
        pointsBuilder1_nodes["output1"] = create_output1(pointsBuilder1);
        pointsBuilder1_nodes["disk1"].node.setInput(
          "position",
          pointsBuilder1_nodes["globals1"].node,
          "gl_PointCoord"
        );
        pointsBuilder1_nodes["output1"].node.setInput("alpha", pointsBuilder1_nodes["disk1"].node, "float");
        pointsBuilder1_nodes["output1"].node.setInput(
          "gl_PointSize",
          pointsBuilder1_nodes["constant1"].node,
          "val"
        );
        pointsBuilder1.uiData.setPosition(0, -100);
        pointsBuilder1.p.alphaTest.set(0.02);
        pointsBuilder1.params.postCreateSpareParams();
        pointsBuilder1.params.runOnSceneLoadHooks();
        return { node: pointsBuilder1, children: pointsBuilder1_nodes };
      }
      MAT_nodes["pointsBuilder1"] = create_pointsBuilder1(MAT);
      MAT.uiData.setPosition(500, 950);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_REF_data_pts(geo12) {
      var REF_data_pts = geo12.createNode("null");
      REF_data_pts.setName("REF_data_pts");
      const REF_data_pts_nodes = {};
      REF_data_pts.uiData.setComment(
        "this node is referred by the nodes creating the points that will be displayed"
      );
      REF_data_pts.uiData.setPosition(0, 300);
      REF_data_pts.params.postCreateSpareParams();
      REF_data_pts.params.runOnSceneLoadHooks();
      return { node: REF_data_pts, children: REF_data_pts_nodes };
    }
    function create_add1(geo12) {
      var add1 = geo12.createNode("add");
      add1.setName("add1");
      const add1_nodes = {};
      add1.uiData.setComment(
        "This creates a single point at the origin. But since the point node under it will be cooked multiple times, it will end up creating multiple points."
      );
      add1.uiData.setPosition(800, -600);
      add1.params.postCreateSpareParams();
      add1.params.runOnSceneLoadHooks();
      return { node: add1, children: add1_nodes };
    }
    function create_copy1(geo12) {
      var copy1 = geo12.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setComment(
        "the number of copies is set to the number of points in the REF_data_pts node. So any change on that node will trigger a recook of the copy node."
      );
      copy1.uiData.setPosition(800, 200);
      copy1.p.count.set("pointsCount('../REF_data_pts')");
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_data1(geo12) {
      var data1 = geo12.createNode("data");
      data1.setName("data1");
      const data1_nodes = {};
      data1.uiData.setComment("This node creates 2 points");
      data1.uiData.setPosition(-100, -300);
      data1.p.data.set('[{"P":[0,0,2],"RotateY":20},{"P":[0,0,1],"RotateY":-40}]');
      data1.params.postCreateSpareParams();
      data1.params.runOnSceneLoadHooks();
      return { node: data1, children: data1_nodes };
    }
    function create_data2(geo12) {
      var data2 = geo12.createNode("data");
      data2.setName("data2");
      const data2_nodes = {};
      data2.uiData.setComment("This node creates 5 points");
      data2.uiData.setPosition(200, -300);
      data2.p.data.set(
        '[{"P":[0,0,2],"RotateY":70},{"P":[0,0,1],"RotateY":-48},{"P":[0,0,6],"RotateY":120},{"P":[0,0,3],"RotateY":-38},{"P":[0,0,2.5],"RotateY":155}]'
      );
      data2.params.postCreateSpareParams();
      data2.params.runOnSceneLoadHooks();
      return { node: data2, children: data2_nodes };
    }
    function create_material1(geo12) {
      var material1 = geo12.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setComment("This simply applies a material to the points");
      material1.uiData.setPosition(800, 950);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/pointsBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_merge1(geo12) {
      var merge1 = geo12.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setComment(
        "The copy node above outputs N different objects. Here we are just merging the multiple objects into a single one, as it is more efficient to render."
      );
      merge1.uiData.setPosition(800, 600);
      merge1.p.compact.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_point1(geo12) {
      var point1 = geo12.createNode("point");
      point1.setName("point1");
      const point1_nodes = {};
      point1.uiData.setComment(
        "This fetches the P (position) attribute from ../REF_data_pts and sets the position of the current input point.\n\nNote that the last argument of the point expression is using the copy('../copy1') expression, which will go from 0 to N (n being the number of copies created by the copy node)."
      );
      point1.uiData.setPosition(800, -300);
      point1.p.updateX.set(true);
      point1.p.x.set("point('../REF_data_pts','P', copy('../copy1')).x");
      point1.p.updateY.set(true);
      point1.p.y.set("point('../REF_data_pts','P', copy('../copy1')).y");
      point1.p.updateZ.set(true);
      point1.p.z.set("point('../REF_data_pts','P', copy('../copy1')).z");
      point1.params.postCreateSpareParams();
      point1.params.runOnSceneLoadHooks();
      return { node: point1, children: point1_nodes };
    }
    function create_polarTransform1(geo12) {
      var polarTransform1 = geo12.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setComment(
        "Just like the point node above, the expression used in the longitude uses the copy('../copy1') argument to fetch the current point index"
      );
      polarTransform1.uiData.setPosition(800, 0);
      polarTransform1.p.longitude.set("point('../REF_data_pts','RotateY', copy('../copy1'))");
      polarTransform1.p.depth.set(0.5);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_switch1(geo12) {
      var switch1 = geo12.createNode("switch");
      switch1.setName("switch1");
      const switch1_nodes = {};
      switch1.uiData.setComment("the switch allows us to quickly switch between the inputs");
      switch1.uiData.setPosition(0, 50);
      switch1.p.input.set(1);
      switch1.params.postCreateSpareParams();
      switch1.params.runOnSceneLoadHooks();
      return { node: switch1, children: switch1_nodes };
    }
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["REF_data_pts"] = create_REF_data_pts(geo1);
    geo1_nodes["add1"] = create_add1(geo1);
    geo1_nodes["copy1"] = create_copy1(geo1);
    geo1_nodes["data1"] = create_data1(geo1);
    geo1_nodes["data2"] = create_data2(geo1);
    geo1_nodes["material1"] = create_material1(geo1);
    geo1_nodes["merge1"] = create_merge1(geo1);
    geo1_nodes["point1"] = create_point1(geo1);
    geo1_nodes["polarTransform1"] = create_polarTransform1(geo1);
    geo1_nodes["switch1"] = create_switch1(geo1);
    geo1_nodes["REF_data_pts"].node.setInput(0, geo1_nodes["switch1"].node);
    geo1_nodes["copy1"].node.setInput(0, geo1_nodes["polarTransform1"].node);
    geo1_nodes["material1"].node.setInput(0, geo1_nodes["merge1"].node);
    geo1_nodes["merge1"].node.setInput(0, geo1_nodes["copy1"].node);
    geo1_nodes["point1"].node.setInput(0, geo1_nodes["add1"].node);
    geo1_nodes["polarTransform1"].node.setInput(0, geo1_nodes["point1"].node);
    geo1_nodes["switch1"].node.setInput(0, geo1_nodes["data1"].node);
    geo1_nodes["switch1"].node.setInput(1, geo1_nodes["data2"].node);
    geo1.uiData.setPosition(-50, -150);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.11122243611430321, -0.1770220190953307, 0.15634656513334705]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([3.195164087531973, 3.1022769095866956, 1.6852282899355924]);
    perspectiveCamera1.p.r.set([-65.00402538718, 40.44242668303402, 54.294428677834325]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["COP"] = create_COP(root);
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: Object.values(scene_root_nodes["geo1"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Data_advancedWithCopy_ts.3399792426e6842d275b.js.map