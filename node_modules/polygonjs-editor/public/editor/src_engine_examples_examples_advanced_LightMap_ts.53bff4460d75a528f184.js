(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_advanced_LightMap_ts"],{

/***/ 76191:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52070);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_COP(geo12) {
      var COP = geo12.createNode("copNetwork");
      COP.setName("COP");
      const COP_nodes = {};
      function create_lightMap1(COP2) {
        var lightMap1 = COP2.createNode("lightMap");
        lightMap1.setName("lightMap1");
        const lightMap1_nodes = {};
        lightMap1.uiData.setPosition(-200, 50);
        lightMap1.p.lightMapRes.set(2048);
        lightMap1.p.blurAmount.set(0);
        lightMap1.p.objectsMask.set("*/lightMapTarget");
        lightMap1.p.lightsMask.set("*/spotLight* */hemisphereLight1");
        lightMap1.params.postCreateSpareParams();
        lightMap1.params.runOnSceneLoadHooks();
        return { node: lightMap1, children: lightMap1_nodes };
      }
      COP_nodes["lightMap1"] = create_lightMap1(COP);
      if (COP.childrenController) {
        COP.childrenController.selection.set([]);
      }
      COP.uiData.setPosition(-200, 800);
      COP.params.postCreateSpareParams();
      COP.params.runOnSceneLoadHooks();
      return { node: COP, children: COP_nodes };
    }
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshBasicBuilder_UV_LIGHT_MAP(MAT2) {
        var meshBasicBuilder_UV_LIGHT_MAP = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder_UV_LIGHT_MAP.setName("meshBasicBuilder_UV_LIGHT_MAP");
        const meshBasicBuilder_UV_LIGHT_MAP_nodes = {};
        function create_attribute1(meshBasicBuilder_UV_LIGHT_MAP2) {
          var attribute1 = meshBasicBuilder_UV_LIGHT_MAP2.createNode("attribute");
          attribute1.setName("attribute1");
          const attribute1_nodes = {};
          attribute1.uiData.setPosition(-150, 100);
          attribute1.p.name.set("uvLightMap");
          attribute1.p.type.set(1);
          attribute1.params.postCreateSpareParams();
          attribute1.params.runOnSceneLoadHooks();
          return { node: attribute1, children: attribute1_nodes };
        }
        function create_globals1(meshBasicBuilder_UV_LIGHT_MAP2) {
          var globals1 = meshBasicBuilder_UV_LIGHT_MAP2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-350, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_output1(meshBasicBuilder_UV_LIGHT_MAP2) {
          var output1 = meshBasicBuilder_UV_LIGHT_MAP2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(300, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_texture1(meshBasicBuilder_UV_LIGHT_MAP2) {
          var texture1 = meshBasicBuilder_UV_LIGHT_MAP2.createNode("texture");
          texture1.setName("texture1");
          const texture1_nodes = {};
          texture1.uiData.setPosition(-50, 100);
          texture1.params.postCreateSpareParams();
          texture1.params.runOnSceneLoadHooks();
          return { node: texture1, children: texture1_nodes };
        }
        function create_vec4ToVec3_1(meshBasicBuilder_UV_LIGHT_MAP2) {
          var vec4ToVec3_1 = meshBasicBuilder_UV_LIGHT_MAP2.createNode("vec4ToVec3");
          vec4ToVec3_1.setName("vec4ToVec3_1");
          const vec4ToVec3_1_nodes = {};
          vec4ToVec3_1.uiData.setPosition(100, 100);
          vec4ToVec3_1.params.postCreateSpareParams();
          vec4ToVec3_1.params.runOnSceneLoadHooks();
          return { node: vec4ToVec3_1, children: vec4ToVec3_1_nodes };
        }
        meshBasicBuilder_UV_LIGHT_MAP_nodes["attribute1"] = create_attribute1(meshBasicBuilder_UV_LIGHT_MAP);
        meshBasicBuilder_UV_LIGHT_MAP_nodes["globals1"] = create_globals1(meshBasicBuilder_UV_LIGHT_MAP);
        meshBasicBuilder_UV_LIGHT_MAP_nodes["output1"] = create_output1(meshBasicBuilder_UV_LIGHT_MAP);
        meshBasicBuilder_UV_LIGHT_MAP_nodes["texture1"] = create_texture1(meshBasicBuilder_UV_LIGHT_MAP);
        meshBasicBuilder_UV_LIGHT_MAP_nodes["vec4ToVec3_1"] = create_vec4ToVec3_1(meshBasicBuilder_UV_LIGHT_MAP);
        meshBasicBuilder_UV_LIGHT_MAP_nodes["output1"].node.setInput(
          "color",
          meshBasicBuilder_UV_LIGHT_MAP_nodes["vec4ToVec3_1"].node,
          "vec3"
        );
        meshBasicBuilder_UV_LIGHT_MAP_nodes["texture1"].node.setInput(
          "uv",
          meshBasicBuilder_UV_LIGHT_MAP_nodes["attribute1"].node,
          "val"
        );
        meshBasicBuilder_UV_LIGHT_MAP_nodes["vec4ToVec3_1"].node.setInput(
          "vec4",
          meshBasicBuilder_UV_LIGHT_MAP_nodes["texture1"].node,
          "rgba"
        );
        if (meshBasicBuilder_UV_LIGHT_MAP.childrenController) {
          meshBasicBuilder_UV_LIGHT_MAP.childrenController.selection.set([]);
        }
        meshBasicBuilder_UV_LIGHT_MAP.uiData.setPosition(0, 0);
        meshBasicBuilder_UV_LIGHT_MAP.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "texture1", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.COP */ .sy.COP }
        });
        meshBasicBuilder_UV_LIGHT_MAP.params.get("texture1").set("../../COP/lightMap1");
        meshBasicBuilder_UV_LIGHT_MAP.params.get("texture1").options.setOption("editable", void 0);
        meshBasicBuilder_UV_LIGHT_MAP.params.postCreateSpareParams();
        meshBasicBuilder_UV_LIGHT_MAP.params.runOnSceneLoadHooks();
        return { node: meshBasicBuilder_UV_LIGHT_MAP, children: meshBasicBuilder_UV_LIGHT_MAP_nodes };
      }
      function create_meshBasic_UV_LIGHT_MAP_CHECK(MAT2) {
        var meshBasic_UV_LIGHT_MAP_CHECK = MAT2.createNode("meshBasic");
        meshBasic_UV_LIGHT_MAP_CHECK.setName("meshBasic_UV_LIGHT_MAP_CHECK");
        const meshBasic_UV_LIGHT_MAP_CHECK_nodes = {};
        meshBasic_UV_LIGHT_MAP_CHECK.uiData.setPosition(0, -200);
        meshBasic_UV_LIGHT_MAP_CHECK.p.wireframe.set(true);
        meshBasic_UV_LIGHT_MAP_CHECK.params.postCreateSpareParams();
        meshBasic_UV_LIGHT_MAP_CHECK.params.runOnSceneLoadHooks();
        return { node: meshBasic_UV_LIGHT_MAP_CHECK, children: meshBasic_UV_LIGHT_MAP_CHECK_nodes };
      }
      MAT_nodes["meshBasicBuilder_UV_LIGHT_MAP"] = create_meshBasicBuilder_UV_LIGHT_MAP(MAT);
      MAT_nodes["meshBasic_UV_LIGHT_MAP_CHECK"] = create_meshBasic_UV_LIGHT_MAP_CHECK(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([MAT_nodes["meshBasicBuilder_UV_LIGHT_MAP"].node]);
      }
      MAT.uiData.setPosition(-200, 600);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_eventsNetwork1(geo12) {
      var eventsNetwork1 = geo12.createNode("eventsNetwork");
      eventsNetwork1.setName("eventsNetwork1");
      const eventsNetwork1_nodes = {};
      function create_delay1(eventsNetwork12) {
        var delay1 = eventsNetwork12.createNode("delay");
        delay1.setName("delay1");
        const delay1_nodes = {};
        delay1.uiData.setPosition(-250, 200);
        delay1.p.delay.set(50);
        delay1.params.postCreateSpareParams();
        delay1.params.runOnSceneLoadHooks();
        return { node: delay1, children: delay1_nodes };
      }
      function create_nodeCook1(eventsNetwork12) {
        var nodeCook1 = eventsNetwork12.createNode("nodeCook");
        nodeCook1.setName("nodeCook1");
        const nodeCook1_nodes = {};
        nodeCook1.uiData.setPosition(-400, 200);
        nodeCook1.p.mask.set("/geo1/material3");
        nodeCook1.params.postCreateSpareParams();
        nodeCook1.params.runOnSceneLoadHooks();
        return { node: nodeCook1, children: nodeCook1_nodes };
      }
      function create_setParam1(eventsNetwork12) {
        var setParam1 = eventsNetwork12.createNode("setParam");
        setParam1.setName("setParam1");
        const setParam1_nodes = {};
        setParam1.uiData.setPosition(-100, 200);
        setParam1.p.param.set("../../COP/lightMap1/update");
        setParam1.p.type.set(1);
        setParam1.params.postCreateSpareParams();
        setParam1.params.runOnSceneLoadHooks();
        return { node: setParam1, children: setParam1_nodes };
      }
      eventsNetwork1_nodes["delay1"] = create_delay1(eventsNetwork1);
      eventsNetwork1_nodes["nodeCook1"] = create_nodeCook1(eventsNetwork1);
      eventsNetwork1_nodes["setParam1"] = create_setParam1(eventsNetwork1);
      eventsNetwork1_nodes["delay1"].node.setInput("in", eventsNetwork1_nodes["nodeCook1"].node, "first");
      eventsNetwork1_nodes["setParam1"].node.setInput("trigger", eventsNetwork1_nodes["delay1"].node, "out");
      if (eventsNetwork1.childrenController) {
        eventsNetwork1.childrenController.selection.set([]);
      }
      eventsNetwork1.uiData.setPosition(-200, 1e3);
      eventsNetwork1.params.postCreateSpareParams();
      eventsNetwork1.params.runOnSceneLoadHooks();
      return { node: eventsNetwork1, children: eventsNetwork1_nodes };
    }
    function create_material2(geo12) {
      var material2 = geo12.createNode("material");
      material2.setName("material2");
      const material2_nodes = {};
      material2.uiData.setPosition(350, 850);
      material2.p.material.set("../MAT/meshBasic_UV_LIGHT_MAP_CHECK");
      material2.params.postCreateSpareParams();
      material2.params.runOnSceneLoadHooks();
      return { node: material2, children: material2_nodes };
    }
    function create_material3(geo12) {
      var material3 = geo12.createNode("material");
      material3.setName("material3");
      const material3_nodes = {};
      material3.uiData.setPosition(100, 1100);
      material3.flags.display.set(true);
      material3.p.material.set("../MAT/meshBasicBuilder_UV_LIGHT_MAP");
      material3.params.postCreateSpareParams();
      material3.params.runOnSceneLoadHooks();
      return { node: material3, children: material3_nodes };
    }
    function create_merge1(geo12) {
      var merge1 = geo12.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(100, 450);
      merge1.p.compact.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_objectProperties1(geo12) {
      var objectProperties1 = geo12.createNode("objectProperties");
      objectProperties1.setName("objectProperties1");
      const objectProperties1_nodes = {};
      objectProperties1.uiData.setPosition(100, 850);
      objectProperties1.p.tname.set(true);
      objectProperties1.p.name.set("lightMapTarget");
      objectProperties1.params.postCreateSpareParams();
      objectProperties1.params.runOnSceneLoadHooks();
      return { node: objectProperties1, children: objectProperties1_nodes };
    }
    function create_plane1(geo12) {
      var plane1 = geo12.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(250, 200);
      plane1.p.size.set([10, 10]);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    function create_point_uvLightMap_check(geo12) {
      var point_uvLightMap_check = geo12.createNode("point");
      point_uvLightMap_check.setName("point_uvLightMap_check");
      const point_uvLightMap_check_nodes = {};
      point_uvLightMap_check.uiData.setPosition(350, 750);
      point_uvLightMap_check.p.updateX.set(true);
      point_uvLightMap_check.p.x.set("@uvLightMap.x");
      point_uvLightMap_check.p.updateY.set(true);
      point_uvLightMap_check.p.y.set("@uvLightMap.y");
      point_uvLightMap_check.p.updateZ.set(true);
      point_uvLightMap_check.p.z.set(0);
      point_uvLightMap_check.params.postCreateSpareParams();
      point_uvLightMap_check.params.runOnSceneLoadHooks();
      return { node: point_uvLightMap_check, children: point_uvLightMap_check_nodes };
    }
    function create_sphere1(geo12) {
      var sphere1 = geo12.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(0, 50);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    function create_transform1(geo12) {
      var transform1 = geo12.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(0, 200);
      transform1.p.t.set([0, 1, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_uvUnwrap1(geo12) {
      var uvUnwrap1 = geo12.createNode("uvUnwrap");
      uvUnwrap1.setName("uvUnwrap1");
      const uvUnwrap1_nodes = {};
      uvUnwrap1.uiData.setPosition(100, 600);
      uvUnwrap1.p.method.set(0);
      uvUnwrap1.p.padding.set(10);
      uvUnwrap1.params.postCreateSpareParams();
      uvUnwrap1.params.runOnSceneLoadHooks();
      return { node: uvUnwrap1, children: uvUnwrap1_nodes };
    }
    geo1_nodes["COP"] = create_COP(geo1);
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["eventsNetwork1"] = create_eventsNetwork1(geo1);
    geo1_nodes["material2"] = create_material2(geo1);
    geo1_nodes["material3"] = create_material3(geo1);
    geo1_nodes["merge1"] = create_merge1(geo1);
    geo1_nodes["objectProperties1"] = create_objectProperties1(geo1);
    geo1_nodes["plane1"] = create_plane1(geo1);
    geo1_nodes["point_uvLightMap_check"] = create_point_uvLightMap_check(geo1);
    geo1_nodes["sphere1"] = create_sphere1(geo1);
    geo1_nodes["transform1"] = create_transform1(geo1);
    geo1_nodes["uvUnwrap1"] = create_uvUnwrap1(geo1);
    geo1_nodes["material2"].node.setInput(0, geo1_nodes["point_uvLightMap_check"].node);
    geo1_nodes["material3"].node.setInput(0, geo1_nodes["objectProperties1"].node);
    geo1_nodes["merge1"].node.setInput(0, geo1_nodes["transform1"].node);
    geo1_nodes["merge1"].node.setInput(1, geo1_nodes["plane1"].node);
    geo1_nodes["objectProperties1"].node.setInput(0, geo1_nodes["uvUnwrap1"].node);
    geo1_nodes["point_uvLightMap_check"].node.setInput(0, geo1_nodes["uvUnwrap1"].node);
    geo1_nodes["transform1"].node.setInput(0, geo1_nodes["sphere1"].node);
    geo1_nodes["uvUnwrap1"].node.setInput(0, geo1_nodes["merge1"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([]);
    }
    geo1.uiData.setPosition(-50, -350);
    geo1.flags.display.set(true);
    geo1.p.CADLinearTolerance.options.setOption("editable", void 0);
    geo1.p.CADAngularTolerance.options.setOption("editable", void 0);
    geo1.p.CADCurveAbscissa.options.setOption("editable", void 0);
    geo1.p.CADCurveTolerance.options.setOption("editable", void 0);
    geo1.p.CADDisplayEdges.options.setOption("editable", void 0);
    geo1.p.CSGWireframe.options.setOption("editable", void 0);
    geo1.p.TetScale.options.setOption("editable", void 0);
    geo1.p.TetDisplayLines.options.setOption("editable", void 0);
    geo1.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    geo1.p.TetDisplayPoints.options.setOption("editable", void 0);
    geo1.p.TetDisplayCenter.options.setOption("editable", void 0);
    geo1.p.TetDisplaySphere.options.setOption("editable", void 0);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(50, -50);
      hemisphereLight1.p.intensity.set(0.3);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(200, 350);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(300, 150);
      polarTransform1.p.center.set([0, 0.7, 0]);
      polarTransform1.p.latitude.set(25.2);
      polarTransform1.p.depth.set(3);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_polarTransform2(lights2) {
      var polarTransform2 = lights2.createNode("polarTransform");
      polarTransform2.setName("polarTransform2");
      const polarTransform2_nodes = {};
      polarTransform2.uiData.setPosition(550, 150);
      polarTransform2.p.center.set([0, 0.7, 0]);
      polarTransform2.p.longitude.set(64.8);
      polarTransform2.p.latitude.set(25.2);
      polarTransform2.p.depth.set(3);
      polarTransform2.params.postCreateSpareParams();
      polarTransform2.params.runOnSceneLoadHooks();
      return { node: polarTransform2, children: polarTransform2_nodes };
    }
    function create_spotLight1(lights2) {
      var spotLight1 = lights2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(300, -50);
      spotLight1.p.color.set([0.6375968739867731, 0.01680737574872402, 0.01680737574872402]);
      spotLight1.p.decay.set(0.1);
      spotLight1.p.distance.set(10);
      spotLight1.p.castShadow.set(true);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    function create_spotLight2(lights2) {
      var spotLight2 = lights2.createNode("spotLight");
      spotLight2.setName("spotLight2");
      const spotLight2_nodes = {};
      spotLight2.uiData.setPosition(550, -50);
      spotLight2.p.color.set([0.028426039499072558, 0.01680737574872402, 0.6375968739867731]);
      spotLight2.p.decay.set(0.1);
      spotLight2.p.distance.set(10);
      spotLight2.p.castShadow.set(true);
      spotLight2.params.postCreateSpareParams();
      spotLight2.params.runOnSceneLoadHooks();
      return { node: spotLight2, children: spotLight2_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["polarTransform2"] = create_polarTransform2(lights);
    lights_nodes["spotLight1"] = create_spotLight1(lights);
    lights_nodes["spotLight2"] = create_spotLight2(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["merge1"].node.setInput(2, lights_nodes["polarTransform2"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["spotLight1"].node);
    lights_nodes["polarTransform2"].node.setInput(0, lights_nodes["spotLight2"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([]);
    }
    lights.uiData.setPosition(-50, -250);
    lights.flags.display.set(true);
    lights.p.CADLinearTolerance.options.setOption("editable", void 0);
    lights.p.CADAngularTolerance.options.setOption("editable", void 0);
    lights.p.CADCurveAbscissa.options.setOption("editable", void 0);
    lights.p.CADCurveTolerance.options.setOption("editable", void 0);
    lights.p.CADDisplayEdges.options.setOption("editable", void 0);
    lights.p.CADEdgesColor.options.setOption("editable", void 0);
    lights.p.CSGWireframe.options.setOption("editable", void 0);
    lights.p.TetScale.options.setOption("editable", void 0);
    lights.p.TetDisplayLines.options.setOption("editable", void 0);
    lights.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    lights.p.TetDisplayPoints.options.setOption("editable", void 0);
    lights.p.TetDisplayCenter.options.setOption("editable", void 0);
    lights.p.TetDisplaySphere.options.setOption("editable", void 0);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([0.5251868090358017, 0.5146585049392486, 0.014871057874541313]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(0, 150);
      cameraControls1.flags.display.set(true);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_perspectiveCamera1(cameras2) {
      var perspectiveCamera1 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera1.setName("perspectiveCamera1");
      const perspectiveCamera1_nodes = {};
      perspectiveCamera1.uiData.setPosition(0, -50);
      perspectiveCamera1.p.position.set([3.3, 3.3, 3.3]);
      perspectiveCamera1.params.postCreateSpareParams();
      perspectiveCamera1.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["perspectiveCamera1"] = create_perspectiveCamera1(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(-50, -150);
    cameras.flags.display.set(true);
    cameras.p.CADLinearTolerance.options.setOption("editable", void 0);
    cameras.p.CADAngularTolerance.options.setOption("editable", void 0);
    cameras.p.CADCurveAbscissa.options.setOption("editable", void 0);
    cameras.p.CADCurveTolerance.options.setOption("editable", void 0);
    cameras.p.CADDisplayEdges.options.setOption("editable", void 0);
    cameras.p.CADEdgesColor.options.setOption("editable", void 0);
    cameras.p.CSGWireframe.options.setOption("editable", void 0);
    cameras.p.TetScale.options.setOption("editable", void 0);
    cameras.p.TetDisplayLines.options.setOption("editable", void 0);
    cameras.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    cameras.p.TetDisplayPoints.options.setOption("editable", void 0);
    cameras.p.TetDisplayCenter.options.setOption("editable", void 0);
    cameras.p.TetDisplaySphere.options.setOption("editable", void 0);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera1",
    focusedNodes: scene_root_nodes["geo1"].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_advanced_LightMap_ts.53bff4460d75a528f184.js.map