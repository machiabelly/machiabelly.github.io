(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_advanced_PsychedelicCar_ts"],{

/***/ 22034:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  const scene_root_nodes = {};
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([]);
    }
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_car(parentNode) {
    var car = parentNode.createNode("geo");
    car.setName("car");
    const car_nodes = {};
    function create_MAT(car2) {
      var MAT = car2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshPhysicalBuilder_CAR_BODY(MAT2) {
        var meshPhysicalBuilder_CAR_BODY = MAT2.createNode("meshPhysicalBuilder");
        meshPhysicalBuilder_CAR_BODY.setName("meshPhysicalBuilder_CAR_BODY");
        const meshPhysicalBuilder_CAR_BODY_nodes = {};
        function create_add1(meshPhysicalBuilder_CAR_BODY2) {
          var add1 = meshPhysicalBuilder_CAR_BODY2.createNode("add");
          add1.setName("add1");
          const add1_nodes = {};
          add1.uiData.setPosition(-450, 50);
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add0", 0, { spare: true, editable: false });
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add1", 0, { spare: true, editable: true });
          add1.params.get("add1").set(0.78);
          add1.params.postCreateSpareParams();
          add1.params.runOnSceneLoadHooks();
          return { node: add1, children: add1_nodes };
        }
        function create_add2(meshPhysicalBuilder_CAR_BODY2) {
          var add2 = meshPhysicalBuilder_CAR_BODY2.createNode("add");
          add2.setName("add2");
          const add2_nodes = {};
          add2.uiData.setPosition(-850, -150);
          add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], { spare: true, editable: false });
          add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], { spare: true, editable: false });
          add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add2", [0, 0, 0], { spare: true, editable: true });
          add2.params.postCreateSpareParams();
          add2.params.runOnSceneLoadHooks();
          return { node: add2, children: add2_nodes };
        }
        function create_complement1(meshPhysicalBuilder_CAR_BODY2) {
          var complement1 = meshPhysicalBuilder_CAR_BODY2.createNode("complement");
          complement1.setName("complement1");
          const complement1_nodes = {};
          complement1.uiData.setPosition(-150, 400);
          complement1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          complement1.params.postCreateSpareParams();
          complement1.params.runOnSceneLoadHooks();
          return { node: complement1, children: complement1_nodes };
        }
        function create_floatToVec3_1(meshPhysicalBuilder_CAR_BODY2) {
          var floatToVec3_1 = meshPhysicalBuilder_CAR_BODY2.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(0, 200);
          floatToVec3_1.p.y.set(0.88);
          floatToVec3_1.p.z.set(0.82);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_floatToVec3_2(meshPhysicalBuilder_CAR_BODY2) {
          var floatToVec3_2 = meshPhysicalBuilder_CAR_BODY2.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(0, 350);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_floatToVec3_3(meshPhysicalBuilder_CAR_BODY2) {
          var floatToVec3_3 = meshPhysicalBuilder_CAR_BODY2.createNode("floatToVec3");
          floatToVec3_3.setName("floatToVec3_3");
          const floatToVec3_3_nodes = {};
          floatToVec3_3.uiData.setPosition(-1100, 50);
          floatToVec3_3.params.postCreateSpareParams();
          floatToVec3_3.params.runOnSceneLoadHooks();
          return { node: floatToVec3_3, children: floatToVec3_3_nodes };
        }
        function create_fresnel1(meshPhysicalBuilder_CAR_BODY2) {
          var fresnel1 = meshPhysicalBuilder_CAR_BODY2.createNode("fresnel");
          fresnel1.setName("fresnel1");
          const fresnel1_nodes = {};
          fresnel1.uiData.setPosition(-650, 300);
          fresnel1.params.postCreateSpareParams();
          fresnel1.params.runOnSceneLoadHooks();
          return { node: fresnel1, children: fresnel1_nodes };
        }
        function create_globals1(meshPhysicalBuilder_CAR_BODY2) {
          var globals1 = meshPhysicalBuilder_CAR_BODY2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1350, -50);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_hsvToRgb1(meshPhysicalBuilder_CAR_BODY2) {
          var hsvToRgb1 = meshPhysicalBuilder_CAR_BODY2.createNode("hsvToRgb");
          hsvToRgb1.setName("hsvToRgb1");
          const hsvToRgb1_nodes = {};
          hsvToRgb1.uiData.setPosition(150, 200);
          hsvToRgb1.params.postCreateSpareParams();
          hsvToRgb1.params.runOnSceneLoadHooks();
          return { node: hsvToRgb1, children: hsvToRgb1_nodes };
        }
        function create_mix1(meshPhysicalBuilder_CAR_BODY2) {
          var mix1 = meshPhysicalBuilder_CAR_BODY2.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(-100, 50);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_multAdd1(meshPhysicalBuilder_CAR_BODY2) {
          var multAdd1 = meshPhysicalBuilder_CAR_BODY2.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-1200, 50);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.params.get("mult").set(0.14);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_noise1(meshPhysicalBuilder_CAR_BODY2) {
          var noise1 = meshPhysicalBuilder_CAR_BODY2.createNode("noise");
          noise1.setName("noise1");
          const noise1_nodes = {};
          noise1.uiData.setPosition(-600, -100);
          noise1.p.outputType.set(1);
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "amp", 1, { spare: true, editable: true });
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
          noise1.params.get("freq").set([0.84, 0.84, 0.84]);
          noise1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: true });
          noise1.params.postCreateSpareParams();
          noise1.params.runOnSceneLoadHooks();
          return { node: noise1, children: noise1_nodes };
        }
        function create_noise2(meshPhysicalBuilder_CAR_BODY2) {
          var noise2 = meshPhysicalBuilder_CAR_BODY2.createNode("noise");
          noise2.setName("noise2");
          const noise2_nodes = {};
          noise2.uiData.setPosition(-950, -50);
          noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "amp", [1, 1, 1], { spare: true, editable: true });
          noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
          noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "freq", [1, 1, 1], { spare: true, editable: true });
          noise2.params.get("freq").set([0.4, 0.4, 0.4]);
          noise2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "offset", [0, 0, 0], { spare: true, editable: false });
          noise2.params.postCreateSpareParams();
          noise2.params.runOnSceneLoadHooks();
          return { node: noise2, children: noise2_nodes };
        }
        function create_output1(meshPhysicalBuilder_CAR_BODY2) {
          var output1 = meshPhysicalBuilder_CAR_BODY2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(350, 200);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_pow1(meshPhysicalBuilder_CAR_BODY2) {
          var pow1 = meshPhysicalBuilder_CAR_BODY2.createNode("pow");
          pow1.setName("pow1");
          const pow1_nodes = {};
          pow1.uiData.setPosition(-500, 300);
          pow1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "x", 0, { spare: true, editable: false });
          pow1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "y", 0, { spare: true, editable: true });
          pow1.params.get("y").set(1.8);
          pow1.params.postCreateSpareParams();
          pow1.params.runOnSceneLoadHooks();
          return { node: pow1, children: pow1_nodes };
        }
        meshPhysicalBuilder_CAR_BODY_nodes["add1"] = create_add1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["add2"] = create_add2(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["complement1"] = create_complement1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_1"] = create_floatToVec3_1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_2"] = create_floatToVec3_2(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_3"] = create_floatToVec3_3(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["fresnel1"] = create_fresnel1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["globals1"] = create_globals1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["hsvToRgb1"] = create_hsvToRgb1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["mix1"] = create_mix1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["multAdd1"] = create_multAdd1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["noise1"] = create_noise1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["noise2"] = create_noise2(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["output1"] = create_output1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["pow1"] = create_pow1(meshPhysicalBuilder_CAR_BODY);
        meshPhysicalBuilder_CAR_BODY_nodes["add1"].node.setInput(
          "add0",
          meshPhysicalBuilder_CAR_BODY_nodes["noise1"].node,
          "noise"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["add2"].node.setInput(
          "add0",
          meshPhysicalBuilder_CAR_BODY_nodes["globals1"].node,
          "position"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["add2"].node.setInput(
          "add1",
          meshPhysicalBuilder_CAR_BODY_nodes["noise2"].node,
          "noise"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["complement1"].node.setInput(
          "in",
          meshPhysicalBuilder_CAR_BODY_nodes["pow1"].node,
          "val"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_1"].node.setInput(
          "x",
          meshPhysicalBuilder_CAR_BODY_nodes["mix1"].node,
          "mix"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_1"].node.setInput(
          "y",
          meshPhysicalBuilder_CAR_BODY_nodes["pow1"].node,
          "val"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_2"].node.setInput(
          "x",
          meshPhysicalBuilder_CAR_BODY_nodes["pow1"].node,
          "val"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_2"].node.setInput(
          "y",
          meshPhysicalBuilder_CAR_BODY_nodes["complement1"].node,
          "val"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_3"].node.setInput(
          "y",
          meshPhysicalBuilder_CAR_BODY_nodes["multAdd1"].node,
          "val"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["fresnel1"].node.setInput(
          "worldPosition",
          meshPhysicalBuilder_CAR_BODY_nodes["globals1"].node,
          "worldPosition"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["fresnel1"].node.setInput(
          "worldNormal",
          meshPhysicalBuilder_CAR_BODY_nodes["globals1"].node,
          "worldNormal"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["fresnel1"].node.setInput(
          "cameraPosition",
          meshPhysicalBuilder_CAR_BODY_nodes["globals1"].node,
          "cameraPosition"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["hsvToRgb1"].node.setInput(
          "hsv",
          meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_1"].node,
          "vec3"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["mix1"].node.setInput(
          "value0",
          meshPhysicalBuilder_CAR_BODY_nodes["noise1"].node,
          "noise"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["mix1"].node.setInput(
          "value1",
          meshPhysicalBuilder_CAR_BODY_nodes["add1"].node,
          "sum"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["mix1"].node.setInput(
          "blend",
          meshPhysicalBuilder_CAR_BODY_nodes["pow1"].node,
          "val"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["multAdd1"].node.setInput(
          "value",
          meshPhysicalBuilder_CAR_BODY_nodes["globals1"].node,
          "time"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["noise1"].node.setInput(
          "position",
          meshPhysicalBuilder_CAR_BODY_nodes["add2"].node,
          "sum"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["noise2"].node.setInput(
          "position",
          meshPhysicalBuilder_CAR_BODY_nodes["globals1"].node,
          "position"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["noise2"].node.setInput(
          "offset",
          meshPhysicalBuilder_CAR_BODY_nodes["floatToVec3_3"].node,
          "vec3"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["output1"].node.setInput(
          "color",
          meshPhysicalBuilder_CAR_BODY_nodes["hsvToRgb1"].node,
          "rgb"
        );
        meshPhysicalBuilder_CAR_BODY_nodes["pow1"].node.setInput(
          "x",
          meshPhysicalBuilder_CAR_BODY_nodes["fresnel1"].node,
          "fresnel"
        );
        if (meshPhysicalBuilder_CAR_BODY.childrenController) {
          meshPhysicalBuilder_CAR_BODY.childrenController.selection.set([
            meshPhysicalBuilder_CAR_BODY_nodes["noise2"].node
          ]);
        }
        meshPhysicalBuilder_CAR_BODY.uiData.setPosition(-100, 150);
        meshPhysicalBuilder_CAR_BODY.p.useEnvMap.set(true);
        meshPhysicalBuilder_CAR_BODY.p.envMap.set("../../../COP/envMap");
        meshPhysicalBuilder_CAR_BODY.p.metalness.set(1);
        meshPhysicalBuilder_CAR_BODY.p.roughness.set(0.15);
        meshPhysicalBuilder_CAR_BODY.p.clearcoat.set(0.98);
        meshPhysicalBuilder_CAR_BODY.p.clearcoatRoughness.set(0.38);
        meshPhysicalBuilder_CAR_BODY.params.postCreateSpareParams();
        meshPhysicalBuilder_CAR_BODY.params.runOnSceneLoadHooks();
        return { node: meshPhysicalBuilder_CAR_BODY, children: meshPhysicalBuilder_CAR_BODY_nodes };
      }
      function create_meshStandardBuilder_GROUND(MAT2) {
        var meshStandardBuilder_GROUND = MAT2.createNode("meshStandardBuilder");
        meshStandardBuilder_GROUND.setName("meshStandardBuilder_GROUND");
        const meshStandardBuilder_GROUND_nodes = {};
        function create_constant1(meshStandardBuilder_GROUND2) {
          var constant1 = meshStandardBuilder_GROUND2.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-150, -250);
          constant1.p.type.set(4);
          constant1.p.color.set([0.43529411764705883, 0.6274509803921569, 0.807843137254902]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(meshStandardBuilder_GROUND2) {
          var constant2 = meshStandardBuilder_GROUND2.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-150, -350);
          constant2.p.type.set(4);
          constant2.p.color.set([0.2901960784313726, 0.3411764705882353, 0.5882352941176471]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_constant3(meshStandardBuilder_GROUND2) {
          var constant3 = meshStandardBuilder_GROUND2.createNode("constant");
          constant3.setName("constant3");
          const constant3_nodes = {};
          constant3.uiData.setPosition(-250, 150);
          constant3.params.postCreateSpareParams();
          constant3.params.runOnSceneLoadHooks();
          return { node: constant3, children: constant3_nodes };
        }
        function create_floatToVec2_1(meshStandardBuilder_GROUND2) {
          var floatToVec2_1 = meshStandardBuilder_GROUND2.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-250, 0);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(meshStandardBuilder_GROUND2) {
          var globals1 = meshStandardBuilder_GROUND2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-450, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_grid1(meshStandardBuilder_GROUND2) {
          var grid1 = meshStandardBuilder_GROUND2.createNode("grid");
          grid1.setName("grid1");
          const grid1_nodes = {};
          grid1.uiData.setPosition(-100, -50);
          grid1.p.lineWidth.set(0.05);
          grid1.p.freqMult.set(4.4);
          grid1.params.postCreateSpareParams();
          grid1.params.runOnSceneLoadHooks();
          return { node: grid1, children: grid1_nodes };
        }
        function create_mix1(meshStandardBuilder_GROUND2) {
          var mix1 = meshStandardBuilder_GROUND2.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(50, -100);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(meshStandardBuilder_GROUND2) {
          var output1 = meshStandardBuilder_GROUND2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(250, -50);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_vec3ToFloat1(meshStandardBuilder_GROUND2) {
          var vec3ToFloat1 = meshStandardBuilder_GROUND2.createNode("vec3ToFloat");
          vec3ToFloat1.setName("vec3ToFloat1");
          const vec3ToFloat1_nodes = {};
          vec3ToFloat1.uiData.setPosition(-350, 0);
          vec3ToFloat1.params.postCreateSpareParams();
          vec3ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec3ToFloat1, children: vec3ToFloat1_nodes };
        }
        meshStandardBuilder_GROUND_nodes["constant1"] = create_constant1(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["constant2"] = create_constant2(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["constant3"] = create_constant3(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["floatToVec2_1"] = create_floatToVec2_1(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["globals1"] = create_globals1(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["grid1"] = create_grid1(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["mix1"] = create_mix1(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["output1"] = create_output1(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["vec3ToFloat1"] = create_vec3ToFloat1(meshStandardBuilder_GROUND);
        meshStandardBuilder_GROUND_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshStandardBuilder_GROUND_nodes["vec3ToFloat1"].node,
          "x"
        );
        meshStandardBuilder_GROUND_nodes["floatToVec2_1"].node.setInput(
          "y",
          meshStandardBuilder_GROUND_nodes["vec3ToFloat1"].node,
          "z"
        );
        meshStandardBuilder_GROUND_nodes["grid1"].node.setInput(
          "uv",
          meshStandardBuilder_GROUND_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshStandardBuilder_GROUND_nodes["mix1"].node.setInput(
          "value0",
          meshStandardBuilder_GROUND_nodes["constant2"].node,
          "val"
        );
        meshStandardBuilder_GROUND_nodes["mix1"].node.setInput(
          "value1",
          meshStandardBuilder_GROUND_nodes["constant1"].node,
          "val"
        );
        meshStandardBuilder_GROUND_nodes["mix1"].node.setInput(
          "blend",
          meshStandardBuilder_GROUND_nodes["grid1"].node,
          "grid"
        );
        meshStandardBuilder_GROUND_nodes["output1"].node.setInput(
          "color",
          meshStandardBuilder_GROUND_nodes["mix1"].node,
          "mix"
        );
        meshStandardBuilder_GROUND_nodes["vec3ToFloat1"].node.setInput(
          "vec",
          meshStandardBuilder_GROUND_nodes["globals1"].node,
          "position"
        );
        if (meshStandardBuilder_GROUND.childrenController) {
          meshStandardBuilder_GROUND.childrenController.selection.set([
            meshStandardBuilder_GROUND_nodes["output1"].node
          ]);
        }
        meshStandardBuilder_GROUND.uiData.setPosition(-100, -100);
        meshStandardBuilder_GROUND.p.metalness.set(0.92);
        meshStandardBuilder_GROUND.p.roughness.set(0.29);
        meshStandardBuilder_GROUND.params.postCreateSpareParams();
        meshStandardBuilder_GROUND.params.runOnSceneLoadHooks();
        return { node: meshStandardBuilder_GROUND, children: meshStandardBuilder_GROUND_nodes };
      }
      function create_meshStandard_CAR_GLASS(MAT2) {
        var meshStandard_CAR_GLASS = MAT2.createNode("meshStandardBuilder");
        meshStandard_CAR_GLASS.setName("meshStandard_CAR_GLASS");
        const meshStandard_CAR_GLASS_nodes = {};
        function create_constant1(meshStandard_CAR_GLASS2) {
          var constant1 = meshStandard_CAR_GLASS2.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(0, -100);
          constant1.p.type.set(4);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_fresnel1(meshStandard_CAR_GLASS2) {
          var fresnel1 = meshStandard_CAR_GLASS2.createNode("fresnel");
          fresnel1.setName("fresnel1");
          const fresnel1_nodes = {};
          fresnel1.uiData.setPosition(-50, 100);
          fresnel1.params.postCreateSpareParams();
          fresnel1.params.runOnSceneLoadHooks();
          return { node: fresnel1, children: fresnel1_nodes };
        }
        function create_globals1(meshStandard_CAR_GLASS2) {
          var globals1 = meshStandard_CAR_GLASS2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-250, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_output1(meshStandard_CAR_GLASS2) {
          var output1 = meshStandard_CAR_GLASS2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(300, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        meshStandard_CAR_GLASS_nodes["constant1"] = create_constant1(meshStandard_CAR_GLASS);
        meshStandard_CAR_GLASS_nodes["fresnel1"] = create_fresnel1(meshStandard_CAR_GLASS);
        meshStandard_CAR_GLASS_nodes["globals1"] = create_globals1(meshStandard_CAR_GLASS);
        meshStandard_CAR_GLASS_nodes["output1"] = create_output1(meshStandard_CAR_GLASS);
        meshStandard_CAR_GLASS_nodes["fresnel1"].node.setInput(
          "worldPosition",
          meshStandard_CAR_GLASS_nodes["globals1"].node,
          "worldPosition"
        );
        meshStandard_CAR_GLASS_nodes["fresnel1"].node.setInput(
          "worldNormal",
          meshStandard_CAR_GLASS_nodes["globals1"].node,
          "worldNormal"
        );
        meshStandard_CAR_GLASS_nodes["fresnel1"].node.setInput(
          "cameraPosition",
          meshStandard_CAR_GLASS_nodes["globals1"].node,
          "cameraPosition"
        );
        meshStandard_CAR_GLASS_nodes["output1"].node.setInput(
          "color",
          meshStandard_CAR_GLASS_nodes["constant1"].node,
          "val"
        );
        meshStandard_CAR_GLASS_nodes["output1"].node.setInput(
          "roughness",
          meshStandard_CAR_GLASS_nodes["fresnel1"].node,
          "fresnel"
        );
        if (meshStandard_CAR_GLASS.childrenController) {
          meshStandard_CAR_GLASS.childrenController.selection.set([]);
        }
        meshStandard_CAR_GLASS.uiData.setPosition(-100, 350);
        meshStandard_CAR_GLASS.p.useEnvMap.set(true);
        meshStandard_CAR_GLASS.p.envMap.set("../../../COP/envMap");
        meshStandard_CAR_GLASS.p.roughness.set(0.26);
        meshStandard_CAR_GLASS.params.postCreateSpareParams();
        meshStandard_CAR_GLASS.params.runOnSceneLoadHooks();
        return { node: meshStandard_CAR_GLASS, children: meshStandard_CAR_GLASS_nodes };
      }
      function create_meshStandard_METAL(MAT2) {
        var meshStandard_METAL = MAT2.createNode("meshStandard");
        meshStandard_METAL.setName("meshStandard_METAL");
        const meshStandard_METAL_nodes = {};
        meshStandard_METAL.uiData.setPosition(-100, 550);
        meshStandard_METAL.p.color.set([0.5019607843137255, 0.4627450980392157, 0.0392156862745098]);
        meshStandard_METAL.p.useEnvMap.set(true);
        meshStandard_METAL.p.envMap.set("../../../COP/envMap");
        meshStandard_METAL.p.metalness.set(1);
        meshStandard_METAL.p.roughness.set(0);
        meshStandard_METAL.params.postCreateSpareParams();
        meshStandard_METAL.params.runOnSceneLoadHooks();
        return { node: meshStandard_METAL, children: meshStandard_METAL_nodes };
      }
      function create_meshStandard_ROOF(MAT2) {
        var meshStandard_ROOF = MAT2.createNode("meshStandard");
        meshStandard_ROOF.setName("meshStandard_ROOF");
        const meshStandard_ROOF_nodes = {};
        meshStandard_ROOF.uiData.setPosition(-100, 750);
        meshStandard_ROOF.p.color.set([0, 0, 0]);
        meshStandard_ROOF.p.useEnvMap.set(true);
        meshStandard_ROOF.p.envMap.set("../../../COP/envMap");
        meshStandard_ROOF.p.metalness.set(0.67);
        meshStandard_ROOF.p.roughness.set(0.5);
        meshStandard_ROOF.params.postCreateSpareParams();
        meshStandard_ROOF.params.runOnSceneLoadHooks();
        return { node: meshStandard_ROOF, children: meshStandard_ROOF_nodes };
      }
      function create_meshStandard_TIRES(MAT2) {
        var meshStandard_TIRES = MAT2.createNode("meshStandard");
        meshStandard_TIRES.setName("meshStandard_TIRES");
        const meshStandard_TIRES_nodes = {};
        meshStandard_TIRES.uiData.setPosition(-100, 950);
        meshStandard_TIRES.p.color.set([0.00784313725490196, 0.01568627450980392, 0.13333333333333333]);
        meshStandard_TIRES.p.useEnvMap.set(true);
        meshStandard_TIRES.p.envMap.set("../../../COP/envMap");
        meshStandard_TIRES.p.metalness.set(0.79);
        meshStandard_TIRES.p.roughness.set(0.49);
        meshStandard_TIRES.params.postCreateSpareParams();
        meshStandard_TIRES.params.runOnSceneLoadHooks();
        return { node: meshStandard_TIRES, children: meshStandard_TIRES_nodes };
      }
      MAT_nodes["meshPhysicalBuilder_CAR_BODY"] = create_meshPhysicalBuilder_CAR_BODY(MAT);
      MAT_nodes["meshStandardBuilder_GROUND"] = create_meshStandardBuilder_GROUND(MAT);
      MAT_nodes["meshStandard_CAR_GLASS"] = create_meshStandard_CAR_GLASS(MAT);
      MAT_nodes["meshStandard_METAL"] = create_meshStandard_METAL(MAT);
      MAT_nodes["meshStandard_ROOF"] = create_meshStandard_ROOF(MAT);
      MAT_nodes["meshStandard_TIRES"] = create_meshStandard_TIRES(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-650, 100);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_fileGLTF1(car2) {
      var fileGLTF1 = car2.createNode("fileGLTF");
      fileGLTF1.setName("fileGLTF1");
      const fileGLTF1_nodes = {};
      fileGLTF1.uiData.setPosition(150, -300);
      fileGLTF1.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/car.glb");
      fileGLTF1.params.postCreateSpareParams();
      fileGLTF1.params.runOnSceneLoadHooks();
      return { node: fileGLTF1, children: fileGLTF1_nodes };
    }
    function create_material1(car2) {
      var material1 = car2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(-450, 100);
      material1.p.material.set("../MAT/meshStandardBuilder_GROUND");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_material2(car2) {
      var material2 = car2.createNode("material");
      material2.setName("material2");
      const material2_nodes = {};
      material2.uiData.setPosition(150, -100);
      material2.p.group.set("*/mesh_0");
      material2.p.material.set("../MAT/meshPhysicalBuilder_CAR_BODY");
      material2.params.postCreateSpareParams();
      material2.params.runOnSceneLoadHooks();
      return { node: material2, children: material2_nodes };
    }
    function create_material3(car2) {
      var material3 = car2.createNode("material");
      material3.setName("material3");
      const material3_nodes = {};
      material3.uiData.setPosition(150, 200);
      material3.p.group.set("*/mesh_0_2");
      material3.p.material.set("../MAT/meshStandard_METAL");
      material3.params.postCreateSpareParams();
      material3.params.runOnSceneLoadHooks();
      return { node: material3, children: material3_nodes };
    }
    function create_material4(car2) {
      var material4 = car2.createNode("material");
      material4.setName("material4");
      const material4_nodes = {};
      material4.uiData.setPosition(150, 350);
      material4.p.group.set("*/mesh_0_3");
      material4.p.material.set("../MAT/meshStandard_TIRES");
      material4.params.postCreateSpareParams();
      material4.params.runOnSceneLoadHooks();
      return { node: material4, children: material4_nodes };
    }
    function create_material5(car2) {
      var material5 = car2.createNode("material");
      material5.setName("material5");
      const material5_nodes = {};
      material5.uiData.setPosition(150, 500);
      material5.p.group.set("*/mesh_0_4");
      material5.p.material.set("../MAT/meshStandard_ROOF");
      material5.params.postCreateSpareParams();
      material5.params.runOnSceneLoadHooks();
      return { node: material5, children: material5_nodes };
    }
    function create_material6(car2) {
      var material6 = car2.createNode("material");
      material6.setName("material6");
      const material6_nodes = {};
      material6.uiData.setPosition(150, 50);
      material6.p.group.set("*/mesh_0_1*");
      material6.p.material.set("../MAT/meshStandard_CAR_GLASS");
      material6.params.postCreateSpareParams();
      material6.params.runOnSceneLoadHooks();
      return { node: material6, children: material6_nodes };
    }
    function create_merge1(car2) {
      var merge1 = car2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-250, 750);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_plane1(car2) {
      var plane1 = car2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(-450, -100);
      plane1.p.size.set([14, 14]);
      plane1.p.useSegmentsCount.set(true);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    car_nodes["MAT"] = create_MAT(car);
    car_nodes["fileGLTF1"] = create_fileGLTF1(car);
    car_nodes["material1"] = create_material1(car);
    car_nodes["material2"] = create_material2(car);
    car_nodes["material3"] = create_material3(car);
    car_nodes["material4"] = create_material4(car);
    car_nodes["material5"] = create_material5(car);
    car_nodes["material6"] = create_material6(car);
    car_nodes["merge1"] = create_merge1(car);
    car_nodes["plane1"] = create_plane1(car);
    car_nodes["material1"].node.setInput(0, car_nodes["plane1"].node);
    car_nodes["material2"].node.setInput(0, car_nodes["fileGLTF1"].node);
    car_nodes["material3"].node.setInput(0, car_nodes["material6"].node);
    car_nodes["material4"].node.setInput(0, car_nodes["material3"].node);
    car_nodes["material5"].node.setInput(0, car_nodes["material4"].node);
    car_nodes["material6"].node.setInput(0, car_nodes["material2"].node);
    car_nodes["merge1"].node.setInput(0, car_nodes["material1"].node);
    car_nodes["merge1"].node.setInput(1, car_nodes["material5"].node);
    if (car.childrenController) {
      car.childrenController.selection.set([]);
    }
    car.uiData.setPosition(0, -200);
    car.flags.display.set(true);
    car.params.postCreateSpareParams();
    car.params.runOnSceneLoadHooks();
    return { node: car, children: car_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_areaLight1(lights2) {
      var areaLight1 = lights2.createNode("areaLight");
      areaLight1.setName("areaLight1");
      const areaLight1_nodes = {};
      areaLight1.uiData.setPosition(150, 0);
      areaLight1.p.width.set(3.6);
      areaLight1.p.showHelper.set(true);
      areaLight1.params.postCreateSpareParams();
      areaLight1.params.runOnSceneLoadHooks();
      return { node: areaLight1, children: areaLight1_nodes };
    }
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(-50, -100);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(0, 350);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(150, 150);
      polarTransform1.p.latitude.set(32.4);
      polarTransform1.p.depth.set(2.1);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    lights_nodes["areaLight1"] = create_areaLight1(lights);
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["areaLight1"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([lights_nodes["polarTransform1"].node]);
    }
    lights.uiData.setPosition(0, -100);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-0.8, 0.7, 0]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(-50, 50);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraControls2(cameras2) {
      var cameraControls2 = cameras2.createNode("cameraControls");
      cameraControls2.setName("cameraControls2");
      const cameraControls2_nodes = {};
      function create_cameraOrbitControls1(cameraControls22) {
        var cameraOrbitControls1 = cameraControls22.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-0.8, 0.7, 0]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls2_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls2);
      if (cameraControls2.childrenController) {
        cameraControls2.childrenController.selection.set([]);
      }
      cameraControls2.uiData.setPosition(250, 50);
      cameraControls2.p.node.set("cameraOrbitControls1");
      cameraControls2.params.postCreateSpareParams();
      cameraControls2.params.runOnSceneLoadHooks();
      return { node: cameraControls2, children: cameraControls2_nodes };
    }
    function create_cameraPostProcess1(cameras2) {
      var cameraPostProcess1 = cameras2.createNode("cameraPostProcess");
      cameraPostProcess1.setName("cameraPostProcess1");
      const cameraPostProcess1_nodes = {};
      function create_OUT(cameraPostProcess12) {
        var OUT = cameraPostProcess12.createNode("null");
        OUT.setName("OUT");
        const OUT_nodes = {};
        OUT.uiData.setPosition(0, 100);
        OUT.flags.display.set(true);
        OUT.params.postCreateSpareParams();
        OUT.params.runOnSceneLoadHooks();
        return { node: OUT, children: OUT_nodes };
      }
      function create_bloom1(cameraPostProcess12) {
        var bloom1 = cameraPostProcess12.createNode("bloom");
        bloom1.setName("bloom1");
        const bloom1_nodes = {};
        bloom1.uiData.setPosition(0, 0);
        bloom1.uiData.setPosition(0, 0);
        bloom1.p.strength.set(0.12);
        bloom1.p.threshold.set(0.72);
        bloom1.p.scale.set(2.58);
        bloom1.p.kernelSize.set(5);
        bloom1.params.postCreateSpareParams();
        bloom1.params.runOnSceneLoadHooks();
        return { node: bloom1, children: bloom1_nodes };
      }
      cameraPostProcess1_nodes["OUT"] = create_OUT(cameraPostProcess1);
      cameraPostProcess1_nodes["bloom1"] = create_bloom1(cameraPostProcess1);
      cameraPostProcess1_nodes["OUT"].node.setInput(0, cameraPostProcess1_nodes["bloom1"].node);
      if (cameraPostProcess1.childrenController) {
        cameraPostProcess1.childrenController.selection.set([cameraPostProcess1_nodes["bloom1"].node]);
      }
      cameraPostProcess1.uiData.setPosition(-50, 200);
      cameraPostProcess1.params.postCreateSpareParams();
      cameraPostProcess1.params.runOnSceneLoadHooks();
      return { node: cameraPostProcess1, children: cameraPostProcess1_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(100, 400);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG.setName("perspectiveCamera_DEBUG");
      const perspectiveCamera_DEBUG_nodes = {};
      perspectiveCamera_DEBUG.uiData.setPosition(250, -100);
      perspectiveCamera_DEBUG.p.position.set([-3.3, 2.4000000000000004, -2.3000000000000003]);
      perspectiveCamera_DEBUG.params.postCreateSpareParams();
      perspectiveCamera_DEBUG.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes };
    }
    function create_perspectiveCamera_MAIN(cameras2) {
      var perspectiveCamera_MAIN = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_MAIN.setName("perspectiveCamera_MAIN");
      const perspectiveCamera_MAIN_nodes = {};
      perspectiveCamera_MAIN.uiData.setPosition(-50, -100);
      perspectiveCamera_MAIN.p.position.set([-3.3, 2.4000000000000004, -2.3000000000000003]);
      perspectiveCamera_MAIN.params.postCreateSpareParams();
      perspectiveCamera_MAIN.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_MAIN, children: perspectiveCamera_MAIN_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraControls2"] = create_cameraControls2(cameras);
    cameras_nodes["cameraPostProcess1"] = create_cameraPostProcess1(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera_DEBUG"] = create_perspectiveCamera_DEBUG(cameras);
    cameras_nodes["perspectiveCamera_MAIN"] = create_perspectiveCamera_MAIN(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_MAIN"].node);
    cameras_nodes["cameraControls2"].node.setInput(0, cameras_nodes["perspectiveCamera_DEBUG"].node);
    cameras_nodes["cameraPostProcess1"].node.setInput(0, cameras_nodes["cameraControls1"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["cameraPostProcess1"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraControls2"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(0, 0);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["car"] = create_car(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_MAIN",
    focusedNodes: scene_root_nodes["car"].node.children(),
    // no node is focused here, so that we don't have the transform gizmo appearing
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_advanced_PsychedelicCar_ts.06d790b700540700d9d4.js.map