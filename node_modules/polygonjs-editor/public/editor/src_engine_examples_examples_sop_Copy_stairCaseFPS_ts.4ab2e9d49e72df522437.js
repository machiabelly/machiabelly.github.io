(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Copy_stairCaseFPS_ts"],{

/***/ 42366:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([6.214656279079446, 1.2116180267592227, 1.125600813469138]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      if (events1.childrenController) {
        events1.childrenController.selection.set([]);
      }
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    if (perspectiveCamera1.childrenController) {
      perspectiveCamera1.childrenController.selection.set([]);
    }
    perspectiveCamera1.uiData.setPosition(-100, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([3.0161526633531355, 1.1787657307191874, 2.814738208647524]);
    perspectiveCamera1.p.r.set([-22.723127930556515, 44.66532130223666, 16.403892417511617]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([]);
    }
    COP.uiData.setPosition(-100, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(-250, 0);
      hemisphereLight1.p.skyColor.set([0.8745098039215686, 0.9450980392156862, 0.9411764705882353]);
      hemisphereLight1.p.intensity.set(0.3);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-150, 400);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(50, 200);
      polarTransform1.p.center.set([6.2, 0, 0]);
      polarTransform1.p.longitude.set(-50.4);
      polarTransform1.p.latitude.set(46.8);
      polarTransform1.p.depth.set(14);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_spotLight1(lights2) {
      var spotLight1 = lights2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(50, 0);
      spotLight1.p.color.set([0.9411764705882353, 0.9607843137254902, 0.8]);
      spotLight1.p.intensity.set(1.3);
      spotLight1.p.decay.set(0.1);
      spotLight1.p.penumbra.set(0.22);
      spotLight1.p.castShadow.set(true);
      spotLight1.p.shadowBias.set(0);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["spotLight1"] = create_spotLight1(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["spotLight1"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([]);
    }
    lights.uiData.setPosition(150, -100);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_stairs(parentNode) {
    var stairs = parentNode.createNode("geo");
    stairs.setName("stairs");
    const stairs_nodes = {};
    function create_BVH1(stairs2) {
      var BVH1 = stairs2.createNode("BVH");
      BVH1.setName("BVH1");
      const BVH1_nodes = {};
      BVH1.uiData.setPosition(-350, 900);
      BVH1.flags.display.set(true);
      BVH1.params.postCreateSpareParams();
      BVH1.params.runOnSceneLoadHooks();
      return { node: BVH1, children: BVH1_nodes };
    }
    function create_MAT(stairs2) {
      var MAT = stairs2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandardBuilder1(MAT2) {
        var meshStandardBuilder1 = MAT2.createNode("meshStandardBuilder");
        meshStandardBuilder1.setName("meshStandardBuilder1");
        const meshStandardBuilder1_nodes = {};
        function create_checkers1(meshStandardBuilder12) {
          var checkers1 = meshStandardBuilder12.createNode("checkers");
          checkers1.setName("checkers1");
          const checkers1_nodes = {};
          checkers1.uiData.setPosition(-50, 150);
          checkers1.params.postCreateSpareParams();
          checkers1.params.runOnSceneLoadHooks();
          return { node: checkers1, children: checkers1_nodes };
        }
        function create_constant1(meshStandardBuilder12) {
          var constant1 = meshStandardBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-100, -300);
          constant1.p.type.set(4);
          constant1.p.color.set([0.807843137254902, 0.49019607843137253, 0.8509803921568627]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_floatToVec2_1(meshStandardBuilder12) {
          var floatToVec2_1 = meshStandardBuilder12.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-300, 200);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(meshStandardBuilder12) {
          var globals1 = meshStandardBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-600, 50);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_mix1(meshStandardBuilder12) {
          var mix1 = meshStandardBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(200, -250);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_multScalar1(meshStandardBuilder12) {
          var multScalar1 = meshStandardBuilder12.createNode("multScalar");
          multScalar1.setName("multScalar1");
          const multScalar1_nodes = {};
          multScalar1.uiData.setPosition(0, -150);
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multScalar1.params.get("mult").set(0.79);
          multScalar1.params.postCreateSpareParams();
          multScalar1.params.runOnSceneLoadHooks();
          return { node: multScalar1, children: multScalar1_nodes };
        }
        function create_output1(meshStandardBuilder12) {
          var output1 = meshStandardBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(400, -150);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_vec4ToFloat1(meshStandardBuilder12) {
          var vec4ToFloat1 = meshStandardBuilder12.createNode("vec4ToFloat");
          vec4ToFloat1.setName("vec4ToFloat1");
          const vec4ToFloat1_nodes = {};
          vec4ToFloat1.uiData.setPosition(-450, 200);
          vec4ToFloat1.params.postCreateSpareParams();
          vec4ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec4ToFloat1, children: vec4ToFloat1_nodes };
        }
        meshStandardBuilder1_nodes["checkers1"] = create_checkers1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant1"] = create_constant1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["floatToVec2_1"] = create_floatToVec2_1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["globals1"] = create_globals1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["mix1"] = create_mix1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["multScalar1"] = create_multScalar1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["output1"] = create_output1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["vec4ToFloat1"] = create_vec4ToFloat1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["checkers1"].node.setInput(
          "uv",
          meshStandardBuilder1_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshStandardBuilder1_nodes["vec4ToFloat1"].node,
          "x"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "y",
          meshStandardBuilder1_nodes["vec4ToFloat1"].node,
          "z"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value0",
          meshStandardBuilder1_nodes["constant1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value1",
          meshStandardBuilder1_nodes["multScalar1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "blend",
          meshStandardBuilder1_nodes["checkers1"].node,
          "checker"
        );
        meshStandardBuilder1_nodes["multScalar1"].node.setInput(
          "value",
          meshStandardBuilder1_nodes["constant1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["output1"].node.setInput(
          "color",
          meshStandardBuilder1_nodes["mix1"].node,
          "mix"
        );
        meshStandardBuilder1_nodes["vec4ToFloat1"].node.setInput(
          "vec",
          meshStandardBuilder1_nodes["globals1"].node,
          "worldPosition"
        );
        if (meshStandardBuilder1.childrenController) {
          meshStandardBuilder1.childrenController.selection.set([
            meshStandardBuilder1_nodes["checkers1"].node
          ]);
        }
        meshStandardBuilder1.uiData.setPosition(0, 200);
        meshStandardBuilder1.params.postCreateSpareParams();
        meshStandardBuilder1.params.runOnSceneLoadHooks();
        return { node: meshStandardBuilder1, children: meshStandardBuilder1_nodes };
      }
      MAT_nodes["meshStandardBuilder1"] = create_meshStandardBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-600, 750);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_box1(stairs2) {
      var box1 = stairs2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(-300, -200);
      box1.p.sizes.set([0.3, 0.1, 1.4000000000000001]);
      box1.p.center.set([0, 0, 0.7000000000000001]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_box2(stairs2) {
      var box2 = stairs2.createNode("box");
      box2.setName("box2");
      const box2_nodes = {};
      box2.uiData.setPosition(-100, -200);
      box2.p.sizes.set([0.1, 0.6, 0.1]);
      box2.p.center.set([0, 0.3, 1.4500000000000002]);
      box2.params.postCreateSpareParams();
      box2.params.runOnSceneLoadHooks();
      return { node: box2, children: box2_nodes };
    }
    function create_copy1(stairs2) {
      var copy1 = stairs2.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setPosition(-250, 200);
      copy1.p.count.set("5*(1+copy('../copy2'))");
      copy1.p.t.set([0, 0.09, 0]);
      copy1.p.r.set([0, 9.6, 0]);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_copy2(stairs2) {
      var copy2 = stairs2.createNode("copy");
      copy2.setName("copy2");
      const copy2_nodes = {};
      copy2.uiData.setPosition(-250, 400);
      copy2.p.count.set(13);
      copy2.p.t.set([2.9076227305223816, 0, 0]);
      copy2.params.postCreateSpareParams();
      copy2.params.runOnSceneLoadHooks();
      return { node: copy2, children: copy2_nodes };
    }
    function create_material1(stairs2) {
      var material1 = stairs2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(-350, 750);
      material1.p.material.set("../MAT/meshStandardBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_merge1(stairs2) {
      var merge1 = stairs2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-350, 600);
      merge1.p.compact.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_merge2(stairs2) {
      var merge2 = stairs2.createNode("merge");
      merge2.setName("merge2");
      const merge2_nodes = {};
      merge2.uiData.setPosition(-250, 0);
      merge2.p.compact.set(true);
      merge2.params.postCreateSpareParams();
      merge2.params.runOnSceneLoadHooks();
      return { node: merge2, children: merge2_nodes };
    }
    function create_plane1(stairs2) {
      var plane1 = stairs2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(-600, 400);
      plane1.p.size.set([133, 24]);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    stairs_nodes["BVH1"] = create_BVH1(stairs);
    stairs_nodes["MAT"] = create_MAT(stairs);
    stairs_nodes["box1"] = create_box1(stairs);
    stairs_nodes["box2"] = create_box2(stairs);
    stairs_nodes["copy1"] = create_copy1(stairs);
    stairs_nodes["copy2"] = create_copy2(stairs);
    stairs_nodes["material1"] = create_material1(stairs);
    stairs_nodes["merge1"] = create_merge1(stairs);
    stairs_nodes["merge2"] = create_merge2(stairs);
    stairs_nodes["plane1"] = create_plane1(stairs);
    stairs_nodes["BVH1"].node.setInput(0, stairs_nodes["material1"].node);
    stairs_nodes["copy1"].node.setInput(0, stairs_nodes["merge2"].node);
    stairs_nodes["copy2"].node.setInput(0, stairs_nodes["copy1"].node);
    stairs_nodes["material1"].node.setInput(0, stairs_nodes["merge1"].node);
    stairs_nodes["merge1"].node.setInput(0, stairs_nodes["plane1"].node);
    stairs_nodes["merge1"].node.setInput(1, stairs_nodes["copy2"].node);
    stairs_nodes["merge2"].node.setInput(0, stairs_nodes["box1"].node);
    stairs_nodes["merge2"].node.setInput(1, stairs_nodes["box2"].node);
    if (stairs.childrenController) {
      stairs.childrenController.selection.set([stairs_nodes["box1"].node]);
    }
    stairs.uiData.setPosition(150, -200);
    stairs.flags.display.set(true);
    stairs.params.postCreateSpareParams();
    stairs.params.runOnSceneLoadHooks();
    return { node: stairs, children: stairs_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_firstPersonControls1(cameraControls12) {
        var firstPersonControls1 = cameraControls12.createNode("firstPersonControls");
        firstPersonControls1.setName("firstPersonControls1");
        const firstPersonControls1_nodes = {};
        firstPersonControls1.uiData.setPosition(0, -200);
        firstPersonControls1.p.colliderObject.set("../../../stairs/BVH1");
        firstPersonControls1.p.translateSpeed.set(2.3);
        firstPersonControls1.p.jumpStrength.set(16);
        firstPersonControls1.p.runSpeedMult.set(2.7);
        firstPersonControls1.p.startPosition.set([3, 5.4, 3.8000000000000003]);
        firstPersonControls1.p.startRotation.set([0, -45, 0]);
        firstPersonControls1.params.postCreateSpareParams();
        firstPersonControls1.params.runOnSceneLoadHooks();
        return { node: firstPersonControls1, children: firstPersonControls1_nodes };
      }
      cameraControls1_nodes["firstPersonControls1"] = create_firstPersonControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([cameraControls1_nodes["firstPersonControls1"].node]);
      }
      cameraControls1.uiData.setPosition(-300, -50);
      cameraControls1.flags.display.set(true);
      cameraControls1.p.node.set("firstPersonControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_perspectiveCamera_FPS(cameras2) {
      var perspectiveCamera_FPS = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_FPS.setName("perspectiveCamera_FPS");
      const perspectiveCamera_FPS_nodes = {};
      perspectiveCamera_FPS.uiData.setPosition(-300, -200);
      perspectiveCamera_FPS.params.postCreateSpareParams();
      perspectiveCamera_FPS.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_FPS, children: perspectiveCamera_FPS_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["perspectiveCamera_FPS"] = create_perspectiveCamera_FPS(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_FPS"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(150, 0);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["stairs"] = create_stairs(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_FPS",
    focusedNodes: Object.values(scene_root_nodes["stairs"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Copy_stairCaseFPS_ts.4ab2e9d49e72df522437.js.map