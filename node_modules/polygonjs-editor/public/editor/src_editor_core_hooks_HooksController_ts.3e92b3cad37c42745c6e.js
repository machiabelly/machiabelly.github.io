(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_editor_core_hooks_HooksController_ts"],{

/***/ 69376:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "r": function() { return /* binding */ BaseOnCreateHookRegister; }
/* harmony export */ });
/* harmony import */ var _engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(52070);


class BaseOnCreateHookRegister {
  context() {
    return _engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_0__/* .NodeContext.SOP */ .sy.SOP;
  }
  type() {
    return "no-type";
  }
  onCreate(node) {
  }
}


/***/ }),

/***/ 43065:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "EditorCoreHooksController": function() { return /* binding */ EditorCoreHooksController; }
});

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/hooks/onCreate/BaseOnCreateHookRegister.ts
var BaseOnCreateHookRegister = __webpack_require__(69376);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/NodeContext.ts
var NodeContext = __webpack_require__(52070);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/anim/Network.ts



const xOffset = -300;
const yOffset = 100;
function animNetworkOnCreate(node) {
  const duration = node.createNode("duration");
  const easing = node.createNode("easing");
  const target = node.createNode("target");
  const propertyName = node.createNode("propertyName");
  const propertyValue = node.createNode("propertyValue");
  const propertyValueReset = node.createNode("propertyValue");
  const end = node.createNode("null");
  const start = node.createNode("null");
  const play = node.createNode("play");
  end.setName("PLAY");
  start.setName("RESET");
  play.setName("CONTROLS");
  easing.setInput(0, duration);
  propertyName.setInput(0, target);
  propertyValue.setInput(0, propertyName);
  propertyValue.p.value3.set([0, 1, 0]);
  propertyValueReset.setInput(0, propertyName);
  end.setInput(0, propertyValue);
  start.setInput(0, propertyValueReset);
  play.setInput(0, start);
  play.setInput(1, end);
  const pos = duration.uiData.position().clone();
  pos.y += yOffset;
  easing.uiData.setPosition(pos);
  pos.y += yOffset * 2;
  target.uiData.setPosition(pos);
  pos.y += yOffset;
  propertyName.uiData.setPosition(pos);
  pos.y += yOffset;
  propertyValue.uiData.setPosition(pos);
  propertyValueReset.uiData.setPosition(xOffset, pos.y);
  pos.y += yOffset;
  end.uiData.setPosition(pos);
  start.uiData.setPosition(xOffset, pos.y);
  pos.y += yOffset;
  pos.x = 0.5 * (end.uiData.position().x + start.uiData.position().x);
  play.uiData.setPosition(pos);
}
const CONTEXTS = [
  NodeContext/* NodeContext.ANIM */.sy.ANIM,
  NodeContext/* NodeContext.AUDIO */.sy.AUDIO,
  NodeContext/* NodeContext.COP */.sy.COP,
  NodeContext/* NodeContext.EVENT */.sy.EVENT,
  NodeContext/* NodeContext.MAT */.sy.MAT,
  NodeContext/* NodeContext.OBJ */.sy.OBJ,
  NodeContext/* NodeContext.POST */.sy.POST,
  NodeContext/* NodeContext.ROP */.sy.ROP,
  NodeContext/* NodeContext.SOP */.sy.SOP
];
const AnimNetworkOnCreateHookRegisters = CONTEXTS.map((context) => {
  class AnimNetworkOnCreateRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
    context() {
      return context;
    }
    type() {
      return NodeContext/* NetworkNodeType.ANIM */.kX.ANIM;
    }
    onCreate(node) {
      animNetworkOnCreate(node);
    }
  }
  return AnimNetworkOnCreateRegister;
});

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Cop.ts
var Cop = __webpack_require__(12764);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/cop/_Base.ts



class CopOnCreateHookRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
  context() {
    return NodeContext/* NodeContext.COP */.sy.COP;
  }
  onCreate(node) {
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/cop/Builder.ts



function onCreateHook(node) {
  const globals = node.createNode("globals");
  const output = node.createNode("output");
  globals.uiData.setPosition(-200, 0);
  output.uiData.setPosition(200, 0);
}
class BuilderCopOnCreateHookRegister extends CopOnCreateHookRegister {
  type() {
    return Cop/* CopType.BUILDER */.y.BUILDER;
  }
  onCreate(node) {
    onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/cop/Builder2DArray.ts



function Builder2DArray_onCreateHook(node) {
  const globals = node.createNode("globals");
  const output = node.createNode("output");
  globals.uiData.setPosition(-200, 0);
  output.uiData.setPosition(200, 0);
}
class Builder2DArrayCopOnCreateHookRegister extends CopOnCreateHookRegister {
  type() {
    return Cop/* CopType.BUILDER_2D_ARRAY */.y.BUILDER_2D_ARRAY;
  }
  onCreate(node) {
    Builder2DArray_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/cop/CubeMapFromScene.ts



const COLOR_MULT = 1;
function CubeMapFromScene_onCreateHook(node) {
  const cubeFromScene1_nodes = {};
  function create_material1(parentNode) {
    var material1 = parentNode.createNode("material");
    material1.setName("material1");
    const material1_nodes = {};
    material1.uiData.setPosition(-50, 50);
    material1.p.material.set("../MAT/meshBasic1");
    material1.params.postCreateSpareParams();
    material1.params.runOnSceneLoadHooks();
    return { node: material1, children: material1_nodes };
  }
  function create_box2(parentNode) {
    var box2 = parentNode.createNode("box");
    box2.setName("box2");
    const box2_nodes = {};
    box2.uiData.setPosition(350, -600);
    box2.p.size.set(3);
    box2.p.sizes.set([1, 1, 0.1]);
    box2.params.postCreateSpareParams();
    box2.params.runOnSceneLoadHooks();
    return { node: box2, children: box2_nodes };
  }
  function create_merge1(parentNode) {
    var merge1 = parentNode.createNode("merge");
    merge1.setName("merge1");
    const merge1_nodes = {};
    merge1.uiData.setPosition(200, 500);
    merge1.params.postCreateSpareParams();
    merge1.params.runOnSceneLoadHooks();
    return { node: merge1, children: merge1_nodes };
  }
  function create_material2(parentNode) {
    var material2 = parentNode.createNode("material");
    material2.setName("material2");
    const material2_nodes = {};
    material2.uiData.setPosition(350, 50);
    material2.p.material.set("../MAT/meshBasic2");
    material2.params.postCreateSpareParams();
    material2.params.runOnSceneLoadHooks();
    return { node: material2, children: material2_nodes };
  }
  function create_polarTransform2(parentNode) {
    var polarTransform2 = parentNode.createNode("polarTransform");
    polarTransform2.setName("polarTransform2");
    const polarTransform2_nodes = {};
    polarTransform2.uiData.setPosition(350, -100);
    polarTransform2.p.longitude.set(-36);
    polarTransform2.p.depth.set(7.9);
    polarTransform2.params.postCreateSpareParams();
    polarTransform2.params.runOnSceneLoadHooks();
    return { node: polarTransform2, children: polarTransform2_nodes };
  }
  function create_sphere1(parentNode) {
    var sphere1 = parentNode.createNode("sphere");
    sphere1.setName("sphere1");
    const sphere1_nodes = {};
    sphere1.uiData.setPosition(-50, -450);
    sphere1.p.radius.set(40);
    sphere1.params.postCreateSpareParams();
    sphere1.params.runOnSceneLoadHooks();
    return { node: sphere1, children: sphere1_nodes };
  }
  function create_OUT(parentNode) {
    var OUT = parentNode.createNode("null");
    OUT.setName("OUT");
    const OUT_nodes = {};
    OUT.uiData.setPosition(200, 650);
    OUT.flags.display.set(true);
    OUT.params.postCreateSpareParams();
    OUT.params.runOnSceneLoadHooks();
    return { node: OUT, children: OUT_nodes };
  }
  function create_color1(parentNode) {
    var color1 = parentNode.createNode("color");
    color1.setName("color1");
    const color1_nodes = {};
    color1.uiData.setPosition(-50, -300);
    color1.p.color.set([0.1803921568627451, 0.1803921568627451, 0.1803921568627451]);
    color1.params.postCreateSpareParams();
    color1.params.runOnSceneLoadHooks();
    return { node: color1, children: color1_nodes };
  }
  function create_color2(parentNode) {
    var color2 = parentNode.createNode("color");
    color2.setName("color2");
    const color2_nodes = {};
    color2.uiData.setPosition(350, -350);
    color2.p.color.set([1, 0, 0]);
    color2.params.postCreateSpareParams();
    color2.params.runOnSceneLoadHooks();
    return { node: color2, children: color2_nodes };
  }
  function create_GLOBAL_LIGHT(parentNode) {
    var GLOBAL_LIGHT = parentNode.createNode("null");
    GLOBAL_LIGHT.setName("GLOBAL_LIGHT");
    const GLOBAL_LIGHT_nodes = {};
    GLOBAL_LIGHT.uiData.setPosition(-50, 200);
    GLOBAL_LIGHT.params.postCreateSpareParams();
    GLOBAL_LIGHT.params.runOnSceneLoadHooks();
    return { node: GLOBAL_LIGHT, children: GLOBAL_LIGHT_nodes };
  }
  function create_KEY_LIGHT(parentNode) {
    var KEY_LIGHT = parentNode.createNode("null");
    KEY_LIGHT.setName("KEY_LIGHT");
    const KEY_LIGHT_nodes = {};
    KEY_LIGHT.uiData.setPosition(350, 200);
    KEY_LIGHT.params.postCreateSpareParams();
    KEY_LIGHT.params.runOnSceneLoadHooks();
    return { node: KEY_LIGHT, children: KEY_LIGHT_nodes };
  }
  function create_material3(parentNode) {
    var material3 = parentNode.createNode("material");
    material3.setName("material3");
    const material3_nodes = {};
    material3.uiData.setPosition(650, 50);
    material3.p.material.set("../MAT/meshBasic2");
    material3.params.postCreateSpareParams();
    material3.params.runOnSceneLoadHooks();
    return { node: material3, children: material3_nodes };
  }
  function create_polarTransform3(parentNode) {
    var polarTransform3 = parentNode.createNode("polarTransform");
    polarTransform3.setName("polarTransform3");
    const polarTransform3_nodes = {};
    polarTransform3.uiData.setPosition(650, -100);
    polarTransform3.p.longitude.set(165.6);
    polarTransform3.p.depth.set(7.9);
    polarTransform3.params.postCreateSpareParams();
    polarTransform3.params.runOnSceneLoadHooks();
    return { node: polarTransform3, children: polarTransform3_nodes };
  }
  function create_FILL_LIGHT(parentNode) {
    var FILL_LIGHT = parentNode.createNode("null");
    FILL_LIGHT.setName("FILL_LIGHT");
    const FILL_LIGHT_nodes = {};
    FILL_LIGHT.uiData.setPosition(650, 200);
    FILL_LIGHT.params.postCreateSpareParams();
    FILL_LIGHT.params.runOnSceneLoadHooks();
    return { node: FILL_LIGHT, children: FILL_LIGHT_nodes };
  }
  function create_material4(parentNode) {
    var material4 = parentNode.createNode("material");
    material4.setName("material4");
    const material4_nodes = {};
    material4.uiData.setPosition(950, 50);
    material4.p.material.set("../MAT/meshBasic2");
    material4.params.postCreateSpareParams();
    material4.params.runOnSceneLoadHooks();
    return { node: material4, children: material4_nodes };
  }
  function create_polarTransform4(parentNode) {
    var polarTransform4 = parentNode.createNode("polarTransform");
    polarTransform4.setName("polarTransform4");
    const polarTransform4_nodes = {};
    polarTransform4.uiData.setPosition(950, -100);
    polarTransform4.p.longitude.set(-266.4);
    polarTransform4.p.depth.set(7.9);
    polarTransform4.params.postCreateSpareParams();
    polarTransform4.params.runOnSceneLoadHooks();
    return { node: polarTransform4, children: polarTransform4_nodes };
  }
  function create_BACK_LIGHT(parentNode) {
    var BACK_LIGHT = parentNode.createNode("null");
    BACK_LIGHT.setName("BACK_LIGHT");
    const BACK_LIGHT_nodes = {};
    BACK_LIGHT.uiData.setPosition(950, 200);
    BACK_LIGHT.params.postCreateSpareParams();
    BACK_LIGHT.params.runOnSceneLoadHooks();
    return { node: BACK_LIGHT, children: BACK_LIGHT_nodes };
  }
  function create_MAT(parentNode) {
    var MAT = parentNode.createNode("materialsNetwork");
    MAT.setName("MAT");
    const MAT_nodes = {};
    function create_meshBasic1(MAT2) {
      var meshBasic1 = MAT2.createNode("meshBasic");
      meshBasic1.setName("meshBasic1");
      const meshBasic1_nodes = {};
      meshBasic1.uiData.setPosition(0, -150);
      meshBasic1.p.useVertexColors.set(true);
      meshBasic1.p.doubleSided.set(true);
      meshBasic1.params.postCreateSpareParams();
      meshBasic1.params.runOnSceneLoadHooks();
      return { node: meshBasic1, children: meshBasic1_nodes };
    }
    function create_meshBasic2(MAT2) {
      var meshBasic2 = MAT2.createNode("meshBasic");
      meshBasic2.setName("meshBasic2");
      const meshBasic2_nodes = {};
      meshBasic2.uiData.setPosition(0, 50);
      meshBasic2.p.useVertexColors.set(true);
      meshBasic2.p.doubleSided.set(true);
      meshBasic2.params.postCreateSpareParams();
      meshBasic2.params.runOnSceneLoadHooks();
      return { node: meshBasic2, children: meshBasic2_nodes };
    }
    MAT_nodes["meshBasic1"] = create_meshBasic1(MAT);
    MAT_nodes["meshBasic2"] = create_meshBasic2(MAT);
    if (MAT.childrenController) {
      MAT.childrenController.selection.set([MAT_nodes["meshBasic2"].node]);
    }
    MAT.uiData.setPosition(-350, 50);
    MAT.params.postCreateSpareParams();
    MAT.params.runOnSceneLoadHooks();
    return { node: MAT, children: MAT_nodes };
  }
  function create_box3(parentNode) {
    var box3 = parentNode.createNode("box");
    box3.setName("box3");
    const box3_nodes = {};
    box3.uiData.setPosition(650, -600);
    box3.p.size.set(3);
    box3.p.sizes.set([1, 1, 0.1]);
    box3.params.postCreateSpareParams();
    box3.params.runOnSceneLoadHooks();
    return { node: box3, children: box3_nodes };
  }
  function create_box4(parentNode) {
    var box4 = parentNode.createNode("box");
    box4.setName("box4");
    const box4_nodes = {};
    box4.uiData.setPosition(950, -600);
    box4.p.size.set(3);
    box4.p.sizes.set([1, 1, 0.1]);
    box4.params.postCreateSpareParams();
    box4.params.runOnSceneLoadHooks();
    return { node: box4, children: box4_nodes };
  }
  function create_transform1(parentNode) {
    var transform1 = parentNode.createNode("transform");
    transform1.setName("transform1");
    const transform1_nodes = {};
    transform1.uiData.setPosition(350, -450);
    transform1.p.scale.set(2);
    transform1.params.postCreateSpareParams();
    transform1.params.runOnSceneLoadHooks();
    return { node: transform1, children: transform1_nodes };
  }
  function create_attribAddMult1(parentNode) {
    var attribAddMult1 = parentNode.createNode("attribAddMult");
    attribAddMult1.setName("attribAddMult1");
    const attribAddMult1_nodes = {};
    attribAddMult1.uiData.setPosition(350, -250);
    attribAddMult1.p.name.set("color");
    attribAddMult1.p.mult.set(COLOR_MULT);
    attribAddMult1.params.postCreateSpareParams();
    attribAddMult1.params.runOnSceneLoadHooks();
    return { node: attribAddMult1, children: attribAddMult1_nodes };
  }
  function create_color3(parentNode) {
    var color3 = parentNode.createNode("color");
    color3.setName("color3");
    const color3_nodes = {};
    color3.uiData.setPosition(650, -350);
    color3.p.color.set([0, 1, 0]);
    color3.params.postCreateSpareParams();
    color3.params.runOnSceneLoadHooks();
    return { node: color3, children: color3_nodes };
  }
  function create_transform2(parentNode) {
    var transform2 = parentNode.createNode("transform");
    transform2.setName("transform2");
    const transform2_nodes = {};
    transform2.uiData.setPosition(650, -450);
    transform2.p.scale.set(5);
    transform2.params.postCreateSpareParams();
    transform2.params.runOnSceneLoadHooks();
    return { node: transform2, children: transform2_nodes };
  }
  function create_attribAddMult2(parentNode) {
    var attribAddMult2 = parentNode.createNode("attribAddMult");
    attribAddMult2.setName("attribAddMult2");
    const attribAddMult2_nodes = {};
    attribAddMult2.uiData.setPosition(650, -250);
    attribAddMult2.p.name.set("color");
    attribAddMult2.p.mult.set(4);
    attribAddMult2.params.postCreateSpareParams();
    attribAddMult2.params.runOnSceneLoadHooks();
    return { node: attribAddMult2, children: attribAddMult2_nodes };
  }
  function create_color4(parentNode) {
    var color4 = parentNode.createNode("color");
    color4.setName("color4");
    const color4_nodes = {};
    color4.uiData.setPosition(950, -350);
    color4.params.postCreateSpareParams();
    color4.params.runOnSceneLoadHooks();
    return { node: color4, children: color4_nodes };
  }
  function create_transform3(parentNode) {
    var transform3 = parentNode.createNode("transform");
    transform3.setName("transform3");
    const transform3_nodes = {};
    transform3.uiData.setPosition(950, -450);
    transform3.p.scale.set(3);
    transform3.params.postCreateSpareParams();
    transform3.params.runOnSceneLoadHooks();
    return { node: transform3, children: transform3_nodes };
  }
  function create_attribAddMult3(parentNode) {
    var attribAddMult3 = parentNode.createNode("attribAddMult");
    attribAddMult3.setName("attribAddMult3");
    const attribAddMult3_nodes = {};
    attribAddMult3.uiData.setPosition(950, -250);
    attribAddMult3.p.name.set("color");
    attribAddMult3.p.mult.set(COLOR_MULT);
    attribAddMult3.params.postCreateSpareParams();
    attribAddMult3.params.runOnSceneLoadHooks();
    return { node: attribAddMult3, children: attribAddMult3_nodes };
  }
  cubeFromScene1_nodes["material1"] = create_material1(node);
  cubeFromScene1_nodes["box2"] = create_box2(node);
  cubeFromScene1_nodes["merge1"] = create_merge1(node);
  cubeFromScene1_nodes["material2"] = create_material2(node);
  cubeFromScene1_nodes["polarTransform2"] = create_polarTransform2(node);
  cubeFromScene1_nodes["sphere1"] = create_sphere1(node);
  cubeFromScene1_nodes["OUT"] = create_OUT(node);
  cubeFromScene1_nodes["color1"] = create_color1(node);
  cubeFromScene1_nodes["color2"] = create_color2(node);
  cubeFromScene1_nodes["GLOBAL_LIGHT"] = create_GLOBAL_LIGHT(node);
  cubeFromScene1_nodes["KEY_LIGHT"] = create_KEY_LIGHT(node);
  cubeFromScene1_nodes["material3"] = create_material3(node);
  cubeFromScene1_nodes["polarTransform3"] = create_polarTransform3(node);
  cubeFromScene1_nodes["FILL_LIGHT"] = create_FILL_LIGHT(node);
  cubeFromScene1_nodes["material4"] = create_material4(node);
  cubeFromScene1_nodes["polarTransform4"] = create_polarTransform4(node);
  cubeFromScene1_nodes["BACK_LIGHT"] = create_BACK_LIGHT(node);
  cubeFromScene1_nodes["MAT"] = create_MAT(node);
  cubeFromScene1_nodes["box3"] = create_box3(node);
  cubeFromScene1_nodes["box4"] = create_box4(node);
  cubeFromScene1_nodes["transform1"] = create_transform1(node);
  cubeFromScene1_nodes["attribAddMult1"] = create_attribAddMult1(node);
  cubeFromScene1_nodes["color3"] = create_color3(node);
  cubeFromScene1_nodes["transform2"] = create_transform2(node);
  cubeFromScene1_nodes["attribAddMult2"] = create_attribAddMult2(node);
  cubeFromScene1_nodes["color4"] = create_color4(node);
  cubeFromScene1_nodes["transform3"] = create_transform3(node);
  cubeFromScene1_nodes["attribAddMult3"] = create_attribAddMult3(node);
  cubeFromScene1_nodes["material1"].node.setInput(0, cubeFromScene1_nodes["color1"].node);
  cubeFromScene1_nodes["merge1"].node.setInput(0, cubeFromScene1_nodes["GLOBAL_LIGHT"].node);
  cubeFromScene1_nodes["merge1"].node.setInput(1, cubeFromScene1_nodes["KEY_LIGHT"].node);
  cubeFromScene1_nodes["merge1"].node.setInput(2, cubeFromScene1_nodes["FILL_LIGHT"].node);
  cubeFromScene1_nodes["merge1"].node.setInput(3, cubeFromScene1_nodes["BACK_LIGHT"].node);
  cubeFromScene1_nodes["material2"].node.setInput(0, cubeFromScene1_nodes["polarTransform2"].node);
  cubeFromScene1_nodes["polarTransform2"].node.setInput(0, cubeFromScene1_nodes["attribAddMult1"].node);
  cubeFromScene1_nodes["OUT"].node.setInput(0, cubeFromScene1_nodes["merge1"].node);
  cubeFromScene1_nodes["color1"].node.setInput(0, cubeFromScene1_nodes["sphere1"].node);
  cubeFromScene1_nodes["color2"].node.setInput(0, cubeFromScene1_nodes["transform1"].node);
  cubeFromScene1_nodes["GLOBAL_LIGHT"].node.setInput(0, cubeFromScene1_nodes["material1"].node);
  cubeFromScene1_nodes["KEY_LIGHT"].node.setInput(0, cubeFromScene1_nodes["material2"].node);
  cubeFromScene1_nodes["material3"].node.setInput(0, cubeFromScene1_nodes["polarTransform3"].node);
  cubeFromScene1_nodes["polarTransform3"].node.setInput(0, cubeFromScene1_nodes["attribAddMult2"].node);
  cubeFromScene1_nodes["FILL_LIGHT"].node.setInput(0, cubeFromScene1_nodes["material3"].node);
  cubeFromScene1_nodes["material4"].node.setInput(0, cubeFromScene1_nodes["polarTransform4"].node);
  cubeFromScene1_nodes["polarTransform4"].node.setInput(0, cubeFromScene1_nodes["attribAddMult3"].node);
  cubeFromScene1_nodes["BACK_LIGHT"].node.setInput(0, cubeFromScene1_nodes["material4"].node);
  cubeFromScene1_nodes["transform1"].node.setInput(0, cubeFromScene1_nodes["box2"].node);
  cubeFromScene1_nodes["attribAddMult1"].node.setInput(0, cubeFromScene1_nodes["color2"].node);
  cubeFromScene1_nodes["color3"].node.setInput(0, cubeFromScene1_nodes["transform2"].node);
  cubeFromScene1_nodes["transform2"].node.setInput(0, cubeFromScene1_nodes["box3"].node);
  cubeFromScene1_nodes["attribAddMult2"].node.setInput(0, cubeFromScene1_nodes["color3"].node);
  cubeFromScene1_nodes["color4"].node.setInput(0, cubeFromScene1_nodes["transform3"].node);
  cubeFromScene1_nodes["transform3"].node.setInput(0, cubeFromScene1_nodes["box4"].node);
  cubeFromScene1_nodes["attribAddMult3"].node.setInput(0, cubeFromScene1_nodes["color4"].node);
}
class CubeMapFromSceneCopOnCreateHookRegister extends CopOnCreateHookRegister {
  type() {
    return Cop/* CopType.CUBE_MAP_FROM_SCENE */.y.CUBE_MAP_FROM_SCENE;
  }
  onCreate(node) {
    CubeMapFromScene_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Gl.ts
var Gl = __webpack_require__(93218);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/_Base.ts



class GlOnCreateHookRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
  context() {
    return NodeContext/* NodeContext.GL */.sy.GL;
  }
  onCreate(node) {
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/Attribute.ts



function Attribute_onCreateHook(node) {
  node.p.name.set(node.name());
}
class AttributeGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.ATTRIBUTE */.P.ATTRIBUTE;
  }
  onCreate(node) {
    Attribute_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/ComputeNormals.ts
var ComputeNormals = __webpack_require__(49177);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/utils/io/connections/Gl.ts
var connections_Gl = __webpack_require__(63060);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/ComputeNormals.ts





const TEXTURE_PARAM_NAME = "textureAttribute";
const TEXTURE_SIZE_PARAM_NAME = "textureSize";
function computeNormalsGlOnCreate(node) {
  return new Promise((resolve) => {
    node.p.inputsCount.set(1);
    const subnetInput1 = node.createNode("subnetInput");
    const subnetOutput1 = node.createNode("subnetOutput");
    const texture1 = node.createNode("texture");
    const vec4ToVec3_1 = node.createNode("vec4ToVec3");
    texture1.p.paramName.set(TEXTURE_PARAM_NAME);
    subnetInput1.uiData.setPosition(-300, 0);
    texture1.uiData.setPosition(-100, 0);
    vec4ToVec3_1.uiData.setPosition(100, 0);
    subnetOutput1.uiData.setPosition(300, 0);
    subnetOutput1.setInput(ComputeNormals/* ComputeNormalsInput.P */.W.P, vec4ToVec3_1, 0);
    vec4ToVec3_1.setInput(0, texture1);
    texture1.setInput(0, subnetInput1, ComputeNormals/* ComputeNormalsInput.UV */.W.UV);
    const parentNode = node.parent();
    const _findTextureSizeParam = () => {
      const paramNodes = parentNode.nodesByType("param");
      if (!paramNodes) {
        return;
      }
      return paramNodes.filter((paramNode) => paramNode.glType() == connections_Gl/* GlConnectionPointType.VEC2 */.Dv.VEC2).filter((paramNode) => paramNode.name() == "textureSize")[0];
    };
    const _createTextureSizeParam = () => {
      const param = parentNode.createNode("param");
      param.p.name.set(TEXTURE_SIZE_PARAM_NAME);
      param.setGlType(connections_Gl/* GlConnectionPointType.VEC2 */.Dv.VEC2);
      param.setName("param_textureSize");
      param.uiData.setPosition(node.uiData.position().x - 100, node.uiData.position().y + 200);
      return param;
    };
    const paramTextureSize = _findTextureSizeParam() || _createTextureSizeParam();
    node.setInput(ComputeNormals/* ComputeNormalsInput.TEXTURE_SIZE */.W.TEXTURE_SIZE, paramTextureSize);
    const setTextureSizeParamExpression = () => {
      const textureNodeParam = parentNode.params.spare.find(
        (param) => param.name() == TEXTURE_PARAM_NAME
      );
      const textureSizeParam = parentNode.params.spare.find(
        (param) => param.name() == TEXTURE_SIZE_PARAM_NAME
      );
      if (!textureNodeParam) {
        return;
      }
      if (!textureSizeParam) {
        return;
      }
      const scene = node.scene();
      const geometryAttributeNode = scene.nodesController.nodesByType("geometryAttribute")[0];
      if (geometryAttributeNode) {
        textureNodeParam.setNode(geometryAttributeNode);
      }
      textureSizeParam.set([
        `copRes(chsop('${textureNodeParam.name()}')).x`,
        `copRes(chsop('${textureNodeParam.name()}')).y`
      ]);
      const returnValue = {
        subnetInput1,
        subnetOutput1,
        vec4ToVec3_1
      };
      resolve(returnValue);
    };
    setTimeout(setTextureSizeParamExpression, 100);
  });
}
class ComputeNormalsGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.COMPUTE_NORMALS */.P.COMPUTE_NORMALS;
  }
  onCreate(node) {
    computeNormalsGlOnCreate(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/ForLoop.ts



function ForLoop_onCreateHook(node) {
  node.p.inputsCount.set(1);
  const subnetInput1 = node.createNode("subnetInput");
  const subnetOutput1 = node.createNode("subnetOutput");
  subnetOutput1.setInput(0, subnetInput1, 4);
  subnetInput1.uiData.setPosition(-100, 0);
  subnetOutput1.uiData.setPosition(100, 0);
}
class ForLoopGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.FOR_LOOP */.P.FOR_LOOP;
  }
  onCreate(node) {
    ForLoop_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/IfThen.ts



function IfThen_onCreateHook(node) {
  node.p.inputsCount.set(1);
  const subnetInput1 = node.createNode("subnetInput");
  const subnetOutput1 = node.createNode("subnetOutput");
  subnetOutput1.setInput(0, subnetInput1, 0);
  subnetInput1.uiData.setPosition(-100, 0);
  subnetOutput1.uiData.setPosition(100, 0);
}
class IfThenGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.IF_THEN */.P.IF_THEN;
  }
  onCreate(node) {
    IfThen_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/Param.ts



function Param_onCreateHook(node) {
  node.p.name.set(node.name());
}
class ParamGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.PARAM */.P.PARAM;
  }
  onCreate(node) {
    Param_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/Ramp.ts



function Ramp_onCreateHook(node) {
  node.p.name.set(node.name());
}
class RampGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.RAMP */.P.RAMP;
  }
  onCreate(node) {
    Ramp_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/SDFGradient.ts



function SDFGradient_onCreateHook(node) {
  node.p.inputsCount.set(0);
  const subnetInput1 = node.createNode("subnetInput");
  const subnetOutput1 = node.createNode("subnetOutput");
  const SDFSphere1 = node.createNode("SDFSphere");
  subnetOutput1.setInput(0, SDFSphere1);
  SDFSphere1.setInput(0, subnetInput1);
  subnetInput1.uiData.setPosition(-200, 0);
  SDFSphere1.uiData.setPosition(0, 0);
  subnetOutput1.uiData.setPosition(200, 0);
}
class SDFGradientGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.SDF_GRADIENT */.P.SDF_GRADIENT;
  }
  onCreate(node) {
    SDFGradient_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/Subnet.ts



function Subnet_onCreateHook(node) {
  node.p.inputsCount.set(1);
  const subnetInput1 = node.createNode("subnetInput");
  const subnetOutput1 = node.createNode("subnetOutput");
  subnetOutput1.setInput(0, subnetInput1);
  subnetInput1.uiData.setPosition(-100, 0);
  subnetOutput1.uiData.setPosition(100, 0);
}
class SubnetGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return NodeContext/* NetworkNodeType.SUBNET */.kX.SUBNET;
  }
  onCreate(node) {
    Subnet_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/Texture.ts



function Texture_onCreateHook(node) {
  node.p.paramName.set(node.name());
}
class TextureGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.TEXTURE */.P.TEXTURE;
  }
  onCreate(node) {
    Texture_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/TextureDisplacement.ts



function TextureDisplacement_onCreateHook(node) {
  node.p.paramName.set(node.name());
}
class TextureDisplacementGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.TEXTURE_DISPLACEMENT */.P.TEXTURE_DISPLACEMENT;
  }
  onCreate(node) {
    TextureDisplacement_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/TextureSDF.ts




function TextureSDF_onCreateHook(node) {
  const textureUniformName = node.name();
  const boundMinParamName = `${node.name()}BoundMin`;
  const boundMaxParamName = `${node.name()}BoundMax`;
  node.p.paramName.set(textureUniformName);
  const parent = node.parent();
  if (!parent) {
    return;
  }
  const _createParam = (nodeName) => {
    const paramNode = parent.createNode("param");
    paramNode.setName(nodeName);
    return paramNode;
  };
  const boundMinParam = parent.nodesByType("param").find((n) => n.name() == boundMinParamName) || _createParam(boundMinParamName);
  const boundMaxParam = parent.nodesByType("param").find((n) => n.name() == boundMaxParamName) || _createParam(boundMaxParamName);
  [boundMinParam, boundMaxParam].forEach((paramNode) => {
    paramNode.setGlType(connections_Gl/* GlConnectionPointType.VEC3 */.Dv.VEC3);
  });
  boundMinParam.p.name.set(boundMinParamName);
  boundMaxParam.p.name.set(boundMaxParamName);
  node.setInput("boundMin", boundMinParam);
  node.setInput("boundMax", boundMaxParam);
  const texturePos = node.uiData.position();
  boundMinParam.uiData.setPosition(texturePos.x - 300, texturePos.y - 0);
  boundMaxParam.uiData.setPosition(texturePos.x - 300, texturePos.y + 200);
}
class TextureSDFGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.TEXTURE_SDF */.P.TEXTURE_SDF;
  }
  onCreate(node) {
    TextureSDF_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/VaryingRead.ts



function VaryingRead_onCreateHook(node) {
  node.p.name.set(node.name());
}
class VaryingReadGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.VARYING_READ */.P.VARYING_READ;
  }
  onCreate(node) {
    VaryingRead_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/gl/VaryingWrite.ts



function VaryingWrite_onCreateHook(node) {
  node.p.name.set(node.name());
}
class VaryingWriteGlOnCreateHookRegister extends GlOnCreateHookRegister {
  type() {
    return Gl/* GlType.VARYING_WRITE */.P.VARYING_WRITE;
  }
  onCreate(node) {
    VaryingWrite_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/utils/io/connections/Js.ts
var Js = __webpack_require__(38857);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnTick.ts
var OnTick = __webpack_require__(12936);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/js/Network.ts





function Network_onCreateHook(node) {
  const onTick = node.createNode("onTick");
  const setObjectPosition = node.createNode("setObjectPosition");
  const floatToVec3 = node.createNode("floatToVec3");
  const sin = node.createNode("sin");
  setObjectPosition.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
  setObjectPosition.setInput("position", floatToVec3);
  sin.setInput(0, onTick, OnTick/* OnTickJsNodeOuput.TIME */.x.TIME);
  floatToVec3.setInput("y", sin);
  onTick.uiData.setPosition(-100, 0);
  setObjectPosition.uiData.setPosition(400, 0);
  floatToVec3.uiData.setPosition(200, 100);
  sin.uiData.setPosition(100, 100);
}
const Network_CONTEXTS = [
  NodeContext/* NodeContext.ANIM */.sy.ANIM,
  NodeContext/* NodeContext.AUDIO */.sy.AUDIO,
  NodeContext/* NodeContext.COP */.sy.COP,
  NodeContext/* NodeContext.EVENT */.sy.EVENT,
  NodeContext/* NodeContext.MAT */.sy.MAT,
  NodeContext/* NodeContext.OBJ */.sy.OBJ,
  NodeContext/* NodeContext.POST */.sy.POST,
  NodeContext/* NodeContext.ROP */.sy.ROP,
  NodeContext/* NodeContext.SOP */.sy.SOP
];
const ActorNetworkOnCreateHookRegisters = Network_CONTEXTS.map((context) => {
  class ActorNetworkOnCreateRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
    context() {
      return context;
    }
    type() {
      return NodeContext/* NetworkNodeType.ACTOR */.kX.ACTOR;
    }
    onCreate(node) {
      Network_onCreateHook(node);
    }
  }
  return ActorNetworkOnCreateRegister;
});

// EXTERNAL MODULE: ../src/editor/core/hooks/onCreate/js/AnimationMixer.ts
var AnimationMixer = __webpack_require__(4770);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Js.ts
var types_Js = __webpack_require__(16718);
// EXTERNAL MODULE: ../src/editor/core/hooks/onCreate/js/_Base.ts
var _Base = __webpack_require__(76485);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/js/ForLoop.ts



function js_ForLoop_onCreateHook(node) {
  node.p.inputsCount.set(1);
  const subnetInput1 = node.createNode("subnetInput");
  const subnetOutput1 = node.createNode("subnetOutput");
  subnetOutput1.setInput(0, subnetInput1, 4);
  subnetInput1.uiData.setPosition(-100, 0);
  subnetOutput1.uiData.setPosition(100, 0);
}
class ForLoopJsOnCreateHookRegister extends _Base/* JsOnCreateHookRegister */.a {
  type() {
    return types_Js/* JsType.FOR_LOOP */.K.FOR_LOOP;
  }
  onCreate(node) {
    js_ForLoop_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/js/GetObjectAttribute.ts



function GetObjectAttribute_onCreateHook(node) {
  var _a;
  (_a = node.params.get("attribName")) == null ? void 0 : _a.set(node.name());
}
class GetObjectAttributeJsOnCreateHookRegister extends _Base/* JsOnCreateHookRegister */.a {
  type() {
    return types_Js/* JsType.GET_OBJECT_ATTRIBUTE */.K.GET_OBJECT_ATTRIBUTE;
  }
  onCreate(node) {
    GetObjectAttribute_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/js/GetObjectUserData.ts



function GetObjectUserData_onCreateHook(node) {
  node.p.name.set(node.name());
}
class GetObjectUserDataJsOnCreateHookRegister extends _Base/* JsOnCreateHookRegister */.a {
  type() {
    return types_Js/* JsType.GET_OBJECT_USER_DATA */.K.GET_OBJECT_USER_DATA;
  }
  onCreate(node) {
    GetObjectUserData_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/js/OnObjectAttributeUpdate.ts



function OnObjectAttributeUpdate_onCreateHook(node) {
}
class OnObjectAttributeUpdateJsOnCreateHookRegister extends _Base/* JsOnCreateHookRegister */.a {
  type() {
    return types_Js/* JsType.ON_OBJECT_ATTRIBUTE_UPDATE */.K.ON_OBJECT_ATTRIBUTE_UPDATE;
  }
  onCreate(node) {
    OnObjectAttributeUpdate_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/js/Param.ts



function js_Param_onCreateHook(node) {
  node.p.name.set(node.name());
}
class ParamJsOnCreateHookRegister extends _Base/* JsOnCreateHookRegister */.a {
  type() {
    return types_Js/* JsType.PARAM */.K.PARAM;
  }
  onCreate(node) {
    js_Param_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/js/SetObjectAttribute.ts



function SetObjectAttribute_onCreateHook(node) {
}
class SetObjectAttributeJsOnCreateHookRegister extends _Base/* JsOnCreateHookRegister */.a {
  type() {
    return types_Js/* JsType.SET_OBJECT_ATTRIBUTE */.K.SET_OBJECT_ATTRIBUTE;
  }
  onCreate(node) {
    SetObjectAttribute_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/mat/_Base.ts



class MatOnCreateHookRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
  context() {
    return NodeContext/* NodeContext.MAT */.sy.MAT;
  }
  onCreate(node) {
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Mat.ts
var Mat = __webpack_require__(41545);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/mat/BaseBuilder.ts



function builderMatOnCreate(node) {
  const globals = node.createNode("globals");
  const output = node.createNode("output");
  globals.uiData.setPosition(-200, 0);
  output.uiData.setPosition(200, 0);
  return { globals, output };
}
const MAT_TYPES = [
  Mat/* MatType.LINE_BASIC_BUILDER */.M.LINE_BASIC_BUILDER,
  Mat/* MatType.MESH_BASIC_BUILDER */.M.MESH_BASIC_BUILDER,
  Mat/* MatType.MESH_LAMBERT_BUILDER */.M.MESH_LAMBERT_BUILDER,
  Mat/* MatType.MESH_PHONG_BUILDER */.M.MESH_PHONG_BUILDER,
  Mat/* MatType.MESH_STANDARD_BUILDER */.M.MESH_STANDARD_BUILDER,
  Mat/* MatType.MESH_PHYSICAL_BUILDER */.M.MESH_PHYSICAL_BUILDER,
  Mat/* MatType.MESH_TOON_BUILDER */.M.MESH_TOON_BUILDER,
  Mat/* MatType.MESH_DEPTH_BUILDER */.M.MESH_DEPTH_BUILDER,
  Mat/* MatType.MESH_DISTANCE_BUILDER */.M.MESH_DISTANCE_BUILDER,
  Mat/* MatType.POINTS_BUILDER */.M.POINTS_BUILDER,
  Mat/* MatType.VOLUME_BUILDER */.M.VOLUME_BUILDER
];
const BuilderMatOnCreateHookRegisters = MAT_TYPES.map((matType) => {
  class BuilderOnCreateRegister extends MatOnCreateHookRegister {
    type() {
      return matType;
    }
    onCreate(node) {
      builderMatOnCreate(node);
    }
  }
  return BuilderOnCreateRegister;
});

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/mat/RayMarchingBuilder.ts




function RayMarchingBuilder_onCreateHook(node) {
  const globals = node.createNode("globals");
  const output = node.createNode("output");
  const sdfContext = node.createNode("SDFContext");
  const sdfMaterial = node.createNode("SDFMaterial");
  const sdfSphere1 = node.createNode("SDFSphere");
  const sdfSphere2 = node.createNode("SDFSphere");
  const sdfUnion1 = node.createNode("SDFUnion");
  const floatToVec3_1 = node.createNode("floatToVec3");
  const cos1 = node.createNode("cos");
  const constant = node.createNode("constant");
  output.setInput(0, sdfContext);
  sdfContext.setInput(0, sdfUnion1);
  sdfUnion1.setInput(0, sdfSphere1);
  sdfUnion1.setInput(1, sdfSphere2);
  sdfContext.setInput(1, sdfMaterial);
  sdfSphere1.setInput("position", globals, "position");
  sdfSphere2.setInput("position", globals, "position");
  sdfSphere2.setInput("center", floatToVec3_1);
  floatToVec3_1.setInput("x", cos1);
  cos1.setInput(0, globals, "time");
  sdfMaterial.setInput("color", constant);
  constant.setGlType(connections_Gl/* GlConnectionPointType.VEC3 */.Dv.VEC3);
  constant.p.asColor.set(1);
  constant.p.color.set([1, 1, 1]);
  sdfSphere1.p.center.set([-0.1, 0, 0]);
  sdfSphere2.p.center.set([0.1, 0, 0]);
  sdfSphere1.p.radius.set(0.2);
  sdfSphere2.p.radius.set(0.2);
  sdfUnion1.params.get("smooth").set(1);
  sdfUnion1.params.get("smoothFactor").set(0.3);
  globals.uiData.setPosition(-900, -100);
  output.uiData.setPosition(300, 0);
  sdfContext.uiData.setPosition(100, 0);
  sdfSphere1.uiData.setPosition(-300, -200);
  sdfSphere2.uiData.setPosition(-300, 0);
  sdfUnion1.uiData.setPosition(-100, -100);
  sdfMaterial.uiData.setPosition(-100, 200);
  floatToVec3_1.uiData.setPosition(-500, 0);
  cos1.uiData.setPosition(-700, 0);
  sdfMaterial.uiData.setPosition(-100, 200);
  constant.uiData.setPosition(-300, 200);
}
class RayMarchingOnCreateRegister extends MatOnCreateHookRegister {
  type() {
    return Mat/* MatType.RAY_MARCHING_BUILDER */.M.RAY_MARCHING_BUILDER;
  }
  onCreate(node) {
    RayMarchingBuilder_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/_Base.ts



class ObjOnCreateHookRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
  context() {
    return NodeContext/* NodeContext.OBJ */.sy.OBJ;
  }
  onCreate(node) {
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Light.ts
var Light = __webpack_require__(18244);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/AreaLight.ts



function AreaLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class AreaLightObjOnCreateRegister extends ObjOnCreateHookRegister {
  type() {
    return Light/* LightType.AREA */.v.AREA;
  }
  onCreate(node) {
    AreaLight_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Obj.ts
var Obj = __webpack_require__(71501);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/AudioListener.ts



function AudioListener_onCreateHook(node) {
}
class AudioListenerObjOnCreateRegister extends ObjOnCreateHookRegister {
  type() {
    return Obj/* ObjType.AUDIO_LISTENER */.B.AUDIO_LISTENER;
  }
  onCreate(node) {
    AudioListener_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/DirectionalLight.ts



function DirectionalLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class DirectionalLightObjOnCreateRegister extends ObjOnCreateHookRegister {
  type() {
    return Light/* LightType.DIRECTIONAL */.v.DIRECTIONAL;
  }
  onCreate(node) {
    DirectionalLight_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/Geo.ts



function Geo_onCreateHook(node) {
  node.createNode("box");
}
class GeoObjOnCreateRegister extends ObjOnCreateHookRegister {
  type() {
    return Obj/* ObjType.GEO */.B.GEO;
  }
  onCreate(node) {
    Geo_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/PointLight.ts



function PointLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class PointLightObjOnCreateRegister extends ObjOnCreateHookRegister {
  type() {
    return Light/* LightType.POINT */.v.POINT;
  }
  onCreate(node) {
    PointLight_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/node_modules/three/build/three.module.js
var three_module = __webpack_require__(21410);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Walker.ts
var Walker = __webpack_require__(742);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/Poly.ts + 21 modules
var Poly = __webpack_require__(99934);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/PositionalAudio.ts

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





const pos = new three_module.Vector2();
function PositionalAudio_onCreateHook(node) {
  return __async(this, null, function* () {
    const envelope1 = node.createNode("envelope");
    const AMSynth1 = node.createNode("AMSynth");
    const playInstrument1 = node.createNode("playInstrument");
    const null1 = node.createNode("null");
    null1.setName("OUT");
    null1.setInput(0, playInstrument1);
    playInstrument1.setInput(0, AMSynth1);
    AMSynth1.setInput(0, envelope1);
    pos.copy(null1.uiData.position());
    pos.y -= 100;
    playInstrument1.uiData.setPosition(pos);
    pos.y -= 100;
    AMSynth1.uiData.setPosition(pos);
    pos.y -= 100;
    envelope1.uiData.setPosition(pos);
    node.p.audioNode.set(Walker/* CoreWalker.relativePath */.s$.relativePath(node, null1));
    let listener = node.root().audioController.audioListeners()[0];
    if (!listener) {
      listener = node.root().createNode("audioListener");
      const scene = node.scene();
      const cameraNodeTypes = Poly/* Poly.camerasRegister.registeredNodeTypes */.L.camerasRegister.registeredNodeTypes();
      const objCameraNodes = cameraNodeTypes.map((type) => scene.nodesByType(type)).flat();
      const mainCamera = yield scene.camerasController.mainCamera();
      const cameraNode = objCameraNodes.find((cameraNode2) => {
        return cameraNode2.object == mainCamera;
      }) || objCameraNodes[0];
      if (cameraNode) {
        listener.setInput(0, cameraNode);
        pos.copy(cameraNode.uiData.position());
        pos.y += 200;
        listener.uiData.setPosition(pos);
      }
    }
  });
}
class PositionalAudioObjOnCreateRegister extends ObjOnCreateHookRegister {
  type() {
    return Obj/* ObjType.POSITIONAL_AUDIO */.B.POSITIONAL_AUDIO;
  }
  onCreate(node) {
    PositionalAudio_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/obj/SpotLight.ts



function SpotLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class SpotLightObjOnCreateRegister extends ObjOnCreateHookRegister {
  type() {
    return Light/* LightType.SPOT */.v.SPOT;
  }
  onCreate(node) {
    SpotLight_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/post/_Base.ts



class PostOnCreateHookRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
  context() {
    return NodeContext/* NodeContext.POST */.sy.POST;
  }
  onCreate(node) {
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Post.ts
var Post = __webpack_require__(4138);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/post/Builder.ts



function Builder_onCreateHook(node) {
  const globals = node.createNode("globals");
  const output = node.createNode("output");
  globals.uiData.setPosition(-200, 0);
  output.uiData.setPosition(200, 0);
}
class BuilderPostOnCreateRegister extends PostOnCreateHookRegister {
  type() {
    return Post/* PostType.BUILDER */.h.BUILDER;
  }
  onCreate(node) {
    Builder_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/loader/AssetsUtils.ts
var AssetsUtils = __webpack_require__(29248);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/post/Texture.ts




const COP_NAME = "COP";
const IMAGE_COP_NAME = "image_POST_TEXTURE";
function post_Texture_onCreateHook(node) {
  const parentNode = node.parent();
  function createCopNetwork(parentNode2) {
    const COP2 = parentNode2.createNode("copNetwork");
    COP2.setName(COP_NAME);
    const nodePos = node.uiData.position();
    COP2.uiData.setPosition(nodePos.x - 200, nodePos.y);
    return COP2;
  }
  const COP = parentNode.nodesByType("copNetwork")[0] || createCopNetwork(parentNode);
  function createImage(COP2) {
    const imageNode2 = COP2.children()[0] || COP2.createNode("image");
    imageNode2.p.url.set(`${AssetsUtils/* ASSETS_ROOT */.V}/textures/scratches.jpg`);
    return imageNode2;
  }
  const imageNode = COP.node(IMAGE_COP_NAME) || createImage(COP);
  node.p.texture.setNode(imageNode, { relative: true });
}
class TexturePostOnCreateRegister extends PostOnCreateHookRegister {
  type() {
    return Post/* PostType.TEXTURE */.h.TEXTURE;
  }
  onCreate(node) {
    post_Texture_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/core/hooks/onCreate/sop/_Base.ts



class SopOnCreateHookRegister extends BaseOnCreateHookRegister/* BaseOnCreateHookRegister */.r {
  context() {
    return NodeContext/* NodeContext.SOP */.sy.SOP;
  }
  onCreate(node) {
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Sop.ts
var Sop = __webpack_require__(58986);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/Actor.ts





function Actor_onCreateHook(node) {
  const onTick = node.createNode("onTick");
  const setObjectPosition = node.createNode("setObjectPosition");
  const floatToVec3 = node.createNode("floatToVec3");
  const sin = node.createNode("sin");
  setObjectPosition.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
  setObjectPosition.setInput("position", floatToVec3);
  sin.setInput(0, onTick, OnTick/* OnTickJsNodeOuput.TIME */.x.TIME);
  floatToVec3.setInput("y", sin);
  onTick.uiData.setPosition(-100, 0);
  setObjectPosition.uiData.setPosition(400, 0);
  floatToVec3.uiData.setPosition(200, 100);
  sin.uiData.setPosition(100, 100);
}
class ActorSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.ACTOR */.aB.ACTOR;
  }
  onCreate(node) {
    Actor_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/ActorInstance.ts




function ActorInstance_onCreateHook(node) {
  const onTick = node.createNode("onTick");
  const setInstancePosition = node.createNode("setInstancePosition");
  const getInstanceProperty = node.createNode("getInstanceProperty");
  const add1 = node.createNode("add");
  setInstancePosition.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
  setInstancePosition.setInput("position", add1);
  add1.setInput(0, getInstanceProperty, "instancePosition");
  add1.params.get("add1").set([0, 0.01, 0]);
  onTick.uiData.setPosition(-100, 0);
  setInstancePosition.uiData.setPosition(400, 0);
  add1.uiData.setPosition(200, 100);
  getInstanceProperty.uiData.setPosition(0, 100);
}
class ActorInstanceSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.ACTOR_INSTANCE */.aB.ACTOR_INSTANCE;
  }
  onCreate(node) {
    ActorInstance_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/ActorPoint.ts




function ActorPoint_onCreateHook(node) {
  const onTick = node.createNode("onTick");
  const setPointPosition = node.createNode("setPointPosition");
  const getPointProperty = node.createNode("getPointProperty");
  const add1 = node.createNode("add");
  setPointPosition.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
  setPointPosition.setInput("position", add1);
  add1.setInput(0, getPointProperty, "position");
  add1.params.get("add1").set([0, 0.01, 0]);
  onTick.uiData.setPosition(-100, 0);
  setPointPosition.uiData.setPosition(400, 0);
  add1.uiData.setPosition(200, 100);
  getPointProperty.uiData.setPosition(0, 100);
}
class ActorPointSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.ACTOR_POINT */.aB.ACTOR_POINT;
  }
  onCreate(node) {
    ActorPoint_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/AreaLight.ts



function sop_AreaLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class AreaLightSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Light/* LightType.AREA */.v.AREA;
  }
  onCreate(node) {
    sop_AreaLight_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/CADGroup.ts



function CADGroup_onCreateHook(node) {
  node.p.name.set(node.name());
}
class CADGroupSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.CAD_GROUP */.aB.CAD_GROUP;
  }
  onCreate(node) {
    CADGroup_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/CameraControls.ts



function CameraControls_onCreateHook(node) {
  const controls = node.createNode(NodeContext/* CameraControlsNodeType.ORBIT */.MN.ORBIT);
  node.p.node.setNode(controls, { relative: true });
}
class CameraControlsSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return NodeContext/* CameraSopNodeType.CONTROLS */.$4.CONTROLS;
  }
  onCreate(node) {
    CameraControls_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Rop.ts
var Rop = __webpack_require__(58273);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/CameraCSSRenderer.ts




function CameraCSSRenderer_onCreateHook(node) {
  const CSS2DRenderer = node.createNode(Rop/* RopType.CSS2D */.X.CSS2D);
  node.p.node.setNode(CSS2DRenderer, { relative: true });
}
class CameraCSSRendererSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return NodeContext/* CameraSopNodeType.CSS_RENDERER */.$4.CSS_RENDERER;
  }
  onCreate(node) {
    CameraCSSRenderer_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/CameraRenderer.ts




function CameraRenderer_onCreateHook(node) {
  const webglRenderer = node.createNode(Rop/* RopType.WEBGL */.X.WEBGL);
  node.p.node.setNode(webglRenderer, { relative: true });
  return { webglRenderer };
}
class CameraRendererSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return NodeContext/* CameraSopNodeType.RENDERER */.$4.RENDERER;
  }
  onCreate(node) {
    CameraRenderer_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/CameraPostProcess.ts





function CameraPostProcess_onCreateHook(node) {
  const null1 = node.createNode("null");
  const bloom1 = node.createNode("bloom");
  const toneMapping1 = node.createNode("toneMapping");
  toneMapping1.setInput(0, bloom1);
  null1.setInput(0, toneMapping1);
  null1.setName("OUT");
  bloom1.uiData.translate(new three_module.Vector2(0, -200));
  null1.uiData.translate(new three_module.Vector2(0, 200));
  null1.flags.display.set(true);
  node.p.useOtherNode.set(false);
  node.p.node.set("");
  node.setTextureType(three_module.HalfFloatType);
  const parent = node.parent();
  if (!parent) {
    return;
  }
  const cameraRenderer = parent.createNode("cameraRenderer");
  const { webglRenderer } = CameraRenderer_onCreateHook(cameraRenderer);
  webglRenderer.setToneMapping(three_module.NoToneMapping);
  node.setInput(0, cameraRenderer);
  const pos = new three_module.Vector2();
  pos.copy(node.uiData.position());
  pos.y -= 200;
  cameraRenderer.uiData.setPosition(pos);
}
class CameraPostProcessSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return NodeContext/* CameraSopNodeType.POST_PROCESS */.$4.POST_PROCESS;
  }
  onCreate(node) {
    CameraPostProcess_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/ClothSolverStepSimulation.ts
var ClothSolverStepSimulation = __webpack_require__(43284);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/String.ts
var core_String = __webpack_require__(40065);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/core/hooks/onCreate/sop/ClothSolver.ts






const ACTOR_NODE_BASE_NAME = "actor_clothSolver";
const MAT_NAME = "MAT";
const MESH_PHYSICAL_MAT_NAME = "meshPhysical_CLOTH";
function _onCreatePrepareActorNode(node) {
  function createActorNodeChildren(actorNode) {
    const onScenePause = actorNode.createNode("onScenePause");
    const onTick = actorNode.createNode("onTick");
    const clothSolverReset1 = actorNode.createNode("clothSolverReset");
    const softBodySolverStepSimulation1 = actorNode.createNode("clothSolverStepSimulation");
    const clothSolverUpdateMaterial1 = actorNode.createNode("clothSolverUpdateMaterial");
    clothSolverReset1.setInput(0, onScenePause);
    softBodySolverStepSimulation1.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
    const sharedInputs = [
      Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER,
      ClothSolverStepSimulation/* ClothSolverStepSimulationOutput.TEXTURE_SIZE */.W.TEXTURE_SIZE,
      ClothSolverStepSimulation/* ClothSolverStepSimulationOutput.TEXTURE_POSITION0 */.W.TEXTURE_POSITION0,
      ClothSolverStepSimulation/* ClothSolverStepSimulationOutput.TEXTURE_POSITION1 */.W.TEXTURE_POSITION1,
      ClothSolverStepSimulation/* ClothSolverStepSimulationOutput.TEXTURE_NORMAL */.W.TEXTURE_NORMAL
    ];
    for (const sharedInput of sharedInputs) {
      clothSolverUpdateMaterial1.setInput(sharedInput, softBodySolverStepSimulation1, sharedInput);
    }
    onScenePause.uiData.setPosition(-100, -100);
    clothSolverReset1.uiData.setPosition(100, -100);
    onTick.uiData.setPosition(-100, 100);
    softBodySolverStepSimulation1.uiData.setPosition(100, 100);
    clothSolverUpdateMaterial1.uiData.setPosition(300, 100);
  }
  function createActorNode(geoNode2) {
    const actor12 = geoNode2.createNode("actor");
    actor12.setName(`${ACTOR_NODE_BASE_NAME}${(0,core_String/* stringTailDigits */.KX)(node.name())}`);
    const nodePos = node.uiData.position();
    actor12.uiData.setPosition(nodePos.x, nodePos.y - 200);
    createActorNodeChildren(actor12);
    return actor12;
  }
  const geoNode = node.parent();
  const actor1 = (
    /*geoNode.nodesByType('actor')[0] ||*/
    createActorNode(geoNode)
  );
  return { actor1 };
}
function _createGlNodes(node) {
  const current_global = node.nodesByType("globals")[0];
  const current_output = node.nodesByType("output")[0];
  if (current_global || current_output) {
    return;
  }
  const globals1 = node.createNode("globals");
  const output1 = node.createNode("output");
  output1.setInput(0, globals1);
  globals1.uiData.setPosition(-200, 0);
  output1.uiData.setPosition(200, 0);
  return { globals1, output1 };
}
function _createMat(node) {
  const nodePos = node.uiData.position();
  const geoNode = node.parent();
  const materialNode = geoNode.createNode("material");
  function createMatNetwork(geoNode2) {
    const MAT2 = geoNode2.createNode("materialsNetwork");
    MAT2.setName(MAT_NAME);
    const nodePos2 = node.uiData.position();
    MAT2.uiData.setPosition(nodePos2.x - 200, nodePos2.y);
    return MAT2;
  }
  const MAT = geoNode.nodesByType("materialsNetwork")[0] || createMatNetwork(geoNode);
  function createMeshMaterial(MAT2) {
    const existingMatNodes = MAT2.children().filter(
      (node2) => node2.name() == MESH_PHYSICAL_MAT_NAME
    );
    function _createMatBuilder() {
      const matBuilder = MAT2.createNode("meshPhysicalBuilder");
      const globals = matBuilder.createNode("globals");
      const output1 = matBuilder.createNode("output");
      const clothSolverPosition1 = matBuilder.createNode("clothSolverPosition");
      const attribute1 = matBuilder.createNode("attribute");
      output1.setInput(0, clothSolverPosition1);
      clothSolverPosition1.setInput(0, attribute1);
      attribute1.setAttribSize(1);
      attribute1.p.name.set("id");
      globals.uiData.setPosition(-400, 0);
      output1.uiData.setPosition(400, 0);
      clothSolverPosition1.uiData.setPosition(100, 0);
      attribute1.uiData.setPosition(-100, 0);
      matBuilder.setName(MESH_PHYSICAL_MAT_NAME);
      return matBuilder;
    }
    const materialNode2 = existingMatNodes[0] || _createMatBuilder();
    return materialNode2;
  }
  const matNode = MAT.node(MESH_PHYSICAL_MAT_NAME) || createMeshMaterial(MAT);
  materialNode.p.material.setNode(matNode, { relative: true });
  materialNode.setInput(0, node);
  materialNode.uiData.setPosition(nodePos.x, nodePos.y + 200);
  return { materialNode };
}
function ClothSolver_onCreateHook(node) {
  const geoNode = node.parent();
  const nodePos = node.uiData.position();
  const clothPrepare1 = geoNode.createNode("clothPrepare");
  clothPrepare1.uiData.setPosition(nodePos.x, nodePos.y - 400);
  const glNodes = _createGlNodes(node);
  const matNodes = _createMat(node);
  const { actor1 } = _onCreatePrepareActorNode(node);
  actor1.setInput(0, clothPrepare1);
  node.setInput(0, actor1);
  return { actor1, clothPrepare1, matNodes, glNodes };
}
class ClothSolverSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.CLOTH_SOLVER */.aB.CLOTH_SOLVER;
  }
  onCreate(node) {
    return ClothSolver_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/Decompose.ts



function Decompose_onCreateHook(node) {
  const subnetInput1 = node.createNode("subnetInput");
  const subnetOutput1 = node.createNode("subnetOutput");
  subnetOutput1.setInput(0, subnetInput1);
  subnetInput1.uiData.setPosition(0, -100);
  subnetOutput1.uiData.setPosition(0, 100);
}
class DecomposeSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return NodeContext/* NetworkNodeType.DECOMPOSE */.kX.DECOMPOSE;
  }
  onCreate(node) {
    Decompose_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/DirectionalLight.ts



function sop_DirectionalLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class DirectionalLightSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Light/* LightType.DIRECTIONAL */.v.DIRECTIONAL;
  }
  onCreate(node) {
    sop_DirectionalLight_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/code/assemblers/entityBuilder/EntityBuilderAssemblerCommon.ts
var EntityBuilderAssemblerCommon = __webpack_require__(13082);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/EntityBuilder.ts





function EntityBuilder_onCreateHook(node) {
  const globals = node.createNode("globals");
  const attribute1 = node.createNode("attribute");
  attribute1.setInput(0, globals, EntityBuilderAssemblerCommon/* EntityVariable.INDEX */.T.INDEX);
  attribute1.setJsType(Js/* JsConnectionPointType.INT */.zF.INT);
  attribute1.p.name.set("index");
  attribute1.p.exportWhenConnected.set(1);
  globals.uiData.setPosition(-400, 0);
  attribute1.uiData.setPosition(0, 0);
}
class EntityBuilderSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.ENTITY_BUILDER */.aB.ENTITY_BUILDER;
  }
  onCreate(node) {
    EntityBuilder_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/Instance.ts



const Instance_MAT_NAME = "MAT";
const MESH_LAMBERT_MAT_NAME = "meshLambertBuilder_INSTANCES";
function Instance_onCreateHook(node) {
  const geoNode = node.parent();
  function createMatNetwork(geoNode2) {
    const MAT2 = geoNode2.createNode("materialsNetwork");
    MAT2.setName(Instance_MAT_NAME);
    const nodePos = node.uiData.position();
    MAT2.uiData.setPosition(nodePos.x - 200, nodePos.y);
    return MAT2;
  }
  const MAT = geoNode.nodesByType("materialsNetwork")[0] || createMatNetwork(geoNode);
  function createMeshMaterial(MAT2) {
    const mat_node = MAT2.createNode("meshLambertBuilder");
    mat_node.setName(MESH_LAMBERT_MAT_NAME);
    const instance_transform1 = mat_node.createNode("instanceTransform");
    const output1 = mat_node.createNode("output");
    const globals = mat_node.createNode("globals");
    globals.uiData.setPosition(-200, 0);
    output1.uiData.setPosition(200, 0);
    output1.setInput("position", instance_transform1, "position");
    output1.setInput("normal", instance_transform1, "normal");
    return mat_node;
  }
  const matNode = MAT.node(MESH_LAMBERT_MAT_NAME) || createMeshMaterial(MAT);
  node.p.material.setNode(matNode, { relative: true });
}
class InstanceSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.INSTANCE */.aB.INSTANCE;
  }
  onCreate(node) {
    Instance_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/code/assemblers/instanceBuilder/InstanceBuilderAssemblerCommon.ts
var InstanceBuilderAssemblerCommon = __webpack_require__(28268);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/InstanceBuilder.ts




function InstanceBuilder_onCreateHook(node) {
  const globals = node.createNode("globals");
  const output1 = node.createNode("output");
  const add1 = node.createNode("add");
  add1.setInput(0, globals, InstanceBuilderAssemblerCommon/* InstanceVariable.INSTANCE_POSITION */.o.INSTANCE_POSITION);
  output1.setInput(InstanceBuilderAssemblerCommon/* InstanceVariable.INSTANCE_POSITION */.o.INSTANCE_POSITION, add1);
  globals.uiData.setPosition(-400, 0);
  output1.uiData.setPosition(0, 0);
  add1.uiData.setPosition(-200, 0);
}
class InstanceBuilderSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.INSTANCE_BUILDER */.aB.INSTANCE_BUILDER;
  }
  onCreate(node) {
    InstanceBuilder_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/Material.ts



const Material_MAT_NAME = "MAT";
const MESH_STANDARD_MAT_NAME = "meshStandard1";
function Material_onCreateHook(node) {
  const geoNode = node.parent();
  function createMatNetwork(geoNode2) {
    const MAT2 = geoNode2.createNode("materialsNetwork");
    MAT2.setName(Material_MAT_NAME);
    const nodePos = node.uiData.position();
    MAT2.uiData.setPosition(nodePos.x - 200, nodePos.y);
    return MAT2;
  }
  const MAT = geoNode.nodesByType("materialsNetwork")[0] || createMatNetwork(geoNode);
  function createMeshMaterial(MAT2) {
    const existingMatNodes = MAT2.children().filter((node2) => node2.material != null);
    const materialNode = existingMatNodes[0] || MAT2.createNode("meshStandard");
    return materialNode;
  }
  const matNode = MAT.node(MESH_STANDARD_MAT_NAME) || createMeshMaterial(MAT);
  node.p.material.setNode(matNode, { relative: true });
}
class MaterialSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.MATERIAL */.aB.MATERIAL;
  }
  onCreate(node) {
    Material_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/code/assemblers/objectBuilder/ObjectBuilderAssemblerCommon.ts
var ObjectBuilderAssemblerCommon = __webpack_require__(20924);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/ObjectBuilder.ts




function ObjectBuilder_onCreateHook(node) {
  const globals = node.createNode("globals");
  const output1 = node.createNode("output");
  const add1 = node.createNode("add");
  add1.setInput(0, globals, ObjectBuilderAssemblerCommon/* ObjectVariable.POSITION */.K.POSITION);
  output1.setInput(ObjectBuilderAssemblerCommon/* ObjectVariable.POSITION */.K.POSITION, add1);
  globals.uiData.setPosition(-400, 0);
  output1.uiData.setPosition(0, 0);
  add1.uiData.setPosition(-200, 0);
}
class ObjectBuilderSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.OBJECT_BUILDER */.aB.OBJECT_BUILDER;
  }
  onCreate(node) {
    ObjectBuilder_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/ParticlesSystemGPU.ts







const ParticlesSystemGPU_MAT_NAME = "MAT";
const PARTICLES_MAT_NAME = "pointsParticles";
const ParticlesSystemGPU_ACTOR_NODE_BASE_NAME = "actor_particles";
function _onCreatePrepareMaterial(node) {
  function createMatNetwork(geoNode2) {
    const MAT2 = geoNode2.createNode("materialsNetwork");
    MAT2.setName(ParticlesSystemGPU_MAT_NAME);
    const nodePos = node.uiData.position();
    MAT2.uiData.setPosition(nodePos.x - 200, nodePos.y);
    return MAT2;
  }
  const geoNode = node.parent();
  const MAT = geoNode.nodesByType("materialsNetwork")[0] || createMatNetwork(geoNode);
  function createMat(MAT2) {
    let pointsMat2 = MAT2.node("points_builder1");
    if (!(pointsMat2 && pointsMat2.type() == Mat/* MatType.POINTS_BUILDER */.M.POINTS_BUILDER)) {
      pointsMat2 = MAT2.createNode("pointsBuilder");
      const output1 = pointsMat2.createNode("output");
      const globals = pointsMat2.createNode("globals");
      globals.uiData.setPosition(-200, 0);
      output1.uiData.setPosition(200, 0);
    }
    pointsMat2.setName(PARTICLES_MAT_NAME);
    let pointsMatConstantPointSize = pointsMat2.node("constant");
    if (!(pointsMatConstantPointSize && pointsMatConstantPointSize.type() == Gl/* GlType.CONSTANT */.P.CONSTANT)) {
      pointsMatConstantPointSize = pointsMat2.createNode("constant");
      pointsMatConstantPointSize.setName("constant_point_size");
    }
    pointsMatConstantPointSize.p.float.set(0.04);
    const points_mat_output1 = pointsMat2.node("output1");
    if (points_mat_output1) {
      points_mat_output1.setInput("gl_PointSize", pointsMatConstantPointSize);
    }
    return pointsMat2;
  }
  const pointsMat = MAT.node(PARTICLES_MAT_NAME) || createMat(MAT);
  if (pointsMat) {
    node.p.material.setNode(pointsMat, { relative: true });
  }
}
function ParticlesSystemGPU_onCreatePrepareActorNode(node) {
  function createActorNodeChildren(actorNode) {
    const particlesSystemReset = actorNode.createNode("particlesSystemReset");
    const onScenePause = actorNode.createNode("onScenePause");
    const particlesSystemStepSimulation = actorNode.createNode("particlesSystemStepSimulation");
    const onTick = actorNode.createNode("onTick");
    particlesSystemReset.setInput(0, onScenePause);
    particlesSystemStepSimulation.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
    onScenePause.uiData.setPosition(-100, -100);
    particlesSystemReset.uiData.setPosition(100, -100);
    onTick.uiData.setPosition(-100, 100);
    particlesSystemStepSimulation.uiData.setPosition(100, 100);
  }
  function createActorNode(geoNode2) {
    const actor12 = geoNode2.createNode("actor");
    actor12.setName(`${ParticlesSystemGPU_ACTOR_NODE_BASE_NAME}${core_String/* CoreString.tailDigits */.YE.tailDigits(node.name())}`);
    const nodePos = node.uiData.position();
    actor12.uiData.setPosition(nodePos.x, nodePos.y - 200);
    createActorNodeChildren(actor12);
    return actor12;
  }
  const geoNode = node.parent();
  const actor1 = (
    /*geoNode.nodesByType('actor')[0] ||*/
    createActorNode(geoNode)
  );
  return { actor1 };
}
function ParticlesSystemGPU_onCreateHook(node) {
  const current_global = node.nodesByType("globals")[0];
  const current_output = node.nodesByType("output")[0];
  if (current_global || current_output) {
    return;
  }
  const globals = node.createNode("globals");
  const output1 = node.createNode("output");
  const noise1 = node.createNode("noise");
  const add1 = node.createNode("add");
  noise1.setInput("position", globals, "position");
  add1.setInput(0, globals, "position");
  add1.setInput(1, noise1);
  output1.setInput("position", add1);
  const amp = noise1.params.get("amp");
  if (amp) {
    amp.set([0.1, 0.1, 0.1]);
  }
  globals.uiData.setPosition(-300, 0);
  output1.uiData.setPosition(200, 0);
  noise1.uiData.setPosition(-150, 100);
  add1.uiData.setPosition(0, 0);
  _onCreatePrepareMaterial(node);
  const { actor1 } = ParticlesSystemGPU_onCreatePrepareActorNode(node);
  actor1.setInput(0, node.io.inputs.input(0));
  node.setInput(0, actor1);
}
class ParticlesSystemGPUSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.PARTICLES_SYSTEM_GPU */.aB.PARTICLES_SYSTEM_GPU;
  }
  onCreate(node) {
    ParticlesSystemGPU_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/PhysicsDebug.ts




function PhysicsDebug_onCreateHook(node) {
  const physicsDebugUpdate = node.createNode("physicsDebugUpdate");
  const onTick = node.createNode("onTick");
  physicsDebugUpdate.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
  onTick.uiData.setPosition(-100, 100);
  physicsDebugUpdate.uiData.setPosition(100, 100);
}
class PhysicsDebugSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.PHYSICS_DEBUG */.aB.PHYSICS_DEBUG;
  }
  onCreate(node) {
    PhysicsDebug_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/player/PlayerCommon.ts
var PlayerCommon = __webpack_require__(52729);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Transform.ts
var Transform = __webpack_require__(87883);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/ParamType.ts
var ParamType = __webpack_require__(51254);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/PhysicsPlayer.ts









const SPHERE_NODE_NAME = "sphere_PLAYER";
const TRANSFORM_NODE_NAME = "transform_PLAYER";
const CAMERA_NODE_NAME = "perspectiveCamera_PLAYER";
const CAMERA_CONTROLS_NODE_NAME = "cameraControls_PLAYER";
function physicsPlayerSopOnCreate(node) {
  const physicsPlayerUpdate = node.createNode("physicsPlayerUpdate");
  const onTick = node.createNode("onTick");
  const setPlayerInput = node.createNode("setPlayerInput");
  const onKey = node.createNode("onKey");
  physicsPlayerUpdate.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
  for (let corePlayerInput of PlayerCommon/* CORE_PLAYER_INPUTS */.o) {
    physicsPlayerUpdate.setInput(corePlayerInput, setPlayerInput, corePlayerInput);
  }
  setPlayerInput.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onKey);
  onKey.p.keyCodes.set("Space ShiftLeft ShiftRight KeyW KeyA KeyS KeyD ArrowUp ArrowLeft ArrowDown ArrowRight");
  physicsPlayerUpdate.uiData.setPosition(100, 0);
  onTick.uiData.setPosition(-200, 0);
  setPlayerInput.uiData.setPosition(-200, 200);
  onKey.uiData.setPosition(-600, 200);
  const geoNode = node.parent();
  function _createSphereNodes() {
    function _createSphereNode() {
      const sphere1 = geoNode.createNode("sphere");
      sphere1.p.radius.set(0.5);
      sphere1.setName(`${SPHERE_NODE_NAME}${core_String/* CoreString.tailDigits */.YE.tailDigits(node.name())}`);
      sphere1.uiData.setPosition(node.uiData.position().x - 100, node.uiData.position().y - 600);
      return sphere1;
    }
    function _createMaterialNode() {
      const MAT_NAME = "MAT";
      const MESH_STANDARD_MAT_NAME = "meshStandardBuilder_PLAYER";
      function createMatNetwork(geoNode2) {
        const MAT2 = geoNode2.createNode("materialsNetwork");
        MAT2.setName(MAT_NAME);
        const nodePos = node.uiData.position();
        MAT2.uiData.setPosition(nodePos.x - 200, nodePos.y);
        return MAT2;
      }
      const MAT = geoNode.nodesByType("materialsNetwork")[0] || createMatNetwork(geoNode);
      function createMeshMaterial(MAT2) {
        const materialNode2 = MAT2.createNode("meshStandardBuilder");
        function create_globals1(parentNode) {
          var globals12 = parentNode.createNode("globals");
          globals12.setName("globals1");
          globals12.uiData.setPosition(-450, 0);
          return globals12;
        }
        function create_output1(parentNode) {
          var output12 = parentNode.createNode("output");
          output12.setName("output1");
          output12.uiData.setPosition(400, 0);
          return output12;
        }
        function create_vec3ToFloat1(parentNode) {
          var vec3ToFloat12 = parentNode.createNode("vec3ToFloat");
          vec3ToFloat12.setName("vec3ToFloat1");
          vec3ToFloat12.uiData.setPosition(-200, 200);
          return vec3ToFloat12;
        }
        function create_floatToVec2_1(parentNode) {
          var floatToVec2_12 = parentNode.createNode("floatToVec2");
          floatToVec2_12.setName("floatToVec2_1");
          floatToVec2_12.uiData.setPosition(-100, 200);
          return floatToVec2_12;
        }
        function create_checkers1(parentNode) {
          var checkers12 = parentNode.createNode("checkers");
          checkers12.setName("checkers1");
          checkers12.uiData.setPosition(50, 200);
          return checkers12;
        }
        function create_mix1(parentNode) {
          var mix12 = parentNode.createNode("mix");
          mix12.setName("mix1");
          mix12.uiData.setPosition(250, 0);
          mix12.addParam(ParamType/* ParamType.VECTOR3 */._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix12.addParam(ParamType/* ParamType.VECTOR3 */._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix12.addParam(ParamType/* ParamType.FLOAT */._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          return mix12;
        }
        function create_constant1(parentNode) {
          var constant12 = parentNode.createNode("constant");
          constant12.setName("constant1");
          constant12.uiData.setPosition(50, -150);
          constant12.p.type.set(4);
          constant12.p.color.set([0.8745098039215686, 0.6235294117647059, 0.7019607843137254]);
          constant12.p.asColor.set(true);
          return constant12;
        }
        function create_constant2(parentNode) {
          var constant22 = parentNode.createNode("constant");
          constant22.setName("constant2");
          constant22.uiData.setPosition(0, 0);
          constant22.p.type.set(4);
          constant22.p.color.set([0.2549019607843137, 0.043137254901960784, 0.043137254901960784]);
          constant22.p.asColor.set(true);
          return constant22;
        }
        const globals1 = create_globals1(materialNode2);
        const output1 = create_output1(materialNode2);
        const vec3ToFloat1 = create_vec3ToFloat1(materialNode2);
        const floatToVec2_1 = create_floatToVec2_1(materialNode2);
        const checkers1 = create_checkers1(materialNode2);
        const mix1 = create_mix1(materialNode2);
        const constant1 = create_constant1(materialNode2);
        const constant2 = create_constant2(materialNode2);
        output1.setInput("color", mix1, "mix");
        vec3ToFloat1.setInput("vec", globals1, "position");
        floatToVec2_1.setInput("x", vec3ToFloat1, "x");
        floatToVec2_1.setInput("y", vec3ToFloat1, "z");
        checkers1.setInput("uv", floatToVec2_1, "vec2");
        mix1.setInput("value0", constant1, "val");
        mix1.setInput("value1", constant2, "val");
        mix1.setInput("blend", checkers1, "checker");
        materialNode2.setName(MESH_STANDARD_MAT_NAME);
        return materialNode2;
      }
      const material1 = geoNode.createNode("material");
      material1.uiData.setPosition(node.uiData.position().x - 100, node.uiData.position().y - 400);
      const matNode = MAT.node(MESH_STANDARD_MAT_NAME) || createMeshMaterial(MAT);
      material1.p.material.setNode(matNode, { relative: true });
      return material1;
    }
    function _createTransformNode() {
      const transform1 = geoNode.createNode("transform");
      transform1.p.t.y.set(3);
      transform1.setApplyOn(Transform/* TransformTargetType.OBJECT */.dH.OBJECT);
      transform1.setName(`${TRANSFORM_NODE_NAME}${core_String/* CoreString.tailDigits */.YE.tailDigits(node.name())}`);
      transform1.uiData.setPosition(node.uiData.position().x - 100, node.uiData.position().y - 200);
      return transform1;
    }
    const sphereNode = _createSphereNode();
    const materialNode = _createMaterialNode();
    const transformNode2 = _createTransformNode();
    materialNode.setInput(0, sphereNode);
    transformNode2.setInput(0, materialNode);
    return { sphereNode, transformNode: transformNode2 };
  }
  function _createCameraNodes(transformNode2) {
    function _createCameraNode() {
      const cameraNode2 = geoNode.createNode("perspectiveCamera");
      cameraNode2.p.position.set([5, 5, 5]);
      cameraNode2.setName(`${CAMERA_NODE_NAME}${core_String/* CoreString.tailDigits */.YE.tailDigits(node.name())}`);
      cameraNode2.uiData.setPosition(node.uiData.position().x + 100, node.uiData.position().y - 400);
      return cameraNode2;
    }
    function _createCameraControlsNode() {
      const cameraControlsNode3 = geoNode.createNode("cameraControls");
      cameraControlsNode3.setName(`${CAMERA_CONTROLS_NODE_NAME}${core_String/* CoreString.tailDigits */.YE.tailDigits(node.name())}`);
      const cameraOrbitControlsNode = cameraControlsNode3.createNode("cameraOrbitControls");
      cameraOrbitControlsNode.p.allowPan.set(false);
      cameraOrbitControlsNode.p.minDistance.set(2);
      const transformRelativePath = Walker/* CoreWalker.relativePath */.s$.relativePath(cameraOrbitControlsNode, transformNode2);
      cameraOrbitControlsNode.p.target.set([
        `ch('${transformRelativePath}/tx')`,
        `ch('${transformRelativePath}/ty')`,
        `ch('${transformRelativePath}/tz')`
      ]);
      cameraControlsNode3.p.node.setNode(cameraOrbitControlsNode, { relative: true });
      cameraControlsNode3.uiData.setPosition(node.uiData.position().x + 100, node.uiData.position().y - 200);
      return cameraControlsNode3;
    }
    const cameraNode = _createCameraNode();
    const cameraControlsNode2 = _createCameraControlsNode();
    cameraControlsNode2.setInput(0, cameraNode);
    return { cameraNode, cameraControlsNode: cameraControlsNode2 };
  }
  const { transformNode } = _createSphereNodes();
  const { cameraControlsNode } = _createCameraNodes(transformNode);
  node.setInput(0, transformNode);
  node.setInput(1, cameraControlsNode);
}
class PhysicsPlayerSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.PHYSICS_PLAYER */.aB.PHYSICS_PLAYER;
  }
  onCreate(node) {
    physicsPlayerSopOnCreate(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/PhysicsWorld.ts




function PhysicsWorld_onCreateHook(node) {
  const physicsWorldReset = node.createNode("physicsWorldReset");
  const onScenePause = node.createNode("onScenePause");
  const physicsWorldStepSimulation = node.createNode("physicsWorldStepSimulation");
  const onTick = node.createNode("onTick");
  physicsWorldReset.setInput(0, onScenePause);
  physicsWorldStepSimulation.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick);
  onScenePause.uiData.setPosition(-100, -100);
  physicsWorldReset.uiData.setPosition(100, -100);
  onTick.uiData.setPosition(-100, 100);
  physicsWorldStepSimulation.uiData.setPosition(100, 100);
}
class PhysicsWorldSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.PHYSICS_WORLD */.aB.PHYSICS_WORLD;
  }
  onCreate(node) {
    PhysicsWorld_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/code/assemblers/pointBuilder/PointBuilderAssemblerCommon.ts
var PointBuilderAssemblerCommon = __webpack_require__(38934);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/PointBuilder.ts




function PointBuilder_onCreateHook(node) {
  const globals = node.createNode("globals");
  const output1 = node.createNode("output");
  const add1 = node.createNode("add");
  add1.setInput(0, globals, PointBuilderAssemblerCommon/* PointVariable.POSITION */.U.POSITION);
  output1.setInput(PointBuilderAssemblerCommon/* PointVariable.POSITION */.U.POSITION, add1);
  globals.uiData.setPosition(-400, 0);
  output1.uiData.setPosition(0, 0);
  add1.uiData.setPosition(-200, 0);
}
class PointBuilderSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.POINT_BUILDER */.aB.POINT_BUILDER;
  }
  onCreate(node) {
    PointBuilder_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/PointLight.ts



function sop_PointLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class PointLightSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Light/* LightType.POINT */.v.POINT;
  }
  onCreate(node) {
    sop_PointLight_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/SDFBuilder.ts



function SDFBuilder_onCreateHook(node) {
  const globals = node.createNode("globals");
  const output1 = node.createNode("output");
  const SDFSphere1 = node.createNode("SDFSphere");
  SDFSphere1.setInput(0, globals, "position");
  output1.setInput("d", SDFSphere1);
  SDFSphere1.p.radius.set(0.4);
  globals.uiData.setPosition(-400, 0);
  output1.uiData.setPosition(0, 0);
  SDFSphere1.uiData.setPosition(-200, 0);
}
class SDFBuilderSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.SDF_BUILDER */.aB.SDF_BUILDER;
  }
  onCreate(node) {
    SDFBuilder_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/Solver.ts



function Solver_onCreateHook(node) {
  const subnetInput1 = node.createNode("subnetInput");
  const solverPreviousFrame = node.createNode("solverPreviousFrame");
  const subnetOutput1 = node.createNode("subnetOutput");
  const switch1 = node.createNode("switch");
  switch1.setInput(0, solverPreviousFrame);
  switch1.setInput(1, subnetInput1);
  switch1.p.input.set("solverIteration() == 0");
  subnetOutput1.setInput(0, switch1);
  subnetOutput1.flags.display.set(true);
  subnetInput1.uiData.setPosition(100, -200);
  solverPreviousFrame.uiData.setPosition(-100, -200);
  switch1.uiData.setPosition(0, 0);
  subnetOutput1.uiData.setPosition(0, 200);
}
class SolverSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return NodeContext/* NetworkNodeType.SOLVER */.kX.SOLVER;
  }
  onCreate(node) {
    Solver_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/SpotLight.ts



function sop_SpotLight_onCreateHook(node) {
  node.p.showHelper.set(true);
}
class SpotLightSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Light/* LightType.SPOT */.v.SPOT;
  }
  onCreate(node) {
    sop_SpotLight_onCreateHook(node);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/sop/Subnet.ts



function sop_Subnet_onCreateHook(node) {
  const subnetInput1 = node.createNode("subnetInput");
  const subnetOutput1 = node.createNode("subnetOutput");
  subnetOutput1.setInput(0, subnetInput1);
  subnetInput1.uiData.setPosition(0, -100);
  subnetOutput1.uiData.setPosition(0, 100);
}
class SubnetSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return NodeContext/* NetworkNodeType.SUBNET */.kX.SUBNET;
  }
  onCreate(node) {
    sop_Subnet_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/code/assemblers/softBody/SoftBodyAssembler.ts
var SoftBodyAssembler = __webpack_require__(80524);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/core/hooks/onCreate/sop/TetSoftBodySolver.ts






const TetSoftBodySolver_ACTOR_NODE_BASE_NAME = "actor_softBody";
function TetSoftBodySolver_onCreatePrepareActorNode(node) {
  function createActorNodeChildren(actorNode) {
    const softBodySolverStepSimulation1 = actorNode.createNode("softBodySolverStepSimulation");
    const onTick2 = actorNode.createNode("onTick");
    softBodySolverStepSimulation1.setInput(Js/* JsConnectionPointType.TRIGGER */.zF.TRIGGER, onTick2);
    onTick2.uiData.setPosition(-100, 100);
    softBodySolverStepSimulation1.uiData.setPosition(100, 100);
    return { onTick: onTick2 };
  }
  function createActorNode(geoNode2) {
    const actor12 = geoNode2.createNode("actor");
    actor12.setName(`${TetSoftBodySolver_ACTOR_NODE_BASE_NAME}${(0,core_String/* stringTailDigits */.KX)(node.name())}`);
    const nodePos = node.uiData.position();
    actor12.uiData.setPosition(nodePos.x, nodePos.y + 200);
    const { onTick: onTick2 } = createActorNodeChildren(actor12);
    return { actor1: actor12, onTick: onTick2 };
  }
  const geoNode = node.parent();
  const { actor1, onTick } = createActorNode(geoNode);
  return { actor1, onTick };
}
function TetSoftBodySolver_onCreateHook(node) {
  const current_global = node.nodesByType("globals")[0];
  const current_output = node.nodesByType("output")[0];
  if (current_global || current_output) {
    return;
  }
  const globals = node.createNode("globals");
  const output1 = node.createNode("output");
  const computeVelocity1 = node.createNode("computeVelocity");
  const SDFPlane1 = node.createNode("SDFPlane");
  const constant1 = node.createNode("constant");
  constant1.setName("constant_GRAVITY");
  constant1.setJsType(Js/* JsConnectionPointType.VECTOR3 */.zF.VECTOR3);
  constant1.p.vector3.set([0, -9.8, 0]);
  output1.setInput(SoftBodyAssembler/* SoftBodyVariable.V */.h.V, computeVelocity1);
  output1.setInput(SoftBodyAssembler/* SoftBodyVariable.COLLISION_SDF */.h.COLLISION_SDF, SDFPlane1);
  computeVelocity1.setInput(computeVelocity1.p.forces.name(), constant1);
  computeVelocity1.setInput(computeVelocity1.p.velocity.name(), globals, SoftBodyAssembler/* SoftBodyVariable.V */.h.V);
  computeVelocity1.setInput(computeVelocity1.p.delta.name(), globals, SoftBodyAssembler/* SoftBodyVariable.DELTA */.h.DELTA);
  globals.uiData.setPosition(-200, 0);
  output1.uiData.setPosition(200, 0);
  constant1.uiData.setPosition(-200, -200);
  computeVelocity1.uiData.setPosition(0, 0);
  SDFPlane1.uiData.setPosition(0, 200);
  const { actor1, onTick } = TetSoftBodySolver_onCreatePrepareActorNode(node);
  actor1.setInput(0, node);
  return { actor1, onTick, globals, output1 };
}
class TetSoftBodySolverSopOnCreateRegister extends SopOnCreateHookRegister {
  type() {
    return Sop/* SopType.TET_SOFT_BODY_SOLVER */.aB.TET_SOFT_BODY_SOLVER;
  }
  onCreate(node) {
    return TetSoftBodySolver_onCreateHook(node);
  }
}

// EXTERNAL MODULE: ../src/editor/store/controllers/StoreController.ts + 44 modules
var StoreController = __webpack_require__(72555);
;// CONCATENATED MODULE: ../src/editor/core/hooks/onCreate/OnCreateHooksController.ts


































































class EditorCoreOnCreateHooksController {
  static registerAll() {
    if (this._registered) {
      return;
    }
    this._registered = true;
    this.register_all_on_create();
  }
  static register_all_on_create() {
    AnimNetworkOnCreateHookRegisters.forEach((register) => {
      this.register(register);
    });
    this.register(BuilderCopOnCreateHookRegister);
    this.register(Builder2DArrayCopOnCreateHookRegister);
    this.register(CubeMapFromSceneCopOnCreateHookRegister);
    this.register(AttributeGlOnCreateHookRegister);
    this.register(ComputeNormalsGlOnCreateHookRegister);
    this.register(ForLoopGlOnCreateHookRegister);
    this.register(IfThenGlOnCreateHookRegister);
    this.register(ParamGlOnCreateHookRegister);
    this.register(RampGlOnCreateHookRegister);
    this.register(SDFGradientGlOnCreateHookRegister);
    this.register(SubnetGlOnCreateHookRegister);
    this.register(TextureGlOnCreateHookRegister);
    this.register(TextureDisplacementGlOnCreateHookRegister);
    this.register(TextureSDFGlOnCreateHookRegister);
    this.register(VaryingReadGlOnCreateHookRegister);
    this.register(VaryingWriteGlOnCreateHookRegister);
    ActorNetworkOnCreateHookRegisters.forEach((register) => {
      this.register(register);
    });
    this.register(AnimationMixer/* AnimationMixerJsOnCreateHookRegister */.l);
    this.register(ForLoopJsOnCreateHookRegister);
    this.register(GetObjectAttributeJsOnCreateHookRegister);
    this.register(GetObjectUserDataJsOnCreateHookRegister);
    this.register(ParamJsOnCreateHookRegister);
    this.register(OnObjectAttributeUpdateJsOnCreateHookRegister);
    this.register(SetObjectAttributeJsOnCreateHookRegister);
    BuilderMatOnCreateHookRegisters.forEach((register) => {
      this.register(register);
    });
    this.register(RayMarchingOnCreateRegister);
    this.register(AreaLightObjOnCreateRegister);
    this.register(AudioListenerObjOnCreateRegister);
    this.register(DirectionalLightObjOnCreateRegister);
    this.register(GeoObjOnCreateRegister);
    this.register(PointLightObjOnCreateRegister);
    this.register(PositionalAudioObjOnCreateRegister);
    this.register(SpotLightObjOnCreateRegister);
    this.register(BuilderPostOnCreateRegister);
    this.register(TexturePostOnCreateRegister);
    this.register(ActorSopOnCreateRegister);
    this.register(ActorInstanceSopOnCreateRegister);
    this.register(ActorPointSopOnCreateRegister);
    this.register(AreaLightSopOnCreateRegister);
    this.register(CADGroupSopOnCreateRegister);
    this.register(CameraControlsSopOnCreateRegister);
    this.register(CameraCSSRendererSopOnCreateRegister);
    this.register(CameraPostProcessSopOnCreateRegister);
    this.register(CameraRendererSopOnCreateRegister);
    this.register(ClothSolverSopOnCreateRegister);
    this.register(DecomposeSopOnCreateRegister);
    this.register(DirectionalLightSopOnCreateRegister);
    this.register(EntityBuilderSopOnCreateRegister);
    this.register(InstanceSopOnCreateRegister);
    this.register(InstanceBuilderSopOnCreateRegister);
    this.register(MaterialSopOnCreateRegister);
    this.register(ObjectBuilderSopOnCreateRegister);
    this.register(ParticlesSystemGPUSopOnCreateRegister);
    this.register(PhysicsDebugSopOnCreateRegister);
    this.register(PhysicsPlayerSopOnCreateRegister);
    this.register(PhysicsWorldSopOnCreateRegister);
    this.register(PointBuilderSopOnCreateRegister);
    this.register(PointLightSopOnCreateRegister);
    this.register(SDFBuilderSopOnCreateRegister);
    this.register(SolverSopOnCreateRegister);
    this.register(SubnetSopOnCreateRegister);
    this.register(SpotLightSopOnCreateRegister);
    this.register(TetSoftBodySolverSopOnCreateRegister);
  }
  static register(onCreateClass) {
    const instance = new onCreateClass();
    const context = instance.context();
    const type = instance.type();
    let contextMap = this._onCreateHooksMap.get(context);
    if (!contextMap) {
      contextMap = /* @__PURE__ */ new Map();
      this._onCreateHooksMap.set(context, contextMap);
    }
    const hook = instance.onCreate.bind(instance);
    contextMap.set(type, hook);
  }
  // private static _registerOnCreateHook(nodeClass: typeof BaseNodeClass, hook: OnCreateHook) {
  // 	const context = nodeClass.context();
  // 	const type = nodeClass.type();
  // 	let contextMap = this._onCreateHooksMap.get(context);
  // 	if (!contextMap) {
  // 		contextMap = new Map();
  // 		this._onCreateHooksMap.set(context, contextMap);
  // 	}
  // 	contextMap.set(type, hook);
  // }
  static run_on_create_hooks(node) {
    const context = node.context();
    const type = node.type();
    const contextMap = this._onCreateHooksMap.get(context);
    if (!contextMap) {
      return;
    }
    StoreController/* StoreController.scene.batchUpdates */.F.scene.batchUpdates(() => {
      const hook = contextMap.get(type);
      if (hook) {
        hook(node);
      }
    });
  }
}
EditorCoreOnCreateHooksController._onCreateHooksMap = /* @__PURE__ */ new Map();
EditorCoreOnCreateHooksController._registered = false;

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Delay.ts
var Delay = __webpack_require__(42711);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Delay.ts


const delayAnimParamsLabelRegister = {
  nodeClass: Delay/* DelayAnimNode */.E,
  setupFunc: (node) => ({
    params: node.p.delay,
    callback: () => {
      return `${node.pv.delay}`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Duration.ts
var Duration = __webpack_require__(2430);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Duration.ts


const durationAnimParamsLabelRegister = {
  nodeClass: Duration/* DurationAnimNode */.N,
  setupFunc: (node) => ({
    params: node.p.duration,
    callback: () => {
      return `${node.pv.duration}`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Easing.ts
var Easing = __webpack_require__(39448);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Easing.ts


const easingAnimParamsLabelRegister = {
  nodeClass: Easing/* EasingAnimNode */.v,
  setupFunc: (node) => ({
    params: [node.p.name, node.p.inOut],
    callback: () => {
      return Easing/* EasingAnimNode.easingFullName */.v.easingFullName(node);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/_Base.ts
var anim_Base = __webpack_require__(44276);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/animation/TimelineBuilder.ts + 15 modules
var TimelineBuilder = __webpack_require__(82756);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/utils/params/ParamsConfig.ts
var ParamsConfig = __webpack_require__(96949);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Ramp.ts
var Ramp = __webpack_require__(22621);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Keyframes.ts





class KeyframesParamsConfig extends ParamsConfig/* NodeParamsConfig */.yI {
  constructor() {
    super(...arguments);
    /** @param keyframes */
    this.keyframes = ParamsConfig/* ParamConfig.RAMP */.XC.RAMP(Ramp/* RampParam.DEFAULT_VALUE */.M.DEFAULT_VALUE, {
      hideLabel: true
    });
  }
}
const Keyframes_ParamsConfig = new KeyframesParamsConfig();
class KeyframesAnimNode extends anim_Base/* TypedAnimNode */.D {
  constructor() {
    super(...arguments);
    this.paramsConfig = Keyframes_ParamsConfig;
  }
  static type() {
    return "keyframes";
  }
  initializeNode() {
    this.io.inputs.setCount(0, 1);
  }
  cook(inputContents) {
    const timelineBuilder = inputContents[0] || new TimelineBuilder/* TimelineBuilder */.S();
    timelineBuilder.setKeyframes(this.pv.keyframes);
    this.setTimelineBuilder(timelineBuilder);
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Keyframes.ts


const keyframesAnimParamsLabelRegister = {
  nodeClass: KeyframesAnimNode,
  setupFunc: (node) => ({
    params: node.p.keyframes,
    callback: () => {
      return "EXPERIMENTAL";
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Merge.ts
var Merge = __webpack_require__(17830);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Merge.ts


const mergeAnimParamsLabelRegister = {
  nodeClass: Merge/* MergeAnimNode */.C,
  setupFunc: (node) => ({
    params: [node.p.mode, node.p.offset],
    callback: () => {
      const mode = Merge/* EASING_ANIM_MERGE_MODES */.U[node.pv.mode];
      const offset = node.pv.offset;
      return `${mode} (offset: ${offset})`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/animation/vars/AnimBuilderTypes.ts
var AnimBuilderTypes = __webpack_require__(39470);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Operation.ts
var Operation = __webpack_require__(42187);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Operation.ts



const operationAnimParamsLabelRegister = {
  nodeClass: Operation/* OperationAnimNode */.j,
  setupFunc: (node) => ({
    params: node.p.operation,
    callback: () => {
      return AnimBuilderTypes/* OPERATIONS */.s[node.pv.operation];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/Assert.ts
var Assert = __webpack_require__(68239);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/animation/Position.ts
var Position = __webpack_require__(46833);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Position.ts
var anim_Position = __webpack_require__(2189);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Position.ts





const positionAnimParamsLabelRegister = {
  nodeClass: anim_Position/* PositionAnimNode */.y,
  setupFunc: (node) => ({
    params: [node.p.mode, node.p.relativeTo, node.p.offset],
    callback: () => {
      const mode = Position/* ANIMATION_POSITION_MODES */.$o[node.pv.mode];
      switch (mode) {
        case Position/* AnimationPositionMode.RELATIVE */.j1.RELATIVE:
          return _relativeLabel(node);
        case Position/* AnimationPositionMode.ABSOLUTE */.j1.ABSOLUTE:
          return _absoluteLabel();
      }
      Assert/* TypeAssert.unreachable */.f.unreachable(mode);
    }
  })
};
function _relativeLabel(node) {
  const after_before = node.pv.offset > 0 ? "after" : "before";
  const relative_to = Position/* ANIMATION_POSITION_RELATIVE_TOS */.gY[node.pv.relativeTo];
  return `${Math.abs(node.pv.offset)} ${after_before} ${relative_to}`;
}
function _absoluteLabel() {
  return "absolute";
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/PropertyName.ts
var PropertyName = __webpack_require__(74517);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/PropertyName.ts


const propertyNameAnimParamsLabelRegister = {
  nodeClass: PropertyName/* PropertyNameAnimNode */.Z,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => {
      return node.pv.name;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Sleep.ts
var Sleep = __webpack_require__(71820);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Type.ts
var Type = __webpack_require__(19037);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/PropertyValue.ts
var PropertyValue = __webpack_require__(66318);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/_Base.ts


function colorToParamLabelString(color) {
  return { color: color.getStyle() };
}
const X = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-fuchsia-600 inline w-4 h-4">
<path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
</svg>
`;
const X_CIRCLE = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-indigo-500 inline w-4 h-4">
<path stroke-linecap="round" stroke-linejoin="round" d="M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>
`;
const CHECK = `<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-green-500 inline w-4 h-4">
<path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
</svg>
`;
const TRUE = CHECK;
const FALSE = [X, X_CIRCLE][0];
const NO_EXPRESSION_CLASS = "text-white";
const EXPRESSION_CLASS = "text-green-500";
const ERROR_CLASS = "text-white bg-red-500 px-1";
const COLOR_STRENGTH = 500;
const DEFAULT_CLASS = "text-blue-500";
const MENU_ENTRIES_JS_TYPE = [
  Js/* JsConnectionPointType.FLOAT */.zF.FLOAT,
  Js/* JsConnectionPointType.VECTOR2 */.zF.VECTOR2,
  Js/* JsConnectionPointType.VECTOR3 */.zF.VECTOR3,
  Js/* JsConnectionPointType.INT */.zF.INT,
  Js/* JsConnectionPointType.COLOR */.zF.COLOR
];

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/ArrayUtils.ts
var ArrayUtils = __webpack_require__(87132);
// EXTERNAL MODULE: ../src/editor/core/ColorUtils.ts
var ColorUtils = __webpack_require__(94810);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/_BaseNumeric.ts




function _paramLabelNumber(param, options) {
  const label = (options == null ? void 0 : options.displayLabel) == false ? void 0 : `${param.name()}:`;
  const compactElements = [];
  if (param.hasExpression()) {
    ArrayUtils/* ArrayUtils.compact */.BB.compact(
      [
        label,
        {
          label: param.rawInput(),
          className: EXPRESSION_CLASS,
          bold: true
        }
        // not sure that the result should be displayed, as it would not make sense when using a copy node for instance.
        // nor when using params which are per entity, but that could be detected.
        // maybe it is possible to detect when using a copy?
        // '(=',
        // {
        // 	label: param.value,
        // 	className: EXPRESSION_RESULT,
        // },
        // ')',
      ],
      compactElements
    );
    return {
      detailed: true,
      elements: compactElements
    };
  } else {
    if (param.options.hasMenu()) {
      const availableEntries = param.options.menuEntries();
      const selectedEntry = availableEntries.find(
        (entry) => entry.value == param.value
      ) || availableEntries[0];
      ArrayUtils/* ArrayUtils.compact */.BB.compact(
        [
          label,
          {
            label: selectedEntry.name,
            className: (options == null ? void 0 : options.className) || (0,ColorUtils/* typeClassName */.I)(MENU_ENTRIES_JS_TYPE[param.value], ColorUtils/* CssType.TEXT */.Z.TEXT, COLOR_STRENGTH) || DEFAULT_CLASS
          }
        ],
        compactElements
      );
      return {
        detailed: true,
        elements: compactElements
      };
    } else {
      const className = options == null ? void 0 : options.className;
      if (className) {
        ArrayUtils/* ArrayUtils.compact */.BB.compact(
          [
            label,
            {
              label: param.rawInput(),
              className
            }
          ],
          compactElements
        );
        return {
          detailed: true,
          elements: compactElements
        };
      } else {
        const compactElements2 = [];
        ArrayUtils/* ArrayUtils.compact */.BB.compact([label, param.rawInput()], compactElements2);
        return compactElements2.join(" ");
      }
    }
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/_BaseVector.ts



function _paramLabelVector(param, options) {
  const label = (options == null ? void 0 : options.displayLabel) == false ? void 0 : `${param.name()}:`;
  if (param.hasExpression()) {
    const compactElements = [];
    ArrayUtils/* ArrayUtils.compact */.BB.compact(
      [
        label,
        ...param.components.map((c) => ({
          label: c.rawInput(),
          className: c.hasExpression() ? EXPRESSION_CLASS : NO_EXPRESSION_CLASS,
          bold: true
        }))
      ],
      compactElements
    );
    return {
      detailed: true,
      elements: compactElements
    };
  } else {
    const compactElements = [];
    ArrayUtils/* ArrayUtils.compact */.BB.compact([label, ...param.components.map((c) => c.rawInput())], compactElements);
    return compactElements.join(" ");
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/Boolean.ts




function _booleanAndIcon(value) {
  return value ? TRUE : FALSE;
}
function _paramLabelBoolean(param, options) {
  const label = (options == null ? void 0 : options.displayLabel) == false ? void 0 : `${param.name()}:`;
  const rawInput = param.rawInput();
  const compactElements = [];
  const rawInputLabel = Type/* CoreType.isBoolean */.MR.isBoolean(rawInput) ? _booleanAndIcon(rawInput) : rawInput == 1 ? _booleanAndIcon(rawInput == 1) : rawInput;
  if (param.hasExpression()) {
    ArrayUtils/* ArrayUtils.compact */.BB.compact([
      label,
      {
        label: rawInputLabel,
        className: EXPRESSION_CLASS,
        bold: true
      }
      // not sure that the result should be displayed, as it would not make sense when using a copy node for instance.
      // nor when using params which are per entity, but that could be detected.
      // maybe it is possible to detect when using a copy?
      // '(=',
      // {
      // 	label: param.value,
      // 	className: EXPRESSION_RESULT,
      // },
      // ')',
    ], compactElements);
    return {
      detailed: true,
      elements: compactElements
    };
  } else {
    const className = options == null ? void 0 : options.className;
    if (className) {
      ArrayUtils/* ArrayUtils.compact */.BB.compact([
        _booleanAndIcon(param.value),
        {
          label: rawInputLabel,
          className
        }
      ], compactElements);
      return {
        detailed: true,
        elements: compactElements
      };
    } else {
      ArrayUtils/* ArrayUtils.compact */.BB.compact([label, _booleanAndIcon(param.value)], compactElements);
      return compactElements.join(" ");
    }
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/Color.ts


function _paramLabelColor(param) {
  return colorToParamLabelString(param.value);
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/NodePath.ts




function _paramLabelNodePath(param, options) {
  const label = (options == null ? void 0 : options.displayLabel) == false ? void 0 : `${param.name()}:`;
  const compactElements = [];
  if (!param.value.node()) {
    ArrayUtils/* ArrayUtils.compact */.BB.compact(
      [
        label,
        {
          label: param.rawInput() || "no node given",
          className: ERROR_CLASS,
          bold: true
        }
      ],
      compactElements
    );
    return {
      detailed: true,
      elements: compactElements
    };
  }
  if (param.hasExpression()) {
    ArrayUtils/* ArrayUtils.compact */.BB.compact(
      [
        label,
        {
          label: param.rawInput(),
          className: EXPRESSION_CLASS,
          bold: true
        }
      ],
      compactElements
    );
    return {
      detailed: true,
      elements: compactElements
    };
  } else {
    const className = options == null ? void 0 : options.className;
    if (className) {
      ArrayUtils/* ArrayUtils.compact */.BB.compact(
        [
          label,
          {
            label: param.rawInput(),
            className
          }
        ],
        compactElements
      );
      return {
        detailed: true,
        elements: compactElements
      };
    } else {
      ArrayUtils/* ArrayUtils.compact */.BB.compact([label, param.rawInput()], compactElements);
      return compactElements.join(" ");
    }
  }
}
function _paramLabelNodePathIf(conditionParam, nodePathParam, list) {
  if ((0,Type/* isBooleanTrue */.bI)(conditionParam.value)) {
    list.push(_paramLabelNodePath(nodePathParam));
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/String.ts




const MAX_LENGTH = 24;
function truncate(word) {
  if (word.length < MAX_LENGTH) {
    return word;
  } else {
    const elements = word.split("/");
    const reversedElements = elements.reverse();
    let newWord = reversedElements.shift();
    for (let element of reversedElements) {
      newWord = element + "/" + newWord;
      if (newWord.length > MAX_LENGTH) {
        return `.../${newWord}`;
      }
    }
    return newWord;
  }
}
function _paramLabelString(param, options) {
  const label = (options == null ? void 0 : options.displayLabel) == false ? void 0 : `${param.name()}:`;
  const compactElements = [];
  if (param.hasExpression()) {
    ArrayUtils/* ArrayUtils.compact */.BB.compact(
      [
        label,
        {
          label: truncate(param.rawInput()),
          className: EXPRESSION_CLASS,
          bold: true
        }
        // not sure that the result should be displayed, as it would not make sense when using a copy node for instance.
        // nor when using params which are per entity, but that could be detected.
        // maybe it is possible to detect when using a copy?
        // '(=',
        // {
        // 	label: param.value,
        // 	className: EXPRESSION_RESULT,
        // },
        // ')',
      ],
      compactElements
    );
    return {
      detailed: true,
      elements: compactElements
    };
  } else {
    if (param.options.hasMenu()) {
      const availableEntries = param.options.menuEntries();
      const selectedEntry = availableEntries.find(
        (entry) => entry.value == param.value
      ) || availableEntries[0];
      ArrayUtils/* ArrayUtils.compact */.BB.compact(
        [
          label,
          {
            label: selectedEntry.name,
            className: (options == null ? void 0 : options.className) || (0,ColorUtils/* typeClassName */.I)(MENU_ENTRIES_JS_TYPE[0], ColorUtils/* CssType.TEXT */.Z.TEXT, COLOR_STRENGTH) || DEFAULT_CLASS
          }
        ],
        compactElements
      );
      return {
        detailed: true,
        elements: compactElements
      };
    } else {
      const className = options == null ? void 0 : options.className;
      const compactElements2 = [];
      if (className) {
        ArrayUtils/* ArrayUtils.compact */.BB.compact(
          [
            label,
            {
              label: truncate(param.rawInput()),
              className
            }
          ],
          compactElements2
        );
        return {
          detailed: true,
          elements: compactElements2
        };
      } else {
        ArrayUtils/* ArrayUtils.compact */.BB.compact([label, truncate(param.rawInput())], compactElements2);
        return compactElements2.join(" ");
      }
    }
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/Vector2.ts


function _paramLabelVector2(param, options) {
  return _paramLabelVector(param, options);
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/Vector3.ts


function _paramLabelVector3(param, options) {
  return _paramLabelVector(param, options);
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/utils/Vector4.ts


function _paramLabelVector4(param, options) {
  return _paramLabelVector(param, options);
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/BaseSetup.ts













;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/PropertyValue.ts

var PropertyValue_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




const propertyValueAnimParamsLabelRegister = {
  nodeClass: PropertyValue/* PropertyValueAnimNode */.K,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => PropertyValue_async(void 0, null, function* () {
        yield Sleep/* CoreSleep.sleep */.D.sleep(100);
        const container = yield node.compute();
        const timelineBuilder = container.timelineBuilder();
        const value = timelineBuilder.propertyValue();
        if (Type/* CoreType.isNumber */.MR.isNumber(value)) {
          return `${value}`;
        }
        if (Type/* CoreType.isVector */.MR.isVector(value)) {
          return `${value.toArray().join(",")}`;
        }
        if (Type/* CoreType.isColor */.MR.isColor(value)) {
          return colorToParamLabelString(value);
        }
        if (Type/* CoreType.isQuaternion */.MR.isQuaternion(value)) {
          return `${value.toArray().join(",")}`;
        }
        return "";
      })
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Repeat.ts
var Repeat = __webpack_require__(34231);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Repeat.ts



const repeatAnimParamsLabelRegister = {
  nodeClass: Repeat/* RepeatAnimNode */.Z,
  setupFunc: (node) => ({
    params: [node.p.unlimited, node.p.count, node.p.yoyo, node.p.delay],
    callback: () => {
      const count = `${(0,Type/* isBooleanTrue */.bI)(node.pv.unlimited) ? "\u221E" : `${node.pv.count}x`}`;
      const usedProps = {
        yoyo: (0,Type/* isBooleanTrue */.bI)(node.pv.yoyo),
        delay: node.pv.delay != 0
      };
      const hasUsedProps = usedProps.yoyo || usedProps.delay;
      if (hasUsedProps) {
        const props = [];
        if (usedProps.yoyo) {
          props.push(`yoyo: ${node.pv.yoyo}`);
        }
        if (usedProps.delay) {
          props.push(`delay: ${node.pv.delay}`);
        }
        return `${count} (${props.join(", ")})`;
      } else {
        return `${count}`;
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Target.ts + 1 modules
var Target = __webpack_require__(31309);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/anim/Target.ts



const targetAnimParamsLabelRegister = {
  nodeClass: Target/* TargetAnimNode */.vP,
  setupFunc: (node) => ({
    params: [node.p.type, node.p.nodePath, node.p.objectMask],
    callback: () => {
      const type = Target/* ANIM_TARGET_TYPES */.aO[node.pv.type];
      switch (type) {
        case Target/* AnimTargetNodeTargetType.NODE */.vg.NODE:
          return node.pv.nodePath.path();
        case Target/* AnimTargetNodeTargetType.SCENE_GRAPH */.vg.SCENE_GRAPH:
          return node.pv.objectMask;
      }
      Assert/* TypeAssert.unreachable */.f.unreachable(type);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/audio/File.ts
var File = __webpack_require__(36815);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/audio/File.ts


const fileAudioParamsLabelRegister = {
  nodeClass: File/* FileAudioNode */.r,
  setupFunc: (node) => {
    return {
      params: [node.p.url],
      callback: () => {
        const url = node.p.url.rawInput();
        const elements = url.split("/");
        return elements[elements.length - 1];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/audio/Volume.ts
var Volume = __webpack_require__(62125);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/audio/Volume.ts



const volumeAudioParamsLabelRegister = {
  nodeClass: Volume/* VolumeAudioNode */.F,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => {
        return _paramLabelNumber(node.p.volume);
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Builder.ts
var Builder = __webpack_require__(29011);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Builder.ts


const builderCopParamsLabelRegister = {
  nodeClass: Builder/* BuilderCopNode */.G,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [
        `${node.pv.resolution.x} x ${node.pv.resolution.y} (= ${node.pv.resolution.x * node.pv.resolution.y})`,
        ...node.textureParamsController.paramLabels()
      ]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Builder2DArray.ts
var Builder2DArray = __webpack_require__(47642);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Builder2DArray.ts


const builder2DArrayCopParamsLabelRegister = {
  nodeClass: Builder2DArray/* Builder2DArrayCopNode */.k,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [
        `${node.pv.resolution.x} x ${node.pv.resolution.y} x ${node.pv.layers} (= ${node.pv.resolution.x * node.pv.resolution.y * node.pv.layers})`,
        ...node.textureParamsController.paramLabels()
      ]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Color.ts
var Color = __webpack_require__(86621);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Color.ts



const colorCopParamsLabelRegister = {
  nodeClass: Color/* ColorCopNode */.y,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => {
        return [
          _paramLabelVector2(node.p.resolution),
          _paramLabelColor(node.p.color),
          _paramLabelNumber(node.p.alpha)
        ];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/CubeCamera.ts
var CubeCamera = __webpack_require__(59160);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/CubeCamera.ts


const cubeCameraCopParamsLabelRegister = {
  nodeClass: CubeCamera/* CubeCameraCopNode */.F,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [node.pv.cameraPath]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/GeometryAttribute.ts
var GeometryAttribute = __webpack_require__(53198);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/GeometryAttribute.ts



const geometryAttributeCopParamsLabelRegister = {
  nodeClass: GeometryAttribute/* GeometryAttributeCopNode */.m,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => {
        return [
          _paramLabelNodePath(node.p.node),
          _paramLabelString(node.p.group),
          _paramLabelString(node.p.attribute)
        ];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Gif.ts
var Gif = __webpack_require__(44955);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Gif.ts


const gifCopParamsLabelRegister = {
  nodeClass: Gif/* GifCopNode */.r,
  setupFunc: (node) => {
    let params = [node.p.url];
    params = params.concat(node.textureParamsController.paramLabelsParams());
    return {
      params,
      callback: () => {
        const url = node.p.url.rawInput();
        if (url) {
          const elements = url.split("/");
          const urlLabel = elements[elements.length - 1];
          const textureLabels = node.textureParamsController.paramLabels();
          return [urlLabel].concat(textureLabels);
        } else {
          return "";
        }
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Image.ts + 1 modules
var Image = __webpack_require__(64033);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/ImageEXR.ts + 2 modules
var ImageEXR = __webpack_require__(3880);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/ImageHDR.ts + 1 modules
var ImageHDR = __webpack_require__(5874);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/ImageKTX2.ts
var ImageKTX2 = __webpack_require__(9772);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Image.ts





function getParams(node) {
  let params = [node.p.url];
  params = params.concat(node.textureParamsController.paramLabelsParams());
  return params;
}
function getCallback(node) {
  const url = node.p.url.rawInput();
  if (url) {
    const elements = url.split("/");
    const urlLabel = elements[elements.length - 1];
    const textureLabels = node.textureParamsController.paramLabels();
    return [urlLabel].concat(textureLabels);
  } else {
    return "";
  }
}
const imageCopParamsLabelRegister = {
  nodeClass: Image/* ImageCopNode */.c,
  setupFunc: (node) => {
    return {
      params: getParams(node),
      callback: () => getCallback(node)
    };
  }
};
const imageEXRCopParamsLabelRegister = {
  nodeClass: ImageEXR/* ImageEXRCopNode */.E,
  setupFunc: (node) => {
    return {
      params: getParams(node),
      callback: () => getCallback(node)
    };
  }
};
const imageHDRCopParamsLabelRegister = {
  nodeClass: ImageHDR/* ImageHDRCopNode */.E,
  setupFunc: (node) => {
    return {
      params: getParams(node),
      callback: () => getCallback(node)
    };
  }
};
const imageKTX2CopParamsLabelRegister = {
  nodeClass: ImageKTX2/* ImageKTX2CopNode */.C,
  setupFunc: (node) => {
    return {
      params: getParams(node),
      callback: () => getCallback(node)
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/LightMap.ts + 8 modules
var LightMap = __webpack_require__(83704);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/LightMap.ts



const lightMapCopParamsLabelRegister = {
  nodeClass: LightMap/* LightMapCopNode */.e,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [_paramLabelBoolean(node.p.blur), node.pv.objectsMask, node.pv.lightsMask]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Lut.ts
var Lut = __webpack_require__(1469);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Lut.ts


function Lut_getCallback(node) {
  const url = node.p.url.rawInput();
  if (url) {
    const elements = url.split("/");
    const urlLabel = elements[elements.length - 1];
    return urlLabel;
  } else {
    return "";
  }
}
const lutCopParamsLabelRegister = {
  nodeClass: Lut/* LutCopNode */.E,
  setupFunc: (node) => {
    return {
      params: [node.p.url],
      callback: () => Lut_getCallback(node)
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/MapboxElevation.ts
var MapboxElevation = __webpack_require__(41752);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/MapboxElevation.ts



const mapboxElevationCopParamsLabelRegister = {
  nodeClass: MapboxElevation/* MapboxElevationCopNode */.F,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => {
        return [
          _paramLabelNumber(node.p.longitude),
          _paramLabelNumber(node.p.latitude),
          _paramLabelNumber(node.p.zoom),
          _paramLabelBoolean(node.p.highres)
        ];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/MapboxSatellite.ts
var MapboxSatellite = __webpack_require__(76202);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/MapboxSatellite.ts



const mapboxSatelliteCopParamsLabelRegister = {
  nodeClass: MapboxSatellite/* MapboxSatelliteCopNode */.w,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => {
        return [
          _paramLabelNumber(node.p.longitude),
          _paramLabelNumber(node.p.latitude),
          _paramLabelNumber(node.p.zoom),
          _paramLabelBoolean(node.p.highres)
        ];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Render.ts
var Render = __webpack_require__(45853);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Render.ts


const renderCopParamsLabelRegister = {
  nodeClass: Render/* RenderCopNode */.j,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [node.pv.cameraPath, ...node.textureParamsController.paramLabels()]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/SDFFromObject.ts
var SDFFromObject = __webpack_require__(24285);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/SDFFromObject.ts


const sdfFromObjectCopParamsLabelRegister = {
  nodeClass: SDFFromObject/* SDFFromObjectCopNode */.g,
  setupFunc: (node) => {
    return {
      params: [node.p.geometry, node.p.voxelSize],
      callback: () => [node.p.geometry.path(), `voxelSize: ${node.pv.voxelSize}`]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/SDFFromUrl.ts
var SDFFromUrl = __webpack_require__(80786);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/SDFFromUrl.ts


const sdfFromUrlCopParamsLabelRegister = {
  nodeClass: SDFFromUrl/* SDFFromUrlCopNode */.W,
  setupFunc: (node) => {
    return {
      params: [node.p.url],
      callback: () => [node.pv.url]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Video.ts + 1 modules
var Video = __webpack_require__(59407);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/Video.ts



const videoCopParamsLabelRegister = {
  nodeClass: Video/* VideoCopNode */.T,
  setupFunc: (node) => {
    let params = [node.p.mode, node.p.urlsCount, node.p.url1, node.p.url2, node.p.url3];
    params = params.concat(node.textureParamsController.paramLabelsParams());
    return {
      params,
      callback: () => {
        const list = [_paramLabelNumber(node.p.mode)];
        const mode = node.mode();
        switch (mode) {
          case Video/* VideoMode.FROM_URLS */.t.FROM_URLS: {
            list.push(...node.urlParams().map((p) => _paramLabelString(p)));
            break;
          }
          case Video/* VideoMode.FROM_HTML_ELEMENT */.t.FROM_HTML_ELEMENT: {
            list.push(_paramLabelString(node.p.selector));
            break;
          }
        }
        const textureLabels = node.textureParamsController.paramLabels();
        list.push(...textureLabels);
        return list;
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/WebCam.ts
var WebCam = __webpack_require__(37346);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/cop/WebCam.ts



function WebCam_getParams(node) {
  let params = [node.p.facingMode];
  params = params.concat(node.textureParamsController.paramLabelsParams());
  return params;
}
function WebCam_getCallback(node) {
  const facingModeLabel = _paramLabelNumber(node.p.facingMode);
  const textureLabels = node.textureParamsController.paramLabels();
  return [facingModeLabel].concat(textureLabels);
}
const webCamCopParamsLabelRegister = {
  nodeClass: WebCam/* WebCamCopNode */.C,
  setupFunc: (node) => {
    return {
      params: WebCam_getParams(node),
      callback: () => WebCam_getCallback(node)
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Animation.ts
var Animation = __webpack_require__(91440);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Animation.ts


const animationEventParamsLabelRegister = {
  nodeClass: Animation/* AnimationEventNode */.N,
  setupFunc: (node) => ({
    params: node.p.animation,
    callback: () => node.pv.animation.path()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Block.ts
var Block = __webpack_require__(11942);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Block.ts



const blockEventParamsLabelRegister = {
  nodeClass: Block/* BlockEventNode */.G,
  setupFunc: (node) => ({
    params: node.p.blocking,
    callback: () => (0,Type/* isBooleanTrue */.bI)(node.pv.blocking) ? "blocking (X)" : "pass-through (-->)"
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/CameraMapControls.ts + 1 modules
var CameraMapControls = __webpack_require__(99546);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/CameraMapControls.ts



const cameraMapControlsEventParamsLabelRegister = {
  nodeClass: CameraMapControls/* CameraMapControlsEventNode */.K,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [
        `${_booleanAndIcon(node.pv.enabled)} enabled`,
        `${_booleanAndIcon(node.pv.allowPan)} pan`,
        `${_booleanAndIcon(node.pv.allowRotate)} rotate` + (node.pv.allowRotate ? ` (rotateSpeed: ${node.pv.rotateSpeed})` : ``),
        `${_booleanAndIcon(node.pv.allowZoom)} zoom`,
        `${_booleanAndIcon(node.pv.tdamping)} damping` + (node.pv.tdamping ? ` (${node.pv.damping})` : ``)
      ]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/CameraOrbitControls.ts
var CameraOrbitControls = __webpack_require__(48141);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/CameraOrbitControls.ts



const cameraOrbitControlsEventParamsLabelRegister = {
  nodeClass: CameraOrbitControls/* CameraOrbitControlsEventNode */.Oc,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [
        `${_booleanAndIcon(node.pv.enabled)} enabled`,
        `${_booleanAndIcon(node.pv.allowPan)} pan`,
        `${_booleanAndIcon(node.pv.allowRotate)} rotate` + (node.pv.allowRotate ? ` (rotateSpeed: ${node.pv.rotateSpeed})` : ``),
        `${_booleanAndIcon(node.pv.allowZoom)} zoom`,
        `${_booleanAndIcon(node.pv.tdamping)} damping` + (node.pv.tdamping ? ` (${node.pv.damping})` : ``)
      ]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Drag.ts
var Drag = __webpack_require__(39015);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Drag.ts


const dragEventParamsLabelRegister = {
  nodeClass: Drag/* DragEventNode */.l,
  setupFunc: (node) => {
    const params = [node.p.dragover];
    return {
      params,
      callback: () => params.map((p) => {
        return p.value ? p.name() : void 0;
      }).filter((v) => v).join(", ")
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/FirstPersonControls.ts + 2 modules
var FirstPersonControls = __webpack_require__(28962);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/FirstPersonControls.ts



const firstPersonControlsEventParamsLabelRegister = {
  nodeClass: FirstPersonControls/* FirstPersonControlsEventNode */.a,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [
        node.pv.colliderObject.path(),
        `capsuleRadius: ${node.pv.capsuleRadius}`,
        `capsuleHeight: ${node.pv.capsuleHeight}`,
        `${_booleanAndIcon(node.pv.jumpAllowed)} jump` + (node.pv.jumpAllowed ? ` (strength: ${node.pv.jumpStrength})` : ``),
        `${_booleanAndIcon(node.pv.runAllowed)} run` + (node.pv.runAllowed ? ` (speedMult: ${node.pv.runSpeedMult})` : ``)
      ]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Keyboard.ts
var Keyboard = __webpack_require__(53687);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Keyboard.ts


const keyboardEventParamsLabelRegister = {
  nodeClass: Keyboard/* KeyboardEventNode */.b,
  setupFunc: (node) => {
    const eventParams = [node.p.keydown, node.p.keypress, node.p.keyup];
    return {
      params: eventParams.concat([node.p.keyCodes]),
      callback: () => {
        const eventNames = eventParams.map((p) => {
          return p.value ? p.name() : void 0;
        }).filter((v) => v).join(", ");
        return `${eventNames} (${node.pv.keyCodes})`;
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/MobileJoystickControls.ts + 5 modules
var MobileJoystickControls = __webpack_require__(89518);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/MobileJoystickControls.ts



const mobileJoystickControlsEventParamsLabelRegister = {
  nodeClass: MobileJoystickControls/* MobileJoystickControlsEventNode */.w,
  setupFunc: (node) => {
    return {
      params: node.params.all,
      callback: () => [
        node.pv.colliderObject.path(),
        `capsuleRadius: ${node.pv.capsuleRadius}`,
        `capsuleHeight: ${node.pv.capsuleHeight}`,
        `${_booleanAndIcon(node.pv.jumpAllowed)} jump` + (node.pv.jumpAllowed ? ` (strength: ${node.pv.jumpStrength})` : ``),
        `${_booleanAndIcon(node.pv.runAllowed)} run` + (node.pv.runAllowed ? ` (speedMult: ${node.pv.runSpeedMult})` : ``)
      ]
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Mouse.ts
var Mouse = __webpack_require__(61473);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Mouse.ts


const mouseEventParamsLabelRegister = {
  nodeClass: Mouse/* MouseEventNode */.F,
  setupFunc: (node) => {
    const params = [
      node.p.auxclick,
      node.p.click,
      node.p.dblclick,
      node.p.mousedown,
      node.p.mouseenter,
      node.p.mouseleave,
      node.p.mousemove,
      node.p.mouseout,
      node.p.mouseout,
      node.p.mouseup,
      node.p.pointerlockchange,
      node.p.pointerlockerror,
      node.p.select,
      node.p.wheel
    ];
    return {
      params,
      callback: () => params.map((p) => {
        return p.value ? p.name() : void 0;
      }).filter((v) => v).join(", ")
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Param.ts
var Param = __webpack_require__(58036);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Param.ts


const paramEventParamsLabelRegister = {
  nodeClass: Param/* ParamEventNode */.v,
  setupFunc: (node) => ({
    params: node.p.param,
    callback: () => node.pv.param.path()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Pointer.ts
var Pointer = __webpack_require__(77131);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Pointer.ts


const pointerEventParamsLabelRegister = {
  nodeClass: Pointer/* PointerEventNode */.B,
  setupFunc: (node) => {
    const params = [node.p.pointerdown, node.p.pointermove, node.p.pointerup];
    return {
      params,
      callback: () => params.map((p) => {
        return p.value ? p.name() : void 0;
      }).filter((v) => v).join(", ")
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Scene.ts
var Scene = __webpack_require__(84635);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Scene.ts


const sceneEventParamsLabelRegister = {
  nodeClass: Scene/* SceneEventNode */.y,
  setupFunc: (node) => {
    const params = [node.p.created, node.p.ready, node.p.play, node.p.pause, node.p.tick];
    return {
      params,
      callback: () => params.map((p) => {
        return p.value ? p.name() : void 0;
      }).filter((v) => v).join(", ")
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/ScrollTrigger.ts
var ScrollTrigger = __webpack_require__(24732);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/ScrollTrigger.ts


const scrollTriggerEventParamsLabelRegister = {
  nodeClass: ScrollTrigger/* ScrollTriggerEventNode */.n,
  setupFunc: (node) => {
    const params = [
      node.p.active,
      node.p.element,
      node.p.onToggle,
      node.p.onEnter,
      node.p.onLeave,
      node.p.onEnterBack,
      node.p.onLeaveBack
    ];
    return {
      params,
      callback: () => {
        if (node.pv.active) {
          const eventNames = params.map((p) => {
            return p.value ? p.name() : void 0;
          }).filter((v) => v).join(", ");
          return `${eventNames} (${node.pv.element})`;
        } else {
          return "x";
        }
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/SetParam.ts
var SetParam = __webpack_require__(27436);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/SetParam.ts


const setParamEventParamsLabelRegister = {
  nodeClass: SetParam/* SetParamEventNode */.N,
  setupFunc: (node) => ({
    params: node.p.param,
    callback: () => node.pv.param.path()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Touch.ts
var Touch = __webpack_require__(94248);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Touch.ts


const touchEventParamsLabelRegister = {
  nodeClass: Touch/* TouchEventNode */.F,
  setupFunc: (node) => {
    const params = [node.p.touchstart, node.p.touchmove, node.p.touchend];
    return {
      params,
      callback: () => params.map((p) => {
        return p.value ? p.name() : void 0;
      }).filter((v) => v).join(", ")
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/Window.ts
var Window = __webpack_require__(58558);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/event/Window.ts


const windowEventParamsLabelRegister = {
  nodeClass: Window/* WindowEventNode */.l,
  setupFunc: (node) => {
    const params = [node.p.resize];
    return {
      params,
      callback: () => params.map((p) => {
        return p.value ? p.name() : void 0;
      }).filter((v) => v).join(", ")
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/Attribute.ts
var Attribute = __webpack_require__(96677);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/Attribute.ts



const attributeGlParamsLabelRegister = {
  nodeClass: Attribute/* AttributeGlNode */.W,
  setupFunc: (node) => ({
    params: [node.p.name, node.p.exportWhenConnected],
    callback: () => (0,Type/* isBooleanTrue */.bI)(node.pv.exportWhenConnected) ? `${node.pv.name} (EXPORTED)` : node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/ColorCorrect.ts
var ColorCorrect = __webpack_require__(90979);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/ColorCorrect.ts


const colorCorrectGlParamsLabelRegister = {
  nodeClass: ColorCorrect/* ColorCorrectGlNode */.W,
  setupFunc: (node) => ({
    params: [node.p.from, node.p.to],
    callback: () => {
      const spaces = node.colorSpaces();
      return `${spaces.from} -> ${spaces.to}`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/Compare.ts
var Compare = __webpack_require__(928);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/Compare.ts


const compareGlParamsLabelRegister = {
  nodeClass: Compare/* CompareGlNode */._,
  setupFunc: (node) => ({
    params: [node.p.test],
    callback: () => {
      return `${node.operator().padEnd(2, " ")} (${node.testName()})`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Color.ts
var params_Color = __webpack_require__(50673);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/Constant.ts
var Constant = __webpack_require__(94962);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/Constant.ts




const constantGlParamsLabelRegister = {
  nodeClass: Constant/* ConstantGlNode */.$,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const param = node.currentParam();
      if (param instanceof params_Color/* ColorParam */.A) {
        return colorToParamLabelString(param.value);
      } else {
        return node.currentValue() || "";
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/Param.ts
var gl_Param = __webpack_require__(67167);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/Param.ts


const paramGlParamsLabelRegister = {
  nodeClass: gl_Param/* ParamGlNode */.X,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/Ramp.ts
var gl_Ramp = __webpack_require__(20525);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/Ramp.ts


const rampGlParamsLabelRegister = {
  nodeClass: gl_Ramp/* RampGlNode */.d,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/SDFRepeat.ts
var SDFRepeat = __webpack_require__(47375);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/SDFRepeat.ts



const x = "X";
const y = "Y";
const z = "Z";
const SDFRepeatGlParamsLabelRegister = {
  nodeClass: SDFRepeat/* SDFRepeatGlNode */.H,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      let axises = [];
      if (node.repeatAll()) {
        axises.push(x, y, z);
      } else {
        if ((0,Type/* isBooleanTrue */.bI)(node.pv.repeatX)) {
          axises.push(x);
        }
        if ((0,Type/* isBooleanTrue */.bI)(node.pv.repeatY)) {
          axises.push(y);
        }
        if ((0,Type/* isBooleanTrue */.bI)(node.pv.repeatZ)) {
          axises.push(z);
        }
      }
      const list = [`repeat: ${axises.join(",")}`];
      if (node.clamped()) {
        let clampedAxises = [];
        if (node.clampedAll()) {
          clampedAxises.push(x, y, z);
        } else {
          if (node.clampedX()) {
            clampedAxises.push(x);
          }
          if (node.clampedY()) {
            clampedAxises.push(y);
          }
          if (node.clampedZ()) {
            clampedAxises.push(z);
          }
        }
        list.push(`clamped: ${clampedAxises.join(",")}`);
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/Texture.ts + 1 modules
var Texture = __webpack_require__(61745);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/Texture.ts


const textureGlParamsLabelRegister = {
  nodeClass: Texture/* TextureGlNode */.q,
  setupFunc: (node) => ({
    params: node.p.paramName,
    callback: () => node.pv.paramName
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/TextureSDF.ts
var TextureSDF = __webpack_require__(22404);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/TextureSDF.ts


const textureSDFGlParamsLabelRegister = {
  nodeClass: TextureSDF/* TextureSDFGlNode */.k,
  setupFunc: (node) => ({
    params: node.p.paramName,
    callback: () => node.pv.paramName
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/VaryingRead.ts
var VaryingRead = __webpack_require__(75910);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/VaryingRead.ts


const varyingReadGlGlParamsLabelRegister = {
  nodeClass: VaryingRead/* VaryingReadGlNode */.V,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/VaryingWrite.ts
var VaryingWrite = __webpack_require__(65670);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/gl/VaryingWrite.ts


const varyingWriteGlParamsLabelRegister = {
  nodeClass: VaryingWrite/* VaryingWriteGlNode */.N,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/Attribute.ts
var js_Attribute = __webpack_require__(6145);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/Attribute.ts



const attributeJsParamsLabelRegister = {
  nodeClass: js_Attribute/* AttributeJsNode */.Lq,
  setupFunc: (node) => ({
    params: [node.p.name, node.p.exportWhenConnected],
    callback: () => (0,Type/* isBooleanTrue */.bI)(node.pv.exportWhenConnected) ? `${node.pv.name} (EXPORTED)` : node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/AnimationAction.ts
var AnimationAction = __webpack_require__(67964);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/AnimationAction.ts


const animationActionJsParamsLabelRegister = {
  nodeClass: AnimationAction/* AnimationActionJsNode */.h,
  setupFunc: (node) => ({
    params: node.p.clipName,
    callback: () => node.pv.clipName
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/Compare.ts
var js_Compare = __webpack_require__(4561);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/Compare.ts


const compareJsParamsLabelRegister = {
  nodeClass: js_Compare/* CompareJsNode */._,
  setupFunc: (node) => ({
    params: [node.p.test],
    callback: () => {
      return `${node.operator().padEnd(2, " ")} (${node.testName()})`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/String.ts
var params_String = __webpack_require__(63686);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Vector4.ts
var Vector4 = __webpack_require__(47184);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Vector3.ts
var Vector3 = __webpack_require__(65703);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Vector2.ts
var Vector2 = __webpack_require__(80259);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Integer.ts
var Integer = __webpack_require__(65450);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Float.ts
var Float = __webpack_require__(76356);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/Boolean.ts
var Boolean = __webpack_require__(77752);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/Constant.ts
var js_Constant = __webpack_require__(34253);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/Constant.ts











const constantJsParamsLabelRegister = {
  nodeClass: js_Constant/* ConstantJsNode */.g,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const param = node.currentParam();
      if (param instanceof params_Color/* ColorParam */.A) {
        return colorToParamLabelString(param.value);
      }
      if (param instanceof Boolean/* BooleanParam */.d) {
        return _paramLabelBoolean(param, { displayLabel: false });
      }
      if (param instanceof params_String/* StringParam */.Z) {
        return _paramLabelString(param, { displayLabel: false });
      }
      if (param instanceof Float/* FloatParam */.Z || param instanceof Integer/* IntegerParam */.N) {
        return _paramLabelNumber(param, { displayLabel: false });
      }
      if (param instanceof Vector2/* Vector2Param */.l || param instanceof Vector3/* Vector3Param */.q || param instanceof Vector4/* Vector4Param */.G) {
        return _paramLabelVector(param, { displayLabel: false });
      }
      return "";
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/Cursor.ts
var Cursor = __webpack_require__(30645);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/Cursor.ts


const cursorJsNodeActorParamsLabelRegister = {
  nodeClass: Cursor/* CursorJsNode */.T,
  setupFunc: (node) => ({
    params: [node.p.element],
    callback: () => {
      return [node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/math/Easing.ts
var math_Easing = __webpack_require__(71971);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/Easing.ts
var js_Easing = __webpack_require__(61038);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/Easing.ts



const easingJsParamsLabelRegister = {
  nodeClass: js_Easing/* EasingJsNode */.H,
  setupFunc: (node) => ({
    params: [node.p.type],
    callback: () => {
      return math_Easing/* EASING_NAMES */.RP[node.pv.type];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetChildrenAttributes.ts
var GetChildrenAttributes = __webpack_require__(11919);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetChildrenAttributes.ts


const getChildrenAttributesJsNodeJsParamsLabelRegister = {
  nodeClass: GetChildrenAttributes/* GetChildrenAttributesJsNode */.y,
  setupFunc: (node) => ({
    params: [],
    callback: () => {
      return [];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetGeometryNodeObjects.ts
var GetGeometryNodeObjects = __webpack_require__(90223);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetGeometryNodeObjects.ts


const getGeometryNodeObjectsJsNodeJsParamsLabelRegister = {
  nodeClass: GetGeometryNodeObjects/* GetGeometryNodeObjectsJsNode */.s,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetNode.ts
var GetNode = __webpack_require__(44642);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetNode.ts


const getNodeJsNodeJsParamsLabelRegister = {
  nodeClass: GetNode/* GetNodeJsNode */.z,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return node.pv.Node.path();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetObjectChild.ts
var GetObjectChild = __webpack_require__(85528);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetObjectChild.ts


const getObjectChildJsNodeJsParamsLabelRegister = {
  nodeClass: GetObjectChild/* GetObjectChildJsNode */.H,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetMaterial.ts
var GetMaterial = __webpack_require__(67946);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetMaterial.ts


const getMaterialJsNodeJsParamsLabelRegister = {
  nodeClass: GetMaterial/* GetMaterialJsNode */.X,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => {
      return node.pv.node.path();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetObject.ts
var GetObject = __webpack_require__(46208);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetObject.ts



const getObjectJsNodeJsParamsLabelRegister = {
  nodeClass: GetObject/* GetObjectJsNode */.l,
  setupFunc: (node) => ({
    params: [node.p.getCurrentObject, node.p.mask],
    callback: () => {
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.getCurrentObject)) {
        return "currentObject";
      } else {
        return node.p.mask.rawInput();
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetObjectAttribute.ts
var GetObjectAttribute = __webpack_require__(76706);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetObjectAttribute.ts



const getObjectAttributeJsNodeJsParamsLabelRegister = {
  nodeClass: GetObjectAttribute/* GetObjectAttributeJsNode */.h,
  setupFunc: (node) => ({
    params: [node.p.type],
    callback: () => {
      return [_paramLabelNumber(node.p.type)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetObjectUserData.ts
var GetObjectUserData = __webpack_require__(17832);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetObjectUserData.ts



const getObjectUserDataJsNodeJsParamsLabelRegister = {
  nodeClass: GetObjectUserData/* GetObjectUserDataJsNode */.r,
  setupFunc: (node) => ({
    params: [node.p.name, node.p.type],
    callback: () => {
      return [node.pv.name, _paramLabelNumber(node.p.type)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetParam.ts
var GetParam = __webpack_require__(13941);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetParam.ts


const getParamJsParamsLabelRegister = {
  nodeClass: GetParam/* GetParamJsNode */.V,
  setupFunc: (node) => ({
    params: node.p.Param,
    callback: () => node.pv.Param.path()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetTexture.ts
var GetTexture = __webpack_require__(99860);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetTexture.ts


const getTextureJsNodeJsParamsLabelRegister = {
  nodeClass: GetTexture/* GetTextureJsNode */.D,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => {
      return node.pv.node.path();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/GetVideoProperty.ts
var GetVideoProperty = __webpack_require__(84283);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/GetVideoProperty.ts



const getVideoPropertyJsNodeJsParamsLabelRegister = {
  nodeClass: GetVideoProperty/* GetVideoPropertyJsNode */.S,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return _paramLabelNodePath(node.p.node);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/ImportAttribute.ts
var ImportAttribute = __webpack_require__(19633);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/ImportAttribute.ts


const importAttributeJsParamsLabelRegister = {
  nodeClass: ImportAttribute/* ImportAttributeJsNode */.dQ,
  setupFunc: (node) => ({
    params: [node.p.name],
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnChildAttributeUpdate.ts
var OnChildAttributeUpdate = __webpack_require__(11205);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnChildAttributeUpdate.ts



const onChildAttributeUpdateJsNodeJsParamsLabelRegister = {
  nodeClass: OnChildAttributeUpdate/* OnChildAttributeUpdateJsNode */.i,
  setupFunc: (node) => ({
    params: node.p.type,
    callback: () => {
      return _paramLabelNumber(node.p.type);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnKey.ts
var OnKey = __webpack_require__(96274);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnKey.ts



const onKeyJsNodeParamsLabelRegister = {
  nodeClass: OnKey/* OnKeyJsNode */.F,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelString(node.p.keyCodes), node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnKeydown.ts
var OnKeydown = __webpack_require__(36332);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnKeydown.ts



const onKeydownJsNodeParamsLabelRegister = {
  nodeClass: OnKeydown/* OnKeydownJsNode */.Y,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelString(node.p.keyCodes), node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnKeypress.ts
var OnKeypress = __webpack_require__(69600);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnKeypress.ts



const onKeypressJsNodeParamsLabelRegister = {
  nodeClass: OnKeypress/* OnKeypressJsNode */.f,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelString(node.p.keyCodes), node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnKeyup.ts
var OnKeyup = __webpack_require__(64607);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnKeyup.ts



const onKeyupJsNodeParamsLabelRegister = {
  nodeClass: OnKeyup/* OnKeyupJsNode */.y,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelString(node.p.keyCodes), node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnObjectAttributeUpdate.ts
var OnObjectAttributeUpdate = __webpack_require__(38324);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnObjectAttributeUpdate.ts



const onObjectAttributeUpdateJsNodeParamsLabelRegister = {
  nodeClass: OnObjectAttributeUpdate/* OnObjectAttributeUpdateJsNode */.v,
  setupFunc: (node) => ({
    params: [node.p.type],
    callback: () => {
      return [_paramLabelNumber(node.p.type)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnObjectClick.ts
var OnObjectClick = __webpack_require__(75115);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnObjectClick.ts


const onObjectClickJsNodeJsParamsLabelRegister = {
  nodeClass: OnObjectClick/* OnObjectClickJsNode */.U,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return node.eventEmitter();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnObjectDispatchEvent.ts
var OnObjectDispatchEvent = __webpack_require__(42329);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnObjectDispatchEvent.ts


const onObjectDispatchEventJsNodeJsNodeJsParamsLabelRegister = {
  nodeClass: OnObjectDispatchEvent/* OnObjectDispatchEventJsNode */.$,
  setupFunc: (node) => ({
    params: node.p.eventNames,
    callback: () => {
      return node.p.eventNames.rawInput();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnObjectPointerdown.ts
var OnObjectPointerdown = __webpack_require__(55149);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnObjectPointerdown.ts


const onObjectPointerdownJsNodeParamsLabelRegister = {
  nodeClass: OnObjectPointerdown/* OnObjectPointerdownJsNode */.Q,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnObjectPointerup.ts
var OnObjectPointerup = __webpack_require__(7164);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnObjectPointerup.ts


const onObjectPointerupJsNodeParamsLabelRegister = {
  nodeClass: OnObjectPointerup/* OnObjectPointerupJsNode */.z,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnPointerdown.ts
var OnPointerdown = __webpack_require__(52093);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnPointerdown.ts


const onPointerdownJsNodeParamsLabelRegister = {
  nodeClass: OnPointerdown/* OnPointerdownJsNode */.y,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnPointerup.ts
var OnPointerup = __webpack_require__(19705);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnPointerup.ts


const onPointerupJsNodeParamsLabelRegister = {
  nodeClass: OnPointerup/* OnPointerupJsNode */.b,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [node.eventEmitter()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/OnVideoEvent.ts
var OnVideoEvent = __webpack_require__(94027);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/OnVideoEvent.ts



const onVideoEventJsNodeJsParamsLabelRegister = {
  nodeClass: OnVideoEvent/* OnVideoEventJsNode */.$,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return _paramLabelNodePath(node.p.node);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/Param.ts
var js_Param = __webpack_require__(27568);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/Param.ts



const paramJsNodeParamsLabelRegister = {
  nodeClass: js_Param/* ParamJsNode */.p,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => _paramLabelString(node.p.name)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/PauseAudioSource.ts
var PauseAudioSource = __webpack_require__(2794);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/PauseAudioSource.ts


const pauseAudioSourceJsNodeJsParamsLabelRegister = {
  nodeClass: PauseAudioSource/* PauseAudioSourceJsNode */.s,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => {
      return node.pv.node.path();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/PlayAnimation.ts
var PlayAnimation = __webpack_require__(97179);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/PlayAnimation.ts


const playAnimationJsNodeJsParamsLabelRegister = {
  nodeClass: PlayAnimation/* PlayAnimationJsNode */.r,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => {
      return node.pv.node.path();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/PlayAudioSource.ts
var PlayAudioSource = __webpack_require__(80701);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/PlayAudioSource.ts


const playAudioSourceJsNodeJsParamsLabelRegister = {
  nodeClass: PlayAudioSource/* PlayAudioSourceJsNode */.J,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => {
      return node.pv.node.path();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/PlayInstrumentNote.ts
var PlayInstrumentNote = __webpack_require__(6365);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/PlayInstrumentNote.ts


const playInstrumentNoteJsNodeJsParamsLabelRegister = {
  nodeClass: PlayInstrumentNote/* PlayInstrumentNoteJsNode */.D,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => {
      return node.pv.node.path();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/RayFromCursor.ts
var RayFromCursor = __webpack_require__(81025);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/RayFromCursor.ts


const rayFromCursorJsNodeActorParamsLabelRegister = {
  nodeClass: RayFromCursor/* RayFromCursorJsNode */.C,
  setupFunc: (node) => ({
    params: node.p.element,
    callback: () => {
      return node.eventEmitter();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetMaterialUniform.ts
var SetMaterialUniform = __webpack_require__(21615);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetMaterialUniform.ts


const setMaterialUniformJsNodeJsParamsLabelRegister = {
  nodeClass: SetMaterialUniform/* SetMaterialUniformJsNode */.d,
  setupFunc: (node) => ({
    params: [node.p.type],
    callback: () => {
      return `${node.uniformType()}`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetObjectAttribute.ts
var SetObjectAttribute = __webpack_require__(8660);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetObjectAttribute.ts



const setObjectAttributeJsNodeParamsLabelRegister = {
  nodeClass: SetObjectAttribute/* SetObjectAttributeJsNode */.c,
  setupFunc: (node) => ({
    params: [node.p.type],
    callback: () => {
      return [_paramLabelNumber(node.p.type)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetObjectLookAt.ts
var SetObjectLookAt = __webpack_require__(25532);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetObjectLookAt.ts



const setObjectLookAtJsNodeJsParamsLabelRegister = {
  nodeClass: SetObjectLookAt/* SetObjectLookAtJsNode */.c,
  setupFunc: (node) => ({
    params: node.p.updateMatrix,
    callback: () => {
      return _paramLabelBoolean(node.p.updateMatrix);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetObjectPolarTransform.ts
var SetObjectPolarTransform = __webpack_require__(99291);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetObjectPolarTransform.ts


const setObjectPolarTransformJsNodeJsParamsLabelRegister = {
  nodeClass: SetObjectPolarTransform/* SetObjectPolarTransformJsNode */.M,
  setupFunc: (node) => ({
    params: [],
    callback: () => {
      return [];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetObjectPosition.ts
var SetObjectPosition = __webpack_require__(71484);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetObjectPosition.ts



const setObjectPositionJsNodeJsParamsLabelRegister = {
  nodeClass: SetObjectPosition/* SetObjectPositionJsNode */.S,
  setupFunc: (node) => ({
    params: node.p.updateMatrix,
    callback: () => {
      return _paramLabelBoolean(node.p.updateMatrix);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetObjectRotation.ts
var SetObjectRotation = __webpack_require__(53866);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetObjectRotation.ts



const setObjectRotationJsNodeJsParamsLabelRegister = {
  nodeClass: SetObjectRotation/* SetObjectRotationJsNode */.D,
  setupFunc: (node) => ({
    params: node.p.updateMatrix,
    callback: () => {
      return _paramLabelBoolean(node.p.updateMatrix);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetObjectScale.ts
var SetObjectScale = __webpack_require__(99669);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetObjectScale.ts



const setObjectScaleJsNodeJsParamsLabelRegister = {
  nodeClass: SetObjectScale/* SetObjectScaleJsNode */.w,
  setupFunc: (node) => ({
    params: node.p.updateMatrix,
    callback: () => {
      return _paramLabelBoolean(node.p.updateMatrix);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/js/SetParam.ts
var js_SetParam = __webpack_require__(16130);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/js/SetParam.ts


const setParamJsParamsLabelRegister = {
  nodeClass: js_SetParam/* SetParamJsNode */.g,
  setupFunc: (node) => ({
    params: [],
    //node.p.param,
    callback: () => []
    //node.pv.param.path(),
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/_Base.ts
var mat_Base = __webpack_require__(78058);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/ColorsController.ts
var ColorsController = __webpack_require__(40330);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/Color.ts

var Color_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



class ColorMatParamsConfig extends (0,ColorsController/* ColorParamConfig */.Pn)(ParamsConfig/* NodeParamsConfig */.yI) {
}
const Color_ParamsConfig = new ColorMatParamsConfig();
class ColorMatNode extends mat_Base/* UpdateMatNode */.ic {
  constructor() {
    super(...arguments);
    this.paramsConfig = Color_ParamsConfig;
    this.controllers = {
      colors: new ColorsController/* ColorsController */.br(this)
    };
  }
  static type() {
    return "color";
  }
  cook(inputMaterials) {
    return Color_async(this, null, function* () {
      const inputMaterial = inputMaterials[0];
      const controller = this.controllers.colors;
      if ((0,ColorsController/* isValidColoredMaterial */.rI)(inputMaterial)) {
        controller.updateMaterial(inputMaterial);
        this.setMaterial(inputMaterial);
      } else {
        this.states.error.set("input material does not have color properties");
      }
    });
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/Color.ts



const colorMatParamsLabelRegister = {
  nodeClass: ColorMatNode,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      colorToParamLabelString(node.pv.color),
      `${_booleanAndIcon(node.pv.useVertexColors)} useVertexColors`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureEnvMapController.ts
var TextureEnvMapController = __webpack_require__(5481);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/EnvMap.ts

var EnvMap_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



class EnvMapMatParamsConfig extends (0,TextureEnvMapController/* EnvMapParamConfig */.s7)(ParamsConfig/* NodeParamsConfig */.yI) {
}
const EnvMap_ParamsConfig = new EnvMapMatParamsConfig();
class EnvMapMatNode extends mat_Base/* UpdateMatNode */.ic {
  constructor() {
    super(...arguments);
    this.paramsConfig = EnvMap_ParamsConfig;
    this.controllers = {
      envMap: new TextureEnvMapController/* TextureEnvMapController */.nz(this)
    };
  }
  static type() {
    return "envMap";
  }
  cook(inputMaterials) {
    return EnvMap_async(this, null, function* () {
      const inputMaterial = inputMaterials[0];
      const controller = this.controllers.envMap;
      if ((0,TextureEnvMapController/* isValidEnvMapMaterial */._v)(inputMaterial)) {
        yield controller.updateMaterial(inputMaterial);
        this.setMaterial(inputMaterial);
      } else {
        this.states.error.set("input material does not have envMap properties");
      }
    });
  }
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/EnvMap.ts



const envMapMatParamsLabelRegister = {
  nodeClass: EnvMapMatNode,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      `${_booleanAndIcon(node.pv.useEnvMap)} useEnvMap` + (node.pv.useEnvMap ? `: ${node.pv.envMap.path()}` : ``)
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/LineBasic.ts
var LineBasic = __webpack_require__(87000);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/LineBasic.ts



const lineBasicMatParamsLabelRegister = {
  nodeClass: LineBasic/* LineBasicMatNode */.N,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [colorToParamLabelString(node.pv.color), `lineWidth: ${node.pv.lineWidth}`]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshBasic.ts
var MeshBasic = __webpack_require__(94978);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/utils/Sided.ts

function _matSide(node) {
  return node.pv.front ? "front sided" : node.pv.doubleSided ? "double sided" : "back sided";
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshBasic.ts




const meshBasicMatParamsLabelRegister = {
  nodeClass: MeshBasic/* MeshBasicMatNode */.F,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      list.push(colorToParamLabelString(node.pv.color));
      list.push(_paramLabelBoolean(node.p.useVertexColors));
      _paramLabelNodePathIf(node.p.useMap, node.p.map, list);
      list.push(_matSide(node));
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshMatcap.ts + 1 modules
var MeshMatcap = __webpack_require__(40453);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshMatcap.ts



const meshMatcapMatParamsLabelRegister = {
  nodeClass: MeshMatcap/* MeshMatcapMatNode */.p,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      colorToParamLabelString(node.pv.color),
      `${_booleanAndIcon(node.pv.useMatcapMap)} matcap` + (node.pv.useMatcapMap ? `: ${node.pv.matcapMap.path()}` : ``)
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhong.ts
var MeshPhong = __webpack_require__(69312);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshPhong.ts



const meshPhongMatParamsLabelRegister = {
  nodeClass: MeshPhong/* MeshPhongMatNode */.b,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      colorToParamLabelString(node.pv.color),
      `${_booleanAndIcon(node.pv.useVertexColors)} useVertexColors`,
      `${_booleanAndIcon(node.pv.useEnvMap)} useEnvMap` + (node.pv.useEnvMap ? `: ${node.pv.envMap.path()}` : ``)
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhysical.ts
var MeshPhysical = __webpack_require__(65349);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshPhysical.ts



const meshPhysicalMatParamsLabelRegister = {
  nodeClass: MeshPhysical/* MeshPhysicalMatNode */.l,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [
        colorToParamLabelString(node.pv.color),
        `${_booleanAndIcon(node.pv.useVertexColors)} useVertexColors`,
        `${_booleanAndIcon(node.pv.useEnvMap)} useEnvMap` + (node.pv.useEnvMap ? `: ${node.pv.envMap.path()}` : ``),
        `roughness: ${node.pv.roughness}`,
        `metalness: ${node.pv.metalness}`,
        `transmission: ${node.pv.transmission}`
      ];
      if (node.pv.transmission > 0) {
        list.push(...[`ior: ${node.pv.ior}`, `thickness: ${node.pv.thickness}`]);
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhysicalBuilder.ts
var MeshPhysicalBuilder = __webpack_require__(80388);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshPhysicalBuilder.ts



const meshPhysicalBuilderMatParamsLabelRegister = {
  nodeClass: MeshPhysicalBuilder/* MeshPhysicalBuilderMatNode */.Z,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      `${_booleanAndIcon(node.pv.useEnvMap)} useEnvMap` + (node.pv.useEnvMap ? `: ${node.pv.envMap.path()}` : ``),
      `roughness: ${node.pv.roughness}`,
      `metalness: ${node.pv.metalness}`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshStandard.ts
var MeshStandard = __webpack_require__(13076);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshStandard.ts



const meshStandardMatParamsLabelRegister = {
  nodeClass: MeshStandard/* MeshStandardMatNode */.Q,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      colorToParamLabelString(node.pv.color),
      `${_booleanAndIcon(node.pv.useVertexColors)} useVertexColors`,
      `${_booleanAndIcon(node.pv.useEnvMap)} useEnvMap` + (node.pv.useEnvMap ? `: ${node.pv.envMap.path()}` : ``),
      `roughness: ${node.pv.roughness}`,
      `metalness: ${node.pv.metalness}`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshStandardBuilder.ts
var MeshStandardBuilder = __webpack_require__(53950);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshStandardBuilder.ts



const meshStandardBuilderMatParamsLabelRegister = {
  nodeClass: MeshStandardBuilder/* MeshStandardBuilderMatNode */.k,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      `${_booleanAndIcon(node.pv.useEnvMap)} useEnvMap` + (node.pv.useEnvMap ? `: ${node.pv.envMap.path()}` : ``),
      `roughness: ${node.pv.roughness}`,
      `metalness: ${node.pv.metalness}`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshToon.ts
var MeshToon = __webpack_require__(46584);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/MeshToon.ts



const meshToonMatParamsLabelRegister = {
  nodeClass: MeshToon/* MeshToonMatNode */.a,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      colorToParamLabelString(node.pv.color),
      `${_booleanAndIcon(node.pv.useVertexColors)} useVertexColors`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/Points.ts
var Points = __webpack_require__(83760);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/Points.ts



const pointsMatParamsLabelRegister = {
  nodeClass: Points/* PointsMatNode */.k,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [colorToParamLabelString(node.pv.color), `size: ${node.pv.size}`]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/RayMarchingBuilder.ts + 2 modules
var RayMarchingBuilder = __webpack_require__(13839);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/mat/RayMarchingBuilder.ts



const rayMarchingBuilderMatParamsLabelRegister = {
  nodeClass: RayMarchingBuilder/* RayMarchingBuilderMatNode */.n,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_matSide(node)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/AreaLight.ts
var AreaLight = __webpack_require__(31787);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/common/ParamLabelsLight.ts


function lightShowHelper(node) {
  return node.pv.showHelper ? "\u{1F4A1}+\u{1F50D} helper visible" : "\u{1F4A1} light only";
}
function intensity(node) {
  return `intensity: ${node.pv.intensity}`;
}
function paramsLabelAmbientLight(node) {
  return [colorToParamLabelString(node.pv.color), intensity(node)];
}
function paramsLabelAreaLight(node) {
  return [
    colorToParamLabelString(node.pv.color),
    intensity(node),
    `size: ${node.pv.width}x${node.pv.height}`,
    lightShowHelper(node)
  ];
}
function paramsLabelDirectionalLight(node) {
  return [colorToParamLabelString(node.pv.color), intensity(node), lightShowHelper(node)];
}
function paramsLabelHemisphereLight(node) {
  return [colorToParamLabelString(node.pv.skyColor), colorToParamLabelString(node.pv.groundColor), intensity(node)];
}
function paramsLabelPointLight(node) {
  return [colorToParamLabelString(node.pv.color), intensity(node), lightShowHelper(node)];
}
function paramsLabelSpotLight(node) {
  return [colorToParamLabelString(node.pv.color), intensity(node), lightShowHelper(node)];
}

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/AreaLight.ts



const areaLightObjParamsLabelRegister = {
  nodeClass: AreaLight/* AreaLightObjNode */.$,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelAreaLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/AmbientLight.ts
var AmbientLight = __webpack_require__(83409);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/AmbientLight.ts



const ambientLightObjParamsLabelRegister = {
  nodeClass: AmbientLight/* AmbientLightObjNode */.D,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelAmbientLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/AudioListener.ts + 1 modules
var AudioListener = __webpack_require__(88012);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/AudioListener.ts



const audioListenerObjParamsLabelRegister = {
  nodeClass: AudioListener/* AudioListenerObjNode */.C,
  setupFunc: (node) => ({
    params: node.p.soundOn,
    callback: () => _booleanAndIcon(node.pv.soundOn)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/DirectionalLight.ts
var DirectionalLight = __webpack_require__(64303);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/DirectionalLight.ts



const directionalLightObjParamsLabelRegister = {
  nodeClass: DirectionalLight/* DirectionalLightObjNode */.g,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelDirectionalLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/HemisphereLight.ts
var HemisphereLight = __webpack_require__(98971);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/HemisphereLight.ts



const hemisphereLightObjParamsLabelRegister = {
  nodeClass: HemisphereLight/* HemisphereLightObjNode */.f,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelHemisphereLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/PointLight.ts + 3 modules
var PointLight = __webpack_require__(56701);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/PointLight.ts



const pointLightObjParamsLabelRegister = {
  nodeClass: PointLight/* PointLightObjNode */.b,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelPointLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/manager/utils/Scene/Background.ts
var Background = __webpack_require__(1934);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/Scene.ts
var obj_Scene = __webpack_require__(92211);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/Scene.ts





const sceneObjParamsLabelRegister = {
  nodeClass: obj_Scene/* SceneObjNode */.H,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      list.push(`${_booleanAndIcon(node.pv.autoUpdate)} autoUpdate`);
      const backgroundMode = Background/* BACKGROUND_MODES */.ew[node.pv.backgroundMode];
      list.push(`backgroundMode: ${backgroundMode}`);
      function addBackgroundMode(backgroundMode2) {
        switch (backgroundMode2) {
          case Background/* BackgroundMode.NONE */.zc.NONE: {
            return;
          }
          case Background/* BackgroundMode.COLOR */.zc.COLOR: {
            list.push(colorToParamLabelString(node.pv.bgColor));
            return;
          }
          case Background/* BackgroundMode.TEXTURE */.zc.TEXTURE: {
            list.push(node.pv.bgTexture.path());
            return;
          }
        }
        Assert/* TypeAssert.unreachable */.f.unreachable(backgroundMode2);
      }
      addBackgroundMode(backgroundMode);
      list.push(`${_booleanAndIcon(node.pv.useFog)} fog`);
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/SpotLight.ts
var SpotLight = __webpack_require__(78166);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/obj/SpotLight.ts



const spotLightObjParamsLabelRegister = {
  nodeClass: SpotLight/* SpotLightObjNode */.c,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelSpotLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/post/Bloom.ts
var Bloom = __webpack_require__(90278);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/post/Bloom.ts



const bloomPostParamsLabelRegister = {
  nodeClass: Bloom/* BloomPostNode */.H,
  setupFunc: (node) => ({
    params: [node.p.threshold, node.p.strength],
    callback: () => [_paramLabelNumber(node.p.threshold), _paramLabelNumber(node.p.strength)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/PostProcessNetwork.ts
var PostProcessNetwork = __webpack_require__(13769);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/PostProcessNetwork.ts
var cop_PostProcessNetwork = __webpack_require__(78124);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/event/PostProcessNetwork.ts
var event_PostProcessNetwork = __webpack_require__(83015);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/PostProcessNetwork.ts
var mat_PostProcessNetwork = __webpack_require__(1487);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/obj/PostProcessNetwork.ts
var obj_PostProcessNetwork = __webpack_require__(31518);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/post/PostProcessNetwork.ts
var post_PostProcessNetwork = __webpack_require__(11427);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/rop/PostProcessNetwork.ts
var rop_PostProcessNetwork = __webpack_require__(88013);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PostProcessNetwork.ts
var sop_PostProcessNetwork = __webpack_require__(31578);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraPostProcess.ts
var CameraPostProcess = __webpack_require__(31708);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/post/utils/EffectComposerController.ts
var EffectComposerController = __webpack_require__(32241);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/post/Network.ts













const POST_PROCESS_NETWORK_NODES = [
  PostProcessNetwork/* PostProcessNetworkAnimNode */.U,
  cop_PostProcessNetwork/* PostProcessNetworkCopNode */.u,
  event_PostProcessNetwork/* PostProcessNetworkEventNode */.p,
  mat_PostProcessNetwork/* PostProcessNetworkMatNode */.e,
  obj_PostProcessNetwork/* PostProcessNetworkObjNode */.h,
  post_PostProcessNetwork/* PostProcessNetworkPostNode */.v,
  rop_PostProcessNetwork/* PostProcessNetworkRopNode */.f,
  sop_PostProcessNetwork/* PostProcessNetworkSopNode */.z,
  CameraPostProcess/* CameraPostProcessSopNode */.D
];
const postProcessNetworksRegisters = POST_PROCESS_NETWORK_NODES.map(
  (nodeClass) => {
    const paramsLabelRegister = {
      nodeClass,
      setupFunc: (node) => ({
        params: node.params.all,
        callback: () => {
          const elements = [];
          elements.push(`prependRenderPass: ${_booleanAndIcon(node.pv.prependRenderPass)}`);
          elements.push(`depthBuffer: ${_booleanAndIcon(node.pv.depthBuffer)}`);
          elements.push(`stencilBuffer: ${_booleanAndIcon(node.pv.stencilBuffer)}`);
          elements.push(`sampling: ${node.pv.sampling}`);
          const textureTypeLabel = (0,Type/* isBooleanTrue */.bI)(node.pv.tTextureType) ? (0,EffectComposerController/* postProcessTextureTypeLabel */.$Y)(node.pv.textureType) : "default";
          elements.push(`textureType: ${textureTypeLabel}`);
          return elements;
        }
      })
    };
    return paramsLabelRegister;
  }
);

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/post/Outline.ts
var Outline = __webpack_require__(41365);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/post/Outline.ts


const outlinePostParamsLabelRegister = {
  nodeClass: Outline/* OutlinePostNode */.F,
  setupFunc: (node) => ({
    params: node.p.objectsMask,
    callback: () => node.pv.objectsMask
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/post/Render.ts
var post_Render = __webpack_require__(10538);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/post/Render.ts


const renderPostParamsLabelRegister = {
  nodeClass: post_Render/* RenderPostNode */.k,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [node.pv.overrideScene ? `scene: ${node.pv.scene.path()}` : "scene: default"]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/post/ToneMapping.ts
var ToneMapping = __webpack_require__(39072);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/post/ToneMapping.ts



const toneMappingPostParamsLabelRegister = {
  nodeClass: ToneMapping/* ToneMappingPostNode */.G,
  setupFunc: (node) => ({
    params: [node.p.mode],
    callback: () => [_paramLabelNumber(node.p.mode)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/post/UpdateScene.ts + 1 modules
var UpdateScene = __webpack_require__(12614);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/post/UpdateScene.ts



const updateScenePostParamsLabelRegister = {
  nodeClass: UpdateScene/* UpdateScenePostNode */.E,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => node.pv.reset ? [`${_booleanAndIcon(node.pv.reset)} reset`] : [
      `mask: ${node.pv.objectsMask}`,
      `${_booleanAndIcon(node.pv.invertMask)} invertMask`,
      `${_booleanAndIcon(node.pv.setMatteMaterial)} setMatteMaterial`,
      `${_booleanAndIcon(node.pv.setVisible)} setVisible: ${_booleanAndIcon(node.pv.visible)}`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/rop/WebGLRenderer.ts
var WebGLRenderer = __webpack_require__(31207);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/rop/WebGLRenderer.ts



const webGLRendererRopParamsLabelRegister = {
  nodeClass: WebGLRenderer/* WebGLRendererRopNode */.Ou,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      list.push(_paramLabelBoolean(node.p.antialias));
      list.push(_paramLabelNumber(node.p.toneMapping));
      list.push(_paramLabelString(node.p.outputColorSpace));
      list.push(_paramLabelBoolean(node.p.alpha));
      list.push(_paramLabelBoolean(node.p.sortObjects));
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Actor.ts
var Actor = __webpack_require__(98517);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Actor.ts



const actorSopParamsLabelRegister = {
  nodeClass: Actor/* ActorSopNode */.f,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      const { group, useThisNode } = node.pv;
      if (group.trim() != "") {
        list.push(_paramLabelString(node.p.group));
      }
      if (!useThisNode) {
        list.push(_paramLabelNodePath(node.p.node));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/ActorInstance.ts
var ActorInstance = __webpack_require__(83655);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/ActorInstance.ts



const actorInstanceSopParamsLabelRegister = {
  nodeClass: ActorInstance/* ActorInstanceSopNode */.G,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      const { group, useThisNode } = node.pv;
      if (group.trim() != "") {
        list.push(_paramLabelString(node.p.group));
      }
      if (!useThisNode) {
        list.push(_paramLabelNodePath(node.p.node));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/ActorPoint.ts
var ActorPoint = __webpack_require__(36138);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/ActorPoint.ts



const actorPointSopParamsLabelRegister = {
  nodeClass: ActorPoint/* ActorPointSopNode */.i,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      const { group, useThisNode } = node.pv;
      if (group.trim() != "") {
        list.push(_paramLabelString(node.p.group));
      }
      if (!useThisNode) {
        list.push(_paramLabelNodePath(node.p.node));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Add.ts
var Add = __webpack_require__(48950);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Add.ts



const addSopParamsLabelRegister = {
  nodeClass: Add/* AddSopNode */.d,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      `${_booleanAndIcon(node.pv.createPoint)} createPoints`,
      `${node.pv.pointsCount} ${node.pv.pointsCount == 1 ? "point" : "points"}`,
      `${_booleanAndIcon(node.pv.connectInputPoints)} connectInputPoints`,
      `${_booleanAndIcon(node.pv.connectToLastPoint)} connectToLastPoint`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AmbientLight.ts
var sop_AmbientLight = __webpack_require__(87322);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AmbientLight.ts



const ambientLightSopParamsLabelRegister = {
  nodeClass: sop_AmbientLight/* AmbientLightSopNode */.e,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelAmbientLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AreaLight.ts
var sop_AreaLight = __webpack_require__(4455);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AreaLight.ts



const areaLightSopParamsLabelRegister = {
  nodeClass: sop_AreaLight/* AreaLightSopNode */.Y,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelAreaLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribAddMult.ts
var AttribAddMult = __webpack_require__(92417);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribAddMult.ts


const attribAddMultSopParamsLabelRegister = {
  nodeClass: AttribAddMult/* AttribAddMultSopNode */.$,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      function _sign(value) {
        return value < 0 ? "-" : "+";
      }
      const arg0 = node.pv.preAdd == 0 ? "value" : `(value ${_sign(node.pv.preAdd)} ${Math.abs(node.pv.preAdd)})`;
      const arg1 = node.pv.mult == 1 ? arg0 : `${node.pv.mult} * ${arg0}`;
      const arg2 = node.pv.postAdd == 0 ? arg1 : `= (${arg1}) ${_sign(node.pv.postAdd)} ${Math.abs(node.pv.postAdd)}`;
      return [node.pv.name, arg2];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/operations/sop/AttribCast.ts
var AttribCast = __webpack_require__(96685);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribCast.ts
var sop_AttribCast = __webpack_require__(17490);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribCast.ts



const attribCastSopParamsLabelRegister = {
  nodeClass: sop_AttribCast/* AttribCastSopNode */.e,
  setupFunc: (node) => ({
    params: node.p.type,
    callback: () => AttribCast/* ATTRIB_TYPES */.Vw[node.pv.type]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribCopy.ts
var AttribCopy = __webpack_require__(8415);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribCopy.ts



const attribCopySopParamsLabelRegister = {
  nodeClass: AttribCopy/* AttribCopySopNode */.I,
  setupFunc: (node) => ({
    params: [node.p.name, node.p.tnewName, node.p.newName],
    callback: () => (0,Type/* isBooleanTrue */.bI)(node.pv.tnewName) ? `${node.pv.name} -> ${node.pv.newName}` : node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/geometry/Constant.ts
var geometry_Constant = __webpack_require__(91568);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribCreate.ts + 6 modules
var AttribCreate = __webpack_require__(11750);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribCreate.ts








const JS_TYPE = [
  Js/* JsConnectionPointType.FLOAT */.zF.FLOAT,
  Js/* JsConnectionPointType.VECTOR2 */.zF.VECTOR2,
  Js/* JsConnectionPointType.VECTOR3 */.zF.VECTOR3,
  Js/* JsConnectionPointType.INT */.zF.INT
  // not.VECTOR4 as it is white
];
function actorType(attribType, attribSize) {
  switch (attribType) {
    case geometry_Constant/* AttribType.NUMERIC */.rp.NUMERIC: {
      return JS_TYPE[attribSize - 1];
    }
    case geometry_Constant/* AttribType.STRING */.rp.STRING: {
      return Js/* JsConnectionPointType.COLOR */.zF.COLOR;
    }
  }
  Assert/* TypeAssert.unreachable */.f.unreachable(attribType);
}
const AttribCreate_COLOR_STRENGTH = 500;
const AttribCreate_DEFAULT_CLASS = "text-blue-500";
const attribCreateSopParamsLabelRegister = {
  nodeClass: AttribCreate/* AttribCreateSopNode */.R,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const attribType = geometry_Constant/* ATTRIBUTE_TYPES */.Xu[node.pv.type];
      const attribSize = node.pv.size;
      const attribTypeClassName = (0,ColorUtils/* typeClassName */.I)(actorType(attribType, attribSize), ColorUtils/* CssType.TEXT */.Z.TEXT, AttribCreate_COLOR_STRENGTH) || AttribCreate_DEFAULT_CLASS;
      const list = [];
      if (node.pv.group.trim() != "") {
        list.push(_paramLabelString(node.p.group));
      }
      list.push(node.pv.name, _paramLabelNumber(node.p.class), _paramLabelNumber(node.p.type));
      if (attribType == geometry_Constant/* AttribType.STRING */.rp.STRING) {
        list.push(node.p.string.rawInput());
      } else {
        list.push(_paramLabelNumber(node.p.size, { className: attribTypeClassName }));
        switch (attribSize) {
          case 1: {
            list.push(_paramLabelNumber(node.p.value1, { displayLabel: false }));
            break;
          }
          case 2: {
            list.push(_paramLabelVector2(node.p.value2, { displayLabel: false }));
            break;
          }
          case 3: {
            list.push(_paramLabelVector3(node.p.value3, { displayLabel: false }));
            break;
          }
          case 4: {
            list.push(_paramLabelVector4(node.p.value4, { displayLabel: false }));
            break;
          }
        }
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribDelete.ts
var AttribDelete = __webpack_require__(56090);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribDelete.ts



const attribDeleteSopParamsLabelRegister = {
  nodeClass: AttribDelete/* AttribDeleteSopNode */.b,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelNumber(node.p.class), _paramLabelString(node.p.name)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribFromTexture.ts
var AttribFromTexture = __webpack_require__(66330);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribFromTexture.ts


const attribFromTextureSopParamsLabelRegister = {
  nodeClass: AttribFromTexture/* AttribFromTextureSopNode */.r,
  setupFunc: (node) => ({
    params: node.p.attrib,
    callback: () => node.pv.attrib
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribId.ts
var AttribId = __webpack_require__(92635);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribId.ts



const attribIdSopParamsLabelRegister = {
  nodeClass: AttribId/* AttribIdSopNode */.n,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelNumber(node.p.class),
        `${_booleanAndIcon(node.pv.id)}: ${node.pv.idName}`,
        `${_booleanAndIcon(node.pv.idn)}: ${node.pv.idnName}`
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribNormalize.ts
var AttribNormalize = __webpack_require__(94692);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribNormalize.ts


const attribNormalizeSopParamsLabelRegister = {
  nodeClass: AttribNormalize/* AttribNormalizeSopNode */.e,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribPromote.ts
var AttribPromote = __webpack_require__(84092);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/operations/sop/AttribPromote.ts
var sop_AttribPromote = __webpack_require__(25300);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribPromote.ts





const attribPromoteSopParamsLabelRegister = {
  nodeClass: AttribPromote/* AttribPromoteSopNode */.y,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      if (node.pv.group != "") {
        list.push(_paramLabelString(node.p.group));
      }
      if (node.pv.name != "") {
        const fromS = geometry_Constant/* AttribClassMenuEntries.filter */.yp.filter((entry) => entry.value == node.pv.classFrom)[0].name;
        const toS = geometry_Constant/* AttribClassMenuEntries.filter */.yp.filter((entry) => entry.value == node.pv.classTo)[0].name;
        const mode = sop_AttribPromote/* ATTRIB_PROMOTE_MODES */.U0[node.pv.mode];
        list.push(`${node.pv.name} (${fromS} -> ${toS}, ${mode})`);
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribRemap.ts
var AttribRemap = __webpack_require__(34692);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribRemap.ts



const attribRemapSopParamsLabelRegister = {
  nodeClass: AttribRemap/* AttribRemapSopNode */.d,
  setupFunc: (node) => ({
    params: [node.p.name, node.p.changeName, node.p.newName],
    callback: () => {
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.changeName)) {
        return `${node.pv.name} - ${node.pv.newName}`;
      } else {
        return node.pv.name;
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribRename.ts
var AttribRename = __webpack_require__(33523);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribRename.ts


const attribRenameSopParamsLabelRegister = {
  nodeClass: AttribRename/* AttribRenameSopNode */.K,
  setupFunc: (node) => ({
    params: [node.p.oldName, node.p.newName],
    callback: () => {
      if (node.pv.oldName != "" && node.pv.newName != "") {
        return `${node.pv.oldName} -> ${node.pv.newName}`;
      } else {
        return "";
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribSetAtIndex.ts
var AttribSetAtIndex = __webpack_require__(99861);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribSetAtIndex.ts


const attribSetAtIndexSopParamsLabelRegister = {
  nodeClass: AttribSetAtIndex/* AttribSetAtIndexSopNode */.X,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AttribTransfer.ts + 4 modules
var AttribTransfer = __webpack_require__(6479);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AttribTransfer.ts


const attribTransferSopParamsLabelRegister = {
  nodeClass: AttribTransfer/* AttribTransferSopNode */.D,
  setupFunc: (node) => ({
    params: node.p.name,
    callback: () => node.pv.name
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/AudioNotes.ts
var AudioNotes = __webpack_require__(97619);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/AudioNotes.ts



const audioNotesSopParamsLabelRegister = {
  nodeClass: AudioNotes/* AudioNotesSopNode */.b,
  setupFunc: (node) => ({
    params: [node.p.class, node.p.name, node.p.startOctave, node.p.endOctave],
    callback: () => [
      _paramLabelNumber(node.p.class),
      _paramLabelString(node.p.name),
      `octaves: ${node.pv.startOctave} -> ${node.pv.endOctave}`
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/BboxScatter.ts
var BboxScatter = __webpack_require__(80444);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/BboxScatter.ts


const bboxScatterSopParamsLabelRegister = {
  nodeClass: BboxScatter/* BboxScatterSopNode */.c,
  setupFunc: (node) => ({
    params: node.p.stepSize,
    callback: () => `${node.p.stepSize.rawInput()}`
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Boolean.ts
var sop_Boolean = __webpack_require__(85976);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Boolean.ts



const booleanSopParamsLabelRegister = {
  nodeClass: sop_Boolean/* BooleanSopNode */.z,
  setupFunc: (node) => ({
    params: node.p.operation,
    callback: () => _paramLabelNumber(node.p.operation)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Box.ts
var Box = __webpack_require__(3934);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Box.ts



const boxSopParamsLabelRegister = {
  nodeClass: Box/* BoxSopNode */.R,
  setupFunc: (node) => ({
    params: [node.p.sizes, node.p.size],
    callback: () => {
      return [_paramLabelVector3(node.p.sizes), _paramLabelNumber(node.p.size)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/BoxLines.ts
var BoxLines = __webpack_require__(95456);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/BoxLines.ts


const boxLinesSopParamsLabelRegister = {
  nodeClass: BoxLines/* BoxLinesSopNode */.n,
  setupFunc: (node) => ({
    params: [node.p.sizes, node.p.size],
    callback: () => {
      return [`sizes: ${node.pv.sizes.toArray().join(",")}`, `size: ${node.pv.size}`];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CADBoolean.ts
var CADBoolean = __webpack_require__(54389);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CADBoolean.ts



const cadBooleanSopParamsLabelRegister = {
  nodeClass: CADBoolean/* CADBooleanSopNode */.$L,
  setupFunc: (node) => {
    const params = [node.p.operation];
    return {
      params,
      callback: () => {
        return [_paramLabelNumber(node.p.operation), _paramLabelNumber(node.p.mode)];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CADConvertDimension.ts
var CADConvertDimension = __webpack_require__(13567);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CADConvertDimension.ts



const cadConvertDimensionSopParamsLabelRegister = {
  nodeClass: CADConvertDimension/* CADConvertDimensionSopNode */.KK,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelNumber(node.p.mode)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CADFileSTEP.ts + 1 modules
var CADFileSTEP = __webpack_require__(76777);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CADFileSTEP.ts



const cadFileSTEPSopParamsLabelRegister = {
  nodeClass: CADFileSTEP/* CADFileSTEPSopNode */.M,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelString(node.p.url)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CADFillet.ts
var CADFillet = __webpack_require__(49121);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CADFillet.ts



const cadFilletSopParamsLabelRegister = {
  nodeClass: CADFillet/* CADFilletSopNode */.G,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      if (node.pv.group.trim() != "") {
        list.push(_paramLabelString(node.p.group));
      }
      list.push(...[_paramLabelNumber(node.p.mode), _paramLabelNumber(node.p.radius)]);
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CADGroup.ts + 5 modules
var CADGroup = __webpack_require__(3195);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CADGroup.ts




const cadGroupSopParamsLabelRegister = {
  nodeClass: CADGroup/* CADGroupSopNode */.F,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [_paramLabelString(node.p.name), _paramLabelNumber(node.p.operation)];
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byExpression)) {
        list.push(_paramLabelBoolean(node.p.byExpression));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byBoundingBox)) {
        list.push(_paramLabelBoolean(node.p.byBoundingBox));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byBoundingObject)) {
        list.push(_paramLabelBoolean(node.p.byBoundingObject));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CADMirror.ts
var CADMirror = __webpack_require__(9345);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CADMirror.ts



const cadMirrorSopParamsLabelRegister = {
  nodeClass: CADMirror/* CADMirrorSopNode */.C,
  setupFunc: (node) => {
    const params = [node.p.axis];
    return {
      params,
      callback: () => {
        return [_paramLabelVector3(node.p.axis)];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CADThickness.ts
var CADThickness = __webpack_require__(793);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CADThickness.ts



const cadThicknessSopParamsLabelRegister = {
  nodeClass: CADThickness/* CADThicknessSopNode */.J,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelString(node.p.facesGroupToDelete), _paramLabelNumber(node.p.offset)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraControls.ts
var CameraControls = __webpack_require__(92550);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraControls.ts


const cameraControlsSopParamsLabelRegister = {
  nodeClass: CameraControls/* CameraControlsSopNode */.m,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => node.pv.node.path()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/camera/CoreCameraFrameMode.ts
var CoreCameraFrameMode = __webpack_require__(67689);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraFrameMode.ts
var CameraFrameMode = __webpack_require__(15303);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraFrameMode.ts



const cameraFrameModeSopParamsLabelRegister = {
  nodeClass: CameraFrameMode/* CameraFrameModeSopNode */.r,
  setupFunc: (node) => ({
    params: node.p.frameMode,
    callback: () => CoreCameraFrameMode/* CAMERA_FRAME_MODES */.cy[node.pv.frameMode]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraFPS.ts
var CameraFPS = __webpack_require__(7999);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraFPS.ts



const cameraFPSSopParamsLabelRegister = {
  nodeClass: CameraFPS/* CameraFPSSopNode */.f,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelNumber(node.p.maxFPS), _paramLabelBoolean(node.p.allowDynamicChange)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraProject.ts
var CameraProject = __webpack_require__(84732);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraProject.ts



const cameraProjectSopParamsLabelRegister = {
  nodeClass: CameraProject/* CameraProjectSopNode */.U,
  setupFunc: (node) => ({
    params: node.p.project,
    callback: () => _paramLabelBoolean(node.p.project)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraViewOffset.ts
var CameraViewOffset = __webpack_require__(61065);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraViewOffset.ts



const cameraViewOffsetSopParamsLabelRegister = {
  nodeClass: CameraViewOffset/* CameraViewOffsetSopNode */.G,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelVector2(node.p.min), _paramLabelVector2(node.p.max)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraWebXRARMarkerTracking.ts
var CameraWebXRARMarkerTracking = __webpack_require__(5972);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/webXR/markerTracking/Common.ts
var Common = __webpack_require__(83479);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraWebXRARMarkerTracking.ts




const cameraWebXRARMarkerTrackingSopParamsLabelRegister = {
  nodeClass: CameraWebXRARMarkerTracking/* CameraWebXRARMarkerTrackingSopNode */.L,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [_paramLabelNumber(node.p.sourceMode)];
      if ([Common/* MarkerTrackingSourceMode.IMAGE */.AC.IMAGE, Common/* MarkerTrackingSourceMode.VIDEO */.AC.VIDEO].includes(node.sourceMode())) {
        _paramLabelString(node.p.sourceUrl);
      }
      list.push(_paramLabelNumber(node.p.transformMode));
      list.push(_paramLabelBoolean(node.p.smooth));
      if (node.pv.smooth) {
        list.push(_paramLabelNumber(node.p.smoothCount));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraWebXRAR.ts + 1 modules
var CameraWebXRAR = __webpack_require__(22952);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraWebXRAR.ts




const cameraWebXRARSopParamsLabelRegister = {
  nodeClass: CameraWebXRAR/* CameraWebXRARSopNode */.c,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      list.push(_paramLabelNumber(node.p.hitTest));
      list.push(_paramLabelNumber(node.p.lightEstimation));
      list.push(_paramLabelNumber(node.p.cameraAccess));
      list.push(_paramLabelBoolean(node.p.overrideReferenceSpaceType));
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.overrideReferenceSpaceType)) {
        list.push(_paramLabelNumber(node.p.referenceSpaceType));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraWebXRVR.ts + 1 modules
var CameraWebXRVR = __webpack_require__(18735);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraWebXRVR.ts




const cameraWebXRVRSopParamsLabelRegister = {
  nodeClass: CameraWebXRVR/* CameraWebXRVRSopNode */._,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      list.push(_paramLabelNumber(node.p.localFloor));
      list.push(_paramLabelNumber(node.p.boundedFloor));
      list.push(_paramLabelNumber(node.p.handTracking));
      list.push(_paramLabelNumber(node.p.layers));
      list.push(_paramLabelBoolean(node.p.overrideReferenceSpaceType));
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.overrideReferenceSpaceType)) {
        list.push(_paramLabelNumber(node.p.referenceSpaceType));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CameraRenderScene.ts
var CameraRenderScene = __webpack_require__(8341);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CameraRenderScene.ts


const cameraRenderSceneSopParamsLabelRegister = {
  nodeClass: CameraRenderScene/* CameraRenderSceneSopNode */.Z,
  setupFunc: (node) => ({
    params: node.p.node,
    callback: () => node.pv.node.path()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Capsule.ts
var Capsule = __webpack_require__(11517);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Capsule.ts


const capsuleSopParamsLabelRegister = {
  nodeClass: Capsule/* CapsuleSopNode */.o,
  setupFunc: (node) => ({
    params: [node.p.radius, node.p.height],
    callback: () => {
      return [`radius: ${node.pv.radius}`, `height: ${node.pv.height}`];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Center.ts
var Center = __webpack_require__(61763);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Center.ts



const centerSopParamsLabelRegister = {
  nodeClass: Center/* CenterSopNode */.t,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelNumber(node.p.mode)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Circle3Points.ts
var Circle3Points = __webpack_require__(57568);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/geometry/operation/Circle3Points.ts
var operation_Circle3Points = __webpack_require__(99450);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Circle3Points.ts




const circle3PointsSopParamsLabelRegister = {
  nodeClass: Circle3Points/* Circle3PointsSopNode */.j,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelBoolean(node.p.arc),
        _paramLabelNumber(node.p.pointsCountMode),
        node.pointsCountMode() == operation_Circle3Points/* PointsCountMode.SEGMENTS_COUNT */._t.SEGMENTS_COUNT ? _paramLabelNumber(node.p.segmentsCount) : _paramLabelNumber(node.p.segmentsLength)
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Color.ts + 1 modules
var sop_Color = __webpack_require__(14826);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Color.ts




const colorSopParamsLabelRegister = {
  nodeClass: sop_Color/* ColorSopNode */.k,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.fromAttribute)) {
        list.push(`from attribute: ${node.pv.attribName}`);
      } else {
        list.push(colorToParamLabelString(node.pv.color));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Cone.ts
var Cone = __webpack_require__(52330);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Cone.ts


const coneSopParamsLabelRegister = {
  nodeClass: Cone/* ConeSopNode */.w,
  setupFunc: (node) => ({
    params: [node.p.radius, node.p.height],
    callback: () => {
      return [`radius: ${node.pv.radius}`, `height: ${node.pv.height}`];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Copy.ts + 2 modules
var Copy = __webpack_require__(37554);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Copy.ts



const copySopParamsLabelRegister = {
  nodeClass: Copy/* CopySopNode */.a,
  setupFunc: (node) => ({
    params: [
      node.p.count,
      node.p.transformOnly,
      node.p.transformMode,
      node.p.copyAttributes,
      node.p.attributesToCopy,
      node.p.useCopyExpr
    ],
    callback: () => {
      const list = [];
      list.push(_paramLabelNumber(node.p.count));
      list.push(_paramLabelNumber(node.p.transformMode));
      list.push(
        `${_booleanAndIcon(node.pv.copyAttributes)} ${node.pv.copyAttributes ? `copyAttributes:'${node.pv.attributesToCopy}'` : "no attributes copied"}`
      );
      list.push(`${_booleanAndIcon(node.pv.useCopyExpr)} useCopyExpr`);
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CSGBoolean.ts
var CSGBoolean = __webpack_require__(37946);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CSGBoolean.ts



const csgBooleanSopParamsLabelRegister = {
  nodeClass: CSGBoolean/* CSGBooleanSopNode */.OQ,
  setupFunc: (node) => {
    const params = [node.p.operation];
    return {
      params,
      callback: () => {
        return [_paramLabelNumber(node.p.operation)];
      }
    };
  }
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/CubeCamera.ts
var sop_CubeCamera = __webpack_require__(71716);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/CubeCamera.ts



const cubeCameraSopParamsLabelRegister = {
  nodeClass: sop_CubeCamera/* CubeCameraSopNode */.L,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelNumber(node.p.near), _paramLabelNumber(node.p.far), _paramLabelNumber(node.p.resolution)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/DataUrl.ts + 2 modules
var DataUrl = __webpack_require__(73141);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/DataUrl.ts


const dataUrlSopParamsLabelRegister = {
  nodeClass: DataUrl/* DataUrlSopNode */.i$,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => {
      const url = node.p.url.rawInput();
      if (url) {
        const elements = url.split("/");
        return elements[elements.length - 1];
      } else {
        return "";
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Delete.ts + 6 modules
var Delete = __webpack_require__(33742);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Delete.ts





const deleteSopParamsLabelRegister = {
  nodeClass: Delete/* DeleteSopNode */.R,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [_paramLabelNumber(node.p.class), _paramLabelBoolean(node.p.invert)];
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byObjectType)) {
        list.push(_paramLabelBoolean(node.p.byObjectType));
        list.push(_paramLabelNumber(node.p.objectType));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byExpression)) {
        list.push(_paramLabelBoolean(node.p.byExpression));
        list.push(_paramLabelBoolean(node.p.expression));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byAttrib)) {
        list.push(_paramLabelBoolean(node.p.byAttrib));
        list.push(_paramLabelNumber(node.p.attribType));
        list.push(_paramLabelString(node.p.attribName));
        switch (node.attribType()) {
          case geometry_Constant/* AttribType.STRING */.rp.STRING: {
            list.push(_paramLabelString(node.p.attribString));
            break;
          }
          case geometry_Constant/* AttribType.NUMERIC */.rp.NUMERIC: {
            list.push(_paramLabelNumber(node.p.attribSize));
            switch (node.pv.attribSize) {
              case 1: {
                list.push(_paramLabelNumber(node.p.attribValue1));
                break;
              }
              case 2: {
                list.push(_paramLabelVector2(node.p.attribValue2));
                break;
              }
              case 3: {
                list.push(_paramLabelVector3(node.p.attribValue3));
                break;
              }
              case 4: {
                list.push(_paramLabelVector4(node.p.attribValue4));
                break;
              }
            }
            break;
          }
        }
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byBbox)) {
        list.push(_paramLabelBoolean(node.p.byBbox));
        list.push(_paramLabelVector3(node.p.bboxSize));
        list.push(_paramLabelVector3(node.p.bboxCenter));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.byBoundingObject)) {
        list.push(_paramLabelBoolean(node.p.byBoundingObject));
      }
      list.push(_paramLabelBoolean(node.p.keepPoints));
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/DeleteByName.ts
var DeleteByName = __webpack_require__(14063);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/DeleteByName.ts



const deleteByNameSopParamsLabelRegister = {
  nodeClass: DeleteByName/* DeleteByNameSopNode */._,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelString(node.p.group), _paramLabelBoolean(node.p.invert)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/DirectionalLight.ts
var sop_DirectionalLight = __webpack_require__(70448);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/DirectionalLight.ts



const directionalLightSopParamsLabelRegister = {
  nodeClass: sop_DirectionalLight/* DirectionalLightSopNode */.w,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelDirectionalLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/EmptyObject.ts
var EmptyObject = __webpack_require__(57649);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/EmptyObject.ts


const emptyObjectSopParamsLabelRegister = {
  nodeClass: EmptyObject/* EmptyObjectSopNode */.p,
  setupFunc: (node) => ({
    params: node.p.type,
    callback: () => `${node.objectType()}`
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/EntityBuilder.ts + 3 modules
var EntityBuilder = __webpack_require__(57966);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/EntityBuilder.ts



const entityBuilderSopParamsLabelRegister = {
  nodeClass: EntityBuilder/* EntityBuilderSopNode */.L,
  setupFunc: (node) => ({
    params: [node.p.entity],
    callback: () => {
      return [_paramLabelNumber(node.p.entity)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Facet.ts
var Facet = __webpack_require__(12071);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Facet.ts



const facetSopParamsLabelRegister = {
  nodeClass: Facet/* FacetSopNode */.b,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelNumber(node.p.angle)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileDRC.ts
var FileDRC = __webpack_require__(26745);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileFBX.ts
var FileFBX = __webpack_require__(8315);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileGEOJSON.ts
var FileGEOJSON = __webpack_require__(9320);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileGLTF.ts
var FileGLTF = __webpack_require__(27952);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileMPD.ts
var FileMPD = __webpack_require__(63063);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileOBJ.ts
var FileOBJ = __webpack_require__(48112);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FilePDB.ts
var FilePDB = __webpack_require__(86084);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FilePLY.ts
var FilePLY = __webpack_require__(26633);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileSTL.ts
var FileSTL = __webpack_require__(10079);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileVOX.ts
var FileVOX = __webpack_require__(47617);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/File.ts













const fileDRCSopParamsLabelRegister = {
  nodeClass: FileDRC/* FileDRCSopNode */.c,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const fileFBXSopParamsLabelRegister = {
  nodeClass: FileFBX/* FileFBXSopNode */.B,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const fileGEOJSONSopParamsLabelRegister = {
  nodeClass: FileGEOJSON/* FileGEOJSONSopNode */.t,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const fileMPDSopParamsLabelRegister = {
  nodeClass: FileMPD/* FileMPDSopNode */.$,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const fileOBJSopParamsLabelRegister = {
  nodeClass: FileOBJ/* FileOBJSopNode */.U,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const filePDBSopParamsLabelRegister = {
  nodeClass: FilePDB/* FilePDBSopNode */.O,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const filePLYSopParamsLabelRegister = {
  nodeClass: FilePLY/* FilePLYSopNode */.A,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const fileSTLSopParamsLabelRegister = {
  nodeClass: FileSTL/* FileSTLSopNode */.g,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const fileVOXSopParamsLabelRegister = {
  nodeClass: FileVOX/* FileVOXSopNode */.M,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => _paramLabelString(node.p.url)
  })
};
const fileGLTFSopParamsLabelRegister = {
  nodeClass: FileGLTF/* FileGLTFSopNode */.r,
  setupFunc: (node) => ({
    params: [node.p.url, node.p.draco],
    callback: () => {
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.draco)) {
        return [_paramLabelString(node.p.url), _paramLabelBoolean(node.p.draco)];
      } else {
        return _paramLabelString(node.p.url);
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileMultiOBJ.ts
var FileMultiOBJ = __webpack_require__(61999);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/FileMulti.ts


const fileMultiOBJSopParamsLabelRegister = {
  nodeClass: FileMultiOBJ/* FileMultiOBJSopNode */.$,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => node.p.url.rawInput()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/FileSVG.ts
var FileSVG = __webpack_require__(87588);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/FileSVG.ts


const fileSVGSopParamsLabelRegister = {
  nodeClass: FileSVG/* FileSVGSopNode */.i,
  setupFunc: (node) => ({
    params: node.p.url,
    callback: () => {
      const url = node.pv.url;
      if (url) {
        const elements = url.split("/");
        return elements[elements.length - 1];
      } else {
        return "";
      }
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Fuse.ts
var Fuse = __webpack_require__(19210);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Fuse.ts


const fuseSopParamsLabelRegister = {
  nodeClass: Fuse/* FuseSopNode */.m,
  setupFunc: (node) => ({
    params: [node.p.dist],
    callback: () => `${node.pv.dist}`
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/HemisphereLight.ts
var sop_HemisphereLight = __webpack_require__(83545);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/HemisphereLight.ts



const hemisphereLightSopParamsLabelRegister = {
  nodeClass: sop_HemisphereLight/* HemisphereLightSopNode */.A,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelHemisphereLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Hexagons.ts
var Hexagons = __webpack_require__(10288);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Hexagons.ts



const hexagonsSopParamsLabelRegister = {
  nodeClass: Hexagons/* HexagonsSopNode */.o,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [`direction: ${node.pv.direction.toArray()}`, `size: ${node.pv.size.toArray()}`];
      list.push(`${_booleanAndIcon(node.pv.pointsOnly)} pointsOnly`);
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Hierarchy.ts
var Hierarchy = __webpack_require__(79463);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Hierarchy.ts



const hierarchySopParamsLabelRegister = {
  nodeClass: Hierarchy/* HierarchySopNode */.z,
  setupFunc: (node) => ({
    params: [node.p.mode, node.p.levels, node.p.objectMask],
    callback: () => {
      return [_paramLabelNumber(node.p.mode), _paramLabelNumber(node.p.levels)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Icosahedron.ts
var Icosahedron = __webpack_require__(82263);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Icosahedron.ts



const icosahedronSopParamsLabelRegister = {
  nodeClass: Icosahedron/* IcosahedronSopNode */.K,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [
        `radius: ${node.pv.radius}`,
        `detail: ${node.pv.detail}`,
        `${_booleanAndIcon(node.pv.pointsOnly)} pointsOnly`
      ];
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Instance.ts
var Instance = __webpack_require__(15432);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Instance.ts


const instanceSopParamsLabelRegister = {
  nodeClass: Instance/* InstanceSopNode */.K,
  setupFunc: (node) => ({
    params: [node.p.material],
    callback: () => {
      return [node.p.material.rawInput(), node.p.attributesToCopy.rawInput()];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Jitter.ts
var Jitter = __webpack_require__(28310);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Jitter.ts


const jitterSopParamsLabelRegister = {
  nodeClass: Jitter/* JitterSopNode */.o,
  setupFunc: (node) => ({
    params: node.p.amount,
    callback: () => `${node.p.amount.rawInput()}`
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Layer.ts
var Layer = __webpack_require__(11655);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Layer.ts


const layerSopParamsLabelRegister = {
  nodeClass: Layer/* LayerSopNode */.$3,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      const layersCount = node.pv.layersCount;
      if (layersCount >= 1) {
        const updateMode = Layer/* UPDATE_MODES */.ls[node.pv.updateMode0];
        list.push(`${updateMode}: ${node.pv.layer0}`);
      }
      if (layersCount >= 2) {
        const updateMode = Layer/* UPDATE_MODES */.ls[node.pv.updateMode1];
        list.push(`${updateMode}: ${node.pv.layer1}`);
      }
      if (layersCount >= 3) {
        const updateMode = Layer/* UPDATE_MODES */.ls[node.pv.updateMode2];
        list.push(`${updateMode}: ${node.pv.layer2}`);
      }
      if (layersCount >= 4) {
        const updateMode = Layer/* UPDATE_MODES */.ls[node.pv.updateMode3];
        list.push(`${updateMode}: ${node.pv.layer3}`);
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/LightProbe.ts
var LightProbe = __webpack_require__(2885);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/LightProbe.ts


const lightProbeSopParamsLabelRegister = {
  nodeClass: LightProbe/* LightProbeSopNode */.h,
  setupFunc: (node) => ({
    params: [node.p.cubeMap],
    callback: () => {
      return node.p.cubeMap.rawInput();
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Line.ts
var Line = __webpack_require__(87330);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Line.ts



const lineSopParamsLabelRegister = {
  nodeClass: Line/* LineSopNode */._,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      _paramLabelNumber(node.p.length),
      _paramLabelNumber(node.p.pointsCount),
      _paramLabelVector3(node.p.origin),
      _paramLabelVector3(node.p.direction)
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/MapboxCamera.ts
var MapboxCamera = __webpack_require__(62092);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/MapboxCamera.ts



const mapboxCameraSopParamsLabelRegister = {
  nodeClass: MapboxCamera/* MapboxCameraSopNode */.L,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelString(node.p.style),
        _paramLabelNumber(node.p.longitude),
        _paramLabelNumber(node.p.latitude),
        _paramLabelNumber(node.p.pitch),
        _paramLabelNumber(node.p.bearing),
        _paramLabelNumber(node.p.zoom)
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/MapboxLayer.ts + 3 modules
var MapboxLayer = __webpack_require__(82710);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/MapboxLayer.ts




const mapboxLayerSopParamsLabelRegister = {
  nodeClass: MapboxLayer/* MapboxLayerSopNode */.M,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const booleanSpareParams = node.params.spare.filter((param) => param.type() == ParamType/* ParamType.BOOLEAN */._.BOOLEAN);
      const toggledParams = booleanSpareParams.filter(
        (param) => param.value == true
      );
      return toggledParams.map((p) => _paramLabelBoolean(p));
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/MapboxPlane.ts + 1 modules
var MapboxPlane = __webpack_require__(55986);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/MapboxPlane.ts



const mapboxPlaneSopParamsLabelRegister = {
  nodeClass: MapboxPlane/* MapboxPlaneSopNode */.q,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelNumber(node.p.type),
        _paramLabelNumber(node.p.resolution),
        _paramLabelNumber(node.p.sizeMult),
        _paramLabelBoolean(node.p.fullView),
        _paramLabelBoolean(node.p.asPoints)
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/MapboxTransform.ts
var MapboxTransform = __webpack_require__(55680);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/MapboxTransform.ts



const mapboxTransformSopParamsLabelRegister = {
  nodeClass: MapboxTransform/* MapboxTransformSopNode */.k,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelNumber(node.p.applyOn),
        _paramLabelNumber(node.p.longitude),
        _paramLabelNumber(node.p.latitude)
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Material.ts
var Material = __webpack_require__(74874);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Material.ts



const materialSopParamsLabelRegister = {
  nodeClass: Material/* MaterialSopNode */.z,
  setupFunc: (node) => ({
    params: [node.p.material, node.p.group, node.p.cloneMat],
    callback: () => {
      const list = [];
      if (node.pv.group.length > 0) {
        list.push(_paramLabelString(node.p.group));
      }
      list.push(_paramLabelNodePath(node.p.material));
      if (node.pv.cloneMat) {
        list.push(_paramLabelBoolean(node.p.cloneMat));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Merge.ts
var sop_Merge = __webpack_require__(27929);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Merge.ts






const COMPACT = {
  detailed: true,
  elements: [
    {
      label: "compact",
      className: (0,ColorUtils/* typeClassName */.I)(Js/* JsConnectionPointType.INT */.zF.INT, ColorUtils/* CssType.TEXT */.Z.TEXT, COLOR_STRENGTH) || "bg-red-600",
      bold: false
    }
  ]
};
const SEPARATE_OBJECTS = {
  detailed: true,
  elements: [
    {
      label: "separate objects",
      className: (0,ColorUtils/* typeClassName */.I)(Js/* JsConnectionPointType.COLOR */.zF.COLOR, ColorUtils/* CssType.TEXT */.Z.TEXT, COLOR_STRENGTH) || "bg-blue-600",
      bold: false
    }
  ]
};
const mergeSopParamsLabelRegister = {
  nodeClass: sop_Merge/* MergeSopNode */.h,
  setupFunc: (node) => ({
    params: node.p.compact,
    callback: () => (0,Type/* isBooleanTrue */.bI)(node.pv.compact) ? COMPACT : SEPARATE_OBJECTS
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Noise.ts
var Noise = __webpack_require__(72613);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Noise.ts


const noiseSopParamsLabelRegister = {
  nodeClass: Noise/* NoiseSopNode */.r,
  setupFunc: (node) => ({
    params: node.p.attribName,
    callback: () => node.pv.attribName
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/ObjectMerge.ts
var ObjectMerge = __webpack_require__(45658);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/ObjectMerge.ts


const objectMergeSopParamsLabelRegister = {
  nodeClass: ObjectMerge/* ObjectMergeSopNode */.h,
  setupFunc: (node) => ({
    params: node.p.geometry,
    callback: () => node.p.geometry.rawInput()
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/ObjectProperties.ts
var ObjectProperties = __webpack_require__(52620);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/ObjectProperties.ts




const objectPropertiesSopParamsLabelRegister = {
  nodeClass: ObjectProperties/* ObjectPropertiesSopNode */.M,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const elements = [];
      if (node.pv.group.trim().length > 0) {
        elements.push(_paramLabelString(node.p.group));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.tname)) {
        elements.push(_paramLabelString(node.p.name));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.trenderOrder)) {
        elements.push(_paramLabelNumber(node.p.renderOrder));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.tfrustumCulled)) {
        elements.push(_paramLabelBoolean(node.p.frustumCulled));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.tmatrixAutoUpdate)) {
        elements.push(_paramLabelBoolean(node.p.matrixAutoUpdate));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.tvisible)) {
        elements.push(_paramLabelBoolean(node.p.visible));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.tcastShadow)) {
        elements.push(_paramLabelBoolean(node.p.castShadow));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.treceiveShadow)) {
        elements.push(_paramLabelBoolean(node.p.receiveShadow));
      }
      return elements;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/ObjectsLayout.ts
var ObjectsLayout = __webpack_require__(67118);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/ObjectsLayout.ts



const objectsLayoutSopParamsLabelRegister = {
  nodeClass: ObjectsLayout/* ObjectsLayoutSopNode */.D,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelNumber(node.p.maxLayoutWidth), _paramLabelNumber(node.p.rowHeight)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/OrthographicCamera.ts
var OrthographicCamera = __webpack_require__(50905);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/OrthographicCamera.ts



const orthographicCameraSopParamsLabelRegister = {
  nodeClass: OrthographicCamera/* OrthographicCameraSopNode */.q,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelNumber(node.p.size), _paramLabelNumber(node.p.near), _paramLabelNumber(node.p.far)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Palette.ts
var Palette = __webpack_require__(35640);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Palette.ts



const paletteSopParamsLabelRegister = {
  nodeClass: Palette/* PaletteSopNode */.u,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [_paramLabelNumber(node.p.class), _paramLabelString(node.p.paletteName)];
      const colorsCount = node.pv.colorsCount;
      const colorValues = [node.pv.color1, node.pv.color2, node.pv.color3, node.pv.color4, node.pv.color5];
      for (let i = 0; i < colorsCount; i++) {
        list.push(colorToParamLabelString(colorValues[i]));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PerspectiveCamera.ts
var PerspectiveCamera = __webpack_require__(33973);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PerspectiveCamera.ts



const perspectiveCameraSopParamsLabelRegister = {
  nodeClass: PerspectiveCamera/* PerspectiveCameraSopNode */.u,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelNumber(node.p.fov), _paramLabelNumber(node.p.near), _paramLabelNumber(node.p.far)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Plane.ts
var Plane = __webpack_require__(30748);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Plane.ts



const planeSopParamsLabelRegister = {
  nodeClass: Plane/* PlaneSopNode */.C,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [
        `direction: ${node.pv.direction.toArray()}`,
        `size: ${node.pv.size.toArray()}`,
        `${_booleanAndIcon(node.pv.useSegmentsCount)} useSegmentsCount`
      ];
      if (node.pv.useSegmentsCount) {
        list.push(...[`segments: ${node.pv.segments.toArray()}`]);
      } else {
        list.push(...[`stepSize: ${node.pv.stepSize}`]);
      }
      list.push(`${_booleanAndIcon(node.pv.asLines)} asLines`);
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PhysicsGround.ts
var PhysicsGround = __webpack_require__(14776);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PhysicsGround.ts



const physicsGroundSopParamsLabelRegister = {
  nodeClass: PhysicsGround/* PhysicsGroundSopNode */.b,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelVector3(node.p.direction),
        _paramLabelNumber(node.p.height),
        _paramLabelNumber(node.p.thickness),
        _paramLabelNumber(node.p.friction),
        _paramLabelNumber(node.p.restitution)
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PhysicsPlayer.ts
var PhysicsPlayer = __webpack_require__(71011);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PhysicsPlayer.ts



const physicsPlayerSopParamsLabelRegister = {
  nodeClass: PhysicsPlayer/* PhysicsPlayerSopNode */.M,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [
        _paramLabelNumber(node.p.radius),
        _paramLabelNumber(node.p.density),
        _paramLabelNumber(node.p.friction),
        _paramLabelNumber(node.p.restitution),
        _paramLabelNumber(node.p.linearDamping),
        _paramLabelNumber(node.p.angularDamping),
        _paramLabelVector3(node.p.linearVelocity),
        _paramLabelVector3(node.p.angularVelocity),
        _paramLabelNumber(node.p.gravityScale)
        // paramLabelBoolean(node.p.applyImpulses),
        // paramLabelNumber(node.p.snapToGroundDistance),
        // paramLabelBoolean(node.p.autoStep),
        // ...(node.pv.autoStep ? autoStep : []),
        // paramLabelNumber(node.p.maxSlopeClimbAngle),
        // paramLabelNumber(node.p.minSlopeSlideAngle),
        // paramLabelVector3(node.p.up),
      ];
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/physics/PhysicsAttribute.ts
var PhysicsAttribute = __webpack_require__(36911);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PhysicsRBDAttributes.ts
var PhysicsRBDAttributes = __webpack_require__(39962);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/operations/sop/PhysicsRBDAttributes.ts
var sop_PhysicsRBDAttributes = __webpack_require__(4811);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PhysicsRBDAttributes.ts






const physicsRBDAttributesSopParamsLabelRegister = {
  nodeClass: PhysicsRBDAttributes/* PhysicsRBDAttributesSopNode */.M,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const colliderType = node.colliderType();
      const list = [
        _paramLabelNumber(node.p.RBDType),
        _paramLabelNumber(node.p.colliderType),
        _paramLabelNumber(node.p.sizeMethod)
      ];
      if (node.sizeMethod() == sop_PhysicsRBDAttributes/* SizeComputationMethod.MANUAL */.qc.MANUAL) {
        list.push(...colliderTypeDetails(colliderType, node));
      }
      if (PhysicsRBDAttributes/* BORDER_RADIUS_AVAILABLE.includes */.V.includes(node.colliderType())) {
        list.push(_paramLabelNumber(node.p.borderRadius));
      }
      list.push(
        ...[
          _paramLabelNumber(node.p.density),
          _paramLabelNumber(node.p.friction),
          _paramLabelNumber(node.p.restitution),
          _paramLabelNumber(node.p.linearDamping),
          _paramLabelNumber(node.p.angularDamping),
          _paramLabelBoolean(node.p.canSleep)
        ]
      );
      return list;
    }
  })
};
function colliderTypeDetails(colliderType, node) {
  switch (colliderType) {
    case PhysicsAttribute/* PhysicsRBDColliderType.CAPSULE */.bs.CAPSULE: {
      return [_paramLabelNumber(node.p.radius), _paramLabelNumber(node.p.height)];
    }
    case PhysicsAttribute/* PhysicsRBDColliderType.CONE */.bs.CONE: {
      return [_paramLabelNumber(node.p.radius), _paramLabelNumber(node.p.height)];
    }
    case PhysicsAttribute/* PhysicsRBDColliderType.CYLINDER */.bs.CYLINDER: {
      return [_paramLabelNumber(node.p.radius), _paramLabelNumber(node.p.height)];
    }
    case PhysicsAttribute/* PhysicsRBDColliderType.CUBOID */.bs.CUBOID: {
      return [_paramLabelVector3(node.p.sizes), _paramLabelNumber(node.p.size)];
    }
    case PhysicsAttribute/* PhysicsRBDColliderType.SPHERE */.bs.SPHERE: {
      return [_paramLabelNumber(node.p.radius)];
    }
    case PhysicsAttribute/* PhysicsRBDColliderType.HEIGHT_FIELD */.bs.HEIGHT_FIELD: {
      return [_paramLabelNumber(node.p.rows), _paramLabelNumber(node.p.cols)];
    }
    case PhysicsAttribute/* PhysicsRBDColliderType.CONVEX_HULL */.bs.CONVEX_HULL:
    case PhysicsAttribute/* PhysicsRBDColliderType.TRIMESH */.bs.TRIMESH: {
      return [];
    }
  }
  Assert/* TypeAssert.unreachable */.f.unreachable(colliderType);
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PhysicsRBDJoints.ts
var PhysicsRBDJoints = __webpack_require__(13070);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/physics/PhysicsJoint.ts
var PhysicsJoint = __webpack_require__(82637);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PhysicsRBDJoints.ts





const physicsRBDJointSopParamsLabelRegister = {
  nodeClass: PhysicsRBDJoints/* PhysicsRBDJointsSopNode */.D,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const jointType = node.jointType();
      const list = [
        // paramLabelNumber(node.p.colliderType),
        // paramLabelNumber(node.p.sizeMethod),
      ];
      if (node.pv.group != "") {
        list.push(_paramLabelString(node.p.group));
      }
      list.push(_paramLabelNumber(node.p.maxDistance));
      list.push(_paramLabelNumber(node.p.jointType));
      list.push(...joinTypeDetails(jointType, node));
      list.push(_paramLabelBoolean(node.p.anchorsAtCenter));
      list.push(
        ...[
          // paramLabelNumber(node.p.density),
          // paramLabelNumber(node.p.friction),
          // paramLabelNumber(node.p.restitution),
          // paramLabelNumber(node.p.linearDamping),
          _paramLabelBoolean(node.p.ouputsJointsOnly)
        ]
      );
      return list;
    }
  })
};
function joinTypeDetails(jointType, node) {
  switch (jointType) {
    case PhysicsJoint/* PhysicsJointType.FIXED */.Zs.FIXED: {
      return [];
    }
    case PhysicsJoint/* PhysicsJointType.PRISMATIC */.Zs.PRISMATIC: {
      return [_paramLabelNumber(node.p.center), _paramLabelVector2(node.p.limit)];
    }
    case PhysicsJoint/* PhysicsJointType.REVOLUT */.Zs.REVOLUT: {
      return [_paramLabelNumber(node.p.center), _paramLabelVector2(node.p.limit)];
    }
    case PhysicsJoint/* PhysicsJointType.SPHERICAL */.Zs.SPHERICAL: {
      return [_paramLabelNumber(node.p.center)];
    }
  }
  Assert/* TypeAssert.unreachable */.f.unreachable(jointType);
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PhysicsWorld.ts
var PhysicsWorld = __webpack_require__(25898);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PhysicsWorld.ts



const physicsWorldSopParamsLabelRegister = {
  nodeClass: PhysicsWorld/* PhysicsWorldSopNode */.B,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelVector3(node.p.gravity)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PointLight.ts
var sop_PointLight = __webpack_require__(60208);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PointLight.ts



const pointLightSopParamsLabelRegister = {
  nodeClass: sop_PointLight/* PointLightSopNode */.J,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelPointLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/PolarTransform.ts
var PolarTransform = __webpack_require__(32490);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/PolarTransform.ts



const polarTransformSopParamsLabelRegister = {
  nodeClass: PolarTransform/* PolarTransformSopNode */.L,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelNumber(node.p.applyOn),
        _paramLabelNumber(node.p.longitude),
        _paramLabelNumber(node.p.latitude),
        _paramLabelNumber(node.p.depth)
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Quadrangulate.ts + 5 modules
var Quadrangulate = __webpack_require__(40880);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Quadrangulate.ts



const quadrangulateSopParamsLabelRegister = {
  nodeClass: Quadrangulate/* QuadrangulateSopNode */.t,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelBoolean(node.p.regular)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/QuadSmooth.ts
var QuadSmooth = __webpack_require__(11044);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/QuadSmooth.ts



const quadSmoothSopParamsLabelRegister = {
  nodeClass: QuadSmooth/* QuadSmoothSopNode */.ru,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelNumber(node.p.mode), _paramLabelNumber(node.p.iterations)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/QuadTriangulate.ts
var QuadTriangulate = __webpack_require__(72926);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/QuadTriangulate.ts



const quadTriangulateSopParamsLabelRegister = {
  nodeClass: QuadTriangulate/* QuadTriangulateSopNode */.n,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      _paramLabelBoolean(node.p.triangles),
      _paramLabelBoolean(node.p.wireframe),
      _paramLabelBoolean(node.p.center)
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Ray.ts
var Ray = __webpack_require__(13200);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Ray.ts



const raySopParamsLabelRegister = {
  nodeClass: Ray/* RaySopNode */.U,
  setupFunc: (node) => ({
    params: [node.p.mode],
    callback: () => _paramLabelNumber(node.p.mode)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/RestAttributes.ts
var RestAttributes = __webpack_require__(94654);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/RestAttributes.ts




const compactElements = [];
const restAttributesSopParamsLabelRegister = {
  nodeClass: RestAttributes/* RestAttributesSopNode */.q,
  setupFunc: (node) => ({
    params: [node.p.tposition, node.p.position, node.p.restP, node.p.tnormal, node.p.normal, node.p.restN],
    callback: () => {
      ArrayUtils/* ArrayUtils.compact */.BB.compact(
        [
          (0,Type/* isBooleanTrue */.bI)(node.pv.tposition) ? `${node.pv.position} -> ${node.pv.restP}` : null,
          (0,Type/* isBooleanTrue */.bI)(node.pv.tnormal) ? `${node.pv.normal} -> ${node.pv.restN}` : null
        ],
        compactElements
      );
      return compactElements.join(", ");
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/RoundedBox.ts
var RoundedBox = __webpack_require__(79259);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/RoundedBox.ts



const roundedBoxSopParamsLabelRegister = {
  nodeClass: RoundedBox/* RoundedBoxSopNode */._,
  setupFunc: (node) => ({
    params: [node.p.sizes, node.p.size, node.p.bevel],
    callback: () => {
      return [_paramLabelVector3(node.p.sizes), _paramLabelNumber(node.p.size), _paramLabelNumber(node.p.bevel)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Scatter.ts
var Scatter = __webpack_require__(27881);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Scatter.ts




const scatterSopParamsLabelRegister = {
  nodeClass: Scatter/* ScatterSopNode */.v,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [
        _paramLabelNumber(node.p.pointsCount),
        _paramLabelNumber(node.p.seed),
        _paramLabelBoolean(node.p.useWeightAttribute)
      ];
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.useWeightAttribute)) {
        list.push(_paramLabelString(node.p.weightAttribute));
      }
      list.push(_paramLabelBoolean(node.p.transferAttributes));
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.transferAttributes)) {
        list.push(_paramLabelString(node.p.attributesToTransfer));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.addIdAttribute)) {
        list.push(_paramLabelBoolean(node.p.addIdAttribute));
      }
      if ((0,Type/* isBooleanTrue */.bI)(node.pv.addIdnAttribute)) {
        list.push(_paramLabelBoolean(node.p.addIdnAttribute));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/SetChildren.ts
var SetChildren = __webpack_require__(35730);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/SetChildren.ts



const setChildrenSopParamsLabelRegister = {
  nodeClass: SetChildren/* SetChildrenSopNode */.S,
  setupFunc: (node) => ({
    params: node.p.clearExistingChildren,
    callback: () => `${_booleanAndIcon(node.pv.clearExistingChildren)} clearExistingChildren`
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/SetGeometry.ts
var SetGeometry = __webpack_require__(58420);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/operations/sop/SetGeometry.ts
var sop_SetGeometry = __webpack_require__(43099);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/SetGeometry.ts



const setGeometrySopParamsLabelRegister = {
  nodeClass: SetGeometry/* SetGeometrySopNode */.S,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return sop_SetGeometry/* SET_GEOMETRY_MODES */.xj[node.pv.mode];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Sphere.ts
var Sphere = __webpack_require__(30478);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Sphere.ts



const sphereSopParamsLabelRegister = {
  nodeClass: Sphere/* SphereSopNode */._,
  setupFunc: (node) => ({
    params: [node.p.type, node.p.radius],
    callback: () => {
      return [_paramLabelNumber(node.p.type), _paramLabelNumber(node.p.radius)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Split.ts
var Split = __webpack_require__(35879);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Split.ts


const splitSopParamsLabelRegister = {
  nodeClass: Split/* SplitSopNode */.S,
  setupFunc: (node) => ({
    params: [node.p.attribName],
    callback: () => {
      return `${node.pv.attribName}`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/SubnetInput.ts
var SubnetInput = __webpack_require__(69046);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/SubnetInput.ts


const subnetInputSopParamsLabelRegister = {
  nodeClass: SubnetInput/* SubnetInputSopNode */.j,
  setupFunc: (node) => ({
    params: node.p.input,
    callback: () => `${node.pv.input}`
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/SpotLight.ts
var sop_SpotLight = __webpack_require__(55334);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/SpotLight.ts



const spotLightSopParamsLabelRegister = {
  nodeClass: sop_SpotLight/* SpotLightSopNode */._,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => paramsLabelSpotLight(node)
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Solver.ts + 1 modules
var Solver = __webpack_require__(10778);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Solver.ts



const solverSopParamsLabelRegister = {
  nodeClass: Solver/* SolverSopNode */.S,
  setupFunc: (node) => ({
    params: node.p.iterations,
    callback: () => {
      return _paramLabelNumber(node.p.iterations);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/operations/sop/Sort.ts
var Sort = __webpack_require__(32234);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Sort.ts
var sop_Sort = __webpack_require__(98811);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Sort.ts



const sortSopParamsLabelRegister = {
  nodeClass: sop_Sort/* SortSopNode */.i,
  setupFunc: (node) => ({
    params: [node.p.mode, node.p.targetType],
    callback: () => {
      return `${Sort/* SORT_MODES */.iU[node.pv.mode]} (${Sort/* SORT_TARGET_TYPES */.Xp[node.pv.targetType]})`;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Switch.ts
var Switch = __webpack_require__(71390);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Switch.ts



const switchSopParamsLabelRegister = {
  nodeClass: Switch/* SwitchSopNode */.j,
  setupFunc: (node) => ({
    params: node.p.input,
    callback: () => {
      return _paramLabelNumber(node.p.input);
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Tangent.ts
var Tangent = __webpack_require__(69235);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Tangent.ts



const tangentSopParamsLabelRegister = {
  nodeClass: Tangent/* TangentSopNode */.k,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [_paramLabelNumber(node.p.mode)];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Tetrahedralize.ts + 6 modules
var Tetrahedralize = __webpack_require__(78925);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Tetrahedralize.ts



const tetrahedralizeSopParamsLabelRegister = {
  nodeClass: Tetrahedralize/* TetrahedralizeSopNode */.i,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [_paramLabelNumber(node.p.innerPointsResolution), _paramLabelNumber(node.p.minQuality)];
      if (node.pv.stepByStep) {
        list.push(_paramLabelNumber(node.p.step));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Tetrahedron.ts + 1 modules
var Tetrahedron = __webpack_require__(85224);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Tetrahedron.ts



const tetrahedronSopParamsLabelRegister = {
  nodeClass: Tetrahedron/* TetrahedronSopNode */.b,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      return [
        _paramLabelNumber(node.p.radius),
        _paramLabelNumber(node.p.detail),
        _paramLabelBoolean(node.p.pointsOnly)
      ];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Text.ts + 10 modules
var Text = __webpack_require__(64481);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Text.ts


const textSopParamsLabelRegister = {
  nodeClass: Text/* TextSopNode */.m,
  setupFunc: (node) => ({
    params: node.p.text,
    callback: () => node.p.text.rawInput().split("\n")
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Transform.ts
var sop_Transform = __webpack_require__(85114);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Transform.ts




const transformSopParamsLabelRegister = {
  nodeClass: sop_Transform/* TransformSopNode */.J,
  setupFunc: (node) => ({
    params: [node.p.applyOn, node.p.objectMode],
    callback: () => {
      const applyOnParamLabel = _paramLabelNumber(node.p.applyOn);
      const list = [applyOnParamLabel];
      if (node.applyOn() == Transform/* TransformTargetType.OBJECT */.dH.OBJECT) {
        list.push(_paramLabelNumber(node.p.objectMode));
      }
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/TransformReset.ts
var TransformReset = __webpack_require__(94176);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/TransformReset.ts



const transformResetSopParamsLabelRegister = {
  nodeClass: TransformReset/* TransformResetSopNode */.A,
  setupFunc: (node) => ({
    params: node.p.mode,
    callback: () => [_paramLabelNumber(node.p.mode)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/TransformMulti.ts
var TransformMulti = __webpack_require__(32495);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/TransformMulti.ts



const transformMultiSopParamsLabelRegister = {
  nodeClass: TransformMulti/* TransformMultiSopNode */.U,
  setupFunc: (node) => ({
    params: node.p.applyOn,
    callback: () => {
      return Transform/* TRANSFORM_TARGET_TYPES */.Pr[node.pv.applyOn];
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Tube.ts
var Tube = __webpack_require__(84960);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/Tube.ts



const tubeSopParamsLabelRegister = {
  nodeClass: Tube/* TubeSopNode */.a,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const list = [];
      if (node.pv.singleRadius) {
        list.push(_paramLabelNumber(node.p.radius));
      } else {
        list.push(_paramLabelNumber(node.p.radiusTop));
        list.push(_paramLabelNumber(node.p.radiusBottom));
      }
      list.push(_paramLabelNumber(node.p.height));
      return list;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/UvUnwrap.ts
var UvUnwrap = __webpack_require__(50142);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/UvUnwrap.ts



const uvUnwrapSopParamsLabelRegister = {
  nodeClass: UvUnwrap/* UvUnwrapSopNode */.f,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelNumber(node.p.method), _paramLabelString(node.p.uv)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/WFCDebug.ts
var WFCDebug = __webpack_require__(93055);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/WFCDebug.ts



const WFCDebugSopParamsLabelRegister = {
  nodeClass: WFCDebug/* WFCDebugSopNode */.B,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelString(node.p.srcTileId), _paramLabelString(node.p.destTileId)]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/WFCRuleConnectionFromSideName.ts
var WFCRuleConnectionFromSideName = __webpack_require__(93968);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/WFCRuleConnectionFromSideName.ts



const WFCRuleConnectionFromSideNameSopParamsLabelRegister = {
  nodeClass: WFCRuleConnectionFromSideName/* WFCRuleConnectionFromSideNameSopNode */.n,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      _paramLabelString(node.p.srcTileId),
      _paramLabelString(node.p.destTileId),
      _paramLabelString(node.p.sideName)
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/WFCSolver.ts + 3 modules
var WFCSolver = __webpack_require__(82140);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/WFCSolver.ts



const WFCSolverSopParamsLabelRegister = {
  nodeClass: WFCSolver/* WFCSolverSopNode */.Q,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [
      _paramLabelNumber(node.p.stepsCount),
      _paramLabelNumber(node.p.quadSeed),
      _paramLabelNumber(node.p.configSeed)
    ]
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/WFCTileSideName.ts
var WFCTileSideName = __webpack_require__(36524);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/WFCTileSideName.ts



const WFCTileSideNameSopParamsLabelRegister = {
  nodeClass: WFCTileSideName/* WFCTileSideNameSopNode */.P,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => {
      const { sameNameForSelectedSides, south, north, west, east, bottom, top } = node.pv;
      const sideNames = [];
      if (sameNameForSelectedSides == true) {
        sideNames.push(node.pv.sideName);
      } else {
        if (south)
          sideNames.push(node.pv.southName);
        if (north)
          sideNames.push(node.pv.northName);
        if (west)
          sideNames.push(node.pv.westName);
        if (east)
          sideNames.push(node.pv.eastName);
        if (bottom)
          sideNames.push(node.pv.bottomName);
        if (top)
          sideNames.push(node.pv.topName);
      }
      const results = [];
      for (const sideName of sideNames) {
        const sides = [];
        if (south && (sameNameForSelectedSides || node.pv.southName == sideName))
          sides.push("s");
        if (north && (sameNameForSelectedSides || node.pv.northName == sideName))
          sides.push("n");
        if (west && (sameNameForSelectedSides || node.pv.westName == sideName))
          sides.push("w");
        if (east && (sameNameForSelectedSides || node.pv.eastName == sideName))
          sides.push("e");
        if (bottom && (sameNameForSelectedSides || node.pv.bottomName == sideName))
          sides.push("b");
        if (top && (sameNameForSelectedSides || node.pv.topName == sideName))
          sides.push("t");
        results.push(`${sideName}: ${sides.join(", ")}`);
      }
      if (node.pv.highlight) {
        results.push(_paramLabelBoolean(node.p.highlight));
      }
      return results;
    }
  })
};

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/WFCTileTransform.ts
var WFCTileTransform = __webpack_require__(70713);
;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/sop/WFCTileTransform.ts



const WFCTileTransformSopParamsLabelRegister = {
  nodeClass: WFCTileTransform/* WFCTileTransformSopNode */.l,
  setupFunc: (node) => ({
    params: node.params.all,
    callback: () => [_paramLabelNumber(node.p.sn), _paramLabelNumber(node.p.we), _paramLabelNumber(node.p.bt)]
  })
};

;// CONCATENATED MODULE: ../src/editor/core/hooks/paramsLabel/ParamsLabelHooksController.ts

























































































































































































































































class EditorCoreParamsLabelHooksController {
  static registerAll() {
    if (this._registered) {
      return;
    }
    this._registered = true;
    this.registerAllParamsLabel();
  }
  static registerAllParamsLabel() {
    this.addRegister(delayAnimParamsLabelRegister);
    this.addRegister(durationAnimParamsLabelRegister);
    this.addRegister(easingAnimParamsLabelRegister);
    this.addRegister(keyframesAnimParamsLabelRegister);
    this.addRegister(mergeAnimParamsLabelRegister);
    this.addRegister(operationAnimParamsLabelRegister);
    this.addRegister(positionAnimParamsLabelRegister);
    this.addRegister(propertyNameAnimParamsLabelRegister);
    this.addRegister(propertyValueAnimParamsLabelRegister);
    this.addRegister(repeatAnimParamsLabelRegister);
    this.addRegister(targetAnimParamsLabelRegister);
    this.addRegister(fileAudioParamsLabelRegister);
    this.addRegister(volumeAudioParamsLabelRegister);
    this.addRegister(builderCopParamsLabelRegister);
    this.addRegister(builder2DArrayCopParamsLabelRegister);
    this.addRegister(colorCopParamsLabelRegister);
    this.addRegister(cubeCameraCopParamsLabelRegister);
    this.addRegister(geometryAttributeCopParamsLabelRegister);
    this.addRegister(gifCopParamsLabelRegister);
    this.addRegister(imageCopParamsLabelRegister);
    this.addRegister(imageEXRCopParamsLabelRegister);
    this.addRegister(imageHDRCopParamsLabelRegister);
    this.addRegister(imageKTX2CopParamsLabelRegister);
    this.addRegister(lightMapCopParamsLabelRegister);
    this.addRegister(lutCopParamsLabelRegister);
    this.addRegister(mapboxElevationCopParamsLabelRegister);
    this.addRegister(mapboxSatelliteCopParamsLabelRegister);
    this.addRegister(renderCopParamsLabelRegister);
    this.addRegister(sdfFromObjectCopParamsLabelRegister);
    this.addRegister(sdfFromUrlCopParamsLabelRegister);
    this.addRegister(videoCopParamsLabelRegister);
    this.addRegister(webCamCopParamsLabelRegister);
    this.addRegister(animationEventParamsLabelRegister);
    this.addRegister(blockEventParamsLabelRegister);
    this.addRegister(cameraMapControlsEventParamsLabelRegister);
    this.addRegister(cameraOrbitControlsEventParamsLabelRegister);
    this.addRegister(dragEventParamsLabelRegister);
    this.addRegister(firstPersonControlsEventParamsLabelRegister);
    this.addRegister(keyboardEventParamsLabelRegister);
    this.addRegister(mobileJoystickControlsEventParamsLabelRegister);
    this.addRegister(mouseEventParamsLabelRegister);
    this.addRegister(paramEventParamsLabelRegister);
    this.addRegister(pointerEventParamsLabelRegister);
    this.addRegister(sceneEventParamsLabelRegister);
    this.addRegister(scrollTriggerEventParamsLabelRegister);
    this.addRegister(setParamEventParamsLabelRegister);
    this.addRegister(touchEventParamsLabelRegister);
    this.addRegister(windowEventParamsLabelRegister);
    this.addRegister(attributeGlParamsLabelRegister);
    this.addRegister(colorCorrectGlParamsLabelRegister);
    this.addRegister(compareGlParamsLabelRegister);
    this.addRegister(constantGlParamsLabelRegister);
    this.addRegister(paramGlParamsLabelRegister);
    this.addRegister(rampGlParamsLabelRegister);
    this.addRegister(SDFRepeatGlParamsLabelRegister);
    this.addRegister(textureGlParamsLabelRegister);
    this.addRegister(textureSDFGlParamsLabelRegister);
    this.addRegister(varyingReadGlGlParamsLabelRegister);
    this.addRegister(varyingWriteGlParamsLabelRegister);
    this.addRegister(attributeJsParamsLabelRegister);
    this.addRegister(animationActionJsParamsLabelRegister);
    this.addRegister(compareJsParamsLabelRegister);
    this.addRegister(constantJsParamsLabelRegister);
    this.addRegister(cursorJsNodeActorParamsLabelRegister);
    this.addRegister(easingJsParamsLabelRegister);
    this.addRegister(getChildrenAttributesJsNodeJsParamsLabelRegister);
    this.addRegister(getGeometryNodeObjectsJsNodeJsParamsLabelRegister);
    this.addRegister(getNodeJsNodeJsParamsLabelRegister);
    this.addRegister(getObjectChildJsNodeJsParamsLabelRegister);
    this.addRegister(getMaterialJsNodeJsParamsLabelRegister);
    this.addRegister(getObjectJsNodeJsParamsLabelRegister);
    this.addRegister(getObjectAttributeJsNodeJsParamsLabelRegister);
    this.addRegister(getObjectUserDataJsNodeJsParamsLabelRegister);
    this.addRegister(getParamJsParamsLabelRegister);
    this.addRegister(getTextureJsNodeJsParamsLabelRegister);
    this.addRegister(getVideoPropertyJsNodeJsParamsLabelRegister);
    this.addRegister(importAttributeJsParamsLabelRegister);
    this.addRegister(onChildAttributeUpdateJsNodeJsParamsLabelRegister);
    this.addRegister(onKeyJsNodeParamsLabelRegister);
    this.addRegister(onKeydownJsNodeParamsLabelRegister);
    this.addRegister(onKeypressJsNodeParamsLabelRegister);
    this.addRegister(onKeyupJsNodeParamsLabelRegister);
    this.addRegister(onObjectAttributeUpdateJsNodeParamsLabelRegister);
    this.addRegister(onObjectClickJsNodeJsParamsLabelRegister);
    this.addRegister(onObjectDispatchEventJsNodeJsNodeJsParamsLabelRegister);
    this.addRegister(onObjectPointerdownJsNodeParamsLabelRegister);
    this.addRegister(onObjectPointerupJsNodeParamsLabelRegister);
    this.addRegister(onPointerdownJsNodeParamsLabelRegister);
    this.addRegister(onPointerupJsNodeParamsLabelRegister);
    this.addRegister(onVideoEventJsNodeJsParamsLabelRegister);
    this.addRegister(paramJsNodeParamsLabelRegister);
    this.addRegister(pauseAudioSourceJsNodeJsParamsLabelRegister);
    this.addRegister(playAnimationJsNodeJsParamsLabelRegister);
    this.addRegister(playAudioSourceJsNodeJsParamsLabelRegister);
    this.addRegister(playInstrumentNoteJsNodeJsParamsLabelRegister);
    this.addRegister(rayFromCursorJsNodeActorParamsLabelRegister);
    this.addRegister(setMaterialUniformJsNodeJsParamsLabelRegister);
    this.addRegister(setObjectAttributeJsNodeParamsLabelRegister);
    this.addRegister(setObjectLookAtJsNodeJsParamsLabelRegister);
    this.addRegister(setObjectPolarTransformJsNodeJsParamsLabelRegister);
    this.addRegister(setObjectPositionJsNodeJsParamsLabelRegister);
    this.addRegister(setObjectRotationJsNodeJsParamsLabelRegister);
    this.addRegister(setObjectScaleJsNodeJsParamsLabelRegister);
    this.addRegister(setParamJsParamsLabelRegister);
    this.addRegister(colorMatParamsLabelRegister);
    this.addRegister(envMapMatParamsLabelRegister);
    this.addRegister(lineBasicMatParamsLabelRegister);
    this.addRegister(meshBasicMatParamsLabelRegister);
    this.addRegister(meshMatcapMatParamsLabelRegister);
    this.addRegister(meshPhongMatParamsLabelRegister);
    this.addRegister(meshPhysicalMatParamsLabelRegister);
    this.addRegister(meshPhysicalBuilderMatParamsLabelRegister);
    this.addRegister(meshStandardMatParamsLabelRegister);
    this.addRegister(meshStandardBuilderMatParamsLabelRegister);
    this.addRegister(meshToonMatParamsLabelRegister);
    this.addRegister(pointsMatParamsLabelRegister);
    this.addRegister(rayMarchingBuilderMatParamsLabelRegister);
    this.addRegister(areaLightObjParamsLabelRegister);
    this.addRegister(ambientLightObjParamsLabelRegister);
    this.addRegister(audioListenerObjParamsLabelRegister);
    this.addRegister(directionalLightObjParamsLabelRegister);
    this.addRegister(hemisphereLightObjParamsLabelRegister);
    this.addRegister(pointLightObjParamsLabelRegister);
    this.addRegister(sceneObjParamsLabelRegister);
    this.addRegister(spotLightObjParamsLabelRegister);
    this.addRegister(actorSopParamsLabelRegister);
    this.addRegister(actorInstanceSopParamsLabelRegister);
    this.addRegister(actorPointSopParamsLabelRegister);
    this.addRegister(addSopParamsLabelRegister);
    this.addRegister(areaLightSopParamsLabelRegister);
    this.addRegister(ambientLightSopParamsLabelRegister);
    this.addRegister(attribAddMultSopParamsLabelRegister);
    this.addRegister(attribCastSopParamsLabelRegister);
    this.addRegister(attribCopySopParamsLabelRegister);
    this.addRegister(attribCreateSopParamsLabelRegister);
    this.addRegister(attribDeleteSopParamsLabelRegister);
    this.addRegister(attribFromTextureSopParamsLabelRegister);
    this.addRegister(attribIdSopParamsLabelRegister);
    this.addRegister(attribNormalizeSopParamsLabelRegister);
    this.addRegister(attribPromoteSopParamsLabelRegister);
    this.addRegister(attribRemapSopParamsLabelRegister);
    this.addRegister(attribRenameSopParamsLabelRegister);
    this.addRegister(attribSetAtIndexSopParamsLabelRegister);
    this.addRegister(attribTransferSopParamsLabelRegister);
    this.addRegister(audioNotesSopParamsLabelRegister);
    this.addRegister(bboxScatterSopParamsLabelRegister);
    this.addRegister(booleanSopParamsLabelRegister);
    this.addRegister(boxSopParamsLabelRegister);
    this.addRegister(boxLinesSopParamsLabelRegister);
    this.addRegister(cadBooleanSopParamsLabelRegister);
    this.addRegister(cadConvertDimensionSopParamsLabelRegister);
    this.addRegister(cadFileSTEPSopParamsLabelRegister);
    this.addRegister(cadFilletSopParamsLabelRegister);
    this.addRegister(cadGroupSopParamsLabelRegister);
    this.addRegister(cadMirrorSopParamsLabelRegister);
    this.addRegister(cadThicknessSopParamsLabelRegister);
    this.addRegister(cameraControlsSopParamsLabelRegister);
    this.addRegister(cameraFrameModeSopParamsLabelRegister);
    this.addRegister(cameraProjectSopParamsLabelRegister);
    this.addRegister(cameraFPSSopParamsLabelRegister);
    this.addRegister(cameraRenderSceneSopParamsLabelRegister);
    this.addRegister(cameraViewOffsetSopParamsLabelRegister);
    this.addRegister(cameraWebXRARMarkerTrackingSopParamsLabelRegister);
    this.addRegister(cameraWebXRARSopParamsLabelRegister);
    this.addRegister(cameraWebXRVRSopParamsLabelRegister);
    this.addRegister(capsuleSopParamsLabelRegister);
    this.addRegister(centerSopParamsLabelRegister);
    this.addRegister(circle3PointsSopParamsLabelRegister);
    this.addRegister(colorSopParamsLabelRegister);
    this.addRegister(coneSopParamsLabelRegister);
    this.addRegister(copySopParamsLabelRegister);
    this.addRegister(csgBooleanSopParamsLabelRegister);
    this.addRegister(cubeCameraSopParamsLabelRegister);
    this.addRegister(dataUrlSopParamsLabelRegister);
    this.addRegister(deleteSopParamsLabelRegister);
    this.addRegister(deleteByNameSopParamsLabelRegister);
    this.addRegister(directionalLightSopParamsLabelRegister);
    this.addRegister(emptyObjectSopParamsLabelRegister);
    this.addRegister(entityBuilderSopParamsLabelRegister);
    this.addRegister(facetSopParamsLabelRegister);
    this.addRegister(fileDRCSopParamsLabelRegister);
    this.addRegister(fileFBXSopParamsLabelRegister);
    this.addRegister(fileGEOJSONSopParamsLabelRegister);
    this.addRegister(fileGLTFSopParamsLabelRegister);
    this.addRegister(fileMPDSopParamsLabelRegister);
    this.addRegister(fileOBJSopParamsLabelRegister);
    this.addRegister(filePDBSopParamsLabelRegister);
    this.addRegister(filePLYSopParamsLabelRegister);
    this.addRegister(fileSTLSopParamsLabelRegister);
    this.addRegister(fileVOXSopParamsLabelRegister);
    this.addRegister(fileMultiOBJSopParamsLabelRegister);
    this.addRegister(fileSVGSopParamsLabelRegister);
    this.addRegister(fuseSopParamsLabelRegister);
    this.addRegister(hemisphereLightSopParamsLabelRegister);
    this.addRegister(hexagonsSopParamsLabelRegister);
    this.addRegister(hierarchySopParamsLabelRegister);
    this.addRegister(icosahedronSopParamsLabelRegister);
    this.addRegister(instanceSopParamsLabelRegister);
    this.addRegister(jitterSopParamsLabelRegister);
    this.addRegister(layerSopParamsLabelRegister);
    this.addRegister(lightProbeSopParamsLabelRegister);
    this.addRegister(lineSopParamsLabelRegister);
    this.addRegister(mapboxCameraSopParamsLabelRegister);
    this.addRegister(mapboxLayerSopParamsLabelRegister);
    this.addRegister(mapboxPlaneSopParamsLabelRegister);
    this.addRegister(mapboxTransformSopParamsLabelRegister);
    this.addRegister(materialSopParamsLabelRegister);
    this.addRegister(mergeSopParamsLabelRegister);
    this.addRegister(noiseSopParamsLabelRegister);
    this.addRegister(objectMergeSopParamsLabelRegister);
    this.addRegister(objectsLayoutSopParamsLabelRegister);
    this.addRegister(objectPropertiesSopParamsLabelRegister);
    this.addRegister(orthographicCameraSopParamsLabelRegister);
    this.addRegister(paletteSopParamsLabelRegister);
    this.addRegister(perspectiveCameraSopParamsLabelRegister);
    this.addRegister(planeSopParamsLabelRegister);
    this.addRegister(polarTransformSopParamsLabelRegister);
    this.addRegister(physicsGroundSopParamsLabelRegister);
    this.addRegister(physicsPlayerSopParamsLabelRegister);
    this.addRegister(physicsRBDAttributesSopParamsLabelRegister);
    this.addRegister(physicsRBDJointSopParamsLabelRegister);
    this.addRegister(physicsWorldSopParamsLabelRegister);
    this.addRegister(pointLightSopParamsLabelRegister);
    this.addRegister(quadrangulateSopParamsLabelRegister);
    this.addRegister(quadSmoothSopParamsLabelRegister);
    this.addRegister(quadTriangulateSopParamsLabelRegister);
    this.addRegister(raySopParamsLabelRegister);
    this.addRegister(restAttributesSopParamsLabelRegister);
    this.addRegister(roundedBoxSopParamsLabelRegister);
    this.addRegister(scatterSopParamsLabelRegister);
    this.addRegister(setChildrenSopParamsLabelRegister);
    this.addRegister(setGeometrySopParamsLabelRegister);
    this.addRegister(sphereSopParamsLabelRegister);
    this.addRegister(splitSopParamsLabelRegister);
    this.addRegister(spotLightSopParamsLabelRegister);
    this.addRegister(solverSopParamsLabelRegister);
    this.addRegister(sortSopParamsLabelRegister);
    this.addRegister(subnetInputSopParamsLabelRegister);
    this.addRegister(switchSopParamsLabelRegister);
    this.addRegister(tangentSopParamsLabelRegister);
    this.addRegister(tetrahedralizeSopParamsLabelRegister);
    this.addRegister(tetrahedronSopParamsLabelRegister);
    this.addRegister(textSopParamsLabelRegister);
    this.addRegister(transformSopParamsLabelRegister);
    this.addRegister(transformResetSopParamsLabelRegister);
    this.addRegister(transformMultiSopParamsLabelRegister);
    this.addRegister(tubeSopParamsLabelRegister);
    this.addRegister(uvUnwrapSopParamsLabelRegister);
    this.addRegister(WFCDebugSopParamsLabelRegister);
    this.addRegister(WFCRuleConnectionFromSideNameSopParamsLabelRegister);
    this.addRegister(WFCSolverSopParamsLabelRegister);
    this.addRegister(WFCTileSideNameSopParamsLabelRegister);
    this.addRegister(WFCTileTransformSopParamsLabelRegister);
    this.addRegister(bloomPostParamsLabelRegister);
    postProcessNetworksRegisters.forEach((register) => {
      this.addRegister(register);
    });
    this.addRegister(outlinePostParamsLabelRegister);
    this.addRegister(renderPostParamsLabelRegister);
    this.addRegister(toneMappingPostParamsLabelRegister);
    this.addRegister(updateScenePostParamsLabelRegister);
    this.addRegister(webGLRendererRopParamsLabelRegister);
  }
  static addRegister(register) {
    const { nodeClass, setupFunc } = register;
    const context = nodeClass.context();
    const type = nodeClass.type();
    let typeMap = this._paramsLabelHooks.get(context);
    if (typeMap == null) {
      typeMap = /* @__PURE__ */ new Map();
      this._paramsLabelHooks.set(context, typeMap);
    }
    const existingSetup = typeMap.get(type);
    if (existingSetup) {
      console.warn(`existing params label setup for ${context}/${type}`);
      return;
    }
    typeMap.set(type, setupFunc);
  }
  static nodeConfig(node) {
    var _a;
    return (_a = this._paramsLabelHooks.get(node.context())) == null ? void 0 : _a.get(node.type());
  }
}
EditorCoreParamsLabelHooksController._paramsLabelHooks = /* @__PURE__ */ new Map();
EditorCoreParamsLabelHooksController._registered = false;

;// CONCATENATED MODULE: ../src/editor/core/hooks/HooksController.ts



class EditorCoreHooksController {
  static registerAll() {
    if (this._registered) {
      return;
    }
    this._registered = true;
    this.onCreate.registerAll();
    this.paramsLabel.registerAll();
  }
}
EditorCoreHooksController._registered = false;
EditorCoreHooksController.onCreate = EditorCoreOnCreateHooksController;
EditorCoreHooksController.paramsLabel = EditorCoreParamsLabelHooksController;


/***/ }),

/***/ 4770:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "c": function() { return /* binding */ createAnimationActionsForAnimationMixer; },
/* harmony export */   "l": function() { return /* binding */ AnimationMixerJsOnCreateHookRegister; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21410);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38857);
/* harmony import */ var _polygonjs_polygonjs_src_engine_functions_AnimationMixer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(67120);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16718);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(76485);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};






const translateVector = new three__WEBPACK_IMPORTED_MODULE_0__.Vector2();
function outputValueForFirstObject(node, outputName = "") {
  let matchedObject;
  const scene = node.scene();
  const actorsManager = scene.actorsManager;
  const parentNode = node.functionNode();
  scene.threejsScene().traverse((object) => {
    const nodeIds = actorsManager.objectActorNodeIds(object);
    if (!parentNode) {
      return;
    }
    if (!nodeIds) {
      return;
    }
    if (!nodeIds.includes(parentNode.graphNodeId())) {
      return;
    }
    matchedObject = object;
  });
  if (!matchedObject) {
    return;
  }
  return (0,_polygonjs_polygonjs_src_engine_functions_AnimationMixer__WEBPACK_IMPORTED_MODULE_1__/* .findOrCreateAnimationMixer */ .Oq)(matchedObject);
}
function createAnimationActionsForAnimationMixer(node) {
  return __async(this, null, function* () {
    const mixerNodeParent = node.parent();
    yield mixerNodeParent.compute();
    if (!mixerNodeParent) {
      console.log("no parent");
      return;
    }
    const mixer = outputValueForFirstObject(node);
    if (!mixer) {
      console.log("no mixer");
      return;
    }
    const clips = (0,_polygonjs_polygonjs_src_engine_functions_AnimationMixer__WEBPACK_IMPORTED_MODULE_1__/* .animationClipsFromAnimationMixer */ .Q5)(mixer);
    if (!clips) {
      console.log("no clips");
      return;
    }
    let i = 0;
    const animationActionNodes = [];
    for (let clip of clips) {
      const animationAction = mixerNodeParent.createNode("animationAction");
      animationAction.setName(`animationAction_${clip.name}`);
      animationAction.p.clipName.set(clip.name);
      translateVector.set(200, i * 150);
      animationAction.uiData.setPosition(node.uiData.position()).translate(translateVector);
      animationAction.setInput(0, node);
      animationActionNodes.push(animationAction);
      i++;
    }
    if (animationActionNodes.length > 0) {
      const switch1 = mixerNodeParent.createNode("switch");
      const switchInputParam = mixerNodeParent.createNode("param");
      switchInputParam.setJsType(_polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__/* .JsConnectionPointType.INT */ .zF.INT);
      switchInputParam.p.name.set("clipIndex");
      switchInputParam.setName("param_switchInputParam");
      switch1.setInput(0, switchInputParam);
      switch1.uiData.setPosition(node.uiData.position()).translate(translateVector.set(500, 0));
      switchInputParam.uiData.setPosition(node.uiData.position()).translate(translateVector.set(300, -100));
      let j = 0;
      for (let animationActionNode of animationActionNodes) {
        switch1.setInput(j + 1, animationActionNode);
        j++;
      }
      const animationActionFadeInManualTrigger = mixerNodeParent.createNode("onManualTrigger");
      const animationActionFadeIn1 = mixerNodeParent.createNode("animationActionFadeIn");
      animationActionFadeIn1.setInput(_polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__/* .JsConnectionPointType.TRIGGER */ .zF.TRIGGER, animationActionFadeInManualTrigger);
      animationActionFadeIn1.setInput(_polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__/* .JsConnectionPointType.ANIMATION_ACTION */ .zF.ANIMATION_ACTION, switch1);
      animationActionFadeIn1.uiData.setPosition(node.uiData.position()).translate(translateVector.set(700, 0));
      animationActionFadeInManualTrigger.uiData.setPosition(node.uiData.position()).translate(translateVector.set(500, -200));
    }
  });
}
function onCreateHook(node) {
  const parent = node.parent();
  if (!parent) {
    return;
  }
  let onEventTick = parent.nodesByType(_polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Js__WEBPACK_IMPORTED_MODULE_3__/* .JsType.ON_TICK */ .K.ON_TICK)[0];
  if (!onEventTick) {
    onEventTick = parent.createNode(_polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Js__WEBPACK_IMPORTED_MODULE_3__/* .JsType.ON_TICK */ .K.ON_TICK);
    onEventTick.uiData.setPosition(node.uiData.position());
    translateVector.set(100, -400);
    onEventTick.uiData.translate(translateVector);
  }
  const animationMixerUpdate = parent.createNode("animationMixerUpdate");
  animationMixerUpdate.uiData.setPosition(node.uiData.position());
  translateVector.set(200, -300);
  animationMixerUpdate.uiData.translate(translateVector);
  animationMixerUpdate.setInput(_polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__/* .JsConnectionPointType.TRIGGER */ .zF.TRIGGER, onEventTick);
  animationMixerUpdate.setInput(_polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__/* .JsConnectionPointType.ANIMATION_MIXER */ .zF.ANIMATION_MIXER, node);
  node.scene().batchUpdates(() => __async(this, null, function* () {
    yield createAnimationActionsForAnimationMixer(node);
  }));
}
class AnimationMixerJsOnCreateHookRegister extends _Base__WEBPACK_IMPORTED_MODULE_4__/* .JsOnCreateHookRegister */ .a {
  type() {
    return _polygonjs_polygonjs_src_engine_poly_registers_nodes_types_Js__WEBPACK_IMPORTED_MODULE_3__/* .JsType.ANIMATION_MIXER */ .K.ANIMATION_MIXER;
  }
  onCreate(node) {
    onCreateHook(node);
  }
}


/***/ }),

/***/ 76485:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": function() { return /* binding */ JsOnCreateHookRegister; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52070);
/* harmony import */ var _BaseOnCreateHookRegister__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(69376);



class JsOnCreateHookRegister extends _BaseOnCreateHookRegister__WEBPACK_IMPORTED_MODULE_0__/* .BaseOnCreateHookRegister */ .r {
  context() {
    return _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.JS */ .sy.JS;
  }
  onCreate(node) {
  }
}


/***/ })

}])
//# sourceMappingURL=src_editor_core_hooks_HooksController_ts.3e92b3cad37c42745c6e.js.map