(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_Sky_ts"],{

/***/ 71314:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return planeHelper1;
    }
    create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return hemisphereLight1;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.5899288964089694, 0.5957731355869416, -0.44842199957743734]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([2.577675363146063, 1.2667211759185875, 3.297697131252362]);
    perspectiveCamera12.p.r.set([-10.154286379496817, 27.578227989314495, 4.740021794010923]);
    perspectiveCamera12.p.s.set([1, 0.9999999999999999, 1]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_sky(parentNode) {
    var sky2 = parentNode.createNode("geo");
    sky2.setName("sky");
    function create_MAT(sky3) {
      var MAT = sky3.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_sky1(MAT2) {
        var sky1 = MAT2.createNode("sky");
        sky1.setName("sky1");
        sky1.uiData.setPosition(-50, 100);
        sky1.params.postCreateSpareParams();
        sky1.params.runOnSceneLoadHooks();
        return sky1;
      }
      create_sky1(MAT);
      MAT.uiData.setPosition(-350, 350);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_material1(sky3) {
      var material12 = sky3.createNode("material");
      material12.setName("material1");
      material12.uiData.setComment("here we assign the sky material to the sphere");
      material12.uiData.setPosition(-150, 350);
      material12.flags.display.set(true);
      material12.p.material.set("../MAT/sky1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_sphere1(sky3) {
      var sphere12 = sky3.createNode("sphere");
      sphere12.setName("sphere1");
      sphere12.uiData.setComment(
        "in order to have a sky that always appears to be far enough, we set the radius of the sphere to a large value, like 1000 in this case.\n\nThe material is set with depthWrite=false, so the far plane of the camera can remain closer than the radius."
      );
      sphere12.uiData.setPosition(-150, -100);
      sphere12.p.radius.set(1e3);
      sphere12.params.postCreateSpareParams();
      sphere12.params.runOnSceneLoadHooks();
      return sphere12;
    }
    create_MAT(sky2);
    var material1 = create_material1(sky2);
    var sphere1 = create_sphere1(sky2);
    material1.setInput(0, sphere1);
    sky2.uiData.setPosition(-50, -150);
    sky2.flags.display.set(true);
    sky2.params.postCreateSpareParams();
    sky2.params.runOnSceneLoadHooks();
    return sky2;
  }
  create_grid(root);
  create_hemisphereLight1(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  var sky = create_sky(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [sky.nodesByType("material")[0]],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_Sky_ts.561c15f683302c6c1048.js.map