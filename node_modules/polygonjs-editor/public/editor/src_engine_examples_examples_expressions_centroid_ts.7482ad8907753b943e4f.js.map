{"version":3,"file":"src_engine_examples_examples_expressions_centroid_ts.7482ad8907753b943e4f.js","mappings":";;;;;;;;;AAYO,SAAS,yCAAyC,MAAuB;AAE/E,QAAM,qBAAqB,KAAK,WAAW,mBAAmB;AAC9D,qBAAmB,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAEpC,QAAM,UAAU,mBAAmB,WAAW,eAAe;AAC7D,QAAM,iBAAiB,QAAQ,WAAW,qBAAqB;AAC/D,qBAAmB,EAAE,SAAS,QAAQ,cAAc;AAEpD,SAAO,EAAC,mBAAkB;AAC3B;;;;;;;;;;;;;;ACnBuD;AAEhD,SAAS,WAAW,SAA2C;AACrE,QAAM,EAAC,MAAK,IAAI;AAChB,QAAM,OAAO,MAAM,KAAK;AACxB,QAAM,MAAM,KAAK,WAAW,KAAK;AAEjC,QAAM,MAAM,IAAI,WAAW,KAAK;AAChC,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,YAAY,IAAI,WAAW,WAAW;AAC5C,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,QAAQ,IAAI,WAAW,OAAO;AAEpC,QAAM,SAAS,GAAG,KAAK;AACvB,YAAU,SAAS,GAAG,GAAG;AACzB,QAAM,SAAS,GAAG,KAAK;AACvB,QAAM,SAAS,GAAG,SAAS;AAC3B,QAAM,MAAM,QAAQ,IAAI,IAAI;AAE5B,QAAM,EAAE,WAAW,IAAI,GAAG;AAC1B,QAAM,EAAE,eAAe,IAAI,EAAE;AAC7B,QAAM,EAAE,aAAa,IAAI,EAAE;AAE3B,QAAM,EAAE,UAAU,IAAI,GAAG;AACzB,QAAM,EAAE,KAAK,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC;AAChC,QAAM,EAAE,OAAO,EAAE,IAAI,IAAI;AAEzB,MAAI,EAAE,KAAK,IAAI,IAAI;AAEnB,YAAU,EAAE,EAAE,EAAE,IAAI,gBAAgB,MAAM,KAAK,OAAO;AACtD,YAAU,EAAE,EAAE,EAAE,IAAI,gBAAgB,MAAM,KAAK,OAAO;AAEtD,QAAM,OAAO;AAAA,IACZ;AAAA,EACD;AAGA,OAAK,WAAW,iBAAiB;AAEjC,QAAM,EAAC,mBAAkB,IAAI,gGAAwC,CAAC,IAAI;AAG1E,QAAM,KAAK;AAOX,SAAO;AAAA,IACN;AAAA,IACA,YAAY,mBAAmB,KAAK;AAAA,IACpC,cAAc,CAAC,KAAK;AAAA,IACpB,YAAY;AAAA,EACb;AACD","sources":["webpack:///../src/engine/examples/ExampleUtils.ts","webpack:///../src/engine/examples/examples/expressions/centroid.ts"],"sourcesContent":["import type {BaseNodeType} from './../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\nimport type {RootManagerNode} from './../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\n// import {PolyScene} from './../../../@polygonjs/polygonjs/src/engine/scene/PolyScene';\n// export function initDefaultScene(scene: PolyScene) {\n// \tconst root = scene.root();\n\n// \t// create a box and a sphere\n// \tconst geo = root.createNode('geo');\n\n// \treturn {scene, root, geo};\n// }\n\nexport function addPerspectiveCameraOBJWithOrbitControls(root: RootManagerNode) {\n\t// create a camera\n\tconst perspectiveCamera1 = root.createNode('perspectiveCamera');\n\tperspectiveCamera1.p.t.set([5, 5, 5]);\n\t// add orbitControls\n\tconst events1 = perspectiveCamera1.createNode('eventsNetwork');\n\tconst orbitsControls = events1.createNode('cameraOrbitControls');\n\tperspectiveCamera1.p.controls.setNode(orbitsControls);\n\n\treturn {perspectiveCamera1};\n}\n\ninterface ReturnedNodeData {\n\tnode: BaseNodeType;\n\tchildren: Record<string, ReturnedNodeData>;\n}\nexport type ReturnedNodeDataDict = Record<string, ReturnedNodeData>;\n","// import {ASSETS_ROOT} from './../../../../../@polygonjs/polygonjs/src/core/loader/AssetsUtils';\n// import {Example} from '../../Example';\nimport type {ExampleData, DataCallbackOptions} from '../../Common';\nimport {addPerspectiveCameraOBJWithOrbitControls} from '../../ExampleUtils';\n// import {ExpressionType} from './../../../../../@polygonjs/polygonjs/src/engine/expressions/methods/Common';\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst geo = root.createNode('geo');\n\n\tconst box = geo.createNode('box');\n\tconst torus = geo.createNode('torus');\n\tconst transform = geo.createNode('transform');\n\tconst noise = geo.createNode('noise');\n\tconst merge = geo.createNode('merge');\n\n\tnoise.setInput(0, torus);\n\ttransform.setInput(0, box);\n\tmerge.setInput(0, noise);\n\tmerge.setInput(1, transform);\n\tmerge.flags.display.set(true);\n\n\ttorus.p.radiusTube.set(0.1);\n\ttorus.p.segmentsRadial.set(10);\n\ttorus.p.segmentsTube.set(30);\n\n\tnoise.p.amplitude.set(0.7);\n\tnoise.p.freq.set([0.3, 0.3, 0.3]);\n\tnoise.p.offset.y.set('$T');\n\n\tbox.p.size.set(0.25);\n\n\ttransform.p.t.x.set(`centroid('../${noise.name()}').x`);\n\ttransform.p.t.z.set(`centroid('../${noise.name()}').z`);\n\n\tnoise.uiData.setComment(\n\t\t`The torus is deformed with a noise SOP, and the box is maintained in its center with the centroid expression`\n\t);\n\n\t// add a light\n\troot.createNode('hemisphereLight');\n\n\tconst {perspectiveCamera1} = addPerspectiveCameraOBJWithOrbitControls(root);\n\n\t// play\n\tscene.play();\n\n\t// EXPORT\n\t// const nodes = [torus];\n\t// const htmlNodes = {box};\n\t// const camera = perspectiveCamera1;\n\t// return {scene, camera, nodes, htmlNodes};\n\treturn {\n\t\tscene,\n\t\tcameraPath: perspectiveCamera1.path(),\n\t\tfocusedNodes: [torus],\n\t\tautoLayout: true,\n\t};\n}\n\n// export const expressionCentroid = [\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_CATEGORY}/${ExamplePrefix.USING_EXPRESSIONS}/centroid`,\n// \t\tcreateData,\n// \t\trelatedExpressions: [ExpressionType.centroid],\n// \t}),\n// ];\n"],"names":[],"sourceRoot":""}