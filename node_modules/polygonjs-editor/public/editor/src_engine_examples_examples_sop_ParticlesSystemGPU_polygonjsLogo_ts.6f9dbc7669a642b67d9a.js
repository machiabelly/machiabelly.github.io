(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_ParticlesSystemGPU_polygonjsLogo_ts"],{

/***/ 29043:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_params_ramp_RampValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32998);




function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  function create_particles(parentNode) {
    var particles2 = parentNode.createNode("geo");
    particles2.setName("particles");
    const particles_nodes = {};
    function create_MAT(particles3) {
      var MAT = particles3.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshBasicBuilder_INSTANCES(MAT2) {
        var meshBasicBuilder_INSTANCES = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder_INSTANCES.setName("meshBasicBuilder_INSTANCES");
        const meshBasicBuilder_INSTANCES_nodes = {};
        function create_attribute1(meshBasicBuilder_INSTANCES2) {
          var attribute1 = meshBasicBuilder_INSTANCES2.createNode("attribute");
          attribute1.setName("attribute1");
          const attribute1_nodes = {};
          attribute1.uiData.setPosition(-500, 300);
          attribute1.p.name.set("idn");
          attribute1.params.postCreateSpareParams();
          attribute1.params.runOnSceneLoadHooks();
          return { node: attribute1, children: attribute1_nodes };
        }
        function create_attribute2(meshBasicBuilder_INSTANCES2) {
          var attribute2 = meshBasicBuilder_INSTANCES2.createNode("attribute");
          attribute2.setName("attribute2");
          const attribute2_nodes = {};
          attribute2.uiData.setPosition(-750, 50);
          attribute2.p.name.set("idn");
          attribute2.p.texportWhenConnected.set(true);
          attribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: true });
          attribute2.params.postCreateSpareParams();
          attribute2.params.runOnSceneLoadHooks();
          return { node: attribute2, children: attribute2_nodes };
        }
        function create_fitFrom01_1(meshBasicBuilder_INSTANCES2) {
          var fitFrom01_1 = meshBasicBuilder_INSTANCES2.createNode("fitFrom01");
          fitFrom01_1.setName("fitFrom01_1");
          const fitFrom01_1_nodes = {};
          fitFrom01_1.uiData.setPosition(-300, 50);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fitFrom01_1.params.get("destMin").set(0.22);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fitFrom01_1.params.get("destMax").set(1.4000000000000001);
          fitFrom01_1.params.postCreateSpareParams();
          fitFrom01_1.params.runOnSceneLoadHooks();
          return { node: fitFrom01_1, children: fitFrom01_1_nodes };
        }
        function create_floatToVec2_1(meshBasicBuilder_INSTANCES2) {
          var floatToVec2_1 = meshBasicBuilder_INSTANCES2.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-350, 300);
          floatToVec2_1.p.y.set(0.72);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_floatToVec2_2(meshBasicBuilder_INSTANCES2) {
          var floatToVec2_2 = meshBasicBuilder_INSTANCES2.createNode("floatToVec2");
          floatToVec2_2.setName("floatToVec2_2");
          const floatToVec2_2_nodes = {};
          floatToVec2_2.uiData.setPosition(-600, 50);
          floatToVec2_2.params.postCreateSpareParams();
          floatToVec2_2.params.runOnSceneLoadHooks();
          return { node: floatToVec2_2, children: floatToVec2_2_nodes };
        }
        function create_floatToVec3_1(meshBasicBuilder_INSTANCES2) {
          var floatToVec3_1 = meshBasicBuilder_INSTANCES2.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(-150, 300);
          floatToVec3_1.p.y.set(1);
          floatToVec3_1.p.z.set(0.76);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_floatToVec3_2(meshBasicBuilder_INSTANCES2) {
          var floatToVec3_2 = meshBasicBuilder_INSTANCES2.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(-150, 50);
          floatToVec3_2.p.x.set(1);
          floatToVec3_2.p.y.set(1);
          floatToVec3_2.p.z.set(1);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_globals1(meshBasicBuilder_INSTANCES2) {
          var globals1 = meshBasicBuilder_INSTANCES2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-850, -150);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_hsvToRgb1(meshBasicBuilder_INSTANCES2) {
          var hsvToRgb1 = meshBasicBuilder_INSTANCES2.createNode("hsvToRgb");
          hsvToRgb1.setName("hsvToRgb1");
          const hsvToRgb1_nodes = {};
          hsvToRgb1.uiData.setPosition(-50, 300);
          hsvToRgb1.params.postCreateSpareParams();
          hsvToRgb1.params.runOnSceneLoadHooks();
          return { node: hsvToRgb1, children: hsvToRgb1_nodes };
        }
        function create_instanceTransform1(meshBasicBuilder_INSTANCES2) {
          var instanceTransform1 = meshBasicBuilder_INSTANCES2.createNode("instanceTransform");
          instanceTransform1.setName("instanceTransform1");
          const instanceTransform1_nodes = {};
          instanceTransform1.uiData.setPosition(50, 0);
          instanceTransform1.params.postCreateSpareParams();
          instanceTransform1.params.runOnSceneLoadHooks();
          return { node: instanceTransform1, children: instanceTransform1_nodes };
        }
        function create_output1(meshBasicBuilder_INSTANCES2) {
          var output1 = meshBasicBuilder_INSTANCES2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_ramp1(meshBasicBuilder_INSTANCES2) {
          var ramp1 = meshBasicBuilder_INSTANCES2.createNode("ramp");
          ramp1.setName("ramp1");
          const ramp1_nodes = {};
          ramp1.uiData.setPosition(-400, 50);
          ramp1.params.postCreateSpareParams();
          ramp1.params.runOnSceneLoadHooks();
          return { node: ramp1, children: ramp1_nodes };
        }
        function create_random1(meshBasicBuilder_INSTANCES2) {
          var random1 = meshBasicBuilder_INSTANCES2.createNode("random");
          random1.setName("random1");
          const random1_nodes = {};
          random1.uiData.setPosition(-250, 300);
          random1.params.postCreateSpareParams();
          random1.params.runOnSceneLoadHooks();
          return { node: random1, children: random1_nodes };
        }
        function create_random2(meshBasicBuilder_INSTANCES2) {
          var random2 = meshBasicBuilder_INSTANCES2.createNode("random");
          random2.setName("random2");
          const random2_nodes = {};
          random2.uiData.setPosition(-500, 50);
          random2.params.postCreateSpareParams();
          random2.params.runOnSceneLoadHooks();
          return { node: random2, children: random2_nodes };
        }
        meshBasicBuilder_INSTANCES_nodes["attribute1"] = create_attribute1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["attribute2"] = create_attribute2(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["fitFrom01_1"] = create_fitFrom01_1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["floatToVec2_1"] = create_floatToVec2_1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["floatToVec2_2"] = create_floatToVec2_2(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["floatToVec3_1"] = create_floatToVec3_1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["floatToVec3_2"] = create_floatToVec3_2(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["globals1"] = create_globals1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["hsvToRgb1"] = create_hsvToRgb1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["instanceTransform1"] = create_instanceTransform1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["output1"] = create_output1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["ramp1"] = create_ramp1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["random1"] = create_random1(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["random2"] = create_random2(meshBasicBuilder_INSTANCES);
        meshBasicBuilder_INSTANCES_nodes["fitFrom01_1"].node.setInput(
          "val",
          meshBasicBuilder_INSTANCES_nodes["ramp1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_nodes["attribute1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_nodes["floatToVec2_2"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_nodes["attribute2"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_nodes["floatToVec3_1"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_nodes["random1"].node,
          "rand"
        );
        meshBasicBuilder_INSTANCES_nodes["floatToVec3_2"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_nodes["fitFrom01_1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_nodes["floatToVec3_2"].node.setInput(
          "y",
          meshBasicBuilder_INSTANCES_nodes["fitFrom01_1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_nodes["floatToVec3_2"].node.setInput(
          "z",
          meshBasicBuilder_INSTANCES_nodes["fitFrom01_1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_nodes["hsvToRgb1"].node.setInput(
          "hsv",
          meshBasicBuilder_INSTANCES_nodes["floatToVec3_1"].node,
          "vec3"
        );
        meshBasicBuilder_INSTANCES_nodes["instanceTransform1"].node.setInput(
          "instanceScale",
          meshBasicBuilder_INSTANCES_nodes["floatToVec3_2"].node,
          "vec3"
        );
        meshBasicBuilder_INSTANCES_nodes["output1"].node.setInput(
          "position",
          meshBasicBuilder_INSTANCES_nodes["instanceTransform1"].node,
          "position"
        );
        meshBasicBuilder_INSTANCES_nodes["output1"].node.setInput(
          "normal",
          meshBasicBuilder_INSTANCES_nodes["instanceTransform1"].node,
          "normal"
        );
        meshBasicBuilder_INSTANCES_nodes["output1"].node.setInput(
          "color",
          meshBasicBuilder_INSTANCES_nodes["hsvToRgb1"].node,
          "rgb"
        );
        meshBasicBuilder_INSTANCES_nodes["ramp1"].node.setInput(
          "input",
          meshBasicBuilder_INSTANCES_nodes["random2"].node,
          "rand"
        );
        meshBasicBuilder_INSTANCES_nodes["random1"].node.setInput(
          "seed",
          meshBasicBuilder_INSTANCES_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshBasicBuilder_INSTANCES_nodes["random2"].node.setInput(
          "seed",
          meshBasicBuilder_INSTANCES_nodes["floatToVec2_2"].node,
          "vec2"
        );
        if (meshBasicBuilder_INSTANCES.childrenController) {
          meshBasicBuilder_INSTANCES.childrenController.selection.set([
            meshBasicBuilder_INSTANCES_nodes["attribute2"].node,
            meshBasicBuilder_INSTANCES_nodes["fitFrom01_1"].node,
            meshBasicBuilder_INSTANCES_nodes["floatToVec2_2"].node,
            meshBasicBuilder_INSTANCES_nodes["floatToVec3_2"].node,
            meshBasicBuilder_INSTANCES_nodes["ramp1"].node,
            meshBasicBuilder_INSTANCES_nodes["random2"].node
          ]);
        }
        meshBasicBuilder_INSTANCES.uiData.setPosition(0, 0);
        meshBasicBuilder_INSTANCES.addParam(
          _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.RAMP */ ._.RAMP,
          "ramp1",
          {
            interpolation: _polygonjs_polygonjs_src_engine_params_ramp_RampValue__WEBPACK_IMPORTED_MODULE_2__/* .RampInterpolation.CUBIC */ .Wp.CUBIC,
            points: [
              { position: 0, value: 0 },
              { position: 1, value: 1 }
            ]
          },
          { spare: true, computeOnDirty: true, cook: false, dependentOnFoundNode: true }
        );
        meshBasicBuilder_INSTANCES.params.get("ramp1").set({
          interpolation: _polygonjs_polygonjs_src_engine_params_ramp_RampValue__WEBPACK_IMPORTED_MODULE_2__/* .RampInterpolation.CUBIC */ .Wp.CUBIC,
          points: [
            { position: 0, value: 0 },
            { position: 0.8198198198198198, value: 0.5074218750000001 },
            { position: 1, value: 1 }
          ]
        });
        meshBasicBuilder_INSTANCES.params.get("ramp1").options.setOption("editable", void 0);
        meshBasicBuilder_INSTANCES.params.postCreateSpareParams();
        meshBasicBuilder_INSTANCES.params.runOnSceneLoadHooks();
        return { node: meshBasicBuilder_INSTANCES, children: meshBasicBuilder_INSTANCES_nodes };
      }
      function create_meshBasicBuilder_INSTANCES_PARTICLES(MAT2) {
        var meshBasicBuilder_INSTANCES_PARTICLES = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder_INSTANCES_PARTICLES.setName("meshBasicBuilder_INSTANCES_PARTICLES");
        const meshBasicBuilder_INSTANCES_PARTICLES_nodes = {};
        function create_attribute1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var attribute1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("attribute");
          attribute1.setName("attribute1");
          const attribute1_nodes = {};
          attribute1.uiData.setPosition(-800, 300);
          attribute1.p.name.set("idn");
          attribute1.params.postCreateSpareParams();
          attribute1.params.runOnSceneLoadHooks();
          return { node: attribute1, children: attribute1_nodes };
        }
        function create_attribute2(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var attribute2 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("attribute");
          attribute2.setName("attribute2");
          const attribute2_nodes = {};
          attribute2.uiData.setPosition(-750, 50);
          attribute2.p.name.set("idn");
          attribute2.p.texportWhenConnected.set(true);
          attribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: true });
          attribute2.params.postCreateSpareParams();
          attribute2.params.runOnSceneLoadHooks();
          return { node: attribute2, children: attribute2_nodes };
        }
        function create_attribute3(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var attribute3 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("attribute");
          attribute3.setName("attribute3");
          const attribute3_nodes = {};
          attribute3.uiData.setPosition(-500, 600);
          attribute3.p.name.set("state");
          attribute3.params.postCreateSpareParams();
          attribute3.params.runOnSceneLoadHooks();
          return { node: attribute3, children: attribute3_nodes };
        }
        function create_complement1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var complement1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("complement");
          complement1.setName("complement1");
          const complement1_nodes = {};
          complement1.uiData.setPosition(-350, 700);
          complement1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          complement1.params.postCreateSpareParams();
          complement1.params.runOnSceneLoadHooks();
          return { node: complement1, children: complement1_nodes };
        }
        function create_fitFrom01_1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var fitFrom01_1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("fitFrom01");
          fitFrom01_1.setName("fitFrom01_1");
          const fitFrom01_1_nodes = {};
          fitFrom01_1.uiData.setPosition(-300, 50);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fitFrom01_1.params.get("destMin").set(0.22);
          fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fitFrom01_1.params.get("destMax").set(1.4000000000000001);
          fitFrom01_1.params.postCreateSpareParams();
          fitFrom01_1.params.runOnSceneLoadHooks();
          return { node: fitFrom01_1, children: fitFrom01_1_nodes };
        }
        function create_floatToVec2_1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var floatToVec2_1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-350, 300);
          floatToVec2_1.p.y.set(0.2);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_floatToVec2_2(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var floatToVec2_2 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("floatToVec2");
          floatToVec2_2.setName("floatToVec2_2");
          const floatToVec2_2_nodes = {};
          floatToVec2_2.uiData.setPosition(-600, 50);
          floatToVec2_2.params.postCreateSpareParams();
          floatToVec2_2.params.runOnSceneLoadHooks();
          return { node: floatToVec2_2, children: floatToVec2_2_nodes };
        }
        function create_floatToVec3_1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var floatToVec3_1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(-150, 300);
          floatToVec3_1.p.y.set(1);
          floatToVec3_1.p.z.set(0.76);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_floatToVec3_2(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var floatToVec3_2 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(-150, 50);
          floatToVec3_2.p.x.set(1);
          floatToVec3_2.p.y.set(1);
          floatToVec3_2.p.z.set(1);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_floatToVec3_3(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var floatToVec3_3 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("floatToVec3");
          floatToVec3_3.setName("floatToVec3_3");
          const floatToVec3_3_nodes = {};
          floatToVec3_3.uiData.setPosition(-200, 600);
          floatToVec3_3.params.postCreateSpareParams();
          floatToVec3_3.params.runOnSceneLoadHooks();
          return { node: floatToVec3_3, children: floatToVec3_3_nodes };
        }
        function create_globals1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var globals1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-850, -150);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_hsvToRgb1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var hsvToRgb1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("hsvToRgb");
          hsvToRgb1.setName("hsvToRgb1");
          const hsvToRgb1_nodes = {};
          hsvToRgb1.uiData.setPosition(-50, 300);
          hsvToRgb1.params.postCreateSpareParams();
          hsvToRgb1.params.runOnSceneLoadHooks();
          return { node: hsvToRgb1, children: hsvToRgb1_nodes };
        }
        function create_instanceTransform1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var instanceTransform1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("instanceTransform");
          instanceTransform1.setName("instanceTransform1");
          const instanceTransform1_nodes = {};
          instanceTransform1.uiData.setPosition(50, 0);
          instanceTransform1.params.postCreateSpareParams();
          instanceTransform1.params.runOnSceneLoadHooks();
          return { node: instanceTransform1, children: instanceTransform1_nodes };
        }
        function create_multAdd1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var multAdd1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-650, 300);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.params.get("mult").set(1e3);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_output1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var output1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_ramp1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var ramp1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("ramp");
          ramp1.setName("ramp1");
          const ramp1_nodes = {};
          ramp1.uiData.setPosition(-400, 50);
          ramp1.params.postCreateSpareParams();
          ramp1.params.runOnSceneLoadHooks();
          return { node: ramp1, children: ramp1_nodes };
        }
        function create_random1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var random1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("random");
          random1.setName("random1");
          const random1_nodes = {};
          random1.uiData.setPosition(-250, 300);
          random1.params.postCreateSpareParams();
          random1.params.runOnSceneLoadHooks();
          return { node: random1, children: random1_nodes };
        }
        function create_random2(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var random2 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("random");
          random2.setName("random2");
          const random2_nodes = {};
          random2.uiData.setPosition(-500, 50);
          random2.params.postCreateSpareParams();
          random2.params.runOnSceneLoadHooks();
          return { node: random2, children: random2_nodes };
        }
        function create_round1(meshBasicBuilder_INSTANCES_PARTICLES2) {
          var round1 = meshBasicBuilder_INSTANCES_PARTICLES2.createNode("round");
          round1.setName("round1");
          const round1_nodes = {};
          round1.uiData.setPosition(-500, 300);
          round1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          round1.params.postCreateSpareParams();
          round1.params.runOnSceneLoadHooks();
          return { node: round1, children: round1_nodes };
        }
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["attribute1"] = create_attribute1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["attribute2"] = create_attribute2(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["attribute3"] = create_attribute3(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["complement1"] = create_complement1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["fitFrom01_1"] = create_fitFrom01_1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec2_1"] = create_floatToVec2_1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec2_2"] = create_floatToVec2_2(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_1"] = create_floatToVec3_1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_2"] = create_floatToVec3_2(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_3"] = create_floatToVec3_3(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["globals1"] = create_globals1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["hsvToRgb1"] = create_hsvToRgb1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["instanceTransform1"] = create_instanceTransform1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["multAdd1"] = create_multAdd1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["output1"] = create_output1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["ramp1"] = create_ramp1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["random1"] = create_random1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["random2"] = create_random2(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["round1"] = create_round1(
          meshBasicBuilder_INSTANCES_PARTICLES
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["complement1"].node.setInput(
          "in",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["attribute3"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["fitFrom01_1"].node.setInput(
          "val",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["ramp1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["round1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec2_2"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["attribute2"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_1"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["random1"].node,
          "rand"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_2"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["fitFrom01_1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_2"].node.setInput(
          "y",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["fitFrom01_1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_2"].node.setInput(
          "z",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["fitFrom01_1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_3"].node.setInput(
          "x",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["attribute3"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_3"].node.setInput(
          "y",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["complement1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["hsvToRgb1"].node.setInput(
          "hsv",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_1"].node,
          "vec3"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["instanceTransform1"].node.setInput(
          "instanceScale",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec3_2"].node,
          "vec3"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["multAdd1"].node.setInput(
          "value",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["attribute1"].node,
          "val"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["output1"].node.setInput(
          "position",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["instanceTransform1"].node,
          "position"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["output1"].node.setInput(
          "normal",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["instanceTransform1"].node,
          "normal"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["output1"].node.setInput(
          "color",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["hsvToRgb1"].node,
          "rgb"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["ramp1"].node.setInput(
          "input",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["random2"].node,
          "rand"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["random1"].node.setInput(
          "seed",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["random2"].node.setInput(
          "seed",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["floatToVec2_2"].node,
          "vec2"
        );
        meshBasicBuilder_INSTANCES_PARTICLES_nodes["round1"].node.setInput(
          "in",
          meshBasicBuilder_INSTANCES_PARTICLES_nodes["multAdd1"].node,
          "val"
        );
        if (meshBasicBuilder_INSTANCES_PARTICLES.childrenController) {
          meshBasicBuilder_INSTANCES_PARTICLES.childrenController.selection.set([]);
        }
        meshBasicBuilder_INSTANCES_PARTICLES.uiData.setPosition(0, 100);
        meshBasicBuilder_INSTANCES_PARTICLES.addParam(
          _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.RAMP */ ._.RAMP,
          "ramp1",
          {
            interpolation: _polygonjs_polygonjs_src_engine_params_ramp_RampValue__WEBPACK_IMPORTED_MODULE_2__/* .RampInterpolation.CUBIC */ .Wp.CUBIC,
            points: [
              { position: 0, value: 0 },
              { position: 1, value: 1 }
            ]
          },
          { spare: true, computeOnDirty: true, cook: false, dependentOnFoundNode: true }
        );
        meshBasicBuilder_INSTANCES_PARTICLES.params.get("ramp1").set({
          interpolation: _polygonjs_polygonjs_src_engine_params_ramp_RampValue__WEBPACK_IMPORTED_MODULE_2__/* .RampInterpolation.CUBIC */ .Wp.CUBIC,
          points: [
            { position: 0, value: 0 },
            { position: 0.8198198198198198, value: 0.5074218750000001 },
            { position: 1, value: 1 }
          ]
        });
        meshBasicBuilder_INSTANCES_PARTICLES.params.get("ramp1").options.setOption("editable", void 0);
        meshBasicBuilder_INSTANCES_PARTICLES.params.postCreateSpareParams();
        meshBasicBuilder_INSTANCES_PARTICLES.params.runOnSceneLoadHooks();
        return {
          node: meshBasicBuilder_INSTANCES_PARTICLES,
          children: meshBasicBuilder_INSTANCES_PARTICLES_nodes
        };
      }
      function create_pointsParticles(MAT2) {
        var pointsParticles = MAT2.createNode("pointsBuilder");
        pointsParticles.setName("pointsParticles");
        const pointsParticles_nodes = {};
        function create_constant_point_size(pointsParticles2) {
          var constant_point_size = pointsParticles2.createNode("constant");
          constant_point_size.setName("constant_point_size");
          const constant_point_size_nodes = {};
          constant_point_size.uiData.setPosition(0, 200);
          constant_point_size.p.float.set(0.0059000000000000025);
          constant_point_size.params.postCreateSpareParams();
          constant_point_size.params.runOnSceneLoadHooks();
          return { node: constant_point_size, children: constant_point_size_nodes };
        }
        function create_globals1(pointsParticles2) {
          var globals1 = pointsParticles2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-200, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_output1(pointsParticles2) {
          var output1 = pointsParticles2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        pointsParticles_nodes["constant_point_size"] = create_constant_point_size(pointsParticles);
        pointsParticles_nodes["globals1"] = create_globals1(pointsParticles);
        pointsParticles_nodes["output1"] = create_output1(pointsParticles);
        pointsParticles_nodes["output1"].node.setInput(
          "gl_PointSize",
          pointsParticles_nodes["constant_point_size"].node,
          "val"
        );
        if (pointsParticles.childrenController) {
          pointsParticles.childrenController.selection.set([]);
        }
        pointsParticles.uiData.setPosition(0, -100);
        pointsParticles.params.postCreateSpareParams();
        pointsParticles.params.runOnSceneLoadHooks();
        return { node: pointsParticles, children: pointsParticles_nodes };
      }
      MAT_nodes["meshBasicBuilder_INSTANCES"] = create_meshBasicBuilder_INSTANCES(MAT);
      MAT_nodes["meshBasicBuilder_INSTANCES_PARTICLES"] = create_meshBasicBuilder_INSTANCES_PARTICLES(MAT);
      MAT_nodes["pointsParticles"] = create_pointsParticles(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-650, 700);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_actor1(particles3) {
      var actor1 = particles3.createNode("actor");
      actor1.setName("actor1");
      const actor1_nodes = {};
      function create_divide2(actor12) {
        var divide2 = actor12.createNode("divide");
        divide2.setName("divide2");
        const divide2_nodes = {};
        divide2.uiData.setPosition(-150, 100);
        divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div0", 1, { spare: true, editable: true });
        divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div1", 1, { spare: true, editable: false });
        divide2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "div2", 1, { spare: true, editable: true });
        divide2.params.postCreateSpareParams();
        divide2.params.runOnSceneLoadHooks();
        return { node: divide2, children: divide2_nodes };
      }
      function create_multScalar1(actor12) {
        var multScalar1 = actor12.createNode("multScalar");
        multScalar1.setName("multScalar1");
        const multScalar1_nodes = {};
        multScalar1.uiData.setPosition(50, 100);
        multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
        multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: false });
        multScalar1.params.postCreateSpareParams();
        multScalar1.params.runOnSceneLoadHooks();
        return { node: multScalar1, children: multScalar1_nodes };
      }
      function create_null1(actor12) {
        var null1 = actor12.createNode("null");
        null1.setName("null1");
        const null1_nodes = {};
        null1.uiData.setPosition(-200, 600);
        null1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "in", [0, 0, 0], { spare: true, editable: false });
        null1.params.postCreateSpareParams();
        null1.params.runOnSceneLoadHooks();
        return { node: null1, children: null1_nodes };
      }
      function create_onTick1(actor12) {
        var onTick1 = actor12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-350, 0);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_plane1(actor12) {
        var plane1 = actor12.createNode("plane");
        plane1.setName("plane1");
        const plane1_nodes = {};
        plane1.uiData.setPosition(-600, 400);
        plane1.p.normal.set([0, 0, 1]);
        plane1.params.postCreateSpareParams();
        plane1.params.runOnSceneLoadHooks();
        return { node: plane1, children: plane1_nodes };
      }
      function create_previousValue1(actor12) {
        var previousValue1 = actor12.createNode("previousValue");
        previousValue1.setName("previousValue1");
        const previousValue1_nodes = {};
        previousValue1.uiData.setPosition(-200, 400);
        previousValue1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "current", [0, 0, 0], { spare: true, editable: false });
        previousValue1.params.postCreateSpareParams();
        previousValue1.params.runOnSceneLoadHooks();
        return { node: previousValue1, children: previousValue1_nodes };
      }
      function create_rayFromCursor1(actor12) {
        var rayFromCursor1 = actor12.createNode("rayFromCursor");
        rayFromCursor1.setName("rayFromCursor1");
        const rayFromCursor1_nodes = {};
        rayFromCursor1.uiData.setPosition(-600, 200);
        rayFromCursor1.params.postCreateSpareParams();
        rayFromCursor1.params.runOnSceneLoadHooks();
        return { node: rayFromCursor1, children: rayFromCursor1_nodes };
      }
      function create_rayIntersectPlane1(actor12) {
        var rayIntersectPlane1 = actor12.createNode("rayIntersectPlane");
        rayIntersectPlane1.setName("rayIntersectPlane1");
        const rayIntersectPlane1_nodes = {};
        rayIntersectPlane1.uiData.setPosition(-400, 300);
        rayIntersectPlane1.params.postCreateSpareParams();
        rayIntersectPlane1.params.runOnSceneLoadHooks();
        return { node: rayIntersectPlane1, children: rayIntersectPlane1_nodes };
      }
      function create_setParam1(actor12) {
        var setParam1 = actor12.createNode("setParam");
        setParam1.setName("setParam1");
        const setParam1_nodes = {};
        setParam1.uiData.setPosition(600, 0);
        setParam1.p.type.set(6);
        setParam1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.PARAM_PATH */ ._.PARAM_PATH, "Param", "../../particlesSystemGpu1/cursor", {
          spare: true,
          editable: true
        });
        setParam1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setParam1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "val", [0, 0, 0], { spare: true, editable: false });
        setParam1.params.postCreateSpareParams();
        setParam1.params.runOnSceneLoadHooks();
        return { node: setParam1, children: setParam1_nodes };
      }
      function create_setParam2(actor12) {
        var setParam2 = actor12.createNode("setParam");
        setParam2.setName("setParam2");
        const setParam2_nodes = {};
        setParam2.uiData.setPosition(250, 0);
        setParam2.p.type.set(6);
        setParam2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.PARAM_PATH */ ._.PARAM_PATH, "Param", "../../particlesSystemGpu1/velocity", {
          spare: true,
          editable: true
        });
        setParam2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setParam2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "val", [0, 0, 0], { spare: true, editable: false });
        setParam2.params.postCreateSpareParams();
        setParam2.params.runOnSceneLoadHooks();
        return { node: setParam2, children: setParam2_nodes };
      }
      function create_subtract2(actor12) {
        var subtract2 = actor12.createNode("subtract");
        subtract2.setName("subtract2");
        const subtract2_nodes = {};
        subtract2.uiData.setPosition(-50, 250);
        subtract2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "sub0", [0, 0, 0], { spare: true, editable: false });
        subtract2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "sub1", [0, 0, 0], { spare: true, editable: false });
        subtract2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "sub2", [0, 0, 0], { spare: true, editable: true });
        subtract2.params.postCreateSpareParams();
        subtract2.params.runOnSceneLoadHooks();
        return { node: subtract2, children: subtract2_nodes };
      }
      actor1_nodes["divide2"] = create_divide2(actor1);
      actor1_nodes["multScalar1"] = create_multScalar1(actor1);
      actor1_nodes["null1"] = create_null1(actor1);
      actor1_nodes["onTick1"] = create_onTick1(actor1);
      actor1_nodes["plane1"] = create_plane1(actor1);
      actor1_nodes["previousValue1"] = create_previousValue1(actor1);
      actor1_nodes["rayFromCursor1"] = create_rayFromCursor1(actor1);
      actor1_nodes["rayIntersectPlane1"] = create_rayIntersectPlane1(actor1);
      actor1_nodes["setParam1"] = create_setParam1(actor1);
      actor1_nodes["setParam2"] = create_setParam2(actor1);
      actor1_nodes["subtract2"] = create_subtract2(actor1);
      actor1_nodes["divide2"].node.setInput("div1", actor1_nodes["onTick1"].node, "delta", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["multScalar1"].node.setInput("value", actor1_nodes["subtract2"].node, "sub", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["multScalar1"].node.setInput("mult", actor1_nodes["divide2"].node, "divide", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["null1"].node.setInput("in", actor1_nodes["rayIntersectPlane1"].node, "position", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["previousValue1"].node.setInput(
        "current",
        actor1_nodes["rayIntersectPlane1"].node,
        "position"
      );
      actor1_nodes["rayIntersectPlane1"].node.setInput("Ray", actor1_nodes["rayFromCursor1"].node, "Ray", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["rayIntersectPlane1"].node.setInput("Plane", actor1_nodes["plane1"].node, "Plane", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["setParam1"].node.setInput("trigger", actor1_nodes["setParam2"].node, "trigger", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["setParam1"].node.setInput("val", actor1_nodes["null1"].node, "out", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["setParam2"].node.setInput("trigger", actor1_nodes["onTick1"].node, "trigger", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["setParam2"].node.setInput("val", actor1_nodes["multScalar1"].node, "val", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["subtract2"].node.setInput("sub0", actor1_nodes["rayIntersectPlane1"].node, "position", {
        noExceptionOnInvalidInput: true
      });
      actor1_nodes["subtract2"].node.setInput("sub1", actor1_nodes["previousValue1"].node, "prev", {
        noExceptionOnInvalidInput: true
      });
      if (actor1.childrenController) {
        actor1.childrenController.selection.set([
          actor1_nodes["plane1"].node,
          actor1_nodes["rayFromCursor1"].node,
          actor1_nodes["rayIntersectPlane1"].node
        ]);
      }
      actor1.uiData.setPosition(-450, 1150);
      actor1.flags.display.set(true);
      actor1.params.postCreateSpareParams();
      actor1.params.runOnSceneLoadHooks();
      return { node: actor1, children: actor1_nodes };
    }
    function create_actor_particles1(particles3) {
      var actor_particles1 = particles3.createNode("actor");
      actor_particles1.setName("actor_particles1");
      const actor_particles1_nodes = {};
      function create_onScenePause1(actor_particles12) {
        var onScenePause1 = actor_particles12.createNode("onScenePause");
        onScenePause1.setName("onScenePause1");
        const onScenePause1_nodes = {};
        onScenePause1.uiData.setPosition(-100, -100);
        onScenePause1.params.postCreateSpareParams();
        onScenePause1.params.runOnSceneLoadHooks();
        return { node: onScenePause1, children: onScenePause1_nodes };
      }
      function create_onTick1(actor_particles12) {
        var onTick1 = actor_particles12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-100, 100);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_particlesSystemReset1(actor_particles12) {
        var particlesSystemReset1 = actor_particles12.createNode("particlesSystemReset");
        particlesSystemReset1.setName("particlesSystemReset1");
        const particlesSystemReset1_nodes = {};
        particlesSystemReset1.uiData.setPosition(100, -100);
        particlesSystemReset1.params.postCreateSpareParams();
        particlesSystemReset1.params.runOnSceneLoadHooks();
        return { node: particlesSystemReset1, children: particlesSystemReset1_nodes };
      }
      function create_particlesSystemStepSimulation1(actor_particles12) {
        var particlesSystemStepSimulation1 = actor_particles12.createNode("particlesSystemStepSimulation");
        particlesSystemStepSimulation1.setName("particlesSystemStepSimulation1");
        const particlesSystemStepSimulation1_nodes = {};
        particlesSystemStepSimulation1.uiData.setPosition(100, 100);
        particlesSystemStepSimulation1.params.postCreateSpareParams();
        particlesSystemStepSimulation1.params.runOnSceneLoadHooks();
        return { node: particlesSystemStepSimulation1, children: particlesSystemStepSimulation1_nodes };
      }
      actor_particles1_nodes["onScenePause1"] = create_onScenePause1(actor_particles1);
      actor_particles1_nodes["onTick1"] = create_onTick1(actor_particles1);
      actor_particles1_nodes["particlesSystemReset1"] = create_particlesSystemReset1(actor_particles1);
      actor_particles1_nodes["particlesSystemStepSimulation1"] = create_particlesSystemStepSimulation1(actor_particles1);
      actor_particles1_nodes["particlesSystemReset1"].node.setInput(
        "trigger",
        actor_particles1_nodes["onScenePause1"].node,
        "trigger"
      );
      actor_particles1_nodes["particlesSystemStepSimulation1"].node.setInput(
        "trigger",
        actor_particles1_nodes["onTick1"].node,
        "trigger"
      );
      if (actor_particles1.childrenController) {
        actor_particles1.childrenController.selection.set([]);
      }
      actor_particles1.uiData.setPosition(-450, 850);
      actor_particles1.params.postCreateSpareParams();
      actor_particles1.params.runOnSceneLoadHooks();
      return { node: actor_particles1, children: actor_particles1_nodes };
    }
    function create_instance1(particles3) {
      var instance1 = particles3.createNode("instance");
      instance1.setName("instance1");
      const instance1_nodes = {};
      instance1.uiData.setPosition(-450, 700);
      instance1.p.attributesToCopy.set("instance* id idn restP");
      instance1.p.material.set("../MAT/meshBasicBuilder_INSTANCES");
      instance1.params.postCreateSpareParams();
      instance1.params.runOnSceneLoadHooks();
      return { node: instance1, children: instance1_nodes };
    }
    function create_particlesSystemGpu1(particles3) {
      var particlesSystemGpu1 = particles3.createNode("particlesSystemGpu");
      particlesSystemGpu1.setName("particlesSystemGpu1");
      const particlesSystemGpu1_nodes = {};
      function create_acceleration1(particlesSystemGpu12) {
        var acceleration1 = particlesSystemGpu12.createNode("acceleration");
        acceleration1.setName("acceleration1");
        const acceleration1_nodes = {};
        acceleration1.uiData.setPosition(450, -650);
        acceleration1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "position", [0, 0, 0], { spare: true, editable: false });
        acceleration1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "velocity", [0, 0, 0], { spare: true, editable: false });
        acceleration1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mass", 1, { spare: true, editable: true });
        acceleration1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "force", [0, 0, 0], { spare: true, editable: true });
        acceleration1.params.postCreateSpareParams();
        acceleration1.params.runOnSceneLoadHooks();
        return { node: acceleration1, children: acceleration1_nodes };
      }
      function create_add2(particlesSystemGpu12) {
        var add2 = particlesSystemGpu12.createNode("add");
        add2.setName("add2");
        const add2_nodes = {};
        add2.uiData.setPosition(150, 500);
        add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add0", 0, { spare: true, editable: false });
        add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add1", 0, { spare: true, editable: false });
        add2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add2", 0, { spare: true, editable: true });
        add2.params.postCreateSpareParams();
        add2.params.runOnSceneLoadHooks();
        return { node: add2, children: add2_nodes };
      }
      function create_attribute1(particlesSystemGpu12) {
        var attribute1 = particlesSystemGpu12.createNode("attribute");
        attribute1.setName("attribute1");
        const attribute1_nodes = {};
        attribute1.uiData.setPosition(-600, -800);
        attribute1.p.name.set("instancePosition");
        attribute1.p.type.set(2);
        attribute1.p.texportWhenConnected.set(true);
        attribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "in", [0, 0, 0], { spare: true, editable: true });
        attribute1.params.postCreateSpareParams();
        attribute1.params.runOnSceneLoadHooks();
        return { node: attribute1, children: attribute1_nodes };
      }
      function create_attribute2(particlesSystemGpu12) {
        var attribute2 = particlesSystemGpu12.createNode("attribute");
        attribute2.setName("attribute2");
        const attribute2_nodes = {};
        attribute2.uiData.setPosition(800, -550);
        attribute2.p.name.set("instancePosition");
        attribute2.p.type.set(2);
        attribute2.p.texportWhenConnected.set(true);
        attribute2.p.exportWhenConnected.set(true);
        attribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "in", [0, 0, 0], { spare: true, editable: false });
        attribute2.params.postCreateSpareParams();
        attribute2.params.runOnSceneLoadHooks();
        return { node: attribute2, children: attribute2_nodes };
      }
      function create_attribute3(particlesSystemGpu12) {
        var attribute3 = particlesSystemGpu12.createNode("attribute");
        attribute3.setName("attribute3");
        const attribute3_nodes = {};
        attribute3.uiData.setPosition(-500, 200);
        attribute3.p.name.set("id");
        attribute3.p.texportWhenConnected.set(true);
        attribute3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: true });
        attribute3.params.postCreateSpareParams();
        attribute3.params.runOnSceneLoadHooks();
        return { node: attribute3, children: attribute3_nodes };
      }
      function create_attribute4(particlesSystemGpu12) {
        var attribute4 = particlesSystemGpu12.createNode("attribute");
        attribute4.setName("attribute4");
        const attribute4_nodes = {};
        attribute4.uiData.setPosition(450, -350);
        attribute4.p.name.set("restP");
        attribute4.p.type.set(2);
        attribute4.p.texportWhenConnected.set(true);
        attribute4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "in", [0, 0, 0], { spare: true, editable: true });
        attribute4.params.postCreateSpareParams();
        attribute4.params.runOnSceneLoadHooks();
        return { node: attribute4, children: attribute4_nodes };
      }
      function create_attribute_state_IN(particlesSystemGpu12) {
        var attribute_state_IN = particlesSystemGpu12.createNode("attribute");
        attribute_state_IN.setName("attribute_state_IN");
        const attribute_state_IN_nodes = {};
        attribute_state_IN.uiData.setPosition(-100, 600);
        attribute_state_IN.p.name.set("state");
        attribute_state_IN.p.texportWhenConnected.set(true);
        attribute_state_IN.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: true });
        attribute_state_IN.params.postCreateSpareParams();
        attribute_state_IN.params.runOnSceneLoadHooks();
        return { node: attribute_state_IN, children: attribute_state_IN_nodes };
      }
      function create_attribute_state_OUT(particlesSystemGpu12) {
        var attribute_state_OUT = particlesSystemGpu12.createNode("attribute");
        attribute_state_OUT.setName("attribute_state_OUT");
        const attribute_state_OUT_nodes = {};
        attribute_state_OUT.uiData.setPosition(700, 600);
        attribute_state_OUT.p.name.set("state");
        attribute_state_OUT.p.texportWhenConnected.set(true);
        attribute_state_OUT.p.exportWhenConnected.set(true);
        attribute_state_OUT.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
        attribute_state_OUT.params.postCreateSpareParams();
        attribute_state_OUT.params.runOnSceneLoadHooks();
        return { node: attribute_state_OUT, children: attribute_state_OUT_nodes };
      }
      function create_clamp1(particlesSystemGpu12) {
        var clamp1 = particlesSystemGpu12.createNode("clamp");
        clamp1.setName("clamp1");
        const clamp1_nodes = {};
        clamp1.uiData.setPosition(500, 500);
        clamp1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
        clamp1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "min", 0, { spare: true, editable: true });
        clamp1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "max", 1, { spare: true, editable: true });
        clamp1.params.postCreateSpareParams();
        clamp1.params.runOnSceneLoadHooks();
        return { node: clamp1, children: clamp1_nodes };
      }
      function create_complement1(particlesSystemGpu12) {
        var complement1 = particlesSystemGpu12.createNode("complement");
        complement1.setName("complement1");
        const complement1_nodes = {};
        complement1.uiData.setPosition(550, 100);
        complement1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
        complement1.params.postCreateSpareParams();
        complement1.params.runOnSceneLoadHooks();
        return { node: complement1, children: complement1_nodes };
      }
      function create_distance1(particlesSystemGpu12) {
        var distance1 = particlesSystemGpu12.createNode("distance");
        distance1.setName("distance1");
        const distance1_nodes = {};
        distance1.uiData.setPosition(-250, -100);
        distance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "p0", [0, 0, 0], { spare: true, editable: false });
        distance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "p1", [0, 0, 0], { spare: true, editable: false });
        distance1.params.postCreateSpareParams();
        distance1.params.runOnSceneLoadHooks();
        return { node: distance1, children: distance1_nodes };
      }
      function create_fitFrom01_1(particlesSystemGpu12) {
        var fitFrom01_1 = particlesSystemGpu12.createNode("fitFrom01");
        fitFrom01_1.setName("fitFrom01_1");
        const fitFrom01_1_nodes = {};
        fitFrom01_1.uiData.setPosition(-150, 350);
        fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
        fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
        fitFrom01_1.params.get("destMin").set(0.04);
        fitFrom01_1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
        fitFrom01_1.params.get("destMax").set(0.13);
        fitFrom01_1.params.postCreateSpareParams();
        fitFrom01_1.params.runOnSceneLoadHooks();
        return { node: fitFrom01_1, children: fitFrom01_1_nodes };
      }
      function create_floatToVec2_1(particlesSystemGpu12) {
        var floatToVec2_1 = particlesSystemGpu12.createNode("floatToVec2");
        floatToVec2_1.setName("floatToVec2_1");
        const floatToVec2_1_nodes = {};
        floatToVec2_1.uiData.setPosition(-350, 200);
        floatToVec2_1.p.y.set(3.8);
        floatToVec2_1.params.postCreateSpareParams();
        floatToVec2_1.params.runOnSceneLoadHooks();
        return { node: floatToVec2_1, children: floatToVec2_1_nodes };
      }
      function create_floatToVec2_2(particlesSystemGpu12) {
        var floatToVec2_2 = particlesSystemGpu12.createNode("floatToVec2");
        floatToVec2_2.setName("floatToVec2_2");
        const floatToVec2_2_nodes = {};
        floatToVec2_2.uiData.setPosition(-350, 350);
        floatToVec2_2.p.y.set(3.92);
        floatToVec2_2.params.postCreateSpareParams();
        floatToVec2_2.params.runOnSceneLoadHooks();
        return { node: floatToVec2_2, children: floatToVec2_2_nodes };
      }
      function create_globals1(particlesSystemGpu12) {
        var globals1 = particlesSystemGpu12.createNode("globals");
        globals1.setName("globals1");
        const globals1_nodes = {};
        globals1.uiData.setPosition(-300, -650);
        globals1.params.postCreateSpareParams();
        globals1.params.runOnSceneLoadHooks();
        return { node: globals1, children: globals1_nodes };
      }
      function create_maxLength1(particlesSystemGpu12) {
        var maxLength1 = particlesSystemGpu12.createNode("maxLength");
        maxLength1.setName("maxLength1");
        const maxLength1_nodes = {};
        maxLength1.uiData.setPosition(250, -550);
        maxLength1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "val", [0, 0, 0], { spare: true, editable: false });
        maxLength1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "max", 1, { spare: true, editable: true });
        maxLength1.params.get("max").set(4);
        maxLength1.params.postCreateSpareParams();
        maxLength1.params.runOnSceneLoadHooks();
        return { node: maxLength1, children: maxLength1_nodes };
      }
      function create_mix1(particlesSystemGpu12) {
        var mix1 = particlesSystemGpu12.createNode("mix");
        mix1.setName("mix1");
        const mix1_nodes = {};
        mix1.uiData.setPosition(100, -550);
        mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
        mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
        mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
        mix1.params.postCreateSpareParams();
        mix1.params.runOnSceneLoadHooks();
        return { node: mix1, children: mix1_nodes };
      }
      function create_mix2(particlesSystemGpu12) {
        var mix2 = particlesSystemGpu12.createNode("mix");
        mix2.setName("mix2");
        const mix2_nodes = {};
        mix2.uiData.setPosition(650, -450);
        mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
        mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
        mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
        mix2.params.get("blend").set(0.04);
        mix2.params.postCreateSpareParams();
        mix2.params.runOnSceneLoadHooks();
        return { node: mix2, children: mix2_nodes };
      }
      function create_mult1(particlesSystemGpu12) {
        var mult1 = particlesSystemGpu12.createNode("mult");
        mult1.setName("mult1");
        const mult1_nodes = {};
        mult1.uiData.setPosition(0, 0);
        mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult0", 1, { spare: true, editable: false });
        mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult1", 1, { spare: true, editable: false });
        mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult2", 1, { spare: true, editable: true });
        mult1.params.postCreateSpareParams();
        mult1.params.runOnSceneLoadHooks();
        return { node: mult1, children: mult1_nodes };
      }
      function create_multAdd2(particlesSystemGpu12) {
        var multAdd2 = particlesSystemGpu12.createNode("multAdd");
        multAdd2.setName("multAdd2");
        const multAdd2_nodes = {};
        multAdd2.uiData.setPosition(700, 100);
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: false });
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multAdd2.params.get("mult").set(0.06);
        multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
        multAdd2.params.postCreateSpareParams();
        multAdd2.params.runOnSceneLoadHooks();
        return { node: multAdd2, children: multAdd2_nodes };
      }
      function create_multScalar1(particlesSystemGpu12) {
        var multScalar1 = particlesSystemGpu12.createNode("multScalar");
        multScalar1.setName("multScalar1");
        const multScalar1_nodes = {};
        multScalar1.uiData.setPosition(-150, -650);
        multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
        multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multScalar1.params.get("mult").set(0.9);
        multScalar1.params.postCreateSpareParams();
        multScalar1.params.runOnSceneLoadHooks();
        return { node: multScalar1, children: multScalar1_nodes };
      }
      function create_null1(particlesSystemGpu12) {
        var null1 = particlesSystemGpu12.createNode("null");
        null1.setName("null1");
        const null1_nodes = {};
        null1.uiData.setPosition(200, -800);
        null1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "in", [0, 0, 0], { spare: true, editable: false });
        null1.params.postCreateSpareParams();
        null1.params.runOnSceneLoadHooks();
        return { node: null1, children: null1_nodes };
      }
      function create_null2(particlesSystemGpu12) {
        var null2 = particlesSystemGpu12.createNode("null");
        null2.setName("null2");
        const null2_nodes = {};
        null2.uiData.setPosition(-500, -200);
        null2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "in", [0, 0, 0], { spare: true, editable: false });
        null2.params.postCreateSpareParams();
        null2.params.runOnSceneLoadHooks();
        return { node: null2, children: null2_nodes };
      }
      function create_output1(particlesSystemGpu12) {
        var output1 = particlesSystemGpu12.createNode("output");
        output1.setName("output1");
        const output1_nodes = {};
        output1.uiData.setPosition(700, -800);
        output1.params.postCreateSpareParams();
        output1.params.runOnSceneLoadHooks();
        return { node: output1, children: output1_nodes };
      }
      function create_param1(particlesSystemGpu12) {
        var param1 = particlesSystemGpu12.createNode("param");
        param1.setName("param1");
        const param1_nodes = {};
        param1.uiData.setPosition(-400, 50);
        param1.p.name.set("cursor");
        param1.p.type.set(4);
        param1.params.postCreateSpareParams();
        param1.params.runOnSceneLoadHooks();
        return { node: param1, children: param1_nodes };
      }
      function create_param2(particlesSystemGpu12) {
        var param2 = particlesSystemGpu12.createNode("param");
        param2.setName("param2");
        const param2_nodes = {};
        param2.uiData.setPosition(-300, -450);
        param2.p.name.set("velocity");
        param2.p.type.set(4);
        param2.params.postCreateSpareParams();
        param2.params.runOnSceneLoadHooks();
        return { node: param2, children: param2_nodes };
      }
      function create_ramp1(particlesSystemGpu12) {
        var ramp1 = particlesSystemGpu12.createNode("ramp");
        ramp1.setName("ramp1");
        const ramp1_nodes = {};
        ramp1.uiData.setPosition(-150, -100);
        ramp1.params.postCreateSpareParams();
        ramp1.params.runOnSceneLoadHooks();
        return { node: ramp1, children: ramp1_nodes };
      }
      function create_random1(particlesSystemGpu12) {
        var random1 = particlesSystemGpu12.createNode("random");
        random1.setName("random1");
        const random1_nodes = {};
        random1.uiData.setPosition(-250, 200);
        random1.params.postCreateSpareParams();
        random1.params.runOnSceneLoadHooks();
        return { node: random1, children: random1_nodes };
      }
      function create_random2(particlesSystemGpu12) {
        var random2 = particlesSystemGpu12.createNode("random");
        random2.setName("random2");
        const random2_nodes = {};
        random2.uiData.setPosition(-250, 350);
        random2.params.postCreateSpareParams();
        random2.params.runOnSceneLoadHooks();
        return { node: random2, children: random2_nodes };
      }
      function create_subtract1(particlesSystemGpu12) {
        var subtract1 = particlesSystemGpu12.createNode("subtract");
        subtract1.setName("subtract1");
        const subtract1_nodes = {};
        subtract1.uiData.setPosition(350, 500);
        subtract1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sub0", 0, { spare: true, editable: false });
        subtract1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sub1", 0, { spare: true, editable: true });
        subtract1.params.get("sub1").set(0.01);
        subtract1.params.postCreateSpareParams();
        subtract1.params.runOnSceneLoadHooks();
        return { node: subtract1, children: subtract1_nodes };
      }
      particlesSystemGpu1_nodes["acceleration1"] = create_acceleration1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["add2"] = create_add2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["attribute1"] = create_attribute1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["attribute2"] = create_attribute2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["attribute3"] = create_attribute3(particlesSystemGpu1);
      particlesSystemGpu1_nodes["attribute4"] = create_attribute4(particlesSystemGpu1);
      particlesSystemGpu1_nodes["attribute_state_IN"] = create_attribute_state_IN(particlesSystemGpu1);
      particlesSystemGpu1_nodes["attribute_state_OUT"] = create_attribute_state_OUT(particlesSystemGpu1);
      particlesSystemGpu1_nodes["clamp1"] = create_clamp1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["complement1"] = create_complement1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["distance1"] = create_distance1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["fitFrom01_1"] = create_fitFrom01_1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["floatToVec2_1"] = create_floatToVec2_1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["floatToVec2_2"] = create_floatToVec2_2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["globals1"] = create_globals1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["maxLength1"] = create_maxLength1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["mix1"] = create_mix1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["mix2"] = create_mix2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["mult1"] = create_mult1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["multAdd2"] = create_multAdd2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["multScalar1"] = create_multScalar1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["null1"] = create_null1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["null2"] = create_null2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["output1"] = create_output1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["param1"] = create_param1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["param2"] = create_param2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["ramp1"] = create_ramp1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["random1"] = create_random1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["random2"] = create_random2(particlesSystemGpu1);
      particlesSystemGpu1_nodes["subtract1"] = create_subtract1(particlesSystemGpu1);
      particlesSystemGpu1_nodes["acceleration1"].node.setInput(
        "position",
        particlesSystemGpu1_nodes["null1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["acceleration1"].node.setInput(
        "velocity",
        particlesSystemGpu1_nodes["maxLength1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["add2"].node.setInput(
        "add0",
        particlesSystemGpu1_nodes["attribute_state_IN"].node,
        "val"
      );
      particlesSystemGpu1_nodes["add2"].node.setInput("add1", particlesSystemGpu1_nodes["ramp1"].node, "val", {
        noExceptionOnInvalidInput: true
      });
      particlesSystemGpu1_nodes["attribute2"].node.setInput("in", particlesSystemGpu1_nodes["mix2"].node, "mix", {
        noExceptionOnInvalidInput: true
      });
      particlesSystemGpu1_nodes["attribute_state_OUT"].node.setInput(
        "in",
        particlesSystemGpu1_nodes["clamp1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["clamp1"].node.setInput(
        "value",
        particlesSystemGpu1_nodes["subtract1"].node,
        "subtract"
      );
      particlesSystemGpu1_nodes["complement1"].node.setInput(
        "in",
        particlesSystemGpu1_nodes["clamp1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["distance1"].node.setInput("p0", particlesSystemGpu1_nodes["null2"].node, "val", {
        noExceptionOnInvalidInput: true
      });
      particlesSystemGpu1_nodes["distance1"].node.setInput("p1", particlesSystemGpu1_nodes["param1"].node, "val");
      particlesSystemGpu1_nodes["fitFrom01_1"].node.setInput(
        "val",
        particlesSystemGpu1_nodes["random2"].node,
        "rand"
      );
      particlesSystemGpu1_nodes["floatToVec2_1"].node.setInput(
        "x",
        particlesSystemGpu1_nodes["attribute3"].node,
        "val"
      );
      particlesSystemGpu1_nodes["floatToVec2_2"].node.setInput(
        "x",
        particlesSystemGpu1_nodes["attribute3"].node,
        "val"
      );
      particlesSystemGpu1_nodes["maxLength1"].node.setInput("val", particlesSystemGpu1_nodes["mix1"].node, "mix");
      particlesSystemGpu1_nodes["mix1"].node.setInput(
        "value0",
        particlesSystemGpu1_nodes["multScalar1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["mix1"].node.setInput("value1", particlesSystemGpu1_nodes["param2"].node, "val", {
        noExceptionOnInvalidInput: true
      });
      particlesSystemGpu1_nodes["mix1"].node.setInput(
        "blend",
        particlesSystemGpu1_nodes["mult1"].node,
        "product"
      );
      particlesSystemGpu1_nodes["mix2"].node.setInput(
        "value0",
        particlesSystemGpu1_nodes["acceleration1"].node,
        "position"
      );
      particlesSystemGpu1_nodes["mix2"].node.setInput(
        "value1",
        particlesSystemGpu1_nodes["attribute4"].node,
        "val"
      );
      particlesSystemGpu1_nodes["mix2"].node.setInput("blend", particlesSystemGpu1_nodes["multAdd2"].node, "val");
      particlesSystemGpu1_nodes["mult1"].node.setInput("mult0", particlesSystemGpu1_nodes["ramp1"].node, "val", {
        noExceptionOnInvalidInput: true
      });
      particlesSystemGpu1_nodes["mult1"].node.setInput(
        "mult1",
        particlesSystemGpu1_nodes["random1"].node,
        "rand"
      );
      particlesSystemGpu1_nodes["multAdd2"].node.setInput(
        "value",
        particlesSystemGpu1_nodes["complement1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["multAdd2"].node.setInput(
        "preAdd",
        particlesSystemGpu1_nodes["fitFrom01_1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["multScalar1"].node.setInput(
        "value",
        particlesSystemGpu1_nodes["globals1"].node,
        "velocity"
      );
      particlesSystemGpu1_nodes["null1"].node.setInput("in", particlesSystemGpu1_nodes["attribute1"].node, "val");
      particlesSystemGpu1_nodes["null2"].node.setInput("in", particlesSystemGpu1_nodes["attribute1"].node, "val");
      particlesSystemGpu1_nodes["output1"].node.setInput(
        "velocity",
        particlesSystemGpu1_nodes["acceleration1"].node,
        "velocity"
      );
      particlesSystemGpu1_nodes["ramp1"].node.setInput(
        "input",
        particlesSystemGpu1_nodes["distance1"].node,
        "val"
      );
      particlesSystemGpu1_nodes["random1"].node.setInput(
        "seed",
        particlesSystemGpu1_nodes["floatToVec2_1"].node,
        "vec2"
      );
      particlesSystemGpu1_nodes["random2"].node.setInput(
        "seed",
        particlesSystemGpu1_nodes["floatToVec2_2"].node,
        "vec2"
      );
      particlesSystemGpu1_nodes["subtract1"].node.setInput("sub0", particlesSystemGpu1_nodes["add2"].node, "sum");
      if (particlesSystemGpu1.childrenController) {
        particlesSystemGpu1.childrenController.selection.set([]);
      }
      particlesSystemGpu1.uiData.setPosition(-450, 1e3);
      particlesSystemGpu1.p.material.set("../MAT/meshBasicBuilder_INSTANCES_PARTICLES");
      particlesSystemGpu1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "cursor", [0, 0, 0], {
        spare: true,
        computeOnDirty: true,
        cook: false,
        dependentOnFoundNode: true
      });
      particlesSystemGpu1.addParam(
        _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.RAMP */ ._.RAMP,
        "ramp1",
        {
          interpolation: _polygonjs_polygonjs_src_engine_params_ramp_RampValue__WEBPACK_IMPORTED_MODULE_2__/* .RampInterpolation.CUBIC */ .Wp.CUBIC,
          points: [
            { position: 0, value: 0 },
            { position: 1, value: 1 }
          ]
        },
        { spare: true, computeOnDirty: true, cook: false, dependentOnFoundNode: true }
      );
      particlesSystemGpu1.params.get("ramp1").set({
        interpolation: _polygonjs_polygonjs_src_engine_params_ramp_RampValue__WEBPACK_IMPORTED_MODULE_2__/* .RampInterpolation.CUBIC */ .Wp.CUBIC,
        points: [
          { position: 0, value: 1 },
          { position: 0.4619883040935673, value: 0 }
        ]
      });
      particlesSystemGpu1.params.get("ramp1").options.setOption("editable", void 0);
      particlesSystemGpu1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "velocity", [0, 0, 0], {
        spare: true,
        computeOnDirty: true,
        cook: false,
        dependentOnFoundNode: true
      });
      particlesSystemGpu1.params.get("velocity").options.setOption("editable", void 0);
      particlesSystemGpu1.params.get("velocityx").options.setOption("editable", void 0);
      particlesSystemGpu1.params.get("velocityy").options.setOption("editable", void 0);
      particlesSystemGpu1.params.get("velocityz").options.setOption("editable", void 0);
      particlesSystemGpu1.params.postCreateSpareParams();
      particlesSystemGpu1.params.runOnSceneLoadHooks();
      return { node: particlesSystemGpu1, children: particlesSystemGpu1_nodes };
    }
    function create_point1(particles3) {
      var point1 = particles3.createNode("point");
      point1.setName("point1");
      const point1_nodes = {};
      point1.uiData.setPosition(-250, 250);
      point1.p.updateZ.set(true);
      point1.p.z.set("@P.z + 0.2*rand(@id)");
      point1.params.postCreateSpareParams();
      point1.params.runOnSceneLoadHooks();
      return { node: point1, children: point1_nodes };
    }
    function create_restAttributes1(particles3) {
      var restAttributes1 = particles3.createNode("restAttributes");
      restAttributes1.setName("restAttributes1");
      const restAttributes1_nodes = {};
      restAttributes1.uiData.setPosition(-250, 400);
      restAttributes1.p.tnormal.set(false);
      restAttributes1.params.postCreateSpareParams();
      restAttributes1.params.runOnSceneLoadHooks();
      return { node: restAttributes1, children: restAttributes1_nodes };
    }
    function create_scatter1(particles3) {
      var scatter1 = particles3.createNode("scatter");
      scatter1.setName("scatter1");
      const scatter1_nodes = {};
      scatter1.uiData.setPosition(-250, 0);
      scatter1.p.pointsCount.set(1200);
      scatter1.params.postCreateSpareParams();
      scatter1.params.runOnSceneLoadHooks();
      return { node: scatter1, children: scatter1_nodes };
    }
    function create_sphere1(particles3) {
      var sphere1 = particles3.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(-550, 500);
      sphere1.p.radius.set(0.03);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    function create_text1(particles3) {
      var text1 = particles3.createNode("text");
      text1.setName("text1");
      const text1_nodes = {};
      text1.uiData.setPosition(-250, -150);
      text1.p.type.set(1);
      text1.p.justifyMode.set(2);
      text1.params.postCreateSpareParams();
      text1.params.runOnSceneLoadHooks();
      return { node: text1, children: text1_nodes };
    }
    particles_nodes["MAT"] = create_MAT(particles2);
    particles_nodes["actor1"] = create_actor1(particles2);
    particles_nodes["actor_particles1"] = create_actor_particles1(particles2);
    particles_nodes["instance1"] = create_instance1(particles2);
    particles_nodes["particlesSystemGpu1"] = create_particlesSystemGpu1(particles2);
    particles_nodes["point1"] = create_point1(particles2);
    particles_nodes["restAttributes1"] = create_restAttributes1(particles2);
    particles_nodes["scatter1"] = create_scatter1(particles2);
    particles_nodes["sphere1"] = create_sphere1(particles2);
    particles_nodes["text1"] = create_text1(particles2);
    particles_nodes["actor1"].node.setInput(0, particles_nodes["particlesSystemGpu1"].node);
    particles_nodes["actor_particles1"].node.setInput(0, particles_nodes["instance1"].node);
    particles_nodes["instance1"].node.setInput(0, particles_nodes["sphere1"].node);
    particles_nodes["instance1"].node.setInput(1, particles_nodes["restAttributes1"].node);
    particles_nodes["particlesSystemGpu1"].node.setInput(0, particles_nodes["actor_particles1"].node);
    particles_nodes["point1"].node.setInput(0, particles_nodes["scatter1"].node);
    particles_nodes["restAttributes1"].node.setInput(0, particles_nodes["point1"].node);
    particles_nodes["scatter1"].node.setInput(0, particles_nodes["text1"].node);
    if (particles2.childrenController) {
      particles2.childrenController.selection.set([]);
    }
    particles2.uiData.setPosition(0, -200);
    particles2.flags.display.set(true);
    particles2.p.CADLinearTolerance.options.setOption("editable", void 0);
    particles2.p.CADAngularTolerance.options.setOption("editable", void 0);
    particles2.p.CADCurveAbscissa.options.setOption("editable", void 0);
    particles2.p.CADCurveTolerance.options.setOption("editable", void 0);
    particles2.p.CADDisplayEdges.options.setOption("editable", void 0);
    particles2.p.CADEdgesColor.options.setOption("editable", void 0);
    particles2.p.CADDisplayMeshes.options.setOption("editable", void 0);
    particles2.p.CADMeshesColor.options.setOption("editable", void 0);
    particles2.p.CADWireframe.options.setOption("editable", void 0);
    particles2.p.CSGFacetAngle.options.setOption("editable", void 0);
    particles2.p.CSGLinesColor.options.setOption("editable", void 0);
    particles2.p.CSGMeshesColor.options.setOption("editable", void 0);
    particles2.p.CSGWireframe.options.setOption("editable", void 0);
    particles2.params.postCreateSpareParams();
    particles2.params.runOnSceneLoadHooks();
    return { node: particles2, children: particles_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([0.07555345425764966, 0.22867827201292842, 0.005288156075722042]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(0, 150);
      cameraControls1.flags.display.set(true);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_perspectiveCamera1(cameras2) {
      var perspectiveCamera1 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera1.setName("perspectiveCamera1");
      const perspectiveCamera1_nodes = {};
      perspectiveCamera1.uiData.setPosition(0, -50);
      perspectiveCamera1.p.position.set([0, 0, 7.1]);
      perspectiveCamera1.params.postCreateSpareParams();
      perspectiveCamera1.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["perspectiveCamera1"] = create_perspectiveCamera1(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(0, 0);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  const particles = create_particles(root);
  create_cameras(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera1",
    focusedNodes: [particles.children["particlesSystemGpu1"].node],
    autoLayout: false
    // playWhenLoaded: true,
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_ParticlesSystemGPU_polygonjsLogo_ts.6f9dbc7669a642b67d9a.js.map