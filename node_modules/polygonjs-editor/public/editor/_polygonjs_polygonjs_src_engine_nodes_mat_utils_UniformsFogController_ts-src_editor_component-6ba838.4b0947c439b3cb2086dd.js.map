{"version":3,"file":"_polygonjs_polygonjs_src_engine_nodes_mat_utils_UniformsFogController_ts-src_editor_component-6ba838.4b0947c439b3cb2086dd.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAK2B;AAEiB;AAClB;AACH;AACA;AAEvB,MAAM,6BAA6B,kFAAgB,CAAC;AAAA,EAApD;AAAA;AAEC;AAAA,gBAAO,iGAAqB,CAAC,IAAI;AAAA,MAChC,eAAe;AAAA,QACd,SAAS,4EAAe;AAAH,MACtB;AAAA,IACD,CAAC;AAED;AAAA,iBAAQ,2FAAkB,CAAC,IAAI;AAAA,MAC9B,YAAY;AAAA,IACb,CAAC;AAED;AAAA,gBAAO,2FAAkB,CAAC,EAAE;AAAA;AAC7B;AACA,MAAM,eAAe,IAAI,qBAAqB;AAEvC,MAAM,qBAAqB,wDAAY,CAAuB;AAAA,EAA9D;AAAA;AACN,SAAS,eAAe;AAAA;AAAA,EACxB,OAAgB,OAAgB;AAC/B,WAAO;AAAA,EACR;AAAA,EAEe,OAAO;AAAA;AACrB,YAAM,eAAe,KAAK,GAAG,KAAK,gBAAgB,4EAAe,EAAE,KAAK,OAAO,KAAK;AACpF,UAAI,CAAC,cAAc;AAClB,aAAK,OAAO,MAAM,IAAI,2BAA2B,KAAK,GAAG,KAAK,KAAK,IAAI;AACvE;AAAA,MACD;AACA,YAAM,YAAY,MAAM,aAAa,QAAQ;AAC7C,YAAM,YAAY,UAAU,YAAY;AACxC,UAAI,CAAC,WAAW;AACf,aAAK,OAAO,MAAM,IAAI,kBAAkB;AACxC;AAAA,MACD;AACA,YAAM,kBAAkB,6GAA6B,CAAC,WAAW,KAAK,EAAE;AACxE,UAAI,gBAAgB,UAAU,GAAG;AAChC,aAAK,OAAO,MAAM,IAAI,0BAA0B;AAChD;AAAA,MACD;AACA,UAAI;AACJ,iBAAW,kBAAkB,iBAAiB;AAC7C,cAAM,WAAY,eAAwB;AAC1C,YAAI,UAAU;AACb,cAAI,0EAAgB,CAAC,QAAQ,GAAG;AAC/B,uBAAW,OAAO,UAAU;AAC3B,wBAAU,WAAW,KAAK,qBAAqB,GAAG;AAAA,YACnD;AAAA,UACD,OAAO;AACN,sBAAU,WAAW,KAAK,qBAAqB,QAAQ;AAAA,UACxD;AAAA,QACD;AAAA,MACD;AACA,UAAI,CAAC,SAAS;AACb,aAAK,OAAO,MAAM,IAAI,kBAAkB;AACxC;AAAA,MACD;AACA,WAAK,WAAW,OAAO;AAAA,IACxB;AAAA;AAAA,EACQ,qBAAqB,UAAsC;AAClE,UAAM,cAAc,KAAK,GAAG;AAC5B,UAAM,UAAU,SAAS,WAA6B;AACtD,QAAI,WAAY,QAAoB,WAAW;AAC9C,aAAO;AAAA,IACR;AAAA,EACD;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrEkC;AACV;AACO;AAEA;AACqC;AAK7D;AACmE;AAKnE;AAKA;AAKA;AAKA;AAC6E;AACJ;AACF;AAClB;AACrB;AACC;AACA;AAClB;AActB,MAAM,mCAAmC,8EAAc;AAAd,EACxC,yFAAoB;AAApB,IACC,mGAAyB;AAAzB,MACC,6FAAsB;AAAtB;AAAA,QAEC,yFAAyB;AAAzB,UACC,8FAAmB;AAAnB,YACC,sGAAuB;AAAvB,cACC,oGAAsB;AAAtB,gBACC,wFAAgB;AAAhB,kBACC,8FAAmB;AAAnB,oBACC,qFAAc;AAAd;AAAA,sBAEC,0FAAyB;AAAzB,wBACC,oFAAgB,CAAC,wFAAwB,CAAC,mFAAgB,CAAC;AAAA,sBAC5D;AAAA,oBACD;AAAA,kBACD;AAAA,gBACD;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,EAAE;AAAC;AACH,MAAM,eAAe,IAAI,2BAA2B;AAE7C,MAAM,2BAA2B,8DAAgB,CAAkD;AAAA,EAAnG;AAAA;AACN,SAAS,eAAe;AAaxB,SAAS,cAAsC;AAAA,MAC9C,QAAQ,IAAI,gFAAgB,CAAC,IAAI;AAAA,MACjC,gBAAgB,IAAI,8FAAwB,CAAC,IAAI;AAAA,MACjD,UAAU,IAAI,gGAAyB,CAAC,IAAI;AAAA,MAC5C,OAAO,IAAI,0FAAsB,CAAC,IAAI;AAAA,MACtC,aAAa,IAAI,sGAA4B,CAAC,IAAI;AAAA,MAClD,QAAQ,IAAI,wGAA6B,CAAC,IAAI;AAAA,MAC9C,KAAK,IAAI,yEAAa,CAAC,IAAI;AAAA,MAC3B,aAAa,IAAI,wFAAqB,CAAC,IAAI;AAAA,MAC3C,UAAU,IAAI,gGAAyB,CAAC,IAAI;AAAA,MAC5C,KAAK,IAAI,uFAAoB,CAAC,IAAI;AAAA,MAClC,WAAW,IAAI,oFAAmB,CAAC,IAAI;AAAA,IACxC;AACA,SAAmB,kBAAkB,OAAO,OAAO,KAAK,WAAW;AAAA;AAAA,EAzBnE,OAAgB,OAA6B;AAC5C,WAAO,wGAAoB;AAAZ,EAChB;AAAA,EAES,iBAAiB;AACzB,WAAO,IAAI,uDAAmB,CAAC;AAAA,MAC9B,cAAc;AAAA,MACd,MAAM,6CAAS;AAAT,MACN,OAAO;AAAA,MACP,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AAAA,EAee,OAAO;AAAA;AACrB,WAAK,YAAY,KAAK,aAAa,KAAK,eAAe;AACvD,YAAM,QAAQ,IAAI,KAAK,oBAAoB,KAAK,SAAS,CAAC;AAE1D,WAAK,YAAY,KAAK,SAAS;AAAA,IAChC;AAAA;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpHiC;AACT;AACO;AACA;AAKxB;AAKA;AAKA;AAKA;AAC6E;AAC5C;AACD;AACjB;AAQtB,MAAM,kCAAkC,mGAAyB;AAAzB,EACvC,6FAAsB;AAAtB;AAAA,IAEC,gGAAoB;AAApB,MACC,4GAA0B;AAA1B,QACC,4FAAkB;AAAlB;AAAA,UAEC,yFAAyB,CAAC,uFAAwB,CAAC,kFAAgB,CAAC;AAAA,QACrE;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD,EAAE;AAAC;AACH,MAAM,eAAe,IAAI,0BAA0B;AAE5C,MAAM,0BAA0B,6DAAgB,CAAgD;AAAA,EAAhG;AAAA;AACN,SAAS,eAAe;AAaxB,SAAS,cAAqC;AAAA,MAC7C,gBAAgB,IAAI,8FAAwB,CAAC,IAAI;AAAA,MACjD,SAAS,IAAI,8FAAwB,CAAC,IAAI;AAAA,MAC1C,iBAAiB,IAAI,8GAAgC,CAAC,IAAI;AAAA,MAC1D,aAAa,IAAI,wFAAqB,CAAC,IAAI;AAAA,MAC3C,WAAW,IAAI,kGAA0B,CAAC,IAAI;AAAA,IAC/C;AACA,SAAmB,kBAAkB,OAAO,OAAO,KAAK,WAAW;AAAA;AAAA,EAnBnE,OAAgB,OAA4B;AAC3C,WAAO,qGAAmB;AAAX,EAChB;AAAA,EAES,iBAAiB;AACzB,WAAO,IAAI,sDAAkB,CAAC;AAAA,MAC7B,cAAc;AAAA,MACd,MAAM,6CAAS;AAAT,MACN,SAAS;AAAA,IACV,CAAC;AAAA,EACF;AAAA,EAUe,OAAO;AAAA;AACrB,WAAK,YAAY,KAAK,aAAa,KAAK,eAAe;AACvD,YAAM,QAAQ,IAAI,KAAK,oBAAoB,KAAK,SAAS,CAAC;AAE1D,WAAK,YAAY,KAAK,SAAS;AAAA,IAChC;AAAA;AACD;;;;;;;;;;;;;ACrF0B;AACnB,SAAS,yBAAoD,MAAa;AAChF,SAAO,MAAM,cAAc,KAAK;AAAA,IAAzB;AAAA;AACN,qBAAU,2FAAkB,CAAC,IAAI;AAAA;AAAA,EAClC;AACD;;;;;;;;;;;;;ACL0B;AACnB,SAAS,0BAAqD,MAAa;AACjF,SAAO,MAAM,cAAc,KAAK;AAAA,IAAzB;AAAA;AACN,sBAAW,2FAAkB,CAAC,IAAI;AAAA;AAAA,EACnC;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLkF;AACvD;AAYiB;AAChB;AAKrB,SAAS,eAA0C,MAAa;AACtE,SAAO,MAAM,cAAc,KAAK;AAAA,IAAzB;AAAA;AAEN;AAAA,oBAAS,6FAAmB,CAAC,CAAC;AAAA;AAAA,EAC/B;AACD;AAEA,MAAM,gCAAgC,eAAe,kFAAgB,EAAE;AAAC;AAUxE,SAAS,mBAAmB,UAA2D;AACtF,MAAI,CAAC,UAAU;AACd,WAAO;AAAA,EACR;AACA,SAAQ,SAA4B,OAAO;AAC5C;AAEA,MAAe,2BAA2B,4DAAY,GAAoD;AAK1G;AAEO,MAAM,6BAA6B,oEAAc,CAAC;AAAA,EACxD,YAA+B,MAA0B;AACxD,UAAM,IAAI;AADoB;AAAA,EAE/B;AAAA,EACA,OAAa,OAAO,MAA0B;AAAA;AAC7C,YAAM,WAAW,MAAM,KAAK,SAAS;AACrC,UAAI,CAAC,mBAAmB,QAAQ,GAAG;AAClC;AAAA,MACD;AACA,WAAK,YAAY,WAAW,eAAe,QAAQ;AAAA,IACpD;AAAA;AAAA,EACS,eAAe,UAAoC;AAC3D,UAAM,KAAK,KAAK,KAAK;AACrB,aAAS,MAAM,2EAAa,CAAC,GAAG,MAAM;AAAA,EACvC;AAAA,EACS,YAAY,UAAoC,QAAgC;AAAA,EAAC;AAAA,EACjF,sBAAsB,UAAoC,QAAqC;AACvG,SAAK,KAAK,EAAE,OAAO,IAAI,SAAS,GAAG;AAAA,EACpC;AACD;;;;;;;;;;;;;;;;;;;ACtE8H;AAE9H,MAAM,aAAa;AAAA,EACjB,KAAK;AAAA,EACL,OAAO;AACT;AAEO,SAAS,OAAO,MAAU,QAAY,QAAY,QAAY,OAAW,UAAe;AAC7F,SAAQ,KAAK,aACR,8CAAU,CAAC,GAAG,uDAAmB,CAAC,OAAO,YAAY;AAAA,IACpD,uDAAmB,CAAC,2iBAAgoB;AAAA,EACtpB,CAAC,KACD,uDAAmB,CAAC,QAAQ,IAAI;AACtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEXuB;AACA;AACA;AAQhB,MAAM,kBAAkB;AAAA,EAC9B,YAAoB,MAAwB;AAAxB;AAAA,EAAyB;AAAA,EAE7C,gBAAgB,SAAiC;AAChD,UAAM,EAAC,YAAW,IAAI;AACtB,UAAM,kBAAyC,oBAAI,IAAI;AAEvD,UAAM,4BAAsD,oBAAI,IAAI;AACpE,eAAW,cAAc,aAAa;AACrC,iBAAW,SAAS,CAAC,WAAW;AAC/B,cAAM,WAAY,OAAgB;AAClC,YAAI,UAAU;AACb,cAAI,qCAAgB,CAAC,QAAQ,GAAG;AAC/B,iBAAK,KAAK,OAAO,MAAM,IAAI,uCAAuC;AAAA,UACnE,OAAO;AACN,4BAAgB,IAAI,SAAS,MAAM,QAAQ;AAC3C,kBAAM,aAAa,+CAAmB,CAAC,QAAQ,UAAU;AACzD,qEAAwB,CAAC,2BAA2B,SAAS,MAAM,UAAU;AAAA,UAC9E;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AACA,WAAO,EAAC,iBAAiB,0BAAyB;AAAA,EACnD;AAAA,EACA,eAAe,SAAgC;AAC9C,UAAM,EAAC,UAAU,yBAAyB,gBAAe,IAAI;AAC7D,UAAM,uBAA4D,oBAAI,IAAI;AAC1E,UAAM,yBAAqD,oBAAI,IAAI;AACnE,UAAM,iBAAuC,oBAAI,IAAI;AACrD,oBAAgB,QAAQ,CAAC,UAAU,SAAS;AAC3C,YAAM,QAAQ,wBAAwB,IAAI,IAAI;AAC9C,UAAI,SAAS,MAAM;AAClB,gBAAQ,IAAI,oBAAoB,IAAI;AACpC;AAAA,MACD;AACA,YAAM,UAAU,SAAS,KAAK;AAC9B,UAAI,CAAC,SAAS;AACb,gBAAQ,IAAI,sBAAsB,KAAK;AACvC;AAAA,MACD;AACA,YAAM,gBAAwC,oBAAI,IAAI;AACtD,cAAQ,YAAY,UAAU,aAAa;AAC3C,2BAAqB,IAAI,MAAM,aAAa;AAC5C,oBAAc,QAAQ,CAAC,YAAY;AAClC,YAAI,SAAS;AACZ,yBAAe,IAAI,QAAQ,MAAM,OAAO;AACxC,mEAAwB,CAAC,wBAAwB,QAAQ,MAAM,QAAQ;AAAA,QACxE;AAAA,MACD,CAAC;AAAA,IACF,CAAC;AACD,WAAO,EAAC,gBAAgB,sBAAsB,uBAAsB;AAAA,EACrE;AACD;;;;;;;;;;;;;;;;;;;;;;;;ACpDO;AACwB;AACA;AACE;AACD;AACA;AACD;AACG;AACA;AACJ;AACF;AAarB,SAAS,uBAAuB,UAAqD;AAC3F,MAAI,oBAAoB,8BAAiB,EAAE;AAC1C,WAAO,2CAAqB,CAAC;AAAA,EAC9B;AACA,MAAI,oBAAoB,8BAAiB,EAAE;AAC1C,WAAO,2CAAqB,CAAC;AAAA,EAC9B;AACA,MAAI,oBAAoB,gCAAmB,EAAE;AAC5C,WAAO,+CAAuB,CAAC;AAAA,EAChC;AACA,MAAI,oBAAoB,+BAAkB,EAAE;AAC3C,WAAO,6CAAsB,CAAC;AAAA,EAC/B;AACA,MAAI,oBAAoB,+BAAkB,EAAE;AAC3C,WAAO,6CAAsB,CAAC;AAAA,EAC/B;AACA,MAAI,oBAAoB,8BAAiB,EAAE;AAC1C,WAAO,2CAAqB,CAAC;AAAA,EAC9B;AACA,MAAI,oBAAoB,6BAAgB,EAAE;AACzC,WAAO,yCAAoB,CAAC;AAAA,EAC7B;AACA,MAAI,oBAAoB,iCAAoB,EAAE;AAC7C,WAAO,iDAAwB,CAAC;AAAA,EACjC;AACA,MAAI,oBAAoB,iCAAoB,EAAE;AAC7C,WAAO,iDAAwB,CAAC;AAAA,EACjC;AACA,MAAI,oBAAoB,2BAAc,EAAE;AACvC,WAAO,qCAAkB,CAAC;AAAA,EAC3B;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEgC;AAGP;AAGK;AACE;AACA;AACC;AACA;AACG;AAEf;AACW;AACK;AAQV;AAED;AAED;AACA;AAIlB,MAAM,oBAAoB;AAAA,EAChC,YAAoB,MAAwB;AAAxB;AAAA,EAAyB;AAAA,EACvC,QAAQ;AAAA;AACb,YAAM,YAAY,KAAK,KAAK,GAAG,OAAO,MAAM,CAAC;AAC7C,UAAI,CAAC,WAAW;AACf,eAAO,KAAK,KAAK,OAAO,MAAM,IAAI,iBAAiB;AAAA,MACpD;AACA,YAAM,YAAY,MAAM,UAAU,QAAQ;AAC1C,YAAM,YAAY,UAAU,YAAY;AACxC,UAAI,CAAC,WAAW;AACf,eAAO,KAAK,KAAK,OAAO,MAAM,IAAI,eAAe;AAAA,MAClD;AAEA,YAAM,KAAK,KAAK,MAAM,EAAE,aAAa,MAAY;AAChD,YAAI;AACH,gBAAM,KAAK,cAAc,SAAS;AAAA,QACnC,SAAS,KAAP;AACD,kBAAQ,MAAM,GAAG;AAAA,QAClB;AAAA,MACD,EAAC;AAAA,IACF;AAAA;AAAA,EACc,cAAc,WAAsB;AAAA;AACjD,YAAM,cAAc,UAAU,eAAe;AAC7C,YAAM,WAAW,IAAI,iBAAiB,CAAC,KAAK,IAAI;AAGhD,YAAM,QAAQ,MAAY;AACzB,cAAM,WAAW,IAAI,+BAAe,CAAC,KAAK,KAAK,MAAM,CAAC;AACtD,aAAK,mBAAmB,QAAQ;AAChC,cAAM,sCAAe,CAAC,EAAE,YAAY,QAAQ;AAAA,MAC7C;AACA,YAAM,MAAM;AAGZ,YAAM,QAAQ,MAAY;AACzB,cAAMA,oBAAmB,KAAK,KAAK,YAAY,kBAAkB,EAAE,CAAC;AACpE,cAAMC,cAAa,KAAK,KAAK,YAAY,YAAY,EAAE,CAAC;AACxD,cAAM,WAAW,IAAI,+BAAe,CAAC,KAAK,KAAK,MAAM,CAAC;AACtD,cAAM,cAAc,IAAI,qCAAkB,CAAC,KAAK,MAAMD,mBAAkB,KAAK;AAC7E,cAAM,cAAc,IAAI,qCAAkB,CAAC,KAAK,MAAMC,aAAY,KAAK;AACvE,iBAAS,YAAY,WAAW;AAChC,iBAAS,YAAY,WAAW;AAChC,cAAM,sCAAe,CAAC,EAAE,YAAY,QAAQ;AAAA,MAC7C;AACA,YAAM,MAAM;AAEZ,YAAM,cAAc,KAAK,KAAK,YAAY,aAAa,EAAE,CAAC;AAC1D,YAAM,eAAe,KAAK,KAAK,YAAY,cAAc,EAAE,CAAC;AAC5D,YAAM,mBAAmB,KAAK,KAAK,YAAY,kBAAkB,EAAE,CAAC;AACpE,YAAM,aAAa,KAAK,KAAK,YAAY,YAAY,EAAE,CAAC;AAGxD,YAAM,QAAQ,MAAY;AACzB,cAAM,WAAW,IAAI,+BAAe,CAAC,KAAK,KAAK,MAAM,CAAC;AAEtD,cAAM,EAAC,iBAAAC,kBAAiB,2BAAAC,2BAAyB,IAAI,SAAS,gBAAgB,EAAC,YAAW,CAAC;AAC3F,cAAM,EAAC,yBAAAC,yBAAuB,IAAI,KAAK,sBAAsB;AAAA,UAC5D;AAAA,UACA;AAAA,UACA,iBAAAF;AAAA,UACA,2BAAAC;AAAA,QACD,CAAC;AACD,YAAI,SAAS,cAAc,IAAI,GAAG;AACjC,gBAAM,sCAAe,CAAC,EAAE,YAAY,QAAQ;AAAA,QAC7C;AACA,cAAME,YAAW,iBAAiB,SAAS;AAC3C,cAAMC,YAAW,KAAK,KAAK,YAAY,UAAU;AACjD,eAAO,EAAC,yBAAAF,0BAAyB,2BAAAD,4BAA2B,iBAAAD,kBAAiB,UAAAG,WAAU,UAAAC,UAAQ;AAAA,MAChG;AACA,YAAM,EAAC,yBAAyB,2BAA2B,iBAAiB,UAAU,SAAQ,IAAI,MAAM,MAAM;AAG9G,YAAM,QAAQ,MAAY;AACzB,cAAM,EAAC,gBAAAC,iBAAgB,sBAAAC,uBAAsB,wBAAAC,wBAAsB,IAAI,SAAS,eAAe;AAAA,UAC9F;AAAA,UACA;AAAA,UACA;AAAA,QACD,CAAC;AACD,cAAM,WAAW,IAAI,+BAAe,CAAC,KAAK,KAAK,MAAM,CAAC;AAEtD,aAAK,gBAAgB;AAAA,UACpB;AAAA,UACA;AAAA;AAAA,UAEA,gBAAAF;AAAA;AAAA;AAAA,QAGD,CAAC;AACD,YAAI,SAAS,cAAc,IAAI,GAAG;AACjC,gBAAM,sCAAe,CAAC,EAAE,YAAY,QAAQ;AAAA,QAC7C;AACA,cAAMG,YAAW,WAAW,YAAY,mCAAiB,CAAC,CAAC;AAC3D,eAAO,EAAC,UAAAA,WAAU,gBAAAH,iBAAgB,sBAAAC,uBAAsB,wBAAAC,wBAAsB;AAAA,MAC/E;AACA,YAAM,EAAC,UAAU,gBAAgB,sBAAsB,uBAAsB,IAAI,MAAM,MAAM;AAE7F,YAAM,QAAQ,MAAY;AACzB,cAAM,WAAW,IAAI,+BAAe,CAAC,KAAK,KAAK,MAAM,CAAC;AACtD,aAAK,UAAU;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,CAAC;AACD,aAAK,iBAAiB,UAAU,UAAU,aAAa,YAAY;AACnE,YAAI,SAAS,cAAc,IAAI,GAAG;AACjC,gBAAM,sCAAe,CAAC,EAAE,YAAY,QAAQ;AAAA,QAC7C;AACA;AAAA,MACD;AACA,YAAM,MAAM;AAEZ,YAAM,QAAQ,MAAY;AACzB,cAAM,WAAW,IAAI,+BAAe,CAAC,KAAK,KAAK,MAAM,CAAC;AACtD,aAAK,cAAc;AAAA,UAClB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD,CAAC;AACD,YAAI,SAAS,cAAc,IAAI,GAAG;AACjC,gBAAM,sCAAe,CAAC,EAAE,YAAY,QAAQ;AAAA,QAC7C;AACA;AAAA,MACD;AACA,YAAM,MAAM;AAEZ,YAAM,QAAQ,MAAY;AACzB,cAAM,WAAW,IAAI,+BAAe,CAAC,KAAK,KAAK,MAAM,CAAC;AACtD,aAAK,YAAY,EAAC,UAAU,UAAU,UAAU,SAAQ,CAAC;AACzD,YAAI,SAAS,cAAc,IAAI,GAAG;AACjC,gBAAM,sCAAe,CAAC,EAAE,YAAY,QAAQ;AAAA,QAC7C;AACA;AAAA,MACD;AACA,YAAM,MAAM;AAAA,IACb;AAAA;AAAA,EACQ,mBAAmB,UAA2B;AACrD,UAAM,YAAY,IAAI,mCAAiB,CAAC,KAAK,MAAM,CAAC,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC;AAC5E,aAAS,YAAY,SAAS;AAE9B,UAAM,aAAa,IAAI,mCAAiB,CAAC,KAAK,MAAM,eAAe,IAAI,oBAAO,CAAC,GAAG,CAAC,CAAC;AACpF,UAAM,aAAa,IAAI,mCAAiB,CAAC,KAAK,MAAM,gBAAgB,IAAI,oBAAO,CAAC,GAAG,CAAC,CAAC;AACrF,UAAM,aAAa,IAAI,mCAAiB,CAAC,KAAK,MAAM,oBAAoB,IAAI,oBAAO,CAAC,GAAG,CAAC,CAAC;AACzF,UAAM,aAAa,IAAI,mCAAiB,CAAC,KAAK,MAAM,cAAc,IAAI,oBAAO,CAAC,GAAG,CAAC,CAAC;AACnF,aAAS,YAAY,UAAU;AAC/B,aAAS,YAAY,UAAU;AAC/B,aAAS,YAAY,UAAU;AAC/B,aAAS,YAAY,UAAU;AAAA,EAChC;AAAA,EAEQ,sBAAsB,SAAsC;AACnE,UAAM,EAAC,UAAU,kBAAkB,iBAAiB,0BAAyB,IAAI;AACjF,UAAM,0BAA+C,oBAAI,IAAI;AAE7D,QAAI,QAAQ;AACZ,oBAAgB,QAAQ,CAAC,aAAa;AACrC,YAAM,WAAW,sBAAsB,CAAC,QAAQ;AAChD,UAAI,CAAC,UAAU;AACd,gBAAQ,IAAI,0BAA0B,QAAQ;AAC9C,eAAO,KAAK,KAAK,OAAO,MAAM,IAAI,wBAAwB;AAAA,MAC3D;AACA,YAAM,eAAe,IAAI,mCAAiB,CAAC,kBAAkB,UAAU,IAAI,oBAAO,CAAC,GAAG,CAAC,CAAC;AACxF,eAAS,YAAY,YAAY;AACjC,8BAAwB,IAAI,SAAS,MAAM,KAAK;AAChD;AAEA,YAAM,cAAc,0BAA0B,IAAI,SAAS,IAAI;AAC/D,UAAI,aAAa;AAChB,cAAM,eAAe,IAAI,mCAAiB,CAAC,KAAK,MAAM,YAAY,IAAI,oBAAO,CAAC,GAAG,CAAC,CAAC;AACnF,iBAAS,YAAY,YAAY;AAAA,MAClC;AAAA,IACD,CAAC;AACD,WAAO,EAAC,wBAAuB;AAAA,EAChC;AAAA,EACQ,gBAAgB,SAAgC;AACvD,UAAM,EAAC,UAAU,YAAY,eAAc,IAAI;AAC/C,mBAAe,QAAQ,CAAC,SAAS,SAAS;AACzC,YAAM,eAAe,IAAI,mCAAiB,CAAC,YAAY,mCAAiB,CAAC,GAAG,IAAI,oBAAO,CAAC,GAAG,CAAC,CAAC;AAC7F,eAAS,YAAY,YAAY;AAAA,IAClC,CAAC;AAAA,EACF;AAAA,EACQ,UAAU,SAA0B;AAC3C,UAAM;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD,IAAI;AACJ,QAAI,QAAQ;AACZ,UAAM,uBAAkD,oBAAI,IAAI;AAChE,mBAAe,QAAQ,CAAC,SAAS,SAAS;AACzC,YAAM,eAAe,uBAAuB,IAAI,IAAI;AACpD,UAAI,CAAC,cAAc;AAClB,gBAAQ,KAAK,QAAQ;AACrB;AAAA,MACD;AACA,YAAM,iBAA6B,CAAC;AACpC,qCAAU,CAAC,cAAc,cAAc;AACvC,YAAM,WAAW,eAAe,CAAC;AACjC,UAAI,CAAC,UAAU;AACd,gBAAQ,KAAK,cAAc;AAC3B;AAAA,MACD;AACA,YAAM,iBAAiB,qBAAqB,IAAI,SAAS,IAAI;AAC7D,UAAI,CAAC,gBAAgB;AACpB,gBAAQ,KAAK,qBAAqB,SAAS,MAAM,QAAQ;AACzD;AAAA,MACD;AACA,YAAM,iBAAiB,0BAA0B,IAAI,SAAS,IAAI;AAClE,UAAI,CAAC,gBAAgB;AACpB,gBAAQ,KAAK,iBAAiB;AAC9B;AAAA,MACD;AACA,YAAM,cAAwB,CAAC;AAC/B,qCAAU,CAAC,gBAAgB,WAAW;AACtC,YAAM,kBAAkB,YAAY,CAAC;AACrC,UAAI,CAAC,iBAAiB;AACrB,gBAAQ,KAAK,sBAAsB;AACnC;AAAA,MACD;AACA,UAAI,oBAAmC;AACvC,qBAAe,QAAQ,CAAC,eAAe,iBAAiB;AACvD,YAAI,iBAAiB,cAAc,QAAQ,QAAQ,MAAM;AACxD,8BAAoB,qBAAqB;AAAA,QAC1C;AAAA,MACD,CAAC;AAED,YAAM,UAAU,SAAS,KAAK;AAC9B,cAAQ,EAAE,KAAK,QAAQ,aAAa,EAAC,UAAU,KAAI,CAAC;AACpD,cAAQ,EAAE,MAAM,IAAI,eAAe;AACnC,cAAQ,EAAE,KAAK,IAAI,qBAAqB,EAAE;AAC1C,2BAAqB,IAAI,MAAM,OAAO;AACtC;AAAA,IACD,CAAC;AACD,oBAAgB,QAAQ,CAAC,UAAU,SAAS;AAC3C,YAAM,eAAe,wBAAwB,IAAI,IAAI;AACrD,UAAI,gBAAgB,MAAM;AACzB,gBAAQ,KAAK,6BAA6B,QAAQ;AAClD;AAAA,MACD;AACA,YAAM,iBAAiB,qBAAqB,IAAI,IAAI;AACpD,UAAI,CAAC,gBAAgB;AACpB,gBAAQ,KAAK,qBAAqB,MAAM,YAAY;AACpD;AAAA,MACD;AACA,YAAM,UAAU,SAAS,YAAY;AACrC,YAAM,UAAU,SAAS,YAAY;AACrC,UAAI,EAAE,WAAW,UAAU;AAC1B,gBAAQ,KAAK,uBAAuB,cAAc,QAAQ;AAC1D;AAAA,MACD;AACA,YAAM,iBAAiB,0BAA0B,IAAI,SAAS,IAAI;AAClE,UAAI,gBAAgB;AACnB,cAAM,mBAA6B,CAAC;AACpC,uCAAU,CAAC,gBAAgB,gBAAgB;AAC3C,gBAAQ,EAAE,MAAM,IAAI,iBAAiB,KAAK,GAAG,CAAC;AAC9C,gBAAQ,EAAE,SAAS,QAAQ,SAAS,EAAC,UAAU,KAAI,CAAC;AAAA,MAErD,OAAO;AACN,gBAAQ,KAAK,0BAA0B,cAAc,QAAQ;AAAA,MAC9D;AACA,YAAM,iBAA8C,oBAAI,IAAI;AAC5D,qBAAe,QAAQ,CAAC,SAAS,iBAAiB;AACjD,YAAI,SAAS;AACZ,gBAAM,UAAU,qBAAqB,IAAI,QAAQ,IAAI;AACrD,cAAI,SAAS;AACZ,2BAAe,IAAI,cAAc,OAAO;AAAA,UACzC,OAAO;AACN,oBAAQ,KAAK,iCAAiC,cAAc,OAAO;AAAA,UACpE;AAAA,QACD;AAAA,MACD,CAAC;AAED,cAAQ,sBAAsB,UAAiB,cAAc;AAAA,IAc9D,CAAC;AACD,WAAO,CAAC;AAAA,EACT;AAAA,EAEQ,iBACP,UACA,UACA,aACA,cACC;AAED,QAAI,cAAoD;AACxD,eAAW,WAAW,UAAU;AAC/B,YAAM,aAAa,IAAI,qCAAkB,CAAC,KAAK,MAAM,aAAa,SAAS,GAAG,CAAC;AAC/E,eAAS,YAAY,UAAU;AAC/B,oBAAc;AAAA,IACf;AACA,QAAI,aAAa;AAChB,YAAM,aAAa,IAAI,qCAAkB,CAAC,KAAK,MAAM,aAAa,cAAc,GAAG,CAAC;AACpF,eAAS,YAAY,UAAU;AAAA,IAChC;AAAA,EACD;AAAA,EACQ,cAAc,SAA8B;AACnD,UAAM,EAAC,UAAU,kBAAkB,YAAY,UAAU,SAAQ,IAAI;AACrE,UAAM,wBAAsD,oBAAI,IAAI;AACpE,eAAW,WAAW,UAAU;AAC/B,YAAM,QAAQ,QAAQ,GAAG;AACzB,YAAM,aAAa,MAAM,MAAM,GAAG,EAAE,CAAC;AACrC,YAAM,aAAa,IAAI,qCAAkB,CAAC,KAAK,MAAM,SAAS,YAAY,YAAY;AACtF,eAAS,YAAY,UAAU;AAE/B,YAAM,UAAU,QAAQ,GAAG,SAAS,gBAAgB,uCAAe;AACnE,UAAI,SAAS;AACZ,cAAME,cAAa,IAAI,qCAAkB,CAAC,kBAAkB,SAAS,GAAG,QAAQ,KAAK,KAAK,YAAY;AACtG,iBAAS,YAAYA,WAAU;AAC/B,8BAAsB,IAAI,QAAQ,YAAY,GAAG,UAAU;AAAA,MAC5D;AAAA,IACD;AACA,eAAW,WAAW,UAAU;AAC/B,UAAI,QAAuB;AAE3B,YAAM,mBAAmC,CAAC;AAC1C,cAAQ,MAAM,EAAE,qBAAqB,iBAAiB,SAAS,gBAAgB;AAC/E,iBAAW,mBAAmB,kBAAkB;AAC/C,cAAM,aAAa,sBAAsB,IAAI,gBAAgB,YAAY,CAAC;AAC1E,YAAI,YAAY;AACf,kBAAQ,SAAS;AAAA,QAClB;AAAA,MACD;AACA,YAAM,eAAyB,CAAC;AAChC,mDAAkB,CAAC,CAAC,QAAQ,KAAK,GAAG,QAAQ,GAAG,MAAM,KAAK,GAAG,YAAY;AACzE,YAAM,aAAa,IAAI,qCAAkB,CAAC,YAAY,SAAS,aAAa,KAAK,GAAG,CAAC;AACrF,eAAS,YAAY,UAAU;AAAA,IAChC;AAEA,WAAO,CAAC;AAAA,EACT;AAAA,EACQ,YAAY,SAA4B;AAC/C,UAAM,EAAC,UAAU,UAAU,UAAU,SAAQ,IAAI;AAEjD,UAAM,kBAAkB,SAAS,SAAS,SAAS,SAAS,SAAS;AAErE,UAAM,kBAAkB,MAAM;AAC7B,UAAI,mBAAmB,GAAG;AACzB,eAAO;AAAA,MACR;AACA,YAAM,QAAkB,CAAC;AACzB,YAAM,WAAW,CAAC,SAAoE;AACrF,cAAM,QAAQ,KAAK,KAAK;AACxB,cAAM,OAAO,mDAAuB,CAAC,KAAK,MAAM,IAAI;AACpD,eAAO,MAAM,UAAU;AAAA,MACxB;AACA,YAAM,KAAK,KAAK,SAAS,qBAAqB;AAC9C,eAAS,WAAW,UAAU;AAC7B,cAAM,KAAK,SAAS,OAAO,CAAC;AAAA,MAC7B;AACA,YAAM,KAAK,KAAK,SAAS,qBAAqB;AAC9C,eAAS,WAAW,UAAU;AAC7B,cAAM,KAAK,SAAS,OAAO,CAAC;AAAA,MAC7B;AACA,YAAM,KAAK,KAAK,SAAS,qBAAqB;AAC9C,eAAS,WAAW,UAAU;AAC7B,cAAM,KAAK,SAAS,OAAO,CAAC;AAAA,MAC7B;AAEA,aAAO,MAAM,KAAK,IAAI;AAAA,IACvB;AAEA,UAAM,iBAAiB,gBAAgB;AACvC,UAAM,SAAS,KAAK,KAAK,OAAO;AAChC,QAAI,QAAQ;AACX,YAAM,MAAM,IAAI,2CAAqB,CAAC,QAAQ,KAAK,MAAM,cAAc;AACvE,eAAS,YAAY,GAAG;AAAA,IACzB;AAAA,EACD;AACD;;;;;;;;;;;;;;;;;;;;;;;AJ9a2D;AAIpD;AACuB;AAED;AACK;AAGlC,IAAI,iCAAuD,oBAAI,IAAI;AACnE,qEAAe,oDAAe,CAAC;AAAA,EAC9B,MAAM;AAAA;AAAA,EAEN,OAAO;AAAA,IACN,QAAQ;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,EACD;AAAA,EACA,MAAM,OAAO;AACZ,UAAM,OAAO,8DAA2B,CAAC,MAAM,MAAM;AACrD,UAAM,YAAY,sCAAG,CAAC,QAAQ,IAAI;AAClC,QAAI,CAAC,MAAM;AACV,cAAQ,KAAK,qBAAqB;AAAA,IACnC;AAEA,kDAAS,CAAC,YAAY;AACtB,oDAAW,CAAC,eAAe;AAE3B,aAAS,eAAe;AACvB,sBAAgB;AAChB,WAAK,iBAAiB,qCAAoB,EAAE,SAAS;AAAA,IACtD;AACA,aAAS,kBAAkB;AAC1B,WAAK,oBAAoB,qCAAoB,EAAE,SAAS;AAAA,IACzD;AAEA,aAAe,YAAY;AAAA;AAC1B,cAAM,SAAS,KAAK,YAAY;AAIhC,YAAI,+BAA+B,IAAI,MAAM,GAAG;AAE/C;AAAA,QACD;AAEA,uCAA+B,IAAI,MAAM;AACzC,cAAM,sBAAsB,IAAI,mBAAmB,CAAC,IAAI;AACxD,cAAM,oBAAoB,MAAM;AAChC,cAAM,aAAa,IAAI,gCAAc,CAAC;AACtC,mBAAW,aAAa,IAAI;AAC5B,uCAA+B,OAAO,MAAM;AAAA,MAC7C;AAAA;AAEA,WAAO;AAAA,MACN;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD,CAAC,CAAC,EAAC;;;AK/D6P;;;;ACAlL;AAClB;AACL;;AAEvD,CAAqG;AACrG,iCAAiC,+BAAe,CAAC,gCAAM,aAAa,MAAM;;AAE1E,kDAAe","sources":["webpack:///../@polygonjs/polygonjs/src/engine/nodes/cop/Fetch.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshLambert.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshNormal.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/DefaultFolder.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TexturesFolder.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/UniformsFogController.ts","webpack:///../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue","webpack:///../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue?8dcd","webpack:///../src/editor/components/panels/params/components/extras/nodes/sop/utils/decompose/DecomposeGatherer.ts","webpack:///../src/editor/components/panels/params/components/extras/nodes/sop/utils/decompose/DecomposeDispatch.ts","webpack:///../src/editor/components/panels/params/components/extras/nodes/sop/utils/decompose/DecomposeController.ts","webpack:///../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue?830b","webpack:///../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue?f1b9"],"sourcesContent":["/**\n * Imports a texture from a geometry node\n *\n *\n */\nimport {TypedCopNode} from './_Base';\nimport {Material, Mesh, Texture} from 'three';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreMask} from '../../../core/geometry/Mask';\nimport {CoreType} from '../../../core/Type';\n\nclass FetchCopParamsConfig extends NodeParamsConfig {\n\t/** @param sop node */\n\tnode = ParamConfig.NODE_PATH('', {\n\t\tnodeSelection: {\n\t\t\tcontext: NodeContext.SOP,\n\t\t},\n\t});\n\t/** @param group to read the material from */\n\tgroup = ParamConfig.STRING('', {\n\t\tobjectMask: true,\n\t});\n\t/** @param texture name */\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new FetchCopParamsConfig();\n\nexport class FetchCopNode extends TypedCopNode<FetchCopParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): 'fetch' {\n\t\treturn 'fetch';\n\t}\n\n\toverride async cook() {\n\t\tconst geometryNode = this.pv.node.nodeWithContext(NodeContext.SOP, this.states.error);\n\t\tif (!geometryNode) {\n\t\t\tthis.states.error.set(`node not found at path '${this.pv.node.path()}'`);\n\t\t\treturn;\n\t\t}\n\t\tconst container = await geometryNode.compute();\n\t\tconst coreGroup = container.coreContent();\n\t\tif (!coreGroup) {\n\t\t\tthis.states.error.set(`geometry invalid`);\n\t\t\treturn;\n\t\t}\n\t\tconst selectedObjects = CoreMask.filterThreejsObjects(coreGroup, this.pv);\n\t\tif (selectedObjects.length == 0) {\n\t\t\tthis.states.error.set(`no object matching group`);\n\t\t\treturn;\n\t\t}\n\t\tlet texture: Texture | undefined;\n\t\tfor (const selectedObject of selectedObjects) {\n\t\t\tconst material = (selectedObject as Mesh).material;\n\t\t\tif (material) {\n\t\t\t\tif (CoreType.isArray(material)) {\n\t\t\t\t\tfor (const mat of material) {\n\t\t\t\t\t\ttexture = texture || this._textureFromMaterial(mat);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttexture = texture || this._textureFromMaterial(material);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!texture) {\n\t\t\tthis.states.error.set(`no texture found`);\n\t\t\treturn;\n\t\t}\n\t\tthis.setTexture(texture);\n\t}\n\tprivate _textureFromMaterial(material: Material):Texture|undefined {\n\t\tconst textureName = this.pv.name;\n\t\tconst texture = material[textureName as keyof Material];\n\t\tif (texture && (texture as Texture).isTexture) {\n\t\t\treturn texture as Texture;\n\t\t}\n\t}\n}\n","/**\n * Creates a Mesh Lambert Material\n *\n * @remarks\n * This material needs lights to be visible. While not as photorealistic as the MeshStandardMaterial, it is very cheap to process.\n *\n */\n\nimport {MeshLambertMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {\n\tTextureEnvMapSimpleController,\n\tEnvMapSimpleParamConfig,\n\tTextureEnvMapSimpleControllers,\n} from './utils/TextureEnvMapSimpleController';\nimport {\n\tTextureLightMapController,\n\tLightMapParamConfig,\n\tTextureLightMapControllers,\n} from './utils/TextureLightMapController';\nimport {\n\tTextureEmissiveMapController,\n\tEmissiveMapParamConfig,\n\tTextureEmissiveMapControllers,\n} from './utils/TextureEmissiveMapController';\nimport {FlatShadingController, FlatShadingParamConfig, FlatShadingControllers} from './utils/FlatShadingController';\nimport {TextureAOMapController, AOMapParamConfig, TextureAOMapControllers} from './utils/TextureAOMapController';\nimport {WireframeController, WireframeControllers, WireframeParamConfig} from './utils/WireframeController';\nimport {FogController, FogControllers, FogParamConfig} from './utils/FogController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\n\ninterface MeshLambertControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tFogControllers,\n\t\tFlatShadingControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureAOMapControllers,\n\t\tTextureEmissiveMapControllers,\n\t\tTextureEnvMapSimpleControllers,\n\t\tTextureLightMapControllers,\n\t\tTextureMapControllers,\n\t\tWireframeControllers {}\nclass MeshLambertMatParamsConfig extends FogParamConfig(\n\tWireframeParamConfig(\n\t\tAdvancedCommonParamConfig(\n\t\t\tFlatShadingParamConfig(\n\t\t\t\t/* advanced */\n\t\t\t\tAdvancedFolderParamConfig(\n\t\t\t\t\tLightMapParamConfig(\n\t\t\t\t\t\tEnvMapSimpleParamConfig(\n\t\t\t\t\t\t\tEmissiveMapParamConfig(\n\t\t\t\t\t\t\t\tAOMapParamConfig(\n\t\t\t\t\t\t\t\t\tAlphaMapParamConfig(\n\t\t\t\t\t\t\t\t\t\tMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t/* textures */\n\t\t\t\t\t\t\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\tColorParamConfig(DefaultFolderParamConfig(NodeParamsConfig))\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertMatNode extends PrimitiveMatNode<MeshLambertMaterial, MeshLambertMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_LAMBERT {\n\t\treturn MatType.MESH_LAMBERT;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshLambertMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly controllers: MeshLambertControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\taoMap: new TextureAOMapController(this),\n\t\temissiveMap: new TextureEmissiveMapController(this),\n\t\tenvMap: new TextureEnvMapSimpleController(this),\n\t\tfog: new FogController(this),\n\t\tflatShading: new FlatShadingController(this),\n\t\tlightMap: new TextureLightMapController(this),\n\t\tmap: new TextureMapController(this),\n\t\twireframe: new WireframeController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","/**\n * Creates a Mesh Basic Material\n *\n * @remarks\n * This material only emits a color and does not react to light. It is therefore the less resource intensive material.\n *\n */\n\nimport {MeshNormalMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {\n\tTextureBumpMapController,\n\tBumpMapParamConfig,\n\tTextureBumpMapControllers,\n} from './utils/TextureBumpMapController';\nimport {\n\tTextureNormalMapController,\n\tNormalMapParamConfig,\n\tTextureNormalMapControllers,\n} from './utils/TextureNormalMapController';\nimport {\n\tTextureDisplacementMapController,\n\tDisplacementMapParamConfig,\n\tTextureDisplacementMapControllers,\n} from './utils/TextureDisplacementMapController';\nimport {FlatShadingController, FlatShadingParamConfig, FlatShadingControllers} from './utils/FlatShadingController';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\n\ninterface MeshNormalControllers\n\textends AdvancedCommonControllers,\n\t\tTextureBumpMapControllers,\n\t\tTextureDisplacementMapControllers,\n\t\tFlatShadingControllers,\n\t\tTextureNormalMapControllers {}\nclass MeshNormalMatParamsConfig extends AdvancedCommonParamConfig(\n\tFlatShadingParamConfig(\n\t\t/* advanced */\n\t\tNormalMapParamConfig(\n\t\t\tDisplacementMapParamConfig(\n\t\t\t\tBumpMapParamConfig(\n\t\t\t\t\t/* textures */\n\t\t\t\t\tTexturesFolderParamConfig(DefaultFolderParamConfig(NodeParamsConfig))\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshNormalMatParamsConfig();\n\nexport class MeshNormalMatNode extends PrimitiveMatNode<MeshNormalMaterial, MeshNormalMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_NORMAL {\n\t\treturn MatType.MESH_NORMAL;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshNormalMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\topacity: 1,\n\t\t}) as MeshNormalMaterial;\n\t}\n\n\treadonly controllers: MeshNormalControllers = {\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\tbumpMap: new TextureBumpMapController(this),\n\t\tdisplacementMap: new TextureDisplacementMapController(this),\n\t\tflatShading: new FlatShadingController(this),\n\t\tnormalMap: new TextureNormalMapController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nexport function DefaultFolderParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tdefault = ParamConfig.FOLDER(null);\n\t};\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TexturesFolderParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\ttextures = ParamConfig.FOLDER(null);\n\t};\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {BaseController, MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport type {\n\tPointsMaterial,\n\tShaderMaterial,\n\tMeshStandardMaterial,\n\tMeshPhysicalMaterial,\n\tMeshPhongMaterial,\n\tMeshLambertMaterial,\n\tMeshBasicMaterial,\n\tMeshToonMaterial,\n\tMaterial,\n} from 'three';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {isBooleanTrue} from '../../../../core/BooleanValue';\n\nexport interface UniformFogControllers {\n\tuniformFog: UniformFogController;\n}\nexport function FogParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle on if you have a fog in the scene and the material should be affected by it */\n\t\tuseFog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass FogUniformsParamsConfig extends FogParamConfig(NodeParamsConfig) {}\ntype FoggableUniformsMaterial =\n\t| ShaderMaterial\n\t| PointsMaterial\n\t| MeshStandardMaterial\n\t| MeshPhysicalMaterial\n\t| MeshPhongMaterial\n\t| MeshLambertMaterial\n\t| MeshBasicMaterial\n\t| MeshToonMaterial;\nfunction isValidFogMaterial(material?: Material): material is FoggableUniformsMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as PointsMaterial).fog != null;\n}\n\nabstract class FogUniformsMatNode extends TypedMatNode<FoggableUniformsMaterial, FogUniformsParamsConfig> {\n\t// createMaterial() {\n\t// \treturn new Material();\n\t// }\n\tcontrollers!: UniformFogControllers;\n}\n\nexport class UniformFogController extends BaseController {\n\tconstructor(protected override node: FogUniformsMatNode) {\n\t\tsuper(node);\n\t}\n\tstatic async update(node: FogUniformsMatNode) {\n\t\tconst material = await node.material();\n\t\tif (!isValidFogMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tnode.controllers.uniformFog.updateMaterial(material);\n\t}\n\toverride updateMaterial(material: FoggableUniformsMaterial) {\n\t\tconst pv = this.node.pv;\n\t\tmaterial.fog = isBooleanTrue(pv.useFog);\n\t}\n\toverride getTextures(material: FoggableUniformsMaterial, record: MaterialTexturesRecord) {}\n\toverride setParamsFromMaterial(material: FoggableUniformsMaterial, record: SetParamsTextureNodesRecord) {\n\t\tthis.node.p.useFog.set(material.fog);\n\t}\n}\n","import { createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"w-full\"\n}\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_ctx.displayed)\n    ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n        _createCommentVNode(\" <div class=\\\"grid-x w-full\\\">\\n\\t\\t\\t<div class=\\\"cell auto\\\">\\n\\t\\t\\t\\t<div class=\\\"inline-flex w-full\\\">\\n\\t\\t\\t\\t\\t<button\\n\\t\\t\\t\\t\\t\\ttype=\\\"button\\\"\\n\\t\\t\\t\\t\\t\\tclass=\\\"grow inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 sm:w-auto sm:text-sm cursor-pointer\\\"\\n\\t\\t\\t\\t\\t\\t@click=\\\"decompose\\\"\\n\\t\\t\\t\\t\\t\\tid=\\\"sop-decompose-decompose-button\\\"\\n\\t\\t\\t\\t\\t>\\n\\t\\t\\t\\t\\t\\t<CubeIcon class=\\\"mr-3 h-5 w-5\\\" aria-hidden=\\\"true\\\" />\\n\\t\\t\\t\\t\\t\\t<span>Decompose</span>\\n\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div> \")\n      ]))\n    : _createCommentVNode(\"v-if\", true)\n}","export * from \"-!../../../../../../../../../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../../../../../../../../../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../../../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./Decompose.vue?vue&type=template&id=9af67708&ts=true\"","import {DecomposeSopNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/sop/Decompose';\nimport {Material, Mesh, Texture} from 'three';\nimport {CoreType} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/Type';\nimport {CorePath} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/geometry/CorePath';\nimport {MapUtils} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/MapUtils';\nimport {MaterialTexturesRecord} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/utils/_BaseController';\nimport {GatherMaterialsOptions, GatherTexturesOptions} from './DecomposeCommon';\n// interface TextureAssignment {\n// \tmaterialUuid:string;\n// \tpropertyName:string\n// }\n\nexport class DecomposeGatherer {\n\tconstructor(private node: DecomposeSopNode) {}\n\n\tgatherMaterials(options: GatherMaterialsOptions) {\n\t\tconst {rootObjects} = options;\n\t\tconst materialsByUuid: Map<string, Material> = new Map();\n\n\t\tconst objectPathsByMaterialUuid: Map<string, Set<string>> = new Map();\n\t\tfor (const rootObject of rootObjects) {\n\t\t\trootObject.traverse((object) => {\n\t\t\t\tconst material = (object as Mesh).material;\n\t\t\t\tif (material) {\n\t\t\t\t\tif (CoreType.isArray(material)) {\n\t\t\t\t\t\tthis.node.states.error.set('material arrays are not yet supported');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmaterialsByUuid.set(material.uuid, material);\n\t\t\t\t\t\tconst objectPath = CorePath.objectPath(object, rootObject);\n\t\t\t\t\t\tMapUtils.addToSetAtEntry(objectPathsByMaterialUuid, material.uuid, objectPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn {materialsByUuid, objectPathsByMaterialUuid};\n\t}\n\tgatherTextures(options: GatherTexturesOptions) {\n\t\tconst {matNodes, materialNodeIndexByUuid, materialsByUuid} = options;\n\t\tconst textureRecordsByUuid: Map<string, MaterialTexturesRecord> = new Map();\n\t\tconst materialsByTextureUuid: Map<string, Set<Material>> = new Map();\n\t\tconst texturesByUuid: Map<string, Texture> = new Map();\n\t\tmaterialsByUuid.forEach((material, uuid) => {\n\t\t\tconst index = materialNodeIndexByUuid.get(uuid);\n\t\t\tif (index == null) {\n\t\t\t\tconsole.log('no index for mat', uuid);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst matNode = matNodes[index];\n\t\t\tif (!matNode) {\n\t\t\t\tconsole.log('no matNode for mat', index);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst textureRecord: MaterialTexturesRecord = new Map();\n\t\t\tmatNode.getTextures(material, textureRecord);\n\t\t\ttextureRecordsByUuid.set(uuid, textureRecord);\n\t\t\ttextureRecord.forEach((texture) => {\n\t\t\t\tif (texture) {\n\t\t\t\t\ttexturesByUuid.set(texture.uuid, texture);\n\t\t\t\t\tMapUtils.addToSetAtEntry(materialsByTextureUuid, texture.uuid, material);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn {texturesByUuid, textureRecordsByUuid, materialsByTextureUuid};\n\t}\n}\n","import {\n\tLineBasicMaterial,\n\tMaterial,\n\tMeshBasicMaterial,\n\tMeshLambertMaterial,\n\tMeshMatcapMaterial,\n\tMeshNormalMaterial,\n\tMeshPhongMaterial,\n\tMeshPhysicalMaterial,\n\tMeshStandardMaterial,\n\tMeshToonMaterial,\n\tPointsMaterial,\n} from 'three';\nimport {LineBasicMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/LineBasic';\nimport {MeshBasicMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshBasic';\nimport {MeshLambertMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshLambert';\nimport {MeshMatcapMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshMatcap';\nimport {MeshNormalMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshNormal';\nimport {MeshPhongMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhong';\nimport {MeshPhysicalMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhysical';\nimport {MeshStandardMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshStandard';\nimport {MeshToonMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshToon';\nimport {PointsMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/Points';\n\ntype AllowedMatNodeTypes =\n\t| 'lineBasic'\n\t| 'meshBasic'\n\t| 'meshLambert'\n\t| 'meshMatcap'\n\t| 'meshNormal'\n\t| 'meshPhong'\n\t| 'meshPhysical'\n\t| 'meshStandard'\n\t| 'meshToon'\n\t| 'points';\nexport function matNodeTypeForMaterial(material: Material): undefined | AllowedMatNodeTypes {\n\tif (material instanceof LineBasicMaterial) {\n\t\treturn LineBasicMatNode.type();\n\t}\n\tif (material instanceof MeshBasicMaterial) {\n\t\treturn MeshBasicMatNode.type();\n\t}\n\tif (material instanceof MeshLambertMaterial) {\n\t\treturn MeshLambertMatNode.type();\n\t}\n\tif (material instanceof MeshMatcapMaterial) {\n\t\treturn MeshMatcapMatNode.type();\n\t}\n\tif (material instanceof MeshNormalMaterial) {\n\t\treturn MeshNormalMatNode.type();\n\t}\n\tif (material instanceof MeshPhongMaterial) {\n\t\treturn MeshPhongMatNode.type();\n\t}\n\tif (material instanceof MeshToonMaterial) {\n\t\treturn MeshToonMatNode.type();\n\t}\n\tif (material instanceof MeshStandardMaterial) {\n\t\treturn MeshStandardMatNode.type();\n\t}\n\tif (material instanceof MeshPhysicalMaterial) {\n\t\treturn MeshPhysicalMatNode.type();\n\t}\n\tif (material instanceof PointsMaterial) {\n\t\treturn PointsMatNode.type();\n\t}\n}\n","import {DecomposeSopNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/sop/Decompose';\nimport {CoreGroup} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/geometry/Group';\nimport {Vector2, Material} from 'three';\nimport {BasePrimitiveMatNodeType} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/_Base';\nimport {MaterialSopNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/sop/Material';\nimport {setToArray} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/SetUtils';\nimport {SubnetInputSopNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/sop/SubnetInput';\nimport {SubnetOutputSopNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/sop/SubnetOutput';\nimport {MultipleCommand} from '../../../../../../../../../history/commands/Multiple';\nimport {NodeDeleteCommand} from '../../../../../../../../../history/commands/NodeDelete';\nimport {NodeCreateCommand} from '../../../../../../../../../history/commands/NodeCreate';\nimport {NodeSetNameCommand} from '../../../../../../../../../history/commands/NodeSetName';\nimport {NodeConnectCommand} from '../../../../../../../../../history/commands/NodeConnect';\nimport {NodeSetCommentCommand} from '../../../../../../../../../history/commands/NodeSetComment';\n// import {ParamSetCommand} from '../../../../../../../../history/commands/ParamSet';\nimport {Editor} from '../../../../../../../../../Editor';\nimport {DecomposeGatherer} from './DecomposeGatherer';\nimport {matNodeTypeForMaterial} from './DecomposeDispatch';\nimport {\n\tCreateCopNodesOptions,\n\tCreateMatAndSopNodesOptions,\n\tSetNodesOptions,\n\tSetNodeNamesOptions,\n\tSetCommentOptions,\n} from './DecomposeCommon';\nimport {FetchCopNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/cop/Fetch';\nimport {SetParamsTextureNodesRecord} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/utils/_BaseController';\nimport {NodeContext} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/poly/NodeContext';\nimport {CoreGraphNodeId} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/graph/CoreGraph';\nimport {ArrayUtils} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/ArrayUtils';\nimport {CoreWalker} from '../../../../../../../../../../../@polygonjs/polygonjs/src/core/Walker';\nimport {BaseNodeType} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\n// import {MeshStandardMatNode} from '../../../../../../../../../../../@polygonjs/polygonjs/src/engine/nodes/mat/MeshStandard';\n\nexport class DecomposeController {\n\tconstructor(private node: DecomposeSopNode) {}\n\tasync start() {\n\t\tconst inputNode = this.node.io.inputs.input(0);\n\t\tif (!inputNode) {\n\t\t\treturn this.node.states.error.set('input not found');\n\t\t}\n\t\tconst container = await inputNode.compute();\n\t\tconst coreGroup = container.coreContent();\n\t\tif (!coreGroup) {\n\t\t\treturn this.node.states.error.set('input invalid');\n\t\t}\n\n\t\tawait this.node.scene().batchUpdates(async () => {\n\t\t\ttry {\n\t\t\t\tawait this._runDecompose(coreGroup);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t});\n\t}\n\tprivate async _runDecompose(coreGroup: CoreGroup) {\n\t\tconst rootObjects = coreGroup.threejsObjects();\n\t\tconst gatherer = new DecomposeGatherer(this.node);\n\n\t\t// 1\n\t\tconst step1 = async () => {\n\t\t\tconst cmdMulti = new MultipleCommand(this.node.scene());\n\t\t\tthis._clearChildrenNode(cmdMulti);\n\t\t\tawait Editor.instance().pushCommand(cmdMulti);\n\t\t};\n\t\tawait step1();\n\n\t\t// 2\n\t\tconst step2 = async () => {\n\t\t\tconst materialsNetwork = this.node.nodesByType('materialsNetwork')[0];\n\t\t\tconst copNetwork = this.node.nodesByType('copNetwork')[0];\n\t\t\tconst cmdMulti = new MultipleCommand(this.node.scene());\n\t\t\tconst setName1Cmd = new NodeSetNameCommand(this.node, materialsNetwork, 'MAT');\n\t\t\tconst setName2Cmd = new NodeSetNameCommand(this.node, copNetwork, 'COP');\n\t\t\tcmdMulti.pushCommand(setName1Cmd);\n\t\t\tcmdMulti.pushCommand(setName2Cmd);\n\t\t\tawait Editor.instance().pushCommand(cmdMulti);\n\t\t};\n\t\tawait step2();\n\n\t\tconst subnetInput = this.node.nodesByType('subnetInput')[0];\n\t\tconst subnetOutput = this.node.nodesByType('subnetOutput')[0];\n\t\tconst materialsNetwork = this.node.nodesByType('materialsNetwork')[0];\n\t\tconst copNetwork = this.node.nodesByType('copNetwork')[0];\n\n\t\t// 3\n\t\tconst step3 = async () => {\n\t\t\tconst cmdMulti = new MultipleCommand(this.node.scene());\n\n\t\t\tconst {materialsByUuid, objectPathsByMaterialUuid} = gatherer.gatherMaterials({rootObjects});\n\t\t\tconst {materialNodeIndexByUuid} = this._createMatAndSopNodes({\n\t\t\t\tcmdMulti,\n\t\t\t\tmaterialsNetwork,\n\t\t\t\tmaterialsByUuid,\n\t\t\t\tobjectPathsByMaterialUuid,\n\t\t\t});\n\t\t\tif (cmdMulti.commandsCount() > 0) {\n\t\t\t\tawait Editor.instance().pushCommand(cmdMulti);\n\t\t\t}\n\t\t\tconst matNodes = materialsNetwork.children() as BasePrimitiveMatNodeType[];\n\t\t\tconst sopNodes = this.node.nodesByType('material') as MaterialSopNode[];\n\t\t\treturn {materialNodeIndexByUuid, objectPathsByMaterialUuid, materialsByUuid, matNodes, sopNodes};\n\t\t};\n\t\tconst {materialNodeIndexByUuid, objectPathsByMaterialUuid, materialsByUuid, matNodes, sopNodes} = await step3();\n\n\t\t// 4\n\t\tconst step4 = async () => {\n\t\t\tconst {texturesByUuid, textureRecordsByUuid, materialsByTextureUuid} = gatherer.gatherTextures({\n\t\t\t\tmatNodes,\n\t\t\t\tmaterialNodeIndexByUuid,\n\t\t\t\tmaterialsByUuid,\n\t\t\t});\n\t\t\tconst cmdMulti = new MultipleCommand(this.node.scene());\n\n\t\t\tthis._createCopNodes({\n\t\t\t\tcmdMulti,\n\t\t\t\tcopNetwork,\n\t\t\t\t// textureRecordsByUuid,\n\t\t\t\ttexturesByUuid,\n\t\t\t\t// materialsByTextureUuid,\n\t\t\t\t// objectPathsByMaterialUuid,\n\t\t\t});\n\t\t\tif (cmdMulti.commandsCount() > 0) {\n\t\t\t\tawait Editor.instance().pushCommand(cmdMulti);\n\t\t\t}\n\t\t\tconst copNodes = copNetwork.nodesByType(FetchCopNode.type());\n\t\t\treturn {copNodes, texturesByUuid, textureRecordsByUuid, materialsByTextureUuid};\n\t\t};\n\t\tconst {copNodes, texturesByUuid, textureRecordsByUuid, materialsByTextureUuid} = await step4();\n\t\t// 5\n\t\tconst step5 = async () => {\n\t\t\tconst cmdMulti = new MultipleCommand(this.node.scene());\n\t\t\tthis._setNodes({\n\t\t\t\tmaterialNodeIndexByUuid,\n\t\t\t\tobjectPathsByMaterialUuid,\n\t\t\t\tmaterialsByUuid,\n\t\t\t\ttexturesByUuid,\n\t\t\t\ttextureRecordsByUuid,\n\t\t\t\tmaterialsByTextureUuid,\n\t\t\t\tsubnetInput,\n\t\t\t\tmatNodes,\n\t\t\t\tsopNodes,\n\t\t\t\tcopNodes,\n\t\t\t});\n\t\t\tthis._connectSopNodes(cmdMulti, sopNodes, subnetInput, subnetOutput);\n\t\t\tif (cmdMulti.commandsCount() > 0) {\n\t\t\t\tawait Editor.instance().pushCommand(cmdMulti);\n\t\t\t}\n\t\t\treturn;\n\t\t};\n\t\tawait step5();\n\t\t// 6\n\t\tconst step6 = async () => {\n\t\t\tconst cmdMulti = new MultipleCommand(this.node.scene());\n\t\t\tthis._setNodeNames({\n\t\t\t\tcmdMulti,\n\t\t\t\tmaterialsNetwork,\n\t\t\t\tcopNetwork,\n\t\t\t\tmatNodes,\n\t\t\t\tsopNodes,\n\t\t\t\tcopNodes,\n\t\t\t});\n\t\t\tif (cmdMulti.commandsCount() > 0) {\n\t\t\t\tawait Editor.instance().pushCommand(cmdMulti);\n\t\t\t}\n\t\t\treturn;\n\t\t};\n\t\tawait step6();\n\t\t// 7\n\t\tconst step7 = async () => {\n\t\t\tconst cmdMulti = new MultipleCommand(this.node.scene());\n\t\t\tthis._setComment({cmdMulti, matNodes, sopNodes, copNodes});\n\t\t\tif (cmdMulti.commandsCount() > 0) {\n\t\t\t\tawait Editor.instance().pushCommand(cmdMulti);\n\t\t\t}\n\t\t\treturn;\n\t\t};\n\t\tawait step7();\n\t}\n\tprivate _clearChildrenNode(cmdMulti: MultipleCommand) {\n\t\tconst deleteCmd = new NodeDeleteCommand(this.node, [...this.node.children()]);\n\t\tcmdMulti.pushCommand(deleteCmd);\n\n\t\tconst createCmd1 = new NodeCreateCommand(this.node, 'subnetInput', new Vector2(0, 0));\n\t\tconst createCmd2 = new NodeCreateCommand(this.node, 'subnetOutput', new Vector2(0, 0));\n\t\tconst createCmd3 = new NodeCreateCommand(this.node, 'materialsNetwork', new Vector2(0, 0));\n\t\tconst createCmd4 = new NodeCreateCommand(this.node, 'copNetwork', new Vector2(0, 0));\n\t\tcmdMulti.pushCommand(createCmd1);\n\t\tcmdMulti.pushCommand(createCmd2);\n\t\tcmdMulti.pushCommand(createCmd3);\n\t\tcmdMulti.pushCommand(createCmd4);\n\t}\n\n\tprivate _createMatAndSopNodes(options: CreateMatAndSopNodesOptions) {\n\t\tconst {cmdMulti, materialsNetwork, materialsByUuid, objectPathsByMaterialUuid} = options;\n\t\tconst materialNodeIndexByUuid: Map<string, number> = new Map();\n\n\t\tlet index = 0;\n\t\tmaterialsByUuid.forEach((material) => {\n\t\t\tconst nodeType = matNodeTypeForMaterial(material);\n\t\t\tif (!nodeType) {\n\t\t\t\tconsole.log('material not supported', material);\n\t\t\t\treturn this.node.states.error.set('material not supported');\n\t\t\t}\n\t\t\tconst createMatCmd = new NodeCreateCommand(materialsNetwork, nodeType, new Vector2(0, 0));\n\t\t\tcmdMulti.pushCommand(createMatCmd);\n\t\t\tmaterialNodeIndexByUuid.set(material.uuid, index);\n\t\t\tindex++;\n\n\t\t\tconst objectPaths = objectPathsByMaterialUuid.get(material.uuid);\n\t\t\tif (objectPaths) {\n\t\t\t\tconst createSopCmd = new NodeCreateCommand(this.node, 'material', new Vector2(0, 0));\n\t\t\t\tcmdMulti.pushCommand(createSopCmd);\n\t\t\t}\n\t\t});\n\t\treturn {materialNodeIndexByUuid};\n\t}\n\tprivate _createCopNodes(options: CreateCopNodesOptions) {\n\t\tconst {cmdMulti, copNetwork, texturesByUuid} = options;\n\t\ttexturesByUuid.forEach((texture, uuid) => {\n\t\t\tconst createCopCmd = new NodeCreateCommand(copNetwork, FetchCopNode.type(), new Vector2(0, 0));\n\t\t\tcmdMulti.pushCommand(createCopCmd);\n\t\t});\n\t}\n\tprivate _setNodes(options: SetNodesOptions) {\n\t\tconst {\n\t\t\tmaterialNodeIndexByUuid,\n\t\t\tmaterialsByUuid,\n\t\t\ttexturesByUuid,\n\t\t\ttextureRecordsByUuid,\n\t\t\tmaterialsByTextureUuid,\n\t\t\tobjectPathsByMaterialUuid,\n\t\t\tsubnetInput,\n\t\t\tmatNodes,\n\t\t\tsopNodes,\n\t\t\tcopNodes,\n\t\t} = options;\n\t\tlet index = 0;\n\t\tconst copNodeByTextureUuid: Map<string, FetchCopNode> = new Map();\n\t\ttexturesByUuid.forEach((texture, uuid) => {\n\t\t\tconst materialsSet = materialsByTextureUuid.get(uuid);\n\t\t\tif (!materialsSet) {\n\t\t\t\tconsole.warn('no mat');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst materialsArray: Material[] = [];\n\t\t\tsetToArray(materialsSet, materialsArray);\n\t\t\tconst firstMat = materialsArray[0];\n\t\t\tif (!firstMat) {\n\t\t\t\tconsole.warn('no first mat');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst texturesRecord = textureRecordsByUuid.get(firstMat.uuid);\n\t\t\tif (!texturesRecord) {\n\t\t\t\tconsole.warn('no record for mat', firstMat.uuid, firstMat);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst objectPathsSet = objectPathsByMaterialUuid.get(firstMat.uuid);\n\t\t\tif (!objectPathsSet) {\n\t\t\t\tconsole.warn('no object paths');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst objectPaths: string[] = [];\n\t\t\tsetToArray(objectPathsSet, objectPaths);\n\t\t\tconst firstObjectPath = objectPaths[0];\n\t\t\tif (!firstObjectPath) {\n\t\t\t\tconsole.warn('no first object path');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet firstPropertyName: string | null = null;\n\t\t\ttexturesRecord.forEach((recordTexture, propertyName) => {\n\t\t\t\tif (recordTexture && recordTexture.uuid == texture.uuid) {\n\t\t\t\t\tfirstPropertyName = firstPropertyName || propertyName;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst copNode = copNodes[index];\n\t\t\tcopNode.p.node.setNode(subnetInput, {relative: true});\n\t\t\tcopNode.p.group.set(firstObjectPath);\n\t\t\tcopNode.p.name.set(firstPropertyName || '');\n\t\t\tcopNodeByTextureUuid.set(uuid, copNode);\n\t\t\tindex++;\n\t\t});\n\t\tmaterialsByUuid.forEach((material, uuid) => {\n\t\t\tconst matNodeIndex = materialNodeIndexByUuid.get(uuid);\n\t\t\tif (matNodeIndex == null) {\n\t\t\t\tconsole.warn('matNodeIndex null for mat', material);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst texturesRecord = textureRecordsByUuid.get(uuid);\n\t\t\tif (!texturesRecord) {\n\t\t\t\tconsole.warn('no record for mat', uuid, matNodeIndex);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst matNode = matNodes[matNodeIndex];\n\t\t\tconst sopNode = sopNodes[matNodeIndex];\n\t\t\tif (!(matNode && sopNode)) {\n\t\t\t\tconsole.warn('not matNode/sopNode', matNodeIndex, material);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst objectPathsSet = objectPathsByMaterialUuid.get(material.uuid);\n\t\t\tif (objectPathsSet) {\n\t\t\t\tconst objectPathsArray: string[] = [];\n\t\t\t\tsetToArray(objectPathsSet, objectPathsArray);\n\t\t\t\tsopNode.p.group.set(objectPathsArray.join(' '));\n\t\t\t\tsopNode.p.material.setNode(matNode, {relative: true});\n\t\t\t\t// sopNode.io.inputs.overrideClonedState(true);\n\t\t\t} else {\n\t\t\t\tconsole.warn('no object path for mat', matNodeIndex, material);\n\t\t\t}\n\t\t\tconst copNodesRecord: SetParamsTextureNodesRecord = new Map();\n\t\t\ttexturesRecord.forEach((texture, propertyName) => {\n\t\t\t\tif (texture) {\n\t\t\t\t\tconst copNode = copNodeByTextureUuid.get(texture.uuid);\n\t\t\t\t\tif (copNode) {\n\t\t\t\t\t\tcopNodesRecord.set(propertyName, copNode);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn('no cop node found for texture', propertyName, texture);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tmatNode.setParamsFromMaterial(material as any, copNodesRecord);\n\n\t\t\t// const _linkParamsToGlobals = () => {\n\t\t\t// \tconst matStandardNode = matNode as MeshStandardMatNode;\n\t\t\t// \tif (!(matStandardNode.p.useEnvMap && matStandardNode.p.envMap && matStandardNode.p.envMapIntensity)) {\n\t\t\t// \t\treturn;\n\t\t\t// \t}\n\t\t\t// \tmatStandardNode.p.useEnvMap.set(`ch('${this.node.p.useEnvMap.pathRelativeTo(matStandardNode)}')`);\n\t\t\t// \tmatStandardNode.p.envMap.set(`\\`chsop('${this.node.p.envMap.pathRelativeTo(matStandardNode)}')\\``);\n\t\t\t// \tmatStandardNode.p.envMapIntensity.set(\n\t\t\t// \t\t`ch('${this.node.p.envMapIntensity.pathRelativeTo(matStandardNode)}')`\n\t\t\t// \t);\n\t\t\t// };\n\t\t\t// _linkParamsToGlobals();\n\t\t});\n\t\treturn {};\n\t}\n\n\tprivate _connectSopNodes(\n\t\tcmdMulti: MultipleCommand,\n\t\tsopNodes: MaterialSopNode[],\n\t\tsubnetInput: SubnetInputSopNode,\n\t\tsubnetOutput: SubnetOutputSopNode\n\t) {\n\t\t// join sop nodes\n\t\tlet prevSopNode: MaterialSopNode | SubnetInputSopNode = subnetInput;\n\t\tfor (const sopNode of sopNodes) {\n\t\t\tconst connectCmd = new NodeConnectCommand(this.node, prevSopNode, sopNode, 0, 0);\n\t\t\tcmdMulti.pushCommand(connectCmd);\n\t\t\tprevSopNode = sopNode;\n\t\t}\n\t\tif (prevSopNode) {\n\t\t\tconst connectCmd = new NodeConnectCommand(this.node, prevSopNode, subnetOutput, 0, 0);\n\t\t\tcmdMulti.pushCommand(connectCmd);\n\t\t}\n\t}\n\tprivate _setNodeNames(options: SetNodeNamesOptions) {\n\t\tconst {cmdMulti, materialsNetwork, copNetwork, sopNodes, copNodes} = options;\n\t\tconst groupShortByMatNodeId: Map<CoreGraphNodeId, string> = new Map();\n\t\tfor (const sopNode of sopNodes) {\n\t\t\tconst group = sopNode.pv.group;\n\t\t\tconst groupShort = group.split(' ')[0];\n\t\t\tconst setNameCmd = new NodeSetNameCommand(this.node, sopNode, `material_${groupShort}`);\n\t\t\tcmdMulti.pushCommand(setNameCmd);\n\n\t\t\tconst matNode = sopNode.pv.material.nodeWithContext(NodeContext.MAT);\n\t\t\tif (matNode) {\n\t\t\t\tconst setNameCmd = new NodeSetNameCommand(materialsNetwork, matNode, `${matNode.type()}_${groupShort}`);\n\t\t\t\tcmdMulti.pushCommand(setNameCmd);\n\t\t\t\tgroupShortByMatNodeId.set(matNode.graphNodeId(), groupShort);\n\t\t\t}\n\t\t}\n\t\tfor (const copNode of copNodes) {\n\t\t\tlet group: string | null = null;\n\n\t\t\tconst referencingNodes: BaseNodeType[] = [];\n\t\t\tcopNode.scene().referencesController.referencingNodes(copNode, referencingNodes);\n\t\t\tfor (const referencingNode of referencingNodes) {\n\t\t\t\tconst groupShort = groupShortByMatNodeId.get(referencingNode.graphNodeId());\n\t\t\t\tif (groupShort) {\n\t\t\t\t\tgroup = group || groupShort;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst nameElements: string[] = [];\n\t\t\tArrayUtils.compact([copNode.type(), copNode.pv.name, group], nameElements);\n\t\t\tconst setNameCmd = new NodeSetNameCommand(copNetwork, copNode, nameElements.join('_'));\n\t\t\tcmdMulti.pushCommand(setNameCmd);\n\t\t}\n\n\t\treturn {};\n\t}\n\tprivate _setComment(options: SetCommentOptions) {\n\t\tconst {cmdMulti, matNodes, sopNodes, copNodes} = options;\n\n\t\tconst totalNodesCount = matNodes.length + sopNodes.length + copNodes.length;\n\n\t\tconst _commentContent = () => {\n\t\t\tif (totalNodesCount == 0) {\n\t\t\t\treturn '0 nodes created';\n\t\t\t}\n\t\t\tconst lines: string[] = [];\n\t\t\tconst nodeLine = (node: BasePrimitiveMatNodeType | MaterialSopNode | FetchCopNode) => {\n\t\t\t\tconst label = node.name();\n\t\t\t\tconst path = CoreWalker.relativePath(this.node, node);\n\t\t\t\treturn `- [${label}](${path})`;\n\t\t\t};\n\t\t\tlines.push(`**${sopNodes.length} SOP NODES**:`);\n\t\t\tfor (let sopNode of sopNodes) {\n\t\t\t\tlines.push(nodeLine(sopNode));\n\t\t\t}\n\t\t\tlines.push(`**${matNodes.length} MAT NODES**:`);\n\t\t\tfor (let matNode of matNodes) {\n\t\t\t\tlines.push(nodeLine(matNode));\n\t\t\t}\n\t\t\tlines.push(`**${copNodes.length} COP NODES**:`);\n\t\t\tfor (let copNode of copNodes) {\n\t\t\t\tlines.push(nodeLine(copNode));\n\t\t\t}\n\n\t\t\treturn lines.join('\\n');\n\t\t};\n\n\t\tconst commentContent = _commentContent();\n\t\tconst parent = this.node.parent();\n\t\tif (parent) {\n\t\t\tconst cmd = new NodeSetCommentCommand(parent, this.node, commentContent);\n\t\t\tcmdMulti.pushCommand(cmd);\n\t\t}\n\t}\n}\n","export { default } from \"-!../../../../../../../../../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../../../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./Decompose.vue?vue&type=script&lang=ts\"; export * from \"-!../../../../../../../../../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../../../../../../../../../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!./Decompose.vue?vue&type=script&lang=ts\"","import { render } from \"./Decompose.vue?vue&type=template&id=9af67708&ts=true\"\nimport script from \"./Decompose.vue?vue&type=script&lang=ts\"\nexport * from \"./Decompose.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"../../../../../../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["materialsNetwork","copNetwork","materialsByUuid","objectPathsByMaterialUuid","materialNodeIndexByUuid","matNodes","sopNodes","texturesByUuid","textureRecordsByUuid","materialsByTextureUuid","copNodes","setNameCmd"],"sourceRoot":""}