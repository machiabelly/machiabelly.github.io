(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_expressions_bbox_ts"],{

/***/ 68002:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ addPerspectiveCameraOBJWithOrbitControls; }
/* harmony export */ });

function addPerspectiveCameraOBJWithOrbitControls(root) {
  const perspectiveCamera1 = root.createNode("perspectiveCamera");
  perspectiveCamera1.p.t.set([5, 5, 5]);
  const events1 = perspectiveCamera1.createNode("eventsNetwork");
  const orbitsControls = events1.createNode("cameraOrbitControls");
  perspectiveCamera1.p.controls.setNode(orbitsControls);
  return { perspectiveCamera1 };
}


/***/ }),

/***/ 7784:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _ExampleUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68002);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const geo = root.createNode("geo");
  const sphere = geo.createNode("sphere");
  const box = geo.createNode("box");
  const torus = geo.createNode("torus");
  const transform1 = geo.createNode("transform");
  const transform2 = geo.createNode("transform");
  const merge1 = geo.createNode("merge");
  const merge2 = geo.createNode("merge");
  transform1.setInput(0, sphere);
  transform2.setInput(0, box);
  merge1.setInput(0, transform1);
  merge1.setInput(1, transform2);
  merge1.setCompactMode(true);
  box.p.center.x.set(3);
  merge2.setInput(0, merge1);
  merge2.setInput(1, torus);
  merge2.flags.display.set(true);
  torus.p.radius.set(`bbox('../${merge1.name()}').max.x`);
  torus.p.radiusTube.set(0.15);
  torus.p.segmentsRadial.set(5);
  torus.p.segmentsTube.set(60);
  torus.p.direction.set([0, 0, 1]);
  torus.uiData.setComment(`The torus's radius is linked to the bounding box of the sphere and the box.

Try and move either the sphere or the box to see how the torus scales up and down.`);
  root.createNode("hemisphereLight");
  const { perspectiveCamera1 } = (0,_ExampleUtils__WEBPACK_IMPORTED_MODULE_0__/* .addPerspectiveCameraOBJWithOrbitControls */ .n)(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [torus],
    autoLayout: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_expressions_bbox_ts.e5d0841b2ce12645c9b2.js.map