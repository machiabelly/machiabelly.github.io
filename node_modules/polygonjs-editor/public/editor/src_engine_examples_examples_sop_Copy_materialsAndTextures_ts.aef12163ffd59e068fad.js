(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Copy_materialsAndTextures_ts"],{

/***/ 83170:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21410);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_COP(geo12) {
      var COP = geo12.createNode("copNetwork");
      COP.setName("COP");
      const COP_nodes = {};
      function create_image0(COP2) {
        var image0 = COP2.createNode("image");
        image0.setName("image0");
        const image0_nodes = {};
        image0.uiData.setPosition(-400, -200);
        image0.params.postCreateSpareParams();
        image0.params.runOnSceneLoadHooks();
        return { node: image0, children: image0_nodes };
      }
      function create_image1(COP2) {
        var image1 = COP2.createNode("image");
        image1.setName("image1");
        const image1_nodes = {};
        image1.uiData.setPosition(-400, -50);
        image1.p.url.set(
          "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/fabric_pattern_07/2k/diffuse.jpg"
        );
        image1.p.tcolorSpace.set(true);
        image1.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);
        image1.p.tminFilter.set(true);
        image1.p.tmagFilter.set(true);
        image1.p.tanisotropy.set(true);
        image1.p.useRendererMaxAnisotropy.set(true);
        image1.params.postCreateSpareParams();
        image1.params.runOnSceneLoadHooks();
        return { node: image1, children: image1_nodes };
      }
      function create_image2(COP2) {
        var image2 = COP2.createNode("image");
        image2.setName("image2");
        const image2_nodes = {};
        image2.uiData.setPosition(-400, 100);
        image2.p.url.set(
          "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/brick_moss_001/2k/diffuse.jpg"
        );
        image2.p.tcolorSpace.set(true);
        image2.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);
        image2.p.tminFilter.set(true);
        image2.p.tmagFilter.set(true);
        image2.p.tanisotropy.set(true);
        image2.p.useRendererMaxAnisotropy.set(true);
        image2.params.postCreateSpareParams();
        image2.params.runOnSceneLoadHooks();
        return { node: image2, children: image2_nodes };
      }
      COP_nodes["image0"] = create_image0(COP);
      COP_nodes["image1"] = create_image1(COP);
      COP_nodes["image2"] = create_image2(COP);
      if (COP.childrenController) {
        COP.childrenController.selection.set([COP_nodes["image2"].node]);
      }
      COP.uiData.setComment("This contains the textures.");
      COP.uiData.setPosition(0, 350);
      COP.params.postCreateSpareParams();
      COP.params.runOnSceneLoadHooks();
      return { node: COP, children: COP_nodes };
    }
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandard0(MAT2) {
        var meshStandard0 = MAT2.createNode("meshStandard");
        meshStandard0.setName("meshStandard0");
        const meshStandard0_nodes = {};
        meshStandard0.uiData.setComment(
          "Each material node here refers to a different texture node. The texture node path could be fully set, but we instead use a simple expression based on [opdigits](https://polygonjs.com/docs/expressions/opdigits) which resolves to the number at the end of the name, and makes copy/pasting nodes faster."
        );
        meshStandard0.uiData.setPosition(-250, 100);
        meshStandard0.p.color.set([0.8666666666666667, 0.615686274509804, 0.615686274509804]);
        meshStandard0.p.useMap.set(true);
        meshStandard0.p.map.set("../../COP/image`opdigits('.')`");
        meshStandard0.params.postCreateSpareParams();
        meshStandard0.params.runOnSceneLoadHooks();
        return { node: meshStandard0, children: meshStandard0_nodes };
      }
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        const meshStandard1_nodes = {};
        meshStandard1.uiData.setPosition(100, 100);
        meshStandard1.p.color.set([0.13333333333333333, 0.6980392156862745, 0.12156862745098039]);
        meshStandard1.p.useMap.set(true);
        meshStandard1.p.map.set("../../COP/image`opdigits('.')`");
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return { node: meshStandard1, children: meshStandard1_nodes };
      }
      function create_meshStandard2(MAT2) {
        var meshStandard2 = MAT2.createNode("meshStandard");
        meshStandard2.setName("meshStandard2");
        const meshStandard2_nodes = {};
        meshStandard2.uiData.setPosition(400, 100);
        meshStandard2.p.useMap.set(true);
        meshStandard2.p.map.set("../../COP/image`opdigits('.')`");
        meshStandard2.params.postCreateSpareParams();
        meshStandard2.params.runOnSceneLoadHooks();
        return { node: meshStandard2, children: meshStandard2_nodes };
      }
      MAT_nodes["meshStandard0"] = create_meshStandard0(MAT);
      MAT_nodes["meshStandard1"] = create_meshStandard1(MAT);
      MAT_nodes["meshStandard2"] = create_meshStandard2(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([MAT_nodes["meshStandard0"].node]);
      }
      MAT.uiData.setComment(
        "This contains the materials that will be loaded by the [../material1](../material1) node."
      );
      MAT.uiData.setPosition(0, 150);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_copy1(geo12) {
      var copy1 = geo12.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setComment(
        "With the copy node, we iterate 3 times on the nodes above.\n\nSince we uses the [copy](https://polygonjs.com/docs/expressions/copy) expression in the material node, it will be recooked on each iteration, and apply a different material on the new sphere every time.\n\nNote that this scene only contains 3 materials and textures, so if you wanted to increase the could param of this node, you would have to create more material and texture nodes. You can do that with the editor, or also using the [api](https://polygonjs.com/api)"
      );
      copy1.uiData.setPosition(250, 500);
      copy1.flags.display.set(true);
      copy1.p.count.set(3);
      copy1.p.t.set([2, 0, 0]);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_material1(geo12) {
      var material1 = geo12.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setComment(
        "the material param uses the [copy](https://polygonjs.com/docs/expressions/copy) expression to resolve to a different material node on each iteration.\n\nThe expression will resolve to the following material nodes:\n\n- [../MAT/meshStandard0](../MAT/meshStandard0)\n- [../MAT/meshStandard1](../MAT/meshStandard1)\n- [../MAT/meshStandard2](../MAT/meshStandard2)\n\n"
      );
      material1.uiData.setPosition(250, 100);
      material1.p.material.set("../MAT/meshStandard`copy('../copy1')*1+0`");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_sphere1(geo12) {
      var sphere1 = geo12.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(250, -150);
      sphere1.p.radius.set(0.96);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    geo1_nodes["COP"] = create_COP(geo1);
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["copy1"] = create_copy1(geo1);
    geo1_nodes["material1"] = create_material1(geo1);
    geo1_nodes["sphere1"] = create_sphere1(geo1);
    geo1_nodes["copy1"].node.setInput(0, geo1_nodes["material1"].node);
    geo1_nodes["material1"].node.setInput(0, geo1_nodes["sphere1"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([]);
    }
    geo1.uiData.setPosition(-50, -150);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([2.0876561966466443, -0.04060340244757113, -0.28273938451754854]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      if (events1.childrenController) {
        events1.childrenController.selection.set([]);
      }
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    if (perspectiveCamera1.childrenController) {
      perspectiveCamera1.childrenController.selection.set([]);
    }
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([1.9444268071639697, 2.1161993609210836, 4.686026521437992]);
    perspectiveCamera1.p.r.set([-23.46097661513556, -1.5307978098028159, -0.6642616748859466]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: Object.values(scene_root_nodes["geo1"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Copy_materialsAndTextures_ts.aef12163ffd59e068fad.js.map