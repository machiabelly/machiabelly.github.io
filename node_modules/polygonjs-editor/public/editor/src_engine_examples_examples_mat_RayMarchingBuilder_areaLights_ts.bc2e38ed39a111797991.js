(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_areaLights_ts"],{

/***/ 25531:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(21410);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        const rayMarchingBuilder1_nodes = {};
        function create_SDFContext1(rayMarchingBuilder12) {
          var SDFContext1 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext1.setName("SDFContext1");
          const SDFContext1_nodes = {};
          SDFContext1.uiData.setPosition(100, 0);
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext1.params.postCreateSpareParams();
          SDFContext1.params.runOnSceneLoadHooks();
          return { node: SDFContext1, children: SDFContext1_nodes };
        }
        function create_SDFFractalMandelbrot1(rayMarchingBuilder12) {
          var SDFFractalMandelbrot1 = rayMarchingBuilder12.createNode("SDFFractalMandelbrot");
          SDFFractalMandelbrot1.setName("SDFFractalMandelbrot1");
          const SDFFractalMandelbrot1_nodes = {};
          SDFFractalMandelbrot1.uiData.setPosition(-650, -150);
          SDFFractalMandelbrot1.params.postCreateSpareParams();
          SDFFractalMandelbrot1.params.runOnSceneLoadHooks();
          return { node: SDFFractalMandelbrot1, children: SDFFractalMandelbrot1_nodes };
        }
        function create_SDFMaterial1(rayMarchingBuilder12) {
          var SDFMaterial1 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial1.setName("SDFMaterial1");
          const SDFMaterial1_nodes = {};
          SDFMaterial1.uiData.setPosition(-100, 200);
          SDFMaterial1.p.useEnvMap.set(true);
          SDFMaterial1.p.envMapRoughness.set(1);
          SDFMaterial1.params.postCreateSpareParams();
          SDFMaterial1.params.runOnSceneLoadHooks();
          return { node: SDFMaterial1, children: SDFMaterial1_nodes };
        }
        function create_constant1(rayMarchingBuilder12) {
          var constant1 = rayMarchingBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-600, 200);
          constant1.p.type.set(4);
          constant1.p.color.set([1, 1, 1]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_fit1(rayMarchingBuilder12) {
          var fit1 = rayMarchingBuilder12.createNode("fit");
          fit1.setName("fit1");
          const fit1_nodes = {};
          fit1.uiData.setPosition(-1400, -750);
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit1.params.postCreateSpareParams();
          fit1.params.runOnSceneLoadHooks();
          return { node: fit1, children: fit1_nodes };
        }
        function create_fit2(rayMarchingBuilder12) {
          var fit2 = rayMarchingBuilder12.createNode("fit");
          fit2.setName("fit2");
          const fit2_nodes = {};
          fit2.uiData.setPosition(-1450, -550);
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit2.params.postCreateSpareParams();
          fit2.params.runOnSceneLoadHooks();
          return { node: fit2, children: fit2_nodes };
        }
        function create_fit3(rayMarchingBuilder12) {
          var fit3 = rayMarchingBuilder12.createNode("fit");
          fit3.setName("fit3");
          const fit3_nodes = {};
          fit3.uiData.setPosition(-1450, -400);
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit3.params.postCreateSpareParams();
          fit3.params.runOnSceneLoadHooks();
          return { node: fit3, children: fit3_nodes };
        }
        function create_fit4(rayMarchingBuilder12) {
          var fit4 = rayMarchingBuilder12.createNode("fit");
          fit4.setName("fit4");
          const fit4_nodes = {};
          fit4.uiData.setPosition(-1450, -250);
          fit4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit4.params.postCreateSpareParams();
          fit4.params.runOnSceneLoadHooks();
          return { node: fit4, children: fit4_nodes };
        }
        function create_fit5(rayMarchingBuilder12) {
          var fit5 = rayMarchingBuilder12.createNode("fit");
          fit5.setName("fit5");
          const fit5_nodes = {};
          fit5.uiData.setPosition(-1450, -100);
          fit5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit5.params.postCreateSpareParams();
          fit5.params.runOnSceneLoadHooks();
          return { node: fit5, children: fit5_nodes };
        }
        function create_fit6(rayMarchingBuilder12) {
          var fit6 = rayMarchingBuilder12.createNode("fit");
          fit6.setName("fit6");
          const fit6_nodes = {};
          fit6.uiData.setPosition(-1450, 50);
          fit6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit6.params.postCreateSpareParams();
          fit6.params.runOnSceneLoadHooks();
          return { node: fit6, children: fit6_nodes };
        }
        function create_fit7(rayMarchingBuilder12) {
          var fit7 = rayMarchingBuilder12.createNode("fit");
          fit7.setName("fit7");
          const fit7_nodes = {};
          fit7.uiData.setPosition(-1450, 200);
          fit7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit7.params.postCreateSpareParams();
          fit7.params.runOnSceneLoadHooks();
          return { node: fit7, children: fit7_nodes };
        }
        function create_fit8(rayMarchingBuilder12) {
          var fit8 = rayMarchingBuilder12.createNode("fit");
          fit8.setName("fit8");
          const fit8_nodes = {};
          fit8.uiData.setPosition(-1450, 350);
          fit8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit8.params.postCreateSpareParams();
          fit8.params.runOnSceneLoadHooks();
          return { node: fit8, children: fit8_nodes };
        }
        function create_fitFrom01ToVariance1(rayMarchingBuilder12) {
          var fitFrom01ToVariance1 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance1.setName("fitFrom01ToVariance1");
          const fitFrom01ToVariance1_nodes = {};
          fitFrom01ToVariance1.uiData.setPosition(-1350, -550);
          fitFrom01ToVariance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance1.params.get("center").set(1);
          fitFrom01ToVariance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance1.params.get("variance").set(0.06);
          fitFrom01ToVariance1.params.postCreateSpareParams();
          fitFrom01ToVariance1.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance1, children: fitFrom01ToVariance1_nodes };
        }
        function create_fitFrom01ToVariance2(rayMarchingBuilder12) {
          var fitFrom01ToVariance2 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance2.setName("fitFrom01ToVariance2");
          const fitFrom01ToVariance2_nodes = {};
          fitFrom01ToVariance2.uiData.setPosition(-1350, -400);
          fitFrom01ToVariance2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance2.params.get("center").set(1);
          fitFrom01ToVariance2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance2.params.get("variance").set(0.09);
          fitFrom01ToVariance2.params.postCreateSpareParams();
          fitFrom01ToVariance2.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance2, children: fitFrom01ToVariance2_nodes };
        }
        function create_fitFrom01ToVariance3(rayMarchingBuilder12) {
          var fitFrom01ToVariance3 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance3.setName("fitFrom01ToVariance3");
          const fitFrom01ToVariance3_nodes = {};
          fitFrom01ToVariance3.uiData.setPosition(-1350, -250);
          fitFrom01ToVariance3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance3.params.get("center").set(0.99);
          fitFrom01ToVariance3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance3.params.get("variance").set(-2e-3);
          fitFrom01ToVariance3.params.postCreateSpareParams();
          fitFrom01ToVariance3.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance3, children: fitFrom01ToVariance3_nodes };
        }
        function create_fitFrom01ToVariance4(rayMarchingBuilder12) {
          var fitFrom01ToVariance4 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance4.setName("fitFrom01ToVariance4");
          const fitFrom01ToVariance4_nodes = {};
          fitFrom01ToVariance4.uiData.setPosition(-1300, -750);
          fitFrom01ToVariance4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance4.params.get("center").set(7.4);
          fitFrom01ToVariance4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance4.params.get("variance").set(0.08);
          fitFrom01ToVariance4.params.postCreateSpareParams();
          fitFrom01ToVariance4.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance4, children: fitFrom01ToVariance4_nodes };
        }
        function create_fitFrom01ToVariance5(rayMarchingBuilder12) {
          var fitFrom01ToVariance5 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance5.setName("fitFrom01ToVariance5");
          const fitFrom01ToVariance5_nodes = {};
          fitFrom01ToVariance5.uiData.setPosition(-1350, -100);
          fitFrom01ToVariance5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance5.params.get("center").set(1);
          fitFrom01ToVariance5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance5.params.get("variance").set(0.06);
          fitFrom01ToVariance5.params.postCreateSpareParams();
          fitFrom01ToVariance5.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance5, children: fitFrom01ToVariance5_nodes };
        }
        function create_fitFrom01ToVariance6(rayMarchingBuilder12) {
          var fitFrom01ToVariance6 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance6.setName("fitFrom01ToVariance6");
          const fitFrom01ToVariance6_nodes = {};
          fitFrom01ToVariance6.uiData.setPosition(-1350, 50);
          fitFrom01ToVariance6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance6.params.get("center").set(1);
          fitFrom01ToVariance6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance6.params.get("variance").set(0.09);
          fitFrom01ToVariance6.params.postCreateSpareParams();
          fitFrom01ToVariance6.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance6, children: fitFrom01ToVariance6_nodes };
        }
        function create_fitFrom01ToVariance7(rayMarchingBuilder12) {
          var fitFrom01ToVariance7 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance7.setName("fitFrom01ToVariance7");
          const fitFrom01ToVariance7_nodes = {};
          fitFrom01ToVariance7.uiData.setPosition(-1350, 200);
          fitFrom01ToVariance7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance7.params.get("center").set(0.99);
          fitFrom01ToVariance7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance7.params.get("variance").set(-2e-3);
          fitFrom01ToVariance7.params.postCreateSpareParams();
          fitFrom01ToVariance7.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance7, children: fitFrom01ToVariance7_nodes };
        }
        function create_fitFrom01ToVariance8(rayMarchingBuilder12) {
          var fitFrom01ToVariance8 = rayMarchingBuilder12.createNode("fitFrom01ToVariance");
          fitFrom01ToVariance8.setName("fitFrom01ToVariance8");
          const fitFrom01ToVariance8_nodes = {};
          fitFrom01ToVariance8.uiData.setPosition(-1350, 350);
          fitFrom01ToVariance8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01ToVariance8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance8.params.get("center").set(1);
          fitFrom01ToVariance8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
          fitFrom01ToVariance8.params.get("variance").set(0.02);
          fitFrom01ToVariance8.params.postCreateSpareParams();
          fitFrom01ToVariance8.params.runOnSceneLoadHooks();
          return { node: fitFrom01ToVariance8, children: fitFrom01ToVariance8_nodes };
        }
        function create_floatToVec3_1(rayMarchingBuilder12) {
          var floatToVec3_1 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(-1150, -500);
          floatToVec3_1.p.y.set(1);
          floatToVec3_1.p.z.set(1);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_floatToVec3_2(rayMarchingBuilder12) {
          var floatToVec3_2 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(-1150, -50);
          floatToVec3_2.p.y.set(1);
          floatToVec3_2.p.z.set(1);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_globals1(rayMarchingBuilder12) {
          var globals1 = rayMarchingBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1850, -750);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_multAdd1(rayMarchingBuilder12) {
          var multAdd1 = rayMarchingBuilder12.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-1600, -750);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_multAdd2(rayMarchingBuilder12) {
          var multAdd2 = rayMarchingBuilder12.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(-1650, -550);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd2.params.get("postAdd").set(55.021);
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_multAdd3(rayMarchingBuilder12) {
          var multAdd3 = rayMarchingBuilder12.createNode("multAdd");
          multAdd3.setName("multAdd3");
          const multAdd3_nodes = {};
          multAdd3.uiData.setPosition(-1650, -400);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd3.params.get("postAdd").set(-14.888999999999996);
          multAdd3.params.postCreateSpareParams();
          multAdd3.params.runOnSceneLoadHooks();
          return { node: multAdd3, children: multAdd3_nodes };
        }
        function create_multAdd4(rayMarchingBuilder12) {
          var multAdd4 = rayMarchingBuilder12.createNode("multAdd");
          multAdd4.setName("multAdd4");
          const multAdd4_nodes = {};
          multAdd4.uiData.setPosition(-1650, -250);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd4.params.get("mult").set(1.5);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd4.params.get("postAdd").set(-24.888999999999996);
          multAdd4.params.postCreateSpareParams();
          multAdd4.params.runOnSceneLoadHooks();
          return { node: multAdd4, children: multAdd4_nodes };
        }
        function create_multAdd5(rayMarchingBuilder12) {
          var multAdd5 = rayMarchingBuilder12.createNode("multAdd");
          multAdd5.setName("multAdd5");
          const multAdd5_nodes = {};
          multAdd5.uiData.setPosition(-1650, -100);
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd5.params.get("postAdd").set(55.021);
          multAdd5.params.postCreateSpareParams();
          multAdd5.params.runOnSceneLoadHooks();
          return { node: multAdd5, children: multAdd5_nodes };
        }
        function create_multAdd6(rayMarchingBuilder12) {
          var multAdd6 = rayMarchingBuilder12.createNode("multAdd");
          multAdd6.setName("multAdd6");
          const multAdd6_nodes = {};
          multAdd6.uiData.setPosition(-1650, 50);
          multAdd6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd6.params.get("postAdd").set(-14.888999999999996);
          multAdd6.params.postCreateSpareParams();
          multAdd6.params.runOnSceneLoadHooks();
          return { node: multAdd6, children: multAdd6_nodes };
        }
        function create_multAdd7(rayMarchingBuilder12) {
          var multAdd7 = rayMarchingBuilder12.createNode("multAdd");
          multAdd7.setName("multAdd7");
          const multAdd7_nodes = {};
          multAdd7.uiData.setPosition(-1650, 200);
          multAdd7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd7.params.get("mult").set(1.5);
          multAdd7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd7.params.get("postAdd").set(-24.888999999999996);
          multAdd7.params.postCreateSpareParams();
          multAdd7.params.runOnSceneLoadHooks();
          return { node: multAdd7, children: multAdd7_nodes };
        }
        function create_multAdd8(rayMarchingBuilder12) {
          var multAdd8 = rayMarchingBuilder12.createNode("multAdd");
          multAdd8.setName("multAdd8");
          const multAdd8_nodes = {};
          multAdd8.uiData.setPosition(-1650, 350);
          multAdd8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd8.params.get("postAdd").set(10.094);
          multAdd8.params.postCreateSpareParams();
          multAdd8.params.runOnSceneLoadHooks();
          return { node: multAdd8, children: multAdd8_nodes };
        }
        function create_multScalar1(rayMarchingBuilder12) {
          var multScalar1 = rayMarchingBuilder12.createNode("multScalar");
          multScalar1.setName("multScalar1");
          const multScalar1_nodes = {};
          multScalar1.uiData.setPosition(-300, 200);
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: false });
          multScalar1.params.postCreateSpareParams();
          multScalar1.params.runOnSceneLoadHooks();
          return { node: multScalar1, children: multScalar1_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(300, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_pow1(rayMarchingBuilder12) {
          var pow1 = rayMarchingBuilder12.createNode("pow");
          pow1.setName("pow1");
          const pow1_nodes = {};
          pow1.uiData.setPosition(-400, 300);
          pow1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "x", 0, { spare: true, editable: false });
          pow1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "y", 0, { spare: true, editable: true });
          pow1.params.get("y").set(7);
          pow1.params.postCreateSpareParams();
          pow1.params.runOnSceneLoadHooks();
          return { node: pow1, children: pow1_nodes };
        }
        function create_sin1(rayMarchingBuilder12) {
          var sin1 = rayMarchingBuilder12.createNode("sin");
          sin1.setName("sin1");
          const sin1_nodes = {};
          sin1.uiData.setPosition(-1500, -750);
          sin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin1.params.postCreateSpareParams();
          sin1.params.runOnSceneLoadHooks();
          return { node: sin1, children: sin1_nodes };
        }
        function create_sin2(rayMarchingBuilder12) {
          var sin2 = rayMarchingBuilder12.createNode("sin");
          sin2.setName("sin2");
          const sin2_nodes = {};
          sin2.uiData.setPosition(-1550, -550);
          sin2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin2.params.postCreateSpareParams();
          sin2.params.runOnSceneLoadHooks();
          return { node: sin2, children: sin2_nodes };
        }
        function create_sin3(rayMarchingBuilder12) {
          var sin3 = rayMarchingBuilder12.createNode("sin");
          sin3.setName("sin3");
          const sin3_nodes = {};
          sin3.uiData.setPosition(-1550, -400);
          sin3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin3.params.postCreateSpareParams();
          sin3.params.runOnSceneLoadHooks();
          return { node: sin3, children: sin3_nodes };
        }
        function create_sin4(rayMarchingBuilder12) {
          var sin4 = rayMarchingBuilder12.createNode("sin");
          sin4.setName("sin4");
          const sin4_nodes = {};
          sin4.uiData.setPosition(-1550, -250);
          sin4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin4.params.postCreateSpareParams();
          sin4.params.runOnSceneLoadHooks();
          return { node: sin4, children: sin4_nodes };
        }
        function create_sin5(rayMarchingBuilder12) {
          var sin5 = rayMarchingBuilder12.createNode("sin");
          sin5.setName("sin5");
          const sin5_nodes = {};
          sin5.uiData.setPosition(-1550, -100);
          sin5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin5.params.postCreateSpareParams();
          sin5.params.runOnSceneLoadHooks();
          return { node: sin5, children: sin5_nodes };
        }
        function create_sin6(rayMarchingBuilder12) {
          var sin6 = rayMarchingBuilder12.createNode("sin");
          sin6.setName("sin6");
          const sin6_nodes = {};
          sin6.uiData.setPosition(-1550, 50);
          sin6.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin6.params.postCreateSpareParams();
          sin6.params.runOnSceneLoadHooks();
          return { node: sin6, children: sin6_nodes };
        }
        function create_sin7(rayMarchingBuilder12) {
          var sin7 = rayMarchingBuilder12.createNode("sin");
          sin7.setName("sin7");
          const sin7_nodes = {};
          sin7.uiData.setPosition(-1550, 200);
          sin7.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin7.params.postCreateSpareParams();
          sin7.params.runOnSceneLoadHooks();
          return { node: sin7, children: sin7_nodes };
        }
        function create_sin8(rayMarchingBuilder12) {
          var sin8 = rayMarchingBuilder12.createNode("sin");
          sin8.setName("sin8");
          const sin8_nodes = {};
          sin8.uiData.setPosition(-1550, 350);
          sin8.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin8.params.postCreateSpareParams();
          sin8.params.runOnSceneLoadHooks();
          return { node: sin8, children: sin8_nodes };
        }
        rayMarchingBuilder1_nodes["SDFContext1"] = create_SDFContext1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFFractalMandelbrot1"] = create_SDFFractalMandelbrot1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial1"] = create_SDFMaterial1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant1"] = create_constant1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit1"] = create_fit1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit2"] = create_fit2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit3"] = create_fit3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit4"] = create_fit4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit5"] = create_fit5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit6"] = create_fit6(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit7"] = create_fit7(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit8"] = create_fit8(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance1"] = create_fitFrom01ToVariance1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance2"] = create_fitFrom01ToVariance2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance3"] = create_fitFrom01ToVariance3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance4"] = create_fitFrom01ToVariance4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance5"] = create_fitFrom01ToVariance5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance6"] = create_fitFrom01ToVariance6(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance7"] = create_fitFrom01ToVariance7(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fitFrom01ToVariance8"] = create_fitFrom01ToVariance8(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_1"] = create_floatToVec3_1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_2"] = create_floatToVec3_2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals1"] = create_globals1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd1"] = create_multAdd1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd2"] = create_multAdd2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd3"] = create_multAdd3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd4"] = create_multAdd4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd5"] = create_multAdd5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd6"] = create_multAdd6(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd7"] = create_multAdd7(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd8"] = create_multAdd8(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multScalar1"] = create_multScalar1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["pow1"] = create_pow1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin1"] = create_sin1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin2"] = create_sin2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin3"] = create_sin3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin4"] = create_sin4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin5"] = create_sin5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin6"] = create_sin6(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin7"] = create_sin7(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin8"] = create_sin8(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFFractalMandelbrot1"].node,
          "d"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial1"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFFractalMandelbrot1"].node.setInput(
          "power",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance4"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFFractalMandelbrot1"].node.setInput(
          "QPreMult",
          rayMarchingBuilder1_nodes["floatToVec3_1"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFFractalMandelbrot1"].node.setInput(
          "QPostMult",
          rayMarchingBuilder1_nodes["floatToVec3_2"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFFractalMandelbrot1"].node.setInput(
          "thetaMult",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance8"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["multScalar1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fit1"].node.setInput("val", rayMarchingBuilder1_nodes["sin1"].node, "val");
        rayMarchingBuilder1_nodes["fit2"].node.setInput("val", rayMarchingBuilder1_nodes["sin2"].node, "val");
        rayMarchingBuilder1_nodes["fit3"].node.setInput("val", rayMarchingBuilder1_nodes["sin3"].node, "val");
        rayMarchingBuilder1_nodes["fit4"].node.setInput("val", rayMarchingBuilder1_nodes["sin4"].node, "val");
        rayMarchingBuilder1_nodes["fit5"].node.setInput("val", rayMarchingBuilder1_nodes["sin5"].node, "val");
        rayMarchingBuilder1_nodes["fit6"].node.setInput("val", rayMarchingBuilder1_nodes["sin6"].node, "val");
        rayMarchingBuilder1_nodes["fit7"].node.setInput("val", rayMarchingBuilder1_nodes["sin7"].node, "val");
        rayMarchingBuilder1_nodes["fit8"].node.setInput("val", rayMarchingBuilder1_nodes["sin8"].node, "val");
        rayMarchingBuilder1_nodes["fitFrom01ToVariance1"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fitFrom01ToVariance2"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fitFrom01ToVariance3"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit4"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fitFrom01ToVariance4"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fitFrom01ToVariance5"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit5"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fitFrom01ToVariance6"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit6"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fitFrom01ToVariance7"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit7"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fitFrom01ToVariance8"].node.setInput(
          "val",
          rayMarchingBuilder1_nodes["fit8"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_1"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_1"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_1"].node.setInput(
          "z",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_2"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance5"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_2"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance6"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_2"].node.setInput(
          "z",
          rayMarchingBuilder1_nodes["fitFrom01ToVariance7"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["multAdd1"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd2"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd3"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd4"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd5"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd6"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd7"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd8"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multScalar1"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["constant1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["multScalar1"].node.setInput(
          "mult",
          rayMarchingBuilder1_nodes["pow1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFContext1"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["pow1"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["SDFFractalMandelbrot1"].node,
          "ao"
        );
        rayMarchingBuilder1_nodes["sin1"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin2"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin3"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin4"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd4"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin5"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd5"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin6"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd6"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin7"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd7"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin8"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd8"].node,
          "val"
        );
        if (rayMarchingBuilder1.childrenController) {
          rayMarchingBuilder1.childrenController.selection.set([]);
        }
        rayMarchingBuilder1.uiData.setPosition(50, 0);
        rayMarchingBuilder1.p.envMap.set("../../../COP/envMap");
        rayMarchingBuilder1.p.front.set(true);
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-400, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_box1(geo12) {
      var box1 = geo12.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(-200, 0);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_material1(geo12) {
      var material1 = geo12.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(-200, 300);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_transform1(geo12) {
      var transform1 = geo12.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-200, 150);
      transform1.p.scale.set(2.5);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["box1"] = create_box1(geo1);
    geo1_nodes["material1"] = create_material1(geo1);
    geo1_nodes["transform1"] = create_transform1(geo1);
    geo1_nodes["material1"].node.setInput(0, geo1_nodes["transform1"].node);
    geo1_nodes["transform1"].node.setInput(0, geo1_nodes["box1"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([]);
    }
    geo1.uiData.setPosition(-50, -150);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.13473547055071344, -0.18397023111515115, -0.1556746015341759]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      if (events1.childrenController) {
        events1.childrenController.selection.set([]);
      }
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    if (perspectiveCamera1.childrenController) {
      perspectiveCamera1.childrenController.selection.set([]);
    }
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([0.3467585229486185, 0.2413209062926029, 3.5775272756444116]);
    perspectiveCamera1.p.r.set([-6.505348990850759, 7.31028504670111, 0.8312749645204345]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_cubeMap1(COP2) {
      var cubeMap1 = COP2.createNode("cubeMap");
      cubeMap1.setName("cubeMap1");
      const cubeMap1_nodes = {};
      cubeMap1.uiData.setPosition(-200, 400);
      cubeMap1.p.prefix.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/cube/Bridge2/"
      );
      cubeMap1.p.suffix.set(".jpg");
      cubeMap1.p.px.set("`ch('prefix')`posx`ch('suffix')`");
      cubeMap1.p.nx.set("`ch('prefix')`negx`ch('suffix')`");
      cubeMap1.p.py.set("`ch('prefix')`posy`ch('suffix')`");
      cubeMap1.p.ny.set("`ch('prefix')`negy`ch('suffix')`");
      cubeMap1.p.pz.set("`ch('prefix')`posz`ch('suffix')`");
      cubeMap1.p.nz.set("`ch('prefix')`negz`ch('suffix')`");
      cubeMap1.p.tcolorSpace.set(true);
      cubeMap1.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_1__.SRGBColorSpace);
      cubeMap1.params.postCreateSpareParams();
      cubeMap1.params.runOnSceneLoadHooks();
      return { node: cubeMap1, children: cubeMap1_nodes };
    }
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["cubeMap1"] = create_cubeMap1(COP);
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([COP_nodes["cubeMap1"].node]);
    }
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_areaLight1(lights2) {
      var areaLight1 = lights2.createNode("areaLight");
      areaLight1.setName("areaLight1");
      const areaLight1_nodes = {};
      areaLight1.uiData.setPosition(150, 100);
      areaLight1.p.intensity.set(1.78);
      areaLight1.p.width.set(5.5);
      areaLight1.p.height.set(0.1);
      areaLight1.p.showHelper.set(true);
      areaLight1.params.postCreateSpareParams();
      areaLight1.params.runOnSceneLoadHooks();
      return { node: areaLight1, children: areaLight1_nodes };
    }
    function create_areaLight2(lights2) {
      var areaLight2 = lights2.createNode("areaLight");
      areaLight2.setName("areaLight2");
      const areaLight2_nodes = {};
      areaLight2.uiData.setPosition(450, 100);
      areaLight2.p.color.set([0.8468732315065057, 0.0021246888847058823, 0.0021246888847058823]);
      areaLight2.p.intensity.set(3.5);
      areaLight2.p.width.set(2.9);
      areaLight2.p.showHelper.set(true);
      areaLight2.params.postCreateSpareParams();
      areaLight2.params.runOnSceneLoadHooks();
      return { node: areaLight2, children: areaLight2_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(300, 650);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform3(lights2) {
      var polarTransform3 = lights2.createNode("polarTransform");
      polarTransform3.setName("polarTransform3");
      const polarTransform3_nodes = {};
      polarTransform3.uiData.setPosition(150, 400);
      polarTransform3.p.longitude.set(100.8);
      polarTransform3.p.latitude.set(136.8);
      polarTransform3.p.depth.set(1.2);
      polarTransform3.params.postCreateSpareParams();
      polarTransform3.params.runOnSceneLoadHooks();
      return { node: polarTransform3, children: polarTransform3_nodes };
    }
    function create_polarTransform4(lights2) {
      var polarTransform4 = lights2.createNode("polarTransform");
      polarTransform4.setName("polarTransform4");
      const polarTransform4_nodes = {};
      polarTransform4.uiData.setComment(
        "change the `latitude` parameter of this node to see how it affects the mandelbrot"
      );
      polarTransform4.uiData.setPosition(450, 400);
      polarTransform4.p.longitude.set(-93.6);
      polarTransform4.p.latitude.set(-79.2);
      polarTransform4.p.depth.set(1.3);
      polarTransform4.params.postCreateSpareParams();
      polarTransform4.params.runOnSceneLoadHooks();
      return { node: polarTransform4, children: polarTransform4_nodes };
    }
    lights_nodes["areaLight1"] = create_areaLight1(lights);
    lights_nodes["areaLight2"] = create_areaLight2(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform3"] = create_polarTransform3(lights);
    lights_nodes["polarTransform4"] = create_polarTransform4(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["polarTransform3"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform4"].node);
    lights_nodes["polarTransform3"].node.setInput(0, lights_nodes["areaLight1"].node);
    lights_nodes["polarTransform4"].node.setInput(0, lights_nodes["areaLight2"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([lights_nodes["polarTransform4"].node]);
    }
    lights.uiData.setPosition(-50, -50);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_bg_plane(parentNode) {
    var bg_plane = parentNode.createNode("geo");
    bg_plane.setName("bg_plane");
    const bg_plane_nodes = {};
    function create_MAT(bg_plane2) {
      var MAT = bg_plane2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshBasicBuilder1(MAT2) {
        var meshBasicBuilder1 = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder1.setName("meshBasicBuilder1");
        const meshBasicBuilder1_nodes = {};
        function create_SDFSphere1(meshBasicBuilder12) {
          var SDFSphere1 = meshBasicBuilder12.createNode("SDFSphere");
          SDFSphere1.setName("SDFSphere1");
          const SDFSphere1_nodes = {};
          SDFSphere1.uiData.setPosition(-250, 200);
          SDFSphere1.p.radius.set(0);
          SDFSphere1.params.postCreateSpareParams();
          SDFSphere1.params.runOnSceneLoadHooks();
          return { node: SDFSphere1, children: SDFSphere1_nodes };
        }
        function create_constant1(meshBasicBuilder12) {
          var constant1 = meshBasicBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-200, -200);
          constant1.p.type.set(4);
          constant1.p.color.set([0.32941176470588235, 0.18823529411764706, 0.18823529411764706]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(meshBasicBuilder12) {
          var constant2 = meshBasicBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-200, 0);
          constant2.p.type.set(4);
          constant2.p.color.set([0.17254901960784313, 0.027450980392156862, 0.027450980392156862]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_globals2(meshBasicBuilder12) {
          var globals2 = meshBasicBuilder12.createNode("globals");
          globals2.setName("globals2");
          const globals2_nodes = {};
          globals2.uiData.setPosition(-450, 200);
          globals2.params.postCreateSpareParams();
          globals2.params.runOnSceneLoadHooks();
          return { node: globals2, children: globals2_nodes };
        }
        function create_mix1(meshBasicBuilder12) {
          var mix1 = meshBasicBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(50, 0);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.get("blend").set(0.79);
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(meshBasicBuilder12) {
          var output1 = meshBasicBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_smoothstep1(meshBasicBuilder12) {
          var smoothstep1 = meshBasicBuilder12.createNode("smoothstep");
          smoothstep1.setName("smoothstep1");
          const smoothstep1_nodes = {};
          smoothstep1.uiData.setPosition(-50, 200);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "edge0", 0, { spare: true, editable: true });
          smoothstep1.params.get("edge0").set(0.047);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "edge1", 1, { spare: true, editable: true });
          smoothstep1.params.get("edge1").set(0.05);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "x", 0, { spare: true, editable: false });
          smoothstep1.params.postCreateSpareParams();
          smoothstep1.params.runOnSceneLoadHooks();
          return { node: smoothstep1, children: smoothstep1_nodes };
        }
        meshBasicBuilder1_nodes["SDFSphere1"] = create_SDFSphere1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["constant1"] = create_constant1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["constant2"] = create_constant2(meshBasicBuilder1);
        meshBasicBuilder1_nodes["globals2"] = create_globals2(meshBasicBuilder1);
        meshBasicBuilder1_nodes["mix1"] = create_mix1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["output1"] = create_output1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["smoothstep1"] = create_smoothstep1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["SDFSphere1"].node.setInput(
          "position",
          meshBasicBuilder1_nodes["globals2"].node,
          "position"
        );
        meshBasicBuilder1_nodes["mix1"].node.setInput(
          "value0",
          meshBasicBuilder1_nodes["constant1"].node,
          "val"
        );
        meshBasicBuilder1_nodes["mix1"].node.setInput(
          "value1",
          meshBasicBuilder1_nodes["constant2"].node,
          "val"
        );
        meshBasicBuilder1_nodes["mix1"].node.setInput(
          "blend",
          meshBasicBuilder1_nodes["smoothstep1"].node,
          "val"
        );
        meshBasicBuilder1_nodes["output1"].node.setInput("color", meshBasicBuilder1_nodes["mix1"].node, "mix");
        meshBasicBuilder1_nodes["smoothstep1"].node.setInput(
          "x",
          meshBasicBuilder1_nodes["SDFSphere1"].node,
          "float"
        );
        if (meshBasicBuilder1.childrenController) {
          meshBasicBuilder1.childrenController.selection.set([]);
        }
        meshBasicBuilder1.uiData.setPosition(0, 250);
        meshBasicBuilder1.params.postCreateSpareParams();
        meshBasicBuilder1.params.runOnSceneLoadHooks();
        return { node: meshBasicBuilder1, children: meshBasicBuilder1_nodes };
      }
      function create_meshStandardBuilder1(MAT2) {
        var meshStandardBuilder1 = MAT2.createNode("meshStandardBuilder");
        meshStandardBuilder1.setName("meshStandardBuilder1");
        const meshStandardBuilder1_nodes = {};
        function create_SDFSphere1(meshStandardBuilder12) {
          var SDFSphere1 = meshStandardBuilder12.createNode("SDFSphere");
          SDFSphere1.setName("SDFSphere1");
          const SDFSphere1_nodes = {};
          SDFSphere1.uiData.setPosition(-350, 250);
          SDFSphere1.p.radius.set(0);
          SDFSphere1.params.postCreateSpareParams();
          SDFSphere1.params.runOnSceneLoadHooks();
          return { node: SDFSphere1, children: SDFSphere1_nodes };
        }
        function create_constant1(meshStandardBuilder12) {
          var constant1 = meshStandardBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-300, -150);
          constant1.p.type.set(4);
          constant1.p.color.set([0.32941176470588235, 0.18823529411764706, 0.18823529411764706]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(meshStandardBuilder12) {
          var constant2 = meshStandardBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-300, 50);
          constant2.p.type.set(4);
          constant2.p.color.set([0.17254901960784313, 0.027450980392156862, 0.027450980392156862]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_globals2(meshStandardBuilder12) {
          var globals2 = meshStandardBuilder12.createNode("globals");
          globals2.setName("globals2");
          const globals2_nodes = {};
          globals2.uiData.setPosition(-550, 250);
          globals2.params.postCreateSpareParams();
          globals2.params.runOnSceneLoadHooks();
          return { node: globals2, children: globals2_nodes };
        }
        function create_mix1(meshStandardBuilder12) {
          var mix1 = meshStandardBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(-50, 50);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.get("blend").set(0.79);
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(meshStandardBuilder12) {
          var output1 = meshStandardBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(300, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_smoothstep1(meshStandardBuilder12) {
          var smoothstep1 = meshStandardBuilder12.createNode("smoothstep");
          smoothstep1.setName("smoothstep1");
          const smoothstep1_nodes = {};
          smoothstep1.uiData.setPosition(-150, 250);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "edge0", 0, { spare: true, editable: true });
          smoothstep1.params.get("edge0").set(0.047);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "edge1", 1, { spare: true, editable: true });
          smoothstep1.params.get("edge1").set(0.05);
          smoothstep1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "x", 0, { spare: true, editable: false });
          smoothstep1.params.postCreateSpareParams();
          smoothstep1.params.runOnSceneLoadHooks();
          return { node: smoothstep1, children: smoothstep1_nodes };
        }
        meshStandardBuilder1_nodes["SDFSphere1"] = create_SDFSphere1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant1"] = create_constant1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant2"] = create_constant2(meshStandardBuilder1);
        meshStandardBuilder1_nodes["globals2"] = create_globals2(meshStandardBuilder1);
        meshStandardBuilder1_nodes["mix1"] = create_mix1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["output1"] = create_output1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["smoothstep1"] = create_smoothstep1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["SDFSphere1"].node.setInput(
          "position",
          meshStandardBuilder1_nodes["globals2"].node,
          "position"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value0",
          meshStandardBuilder1_nodes["constant1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value1",
          meshStandardBuilder1_nodes["constant2"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "blend",
          meshStandardBuilder1_nodes["smoothstep1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["output1"].node.setInput(
          "color",
          meshStandardBuilder1_nodes["mix1"].node,
          "mix"
        );
        meshStandardBuilder1_nodes["smoothstep1"].node.setInput(
          "x",
          meshStandardBuilder1_nodes["SDFSphere1"].node,
          "float"
        );
        if (meshStandardBuilder1.childrenController) {
          meshStandardBuilder1.childrenController.selection.set([]);
        }
        meshStandardBuilder1.uiData.setPosition(0, 50);
        meshStandardBuilder1.params.postCreateSpareParams();
        meshStandardBuilder1.params.runOnSceneLoadHooks();
        return { node: meshStandardBuilder1, children: meshStandardBuilder1_nodes };
      }
      MAT_nodes["meshBasicBuilder1"] = create_meshBasicBuilder1(MAT);
      MAT_nodes["meshStandardBuilder1"] = create_meshStandardBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-200, 200);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(bg_plane2) {
      var material1 = bg_plane2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 250);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshStandardBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_plane1(bg_plane2) {
      var plane1 = bg_plane2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(0, -50);
      plane1.p.direction.set([0, 0, 1]);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    function create_transform1(bg_plane2) {
      var transform1 = bg_plane2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(0, 100);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([0, 0, -2.8365996807611484]);
      transform1.p.scale.set(41);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    bg_plane_nodes["MAT"] = create_MAT(bg_plane);
    bg_plane_nodes["material1"] = create_material1(bg_plane);
    bg_plane_nodes["plane1"] = create_plane1(bg_plane);
    bg_plane_nodes["transform1"] = create_transform1(bg_plane);
    bg_plane_nodes["material1"].node.setInput(0, bg_plane_nodes["transform1"].node);
    bg_plane_nodes["transform1"].node.setInput(0, bg_plane_nodes["plane1"].node);
    if (bg_plane.childrenController) {
      bg_plane.childrenController.selection.set([]);
    }
    bg_plane.uiData.setPosition(100, -150);
    bg_plane.flags.display.set(true);
    bg_plane.params.postCreateSpareParams();
    bg_plane.params.runOnSceneLoadHooks();
    return { node: bg_plane, children: bg_plane_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["bg_plane"] = create_bg_plane(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: [scene_root_nodes["lights"].children["polarTransform4"].node],
    //scene_root_nodes['raymarchedObject'].children['MAT'].children['rayMarchingBuilder1'].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_areaLights_ts.bc2e38ed39a111797991.js.map