(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_CSS2DObject_clickable_ts"],{

/***/ 26862:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    if (grid.childrenController) {
      grid.childrenController.selection.set([]);
    }
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.07687837889469372, 1.0031731614601525, -0.10305037613342292]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      if (events1.childrenController) {
        events1.childrenController.selection.set([]);
      }
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    function create_renderersNetwork1(perspectiveCamera12) {
      var renderersNetwork1 = perspectiveCamera12.createNode("renderersNetwork");
      renderersNetwork1.setName("renderersNetwork1");
      const renderersNetwork1_nodes = {};
      function create_CSS2DRenderer1(renderersNetwork12) {
        var CSS2DRenderer1 = renderersNetwork12.createNode("CSS2DRenderer");
        CSS2DRenderer1.setName("CSS2DRenderer1");
        const CSS2DRenderer1_nodes = {};
        CSS2DRenderer1.uiData.setPosition(-100, 50);
        CSS2DRenderer1.p.css.set(
          ".CSS2DObject {\n	color: white;\n	background-color: black;\n	padding: 5px 10px;\n	border: 1px solid blue;\n	border-radius: 5px;\n}\n.CSS2DObject button {\n	pointer-events: auto;\n	border: 1px solid white;\n	background-color: rgb(60, 58, 58);\n	padding: 5px 10px;\n	color: black;\n	position: relative;\n}\n.CSS2DObject button:hover {\n	cursor: pointer;\n	background-color: rgb(26, 26, 26);\n	color: white;\n}\n.CSS2DObject button:active {\n	top: 1px;\n	background-color: rgb(44, 51, 89);\n}"
        );
        CSS2DRenderer1.params.postCreateSpareParams();
        CSS2DRenderer1.params.runOnSceneLoadHooks();
        return { node: CSS2DRenderer1, children: CSS2DRenderer1_nodes };
      }
      renderersNetwork1_nodes["CSS2DRenderer1"] = create_CSS2DRenderer1(renderersNetwork1);
      if (renderersNetwork1.childrenController) {
        renderersNetwork1.childrenController.selection.set([]);
      }
      renderersNetwork1.uiData.setPosition(-200, 150);
      renderersNetwork1.params.postCreateSpareParams();
      renderersNetwork1.params.runOnSceneLoadHooks();
      return { node: renderersNetwork1, children: renderersNetwork1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    perspectiveCamera1_nodes["renderersNetwork1"] = create_renderersNetwork1(perspectiveCamera1);
    if (perspectiveCamera1.childrenController) {
      perspectiveCamera1.childrenController.selection.set([]);
    }
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([3.0161526633531355, 1.1787657307191874, 2.814738208647524]);
    perspectiveCamera1.p.r.set([-22.723127930556515, 44.66532130223666, 16.403892417511617]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.p.setCSSRenderer.set(true);
    perspectiveCamera1.p.CSSRenderer.set("renderersNetwork1/CSS2DRenderer1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_HTMLElement(parentNode) {
    var HTMLElement = parentNode.createNode("geo");
    HTMLElement.setName("HTMLElement");
    const HTMLElement_nodes = {};
    function create_CSS2DObject1(HTMLElement2) {
      var CSS2DObject1 = HTMLElement2.createNode("CSS2DObject");
      CSS2DObject1.setName("CSS2DObject1");
      const CSS2DObject1_nodes = {};
      CSS2DObject1.uiData.setPosition(-100, 50);
      CSS2DObject1.p.html.set(
        `<div>
	This is a button:
	<button onclick="alert('clicked!')">
		Click Me
	</button>
</div>`
      );
      CSS2DObject1.params.postCreateSpareParams();
      CSS2DObject1.params.runOnSceneLoadHooks();
      return { node: CSS2DObject1, children: CSS2DObject1_nodes };
    }
    function create_transform1(HTMLElement2) {
      var transform1 = HTMLElement2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-100, 250);
      transform1.flags.display.set(true);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([0, 1.890175130448105, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    HTMLElement_nodes["CSS2DObject1"] = create_CSS2DObject1(HTMLElement);
    HTMLElement_nodes["transform1"] = create_transform1(HTMLElement);
    HTMLElement_nodes["transform1"].node.setInput(0, HTMLElement_nodes["CSS2DObject1"].node);
    if (HTMLElement.childrenController) {
      HTMLElement.childrenController.selection.set([HTMLElement_nodes["CSS2DObject1"].node]);
    }
    HTMLElement.uiData.setPosition(-50, -150);
    HTMLElement.flags.display.set(true);
    HTMLElement.params.postCreateSpareParams();
    HTMLElement.params.runOnSceneLoadHooks();
    return { node: HTMLElement, children: HTMLElement_nodes };
  }
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["HTMLElement"] = create_HTMLElement(root);
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: []
    //scene_root_nodes['HTMLElement'].node.children(),
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_CSS2DObject_clickable_ts.bd606b53019d7452edbb.js.map