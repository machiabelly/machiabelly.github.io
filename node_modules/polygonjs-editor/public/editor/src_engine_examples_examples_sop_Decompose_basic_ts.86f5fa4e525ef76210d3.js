(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Decompose_basic_ts"],{

/***/ 72814:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10109);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_decompose1(geo12) {
      var decompose1 = geo12.createNode("decompose");
      decompose1.setName("decompose1");
      const decompose1_nodes = {};
      function create_COP2(decompose12) {
        var COP = decompose12.createNode("copNetwork");
        COP.setName("COP");
        const COP_nodes = {};
        if (COP.childrenController) {
          COP.childrenController.selection.set([]);
        }
        COP.uiData.setPosition(0, 0);
        COP.params.postCreateSpareParams();
        COP.params.runOnSceneLoadHooks();
        return { node: COP, children: COP_nodes };
      }
      function create_MAT(decompose12) {
        var MAT = decompose12.createNode("materialsNetwork");
        MAT.setName("MAT");
        const MAT_nodes = {};
        function create_meshStandard__export_prep_mesh_0(MAT2) {
          var meshStandard__export_prep_mesh_0 = MAT2.createNode("meshStandard");
          meshStandard__export_prep_mesh_0.setName("meshStandard__export_prep_mesh_0");
          const meshStandard__export_prep_mesh_0_nodes = {};
          meshStandard__export_prep_mesh_0.uiData.setPosition(0, 0);
          meshStandard__export_prep_mesh_0.p.color.set([0, 1, 0.3843137254901961]);
          meshStandard__export_prep_mesh_0.p.color.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0.p.useVertexColors.set(true);
          meshStandard__export_prep_mesh_0.p.emissive.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0.p.useEnvMap.set(true);
          meshStandard__export_prep_mesh_0.p.envMap.set("../../../../COP/envMap");
          meshStandard__export_prep_mesh_0.p.normalScale.set([1, -1]);
          meshStandard__export_prep_mesh_0.p.metalness.set(0.88);
          meshStandard__export_prep_mesh_0.p.roughness.set(0.1);
          meshStandard__export_prep_mesh_0.params.postCreateSpareParams();
          meshStandard__export_prep_mesh_0.params.runOnSceneLoadHooks();
          return { node: meshStandard__export_prep_mesh_0, children: meshStandard__export_prep_mesh_0_nodes };
        }
        function create_meshStandard__export_prep_mesh_0_1(MAT2) {
          var meshStandard__export_prep_mesh_0_1 = MAT2.createNode("meshStandard");
          meshStandard__export_prep_mesh_0_1.setName("meshStandard__export_prep_mesh_0_1");
          const meshStandard__export_prep_mesh_0_1_nodes = {};
          meshStandard__export_prep_mesh_0_1.uiData.setPosition(200, 0);
          meshStandard__export_prep_mesh_0_1.p.color.set([0, 0, 0]);
          meshStandard__export_prep_mesh_0_1.p.color.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_1.p.useVertexColors.set(true);
          meshStandard__export_prep_mesh_0_1.p.emissive.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_1.p.normalScale.set([1, -1]);
          meshStandard__export_prep_mesh_0_1.p.roughness.set(-0.151999965);
          meshStandard__export_prep_mesh_0_1.params.postCreateSpareParams();
          meshStandard__export_prep_mesh_0_1.params.runOnSceneLoadHooks();
          return {
            node: meshStandard__export_prep_mesh_0_1,
            children: meshStandard__export_prep_mesh_0_1_nodes
          };
        }
        function create_meshStandard__export_prep_mesh_0_2(MAT2) {
          var meshStandard__export_prep_mesh_0_2 = MAT2.createNode("meshStandard");
          meshStandard__export_prep_mesh_0_2.setName("meshStandard__export_prep_mesh_0_2");
          const meshStandard__export_prep_mesh_0_2_nodes = {};
          meshStandard__export_prep_mesh_0_2.uiData.setPosition(400, 0);
          meshStandard__export_prep_mesh_0_2.p.color.set([0.588235319, 0.588235319, 0.588235319]);
          meshStandard__export_prep_mesh_0_2.p.color.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_2.p.useVertexColors.set(true);
          meshStandard__export_prep_mesh_0_2.p.emissive.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_2.p.normalScale.set([1, -1]);
          meshStandard__export_prep_mesh_0_2.p.roughness.set(-0.151999965);
          meshStandard__export_prep_mesh_0_2.params.postCreateSpareParams();
          meshStandard__export_prep_mesh_0_2.params.runOnSceneLoadHooks();
          return {
            node: meshStandard__export_prep_mesh_0_2,
            children: meshStandard__export_prep_mesh_0_2_nodes
          };
        }
        function create_meshStandard__export_prep_mesh_0_3(MAT2) {
          var meshStandard__export_prep_mesh_0_3 = MAT2.createNode("meshStandard");
          meshStandard__export_prep_mesh_0_3.setName("meshStandard__export_prep_mesh_0_3");
          const meshStandard__export_prep_mesh_0_3_nodes = {};
          meshStandard__export_prep_mesh_0_3.uiData.setPosition(600, 0);
          meshStandard__export_prep_mesh_0_3.p.color.set([0.00999999978, 0.00999999978, 0.00999999978]);
          meshStandard__export_prep_mesh_0_3.p.color.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_3.p.useVertexColors.set(true);
          meshStandard__export_prep_mesh_0_3.p.emissive.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_3.p.normalScale.set([1, -1]);
          meshStandard__export_prep_mesh_0_3.p.roughness.set(-0.151999965);
          meshStandard__export_prep_mesh_0_3.params.postCreateSpareParams();
          meshStandard__export_prep_mesh_0_3.params.runOnSceneLoadHooks();
          return {
            node: meshStandard__export_prep_mesh_0_3,
            children: meshStandard__export_prep_mesh_0_3_nodes
          };
        }
        function create_meshStandard__export_prep_mesh_0_4(MAT2) {
          var meshStandard__export_prep_mesh_0_4 = MAT2.createNode("meshStandard");
          meshStandard__export_prep_mesh_0_4.setName("meshStandard__export_prep_mesh_0_4");
          const meshStandard__export_prep_mesh_0_4_nodes = {};
          meshStandard__export_prep_mesh_0_4.uiData.setPosition(800, 0);
          meshStandard__export_prep_mesh_0_4.p.color.set([0.00999999978, 0.00999999978, 0.00999999978]);
          meshStandard__export_prep_mesh_0_4.p.color.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_4.p.useVertexColors.set(true);
          meshStandard__export_prep_mesh_0_4.p.emissive.setConversion(_polygonjs_polygonjs_src_core_Color__WEBPACK_IMPORTED_MODULE_0__/* .ColorConversion.NONE */ .Yx.NONE);
          meshStandard__export_prep_mesh_0_4.p.normalScale.set([1, -1]);
          meshStandard__export_prep_mesh_0_4.p.roughness.set(-0.151999965);
          meshStandard__export_prep_mesh_0_4.params.postCreateSpareParams();
          meshStandard__export_prep_mesh_0_4.params.runOnSceneLoadHooks();
          return {
            node: meshStandard__export_prep_mesh_0_4,
            children: meshStandard__export_prep_mesh_0_4_nodes
          };
        }
        MAT_nodes["meshStandard__export_prep_mesh_0"] = create_meshStandard__export_prep_mesh_0(MAT);
        MAT_nodes["meshStandard__export_prep_mesh_0_1"] = create_meshStandard__export_prep_mesh_0_1(MAT);
        MAT_nodes["meshStandard__export_prep_mesh_0_2"] = create_meshStandard__export_prep_mesh_0_2(MAT);
        MAT_nodes["meshStandard__export_prep_mesh_0_3"] = create_meshStandard__export_prep_mesh_0_3(MAT);
        MAT_nodes["meshStandard__export_prep_mesh_0_4"] = create_meshStandard__export_prep_mesh_0_4(MAT);
        if (MAT.childrenController) {
          MAT.childrenController.selection.set([]);
        }
        MAT.uiData.setPosition(200, 0);
        MAT.params.postCreateSpareParams();
        MAT.params.runOnSceneLoadHooks();
        return { node: MAT, children: MAT_nodes };
      }
      function create_material__export_prep_mesh_0(decompose12) {
        var material__export_prep_mesh_0 = decompose12.createNode("material");
        material__export_prep_mesh_0.setName("material__export_prep_mesh_0");
        const material__export_prep_mesh_0_nodes = {};
        material__export_prep_mesh_0.uiData.setPosition(400, -1e3);
        material__export_prep_mesh_0.p.group.set("/export_prep/mesh_0");
        material__export_prep_mesh_0.p.material.set("../MAT/meshStandard__export_prep_mesh_0");
        material__export_prep_mesh_0.params.postCreateSpareParams();
        material__export_prep_mesh_0.params.runOnSceneLoadHooks();
        return { node: material__export_prep_mesh_0, children: material__export_prep_mesh_0_nodes };
      }
      function create_material__export_prep_mesh_0_1(decompose12) {
        var material__export_prep_mesh_0_1 = decompose12.createNode("material");
        material__export_prep_mesh_0_1.setName("material__export_prep_mesh_0_1");
        const material__export_prep_mesh_0_1_nodes = {};
        material__export_prep_mesh_0_1.uiData.setPosition(400, -800);
        material__export_prep_mesh_0_1.p.group.set("/export_prep/mesh_0_1");
        material__export_prep_mesh_0_1.p.material.set("../MAT/meshStandard__export_prep_mesh_0_1");
        material__export_prep_mesh_0_1.params.postCreateSpareParams();
        material__export_prep_mesh_0_1.params.runOnSceneLoadHooks();
        return { node: material__export_prep_mesh_0_1, children: material__export_prep_mesh_0_1_nodes };
      }
      function create_material__export_prep_mesh_0_2(decompose12) {
        var material__export_prep_mesh_0_2 = decompose12.createNode("material");
        material__export_prep_mesh_0_2.setName("material__export_prep_mesh_0_2");
        const material__export_prep_mesh_0_2_nodes = {};
        material__export_prep_mesh_0_2.uiData.setPosition(400, -600);
        material__export_prep_mesh_0_2.p.group.set("/export_prep/mesh_0_2");
        material__export_prep_mesh_0_2.p.material.set("../MAT/meshStandard__export_prep_mesh_0_2");
        material__export_prep_mesh_0_2.params.postCreateSpareParams();
        material__export_prep_mesh_0_2.params.runOnSceneLoadHooks();
        return { node: material__export_prep_mesh_0_2, children: material__export_prep_mesh_0_2_nodes };
      }
      function create_material__export_prep_mesh_0_3(decompose12) {
        var material__export_prep_mesh_0_3 = decompose12.createNode("material");
        material__export_prep_mesh_0_3.setName("material__export_prep_mesh_0_3");
        const material__export_prep_mesh_0_3_nodes = {};
        material__export_prep_mesh_0_3.uiData.setPosition(400, -400);
        material__export_prep_mesh_0_3.p.group.set("/export_prep/mesh_0_3");
        material__export_prep_mesh_0_3.p.material.set("../MAT/meshStandard__export_prep_mesh_0_3");
        material__export_prep_mesh_0_3.params.postCreateSpareParams();
        material__export_prep_mesh_0_3.params.runOnSceneLoadHooks();
        return { node: material__export_prep_mesh_0_3, children: material__export_prep_mesh_0_3_nodes };
      }
      function create_material__export_prep_mesh_0_4(decompose12) {
        var material__export_prep_mesh_0_4 = decompose12.createNode("material");
        material__export_prep_mesh_0_4.setName("material__export_prep_mesh_0_4");
        const material__export_prep_mesh_0_4_nodes = {};
        material__export_prep_mesh_0_4.uiData.setPosition(400, -200);
        material__export_prep_mesh_0_4.p.group.set("/export_prep/mesh_0_4");
        material__export_prep_mesh_0_4.p.material.set("../MAT/meshStandard__export_prep_mesh_0_4");
        material__export_prep_mesh_0_4.params.postCreateSpareParams();
        material__export_prep_mesh_0_4.params.runOnSceneLoadHooks();
        return { node: material__export_prep_mesh_0_4, children: material__export_prep_mesh_0_4_nodes };
      }
      function create_subnetInput1(decompose12) {
        var subnetInput1 = decompose12.createNode("subnetInput");
        subnetInput1.setName("subnetInput1");
        const subnetInput1_nodes = {};
        subnetInput1.uiData.setPosition(400, -1200);
        subnetInput1.flags.display.set(true);
        subnetInput1.params.postCreateSpareParams();
        subnetInput1.params.runOnSceneLoadHooks();
        return { node: subnetInput1, children: subnetInput1_nodes };
      }
      function create_subnetOutput1(decompose12) {
        var subnetOutput1 = decompose12.createNode("subnetOutput");
        subnetOutput1.setName("subnetOutput1");
        const subnetOutput1_nodes = {};
        subnetOutput1.uiData.setPosition(400, 0);
        subnetOutput1.params.postCreateSpareParams();
        subnetOutput1.params.runOnSceneLoadHooks();
        return { node: subnetOutput1, children: subnetOutput1_nodes };
      }
      decompose1_nodes["COP"] = create_COP2(decompose1);
      decompose1_nodes["MAT"] = create_MAT(decompose1);
      decompose1_nodes["material__export_prep_mesh_0"] = create_material__export_prep_mesh_0(decompose1);
      decompose1_nodes["material__export_prep_mesh_0_1"] = create_material__export_prep_mesh_0_1(decompose1);
      decompose1_nodes["material__export_prep_mesh_0_2"] = create_material__export_prep_mesh_0_2(decompose1);
      decompose1_nodes["material__export_prep_mesh_0_3"] = create_material__export_prep_mesh_0_3(decompose1);
      decompose1_nodes["material__export_prep_mesh_0_4"] = create_material__export_prep_mesh_0_4(decompose1);
      decompose1_nodes["subnetInput1"] = create_subnetInput1(decompose1);
      decompose1_nodes["subnetOutput1"] = create_subnetOutput1(decompose1);
      decompose1_nodes["material__export_prep_mesh_0"].node.setInput(0, decompose1_nodes["subnetInput1"].node);
      decompose1_nodes["material__export_prep_mesh_0_1"].node.setInput(
        0,
        decompose1_nodes["material__export_prep_mesh_0"].node
      );
      decompose1_nodes["material__export_prep_mesh_0_2"].node.setInput(
        0,
        decompose1_nodes["material__export_prep_mesh_0_1"].node
      );
      decompose1_nodes["material__export_prep_mesh_0_3"].node.setInput(
        0,
        decompose1_nodes["material__export_prep_mesh_0_2"].node
      );
      decompose1_nodes["material__export_prep_mesh_0_4"].node.setInput(
        0,
        decompose1_nodes["material__export_prep_mesh_0_3"].node
      );
      decompose1_nodes["subnetOutput1"].node.setInput(0, decompose1_nodes["material__export_prep_mesh_0_4"].node);
      if (decompose1.childrenController) {
        decompose1.childrenController.selection.set([decompose1_nodes["material__export_prep_mesh_0"].node]);
      }
      decompose1.uiData.setPosition(-450, 50);
      decompose1.uiData.setComment(`Clicking on the **decompose** button will create material nodes for each material imported by the file node above.

This will then allow you to edit the materials separately, giving you control on how you want this asset to look into your scene.

This is much more convenient than having to re-export the asset.`);
      decompose1.flags.display.set(true);
      decompose1.params.postCreateSpareParams();
      decompose1.params.runOnSceneLoadHooks();
      return { node: decompose1, children: decompose1_nodes };
    }
    function create_fileGLTF1(geo12) {
      var fileGLTF1 = geo12.createNode("fileGLTF");
      fileGLTF1.setName("fileGLTF1");
      const fileGLTF1_nodes = {};
      fileGLTF1.uiData.setPosition(-450, -100);
      fileGLTF1.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/car.glb");
      fileGLTF1.params.postCreateSpareParams();
      fileGLTF1.params.runOnSceneLoadHooks();
      return { node: fileGLTF1, children: fileGLTF1_nodes };
    }
    geo1_nodes["decompose1"] = create_decompose1(geo1);
    geo1_nodes["fileGLTF1"] = create_fileGLTF1(geo1);
    geo1_nodes["decompose1"].node.setInput(0, geo1_nodes["fileGLTF1"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([]);
    }
    geo1.uiData.setPosition(-50, -150);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    if (grid.childrenController) {
      grid.childrenController.selection.set([]);
    }
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.049216274401858016, 0.33854019567917704, -0.10690729322940476]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      if (events1.childrenController) {
        events1.childrenController.selection.set([]);
      }
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    if (perspectiveCamera1.childrenController) {
      perspectiveCamera1.childrenController.selection.set([]);
    }
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([3.0161526633531355, 1.1787657307191874, 2.814738208647524]);
    perspectiveCamera1.p.r.set([-22.723127930556515, 44.66532130223666, 16.403892417511617]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([]);
    }
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["COP"] = create_COP(root);
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: scene_root_nodes["geo1"].node.children()
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Decompose_basic_ts.86f5fa4e525ef76210d3.js.map