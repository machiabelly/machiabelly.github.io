{"version":3,"file":"src_docs_pages_mdx_multiplayer_mdx.b13f32efb30d903b55cf.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBAAE;EAAA;IAAA,gBAEF;EAAA;IAAA,gBAEA;EAAA;IAAA;IAAA;EAAA;IAAA,gBAIE;EAAA;IAAA,gBAEF;EAAA;IAAA;MAAA;QAAA;UAAA,gBAEK;QAAA,IAAK;UAAA;QAAA;UAAA,gBAAa;QAAA,IAAoB;MAAA;IAAA;MAAA;QAAA,gBAExC;UAAA,gBAAK;QAAA,IAAK;UAAA,gBAA4H;QAAA,IAAI;MAAA;IAAA;MAAA;QAAA;UAAA,gBAExI;QAAA,IAAI;MAAA;IAAA;MAAA;QAAA;UAAA,gBAEJ;QAAA,IAAK;MAAA;IAAA;MAAA;QAAA;UAAA,gBAEL;QAAA,IAAI;UAAA,gBAAoC;QAAA,IAAK;MAAA;IAAA;MAAA;QAAA,gBAE/C;MAAA;IAAA;MAAA;QAAA,gBAEA;UAAA,gBAA2C;QAAA,IAAK;UAAA;QAAA;UAAA,gBAAgD;QAAA,IAAoB;MAAA;IAAA;EAAA;IAAA,gBAErH;EAAA;IAAA,gBAEF;MAAA;IAAA;MAAA,gBAAsC;IAAA,IAAoB;MAAA;IAAA;MAAA,gBAA2D;IAAA,IAAoB;EAAA;IAAA,gBAEzI;MAAA,gBAAuD;IAAA,IAAwB;EAAA;IAAA;IAAA;EAAA;IAAA,gBAI/E;EAAA;IAAA;IAAA;EAAA;IAAA,gBAIA;MAAA;IAAA;MAAA,gBAA2C;IAAA,IAA0B;EAAA;IAAA,gBAElE;EAAA;IAAA,gBAEH;MAAA;IAAA;MAAA,gBAA+B;IAAA,IAA0B;EAAA;IAAA,gBAEzD;MAAA,gBAAoC;IAAA,IAAuB;EAAA;IAAA,gBAE3D;EAAA;IAAA;MAAA,gBAEG;QAAA;MAAA;QAAA,gBAAW;MAAA,IAA0B;IAAA;MAAA,gBACrC;QAAA;MAAA;QAAA,gBAAwB;MAAA,IAA+G;IAAA;EAAA;IAAA;IAAA;EAAA;IAAA,gBAI1I;MAAA;IAAA;MAAA,gBAA+E;IAAA,IAAqC;EAAA;IAAA;MAAA;IAAA;EAAA;IAAA,gBAMpH;EAAA;IAAA,gBAEG;EAAA;IAAA,gBAEH;MAAA,gBAA4B;IAAA,IAAwB;EAAA;IAAA;IAAA;EAAA;IAAA,gBAIpD;EAAA;IAAA;IAAA;EAAA;IAAA,gBAIA;MAAA,gBAAiB;IAAA,IAA2B;EAAA;IAAA;IAAA;EAAA;IAAA,gBAI5C;EAAA;IAAA;MAAA,gBAEC;IAAA,IAAK;EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EN;AACA,aAAa,sCAAsC;AACnD,aAAa,gCAAgC;AAC7C,aAAa,uCAAuC;AACpD;;AAEA;AACA;AACA;AACA,cAAc,kCAAkC;AAChD;AACA;;AAE0D;;AAE1D;AACA;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA,IAAI,sDAAO;AACX,GAAG;AACH;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,WAAW,0DAAW;AACtB,MAAM,mDAAQ;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACO;AACP,SAAS,qDAAM,qBAAqB;AACpC","sources":["webpack:///../src/docs/pages/mdx/multiplayer.mdx","webpack:///../node_modules/@mdx-js/vue/lib/index.js"],"sourcesContent":[null,"/**\n * @typedef {import('mdx/types.js').MDXComponents} MDXComponents\n * @typedef {import('vue').Component<Props>} Provider\n * @typedef {import('vue').ComponentPublicInstance} ComponentPublicInstance\n */\n\n/**\n * @typedef Props\n *   Configuration for `MDXProvider`.\n * @property {MDXComponents | null | undefined} [components]\n *   Additional components to use (optional).\n */\n\nimport {Fragment, createVNode, inject, provide} from 'vue'\n\n/**\n * Provider for MDX context.\n *\n * @type {Provider}\n *   Provider.\n */\nexport const MDXProvider = {\n  name: 'MDXProvider',\n  props: {\n    components: {\n      default() {\n        return {}\n      },\n      type: Object\n    }\n  },\n  setup(props) {\n    provide('$mdxComponents', props.components)\n  },\n  /**\n   * @this {ComponentPublicInstance}\n   *   Context.\n   * @returns\n   *   Element.\n   */\n  render() {\n    return createVNode(\n      Fragment,\n      undefined,\n      this.$slots.default ? this.$slots.default() : []\n    )\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @returns {MDXComponents}\n *   Current components.\n */\nexport function useMDXComponents() {\n  return inject('$mdxComponents', {})\n}\n"],"names":[],"sourceRoot":""}