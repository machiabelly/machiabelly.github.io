(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_UvUnwrap_ts"],{

/***/ 68002:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ addPerspectiveCameraOBJWithOrbitControls; }
/* harmony export */ });

function addPerspectiveCameraOBJWithOrbitControls(root) {
  const perspectiveCamera1 = root.createNode("perspectiveCamera");
  perspectiveCamera1.p.t.set([5, 5, 5]);
  const events1 = perspectiveCamera1.createNode("eventsNetwork");
  const orbitsControls = events1.createNode("cameraOrbitControls");
  perspectiveCamera1.p.controls.setNode(orbitsControls);
  return { perspectiveCamera1 };
}


/***/ }),

/***/ 85375:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _ExampleUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68002);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const geo = root.createNode("geo");
  const MAT = geo.createNode("materialsNetwork");
  const meshBasic = MAT.createNode("meshBasic");
  meshBasic.p.wireframe.set(1);
  const sphere = geo.createNode("sphere");
  const plane = geo.createNode("plane");
  const merge = geo.createNode("merge");
  const uvUnwrap = geo.createNode("uvUnwrap");
  const point = geo.createNode("point");
  const material = geo.createNode("material");
  merge.setInput(0, sphere);
  merge.setInput(1, plane);
  merge.p.compact.set(1);
  uvUnwrap.setInput(0, merge);
  point.setInput(0, uvUnwrap);
  point.p.updateX.set(1);
  point.p.updateY.set(1);
  point.p.updateZ.set(1);
  point.p.x.set("@uv.x");
  point.p.y.set("@uv.y");
  point.p.z.set("0");
  material.setInput(0, point);
  material.p.material.setNode(meshBasic);
  material.flags.display.set(true);
  uvUnwrap.uiData.setComment(`When using the local app:
make sure to install the xatlast library,
with the top menu
Windows -> Libraries,
and click on 'Install XAtlast' button.
Then reload the page.`);
  const { perspectiveCamera1 } = (0,_ExampleUtils__WEBPACK_IMPORTED_MODULE_0__/* .addPerspectiveCameraOBJWithOrbitControls */ .n)(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [plane],
    autoLayout: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_UvUnwrap_ts.c3b5d2b2baf02e5ae726.js.map