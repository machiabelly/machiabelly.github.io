(self["webpackChunk"] = self["webpackChunk"] || []).push([["_polygonjs_polygonjs_src_engine_nodes_mat_utils_UniformsFogController_ts-src_editor_component-6ba838"],{

/***/ 17162:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": function() { return /* binding */ FetchCopNode; }
/* harmony export */ });
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(65276);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);
/* harmony import */ var _poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52070);
/* harmony import */ var _core_geometry_Mask__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(58290);
/* harmony import */ var _core_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(19037);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





class FetchCopParamsConfig extends _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI {
  constructor() {
    super(...arguments);
    /** @param sop node */
    this.node = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.NODE_PATH */ .XC.NODE_PATH("", {
      nodeSelection: {
        context: _poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.SOP */ .sy.SOP
      }
    });
    /** @param group to read the material from */
    this.group = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.STRING */ .XC.STRING("", {
      objectMask: true
    });
    /** @param texture name */
    this.name = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.STRING */ .XC.STRING("");
  }
}
const ParamsConfig = new FetchCopParamsConfig();
class FetchCopNode extends _Base__WEBPACK_IMPORTED_MODULE_2__/* .TypedCopNode */ .z {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
  }
  static type() {
    return "fetch";
  }
  cook() {
    return __async(this, null, function* () {
      const geometryNode = this.pv.node.nodeWithContext(_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.SOP */ .sy.SOP, this.states.error);
      if (!geometryNode) {
        this.states.error.set(`node not found at path '${this.pv.node.path()}'`);
        return;
      }
      const container = yield geometryNode.compute();
      const coreGroup = container.coreContent();
      if (!coreGroup) {
        this.states.error.set(`geometry invalid`);
        return;
      }
      const selectedObjects = _core_geometry_Mask__WEBPACK_IMPORTED_MODULE_3__/* .CoreMask.filterThreejsObjects */ .x0.filterThreejsObjects(coreGroup, this.pv);
      if (selectedObjects.length == 0) {
        this.states.error.set(`no object matching group`);
        return;
      }
      let texture;
      for (const selectedObject of selectedObjects) {
        const material = selectedObject.material;
        if (material) {
          if (_core_Type__WEBPACK_IMPORTED_MODULE_4__/* .CoreType.isArray */ .MR.isArray(material)) {
            for (const mat of material) {
              texture = texture || this._textureFromMaterial(mat);
            }
          } else {
            texture = texture || this._textureFromMaterial(material);
          }
        }
      }
      if (!texture) {
        this.states.error.set(`no texture found`);
        return;
      }
      this.setTexture(texture);
    });
  }
  _textureFromMaterial(material) {
    const textureName = this.pv.name;
    const texture = material[textureName];
    if (texture && texture.isTexture) {
      return texture;
    }
  }
}


/***/ }),

/***/ 75853:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "k": function() { return /* binding */ MeshLambertMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(78058);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(96949);
/* harmony import */ var _utils_ColorsController__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(40330);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(87732);
/* harmony import */ var _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(71607);
/* harmony import */ var _utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(97564);
/* harmony import */ var _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28985);
/* harmony import */ var _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(69228);
/* harmony import */ var _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(90201);
/* harmony import */ var _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(94135);
/* harmony import */ var _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58206);
/* harmony import */ var _utils_FogController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30082);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(99233);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(45231);
/* harmony import */ var _utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(73777);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};



















class MeshLambertMatParamsConfig extends (0,_utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogParamConfig */ .N9)(
  (0,_utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeParamConfig */ .M)(
    (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonParamConfig */ .E)(
      (0,_utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__/* .FlatShadingParamConfig */ .s)(
        /* advanced */
        (0,_utils_AdvancedFolder__WEBPACK_IMPORTED_MODULE_4__/* .AdvancedFolderParamConfig */ .A)(
          (0,_utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_5__/* .LightMapParamConfig */ .T)(
            (0,_utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_6__/* .EnvMapSimpleParamConfig */ .R)(
              (0,_utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_7__/* .EmissiveMapParamConfig */ .f)(
                (0,_utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_8__/* .AOMapParamConfig */ .T)(
                  (0,_utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_9__/* .AlphaMapParamConfig */ .T)(
                    (0,_utils_TextureMapController__WEBPACK_IMPORTED_MODULE_10__/* .MapParamConfig */ .D)(
                      /* textures */
                      (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_11__/* .TexturesFolderParamConfig */ .o)(
                        (0,_utils_ColorsController__WEBPACK_IMPORTED_MODULE_12__/* .ColorParamConfig */ .Pn)((0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_13__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_14__/* .NodeParamsConfig */ .yI))
                      )
                    )
                  )
                )
              )
            )
          )
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshLambertMatParamsConfig();
class MeshLambertMatNode extends _Base__WEBPACK_IMPORTED_MODULE_15__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      colors: new _utils_ColorsController__WEBPACK_IMPORTED_MODULE_12__/* .ColorsController */ .br(this),
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_2__/* .AdvancedCommonController */ .h(this),
      alphaMap: new _utils_TextureAlphaMapController__WEBPACK_IMPORTED_MODULE_9__/* .TextureAlphaMapController */ .s(this),
      aoMap: new _utils_TextureAOMapController__WEBPACK_IMPORTED_MODULE_8__/* .TextureAOMapController */ .Z(this),
      emissiveMap: new _utils_TextureEmissiveMapController__WEBPACK_IMPORTED_MODULE_7__/* .TextureEmissiveMapController */ .z(this),
      envMap: new _utils_TextureEnvMapSimpleController__WEBPACK_IMPORTED_MODULE_6__/* .TextureEnvMapSimpleController */ .z(this),
      fog: new _utils_FogController__WEBPACK_IMPORTED_MODULE_0__/* .FogController */ .j2(this),
      flatShading: new _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_3__/* .FlatShadingController */ .C(this),
      lightMap: new _utils_TextureLightMapController__WEBPACK_IMPORTED_MODULE_5__/* .TextureLightMapController */ .$(this),
      map: new _utils_TextureMapController__WEBPACK_IMPORTED_MODULE_10__/* .TextureMapController */ .g(this),
      wireframe: new _utils_WireframeController__WEBPACK_IMPORTED_MODULE_1__/* .WireframeController */ .U(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_16__/* .MatType.MESH_LAMBERT */ .M.MESH_LAMBERT;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_17__.MeshLambertMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_17__.FrontSide,
      color: 16777215,
      opacity: 1
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 97886:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "S": function() { return /* binding */ MeshNormalMatNode; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(21410);
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(78058);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(96949);
/* harmony import */ var _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(90476);
/* harmony import */ var _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(89328);
/* harmony import */ var _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19767);
/* harmony import */ var _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(70967);
/* harmony import */ var _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(90201);
/* harmony import */ var _utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(45231);
/* harmony import */ var _utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(99233);
/* harmony import */ var _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(41545);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};












class MeshNormalMatParamsConfig extends (0,_utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_0__/* .AdvancedCommonParamConfig */ .E)(
  (0,_utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_1__/* .FlatShadingParamConfig */ .s)(
    /* advanced */
    (0,_utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_2__/* .NormalMapParamConfig */ .$)(
      (0,_utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_3__/* .DisplacementMapParamConfig */ .n)(
        (0,_utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_4__/* .BumpMapParamConfig */ .w)(
          /* textures */
          (0,_utils_TexturesFolder__WEBPACK_IMPORTED_MODULE_5__/* .TexturesFolderParamConfig */ .o)((0,_utils_DefaultFolder__WEBPACK_IMPORTED_MODULE_6__/* .DefaultFolderParamConfig */ .b)(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_7__/* .NodeParamsConfig */ .yI))
        )
      )
    )
  )
) {
}
const ParamsConfig = new MeshNormalMatParamsConfig();
class MeshNormalMatNode extends _Base__WEBPACK_IMPORTED_MODULE_8__/* .PrimitiveMatNode */ .Q_ {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.controllers = {
      advancedCommon: new _utils_AdvancedCommonController__WEBPACK_IMPORTED_MODULE_0__/* .AdvancedCommonController */ .h(this),
      bumpMap: new _utils_TextureBumpMapController__WEBPACK_IMPORTED_MODULE_4__/* .TextureBumpMapController */ .T(this),
      displacementMap: new _utils_TextureDisplacementMapController__WEBPACK_IMPORTED_MODULE_3__/* .TextureDisplacementMapController */ .u(this),
      flatShading: new _utils_FlatShadingController__WEBPACK_IMPORTED_MODULE_1__/* .FlatShadingController */ .C(this),
      normalMap: new _utils_TextureNormalMapController__WEBPACK_IMPORTED_MODULE_2__/* .TextureNormalMapController */ .w(this)
    };
    this.controllersList = Object.values(this.controllers);
  }
  static type() {
    return _poly_registers_nodes_types_Mat__WEBPACK_IMPORTED_MODULE_9__/* .MatType.MESH_NORMAL */ .M.MESH_NORMAL;
  }
  createMaterial() {
    return new three__WEBPACK_IMPORTED_MODULE_10__.MeshNormalMaterial({
      vertexColors: false,
      side: three__WEBPACK_IMPORTED_MODULE_10__.FrontSide,
      opacity: 1
    });
  }
  cook() {
    return __async(this, null, function* () {
      this._material = this._material || this.createMaterial();
      yield Promise.all(this.controllersPromises(this._material));
      this.setMaterial(this._material);
    });
  }
}


/***/ }),

/***/ 99233:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "b": function() { return /* binding */ DefaultFolderParamConfig; }
/* harmony export */ });
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);


function DefaultFolderParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.default = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FOLDER */ .XC.FOLDER(null);
    }
  };
}


/***/ }),

/***/ 45231:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "o": function() { return /* binding */ TexturesFolderParamConfig; }
/* harmony export */ });
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);


function TexturesFolderParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.textures = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.FOLDER */ .XC.FOLDER(null);
    }
  };
}


/***/ }),

/***/ 9161:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "N": function() { return /* binding */ FogParamConfig; },
/* harmony export */   "z": function() { return /* binding */ UniformFogController; }
/* harmony export */ });
/* harmony import */ var _BaseController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4418);
/* harmony import */ var _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(96949);
/* harmony import */ var _core_BooleanValue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(19037);

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};




function FogParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      /** @param toggle on if you have a fog in the scene and the material should be affected by it */
      this.useFog = _utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .ParamConfig.BOOLEAN */ .XC.BOOLEAN(0);
    }
  };
}
class FogUniformsParamsConfig extends FogParamConfig(_utils_params_ParamsConfig__WEBPACK_IMPORTED_MODULE_0__/* .NodeParamsConfig */ .yI) {
}
function isValidFogMaterial(material) {
  if (!material) {
    return false;
  }
  return material.fog != null;
}
class FogUniformsMatNode extends (/* unused pure expression or super */ null && (TypedMatNode)) {
}
class UniformFogController extends _BaseController__WEBPACK_IMPORTED_MODULE_1__/* .BaseController */ .x {
  constructor(node) {
    super(node);
    this.node = node;
  }
  static update(node) {
    return __async(this, null, function* () {
      const material = yield node.material();
      if (!isValidFogMaterial(material)) {
        return;
      }
      node.controllers.uniformFog.updateMaterial(material);
    });
  }
  updateMaterial(material) {
    const pv = this.node.pv;
    material.fog = (0,_core_BooleanValue__WEBPACK_IMPORTED_MODULE_2__/* .isBooleanTrue */ .bI)(pv.useFog);
  }
  getTextures(material, record) {
  }
  setParamsFromMaterial(material, record) {
    this.node.p.useFog.set(material.fog);
  }
}


/***/ }),

/***/ 97271:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return /* binding */ sop_Decompose; }
});

// EXTERNAL MODULE: ../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(88917);
;// CONCATENATED MODULE: ../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue?vue&type=template&id=9af67708&ts=true

const _hoisted_1 = {
  key: 0,
  class: "w-full"
};
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return _ctx.displayed ? ((0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)("div", _hoisted_1, [
    (0,runtime_core_esm_bundler/* createCommentVNode */.kq)(' <div class="grid-x w-full">\n			<div class="cell auto">\n				<div class="inline-flex w-full">\n					<button\n						type="button"\n						class="grow inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 sm:w-auto sm:text-sm cursor-pointer"\n						@click="decompose"\n						id="sop-decompose-decompose-button"\n					>\n						<CubeIcon class="mr-3 h-5 w-5" aria-hidden="true" />\n						<span>Decompose</span>\n					</button>\n				</div>\n			</div>\n		</div> ')
  ])) : (0,runtime_core_esm_bundler/* createCommentVNode */.kq)("v-if", true);
}

;// CONCATENATED MODULE: ../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue?vue&type=template&id=9af67708&ts=true

// EXTERNAL MODULE: ../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js + 1 modules
var reactivity_esm_bundler = __webpack_require__(61334);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/sop/Decompose.ts
var Decompose = __webpack_require__(26805);
// EXTERNAL MODULE: ../src/editor/store/controllers/StoreController.ts + 44 modules
var StoreController = __webpack_require__(72555);
// EXTERNAL MODULE: ../src/editor/core/AutoLayout.ts
var AutoLayout = __webpack_require__(57091);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/node_modules/three/build/three.module.js
var three_module = __webpack_require__(21410);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/SetUtils.ts
var SetUtils = __webpack_require__(55407);
// EXTERNAL MODULE: ../src/editor/history/commands/Multiple.ts
var Multiple = __webpack_require__(71117);
// EXTERNAL MODULE: ../src/editor/history/commands/NodeDelete.ts
var NodeDelete = __webpack_require__(75616);
// EXTERNAL MODULE: ../src/editor/history/commands/NodeCreate.ts
var NodeCreate = __webpack_require__(39414);
// EXTERNAL MODULE: ../src/editor/history/commands/NodeSetName.ts
var NodeSetName = __webpack_require__(43072);
// EXTERNAL MODULE: ../src/editor/history/commands/NodeConnect.ts
var NodeConnect = __webpack_require__(84513);
// EXTERNAL MODULE: ../src/editor/history/commands/NodeSetComment.ts
var NodeSetComment = __webpack_require__(6400);
// EXTERNAL MODULE: ../src/editor/Editor.ts + 11 modules
var Editor = __webpack_require__(90192);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Type.ts
var Type = __webpack_require__(19037);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/geometry/CorePath.ts
var CorePath = __webpack_require__(60074);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/MapUtils.ts
var MapUtils = __webpack_require__(94158);
;// CONCATENATED MODULE: ../src/editor/components/panels/params/components/extras/nodes/sop/utils/decompose/DecomposeGatherer.ts




class DecomposeGatherer {
  constructor(node) {
    this.node = node;
  }
  gatherMaterials(options) {
    const { rootObjects } = options;
    const materialsByUuid = /* @__PURE__ */ new Map();
    const objectPathsByMaterialUuid = /* @__PURE__ */ new Map();
    for (const rootObject of rootObjects) {
      rootObject.traverse((object) => {
        const material = object.material;
        if (material) {
          if (Type/* CoreType.isArray */.MR.isArray(material)) {
            this.node.states.error.set("material arrays are not yet supported");
          } else {
            materialsByUuid.set(material.uuid, material);
            const objectPath = CorePath/* CorePath.objectPath */.Oj.objectPath(object, rootObject);
            MapUtils/* MapUtils.addToSetAtEntry */.pl.addToSetAtEntry(objectPathsByMaterialUuid, material.uuid, objectPath);
          }
        }
      });
    }
    return { materialsByUuid, objectPathsByMaterialUuid };
  }
  gatherTextures(options) {
    const { matNodes, materialNodeIndexByUuid, materialsByUuid } = options;
    const textureRecordsByUuid = /* @__PURE__ */ new Map();
    const materialsByTextureUuid = /* @__PURE__ */ new Map();
    const texturesByUuid = /* @__PURE__ */ new Map();
    materialsByUuid.forEach((material, uuid) => {
      const index = materialNodeIndexByUuid.get(uuid);
      if (index == null) {
        console.log("no index for mat", uuid);
        return;
      }
      const matNode = matNodes[index];
      if (!matNode) {
        console.log("no matNode for mat", index);
        return;
      }
      const textureRecord = /* @__PURE__ */ new Map();
      matNode.getTextures(material, textureRecord);
      textureRecordsByUuid.set(uuid, textureRecord);
      textureRecord.forEach((texture) => {
        if (texture) {
          texturesByUuid.set(texture.uuid, texture);
          MapUtils/* MapUtils.addToSetAtEntry */.pl.addToSetAtEntry(materialsByTextureUuid, texture.uuid, material);
        }
      });
    });
    return { texturesByUuid, textureRecordsByUuid, materialsByTextureUuid };
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/LineBasic.ts
var LineBasic = __webpack_require__(87000);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshBasic.ts
var MeshBasic = __webpack_require__(94978);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshLambert.ts
var MeshLambert = __webpack_require__(75853);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshMatcap.ts + 1 modules
var MeshMatcap = __webpack_require__(40453);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshNormal.ts
var MeshNormal = __webpack_require__(97886);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhong.ts
var MeshPhong = __webpack_require__(69312);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhysical.ts
var MeshPhysical = __webpack_require__(65349);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshStandard.ts
var MeshStandard = __webpack_require__(13076);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/MeshToon.ts
var MeshToon = __webpack_require__(46584);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/mat/Points.ts
var Points = __webpack_require__(83760);
;// CONCATENATED MODULE: ../src/editor/components/panels/params/components/extras/nodes/sop/utils/decompose/DecomposeDispatch.ts












function matNodeTypeForMaterial(material) {
  if (material instanceof three_module.LineBasicMaterial) {
    return LineBasic/* LineBasicMatNode.type */.N.type();
  }
  if (material instanceof three_module.MeshBasicMaterial) {
    return MeshBasic/* MeshBasicMatNode.type */.F.type();
  }
  if (material instanceof three_module.MeshLambertMaterial) {
    return MeshLambert/* MeshLambertMatNode.type */.k.type();
  }
  if (material instanceof three_module.MeshMatcapMaterial) {
    return MeshMatcap/* MeshMatcapMatNode.type */.p.type();
  }
  if (material instanceof three_module.MeshNormalMaterial) {
    return MeshNormal/* MeshNormalMatNode.type */.S.type();
  }
  if (material instanceof three_module.MeshPhongMaterial) {
    return MeshPhong/* MeshPhongMatNode.type */.b.type();
  }
  if (material instanceof three_module.MeshToonMaterial) {
    return MeshToon/* MeshToonMatNode.type */.a.type();
  }
  if (material instanceof three_module.MeshStandardMaterial) {
    return MeshStandard/* MeshStandardMatNode.type */.Q.type();
  }
  if (material instanceof three_module.MeshPhysicalMaterial) {
    return MeshPhysical/* MeshPhysicalMatNode.type */.l.type();
  }
  if (material instanceof three_module.PointsMaterial) {
    return Points/* PointsMatNode.type */.k.type();
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/cop/Fetch.ts
var Fetch = __webpack_require__(17162);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/NodeContext.ts
var NodeContext = __webpack_require__(52070);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/ArrayUtils.ts
var ArrayUtils = __webpack_require__(87132);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Walker.ts
var Walker = __webpack_require__(742);
;// CONCATENATED MODULE: ../src/editor/components/panels/params/components/extras/nodes/sop/utils/decompose/DecomposeController.ts

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};















class DecomposeController {
  constructor(node) {
    this.node = node;
  }
  start() {
    return __async(this, null, function* () {
      const inputNode = this.node.io.inputs.input(0);
      if (!inputNode) {
        return this.node.states.error.set("input not found");
      }
      const container = yield inputNode.compute();
      const coreGroup = container.coreContent();
      if (!coreGroup) {
        return this.node.states.error.set("input invalid");
      }
      yield this.node.scene().batchUpdates(() => __async(this, null, function* () {
        try {
          yield this._runDecompose(coreGroup);
        } catch (err) {
          console.error(err);
        }
      }));
    });
  }
  _runDecompose(coreGroup) {
    return __async(this, null, function* () {
      const rootObjects = coreGroup.threejsObjects();
      const gatherer = new DecomposeGatherer(this.node);
      const step1 = () => __async(this, null, function* () {
        const cmdMulti = new Multiple/* MultipleCommand */.Y(this.node.scene());
        this._clearChildrenNode(cmdMulti);
        yield Editor/* Editor.instance */.M.instance().pushCommand(cmdMulti);
      });
      yield step1();
      const step2 = () => __async(this, null, function* () {
        const materialsNetwork2 = this.node.nodesByType("materialsNetwork")[0];
        const copNetwork2 = this.node.nodesByType("copNetwork")[0];
        const cmdMulti = new Multiple/* MultipleCommand */.Y(this.node.scene());
        const setName1Cmd = new NodeSetName/* NodeSetNameCommand */.$(this.node, materialsNetwork2, "MAT");
        const setName2Cmd = new NodeSetName/* NodeSetNameCommand */.$(this.node, copNetwork2, "COP");
        cmdMulti.pushCommand(setName1Cmd);
        cmdMulti.pushCommand(setName2Cmd);
        yield Editor/* Editor.instance */.M.instance().pushCommand(cmdMulti);
      });
      yield step2();
      const subnetInput = this.node.nodesByType("subnetInput")[0];
      const subnetOutput = this.node.nodesByType("subnetOutput")[0];
      const materialsNetwork = this.node.nodesByType("materialsNetwork")[0];
      const copNetwork = this.node.nodesByType("copNetwork")[0];
      const step3 = () => __async(this, null, function* () {
        const cmdMulti = new Multiple/* MultipleCommand */.Y(this.node.scene());
        const { materialsByUuid: materialsByUuid2, objectPathsByMaterialUuid: objectPathsByMaterialUuid2 } = gatherer.gatherMaterials({ rootObjects });
        const { materialNodeIndexByUuid: materialNodeIndexByUuid2 } = this._createMatAndSopNodes({
          cmdMulti,
          materialsNetwork,
          materialsByUuid: materialsByUuid2,
          objectPathsByMaterialUuid: objectPathsByMaterialUuid2
        });
        if (cmdMulti.commandsCount() > 0) {
          yield Editor/* Editor.instance */.M.instance().pushCommand(cmdMulti);
        }
        const matNodes2 = materialsNetwork.children();
        const sopNodes2 = this.node.nodesByType("material");
        return { materialNodeIndexByUuid: materialNodeIndexByUuid2, objectPathsByMaterialUuid: objectPathsByMaterialUuid2, materialsByUuid: materialsByUuid2, matNodes: matNodes2, sopNodes: sopNodes2 };
      });
      const { materialNodeIndexByUuid, objectPathsByMaterialUuid, materialsByUuid, matNodes, sopNodes } = yield step3();
      const step4 = () => __async(this, null, function* () {
        const { texturesByUuid: texturesByUuid2, textureRecordsByUuid: textureRecordsByUuid2, materialsByTextureUuid: materialsByTextureUuid2 } = gatherer.gatherTextures({
          matNodes,
          materialNodeIndexByUuid,
          materialsByUuid
        });
        const cmdMulti = new Multiple/* MultipleCommand */.Y(this.node.scene());
        this._createCopNodes({
          cmdMulti,
          copNetwork,
          // textureRecordsByUuid,
          texturesByUuid: texturesByUuid2
          // materialsByTextureUuid,
          // objectPathsByMaterialUuid,
        });
        if (cmdMulti.commandsCount() > 0) {
          yield Editor/* Editor.instance */.M.instance().pushCommand(cmdMulti);
        }
        const copNodes2 = copNetwork.nodesByType(Fetch/* FetchCopNode.type */.F.type());
        return { copNodes: copNodes2, texturesByUuid: texturesByUuid2, textureRecordsByUuid: textureRecordsByUuid2, materialsByTextureUuid: materialsByTextureUuid2 };
      });
      const { copNodes, texturesByUuid, textureRecordsByUuid, materialsByTextureUuid } = yield step4();
      const step5 = () => __async(this, null, function* () {
        const cmdMulti = new Multiple/* MultipleCommand */.Y(this.node.scene());
        this._setNodes({
          materialNodeIndexByUuid,
          objectPathsByMaterialUuid,
          materialsByUuid,
          texturesByUuid,
          textureRecordsByUuid,
          materialsByTextureUuid,
          subnetInput,
          matNodes,
          sopNodes,
          copNodes
        });
        this._connectSopNodes(cmdMulti, sopNodes, subnetInput, subnetOutput);
        if (cmdMulti.commandsCount() > 0) {
          yield Editor/* Editor.instance */.M.instance().pushCommand(cmdMulti);
        }
        return;
      });
      yield step5();
      const step6 = () => __async(this, null, function* () {
        const cmdMulti = new Multiple/* MultipleCommand */.Y(this.node.scene());
        this._setNodeNames({
          cmdMulti,
          materialsNetwork,
          copNetwork,
          matNodes,
          sopNodes,
          copNodes
        });
        if (cmdMulti.commandsCount() > 0) {
          yield Editor/* Editor.instance */.M.instance().pushCommand(cmdMulti);
        }
        return;
      });
      yield step6();
      const step7 = () => __async(this, null, function* () {
        const cmdMulti = new Multiple/* MultipleCommand */.Y(this.node.scene());
        this._setComment({ cmdMulti, matNodes, sopNodes, copNodes });
        if (cmdMulti.commandsCount() > 0) {
          yield Editor/* Editor.instance */.M.instance().pushCommand(cmdMulti);
        }
        return;
      });
      yield step7();
    });
  }
  _clearChildrenNode(cmdMulti) {
    const deleteCmd = new NodeDelete/* NodeDeleteCommand */.V(this.node, [...this.node.children()]);
    cmdMulti.pushCommand(deleteCmd);
    const createCmd1 = new NodeCreate/* NodeCreateCommand */.V(this.node, "subnetInput", new three_module.Vector2(0, 0));
    const createCmd2 = new NodeCreate/* NodeCreateCommand */.V(this.node, "subnetOutput", new three_module.Vector2(0, 0));
    const createCmd3 = new NodeCreate/* NodeCreateCommand */.V(this.node, "materialsNetwork", new three_module.Vector2(0, 0));
    const createCmd4 = new NodeCreate/* NodeCreateCommand */.V(this.node, "copNetwork", new three_module.Vector2(0, 0));
    cmdMulti.pushCommand(createCmd1);
    cmdMulti.pushCommand(createCmd2);
    cmdMulti.pushCommand(createCmd3);
    cmdMulti.pushCommand(createCmd4);
  }
  _createMatAndSopNodes(options) {
    const { cmdMulti, materialsNetwork, materialsByUuid, objectPathsByMaterialUuid } = options;
    const materialNodeIndexByUuid = /* @__PURE__ */ new Map();
    let index = 0;
    materialsByUuid.forEach((material) => {
      const nodeType = matNodeTypeForMaterial(material);
      if (!nodeType) {
        console.log("material not supported", material);
        return this.node.states.error.set("material not supported");
      }
      const createMatCmd = new NodeCreate/* NodeCreateCommand */.V(materialsNetwork, nodeType, new three_module.Vector2(0, 0));
      cmdMulti.pushCommand(createMatCmd);
      materialNodeIndexByUuid.set(material.uuid, index);
      index++;
      const objectPaths = objectPathsByMaterialUuid.get(material.uuid);
      if (objectPaths) {
        const createSopCmd = new NodeCreate/* NodeCreateCommand */.V(this.node, "material", new three_module.Vector2(0, 0));
        cmdMulti.pushCommand(createSopCmd);
      }
    });
    return { materialNodeIndexByUuid };
  }
  _createCopNodes(options) {
    const { cmdMulti, copNetwork, texturesByUuid } = options;
    texturesByUuid.forEach((texture, uuid) => {
      const createCopCmd = new NodeCreate/* NodeCreateCommand */.V(copNetwork, Fetch/* FetchCopNode.type */.F.type(), new three_module.Vector2(0, 0));
      cmdMulti.pushCommand(createCopCmd);
    });
  }
  _setNodes(options) {
    const {
      materialNodeIndexByUuid,
      materialsByUuid,
      texturesByUuid,
      textureRecordsByUuid,
      materialsByTextureUuid,
      objectPathsByMaterialUuid,
      subnetInput,
      matNodes,
      sopNodes,
      copNodes
    } = options;
    let index = 0;
    const copNodeByTextureUuid = /* @__PURE__ */ new Map();
    texturesByUuid.forEach((texture, uuid) => {
      const materialsSet = materialsByTextureUuid.get(uuid);
      if (!materialsSet) {
        console.warn("no mat");
        return;
      }
      const materialsArray = [];
      (0,SetUtils/* setToArray */.T_)(materialsSet, materialsArray);
      const firstMat = materialsArray[0];
      if (!firstMat) {
        console.warn("no first mat");
        return;
      }
      const texturesRecord = textureRecordsByUuid.get(firstMat.uuid);
      if (!texturesRecord) {
        console.warn("no record for mat", firstMat.uuid, firstMat);
        return;
      }
      const objectPathsSet = objectPathsByMaterialUuid.get(firstMat.uuid);
      if (!objectPathsSet) {
        console.warn("no object paths");
        return;
      }
      const objectPaths = [];
      (0,SetUtils/* setToArray */.T_)(objectPathsSet, objectPaths);
      const firstObjectPath = objectPaths[0];
      if (!firstObjectPath) {
        console.warn("no first object path");
        return;
      }
      let firstPropertyName = null;
      texturesRecord.forEach((recordTexture, propertyName) => {
        if (recordTexture && recordTexture.uuid == texture.uuid) {
          firstPropertyName = firstPropertyName || propertyName;
        }
      });
      const copNode = copNodes[index];
      copNode.p.node.setNode(subnetInput, { relative: true });
      copNode.p.group.set(firstObjectPath);
      copNode.p.name.set(firstPropertyName || "");
      copNodeByTextureUuid.set(uuid, copNode);
      index++;
    });
    materialsByUuid.forEach((material, uuid) => {
      const matNodeIndex = materialNodeIndexByUuid.get(uuid);
      if (matNodeIndex == null) {
        console.warn("matNodeIndex null for mat", material);
        return;
      }
      const texturesRecord = textureRecordsByUuid.get(uuid);
      if (!texturesRecord) {
        console.warn("no record for mat", uuid, matNodeIndex);
        return;
      }
      const matNode = matNodes[matNodeIndex];
      const sopNode = sopNodes[matNodeIndex];
      if (!(matNode && sopNode)) {
        console.warn("not matNode/sopNode", matNodeIndex, material);
        return;
      }
      const objectPathsSet = objectPathsByMaterialUuid.get(material.uuid);
      if (objectPathsSet) {
        const objectPathsArray = [];
        (0,SetUtils/* setToArray */.T_)(objectPathsSet, objectPathsArray);
        sopNode.p.group.set(objectPathsArray.join(" "));
        sopNode.p.material.setNode(matNode, { relative: true });
      } else {
        console.warn("no object path for mat", matNodeIndex, material);
      }
      const copNodesRecord = /* @__PURE__ */ new Map();
      texturesRecord.forEach((texture, propertyName) => {
        if (texture) {
          const copNode = copNodeByTextureUuid.get(texture.uuid);
          if (copNode) {
            copNodesRecord.set(propertyName, copNode);
          } else {
            console.warn("no cop node found for texture", propertyName, texture);
          }
        }
      });
      matNode.setParamsFromMaterial(material, copNodesRecord);
    });
    return {};
  }
  _connectSopNodes(cmdMulti, sopNodes, subnetInput, subnetOutput) {
    let prevSopNode = subnetInput;
    for (const sopNode of sopNodes) {
      const connectCmd = new NodeConnect/* NodeConnectCommand */.g(this.node, prevSopNode, sopNode, 0, 0);
      cmdMulti.pushCommand(connectCmd);
      prevSopNode = sopNode;
    }
    if (prevSopNode) {
      const connectCmd = new NodeConnect/* NodeConnectCommand */.g(this.node, prevSopNode, subnetOutput, 0, 0);
      cmdMulti.pushCommand(connectCmd);
    }
  }
  _setNodeNames(options) {
    const { cmdMulti, materialsNetwork, copNetwork, sopNodes, copNodes } = options;
    const groupShortByMatNodeId = /* @__PURE__ */ new Map();
    for (const sopNode of sopNodes) {
      const group = sopNode.pv.group;
      const groupShort = group.split(" ")[0];
      const setNameCmd = new NodeSetName/* NodeSetNameCommand */.$(this.node, sopNode, `material_${groupShort}`);
      cmdMulti.pushCommand(setNameCmd);
      const matNode = sopNode.pv.material.nodeWithContext(NodeContext/* NodeContext.MAT */.sy.MAT);
      if (matNode) {
        const setNameCmd2 = new NodeSetName/* NodeSetNameCommand */.$(materialsNetwork, matNode, `${matNode.type()}_${groupShort}`);
        cmdMulti.pushCommand(setNameCmd2);
        groupShortByMatNodeId.set(matNode.graphNodeId(), groupShort);
      }
    }
    for (const copNode of copNodes) {
      let group = null;
      const referencingNodes = [];
      copNode.scene().referencesController.referencingNodes(copNode, referencingNodes);
      for (const referencingNode of referencingNodes) {
        const groupShort = groupShortByMatNodeId.get(referencingNode.graphNodeId());
        if (groupShort) {
          group = group || groupShort;
        }
      }
      const nameElements = [];
      ArrayUtils/* ArrayUtils.compact */.BB.compact([copNode.type(), copNode.pv.name, group], nameElements);
      const setNameCmd = new NodeSetName/* NodeSetNameCommand */.$(copNetwork, copNode, nameElements.join("_"));
      cmdMulti.pushCommand(setNameCmd);
    }
    return {};
  }
  _setComment(options) {
    const { cmdMulti, matNodes, sopNodes, copNodes } = options;
    const totalNodesCount = matNodes.length + sopNodes.length + copNodes.length;
    const _commentContent = () => {
      if (totalNodesCount == 0) {
        return "0 nodes created";
      }
      const lines = [];
      const nodeLine = (node) => {
        const label = node.name();
        const path = Walker/* CoreWalker.relativePath */.s$.relativePath(this.node, node);
        return `- [${label}](${path})`;
      };
      lines.push(`**${sopNodes.length} SOP NODES**:`);
      for (let sopNode of sopNodes) {
        lines.push(nodeLine(sopNode));
      }
      lines.push(`**${matNodes.length} MAT NODES**:`);
      for (let matNode of matNodes) {
        lines.push(nodeLine(matNode));
      }
      lines.push(`**${copNodes.length} COP NODES**:`);
      for (let copNode of copNodes) {
        lines.push(nodeLine(copNode));
      }
      return lines.join("\n");
    };
    const commentContent = _commentContent();
    const parent = this.node.parent();
    if (parent) {
      const cmd = new NodeSetComment/* NodeSetCommentCommand */.U(parent, this.node, commentContent);
      cmdMulti.pushCommand(cmd);
    }
  }
}

;// CONCATENATED MODULE: ../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue?vue&type=script&lang=ts
var Decomposevue_type_script_lang_ts_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





let nodeIdsWithDecomposeInProgress = /* @__PURE__ */ new Set();
/* harmony default export */ var Decomposevue_type_script_lang_ts = ((0,runtime_core_esm_bundler/* defineComponent */.aZ)({
  name: "extras-nodes-sop-Decompose",
  // components: {CubeIcon},
  props: {
    nodeId: {
      type: Number,
      default: null
    }
  },
  setup(props) {
    const node = StoreController/* StoreController.engine.node */.F.engine.node(props.nodeId);
    const displayed = (0,reactivity_esm_bundler/* ref */.iH)(node != null);
    if (!node) {
      console.warn("null: no node found");
    }
    (0,runtime_core_esm_bundler/* onMounted */.bv)(_addListener);
    (0,runtime_core_esm_bundler/* onUnmounted */.Ah)(_removeListener);
    function _addListener() {
      _removeListener();
      node.addEventListener(Decompose/* DECOMPOSE_EVENT_TYPE */.Y, decompose);
    }
    function _removeListener() {
      node.removeEventListener(Decompose/* DECOMPOSE_EVENT_TYPE */.Y, decompose);
    }
    function decompose() {
      return Decomposevue_type_script_lang_ts_async(this, null, function* () {
        const nodeId = node.graphNodeId();
        if (nodeIdsWithDecomposeInProgress.has(nodeId)) {
          return;
        }
        nodeIdsWithDecomposeInProgress.add(nodeId);
        const decomposeController = new DecomposeController(node);
        yield decomposeController.start();
        const autoLayout = new AutoLayout/* CoreAutoLayout */.$();
        autoLayout.traverseNode(node);
        nodeIdsWithDecomposeInProgress.delete(nodeId);
      });
    }
    return {
      displayed,
      decompose
    };
  }
}));

;// CONCATENATED MODULE: ../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue?vue&type=script&lang=ts
 
// EXTERNAL MODULE: ../node_modules/vue-loader/dist/exportHelper.js
var exportHelper = __webpack_require__(6959);
;// CONCATENATED MODULE: ../src/editor/components/panels/params/components/extras/nodes/sop/Decompose.vue




;
const __exports__ = /*#__PURE__*/(0,exportHelper/* default */.Z)(Decomposevue_type_script_lang_ts, [['render',render]])

/* harmony default export */ var sop_Decompose = (__exports__);

/***/ })

}])
//# sourceMappingURL=_polygonjs_polygonjs_src_engine_nodes_mat_utils_UniformsFogController_ts-src_editor_component-6ba838.4b0947c439b3cb2086dd.js.map