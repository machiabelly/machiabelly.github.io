(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Instance_ts"],{

/***/ 68002:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ addPerspectiveCameraOBJWithOrbitControls; }
/* harmony export */ });

function addPerspectiveCameraOBJWithOrbitControls(root) {
  const perspectiveCamera1 = root.createNode("perspectiveCamera");
  perspectiveCamera1.p.t.set([5, 5, 5]);
  const events1 = perspectiveCamera1.createNode("eventsNetwork");
  const orbitsControls = events1.createNode("cameraOrbitControls");
  perspectiveCamera1.p.controls.setNode(orbitsControls);
  return { perspectiveCamera1 };
}


/***/ }),

/***/ 87757:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_core_loader_AssetsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29248);
/* harmony import */ var _ExampleUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(68002);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const geo = root.createNode("geo");
  const file = geo.createNode("fileOBJ");
  file.p.url.set(`${_polygonjs_polygonjs_src_core_loader_AssetsUtils__WEBPACK_IMPORTED_MODULE_0__/* .ASSETS_ROOT */ .V}/models/dolphin.obj`);
  const hierarchy = geo.createNode("hierarchy");
  hierarchy.setInput(0, file);
  hierarchy.p.mode.set(1);
  const transform = geo.createNode("transform");
  transform.setInput(0, hierarchy);
  transform.p.scale.set(0.05);
  transform.p.r.y.set(90);
  const sphere = geo.createNode("sphere");
  const scatter = geo.createNode("scatter");
  scatter.setInput(0, sphere);
  scatter.p.pointsCount.set(5e3);
  const jitter = geo.createNode("jitter");
  jitter.setInput(0, scatter);
  const instance = geo.createNode("instance");
  instance.setInput(0, transform);
  instance.setInput(1, jitter);
  instance.flags.display.set(true);
  const MAT = root.createNode("materialsNetwork");
  MAT.setName("MAT");
  const material = MAT.createNode("meshLambertBuilder");
  const output = material.createNode("output");
  const instanceTransform = material.createNode("instanceTransform");
  output.setInput("position", instanceTransform, "position");
  output.setInput("normal", instanceTransform, "normal");
  instance.p.material.setNode(material);
  instance.uiData.setComment(
    `This examples demonstrates how to create instances,
which allow to display multiple geometries.

In this case, we are loading a dolphin geometry, which is about 1400 polygons,
and **instancing it 5000 times**.

This gives us about **7 millions polygons**!`
  );
  root.createNode("hemisphereLight");
  const { perspectiveCamera1 } = (0,_ExampleUtils__WEBPACK_IMPORTED_MODULE_1__/* .addPerspectiveCameraOBJWithOrbitControls */ .n)(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [instance],
    autoLayout: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Instance_ts.ad9dcd7d9c959de35205.js.map