{"version":3,"file":"_polygonjs_polygonjs_src_engine_nodes_mat_LineBasic_ts-_polygonjs_polygonjs_src_engine_nodes_-af07fa.4618d06f61d54b5b8e7a.js","mappings":"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","sources":["webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/LineBasic.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshBasic.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureMatcapMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshMatcap.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhong.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshPhysical.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshStandard.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/MeshToon.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/Points.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/ColorsController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/FlatShadingController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/MeshPhysicalController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/PointsSizeController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureAOMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureAlphaMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureBumpMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureDisplacementMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureEmissiveMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureEnvMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureEnvMapSimpleController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureGradientMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureLightMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureMetalnessRoughnessMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureNormalMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/TextureSpecularMapController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/WireframeController.ts","webpack:///../@polygonjs/polygonjs/src/engine/nodes/mat/utils/_BaseTextureController.ts","webpack:///../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Mat.ts"],"sourcesContent":["/**\n * Creates a LineBasicMaterial, used to render lines\n *\n *\n */\nimport {LineBasicMaterial} from 'three';\nimport {PrimitiveMatNode} from './_Base';\n\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\n\ninterface LineBasicBuilderControllers extends AdvancedCommonControllers {}\nclass LineBasicMatParamsConfig extends AdvancedCommonParamConfig(NodeParamsConfig) {\n\t/** @param line color */\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t/** @param line width */\n\tlineWidth = ParamConfig.FLOAT(1, {\n\t\trange: [1, 10],\n\t\trangeLocked: [true, false],\n\t});\n}\nconst ParamsConfig = new LineBasicMatParamsConfig();\n\nexport class LineBasicMatNode extends PrimitiveMatNode<LineBasicMaterial, LineBasicMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.LINE_BASIC {\n\t\treturn MatType.LINE_BASIC;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new LineBasicMaterial({\n\t\t\tcolor: 0xffffff,\n\t\t\tlinewidth: 1,\n\t\t});\n\t}\n\treadonly controllers: LineBasicBuilderControllers = {\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis._material.color.copy(this.pv.color);\n\t\tthis._material.linewidth = this.pv.lineWidth;\n\t\tthis._material.needsUpdate = true;\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","/**\n * Creates a Mesh Basic Material\n *\n * @remarks\n * This material only emits a color and does not react to light. It is therefore the less resource intensive material.\n *\n */\n\nimport {MeshBasicMaterial} from 'three';\nimport {Texture} from 'three';\ninterface MeshBasicMaterialWithLightMap extends MeshBasicMaterial {\n\tlightMap: Texture | null;\n\tlightMapIntensity: number;\n}\n\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {FogController, FogParamConfig, FogControllers} from './utils/FogController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonParamConfig,\n\tAdvancedCommonControllers,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {TextureAOMapController, AOMapParamConfig, TextureAOMapControllers} from './utils/TextureAOMapController';\nimport {\n\tTextureEnvMapSimpleController,\n\tEnvMapSimpleParamConfig,\n\tTextureEnvMapSimpleControllers,\n} from './utils/TextureEnvMapSimpleController';\nimport {\n\tTextureLightMapController,\n\tLightMapParamConfig,\n\tTextureLightMapControllers,\n} from './utils/TextureLightMapController';\nimport {WireframeController, WireframeParamConfig, WireframeControllers} from './utils/WireframeController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\n\ninterface MeshBasicControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tFogControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureAOMapControllers,\n\t\tTextureEnvMapSimpleControllers,\n\t\tTextureLightMapControllers,\n\t\tTextureMapControllers,\n\t\tWireframeControllers {}\nclass MeshBasicMatParamsConfig extends FogParamConfig(\n\tWireframeParamConfig(\n\t\tAdvancedCommonParamConfig(\n\t\t\t/* advanced */\n\t\t\tAdvancedFolderParamConfig(\n\t\t\t\tLightMapParamConfig(\n\t\t\t\t\tEnvMapSimpleParamConfig(\n\t\t\t\t\t\tAOMapParamConfig(\n\t\t\t\t\t\t\tAlphaMapParamConfig(\n\t\t\t\t\t\t\t\tMapParamConfig(\n\t\t\t\t\t\t\t\t\t/* textures */\n\t\t\t\t\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\t\t\t\t\tColorParamConfig(DefaultFolderParamConfig(NodeParamsConfig))\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicMatNode extends PrimitiveMatNode<MeshBasicMaterialWithLightMap, MeshBasicMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_BASIC {\n\t\treturn MatType.MESH_BASIC;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshBasicMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t}) as MeshBasicMaterialWithLightMap;\n\t}\n\n\treadonly controllers: MeshBasicControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\taoMap: new TextureAOMapController(this),\n\t\tenvMap: new TextureEnvMapSimpleController(this),\n\t\tfog: new FogController(this),\n\t\tlightMap: new TextureLightMapController(this),\n\t\tmap: new TextureMapController(this),\n\t\twireframe: new WireframeController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {Material} from 'three';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {MeshMatcapMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\n\nexport function MatcapMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a matcap map */\n\t\tuseMatcapMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureMatcapMapController));\n\t\t/** @param specify the matcap map COP node */\n\t\tmatcapMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureMatcapMapController, 'useMatcapMap'));\n\t};\n}\n\ntype TextureMatcapMaterial = MeshMatcapMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureMatcapMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn true; //(material as MeshMatcapMaterial).matcap != null;\n}\ntype TextureMatCapControllerCurrentMaterial = TextureMatcapMaterial; //| ShaderMaterial;\nclass TextureMatcapMapParamsConfig extends MatcapMapParamConfig(NodeParamsConfig) {}\nexport interface TextureMatcapMapControllers {\n\tmatcap: TextureMatcapMapController;\n}\nabstract class TextureMatcapMapMatNode extends TypedMatNode<\n\tTextureMatCapControllerCurrentMaterial,\n\tTextureMatcapMapParamsConfig\n> {\n\tcontrollers!: TextureMatcapMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureMatCapControllerCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureMatcapMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureMatcapMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useMatcapMap, this.node.p.matcapMap);\n\t}\n\tstatic override async update(node: TextureMatcapMapMatNode) {\n\t\tnode.controllers.matcap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureMatCapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'matcap', this.node.p.useMatcapMap, this.node.p.matcapMap);\n\t}\n\toverride getTextures(material: TextureMatCapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('matcap', material.matcap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureMatCapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('matcap');\n\t\tthis.node.p.useMatcapMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.matcapMap.setNode(mapNode, {relative: true});\n\t\t}\n\t}\n}\n","/**\n * Creates a Mesh Standard Material\n *\n * @remarks\n * This material needs lights to be visible.\n *\n */\nimport {MeshMatcapMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {\n\tTextureBumpMapController,\n\tBumpMapParamConfig,\n\tTextureBumpMapControllers,\n} from './utils/TextureBumpMapController';\nimport {\n\tTextureNormalMapController,\n\tNormalMapParamConfig,\n\tTextureNormalMapControllers,\n} from './utils/TextureNormalMapController';\nimport {\n\tTextureDisplacementMapController,\n\tDisplacementMapParamConfig,\n\tTextureDisplacementMapControllers,\n} from './utils/TextureDisplacementMapController';\nimport {\n\tTextureMatcapMapController,\n\tMatcapMapParamConfig,\n\tTextureMatcapMapControllers,\n} from './utils/TextureMatcapMapController';\nimport {FlatShadingController, FlatShadingParamConfig, FlatShadingControllers} from './utils/FlatShadingController';\nimport {FogController, FogParamConfig, FogControllers} from './utils/FogController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\ninterface MeshMatCapControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tFogControllers,\n\t\tFlatShadingControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureBumpMapControllers,\n\t\tTextureDisplacementMapControllers,\n\t\tTextureMapControllers,\n\t\tTextureMatcapMapControllers,\n\t\tTextureNormalMapControllers {}\n\nclass MeshMatCapMatParamsConfig extends FogParamConfig(\n\tAdvancedCommonParamConfig(\n\t\tFlatShadingParamConfig(\n\t\t\t/* advanced */\n\t\t\tAdvancedFolderParamConfig(\n\t\t\t\tNormalMapParamConfig(\n\t\t\t\t\tDisplacementMapParamConfig(\n\t\t\t\t\t\tBumpMapParamConfig(\n\t\t\t\t\t\t\tAlphaMapParamConfig(\n\t\t\t\t\t\t\t\tMapParamConfig(\n\t\t\t\t\t\t\t\t\tMatcapMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t/* textures */\n\t\t\t\t\t\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\t\t\t\t\t\tColorParamConfig(DefaultFolderParamConfig(NodeParamsConfig))\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshMatCapMatParamsConfig();\n\nexport class MeshMatcapMatNode extends PrimitiveMatNode<MeshMatcapMaterial, MeshMatCapMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_MATCAP {\n\t\treturn MatType.MESH_MATCAP;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshMatcapMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\n\treadonly controllers: MeshMatCapControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\tbumpMap: new TextureBumpMapController(this),\n\t\tdisplacementMap: new TextureDisplacementMapController(this),\n\t\tfog: new FogController(this),\n\t\tflatShading: new FlatShadingController(this),\n\t\tmap: new TextureMapController(this),\n\t\tmatcap: new TextureMatcapMapController(this),\n\t\tnormalMap: new TextureNormalMapController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","/**\n * Creates a Mesh Phong Material\n *\n * @remarks\n * This material needs lights to be visible. While not as photorealistic as the MeshStandardMaterial, it is very cheap to process.\n *\n */\nimport {MeshPhongMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {\n\tTextureBumpMapController,\n\tBumpMapParamConfig,\n\tTextureBumpMapControllers,\n} from './utils/TextureBumpMapController';\nimport {\n\tTextureNormalMapController,\n\tNormalMapParamConfig,\n\tTextureNormalMapControllers,\n} from './utils/TextureNormalMapController';\nimport {\n\tTextureSpecularMapController,\n\tSpecularMapParamConfig,\n\tTextureSpecularMapControllers,\n} from './utils/TextureSpecularMapController';\nimport {\n\tTextureEnvMapSimpleController,\n\tEnvMapSimpleParamConfig,\n\tTextureEnvMapSimpleControllers,\n} from './utils/TextureEnvMapSimpleController';\nimport {\n\tTextureEmissiveMapController,\n\tEmissiveMapParamConfig,\n\tTextureEmissiveMapControllers,\n} from './utils/TextureEmissiveMapController';\nimport {\n\tTextureDisplacementMapController,\n\tDisplacementMapParamConfig,\n\tTextureDisplacementMapControllers,\n} from './utils/TextureDisplacementMapController';\nimport {\n\tTextureLightMapController,\n\tLightMapParamConfig,\n\tTextureLightMapControllers,\n} from './utils/TextureLightMapController';\nimport {TextureAOMapController, AOMapParamConfig, TextureAOMapControllers} from './utils/TextureAOMapController';\nimport {FlatShadingController, FlatShadingParamConfig, FlatShadingControllers} from './utils/FlatShadingController';\nimport {WireframeController, WireframeControllers, WireframeParamConfig} from './utils/WireframeController';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\nimport {FogController, FogControllers, FogParamConfig} from './utils/FogController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\ninterface MeshPhongControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tFogControllers,\n\t\tFlatShadingControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureAOMapControllers,\n\t\tTextureBumpMapControllers,\n\t\tTextureDisplacementMapControllers,\n\t\tTextureEmissiveMapControllers,\n\t\tTextureEnvMapSimpleControllers,\n\t\tTextureLightMapControllers,\n\t\tTextureMapControllers,\n\t\tTextureNormalMapControllers,\n\t\tTextureSpecularMapControllers,\n\t\tWireframeControllers {}\nclass MeshPhongMatParamsConfig extends FogParamConfig(\n\tWireframeParamConfig(\n\t\tAdvancedCommonParamConfig(\n\t\t\tFlatShadingParamConfig(\n\t\t\t\t/* advanced */\n\t\t\t\tAdvancedFolderParamConfig(\n\t\t\t\t\tSpecularMapParamConfig(\n\t\t\t\t\t\tNormalMapParamConfig(\n\t\t\t\t\t\t\tLightMapParamConfig(\n\t\t\t\t\t\t\t\tEnvMapSimpleParamConfig(\n\t\t\t\t\t\t\t\t\tEmissiveMapParamConfig(\n\t\t\t\t\t\t\t\t\t\tDisplacementMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\tBumpMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\tAOMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\tAlphaMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* textures */\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tColorParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDefaultFolderParamConfig(NodeParamsConfig)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshPhongMatParamsConfig();\n\nexport class MeshPhongMatNode extends PrimitiveMatNode<MeshPhongMaterial, MeshPhongMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_PHONG {\n\t\treturn MatType.MESH_PHONG;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshPhongMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly controllers: MeshPhongControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\taoMap: new TextureAOMapController(this),\n\t\tbumpMap: new TextureBumpMapController(this),\n\t\tdisplacementMap: new TextureDisplacementMapController(this),\n\t\temissiveMap: new TextureEmissiveMapController(this),\n\t\tenvMap: new TextureEnvMapSimpleController(this),\n\t\tfog: new FogController(this),\n\t\tflatShading: new FlatShadingController(this),\n\t\tlightMap: new TextureLightMapController(this),\n\t\tmap: new TextureMapController(this),\n\t\tnormalMap: new TextureNormalMapController(this),\n\t\tspecularMap: new TextureSpecularMapController(this),\n\t\twireframe: new WireframeController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","/**\n * Creates a Mesh Physical Material\n *\n * @remarks\n * This material needs lights to be visible.\n *\n */\nimport {MeshPhysicalMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, EnvMapParamConfig, TextureEnvMapControllers} from './utils/TextureEnvMapController';\nimport {\n\tTextureBumpMapController,\n\tBumpMapParamConfig,\n\tTextureBumpMapControllers,\n} from './utils/TextureBumpMapController';\nimport {\n\tTextureNormalMapController,\n\tNormalMapParamConfig,\n\tTextureNormalMapControllers,\n} from './utils/TextureNormalMapController';\nimport {\n\tTextureEmissiveMapController,\n\tEmissiveMapParamConfig,\n\tTextureEmissiveMapControllers,\n} from './utils/TextureEmissiveMapController';\nimport {\n\tTextureMetalnessRoughnessMapController,\n\tMetalnessRoughnessMapParamConfig,\n\tTextureMetalnessRoughnessMapControllers,\n} from './utils/TextureMetalnessRoughnessMapController';\nimport {MeshPhysicalController, MeshPhysicalControllers, MeshPhysicalParamConfig} from './utils/MeshPhysicalController';\nimport {\n\tTextureLightMapController,\n\tLightMapParamConfig,\n\tTextureLightMapControllers,\n} from './utils/TextureLightMapController';\nimport {\n\tTextureDisplacementMapController,\n\tDisplacementMapParamConfig,\n\tTextureDisplacementMapControllers,\n} from './utils/TextureDisplacementMapController';\nimport {TextureAOMapController, AOMapParamConfig, TextureAOMapControllers} from './utils/TextureAOMapController';\nimport {WireframeController, WireframeControllers, WireframeParamConfig} from './utils/WireframeController';\nimport {FogController, FogControllers, FogParamConfig} from './utils/FogController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\ninterface MeshPhysicalMatControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureAOMapControllers,\n\t\tTextureBumpMapControllers,\n\t\tTextureDisplacementMapControllers,\n\t\tTextureEmissiveMapControllers,\n\t\tTextureEnvMapControllers,\n\t\tTextureLightMapControllers,\n\t\tTextureMapControllers,\n\t\tTextureMetalnessRoughnessMapControllers,\n\t\tTextureNormalMapControllers,\n\t\tMeshPhysicalControllers,\n\t\tFogControllers,\n\t\tWireframeControllers {}\nclass MeshPhysicalMatParamsConfig extends FogParamConfig(\n\tWireframeParamConfig(\n\t\tAdvancedCommonParamConfig(\n\t\t\t/* advanced */\n\t\t\tAdvancedFolderParamConfig(\n\t\t\t\tMeshPhysicalParamConfig(\n\t\t\t\t\tMetalnessRoughnessMapParamConfig(\n\t\t\t\t\t\tNormalMapParamConfig(\n\t\t\t\t\t\t\tLightMapParamConfig(\n\t\t\t\t\t\t\t\tEnvMapParamConfig(\n\t\t\t\t\t\t\t\t\tEmissiveMapParamConfig(\n\t\t\t\t\t\t\t\t\t\tDisplacementMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\tBumpMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\tAOMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\tAlphaMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* textures */\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tColorParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDefaultFolderParamConfig(NodeParamsConfig)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshPhysicalMatParamsConfig();\n\nexport class MeshPhysicalMatNode extends PrimitiveMatNode<MeshPhysicalMaterial, MeshPhysicalMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_PHYSICAL {\n\t\treturn MatType.MESH_PHYSICAL;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshPhysicalMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t\tmetalness: 1,\n\t\t\troughness: 0,\n\t\t});\n\t}\n\n\treadonly controllers: MeshPhysicalMatControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\taoMap: new TextureAOMapController(this),\n\t\tbumpMap: new TextureBumpMapController(this),\n\t\tdisplacementMap: new TextureDisplacementMapController(this),\n\t\temissiveMap: new TextureEmissiveMapController(this),\n\t\tenvMap: new TextureEnvMapController(this),\n\t\tfog: new FogController(this),\n\t\tlightMap: new TextureLightMapController(this),\n\t\tmap: new TextureMapController(this),\n\t\tmetalnessRoughnessMap: new TextureMetalnessRoughnessMapController(this),\n\t\tnormalMap: new TextureNormalMapController(this),\n\t\tphysical: new MeshPhysicalController(this),\n\t\twireframe: new WireframeController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","/**\n * Creates a Mesh Standard Material\n *\n * @remarks\n * This material needs lights to be visible.\n *\n */\nimport {MeshStandardMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, EnvMapParamConfig, TextureEnvMapControllers} from './utils/TextureEnvMapController';\nimport {\n\tTextureBumpMapController,\n\tBumpMapParamConfig,\n\tTextureBumpMapControllers,\n} from './utils/TextureBumpMapController';\nimport {\n\tTextureNormalMapController,\n\tNormalMapParamConfig,\n\tTextureNormalMapControllers,\n} from './utils/TextureNormalMapController';\nimport {\n\tTextureEmissiveMapController,\n\tEmissiveMapParamConfig,\n\tTextureEmissiveMapControllers,\n} from './utils/TextureEmissiveMapController';\nimport {\n\tTextureMetalnessRoughnessMapController,\n\tMetalnessRoughnessMapParamConfig,\n\tTextureMetalnessRoughnessMapControllers,\n} from './utils/TextureMetalnessRoughnessMapController';\nimport {\n\tTextureLightMapController,\n\tLightMapParamConfig,\n\tTextureLightMapControllers,\n} from './utils/TextureLightMapController';\nimport {\n\tTextureDisplacementMapController,\n\tDisplacementMapParamConfig,\n\tTextureDisplacementMapControllers,\n} from './utils/TextureDisplacementMapController';\nimport {FlatShadingController, FlatShadingParamConfig, FlatShadingControllers} from './utils/FlatShadingController';\nimport {TextureAOMapController, AOMapParamConfig, TextureAOMapControllers} from './utils/TextureAOMapController';\nimport {WireframeController, WireframeControllers, WireframeParamConfig} from './utils/WireframeController';\nimport {FogController, FogControllers, FogParamConfig} from './utils/FogController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\ninterface MeshStandardControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tFlatShadingControllers,\n\t\tFogControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureAOMapControllers,\n\t\tTextureBumpMapControllers,\n\t\tTextureDisplacementMapControllers,\n\t\tTextureEmissiveMapControllers,\n\t\tTextureEnvMapControllers,\n\t\tTextureLightMapControllers,\n\t\tTextureMapControllers,\n\t\tTextureMetalnessRoughnessMapControllers,\n\t\tTextureNormalMapControllers,\n\t\tWireframeControllers {}\nclass MeshStandardMatParamsConfig extends FogParamConfig(\n\tWireframeParamConfig(\n\t\tAdvancedCommonParamConfig(\n\t\t\tFlatShadingParamConfig(\n\t\t\t\t/* advanced */\n\t\t\t\tAdvancedFolderParamConfig(\n\t\t\t\t\tMetalnessRoughnessMapParamConfig(\n\t\t\t\t\t\tNormalMapParamConfig(\n\t\t\t\t\t\t\tLightMapParamConfig(\n\t\t\t\t\t\t\t\tEnvMapParamConfig(\n\t\t\t\t\t\t\t\t\tEmissiveMapParamConfig(\n\t\t\t\t\t\t\t\t\t\tDisplacementMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\tBumpMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\tAOMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\tAlphaMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t/* textures */\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tColorParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDefaultFolderParamConfig(NodeParamsConfig)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardMatNode extends PrimitiveMatNode<MeshStandardMaterial, MeshStandardMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_STANDARD {\n\t\treturn MatType.MESH_STANDARD;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshStandardMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t\tmetalness: 1,\n\t\t\troughness: 0,\n\t\t});\n\t}\n\n\treadonly controllers: MeshStandardControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\taoMap: new TextureAOMapController(this),\n\t\tbumpMap: new TextureBumpMapController(this),\n\t\tdisplacementMap: new TextureDisplacementMapController(this),\n\t\temissiveMap: new TextureEmissiveMapController(this),\n\t\tenvMap: new TextureEnvMapController(this),\n\t\tfog: new FogController(this),\n\t\tflatShading: new FlatShadingController(this),\n\t\tlightMap: new TextureLightMapController(this),\n\t\tmap: new TextureMapController(this),\n\t\tmetalnessRoughnessMap: new TextureMetalnessRoughnessMapController(this),\n\t\tnormalMap: new TextureNormalMapController(this),\n\t\twireframe: new WireframeController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","/**\n * Creates a Mesh Toon Material\n *\n * @remarks\n * This material needs lights to be visible. While not as photorealistic as the MeshStandardMaterial, it is very cheap to process.\n *\n */\nimport {MeshToonMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {\n\tTextureBumpMapController,\n\tBumpMapParamConfig,\n\tTextureBumpMapControllers,\n} from './utils/TextureBumpMapController';\nimport {\n\tTextureEmissiveMapController,\n\tEmissiveMapParamConfig,\n\tTextureEmissiveMapControllers,\n} from './utils/TextureEmissiveMapController';\nimport {\n\tTextureGradientMapController,\n\tGradientMapParamConfig,\n\tTextureGradientMapControllers,\n} from './utils/TextureGradientMapController';\nimport {\n\tTextureNormalMapController,\n\tNormalMapParamConfig,\n\tTextureNormalMapControllers,\n} from './utils/TextureNormalMapController';\nimport {\n\tTextureDisplacementMapController,\n\tDisplacementMapParamConfig,\n\tTextureDisplacementMapControllers,\n} from './utils/TextureDisplacementMapController';\nimport {\n\tTextureLightMapController,\n\tLightMapParamConfig,\n\tTextureLightMapControllers,\n} from './utils/TextureLightMapController';\nimport {TextureAOMapController, AOMapParamConfig, TextureAOMapControllers} from './utils/TextureAOMapController';\nimport {WireframeController, WireframeControllers, WireframeParamConfig} from './utils/WireframeController';\nimport {FogController, FogControllers, FogParamConfig} from './utils/FogController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\ninterface MeshToonControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tFogControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureAOMapControllers,\n\t\tTextureBumpMapControllers,\n\t\tTextureDisplacementMapControllers,\n\t\tTextureEmissiveMapControllers,\n\t\tTextureGradientMapControllers,\n\t\tTextureLightMapControllers,\n\t\tTextureMapControllers,\n\t\tTextureNormalMapControllers,\n\t\tWireframeControllers {}\nclass MeshToonMatParamsConfig extends FogParamConfig(\n\tWireframeParamConfig(\n\t\tAdvancedCommonParamConfig(\n\t\t\t/* advanced */\n\t\t\tAdvancedFolderParamConfig(\n\t\t\t\tNormalMapParamConfig(\n\t\t\t\t\tLightMapParamConfig(\n\t\t\t\t\t\tGradientMapParamConfig(\n\t\t\t\t\t\t\tEmissiveMapParamConfig(\n\t\t\t\t\t\t\t\tDisplacementMapParamConfig(\n\t\t\t\t\t\t\t\t\tBumpMapParamConfig(\n\t\t\t\t\t\t\t\t\t\tAOMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\tAlphaMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\tMapParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t/* textures */\n\t\t\t\t\t\t\t\t\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tColorParamConfig(DefaultFolderParamConfig(NodeParamsConfig))\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new MeshToonMatParamsConfig();\n\nexport class MeshToonMatNode extends PrimitiveMatNode<MeshToonMaterial, MeshToonMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.MESH_TOON {\n\t\treturn MatType.MESH_TOON;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new MeshToonMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly controllers: MeshToonControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\taoMap: new TextureAOMapController(this),\n\t\tbumpMap: new TextureBumpMapController(this),\n\t\tdisplacementMap: new TextureDisplacementMapController(this),\n\t\temissiveMap: new TextureEmissiveMapController(this),\n\t\tfog: new FogController(this),\n\t\tgradientMap: new TextureGradientMapController(this),\n\t\tlightMap: new TextureLightMapController(this),\n\t\tmap: new TextureMapController(this),\n\t\tnormalMap: new TextureNormalMapController(this),\n\t\twireframe: new WireframeController(this),\n\t};\n\tprivate controllerNames = Object.keys(this.controllers) as Array<keyof MeshToonControllers>;\n\n\toverride initializeNode() {\n\t\tthis.params.onParamsCreated('init controllers', () => {\n\t\t\tfor (const controllerName of this.controllerNames) {\n\t\t\t\tthis.controllers[controllerName].initializeNode();\n\t\t\t}\n\t\t});\n\t}\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","/**\n * Creates a Points Material\n *\n * @remarks\n * This material can be added to points.\n *\n */\nimport {PointsMaterial} from 'three';\nimport {FrontSide} from 'three';\nimport {PrimitiveMatNode} from './_Base';\nimport {ColorsController, ColorParamConfig, ColorsControllers} from './utils/ColorsController';\nimport {\n\tAdvancedCommonController,\n\tAdvancedCommonControllers,\n\tAdvancedCommonParamConfig,\n} from './utils/AdvancedCommonController';\nimport {TextureMapController, MapParamConfig, TextureMapControllers} from './utils/TextureMapController';\nimport {\n\tTextureAlphaMapController,\n\tAlphaMapParamConfig,\n\tTextureAlphaMapControllers,\n} from './utils/TextureAlphaMapController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FogParamConfig, UniformFogController, UniformFogControllers} from './utils/UniformsFogController';\nimport {DefaultFolderParamConfig} from './utils/DefaultFolder';\nimport {TexturesFolderParamConfig} from './utils/TexturesFolder';\nimport {AdvancedFolderParamConfig} from './utils/AdvancedFolder';\nimport {PointsSizeController, PointsParamConfig, PointsSizeControllers} from './utils/PointsSizeController';\nimport {MatType} from '../../poly/registers/nodes/types/Mat';\ninterface PointsControllers\n\textends AdvancedCommonControllers,\n\t\tColorsControllers,\n\t\tPointsSizeControllers,\n\t\tTextureAlphaMapControllers,\n\t\tTextureMapControllers,\n\t\tUniformFogControllers {}\n\nclass PointsMatParamsConfig extends FogParamConfig(\n\tAdvancedCommonParamConfig(\n\t\t/* advanced */\n\t\tAdvancedFolderParamConfig(\n\t\t\tAlphaMapParamConfig(\n\t\t\t\tMapParamConfig(\n\t\t\t\t\t/* textures */\n\t\t\t\t\tTexturesFolderParamConfig(\n\t\t\t\t\t\tColorParamConfig(PointsParamConfig(DefaultFolderParamConfig(NodeParamsConfig)))\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t)\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsMatNode extends PrimitiveMatNode<PointsMaterial, PointsMatParamsConfig> {\n\toverride paramsConfig = ParamsConfig;\n\tstatic override type(): MatType.POINTS {\n\t\treturn MatType.POINTS;\n\t}\n\n\toverride createMaterial() {\n\t\treturn new PointsMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly controllers: PointsControllers = {\n\t\tcolors: new ColorsController(this),\n\t\tadvancedCommon: new AdvancedCommonController(this),\n\t\talphaMap: new TextureAlphaMapController(this),\n\t\tmap: new TextureMapController(this),\n\t\tpointsSize: new PointsSizeController(this),\n\t\tuniformFog: new UniformFogController(this),\n\t};\n\tprotected override controllersList = Object.values(this.controllers);\n\n\toverride async cook() {\n\t\tthis._material = this._material || this.createMaterial();\n\t\tawait Promise.all(this.controllersPromises(this._material));\n\n\t\tthis.setMaterial(this._material);\n\t}\n}\n","import {Constructor, Number3} from '../../../../types/GlobalTypes';\nimport {BaseController, SetParamsTextureNodesRecord} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {isBooleanTrue} from '../../../../core/BooleanValue';\nimport {ColorConversion} from '../../../../core/Color';\nimport {Color, Material, MeshBasicMaterial, MeshStandardMaterial} from 'three';\nimport {ShadowMaterial} from 'three';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param material color */\n\t\tcolor = ParamConfig.COLOR([1, 1, 1], {\n\t\t\t// conversion: ColorConversion.SRGB_TO_LINEAR,\n\t\t});\n\t\t/** @param defines if the color attribute on the geometry is used */\n\t\tuseVertexColors = ParamConfig.BOOLEAN(0, {separatorAfter: true});\n\t\t/** @param sets the material to transparent */\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\t/** @param sets the material opacity */\n\t\topacity = ParamConfig.FLOAT(1);\n\t\t/** @param sets the min alpha below which the material is invisible */\n\t\talphaTest = ParamConfig.FLOAT(0);\n\t};\n}\n\nexport type ColoredMaterial = MeshBasicMaterial | ShadowMaterial | MeshStandardMaterial;\nexport function isValidColoredMaterial(material?: Material): material is ColoredMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshBasicMaterial).color != null;\n}\n// class ColoredMaterial extends MeshB {\n// \tpublic color!: Color;\n// \t// vertexColors!: boolean;\n// \t// transparent!: boolean;\n// \t// depthTest!: boolean;\n// \t// alphaTest!: number;\n// }\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\nexport interface ColorsControllers {\n\tcolors: ColorsController;\n}\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcontrollers!: ColorsControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as ColoredMaterial | undefined;\n\t}\n}\nconst _tmpColor = new Color();\nconst _tmpColorArray: Number3 = [0, 0, 0];\nexport class ColorsController extends BaseController {\n\tconstructor(protected override node: ColoredMatNode) {\n\t\tsuper(node);\n\t}\n\tstatic async update(node: ColoredMatNode) {\n\t\tconst container = await node.compute();\n\t\tconst material = container.material();\n\t\tif (!isValidColoredMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tnode.controllers.colors.updateMaterial(material);\n\t}\n\n\toverride updateMaterial(material: ColoredMaterial) {\n\t\tconst pv = this.node.pv;\n\t\tmaterial.color.copy(pv.color);\n\t\tconst newVertexColor = isBooleanTrue(pv.useVertexColors);\n\t\tif (newVertexColor != material.vertexColors) {\n\t\t\tmaterial.vertexColors = newVertexColor;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tmaterial.opacity = pv.opacity;\n\t\tmaterial.transparent = pv.transparent;\n\t\tmaterial.alphaTest = pv.alphaTest;\n\t}\n\n\toverride setParamsFromMaterial(material: ColoredMaterial, record: SetParamsTextureNodesRecord) {\n\t\tconst p = this.node.p;\n\t\t_tmpColor.copy(material.color).toArray(_tmpColorArray);\n\t\tp.color.set(_tmpColorArray);\n\t\tp.color.setConversion(ColorConversion.NONE);\n\n\t\t//\n\t\tp.useVertexColors.set(material.vertexColors);\n\t\tp.opacity.set(material.opacity);\n\t\tp.transparent.set(material.transparent);\n\t\tp.alphaTest.set(material.alphaTest);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {\n\tMaterial,\n\tMeshLambertMaterial,\n\tMeshMatcapMaterial,\n\tMeshNormalMaterial,\n\tMeshPhongMaterial,\n\tMeshStandardMaterial,\n} from 'three';\nimport {TypedMatNode} from '../_Base';\nimport {BaseController, SetParamsTextureNodesRecord} from './_BaseController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n\nexport function FlatShadingParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param defines if the material is flat shaded */\n\t\tflatShading = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorAfter: true,\n\t\t});\n\t};\n}\n\nclass FlatShadingParamsConfig extends FlatShadingParamConfig(NodeParamsConfig) {}\nexport interface FlatShadingControllers {\n\tflatShading: FlatShadingController;\n}\ntype FlatShadingControllerCurrentMaterial =\n\t| MeshLambertMaterial\n\t| MeshMatcapMaterial\n\t| MeshNormalMaterial\n\t| MeshPhongMaterial\n\t| MeshStandardMaterial;\nfunction _isValidMaterial(material?: Material): material is FlatShadingControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshLambertMaterial).flatShading != null;\n}\n\nabstract class FlatShadingMapMatNode extends TypedMatNode<\n\tFlatShadingControllerCurrentMaterial,\n\tFlatShadingParamsConfig\n> {\n\tcontrollers!: FlatShadingControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as FlatShadingControllerCurrentMaterial | undefined;\n\t}\n}\n\nexport class FlatShadingController extends BaseController {\n\tconstructor(protected override node: FlatShadingMapMatNode) {\n\t\tsuper(node);\n\t}\n\n\tstatic async update(node: FlatShadingMapMatNode) {\n\t\tconst material = await node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tnode.controllers.flatShading.updateMaterial(material);\n\t}\n\toverride updateMaterial(material: FlatShadingControllerCurrentMaterial) {\n\t\tmaterial.flatShading = this.node.pv.flatShading;\n\t\t// if (this._material.flatShading != isBooleanTrue(this.pv.flatShading)) {\n\t\t// \tthis._material.flatShading = isBooleanTrue(this.pv.flatShading);\n\t\t// \tthis._material.needsUpdate = true;\n\t\t// }\n\t}\n\n\toverride setParamsFromMaterial(\n\t\tmaterial: FlatShadingControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tthis.node.p.flatShading.set(material.flatShading);\n\t}\n}\n","import {Constructor, Number2, Number3} from '../../../../types/GlobalTypes';\nimport {Material, MeshPhysicalMaterial} from 'three';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Color} from 'three';\nimport {isBooleanTrue} from '../../../../core/BooleanValue';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nimport {ColorConversion} from '../../../../core/Color';\n\n// in THREE 148, the object renders black when attenuation is 0\nconst ATTENUATION_DISTANCE_MIN = 0.0001;\n\nexport function MeshPhysicalParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param Represents the thickness of the clear coat layer, from 0.0 to 1.0 */\n\t\tclearcoat = ParamConfig.FLOAT(0, {separatorBefore: true});\n\t\t/** @param toggle if you want to use a roughness map */\n\t\tuseClearCoatMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(MeshPhysicalController));\n\t\t/** @param specify the roughness map COP node */\n\t\tclearcoatMap = ParamConfig.NODE_PATH('', NodePathOptions(MeshPhysicalController, 'useClearCoatMap'));\n\t\t/** @param toggle if you want to use a clear coat normal map */\n\t\tuseClearCoatNormalMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(MeshPhysicalController));\n\t\t/** @param specify the roughness map COP node */\n\t\tclearcoatNormalMap = ParamConfig.NODE_PATH(\n\t\t\t'',\n\t\t\tNodePathOptions(MeshPhysicalController, 'useClearCoatNormalMap')\n\t\t);\n\t\t/** @param How much the normal map affects the material. Typical ranges are 0-1 */\n\t\tclearcoatNormalScale = ParamConfig.VECTOR2([1, 1], {visibleIf: {useClearCoatNormalMap: 1}});\n\t\t/** @param clearcoatRoughness */\n\t\tclearcoatRoughness = ParamConfig.FLOAT(0);\n\t\t/** @param toggle if you want to use a clear cloat map */\n\t\tuseClearCoatRoughnessMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(MeshPhysicalController));\n\t\t/** @param specify the roughness map COP node */\n\t\tclearcoatRoughnessMap = ParamConfig.NODE_PATH(\n\t\t\t'',\n\t\t\tNodePathOptions(MeshPhysicalController, 'useClearCoatRoughnessMap')\n\t\t);\n\n\t\t/** @param toggle if you want to use sheen */\n\t\tuseSheen = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t});\n\t\t/** @param The intensity of the sheen layer, from 0.0 to 1.0. Default is 0.0. */\n\t\tsheen = ParamConfig.FLOAT(0, {\n\t\t\trange: [0, 1],\n\t\t\trangeLocked: [true, false],\n\t\t\tvisibleIf: {useSheen: 1},\n\t\t});\n\t\t/** @param If a color is assigned to this property, the material will use a special sheen BRDF intended for rendering cloth materials such as velvet. The sheen color provides the ability to create two-tone specular materials. null by default */\n\t\tsheenRoughness = ParamConfig.FLOAT(1, {\n\t\t\trange: [0, 1],\n\t\t\trangeLocked: [true, false],\n\t\t\tvisibleIf: {useSheen: 1},\n\t\t});\n\t\t/** @param If a color is assigned to this property, the material will use a special sheen BRDF intended for rendering cloth materials such as velvet. The sheen color provides the ability to create two-tone specular materials. null by default */\n\t\tsheenColor = ParamConfig.COLOR([1, 1, 1], {\n\t\t\tvisibleIf: {useSheen: 1},\n\t\t});\n\n\t\t/** @param toggle if you want to use iridescence */\n\t\tuseIridescence = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t});\n\t\t/** @param Iridescence amount */\n\t\tiridescence = ParamConfig.FLOAT(1, {\n\t\t\trange: [0, 10],\n\t\t\trangeLocked: [true, false],\n\t\t\tvisibleIf: {useIridescence: 1},\n\t\t});\n\t\t/** @param iridescence index of refraction */\n\t\tiridescenceIOR = ParamConfig.FLOAT(1.3, {\n\t\t\trange: [1, 10],\n\t\t\trangeLocked: [false, false],\n\t\t\tvisibleIf: {useIridescence: 1},\n\t\t});\n\t\t/** @param Iridescence Thickness Range */\n\t\tiridescenceThicknessRange = ParamConfig.VECTOR2([0, 1], {\n\t\t\tvisibleIf: {useIridescence: 1},\n\t\t});\n\t\t/** @param toggle if you want to use an iridescence map */\n\t\tuseIridescenceMap = ParamConfig.BOOLEAN(0, {\n\t\t\t...BooleanParamOptions(MeshPhysicalController),\n\t\t\tvisibleIf: {useIridescence: 1},\n\t\t});\n\t\t/** @param specify the iridescence map COP node */\n\t\tiridescenceMap = ParamConfig.NODE_PATH('', {\n\t\t\t...NodePathOptions(MeshPhysicalController, 'useIridescenceMap'),\n\t\t\tvisibleIf: {useIridescence: 1, useIridescenceMap: 1},\n\t\t});\n\t\t/** @param toggle if you want to use an iridescence map */\n\t\tuseIridescenceThicknessMap = ParamConfig.BOOLEAN(0, {\n\t\t\t...BooleanParamOptions(MeshPhysicalController),\n\t\t\tvisibleIf: {useIridescence: 1},\n\t\t});\n\t\t/** @param specify the iridescence map COP node */\n\t\tiridescenceThicknessMap = ParamConfig.NODE_PATH('', {\n\t\t\t...NodePathOptions(MeshPhysicalController, 'useIridescenceThicknessMap'),\n\t\t\tvisibleIf: {useIridescence: 1, useIridescenceThicknessMap: 1},\n\t\t});\n\n\t\t/** @param Degree of transmission (or optical transparency), from 0.0 to 1.0. Default is 0.0.\nThin, transparent or semitransparent, plastic or glass materials remain largely reflective even if they are fully transmissive. The transmission property can be used to model these materials.\nWhen transmission is non-zero, opacity should be set to 1.  */\n\t\ttransmission = ParamConfig.FLOAT(0, {\n\t\t\tseparatorBefore: true,\n\t\t\trange: [0, 1],\n\t\t});\n\t\t/** @param toggle if you want to use a transmission map */\n\t\tuseTransmissionMap = ParamConfig.BOOLEAN(0);\n\t\t/** @param specify the roughness map COP node */\n\t\ttransmissionMap = ParamConfig.NODE_PATH('', {visibleIf: {useTransmissionMap: 1}});\n\t\t/** @param Index-of-refraction for non-metallic materials */\n\t\tior = ParamConfig.FLOAT(1.5, {\n\t\t\trange: [1, 2.3333],\n\t\t\trangeLocked: [true, true],\n\t\t});\n\n\t\t/** @param thickness  */\n\t\tthickness = ParamConfig.FLOAT(0.01, {\n\t\t\trange: [0, 10],\n\t\t\trangeLocked: [true, false],\n\t\t});\n\t\t/** @param toggle if you want to use a thickness map */\n\t\tuseThicknessMap = ParamConfig.BOOLEAN(0);\n\t\t/** @param specify the roughness map COP node */\n\t\tthicknessMap = ParamConfig.NODE_PATH('', {visibleIf: {useThicknessMap: 1}});\n\t\t/** @param attenuation distance */\n\t\tattenuationDistance = ParamConfig.FLOAT(100, {\n\t\t\trange: [ATTENUATION_DISTANCE_MIN, 100],\n\t\t\trangeLocked: [true, false],\n\t\t\tstep: 0.01,\n\t\t});\n\t\t/** @param attenuation color */\n\t\tattenuationColor = ParamConfig.COLOR([1, 1, 1]);\n\t};\n}\n\ntype MeshPhysicalControllerCurrentMaterial = MeshPhysicalMaterial;\nexport function isValidMaterial(material?: Material): material is MeshPhysicalControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshPhysicalMaterial).clearcoatRoughness != null;\n}\nclass TextureClearCoatMapParamsConfig extends MeshPhysicalParamConfig(NodeParamsConfig) {}\nexport interface MeshPhysicalControllers {\n\tphysical: MeshPhysicalController;\n}\nabstract class TextureClearCoatMapMatNode extends TypedMatNode<\n\tMeshPhysicalControllerCurrentMaterial,\n\tTextureClearCoatMapParamsConfig\n> {\n\tcontrollers!: MeshPhysicalControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as MeshPhysicalControllerCurrentMaterial | undefined;\n\t}\n}\n\nconst tmpMeshPhysicalForIOR = new MeshPhysicalMaterial();\nconst tmpN2: Number2 = [0, 0];\nconst tmpN3: Number3 = [0, 0, 0];\n\nexport class MeshPhysicalController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureClearCoatMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useClearCoatMap, this.node.p.clearcoatMap);\n\t\tthis.add_hooks(this.node.p.useClearCoatNormalMap, this.node.p.clearcoatNormalMap);\n\t\tthis.add_hooks(this.node.p.useClearCoatRoughnessMap, this.node.p.clearcoatRoughnessMap);\n\t\tthis.add_hooks(this.node.p.useTransmissionMap, this.node.p.transmissionMap);\n\t\tthis.add_hooks(this.node.p.useThicknessMap, this.node.p.thicknessMap);\n\t\tthis.add_hooks(this.node.p.useIridescenceMap, this.node.p.iridescenceMap);\n\t}\n\tprivate _sheenColorClone = new Color();\n\tprivate _iridescenceRange: Number2 = [0, 0];\n\tstatic override async update(node: TextureClearCoatMapMatNode) {\n\t\tconst container = await node.compute();\n\t\tconst material = container.material();\n\t\tif (!isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tnode.controllers.physical.updateMaterial(material);\n\t}\n\n\toverride async updateMaterial(material: MeshPhysicalControllerCurrentMaterial) {\n\t\tconst pv = this.node.pv;\n\n\t\tconst mat = material as MeshPhysicalMaterial;\n\n\t\t// this is to get the reflectivity value\n\t\ttmpMeshPhysicalForIOR.ior = pv.ior;\n\t\tmat.reflectivity = tmpMeshPhysicalForIOR.reflectivity;\n\n\t\tmat.clearcoat = pv.clearcoat;\n\t\tif (mat.clearcoatNormalScale != null) {\n\t\t\tmat.clearcoatNormalScale.copy(pv.clearcoatNormalScale);\n\t\t}\n\t\tmat.clearcoatRoughness = pv.clearcoatRoughness;\n\t\t// ior is currently a getter/setter wrapper to set reflectivity, so currently conflicts with 'mat.reflectivity ='\n\t\t// mat.ior = this.node.pv.ior;\n\t\tif (isBooleanTrue(pv.useSheen)) {\n\t\t\tthis._sheenColorClone.copy(pv.sheenColor);\n\t\t\tmat.sheen = pv.sheen;\n\t\t\tmat.sheenRoughness = pv.sheenRoughness;\n\t\t\tmat.sheenColor = this._sheenColorClone;\n\t\t} else {\n\t\t\tmat.sheen = 0;\n\t\t}\n\t\tif (isBooleanTrue(pv.useIridescence)) {\n\t\t\tmat.iridescence = pv.iridescence;\n\t\t\tmat.iridescenceIOR = pv.iridescenceIOR;\n\t\t\tmat.iridescenceThicknessRange = pv.iridescenceThicknessRange.toArray(this._iridescenceRange);\n\t\t} else {\n\t\t\tmat.iridescence = 0;\n\t\t}\n\n\t\tmat.transmission = pv.transmission;\n\t\tmat.thickness = pv.thickness;\n\t\tmat.attenuationDistance = pv.attenuationDistance;\n\t\tmat.attenuationColor = pv.attenuationColor;\n\t\t// }\n\t\tawait Promise.all([\n\t\t\tthis._update(material, 'clearcoatMap', this.node.p.useClearCoatMap, this.node.p.clearcoatMap),\n\t\t\tthis._update(\n\t\t\t\tmaterial,\n\t\t\t\t'clearcoatNormalMap',\n\t\t\t\tthis.node.p.useClearCoatNormalMap,\n\t\t\t\tthis.node.p.clearcoatNormalMap\n\t\t\t),\n\t\t\tthis._update(\n\t\t\t\tmaterial,\n\t\t\t\t'clearcoatRoughnessMap',\n\t\t\t\tthis.node.p.useClearCoatRoughnessMap,\n\t\t\t\tthis.node.p.clearcoatRoughnessMap\n\t\t\t),\n\t\t\tthis._update(material, 'transmissionMap', this.node.p.useTransmissionMap, this.node.p.transmissionMap),\n\t\t\tthis._update(material, 'thicknessMap', this.node.p.useThicknessMap, this.node.p.thicknessMap),\n\t\t\tthis._update(material, 'iridescenceMap', this.node.p.useIridescenceMap, this.node.p.iridescenceMap),\n\t\t\tthis._update(\n\t\t\t\tmaterial,\n\t\t\t\t'iridescenceThicknessMap',\n\t\t\t\tthis.node.p.useIridescenceThicknessMap,\n\t\t\t\tthis.node.p.iridescenceThicknessMap\n\t\t\t),\n\t\t]);\n\t}\n\toverride getTextures(material: MeshPhysicalControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('clearcoatMap', material.clearcoatMap);\n\t\trecord.set('clearcoatNormalMap', material.clearcoatNormalMap);\n\t\trecord.set('clearcoatRoughnessMap', material.clearcoatRoughnessMap);\n\t\trecord.set('transmissionMap', material.transmissionMap);\n\t\trecord.set('thicknessMap', material.thicknessMap);\n\t\trecord.set('iridescenceMap', material.iridescenceMap);\n\t\trecord.set('iridescenceThicknessMap', material.iridescenceThicknessMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: MeshPhysicalControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst clearcoatMap = () => {\n\t\t\tconst mapNode = record.get('clearcoatMap');\n\t\t\tthis.node.p.useClearCoatMap.set(mapNode != null);\n\t\t\tif (mapNode) {\n\t\t\t\tthis.node.p.clearcoatMap.setNode(mapNode, {relative: true});\n\t\t\t}\n\t\t};\n\t\tconst clearcoatNormalMap = () => {\n\t\t\tconst mapNode = record.get('clearcoatNormalMap');\n\t\t\tthis.node.p.useClearCoatNormalMap.set(mapNode != null);\n\t\t\tif (mapNode) {\n\t\t\t\tthis.node.p.clearcoatNormalMap.setNode(mapNode, {relative: true});\n\t\t\t}\n\t\t};\n\t\tconst clearcoatRoughnessMap = () => {\n\t\t\tconst mapNode = record.get('clearcoatRoughnessMap');\n\t\t\tthis.node.p.useClearCoatRoughnessMap.set(mapNode != null);\n\t\t\tif (mapNode) {\n\t\t\t\tthis.node.p.clearcoatRoughnessMap.setNode(mapNode, {relative: true});\n\t\t\t}\n\t\t};\n\t\tconst transmissionMap = () => {\n\t\t\tconst mapNode = record.get('transmissionMap');\n\t\t\tthis.node.p.useTransmissionMap.set(mapNode != null);\n\t\t\tif (mapNode) {\n\t\t\t\tthis.node.p.transmissionMap.setNode(mapNode, {relative: true});\n\t\t\t}\n\t\t};\n\t\tconst thicknessMap = () => {\n\t\t\tconst mapNode = record.get('thicknessMap');\n\t\t\tthis.node.p.useThicknessMap.set(mapNode != null);\n\t\t\tif (mapNode) {\n\t\t\t\tthis.node.p.thicknessMap.setNode(mapNode, {relative: true});\n\t\t\t}\n\t\t};\n\t\tconst iridescenceMap = () => {\n\t\t\tconst mapNode = record.get('iridescenceMap');\n\t\t\tthis.node.p.useIridescenceMap.set(mapNode != null);\n\t\t\tif (mapNode) {\n\t\t\t\tthis.node.p.iridescenceMap.setNode(mapNode, {relative: true});\n\t\t\t}\n\t\t};\n\t\tconst iridescenceThicknessMap = () => {\n\t\t\tconst mapNode = record.get('iridescenceThicknessMap');\n\t\t\tthis.node.p.useIridescenceThicknessMap.set(mapNode != null);\n\t\t\tif (mapNode) {\n\t\t\t\tthis.node.p.iridescenceThicknessMap.setNode(mapNode, {relative: true});\n\t\t\t}\n\t\t};\n\t\tclearcoatMap();\n\t\tclearcoatNormalMap();\n\t\tclearcoatRoughnessMap();\n\t\ttransmissionMap();\n\t\tthicknessMap();\n\t\tiridescenceMap();\n\t\tiridescenceThicknessMap();\n\n\t\tconst p = this.node.p;\n\t\tp.ior.set(material.ior);\n\t\t//\n\t\tp.clearcoat.set(material.clearcoat);\n\t\tmaterial.clearcoatNormalScale.toArray(tmpN2);\n\t\tp.clearcoatNormalScale.set(tmpN2);\n\t\tp.clearcoatRoughness.set(material.clearcoatRoughness);\n\t\t//\n\t\tmaterial.sheenColor.toArray(tmpN3);\n\t\tp.sheenColor.set(tmpN3);\n\t\tp.sheenColor.setConversion(ColorConversion.NONE);\n\t\tp.sheen.set(material.sheen);\n\t\tp.sheenRoughness.set(material.sheenRoughness);\n\t\t//\n\t\tp.transmission.set(material.transmission);\n\t\tp.thickness.set(material.thickness);\n\t\tp.attenuationDistance.set(material.attenuationDistance);\n\t\tmaterial.attenuationColor.toArray(tmpN3);\n\t\tp.attenuationColor.set(tmpN3);\n\t\tp.attenuationColor.setConversion(ColorConversion.NONE);\n\t\t//\n\t\tp.iridescence.set(material.iridescence);\n\t\tp.iridescenceIOR.set(material.iridescenceIOR);\n\t\tp.iridescenceThicknessRange.set(material.iridescenceThicknessRange as Number2);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material, PointsMaterial} from 'three';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {isBooleanTrue} from '../../../../core/BooleanValue';\n\nexport interface PointsSizeControllers {\n\tpointsSize: PointsSizeController;\n}\nexport function PointsParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1, {\n\t\t\trange: [0, 10],\n\t\t\trangeLocked: [true, false],\n\t\t});\n\t\tsizeAttenuation = ParamConfig.BOOLEAN(1, {\n\t\t\tseparatorAfter: true,\n\t\t});\n\t};\n}\nclass PointsParamsConfig extends PointsParamConfig(NodeParamsConfig) {}\n\nfunction isValidMaterial(material?: Material): material is PointsMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as PointsMaterial).size != null;\n}\nclass PointsSizeMatNode extends TypedMatNode<PointsMaterial, PointsParamsConfig> {\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as PointsMaterial | undefined;\n\t}\n\tcontrollers!: PointsSizeControllers;\n}\n\nexport class PointsSizeController extends BaseController {\n\tconstructor(protected override node: PointsSizeMatNode) {\n\t\tsuper(node);\n\t}\n\tstatic async update(node: PointsSizeMatNode) {\n\t\tconst material = await node.material();\n\t\tif (!isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tnode.controllers.pointsSize.updateMaterial(material);\n\t}\n\toverride updateMaterial(material: PointsMaterial) {\n\t\tconst pv = this.node.pv;\n\t\tmaterial.size = pv.size;\n\t\tconst previousSizeAttenuation = material.sizeAttenuation;\n\t\tconst newSizeAttenuation = isBooleanTrue(pv.sizeAttenuation);\n\t\tif (previousSizeAttenuation != newSizeAttenuation) {\n\t\t\tmaterial.sizeAttenuation = newSizeAttenuation;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Material, MeshBasicMaterial} from 'three';\nimport {MeshLambertMaterial} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nexport function AOMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use an ambient occlusion map */\n\t\tuseAOMap = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureAOMapController),\n\t\t});\n\t\t/** @param specify the AO map COP node */\n\t\taoMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureAOMapController, 'useAOMap'));\n\t\t/** @param ambient occlusion intensity */\n\t\taoMapIntensity = ParamConfig.FLOAT(1, {range: [0, 1], rangeLocked: [false, false], visibleIf: {useAOMap: 1}});\n\t};\n}\n\ntype TextureAOMapControllerCurrentMaterial =\n\t| MeshBasicMaterial\n\t| MeshLambertMaterial\n\t| MeshStandardMaterial\n\t| MeshPhysicalMaterial\n\t| MeshToonMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureAOMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshBasicMaterial).aoMapIntensity != null;\n}\nclass TextureAOMapParamsConfig extends AOMapParamConfig(NodeParamsConfig) {}\nexport interface TextureAOMapControllers {\n\taoMap: TextureAOMapController;\n}\nabstract class TextureAOMapMatNode extends TypedMatNode<\n\tTextureAOMapControllerCurrentMaterial,\n\tTextureAOMapParamsConfig\n> {\n\tcontrollers!: TextureAOMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureAOMapControllerCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureAOMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureAOMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useAOMap, this.node.p.aoMap);\n\t}\n\tstatic override async update(node: TextureAOMapMatNode) {\n\t\tnode.controllers.aoMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureAOMapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'aoMap', this.node.p.useAOMap, this.node.p.aoMap);\n\n\t\tmaterial.aoMapIntensity = this.node.pv.aoMapIntensity;\n\t}\n\toverride getTextures(material: TextureAOMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('aoMap', material.aoMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureAOMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('aoMap');\n\t\tthis.node.p.useAOMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.aoMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tthis.node.p.aoMapIntensity.set(material.aoMapIntensity);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Material, MeshBasicMaterial} from 'three';\nimport {MeshLambertMaterial} from 'three';\nimport {MeshPhongMaterial} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {MeshMatcapMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {PointsMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nexport function AlphaMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use an alpha map */\n\t\tuseAlphaMap = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureAlphaMapController),\n\t\t});\n\t\t/** @param specify the alpha map COP node */\n\t\talphaMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureAlphaMapController, 'useAlphaMap'));\n\t};\n}\n\ntype TextureAlphaMapControllerCurrentMaterial =\n\t| MeshBasicMaterial\n\t| MeshLambertMaterial\n\t| MeshPhongMaterial\n\t| MeshStandardMaterial\n\t| MeshPhysicalMaterial\n\t| MeshMatcapMaterial\n\t| MeshToonMaterial\n\t| PointsMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureAlphaMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn true; //(material as MeshStandardMaterial).isM != null;\n}\nclass TextureAlphaMapParamsConfig extends AlphaMapParamConfig(NodeParamsConfig) {}\nexport interface TextureAlphaMapControllers {\n\talphaMap: TextureAlphaMapController;\n}\nabstract class TextureAlphaMapMatNode extends TypedMatNode<\n\tTextureAlphaMapControllerCurrentMaterial,\n\tTextureAlphaMapParamsConfig\n> {\n\tcontrollers!: TextureAlphaMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureAlphaMapControllerCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureAlphaMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureAlphaMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useAlphaMap, this.node.p.alphaMap);\n\t}\n\tstatic override async update(node: TextureAlphaMapMatNode) {\n\t\tnode.controllers.alphaMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureAlphaMapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'alphaMap', this.node.p.useAlphaMap, this.node.p.alphaMap);\n\t}\n\toverride getTextures(material: TextureAlphaMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('alphaMap', material.alphaMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureAlphaMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('aoMap');\n\t\tthis.node.p.useAlphaMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.alphaMap.setNode(mapNode, {relative: true});\n\t\t}\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Material, MeshStandardMaterial} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshMatcapMaterial} from 'three';\nimport {MeshNormalMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nexport function BumpMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a bump map */\n\t\tuseBumpMap = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureBumpMapController),\n\t\t});\n\t\t/** @param specify the bump map COP node */\n\t\tbumpMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureBumpMapController, 'useBumpMap'));\n\t\t/** @param bump scale */\n\t\tbumpScale = ParamConfig.FLOAT(1, {\n\t\t\trange: [0, 1],\n\t\t\trangeLocked: [false, false],\n\t\t\t...NodePathOptions(TextureBumpMapController, 'useBumpMap'),\n\t\t});\n\t\t/** @param bump bias */\n\t\tbumpBias = ParamConfig.FLOAT(0, {\n\t\t\trange: [0, 1],\n\t\t\trangeLocked: [false, false],\n\t\t\t...NodePathOptions(TextureBumpMapController, 'useBumpMap'),\n\t\t});\n\t};\n}\n\ntype TextureBumpMapControllerCurrentMaterial =\n\t| MeshMatcapMaterial\n\t| MeshNormalMaterial\n\t| MeshPhysicalMaterial\n\t| MeshStandardMaterial\n\t| MeshToonMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureBumpMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshMatcapMaterial).bumpScale != null;\n}\nclass TextureBumpMapParamsConfig extends BumpMapParamConfig(NodeParamsConfig) {}\nexport interface TextureBumpMapControllers {\n\tbumpMap: TextureBumpMapController;\n}\nabstract class TextureBumpMapMatNode extends TypedMatNode<\n\tTextureBumpMapControllerCurrentMaterial,\n\tTextureBumpMapParamsConfig\n> {\n\tcontrollers!: TextureBumpMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureBumpMapControllerCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureBumpMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureBumpMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useBumpMap, this.node.p.bumpMap);\n\t}\n\tstatic override async update(node: TextureBumpMapMatNode) {\n\t\tnode.controllers.bumpMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureBumpMapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'bumpMap', this.node.p.useBumpMap, this.node.p.bumpMap);\n\n\t\tmaterial.bumpScale = this.node.pv.bumpScale;\n\t}\n\toverride getTextures(material: TextureBumpMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('bumpMap', material.bumpMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureBumpMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('emissiveMap');\n\t\tthis.node.p.useBumpMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.bumpMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tthis.node.p.bumpScale.set(material.bumpScale);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Material, MeshMatcapMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshNormalMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nexport function DisplacementMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a displacement map */\n\t\tuseDisplacementMap = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureDisplacementMapController),\n\t\t});\n\t\t/** @param specify the displacement map COP node */\n\t\tdisplacementMap = ParamConfig.NODE_PATH(\n\t\t\t'',\n\t\t\tNodePathOptions(TextureDisplacementMapController, 'useDisplacementMap')\n\t\t);\n\t\t/** @param displacement scale */\n\t\tdisplacementScale = ParamConfig.FLOAT(1, {\n\t\t\trange: [0, 1],\n\t\t\trangeLocked: [false, false],\n\t\t\t...NodePathOptions(TextureDisplacementMapController, 'useDisplacementMap'),\n\t\t});\n\t\t/** @param displacement bias */\n\t\tdisplacementBias = ParamConfig.FLOAT(0, {\n\t\t\trange: [0, 1],\n\t\t\trangeLocked: [false, false],\n\t\t\t...NodePathOptions(TextureDisplacementMapController, 'useDisplacementMap'),\n\t\t});\n\t};\n}\n\ntype TextureDisplacementMapControllerCurrentMaterial =\n\t| MeshMatcapMaterial\n\t| MeshNormalMaterial\n\t| MeshStandardMaterial\n\t| MeshPhysicalMaterial\n\t| MeshToonMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureDisplacementMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshMatcapMaterial).displacementScale != null;\n}\nclass TextureDisplacementMapParamsConfig extends DisplacementMapParamConfig(NodeParamsConfig) {}\nexport interface TextureDisplacementMapControllers {\n\tdisplacementMap: TextureDisplacementMapController;\n}\nabstract class TextureDisplacementMapMatNode extends TypedMatNode<\n\tTextureDisplacementMapControllerCurrentMaterial,\n\tTextureDisplacementMapParamsConfig\n> {\n\tcontrollers!: TextureDisplacementMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureDisplacementMapControllerCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureDisplacementMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureDisplacementMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useDisplacementMap, this.node.p.displacementMap);\n\t}\n\tstatic override async update(node: TextureDisplacementMapMatNode) {\n\t\tnode.controllers.displacementMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureDisplacementMapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'displacementMap', this.node.p.useDisplacementMap, this.node.p.displacementMap);\n\n\t\tmaterial.displacementScale = this.node.pv.displacementScale;\n\t\tmaterial.displacementBias = this.node.pv.displacementBias;\n\t}\n\toverride getTextures(material: TextureDisplacementMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('displacementMap', material.displacementMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureDisplacementMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('emissiveMap');\n\t\tthis.node.p.useDisplacementMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.displacementMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tthis.node.p.displacementScale.set(material.displacementScale);\n\t\tthis.node.p.displacementBias.set(material.displacementBias);\n\t}\n}\n","import {Constructor, Number3} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Material, MeshPhongMaterial, MeshPhysicalMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {MeshLambertMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nimport {ColorConversion} from '../../../../core/Color';\n\nexport function EmissiveMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param emissive color */\n\t\temissive = ParamConfig.COLOR([0, 0, 0], {separatorBefore: true});\n\t\t/** @param toggle if you want to use a emissive map */\n\t\tuseEmissiveMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureEmissiveMapController));\n\t\t/** @param specify the emissive map COP node */\n\t\temissiveMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureEmissiveMapController, 'useEmissiveMap'));\n\t\t/** @param emissive intensity */\n\t\temissiveIntensity = ParamConfig.FLOAT(1);\n\t};\n}\n\ntype TextureEmissiveMapControllerCurrentMaterial =\n\t| MeshPhongMaterial\n\t| MeshLambertMaterial\n\t| MeshStandardMaterial\n\t| MeshPhysicalMaterial\n\t| MeshToonMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureEmissiveMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshStandardMaterial).emissive != null;\n}\nclass TextureEmissiveMapParamsConfig extends EmissiveMapParamConfig(NodeParamsConfig) {}\nexport interface TextureEmissiveMapControllers {\n\temissiveMap: TextureEmissiveMapController;\n}\nabstract class TextureEmissiveMapMatNode extends TypedMatNode<\n\tTextureEmissiveMapControllerCurrentMaterial,\n\tTextureEmissiveMapParamsConfig\n> {\n\tcontrollers!: TextureEmissiveMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureEmissiveMapControllerCurrentMaterial | undefined;\n\t}\n}\nconst tmpN3: Number3 = [0, 0, 0];\nexport class TextureEmissiveMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureEmissiveMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useEmissiveMap, this.node.p.emissiveMap);\n\t}\n\tstatic override async update(node: TextureEmissiveMapMatNode) {\n\t\tnode.controllers.emissiveMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureEmissiveMapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'emissiveMap', this.node.p.useEmissiveMap, this.node.p.emissiveMap);\n\n\t\tmaterial.emissive.copy(this.node.pv.emissive);\n\t\tmaterial.emissiveIntensity = this.node.pv.emissiveIntensity;\n\t}\n\toverride getTextures(material: TextureEmissiveMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('emissiveMap', material.emissiveMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureEmissiveMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('emissiveMap');\n\t\tthis.node.p.useEmissiveMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.emissiveMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tmaterial.emissive.toArray(tmpN3);\n\t\tthis.node.p.emissive.set(tmpN3);\n\t\tthis.node.p.emissive.setConversion(ColorConversion.NONE);\n\t\tthis.node.p.emissiveIntensity.set(material.emissiveIntensity);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {MeshStandardMaterial, MeshPhysicalMaterial, Material} from 'three';\nimport {DefaultOperationParams} from '../../../../core/operations/_Base';\nimport {TypedNodePathParamValue} from '../../../../core/Walker';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\n// import {TypedSopNode} from '../../sop/_Base';\n\nexport interface EnvMapOperationParams extends DefaultOperationParams {\n\tuseEnvMap: boolean;\n\tenvMap: TypedNodePathParamValue;\n\tenvMapIntensity: number;\n}\nexport const ENV_MAP_OPERATION_DEFAULT_PARAMS: EnvMapOperationParams = {\n\tuseEnvMap: false,\n\tenvMap: new TypedNodePathParamValue(''),\n\tenvMapIntensity: 1,\n};\nconst DEFAULT_PARAMS = ENV_MAP_OPERATION_DEFAULT_PARAMS;\n\nexport function EnvMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use an environment map */\n\t\tuseEnvMap = ParamConfig.BOOLEAN(DEFAULT_PARAMS.useEnvMap, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureEnvMapController),\n\t\t});\n\t\t/** @param specify the environment map COP node */\n\t\tenvMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureEnvMapController, 'useEnvMap'));\n\t\t/** @param environment intensity */\n\t\tenvMapIntensity = ParamConfig.FLOAT(DEFAULT_PARAMS.envMapIntensity, {visibleIf: {useEnvMap: 1}});\n\t};\n}\n\ntype TextureEnvMapControllerCurrentMaterial = MeshStandardMaterial | MeshPhysicalMaterial;\nexport function isValidEnvMapMaterial(material?: Material): material is TextureEnvMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (\n\t\t(material as MeshStandardMaterial).isMeshStandardMaterial ||\n\t\t(material as MeshPhysicalMaterial as any).isMeshPhysicalMaterial\n\t);\n}\nclass TextureEnvMapParamsConfig extends EnvMapParamConfig(NodeParamsConfig) {}\nexport interface TextureEnvMapControllers {\n\tenvMap: TextureEnvMapController;\n}\n\n// abstract class TextureEnvMapBaseSopNode extends TypedSopNode<TextureEnvMapParamsConfig> {}\n\nabstract class TextureEnvMapMatNode extends TypedMatNode<\n\tTextureEnvMapControllerCurrentMaterial,\n\tTextureEnvMapParamsConfig\n> {\n\tcontrollers!: TextureEnvMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureEnvMapControllerCurrentMaterial | undefined;\n\t}\n}\n\n// export class TextureEnvMapControllerSop extends BaseTextureMapController {\n// \tconstructor(protected override node: TextureEnvMapBaseSopNode) {\n// \t\tsuper(node);\n// \t}\n// \t// initializeNode() {\n// \t// \tthis.add_hooks(this.node.p.useEnvMap, this.node.p.envMap);\n// \t// }\n// \tasync updateMaterial(material?: Material) {\n// \t\tif (!_isValidMaterial(material)) {\n// \t\t\treturn;\n// \t\t}\n// \t\tthis._update(material, 'envMap', this.node.p.useEnvMap, this.node.p.envMap);\n// \t\tconst mat = material as MeshStandardMaterial;\n// \t\tmat.envMapIntensity = this.node.pv.envMapIntensity;\n// \t\t// mat.refractionRatio = this.node.pv.refractionRatio; // TODO: consider re-allowing this for Phong and Basic materials\n// \t}\n// }\n\nexport class TextureEnvMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureEnvMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useEnvMap, this.node.p.envMap);\n\t}\n\tstatic override async update(node: TextureEnvMapMatNode) {\n\t\tnode.controllers.envMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!isValidEnvMapMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureEnvMapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'envMap', this.node.p.useEnvMap, this.node.p.envMap);\n\t\tmaterial.envMapIntensity = this.node.pv.envMapIntensity;\n\t\t// mat.refractionRatio = this.node.pv.refractionRatio; // TODO: consider re-allowing this for Phong and Basic materials\n\t}\n\toverride getTextures(material: TextureEnvMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('envMap', material.envMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureEnvMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('envMap');\n\t\tthis.node.p.useEnvMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.envMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tthis.node.p.envMapIntensity.set(material.envMapIntensity);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {Material, MeshBasicMaterial} from 'three';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {MultiplyOperation, MixOperation, AddOperation} from 'three';\nimport {CopType} from '../../../poly/registers/nodes/types/Cop';\nimport {MeshLambertMaterial} from 'three';\nimport {MeshPhongMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\n\nenum CombineOperation {\n\tMULT = 'mult',\n\tADD = 'add',\n\tMIX = 'mix',\n}\nconst COMBINE_OPERATIONS: CombineOperation[] = [CombineOperation.MULT, CombineOperation.ADD, CombineOperation.MIX];\nconst OperationByName = {\n\t[CombineOperation.MULT]: MultiplyOperation,\n\t[CombineOperation.ADD]: AddOperation,\n\t[CombineOperation.MIX]: MixOperation,\n};\nconst NameByOperation = {\n\t[MultiplyOperation]: CombineOperation.MULT,\n\t[AddOperation]: CombineOperation.ADD,\n\t[MixOperation]: CombineOperation.MIX,\n};\n\nexport function EnvMapSimpleParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use an environment map */\n\t\tuseEnvMap = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureEnvMapSimpleController),\n\t\t});\n\t\t/** @param specify the environment map COP node. Note that this only works with CubeCamera */\n\t\tenvMap = ParamConfig.NODE_PATH(\n\t\t\t'',\n\t\t\tNodePathOptions(TextureEnvMapSimpleController, 'useEnvMap', {\n\t\t\t\ttypes: [CopType.CUBE_MAP, CopType.CUBE_MAP_FROM_SCENE, CopType.CUBE_CAMERA],\n\t\t\t})\n\t\t);\n\t\t/** @param defines how the env map is combined with the color */\n\t\tcombine = ParamConfig.INTEGER(0, {\n\t\t\tvisibleIf: {useEnvMap: 1},\n\t\t\tmenu: {\n\t\t\t\tentries: COMBINE_OPERATIONS.map((name, value) => {\n\t\t\t\t\treturn {name, value};\n\t\t\t\t}),\n\t\t\t},\n\t\t});\n\t\t/** @param environment intensity */\n\t\treflectivity = ParamConfig.FLOAT(1, {visibleIf: {useEnvMap: 1}});\n\t\t/** @param refraction ratio */\n\t\trefractionRatio = ParamConfig.FLOAT(0.98, {\n\t\t\trange: [-1, 1],\n\t\t\trangeLocked: [false, false],\n\t\t\tvisibleIf: {useEnvMap: 1},\n\t\t});\n\t};\n}\n\ntype TextureEnvMapSimpleCurrentMaterial = MeshBasicMaterial | MeshLambertMaterial | MeshPhongMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureEnvMapSimpleCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshBasicMaterial).reflectivity != null;\n}\nclass TextureEnvMapSimpleParamsConfig extends EnvMapSimpleParamConfig(NodeParamsConfig) {}\nexport interface TextureEnvMapSimpleControllers {\n\tenvMap: TextureEnvMapSimpleController;\n}\nabstract class TextureEnvMapSimpleMatNode extends TypedMatNode<\n\tTextureEnvMapSimpleCurrentMaterial,\n\tTextureEnvMapSimpleParamsConfig\n> {\n\tcontrollers!: TextureEnvMapSimpleControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureEnvMapSimpleCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureEnvMapSimpleController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureEnvMapSimpleMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useEnvMap, this.node.p.envMap);\n\t}\n\tstatic override async update(node: TextureEnvMapSimpleMatNode) {\n\t\tnode.controllers.envMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureEnvMapSimpleCurrentMaterial) {\n\t\tawait this._update(material, 'envMap', this.node.p.useEnvMap, this.node.p.envMap);\n\t\tconst combine = OperationByName[COMBINE_OPERATIONS[this.node.pv.combine]];\n\n\t\tmaterial.combine = combine;\n\t\tmaterial.reflectivity = this.node.pv.reflectivity;\n\t\tmaterial.refractionRatio = this.node.pv.refractionRatio;\n\t}\n\toverride getTextures(material: TextureEnvMapSimpleCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('envMap', material.envMap);\n\t}\n\toverride setParamsFromMaterial(material: TextureEnvMapSimpleCurrentMaterial, record: SetParamsTextureNodesRecord) {\n\t\tconst mapNode = record.get('envMap');\n\t\tthis.node.p.useEnvMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.envMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tthis.node.p.combine.set(COMBINE_OPERATIONS.indexOf(NameByOperation[material.combine]));\n\t\tthis.node.p.reflectivity.set(material.reflectivity);\n\t\tthis.node.p.refractionRatio.set(material.refractionRatio);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {Material, MeshToonMaterial} from 'three';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\n\nexport function GradientMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a gradient map */\n\t\tuseGradientMap = ParamConfig.BOOLEAN(0, {\n\t\t\t...BooleanParamOptions(TextureGradientMapController),\n\t\t\tseparatorBefore: true,\n\t\t});\n\t\t/** Gradient map for toon shading. It's required to set Texture.minFilter and Texture.magFilter to THREE.NearestFilter when using this type of texture */\n\t\tgradientMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureGradientMapController, 'useGradientMap'));\n\t};\n}\n\ntype TextureGradientMaterial = MeshToonMaterial;\ntype TextureGradientMapCurrentMaterial = TextureGradientMaterial; //| ShaderMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureGradientMapCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn true; //(material as TextureGradientMaterial).gradientMap != null;\n}\nclass TextureGradientMapParamsConfig extends GradientMapParamConfig(NodeParamsConfig) {}\nexport interface TextureGradientMapControllers {\n\tgradientMap: TextureGradientMapController;\n}\nabstract class TextureGradientMapMatNode extends TypedMatNode<\n\tTextureGradientMapCurrentMaterial,\n\tTextureGradientMapParamsConfig\n> {\n\tcontrollers!: TextureGradientMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureGradientMapCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureGradientMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureGradientMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useGradientMap, this.node.p.gradientMap);\n\t}\n\tstatic override async update(node: TextureGradientMapMatNode) {\n\t\tnode.controllers.gradientMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureGradientMapCurrentMaterial) {\n\t\tawait this._update(material, 'gradientMap', this.node.p.useGradientMap, this.node.p.gradientMap);\n\t}\n\toverride getTextures(material: TextureGradientMapCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('gradientMap', material.gradientMap);\n\t}\n\toverride setParamsFromMaterial(material: TextureGradientMapCurrentMaterial, record: SetParamsTextureNodesRecord) {\n\t\tconst mapNode = record.get('gradientMap');\n\t\tthis.node.p.useGradientMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.gradientMap.setNode(mapNode, {relative: true});\n\t\t}\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Material, MeshBasicMaterial} from 'three';\nimport {MeshLambertMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\n\nexport function LightMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a light map */\n\t\tuseLightMap = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureLightMapController),\n\t\t});\n\t\t/** @param specify the light map COP node */\n\t\tlightMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureLightMapController, 'useLightMap'));\n\t\t/** @param light. When set to 0, reflections from environment maps will be very sharp, or blurred when 1. Any value between 0 and 1 can help modulate this. */\n\t\tlightMapIntensity = ParamConfig.FLOAT(1, {\n\t\t\tvisibleIf: {useLightMap: 1},\n\t\t});\n\t};\n}\n\ntype TextureLightMapCurrentMaterial =\n\t| MeshBasicMaterial\n\t| MeshLambertMaterial\n\t| MeshStandardMaterial\n\t| MeshPhysicalMaterial\n\t| MeshToonMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureLightMapCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshBasicMaterial).lightMapIntensity != null;\n}\nclass TextureLightMapParamsConfig extends LightMapParamConfig(NodeParamsConfig) {}\nexport interface TextureLightMapControllers {\n\tlightMap: TextureLightMapController;\n}\nabstract class TextureLightMapMatNode extends TypedMatNode<\n\tTextureLightMapCurrentMaterial,\n\tTextureLightMapParamsConfig\n> {\n\tcontrollers!: TextureLightMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureLightMapCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureLightMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureLightMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useLightMap, this.node.p.lightMap);\n\t}\n\tstatic override async update(node: TextureLightMapMatNode) {\n\t\tnode.controllers.lightMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureLightMapCurrentMaterial) {\n\t\tawait this._update(material, 'lightMap', this.node.p.useLightMap, this.node.p.lightMap);\n\t\tmaterial.lightMapIntensity = this.node.pv.lightMapIntensity;\n\t}\n\toverride getTextures(material: TextureLightMapCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('lightMap', material.lightMap);\n\t}\n\toverride setParamsFromMaterial(material: TextureLightMapCurrentMaterial, record: SetParamsTextureNodesRecord) {\n\t\tconst mapNode = record.get('lightMap');\n\t\tthis.node.p.useLightMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.lightMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tthis.node.p.lightMapIntensity.set(material.lightMapIntensity);\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {Material, MeshBasicMaterial} from 'three';\nimport {MeshLambertMaterial} from 'three';\nimport {MeshMatcapMaterial} from 'three';\nimport {MeshPhongMaterial} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {PointsMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nexport function MapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle on to use a map affecting color */\n\t\tuseMap = ParamConfig.BOOLEAN(0, {\n\t\t\t...BooleanParamOptions(TextureMapController),\n\t\t\tseparatorBefore: true,\n\t\t});\n\t\t/** @param texture map affecting color */\n\t\tmap = ParamConfig.NODE_PATH('', NodePathOptions(TextureMapController, 'useMap'));\n\t};\n}\n\n// class TextureMapMaterial extends Material {\n// \tmap!: Texture | null;\n// }\ntype TextureMapCurrentMaterial =\n\t| MeshBasicMaterial\n\t| MeshLambertMaterial\n\t| MeshMatcapMaterial\n\t| MeshPhongMaterial\n\t| MeshStandardMaterial\n\t| MeshPhysicalMaterial\n\t| MeshToonMaterial\n\t| PointsMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureMapCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn true; //(material as MeshBasicMaterial).map != null;\n}\nclass TextureMapParamsConfig extends MapParamConfig(NodeParamsConfig) {}\nexport interface TextureMapControllers {\n\tmap: TextureMapController;\n}\nabstract class TextureMapMatNode extends TypedMatNode<TextureMapCurrentMaterial, TextureMapParamsConfig> {\n\tcontrollers!: TextureMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureMapCurrentMaterial | undefined;\n\t}\n}\n\nexport class TextureMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useMap, this.node.p.map);\n\t}\n\tstatic override async update(node: TextureMapMatNode) {\n\t\tnode.controllers.map.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\tconsole.warn('invalid mat for TextureMapController', material);\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureMapCurrentMaterial) {\n\t\tawait this._update(material, 'map', this.node.p.useMap, this.node.p.map);\n\t}\n\toverride getTextures(material: TextureMapCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('map', material.map);\n\t}\n\toverride setParamsFromMaterial(material: TextureMapCurrentMaterial, record: SetParamsTextureNodesRecord) {\n\t\tconst mapNode = record.get('map');\n\t\tthis.node.p.useMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.map.setNode(mapNode, {relative: true});\n\t\t}\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {MeshStandardMaterial, MeshPhysicalMaterial, Material} from 'three';\nimport {DefaultOperationParams} from '../../../../core/operations/_Base';\nimport {TypedNodePathParamValue} from '../../../../core/Walker';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\n// import {TypedSopNode} from '../../sop/_Base';\n\nexport interface MetalnessRoughnessOperationParams extends DefaultOperationParams {\n\tuseMetalnessMap: boolean;\n\tmetalnessMap: TypedNodePathParamValue;\n\tmetalness: number;\n\tuseRoughnessMap: boolean;\n\troughnessMap: TypedNodePathParamValue;\n\troughness: number;\n}\nexport const METALNESS_ROUGHNESS_OPERATION_DEFAULT_PARAMS: MetalnessRoughnessOperationParams = {\n\tuseMetalnessMap: false,\n\tmetalnessMap: new TypedNodePathParamValue(''),\n\tmetalness: 0,\n\tuseRoughnessMap: false,\n\troughnessMap: new TypedNodePathParamValue(''),\n\troughness: 1,\n};\nconst DEFAULT_PARAMS = METALNESS_ROUGHNESS_OPERATION_DEFAULT_PARAMS;\n\nexport function MetalnessRoughnessMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a metalness map */\n\t\tuseMetalnessMap = ParamConfig.BOOLEAN(DEFAULT_PARAMS.useMetalnessMap, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureMetalnessRoughnessMapController),\n\t\t});\n\t\t/** @param specify the metalness map COP node */\n\t\tmetalnessMap = ParamConfig.NODE_PATH(\n\t\t\t'',\n\t\t\tNodePathOptions(TextureMetalnessRoughnessMapController, 'useMetalnessMap')\n\t\t);\n\t\t/** @param metalness. It's recommended to either set this value to 0 or to 1, as objects are either metallic or not. Any value in between tends to look like an alien plastic */\n\t\tmetalness = ParamConfig.FLOAT(DEFAULT_PARAMS.metalness); // a default of 0 is good to non builder materials, but 1 should be better for builders, in case metalness is multiplied with this param from its child output node\n\t\t/** @param toggle if you want to use a roughness map */\n\t\tuseRoughnessMap = ParamConfig.BOOLEAN(DEFAULT_PARAMS.useRoughnessMap, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureMetalnessRoughnessMapController),\n\t\t});\n\t\t/** @param specify the roughness map COP node */\n\t\troughnessMap = ParamConfig.NODE_PATH(\n\t\t\t'',\n\t\t\tNodePathOptions(TextureMetalnessRoughnessMapController, 'useRoughnessMap')\n\t\t);\n\t\t/** @param roughness. When set to 0, reflections from environment maps will be very sharp, or blurred when 1. Any value between 0 and 1 can help modulate this. */\n\t\troughness = ParamConfig.FLOAT(DEFAULT_PARAMS.roughness);\n\t};\n}\n\ntype TextureMetalnessRoughnessCurrentMaterial = MeshStandardMaterial | MeshPhysicalMaterial;\nfunction _isValidMaterial(material?: Material): material is TextureMetalnessRoughnessCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshStandardMaterial).metalness != null;\n}\nclass TextureMetalnessMapParamsConfig extends MetalnessRoughnessMapParamConfig(NodeParamsConfig) {}\nexport interface TextureMetalnessRoughnessMapControllers {\n\tmetalnessRoughnessMap: TextureMetalnessRoughnessMapController;\n}\n\n// abstract class TextureMetalnessMapBaseSopNode extends TypedSopNode<TextureMetalnessMapParamsConfig> {}\nabstract class TextureMetalnessMapMatNode extends TypedMatNode<\n\tTextureMetalnessRoughnessCurrentMaterial,\n\tTextureMetalnessMapParamsConfig\n> {\n\tcontrollers!: TextureMetalnessRoughnessMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureMetalnessRoughnessCurrentMaterial | undefined;\n\t}\n}\n\n// export class TextureMetalnessRoughnessMapControllerSop extends BaseTextureMapController {\n// \tconstructor(protected override node: TextureMetalnessMapBaseSopNode) {\n// \t\tsuper(node);\n// \t}\n// \t// initializeNode() {\n// \t// \tthis.add_hooks(this.node.p.useEnvMap, this.node.p.envMap);\n// \t// }\n// \tasync updateMaterial(material?: Material) {\n// \t\tif (!_isValidMaterial(material)) {\n// \t\t\treturn;\n// \t\t}\n// \t\tthis._update(material, 'metalnessMap', this.node.p.useMetalnessMap, this.node.p.metalnessMap);\n// \t\tmaterial.metalness = this.node.pv.metalness;\n\n// \t\tthis._update(material, 'roughnessMap', this.node.p.useRoughnessMap, this.node.p.roughnessMap);\n// \t\tmaterial.roughness = this.node.pv.roughness;\n// \t}\n// }\nexport class TextureMetalnessRoughnessMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureMetalnessMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useMetalnessMap, this.node.p.metalnessMap);\n\t}\n\tstatic override async update(node: TextureMetalnessMapMatNode) {\n\t\tnode.controllers.metalnessRoughnessMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!_isValidMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureMetalnessRoughnessCurrentMaterial) {\n\t\tmaterial.metalness = this.node.pv.metalness;\n\t\tmaterial.roughness = this.node.pv.roughness;\n\t\tawait Promise.all([\n\t\t\tthis._update(material, 'metalnessMap', this.node.p.useMetalnessMap, this.node.p.metalnessMap),\n\t\t\tthis._update(material, 'roughnessMap', this.node.p.useRoughnessMap, this.node.p.roughnessMap),\n\t\t]);\n\t}\n\toverride getTextures(material: TextureMetalnessRoughnessCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('metalnessMap', material.metalnessMap);\n\t\trecord.set('roughnessMap', material.roughnessMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureMetalnessRoughnessCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst metalnessMapNode = record.get('metalnessMap');\n\t\tconst roughnessMapNode = record.get('roughnessMap');\n\t\tthis.node.p.useMetalnessMap.set(metalnessMapNode != null);\n\t\tthis.node.p.useRoughnessMap.set(roughnessMapNode != null);\n\t\tif (metalnessMapNode) {\n\t\t\tthis.node.p.metalnessMap.setNode(metalnessMapNode, {relative: true});\n\t\t}\n\t\tif (roughnessMapNode) {\n\t\t\tthis.node.p.roughnessMap.setNode(roughnessMapNode, {relative: true});\n\t\t}\n\t\tthis.node.p.metalness.set(material.metalness);\n\t\tthis.node.p.roughness.set(material.roughness);\n\t}\n}\n","import {Constructor, Number2} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {TangentSpaceNormalMap, ObjectSpaceNormalMap, Material} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {MeshPhongMaterial} from 'three';\nimport {MeshMatcapMaterial} from 'three';\nimport {MeshNormalMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nenum NormalMapMode {\n\tTANGENT = 'tangent',\n\tOBJECT = 'object',\n}\nconst NORMAL_MAP_MODES: NormalMapMode[] = [NormalMapMode.TANGENT, NormalMapMode.OBJECT];\nconst NormalMapModeByName = {\n\t[NormalMapMode.TANGENT]: TangentSpaceNormalMap,\n\t[NormalMapMode.OBJECT]: ObjectSpaceNormalMap,\n};\nconst NormalNameByMode = {\n\t[TangentSpaceNormalMap]: NormalMapMode.TANGENT,\n\t[ObjectSpaceNormalMap]: NormalMapMode.OBJECT,\n};\n\nexport function NormalMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a normal map */\n\t\tuseNormalMap = ParamConfig.BOOLEAN(0, {\n\t\t\tseparatorBefore: true,\n\t\t\t...BooleanParamOptions(TextureNormalMapController),\n\t\t});\n\t\t/** @param specify the normal map COP node */\n\t\tnormalMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureNormalMapController, 'useNormalMap'));\n\t\t/** @param type of normal map being used */\n\t\tnormalMapType = ParamConfig.INTEGER(0, {\n\t\t\tvisibleIf: {useNormalMap: 1},\n\t\t\tmenu: {\n\t\t\t\tentries: NORMAL_MAP_MODES.map((name, value) => {\n\t\t\t\t\treturn {name, value};\n\t\t\t\t}),\n\t\t\t},\n\t\t});\n\t\t/** @param How much the normal map affects the material. Typical ranges are 0-1 */\n\t\tnormalScale = ParamConfig.VECTOR2([1, 1], {visibleIf: {useNormalMap: 1}});\n\t\t/** @param Normal Map Scale Multiplier, which multiples normalScale */\n\t\tnormalScaleMult = ParamConfig.FLOAT(1, {\n\t\t\trange: [0, 1],\n\t\t\trangeLocked: [false, false],\n\t\t\tvisibleIf: {useNormalMap: 1},\n\t\t});\n\t};\n}\n\ntype TextureNormalMapControllerCurrentMaterial =\n\t| MeshPhongMaterial\n\t| MeshNormalMaterial\n\t| MeshMatcapMaterial\n\t| MeshPhysicalMaterial\n\t| MeshToonMaterial\n\t| MeshStandardMaterial;\nfunction isTextureNormalMapMaterial(material?: Material): material is TextureNormalMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshNormalMaterial as any).normalScale != null;\n}\nclass TextureNormalMapParamsConfig extends NormalMapParamConfig(NodeParamsConfig) {}\nexport interface TextureNormalMapControllers {\n\tnormalMap: TextureNormalMapController;\n}\nabstract class TextureNormalMapMatNode extends TypedMatNode<\n\tTextureNormalMapControllerCurrentMaterial,\n\tTextureNormalMapParamsConfig\n> {\n\tcontrollers!: TextureNormalMapControllers;\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as TextureNormalMapControllerCurrentMaterial | undefined;\n\t}\n}\nconst tmpN2: Number2 = [0, 0];\nexport class TextureNormalMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureNormalMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useNormalMap, this.node.p.normalMap);\n\t}\n\tstatic override async update(node: TextureNormalMapMatNode) {\n\t\tnode.controllers.normalMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!isTextureNormalMapMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureNormalMapControllerCurrentMaterial) {\n\t\tconst {p, pv} = this.node;\n\t\tawait this._update(material, 'normalMap', p.useNormalMap, p.normalMap);\n\t\tconst normalMapType = NormalMapModeByName[NORMAL_MAP_MODES[pv.normalMapType]];\n\n\t\tconst mat = material as MeshPhongMaterial;\n\t\tmat.normalMapType = normalMapType;\n\t\tmat.normalScale.copy(pv.normalScale).multiplyScalar(pv.normalScaleMult);\n\t}\n\toverride getTextures(material: TextureNormalMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('normalMap', material.normalMap);\n\t}\n\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureNormalMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('normalMap');\n\t\tconst p = this.node.p;\n\t\tp.useNormalMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tp.normalMap.setNode(mapNode, {relative: true});\n\t\t}\n\t\tmaterial.normalScale.toArray(tmpN2);\n\t\tp.normalScale.set(tmpN2);\n\t\tp.normalMapType.set(NORMAL_MAP_MODES.indexOf(NormalNameByMode[material.normalMapType]));\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {TypedMatNode} from '../_Base';\nimport {BaseTextureMapController, BooleanParamOptions, NodePathOptions} from './_BaseTextureController';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {MeshPhongMaterial, Material} from 'three';\nimport {MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\n\nexport function SpecularMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle if you want to use a specular map */\n\t\tuseSpecularMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureSpecularMapController));\n\t\t/** @param specify the specular map COP node */\n\t\tspecularMap = ParamConfig.NODE_PATH('', NodePathOptions(TextureSpecularMapController, 'useSpecularMap'));\n\t};\n}\n\n// class TextureSpecularMaterial extends Material {\n// \tspecularMap!: Texture | null;\n// }\ntype TextureSpecularMapControllerCurrentMaterial = MeshPhongMaterial;\nfunction isTextureSpecularMapMaterial(material?: Material): material is TextureSpecularMapControllerCurrentMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshPhongMaterial as any).isMeshPhongMaterial != null;\n}\nclass TextureSpecularMapParamsConfig extends SpecularMapParamConfig(NodeParamsConfig) {}\nexport interface TextureSpecularMapControllers {\n\tspecularMap: TextureSpecularMapController;\n}\nabstract class TextureSpecularMapMatNode extends TypedMatNode<\n\tTextureSpecularMapControllerCurrentMaterial,\n\tTextureSpecularMapParamsConfig\n> {\n\tcontrollers!: TextureSpecularMapControllers;\n\t// abstract override createMaterial(): TextureSpecularMapControllerCurrentMaterial;\n}\n\nexport class TextureSpecularMapController extends BaseTextureMapController {\n\tconstructor(protected override node: TextureSpecularMapMatNode) {\n\t\tsuper(node);\n\t}\n\toverride initializeNode() {\n\t\tthis.add_hooks(this.node.p.useSpecularMap, this.node.p.specularMap);\n\t}\n\tstatic override async update(node: TextureSpecularMapMatNode) {\n\t\tnode.controllers.specularMap.update();\n\t}\n\toverride async update() {\n\t\tconst material = await this.node.material();\n\t\tif (!isTextureSpecularMapMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.node.controllers.specularMap.updateMaterial(material);\n\t}\n\toverride async updateMaterial(material: TextureSpecularMapControllerCurrentMaterial) {\n\t\tawait this._update(material, 'specularMap', this.node.p.useSpecularMap, this.node.p.specularMap);\n\t}\n\toverride getTextures(material: TextureSpecularMapControllerCurrentMaterial, record: MaterialTexturesRecord) {\n\t\trecord.set('specularMap', material.specularMap);\n\t}\n\toverride setParamsFromMaterial(\n\t\tmaterial: TextureSpecularMapControllerCurrentMaterial,\n\t\trecord: SetParamsTextureNodesRecord\n\t) {\n\t\tconst mapNode = record.get('specularMap');\n\t\tthis.node.p.useSpecularMap.set(mapNode != null);\n\t\tif (mapNode) {\n\t\t\tthis.node.p.specularMap.setNode(mapNode, {relative: true});\n\t\t}\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {BaseController, MaterialTexturesRecord, SetParamsTextureNodesRecord} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {isBooleanTrue} from '../../../../core/BooleanValue';\nimport {Material, MeshBasicMaterial} from 'three';\nimport {MeshStandardMaterial} from 'three';\nimport {MeshPhysicalMaterial} from 'three';\nimport {MeshToonMaterial} from 'three';\n\nexport interface WireframeControllers {\n\twireframe: WireframeController;\n}\nenum LineCapType {\n\tROUND = 'round',\n\tBUTT = 'butt',\n\tSQUARE = 'square',\n}\nconst LINE_CAP_TYPES: LineCapType[] = [LineCapType.ROUND, LineCapType.BUTT, LineCapType.SQUARE];\n\nenum LineJoinType {\n\tROUND = 'round',\n\tBEVEL = 'bevel',\n\tMITER = 'miter',\n}\nconst LINE_JOIN_TYPES: LineJoinType[] = [LineJoinType.ROUND, LineJoinType.BEVEL, LineJoinType.MITER];\n\nexport function WireframeParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t/** @param toggle on to set material to wireframe */\n\t\twireframe = ParamConfig.BOOLEAN(0, {separatorBefore: true});\n\t\t/** @param wireframe line width */\n\t\twireframeLinewidth = ParamConfig.FLOAT(1, {\n\t\t\trange: [0, 5],\n\t\t\trangeLocked: [true, false],\n\t\t\tvisibleIf: {wireframe: 1},\n\t\t});\n\t\t/** @param define appearance of line ends */\n\t\twireframeLinecap = ParamConfig.INTEGER(0, {\n\t\t\tmenu: {\n\t\t\t\tentries: LINE_CAP_TYPES.map((name, value) => {\n\t\t\t\t\treturn {name, value};\n\t\t\t\t}),\n\t\t\t},\n\t\t\tvisibleIf: {wireframe: 1},\n\t\t});\n\t\t/** @param Define appearance of line joints */\n\t\twireframeLinejoin = ParamConfig.INTEGER(0, {\n\t\t\tmenu: {\n\t\t\t\tentries: LINE_JOIN_TYPES.map((name, value) => {\n\t\t\t\t\treturn {name, value};\n\t\t\t\t}),\n\t\t\t},\n\t\t\tvisibleIf: {wireframe: 1},\n\t\t\tseparatorAfter: true,\n\t\t});\n\t};\n}\ntype WireframedMaterial = MeshToonMaterial | MeshBasicMaterial | MeshStandardMaterial | MeshPhysicalMaterial;\nfunction isValidWireframeMaterial(material?: Material): material is WireframedMaterial {\n\tif (!material) {\n\t\treturn false;\n\t}\n\treturn (material as MeshToonMaterial).wireframe != null;\n}\n// class WireframedMaterial extends Material {\n// \twireframe!: boolean;\n// \twireframeLinecap!: string;\n// \twireframeLinejoin!: string;\n// }\nclass WireframeParamsConfig extends WireframeParamConfig(NodeParamsConfig) {}\nclass WireframedMatNode extends TypedMatNode<WireframedMaterial, WireframeParamsConfig> {\n\tasync material() {\n\t\tconst container = await this.compute();\n\t\treturn container.material() as WireframedMaterial | undefined;\n\t}\n\tcontrollers!: WireframeControllers;\n}\n\nexport class WireframeController extends BaseController {\n\tconstructor(protected override node: WireframedMatNode) {\n\t\tsuper(node);\n\t}\n\tstatic async update(node: WireframedMatNode) {\n\t\tconst material = await node.material();\n\t\tif (!isValidWireframeMaterial(material)) {\n\t\t\treturn;\n\t\t}\n\t\tnode.controllers.wireframe.updateMaterial(material);\n\t}\n\toverride updateMaterial(material: WireframedMaterial) {\n\t\tconst pv = this.node.pv;\n\n\t\tmaterial.wireframe = isBooleanTrue(pv.wireframe);\n\t\tmaterial.wireframeLinewidth = pv.wireframeLinewidth;\n\t\tmaterial.wireframeLinecap = LINE_CAP_TYPES[pv.wireframeLinecap];\n\t\tmaterial.wireframeLinejoin = LINE_JOIN_TYPES[pv.wireframeLinejoin];\n\t\tmaterial.needsUpdate = true;\n\t}\n\toverride getTextures(material: WireframedMaterial, record: MaterialTexturesRecord) {}\n\toverride setParamsFromMaterial(material: WireframedMaterial, record: SetParamsTextureNodesRecord) {\n\t\tthis.node.p.wireframe.set(material.wireframe);\n\t\tthis.node.p.wireframeLinewidth.set(material.wireframeLinewidth);\n\t\tthis.node.p.wireframeLinecap.set(LINE_CAP_TYPES.indexOf(material.wireframeLinecap as LineCapType));\n\t\tthis.node.p.wireframeLinejoin.set(LINE_JOIN_TYPES.indexOf(material.wireframeLinejoin as LineJoinType));\n\t}\n}\n","import {Constructor} from '../../../../types/GlobalTypes';\nimport {BaseController} from './_BaseController';\nimport {Material} from 'three';\nimport {Texture} from 'three';\nimport {BaseMatNodeType} from '../_Base';\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {NodePathParam} from '../../../params/NodePath';\nimport {BooleanParam} from '../../../params/Boolean';\nimport {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {Poly} from '../../../Poly';\n\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuseMap = ParamConfig.BOOLEAN(0);\n\t\tmap = ParamConfig.NODE_PATH('', {visibleIf: {useMap: 1}});\n\t};\n}\n\ntype FilterFlags<Base, Condition> = {\n\t[Key in keyof Base]: Base[Key] extends Condition ? Key : never;\n};\ntype AllowedNames<Base, Condition> = FilterFlags<Base, Condition>[keyof Base];\ntype SubType<Base, Condition> = Pick<Base, AllowedNames<Base, Condition>>;\n\nexport function BooleanParamOptions(controller_class: typeof BaseTextureMapController) {\n\treturn {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller_class.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\ninterface NodePathOptionsOptions {\n\ttypes?: string[];\n}\nexport function NodePathOptions(\n\tcontroller: typeof BaseTextureMapController,\n\tuse_map_name: string,\n\toptions?: NodePathOptionsOptions\n) {\n\treturn {\n\t\tvisibleIf: {[use_map_name]: 1},\n\t\tnodeSelection: {context: NodeContext.COP, types: options?.types},\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\n\ntype TextureUpdateCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\ttexture: Texture\n) => void;\ntype TextureRemoveCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>\n) => void;\n\ntype BaseTextureControllerCurrentMaterial = Material;\nconst CALLBACK_NAME = 'TextureController';\nexport abstract class BaseTextureMapController extends BaseController {\n\tconstructor(protected override node: BaseMatNodeType) {\n\t\tsuper(node);\n\t}\n\n\tprotected add_hooks(use_map_param: BooleanParam, path_param: NodePathParam) {\n\t\tuse_map_param.addPostDirtyHook(CALLBACK_NAME, this.updateBound);\n\t\tpath_param.addPostDirtyHook(CALLBACK_NAME, this.updateBound);\n\t}\n\tstatic async update(node: BaseNodeType) {}\n\tprivate updateBound = this.update.bind(this);\n\tasync update() {}\n\n\tasync _update<M extends BaseTextureControllerCurrentMaterial>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: string,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: NodePathParam\n\t) {\n\t\tconst mat = material as Material;\n\t\tconst attr_name = mat_attrib_name as keyof SubType<Material, Texture | null>;\n\t\tawait this._update_texture_on_material(mat, attr_name, use_map_param, path_param);\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE MATERIAL\n\t//\n\t//\n\tasync _update_texture_on_material<M extends Material>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: NodePathParam\n\t) {\n\t\tawait this._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial,\n\t\t\tmat_attrib_name,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_material.bind(this),\n\t\t\tthis._remove_texture_from_material.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\tnewTexture: Texture\n\t) {\n\t\tconst currentTexture = (<unknown>texture_owner[mat_attrib_name]) as Texture | undefined;\n\t\tlet textureChangeRequired = false;\n\t\tif (currentTexture) {\n\t\t\tif (currentTexture.uuid != newTexture.uuid) {\n\t\t\t\ttextureChangeRequired = true;\n\t\t\t}\n\t\t}\n\t\tif (currentTexture == null || textureChangeRequired) {\n\t\t\ttexture_owner[mat_attrib_name] = newTexture as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t\tPoly.onSceneUpdatedHooks.runHooks();\n\t}\n\tprivate _remove_texture_from_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>\n\t) {\n\t\tif (texture_owner[mat_attrib_name]) {\n\t\t\ttexture_owner[mat_attrib_name] = null as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t\tPoly.onSceneUpdatedHooks.runHooks();\n\t}\n\n\t//\n\t//\n\t// MAIN ALGO to decide if texture should be updated\n\t//\n\t//\n\tprivate async _update_required_attribute<O extends Object>(\n\t\tmaterial: Material,\n\t\ttexture_owner: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: NodePathParam,\n\t\tupdate_callback: TextureUpdateCallback<O>,\n\t\tremove_callback: TextureRemoveCallback<O>\n\t) {\n\t\tif (use_map_param.isDirty()) {\n\t\t\tawait use_map_param.compute();\n\t\t}\n\t\tconst use_map: boolean = use_map_param.value;\n\n\t\tif (use_map) {\n\t\t\tif (path_param.isDirty()) {\n\t\t\t\tawait path_param.compute();\n\t\t\t}\n\n\t\t\tconst texture_node = path_param.value.nodeWithContext(NodeContext.COP);\n\t\t\tif (texture_node) {\n\t\t\t\tconst container = await texture_node.compute();\n\t\t\t\tconst texture = container.texture();\n\n\t\t\t\tif (texture) {\n\t\t\t\t\tawait update_callback(material, texture_owner, mat_attrib_name, texture);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// this is not wrapped in an else clause after the \"if (use_map) {\"\n\t\t// as we should come here after any of the errors above, if any is triggered\n\t\tremove_callback(material, texture_owner, mat_attrib_name);\n\t}\n}\n","export enum MatType {\n\tLINE_BASIC = 'lineBasic',\n\tLINE_BASIC_BUILDER = 'lineBasicBuilder',\n\tMESH_BASIC = 'meshBasic',\n\tMESH_BASIC_BUILDER = 'meshBasicBuilder',\n\tMESH_DEPTH_BUILDER = 'meshDepthBuilder',\n\tMESH_DISTANCE_BUILDER = 'meshDistanceBuilder',\n\tMESH_LAMBERT = 'meshLambert',\n\tMESH_LAMBERT_BUILDER = 'meshLambertBuilder',\n\tMESH_MATCAP = 'meshMatcap',\n\tMESH_NORMAL = 'meshNormal',\n\tMESH_PHONG = 'meshPhong',\n\tMESH_PHONG_BUILDER = 'meshPhongBuilder',\n\tMESH_PHYSICAL = 'meshPhysical',\n\tMESH_PHYSICAL_BUILDER = 'meshPhysicalBuilder',\n\tMESH_STANDARD = 'meshStandard',\n\tMESH_STANDARD_BUILDER = 'meshStandardBuilder',\n\tMESH_TOON = 'meshToon',\n\tMESH_TOON_BUILDER = 'meshToonBuilder',\n\tPOINTS = 'points',\n\tPOINTS_BUILDER = 'pointsBuilder',\n\tRAY_MARCHING_BUILDER = 'rayMarchingBuilder',\n\tSHADOW = 'shadow',\n\tSKY = 'sky',\n\tVOLUME = 'volume',\n\tVOLUME_BUILDER = 'volumeBuilder',\n}\n"],"names":["CombineOperation","NormalMapMode","LineCapType","LineJoinType","MatType"],"sourceRoot":""}