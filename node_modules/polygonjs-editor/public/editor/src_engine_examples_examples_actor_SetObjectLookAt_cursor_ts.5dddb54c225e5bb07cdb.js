(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_actor_SetObjectLookAt_cursor_ts"],{

/***/ 94636:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.040554760062235067, -0.02683275895387957, -0.026050266146983535]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([3.0161526633531355, 1.1787657307191874, 2.814738208647524]);
    perspectiveCamera1.p.r.set([-22.723127930556515, 44.66532130223666, 16.403892417511617]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_objects(parentNode) {
    var objects = parentNode.createNode("geo");
    objects.setName("objects");
    const objects_nodes = {};
    function create_actor1(objects2) {
      var actor1 = objects2.createNode("actor");
      actor1.setName("actor1");
      const actor1_nodes = {};
      function create_onTick1(actor12) {
        var onTick1 = actor12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-100, 0);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_plane12(actor12) {
        var plane1 = actor12.createNode("plane");
        plane1.setName("plane1");
        const plane1_nodes = {};
        plane1.uiData.setPosition(-200, 350);
        plane1.params.postCreateSpareParams();
        plane1.params.runOnSceneLoadHooks();
        return { node: plane1, children: plane1_nodes };
      }
      function create_rayFromCursor1(actor12) {
        var rayFromCursor1 = actor12.createNode("rayFromCursor");
        rayFromCursor1.setName("rayFromCursor1");
        const rayFromCursor1_nodes = {};
        rayFromCursor1.uiData.setPosition(-250, 200);
        rayFromCursor1.params.postCreateSpareParams();
        rayFromCursor1.params.runOnSceneLoadHooks();
        return { node: rayFromCursor1, children: rayFromCursor1_nodes };
      }
      function create_rayIntersectPlane1(actor12) {
        var rayIntersectPlane1 = actor12.createNode("rayIntersectPlane");
        rayIntersectPlane1.setName("rayIntersectPlane1");
        const rayIntersectPlane1_nodes = {};
        rayIntersectPlane1.uiData.setPosition(0, 250);
        rayIntersectPlane1.params.postCreateSpareParams();
        rayIntersectPlane1.params.runOnSceneLoadHooks();
        return { node: rayIntersectPlane1, children: rayIntersectPlane1_nodes };
      }
      function create_setObjectLookAt1(actor12) {
        var setObjectLookAt1 = actor12.createNode("setObjectLookAt");
        setObjectLookAt1.setName("setObjectLookAt1");
        const setObjectLookAt1_nodes = {};
        setObjectLookAt1.uiData.setPosition(400, 0);
        setObjectLookAt1.params.postCreateSpareParams();
        setObjectLookAt1.params.runOnSceneLoadHooks();
        return { node: setObjectLookAt1, children: setObjectLookAt1_nodes };
      }
      actor1_nodes["onTick1"] = create_onTick1(actor1);
      actor1_nodes["plane1"] = create_plane12(actor1);
      actor1_nodes["rayFromCursor1"] = create_rayFromCursor1(actor1);
      actor1_nodes["rayIntersectPlane1"] = create_rayIntersectPlane1(actor1);
      actor1_nodes["setObjectLookAt1"] = create_setObjectLookAt1(actor1);
      actor1_nodes["rayIntersectPlane1"].node.setInput("Ray", actor1_nodes["rayFromCursor1"].node, "Ray");
      actor1_nodes["rayIntersectPlane1"].node.setInput("Plane", actor1_nodes["plane1"].node, "Plane");
      actor1_nodes["setObjectLookAt1"].node.setInput("trigger", actor1_nodes["onTick1"].node, "trigger");
      actor1_nodes["setObjectLookAt1"].node.setInput(
        "targetPosition",
        actor1_nodes["rayIntersectPlane1"].node,
        "position"
      );
      actor1.uiData.setPosition(-100, 250);
      actor1.flags.display.set(true);
      actor1.params.postCreateSpareParams();
      actor1.params.runOnSceneLoadHooks();
      return { node: actor1, children: actor1_nodes };
    }
    function create_copy1(objects2) {
      var copy1 = objects2.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setPosition(-100, 100);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_fileOBJ1(objects2) {
      var fileOBJ1 = objects2.createNode("fileOBJ");
      fileOBJ1.setName("fileOBJ1");
      const fileOBJ1_nodes = {};
      fileOBJ1.uiData.setPosition(-250, -150);
      fileOBJ1.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/wolf.obj");
      fileOBJ1.params.postCreateSpareParams();
      fileOBJ1.params.runOnSceneLoadHooks();
      return { node: fileOBJ1, children: fileOBJ1_nodes };
    }
    function create_plane1(objects2) {
      var plane1 = objects2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(50, -150);
      plane1.p.size.set([4, 4]);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    function create_transform1(objects2) {
      var transform1 = objects2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-250, -50);
      transform1.p.group.set("*");
      transform1.p.r.set([0, -90, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    objects_nodes["actor1"] = create_actor1(objects);
    objects_nodes["copy1"] = create_copy1(objects);
    objects_nodes["fileOBJ1"] = create_fileOBJ1(objects);
    objects_nodes["plane1"] = create_plane1(objects);
    objects_nodes["transform1"] = create_transform1(objects);
    objects_nodes["actor1"].node.setInput(0, objects_nodes["copy1"].node);
    objects_nodes["copy1"].node.setInput(0, objects_nodes["transform1"].node);
    objects_nodes["copy1"].node.setInput(1, objects_nodes["plane1"].node);
    objects_nodes["transform1"].node.setInput(0, objects_nodes["fileOBJ1"].node);
    objects.uiData.setPosition(-50, -150);
    objects.flags.display.set(true);
    objects.params.postCreateSpareParams();
    objects.params.runOnSceneLoadHooks();
    return { node: objects, children: objects_nodes };
  }
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["objects"] = create_objects(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: scene_root_nodes["objects"].children["actor1"].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_actor_SetObjectLookAt_cursor_ts.5dddb54c225e5bb07cdb.js.map