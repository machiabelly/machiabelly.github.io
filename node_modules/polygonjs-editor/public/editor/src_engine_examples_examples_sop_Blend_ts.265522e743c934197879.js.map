{"version":3,"file":"src_engine_examples_examples_sop_Blend_ts.265522e743c934197879.js","mappings":";;;;;;;;;AAYO,SAAS,yCAAyC,MAAuB;AAE/E,QAAM,qBAAqB,KAAK,WAAW,mBAAmB;AAC9D,qBAAmB,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAEpC,QAAM,UAAU,mBAAmB,WAAW,eAAe;AAC7D,QAAM,iBAAiB,QAAQ,WAAW,qBAAqB;AAC/D,qBAAmB,EAAE,SAAS,QAAQ,cAAc;AAEpD,SAAO,EAAC,mBAAkB;AAC3B;;;;;;;;;;;;;;ACrBuD;AAEhD,SAAS,WAAW,SAA2C;AACrE,QAAM,EAAC,MAAK,IAAI;AAChB,QAAM,OAAO,MAAM,KAAK;AACxB,QAAM,MAAM,KAAK,WAAW,KAAK;AAEjC,QAAM,MAAM,IAAI,WAAW,KAAK;AAChC,QAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,MAAI,EAAE,KAAK,IAAI,CAAC;AAChB,MAAI,EAAE,UAAU,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAGhC,QAAM,UAAU,IAAI,WAAW,SAAS;AACxC,UAAQ,SAAS,GAAG,GAAG;AACvB,UAAQ,EAAE,KAAK,IAAI,IAAI;AACvB,UAAQ,EAAE,QAAQ,IAAI,IAAI;AAC1B,UAAQ,EAAE,QAAQ,IAAI,IAAI;AAC1B,UAAQ,EAAE,QAAQ,IAAI,IAAI;AAC1B,UAAQ,EAAE,EAAE,IAAI,MAAM;AACtB,UAAQ,EAAE,EAAE,IAAI,MAAM;AACtB,UAAQ,EAAE,EAAE,IAAI,MAAM;AAGtB,QAAM,MAAM,IAAI,WAAW,KAAK;AAChC,MAAI,SAAS,GAAG,OAAO;AACvB,MAAI,SAAS,GAAG,MAAM;AAItB,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,SAAS,GAAG,GAAG;AACrB,QAAM,SAAS,GAAG,GAAG;AACrB,QAAM,MAAM,QAAQ,IAAI,IAAI;AAC5B,QAAM,OAAO;AAAA,IACZ;AAAA;AAAA;AAAA,EAGD;AAGA,OAAK,WAAW,iBAAiB;AAEjC,QAAM,EAAC,mBAAkB,IAAI,gGAAwC,CAAC,IAAI;AAE1E,SAAO;AAAA,IACN;AAAA,IACA,YAAY,mBAAmB,KAAK;AAAA,IACpC,cAAc,CAAC,KAAK;AAAA,IACpB,YAAY;AAAA,EACb;AACD","sources":["webpack:///../src/engine/examples/ExampleUtils.ts","webpack:///../src/engine/examples/examples/sop/Blend.ts"],"sourcesContent":["import type {BaseNodeType} from './../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\nimport type {RootManagerNode} from './../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\n// import {PolyScene} from './../../../@polygonjs/polygonjs/src/engine/scene/PolyScene';\n// export function initDefaultScene(scene: PolyScene) {\n// \tconst root = scene.root();\n\n// \t// create a box and a sphere\n// \tconst geo = root.createNode('geo');\n\n// \treturn {scene, root, geo};\n// }\n\nexport function addPerspectiveCameraOBJWithOrbitControls(root: RootManagerNode) {\n\t// create a camera\n\tconst perspectiveCamera1 = root.createNode('perspectiveCamera');\n\tperspectiveCamera1.p.t.set([5, 5, 5]);\n\t// add orbitControls\n\tconst events1 = perspectiveCamera1.createNode('eventsNetwork');\n\tconst orbitsControls = events1.createNode('cameraOrbitControls');\n\tperspectiveCamera1.p.controls.setNode(orbitsControls);\n\n\treturn {perspectiveCamera1};\n}\n\ninterface ReturnedNodeData {\n\tnode: BaseNodeType;\n\tchildren: Record<string, ReturnedNodeData>;\n}\nexport type ReturnedNodeDataDict = Record<string, ReturnedNodeData>;\n","import type {ExampleData, DataCallbackOptions} from '../../Common';\nimport {addPerspectiveCameraOBJWithOrbitControls} from '../../ExampleUtils';\n\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst geo = root.createNode('geo');\n\n\tconst box = geo.createNode('box');\n\tconst sphere = geo.createNode('sphere');\n\tbox.p.size.set(1);\n\tbox.p.divisions.set([10, 10, 10]);\n\n\t// use a normals SOP to have the normals pointing outwards like a sphere\n\tconst normals = geo.createNode('normals');\n\tnormals.setInput(0, box);\n\tnormals.p.edit.set(true);\n\tnormals.p.updateX.set(true);\n\tnormals.p.updateY.set(true);\n\tnormals.p.updateZ.set(true);\n\tnormals.p.x.set('@P.x');\n\tnormals.p.y.set('@P.y');\n\tnormals.p.z.set('@P.z');\n\n\t// use a transform ray SOP to snap the points of the sphere to the box\n\tconst ray = geo.createNode('ray');\n\tray.setInput(0, normals);\n\tray.setInput(1, sphere);\n\n\t// create a blend,\n\t// to blend between the sphere and its projected version\n\tconst blend = geo.createNode('blend');\n\tblend.setInput(0, box);\n\tblend.setInput(1, ray);\n\tblend.flags.display.set(true);\n\tblend.uiData.setComment(\n\t\t`This node blends the box into a sphere.\n\n\t\tTry and change the blend parameter to see how this affects its output`\n\t);\n\n\t// add a light\n\troot.createNode('hemisphereLight');\n\n\tconst {perspectiveCamera1} = addPerspectiveCameraOBJWithOrbitControls(root);\n\n\treturn {\n\t\tscene,\n\t\tcameraPath: perspectiveCamera1.path(),\n\t\tfocusedNodes: [blend],\n\t\tautoLayout: true,\n\t};\n}\n\n// export const sopBlend = [\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_NODE}/sop/blend`,\n// \t\tcreateData,\n// \t\trelatedNodes: [BlendSopNode],\n// \t}),\n// ];\n"],"names":[],"sourceRoot":""}