(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_expressions_centroid_ts"],{

/***/ 68002:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ addPerspectiveCameraOBJWithOrbitControls; }
/* harmony export */ });

function addPerspectiveCameraOBJWithOrbitControls(root) {
  const perspectiveCamera1 = root.createNode("perspectiveCamera");
  perspectiveCamera1.p.t.set([5, 5, 5]);
  const events1 = perspectiveCamera1.createNode("eventsNetwork");
  const orbitsControls = events1.createNode("cameraOrbitControls");
  perspectiveCamera1.p.controls.setNode(orbitsControls);
  return { perspectiveCamera1 };
}


/***/ }),

/***/ 3396:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _ExampleUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68002);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const geo = root.createNode("geo");
  const box = geo.createNode("box");
  const torus = geo.createNode("torus");
  const transform = geo.createNode("transform");
  const noise = geo.createNode("noise");
  const merge = geo.createNode("merge");
  noise.setInput(0, torus);
  transform.setInput(0, box);
  merge.setInput(0, noise);
  merge.setInput(1, transform);
  merge.flags.display.set(true);
  torus.p.radiusTube.set(0.1);
  torus.p.segmentsRadial.set(10);
  torus.p.segmentsTube.set(30);
  noise.p.amplitude.set(0.7);
  noise.p.freq.set([0.3, 0.3, 0.3]);
  noise.p.offset.y.set("$T");
  box.p.size.set(0.25);
  transform.p.t.x.set(`centroid('../${noise.name()}').x`);
  transform.p.t.z.set(`centroid('../${noise.name()}').z`);
  noise.uiData.setComment(
    `The torus is deformed with a noise SOP, and the box is maintained in its center with the centroid expression`
  );
  root.createNode("hemisphereLight");
  const { perspectiveCamera1 } = (0,_ExampleUtils__WEBPACK_IMPORTED_MODULE_0__/* .addPerspectiveCameraOBJWithOrbitControls */ .n)(root);
  scene.play();
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [torus],
    autoLayout: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_expressions_centroid_ts.7482ad8907753b943e4f.js.map