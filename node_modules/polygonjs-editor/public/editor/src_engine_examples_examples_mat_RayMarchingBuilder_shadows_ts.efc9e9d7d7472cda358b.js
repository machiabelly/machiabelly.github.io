(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_shadows_ts"],{

/***/ 19593:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setComment("you can try and toggle this light off to see how it impacts the scene");
    hemisphereLight1.uiData.setPosition(100, 50);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.p.intensity.set(0.5);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0, 0.3944522309289411, 0]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([2.6828291031090608, 3.555146502335787, 3.031687967890383]);
    perspectiveCamera1.p.r.set([-50.07889063327875, 29.57201607690433, 30.5320257209864]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_spotLight1(parentNode) {
    var spotLight1 = parentNode.createNode("spotLight");
    spotLight1.setName("spotLight1");
    const spotLight1_nodes = {};
    spotLight1.uiData.setComment(
      "Change the penumbra of this light to modify the shadow sharpness \n\nNote that the light's shadow is OFF. This means that no shadow map needs to be rendered to display shadows in raymarching materials.\n\nYou can also notice that the shadows look much smoother than typical shadow maps."
    );
    spotLight1.uiData.setPosition(350, 50);
    spotLight1.flags.display.set(true);
    spotLight1.p.color.set([0.8588235294117647, 0.9058823529411765, 0.5176470588235295]);
    spotLight1.p.intensity.set(2.4);
    spotLight1.p.angle.set(30.6);
    spotLight1.p.decay.set(0.8);
    spotLight1.p.penumbra.set(0.42);
    spotLight1.p.raymarchingPenumbra.set(0.42);
    spotLight1.p.showHelper.set(true);
    spotLight1.params.postCreateSpareParams();
    spotLight1.params.runOnSceneLoadHooks();
    return { node: spotLight1, children: spotLight1_nodes };
  }
  function create_polarTransform1(parentNode) {
    var polarTransform1 = parentNode.createNode("polarTransform");
    polarTransform1.setName("polarTransform1");
    const polarTransform1_nodes = {};
    polarTransform1.uiData.setComment(
      "Try and change the lattitude parameter of this node in order to change the orientation of the light"
    );
    polarTransform1.uiData.setPosition(350, -200);
    polarTransform1.flags.display.set(false);
    polarTransform1.p.longitude.set("$F");
    polarTransform1.p.latitude.set(28.8);
    polarTransform1.p.depth.set(4.8);
    polarTransform1.params.postCreateSpareParams();
    polarTransform1.params.runOnSceneLoadHooks();
    return { node: polarTransform1, children: polarTransform1_nodes };
  }
  function create_raymarchedObject(parentNode) {
    var raymarchedObject = parentNode.createNode("geo");
    raymarchedObject.setName("raymarchedObject");
    const raymarchedObject_nodes = {};
    function create_MAT(raymarchedObject2) {
      var MAT = raymarchedObject2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        const rayMarchingBuilder1_nodes = {};
        function create_SDFBoxFrame1(rayMarchingBuilder12) {
          var SDFBoxFrame1 = rayMarchingBuilder12.createNode("SDFBoxFrame");
          SDFBoxFrame1.setName("SDFBoxFrame1");
          const SDFBoxFrame1_nodes = {};
          SDFBoxFrame1.uiData.setPosition(-450, -900);
          SDFBoxFrame1.p.width.set(0.07);
          SDFBoxFrame1.params.postCreateSpareParams();
          SDFBoxFrame1.params.runOnSceneLoadHooks();
          return { node: SDFBoxFrame1, children: SDFBoxFrame1_nodes };
        }
        function create_SDFBoxFrame2(rayMarchingBuilder12) {
          var SDFBoxFrame2 = rayMarchingBuilder12.createNode("SDFBoxFrame");
          SDFBoxFrame2.setName("SDFBoxFrame2");
          const SDFBoxFrame2_nodes = {};
          SDFBoxFrame2.uiData.setPosition(-450, -650);
          SDFBoxFrame2.p.width.set(0.07);
          SDFBoxFrame2.params.postCreateSpareParams();
          SDFBoxFrame2.params.runOnSceneLoadHooks();
          return { node: SDFBoxFrame2, children: SDFBoxFrame2_nodes };
        }
        function create_SDFContext1(rayMarchingBuilder12) {
          var SDFContext1 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext1.setName("SDFContext1");
          const SDFContext1_nodes = {};
          SDFContext1.uiData.setPosition(100, 0);
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext1.params.postCreateSpareParams();
          SDFContext1.params.runOnSceneLoadHooks();
          return { node: SDFContext1, children: SDFContext1_nodes };
        }
        function create_SDFContext2(rayMarchingBuilder12) {
          var SDFContext2 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext2.setName("SDFContext2");
          const SDFContext2_nodes = {};
          SDFContext2.uiData.setPosition(100, -600);
          SDFContext2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext2.params.postCreateSpareParams();
          SDFContext2.params.runOnSceneLoadHooks();
          return { node: SDFContext2, children: SDFContext2_nodes };
        }
        function create_SDFMaterial1(rayMarchingBuilder12) {
          var SDFMaterial1 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial1.setName("SDFMaterial1");
          const SDFMaterial1_nodes = {};
          SDFMaterial1.uiData.setPosition(-100, 200);
          SDFMaterial1.params.postCreateSpareParams();
          SDFMaterial1.params.runOnSceneLoadHooks();
          return { node: SDFMaterial1, children: SDFMaterial1_nodes };
        }
        function create_SDFMaterial2(rayMarchingBuilder12) {
          var SDFMaterial2 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial2.setName("SDFMaterial2");
          const SDFMaterial2_nodes = {};
          SDFMaterial2.uiData.setPosition(-100, -400);
          SDFMaterial2.p.envMapIntensity.set(0.09);
          SDFMaterial2.p.splitRGB.set(true);
          SDFMaterial2.p.iorOffset.set([-0.04, 0, 0.04]);
          SDFMaterial2.p.transmission.set(1);
          SDFMaterial2.params.postCreateSpareParams();
          SDFMaterial2.params.runOnSceneLoadHooks();
          return { node: SDFMaterial2, children: SDFMaterial2_nodes };
        }
        function create_SDFPlane1(rayMarchingBuilder12) {
          var SDFPlane1 = rayMarchingBuilder12.createNode("SDFPlane");
          SDFPlane1.setName("SDFPlane1");
          const SDFPlane1_nodes = {};
          SDFPlane1.uiData.setPosition(-300, -100);
          SDFPlane1.params.postCreateSpareParams();
          SDFPlane1.params.runOnSceneLoadHooks();
          return { node: SDFPlane1, children: SDFPlane1_nodes };
        }
        function create_SDFSphere3(rayMarchingBuilder12) {
          var SDFSphere3 = rayMarchingBuilder12.createNode("SDFSphere");
          SDFSphere3.setName("SDFSphere3");
          const SDFSphere3_nodes = {};
          SDFSphere3.uiData.setPosition(-450, -1100);
          SDFSphere3.params.postCreateSpareParams();
          SDFSphere3.params.runOnSceneLoadHooks();
          return { node: SDFSphere3, children: SDFSphere3_nodes };
        }
        function create_SDFTransform1(rayMarchingBuilder12) {
          var SDFTransform1 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform1.setName("SDFTransform1");
          const SDFTransform1_nodes = {};
          SDFTransform1.uiData.setPosition(-650, -650);
          SDFTransform1.p.t.set([0, 1, 0]);
          SDFTransform1.p.r.set([0.8, 1.2, 0]);
          SDFTransform1.params.postCreateSpareParams();
          SDFTransform1.params.runOnSceneLoadHooks();
          return { node: SDFTransform1, children: SDFTransform1_nodes };
        }
        function create_SDFTransform2(rayMarchingBuilder12) {
          var SDFTransform2 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform2.setName("SDFTransform2");
          const SDFTransform2_nodes = {};
          SDFTransform2.uiData.setPosition(-700, -900);
          SDFTransform2.p.t.set([0.8, 0, 0]);
          SDFTransform2.p.r.set([0.8, 1.2, 0]);
          SDFTransform2.params.postCreateSpareParams();
          SDFTransform2.params.runOnSceneLoadHooks();
          return { node: SDFTransform2, children: SDFTransform2_nodes };
        }
        function create_SDFUnion2(rayMarchingBuilder12) {
          var SDFUnion2 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion2.setName("SDFUnion2");
          const SDFUnion2_nodes = {};
          SDFUnion2.uiData.setPosition(300, -350);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "sdf0", "0", { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "sdf1", "0", { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion2.params.get("smoothFactor").set(0.23);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion2.params.get("matBlendDist").set(0.74);
          SDFUnion2.params.postCreateSpareParams();
          SDFUnion2.params.runOnSceneLoadHooks();
          return { node: SDFUnion2, children: SDFUnion2_nodes };
        }
        function create_SDFUnion3(rayMarchingBuilder12) {
          var SDFUnion3 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion3.setName("SDFUnion3");
          const SDFUnion3_nodes = {};
          SDFUnion3.uiData.setPosition(-200, -1e3);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion3.params.get("smoothFactor").set(0.32);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion3.params.postCreateSpareParams();
          SDFUnion3.params.runOnSceneLoadHooks();
          return { node: SDFUnion3, children: SDFUnion3_nodes };
        }
        function create_SDFUnion4(rayMarchingBuilder12) {
          var SDFUnion4 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion4.setName("SDFUnion4");
          const SDFUnion4_nodes = {};
          SDFUnion4.uiData.setPosition(-50, -850);
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion4.params.get("smoothFactor").set(0.36);
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion4.params.postCreateSpareParams();
          SDFUnion4.params.runOnSceneLoadHooks();
          return { node: SDFUnion4, children: SDFUnion4_nodes };
        }
        function create_checkers1(rayMarchingBuilder12) {
          var checkers1 = rayMarchingBuilder12.createNode("checkers");
          checkers1.setName("checkers1");
          const checkers1_nodes = {};
          checkers1.uiData.setPosition(-550, 500);
          checkers1.params.postCreateSpareParams();
          checkers1.params.runOnSceneLoadHooks();
          return { node: checkers1, children: checkers1_nodes };
        }
        function create_constant1(rayMarchingBuilder12) {
          var constant1 = rayMarchingBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-700, 200);
          constant1.p.type.set(4);
          constant1.p.color.set([1, 1, 1]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(rayMarchingBuilder12) {
          var constant2 = rayMarchingBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-700, 300);
          constant2.p.type.set(4);
          constant2.p.color.set([0.8274509803921568, 0.7372549019607844, 0.8823529411764706]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_constant3(rayMarchingBuilder12) {
          var constant3 = rayMarchingBuilder12.createNode("constant");
          constant3.setName("constant3");
          const constant3_nodes = {};
          constant3.uiData.setPosition(-300, -300);
          constant3.p.type.set(4);
          constant3.p.color.set([0.9254901960784314, 0.5137254901960784, 0.5137254901960784]);
          constant3.p.asColor.set(true);
          constant3.params.postCreateSpareParams();
          constant3.params.runOnSceneLoadHooks();
          return { node: constant3, children: constant3_nodes };
        }
        function create_constant4(rayMarchingBuilder12) {
          var constant4 = rayMarchingBuilder12.createNode("constant");
          constant4.setName("constant4");
          const constant4_nodes = {};
          constant4.uiData.setPosition(-350, -450);
          constant4.p.type.set(4);
          constant4.p.color.set([0.07058823529411765, 0.06666666666666667, 0.06666666666666667]);
          constant4.p.asColor.set(true);
          constant4.params.postCreateSpareParams();
          constant4.params.runOnSceneLoadHooks();
          return { node: constant4, children: constant4_nodes };
        }
        function create_floatToVec2_1(rayMarchingBuilder12) {
          var floatToVec2_1 = rayMarchingBuilder12.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-700, 500);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_floatToVec3_1(rayMarchingBuilder12) {
          var floatToVec3_1 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(-900, -650);
          floatToVec3_1.p.x.set(0.85);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_floatToVec3_2(rayMarchingBuilder12) {
          var floatToVec3_2 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(-950, -900);
          floatToVec3_2.p.x.set(0.85);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_globals1(rayMarchingBuilder12) {
          var globals1 = rayMarchingBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1050, -650);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_globals2(rayMarchingBuilder12) {
          var globals2 = rayMarchingBuilder12.createNode("globals");
          globals2.setName("globals2");
          const globals2_nodes = {};
          globals2.uiData.setPosition(-900, 500);
          globals2.params.postCreateSpareParams();
          globals2.params.runOnSceneLoadHooks();
          return { node: globals2, children: globals2_nodes };
        }
        function create_globals3(rayMarchingBuilder12) {
          var globals3 = rayMarchingBuilder12.createNode("globals");
          globals3.setName("globals3");
          const globals3_nodes = {};
          globals3.uiData.setPosition(-1100, -900);
          globals3.params.postCreateSpareParams();
          globals3.params.runOnSceneLoadHooks();
          return { node: globals3, children: globals3_nodes };
        }
        function create_mix1(rayMarchingBuilder12) {
          var mix1 = rayMarchingBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(-400, 300);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(600, -200);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_vec3ToFloat1(rayMarchingBuilder12) {
          var vec3ToFloat1 = rayMarchingBuilder12.createNode("vec3ToFloat");
          vec3ToFloat1.setName("vec3ToFloat1");
          const vec3ToFloat1_nodes = {};
          vec3ToFloat1.uiData.setPosition(-800, 500);
          vec3ToFloat1.params.postCreateSpareParams();
          vec3ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec3ToFloat1, children: vec3ToFloat1_nodes };
        }
        rayMarchingBuilder1_nodes["SDFBoxFrame1"] = create_SDFBoxFrame1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBoxFrame2"] = create_SDFBoxFrame2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"] = create_SDFContext1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext2"] = create_SDFContext2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial1"] = create_SDFMaterial1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial2"] = create_SDFMaterial2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFPlane1"] = create_SDFPlane1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFSphere3"] = create_SDFSphere3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform1"] = create_SDFTransform1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform2"] = create_SDFTransform2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion2"] = create_SDFUnion2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion3"] = create_SDFUnion3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion4"] = create_SDFUnion4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["checkers1"] = create_checkers1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant1"] = create_constant1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant2"] = create_constant2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant3"] = create_constant3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant4"] = create_constant4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec2_1"] = create_floatToVec2_1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_1"] = create_floatToVec3_1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_2"] = create_floatToVec3_2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals1"] = create_globals1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals2"] = create_globals2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals3"] = create_globals3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["mix1"] = create_mix1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["vec3ToFloat1"] = create_vec3ToFloat1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBoxFrame1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform2"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFBoxFrame2"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFPlane1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial1"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFContext2"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFUnion4"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFContext2"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial2"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["mix1"].node,
          "mix"
        );
        rayMarchingBuilder1_nodes["SDFMaterial2"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["constant3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFTransform1"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_1"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform2"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_2"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFContext2"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFContext1"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFSphere3"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFBoxFrame1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion4"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFUnion3"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFUnion4"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFBoxFrame2"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["checkers1"].node.setInput(
          "uv",
          rayMarchingBuilder1_nodes["floatToVec2_1"].node,
          "vec2"
        );
        rayMarchingBuilder1_nodes["floatToVec2_1"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["vec3ToFloat1"].node,
          "x"
        );
        rayMarchingBuilder1_nodes["floatToVec2_1"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["vec3ToFloat1"].node,
          "z"
        );
        rayMarchingBuilder1_nodes["floatToVec3_1"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["floatToVec3_2"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["globals3"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["mix1"].node.setInput(
          "value0",
          rayMarchingBuilder1_nodes["constant1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["mix1"].node.setInput(
          "value1",
          rayMarchingBuilder1_nodes["constant2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["mix1"].node.setInput(
          "blend",
          rayMarchingBuilder1_nodes["checkers1"].node,
          "checker"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFUnion2"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["vec3ToFloat1"].node.setInput(
          "vec",
          rayMarchingBuilder1_nodes["globals2"].node,
          "position"
        );
        rayMarchingBuilder1.uiData.setComment(
          "This is the raymarching material. You can check the parameters on the node itself, and also dive into it to see how the primitives are assembled together, and how their respective material properties are created"
        );
        rayMarchingBuilder1.uiData.setPosition(0, 100);
        rayMarchingBuilder1.p.maxSteps.set(21);
        rayMarchingBuilder1.p.maxDist.set(19.81);
        rayMarchingBuilder1.p.surfDist.set(0.01);
        rayMarchingBuilder1.p.overrideCustomMaterials.set(true);
        rayMarchingBuilder1.p.createCustomMatDistance.set(false);
        rayMarchingBuilder1.p.createCustomMatDepth.set(false);
        rayMarchingBuilder1.p.debugMaxSteps.set(188);
        rayMarchingBuilder1.p.debugMaxDepth.set(14);
        rayMarchingBuilder1.p.front.set(true);
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      MAT.uiData.setComment("Dive into this node to see how the raymarching material is set up");
      MAT.uiData.setPosition(-250, 150);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(raymarchedObject2) {
      var material1 = raymarchedObject2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(100, 150);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_plane1(raymarchedObject2) {
      var plane1 = raymarchedObject2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setComment(
        "we using the plane to assign the raymarching material to, but we could use any geometry. Ideally, the geometry should be the smallest possible, so that the raymarching is only computed where it needs to."
      );
      plane1.uiData.setPosition(100, -250);
      plane1.p.size.set([11, 11]);
      plane1.p.useSegmentsCount.set(true);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    raymarchedObject_nodes["MAT"] = create_MAT(raymarchedObject);
    raymarchedObject_nodes["material1"] = create_material1(raymarchedObject);
    raymarchedObject_nodes["plane1"] = create_plane1(raymarchedObject);
    raymarchedObject_nodes["material1"].node.setInput(0, raymarchedObject_nodes["plane1"].node);
    raymarchedObject.uiData.setComment(
      "Dive into this node to see how the raymarched object is setup (it's just a plane with a material)"
    );
    raymarchedObject.uiData.setPosition(-100, -250);
    raymarchedObject.flags.display.set(true);
    raymarchedObject.params.postCreateSpareParams();
    raymarchedObject.params.runOnSceneLoadHooks();
    return { node: raymarchedObject, children: raymarchedObject_nodes };
  }
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["spotLight1"] = create_spotLight1(root);
  scene_root_nodes["polarTransform1"] = create_polarTransform1(root);
  scene_root_nodes["raymarchedObject"] = create_raymarchedObject(root);
  scene_root_nodes["spotLight1"].node.setInput(0, scene_root_nodes["polarTransform1"].node);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: [],
    //scene_root_nodes['raymarchedObject'].children['MAT'].children['rayMarchingBuilder1'].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_shadows_ts.efc9e9d7d7472cda358b.js.map