(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshBasicBuilder_texture_transition_ts"],{

/***/ 95425:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(52070);
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21410);




function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    function create_cameraControls1(cameras2) {
      var cameraControls12 = cameras2.createNode("cameraControls");
      cameraControls12.setName("cameraControls1");
      function create_cameraOrbitControls1(cameraControls13) {
        var cameraOrbitControls1 = cameraControls13.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(cameraControls12);
      cameraControls12.uiData.setPosition(50, 50);
      cameraControls12.p.node.set("cameraOrbitControls1");
      cameraControls12.params.postCreateSpareParams();
      cameraControls12.params.runOnSceneLoadHooks();
      return cameraControls12;
    }
    function create_merge1(cameras2) {
      var merge12 = cameras2.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(-150, 250);
      merge12.flags.display.set(true);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_orthographicCamera_MAIN(cameras2) {
      var orthographicCamera_MAIN2 = cameras2.createNode("orthographicCamera");
      orthographicCamera_MAIN2.setName("orthographicCamera_MAIN");
      orthographicCamera_MAIN2.uiData.setPosition(-400, 0);
      orthographicCamera_MAIN2.p.position.set([0, 0, 0.9]);
      orthographicCamera_MAIN2.params.postCreateSpareParams();
      orthographicCamera_MAIN2.params.runOnSceneLoadHooks();
      return orthographicCamera_MAIN2;
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG2 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG2.setName("perspectiveCamera_DEBUG");
      perspectiveCamera_DEBUG2.uiData.setPosition(50, -50);
      perspectiveCamera_DEBUG2.p.position.set([1.6, 1.6, 1.6]);
      perspectiveCamera_DEBUG2.params.postCreateSpareParams();
      perspectiveCamera_DEBUG2.params.runOnSceneLoadHooks();
      return perspectiveCamera_DEBUG2;
    }
    var cameraControls1 = create_cameraControls1(cameras);
    var merge1 = create_merge1(cameras);
    var orthographicCamera_MAIN = create_orthographicCamera_MAIN(cameras);
    var perspectiveCamera_DEBUG = create_perspectiveCamera_DEBUG(cameras);
    cameraControls1.setInput(0, perspectiveCamera_DEBUG);
    merge1.setInput(0, orthographicCamera_MAIN);
    merge1.setInput(1, cameraControls1);
    cameras.uiData.setPosition(-50, 50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return cameras;
  }
  function create_mainObject(parentNode) {
    var mainObject2 = parentNode.createNode("geo");
    mainObject2.setName("mainObject");
    function create_MAT(mainObject3) {
      var MAT2 = mainObject3.createNode("materialsNetwork");
      MAT2.setName("MAT");
      function create_ANIM(MAT3) {
        var ANIM = MAT3.createNode("animationsNetwork");
        ANIM.setName("ANIM");
        function create_CONTROLS(ANIM2) {
          var CONTROLS2 = ANIM2.createNode("play");
          CONTROLS2.setName("CONTROLS");
          CONTROLS2.uiData.setPosition(-150, 800);
          CONTROLS2.params.postCreateSpareParams();
          CONTROLS2.params.runOnSceneLoadHooks();
          return CONTROLS2;
        }
        function create_PLAY(ANIM2) {
          var PLAY2 = ANIM2.createNode("null");
          PLAY2.setName("PLAY");
          PLAY2.uiData.setPosition(0, 700);
          PLAY2.params.postCreateSpareParams();
          PLAY2.params.runOnSceneLoadHooks();
          return PLAY2;
        }
        function create_RESET(ANIM2) {
          var RESET2 = ANIM2.createNode("null");
          RESET2.setName("RESET");
          RESET2.uiData.setPosition(-450, 700);
          RESET2.params.postCreateSpareParams();
          RESET2.params.runOnSceneLoadHooks();
          return RESET2;
        }
        function create_duration1(ANIM2) {
          var duration12 = ANIM2.createNode("duration");
          duration12.setName("duration1");
          duration12.uiData.setPosition(0, -250);
          duration12.p.duration.set(3);
          duration12.params.postCreateSpareParams();
          duration12.params.runOnSceneLoadHooks();
          return duration12;
        }
        function create_easing1(ANIM2) {
          var easing12 = ANIM2.createNode("easing");
          easing12.setName("easing1");
          easing12.uiData.setComment(
            "by changing the values of the duration and easing nodes, you can have easy control over how the animation will feel."
          );
          easing12.uiData.setPosition(0, -150);
          easing12.p.name.set(2);
          easing12.params.postCreateSpareParams();
          easing12.params.runOnSceneLoadHooks();
          return easing12;
        }
        function create_propertyName1(ANIM2) {
          var propertyName12 = ANIM2.createNode("propertyName");
          propertyName12.setName("propertyName1");
          propertyName12.uiData.setComment(
            'the target and propertyName nodes are set to update the parameter "threshold" of the material applied to the plane.'
          );
          propertyName12.uiData.setPosition(0, 150);
          propertyName12.p.name.set("threshold");
          propertyName12.params.postCreateSpareParams();
          propertyName12.params.runOnSceneLoadHooks();
          return propertyName12;
        }
        function create_propertyValue2(ANIM2) {
          var propertyValue22 = ANIM2.createNode("propertyValue");
          propertyValue22.setName("propertyValue2");
          propertyValue22.uiData.setPosition(-450, 500);
          propertyValue22.p.size.set(1);
          propertyValue22.params.postCreateSpareParams();
          propertyValue22.params.runOnSceneLoadHooks();
          return propertyValue22;
        }
        function create_propertyValue3(ANIM2) {
          var propertyValue32 = ANIM2.createNode("propertyValue");
          propertyValue32.setName("propertyValue3");
          propertyValue32.uiData.setPosition(-100, 350);
          propertyValue32.p.size.set(1);
          propertyValue32.p.value1.set(1);
          propertyValue32.p.value3.set([0, 1, 0]);
          propertyValue32.params.postCreateSpareParams();
          propertyValue32.params.runOnSceneLoadHooks();
          return propertyValue32;
        }
        function create_propertyValue4(ANIM2) {
          var propertyValue42 = ANIM2.createNode("propertyValue");
          propertyValue42.setName("propertyValue4");
          propertyValue42.uiData.setComment(
            "Those 2 propertyValue nodes define the target value of the animation.\nThanks to the switch below, we use one or the other, depending on the current value of the target parameter."
          );
          propertyValue42.uiData.setPosition(100, 350);
          propertyValue42.p.size.set(1);
          propertyValue42.p.value3.set([0, 1, 0]);
          propertyValue42.params.postCreateSpareParams();
          propertyValue42.params.runOnSceneLoadHooks();
          return propertyValue42;
        }
        function create_switch1(ANIM2) {
          var switch12 = ANIM2.createNode("switch");
          switch12.setName("switch1");
          switch12.uiData.setPosition(0, 550);
          switch12.p.input.set('ch("../../meshBasicBuilder1/threshold")>0.5');
          switch12.params.postCreateSpareParams();
          switch12.params.runOnSceneLoadHooks();
          return switch12;
        }
        function create_target1(ANIM2) {
          var target12 = ANIM2.createNode("target");
          target12.setName("target1");
          target12.uiData.setPosition(0, 50);
          target12.p.type.set(1);
          target12.p.nodePath.set("../../meshBasicBuilder1");
          target12.params.postCreateSpareParams();
          target12.params.runOnSceneLoadHooks();
          return target12;
        }
        var CONTROLS = create_CONTROLS(ANIM);
        var PLAY = create_PLAY(ANIM);
        var RESET = create_RESET(ANIM);
        var duration1 = create_duration1(ANIM);
        var easing1 = create_easing1(ANIM);
        var propertyName1 = create_propertyName1(ANIM);
        var propertyValue2 = create_propertyValue2(ANIM);
        var propertyValue3 = create_propertyValue3(ANIM);
        var propertyValue4 = create_propertyValue4(ANIM);
        var switch1 = create_switch1(ANIM);
        var target1 = create_target1(ANIM);
        CONTROLS.setInput(0, RESET);
        CONTROLS.setInput(1, PLAY);
        PLAY.setInput(0, switch1);
        RESET.setInput(0, propertyValue2);
        easing1.setInput(0, duration1);
        propertyName1.setInput(0, target1);
        propertyValue2.setInput(0, propertyName1);
        propertyValue3.setInput(0, propertyName1);
        propertyValue4.setInput(0, propertyName1);
        switch1.setInput(0, propertyValue3);
        switch1.setInput(1, propertyValue4);
        target1.setInput(0, easing1);
        ANIM.uiData.setComment("Inside this node, we defined how the transition is animated.");
        ANIM.uiData.setPosition(-100, 450);
        ANIM.params.postCreateSpareParams();
        ANIM.params.runOnSceneLoadHooks();
        return ANIM;
      }
      function create_COP(MAT3) {
        var COP = MAT3.createNode("copNetwork");
        COP.setName("COP");
        function create_image1(COP2) {
          var image1 = COP2.createNode("image");
          image1.setName("image1");
          image1.uiData.setPosition(-100, 0);
          image1.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/unsplash.com/johannes-plenio-DKix6Un55mw-unsplash.jpg"
          );
          image1.p.tcolorSpace.set(true);
          image1.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);
          image1.p.tminFilter.set(true);
          image1.p.tmagFilter.set(true);
          image1.p.tanisotropy.set(true);
          image1.p.useRendererMaxAnisotropy.set(true);
          image1.p.tflipY.set(true);
          image1.p.flipY.set(true);
          image1.params.postCreateSpareParams();
          image1.params.runOnSceneLoadHooks();
          return image1;
        }
        function create_image2(COP2) {
          var image2 = COP2.createNode("image");
          image2.setName("image2");
          image2.uiData.setPosition(-100, 200);
          image2.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/unsplash.com/claudio-testa--SO3JtE3gZo-unsplash.jpg"
          );
          image2.p.tcolorSpace.set(true);
          image2.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);
          image2.p.tminFilter.set(true);
          image2.p.tmagFilter.set(true);
          image2.p.tanisotropy.set(true);
          image2.p.useRendererMaxAnisotropy.set(true);
          image2.p.tflipY.set(true);
          image2.p.flipY.set(true);
          image2.params.postCreateSpareParams();
          image2.params.runOnSceneLoadHooks();
          return image2;
        }
        create_image1(COP);
        create_image2(COP);
        COP.uiData.setComment("Inside this node, we load the 2 different textures");
        COP.uiData.setPosition(-100, 100);
        COP.params.postCreateSpareParams();
        COP.params.runOnSceneLoadHooks();
        return COP;
      }
      function create_eventsNetwork1(MAT3) {
        var eventsNetwork1 = MAT3.createNode("eventsNetwork");
        eventsNetwork1.setName("eventsNetwork1");
        function create_animation1(eventsNetwork12) {
          var animation12 = eventsNetwork12.createNode("animation");
          animation12.setName("animation1");
          animation12.uiData.setPosition(0, 0);
          animation12.p.animation.set("../../ANIM/PLAY");
          animation12.params.postCreateSpareParams();
          animation12.params.runOnSceneLoadHooks();
          return animation12;
        }
        function create_pointer1(eventsNetwork12) {
          var pointer12 = eventsNetwork12.createNode("pointer");
          pointer12.setName("pointer1");
          pointer12.uiData.setPosition(-250, 0);
          pointer12.params.postCreateSpareParams();
          pointer12.params.runOnSceneLoadHooks();
          return pointer12;
        }
        var animation1 = create_animation1(eventsNetwork1);
        var pointer1 = create_pointer1(eventsNetwork1);
        animation1.setInput("start", pointer1, "pointerdown");
        eventsNetwork1.uiData.setComment(
          'inside here, we set up an event "pointer" node, set to trigger on pointerdown. When that event is triggered, the animation defined in ANIM is started.'
        );
        eventsNetwork1.uiData.setPosition(-100, 250);
        eventsNetwork1.params.postCreateSpareParams();
        eventsNetwork1.params.runOnSceneLoadHooks();
        return eventsNetwork1;
      }
      function create_meshBasicBuilder1(MAT3) {
        var meshBasicBuilder1 = MAT3.createNode("meshBasicBuilder");
        meshBasicBuilder1.setName("meshBasicBuilder1");
        function create_add1(meshBasicBuilder12) {
          var add12 = meshBasicBuilder12.createNode("add");
          add12.setName("add1");
          add12.uiData.setPosition(-100, 550);
          add12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add0", 0, { spare: true, editable: false });
          add12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add1", 0, { spare: true, editable: false });
          add12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "add2", 0, { spare: true, editable: true });
          add12.params.postCreateSpareParams();
          add12.params.runOnSceneLoadHooks();
          return add12;
        }
        function create_constant1(meshBasicBuilder12) {
          var constant12 = meshBasicBuilder12.createNode("constant");
          constant12.setName("constant1");
          constant12.uiData.setPosition(-200, 650);
          constant12.p.float.set(0.04);
          constant12.params.postCreateSpareParams();
          constant12.params.runOnSceneLoadHooks();
          return constant12;
        }
        function create_fit1(meshBasicBuilder12) {
          var fit12 = meshBasicBuilder12.createNode("fit");
          fit12.setName("fit1");
          fit12.uiData.setPosition(-250, 300);
          fit12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit12.params.get("srcMin").set(-1.6);
          fit12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit12.params.get("srcMax").set(1.6);
          fit12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit12.params.postCreateSpareParams();
          fit12.params.runOnSceneLoadHooks();
          return fit12;
        }
        function create_fitFrom01_1(meshBasicBuilder12) {
          var fitFrom01_12 = meshBasicBuilder12.createNode("fitFrom01");
          fitFrom01_12.setName("fitFrom01_1");
          fitFrom01_12.uiData.setPosition(-350, 100);
          fitFrom01_12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fitFrom01_12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fitFrom01_12.params.get("destMin").set(0.09);
          fitFrom01_12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fitFrom01_12.params.postCreateSpareParams();
          fitFrom01_12.params.runOnSceneLoadHooks();
          return fitFrom01_12;
        }
        function create_floatToVec2_1(meshBasicBuilder12) {
          var floatToVec2_12 = meshBasicBuilder12.createNode("floatToVec2");
          floatToVec2_12.setName("floatToVec2_1");
          floatToVec2_12.uiData.setPosition(-700, 350);
          floatToVec2_12.params.postCreateSpareParams();
          floatToVec2_12.params.runOnSceneLoadHooks();
          return floatToVec2_12;
        }
        function create_globals1(meshBasicBuilder12) {
          var globals12 = meshBasicBuilder12.createNode("globals");
          globals12.setName("globals1");
          globals12.uiData.setPosition(-1150, 0);
          globals12.params.postCreateSpareParams();
          globals12.params.runOnSceneLoadHooks();
          return globals12;
        }
        function create_luminance1(meshBasicBuilder12) {
          var luminance12 = meshBasicBuilder12.createNode("luminance");
          luminance12.setName("luminance1");
          luminance12.uiData.setPosition(-500, 100);
          luminance12.params.postCreateSpareParams();
          luminance12.params.runOnSceneLoadHooks();
          return luminance12;
        }
        function create_mix1(meshBasicBuilder12) {
          var mix12 = meshBasicBuilder12.createNode("mix");
          mix12.setName("mix1");
          mix12.uiData.setPosition(200, 0);
          mix12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR4 */ ._.VECTOR4, "value0", [0, 0, 0, 0], { spare: true, editable: false });
          mix12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR4 */ ._.VECTOR4, "value1", [0, 0, 0, 0], { spare: true, editable: false });
          mix12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix12.params.postCreateSpareParams();
          mix12.params.runOnSceneLoadHooks();
          return mix12;
        }
        function create_mult1(meshBasicBuilder12) {
          var mult12 = meshBasicBuilder12.createNode("mult");
          mult12.setName("mult1");
          mult12.uiData.setPosition(-150, 150);
          mult12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult0", 1, { spare: true, editable: false });
          mult12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult1", 1, { spare: true, editable: false });
          mult12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult2", 1, { spare: true, editable: true });
          mult12.params.postCreateSpareParams();
          mult12.params.runOnSceneLoadHooks();
          return mult12;
        }
        function create_multAdd1(meshBasicBuilder12) {
          var multAdd12 = meshBasicBuilder12.createNode("multAdd");
          multAdd12.setName("multAdd1");
          multAdd12.uiData.setPosition(-800, 350);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd12.params.get("mult").set(0.05);
          multAdd12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd12.params.postCreateSpareParams();
          multAdd12.params.runOnSceneLoadHooks();
          return multAdd12;
        }
        function create_noise1(meshBasicBuilder12) {
          var noise12 = meshBasicBuilder12.createNode("noise");
          noise12.setName("noise1");
          noise12.uiData.setPosition(-400, 300);
          noise12.p.type.set(3);
          noise12.p.outputType.set(1);
          noise12.p.octaves.set(7);
          noise12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "amp", 1, { spare: true, editable: true });
          noise12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "position", [0, 0], { spare: true, editable: false });
          noise12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "freq", [1, 1], { spare: true, editable: true });
          noise12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR2 */ ._.VECTOR2, "offset", [0, 0], { spare: true, editable: false });
          noise12.params.postCreateSpareParams();
          noise12.params.runOnSceneLoadHooks();
          return noise12;
        }
        function create_output1(meshBasicBuilder12) {
          var output12 = meshBasicBuilder12.createNode("output");
          output12.setName("output1");
          output12.uiData.setPosition(500, 0);
          output12.params.postCreateSpareParams();
          output12.params.runOnSceneLoadHooks();
          return output12;
        }
        function create_param1(meshBasicBuilder12) {
          var param12 = meshBasicBuilder12.createNode("param");
          param12.setName("param1");
          param12.uiData.setPosition(-400, 450);
          param12.p.name.set("threshold");
          param12.params.postCreateSpareParams();
          param12.params.runOnSceneLoadHooks();
          return param12;
        }
        function create_smoothstep1(meshBasicBuilder12) {
          var smoothstep12 = meshBasicBuilder12.createNode("smoothstep");
          smoothstep12.setName("smoothstep1");
          smoothstep12.uiData.setPosition(100, 350);
          smoothstep12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "edge0", 0, { spare: true, editable: false });
          smoothstep12.params.get("edge0").set(0.35);
          smoothstep12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "edge1", 1, { spare: true, editable: false });
          smoothstep12.params.get("edge1").set(0.39);
          smoothstep12.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "x", 0, { spare: true, editable: false });
          smoothstep12.params.postCreateSpareParams();
          smoothstep12.params.runOnSceneLoadHooks();
          return smoothstep12;
        }
        function create_texture1(meshBasicBuilder12) {
          var texture12 = meshBasicBuilder12.createNode("texture");
          texture12.setName("texture1");
          texture12.uiData.setPosition(-700, -150);
          texture12.params.postCreateSpareParams();
          texture12.params.runOnSceneLoadHooks();
          return texture12;
        }
        function create_texture2(meshBasicBuilder12) {
          var texture22 = meshBasicBuilder12.createNode("texture");
          texture22.setName("texture2");
          texture22.uiData.setPosition(-700, 0);
          texture22.p.paramName.set("texture2");
          texture22.params.postCreateSpareParams();
          texture22.params.runOnSceneLoadHooks();
          return texture22;
        }
        function create_vec4ToVec3_1(meshBasicBuilder12) {
          var vec4ToVec3_12 = meshBasicBuilder12.createNode("vec4ToVec3");
          vec4ToVec3_12.setName("vec4ToVec3_1");
          vec4ToVec3_12.uiData.setPosition(300, 0);
          vec4ToVec3_12.params.postCreateSpareParams();
          vec4ToVec3_12.params.runOnSceneLoadHooks();
          return vec4ToVec3_12;
        }
        function create_vec4ToVec3_2(meshBasicBuilder12) {
          var vec4ToVec3_22 = meshBasicBuilder12.createNode("vec4ToVec3");
          vec4ToVec3_22.setName("vec4ToVec3_2");
          vec4ToVec3_22.uiData.setPosition(-600, 100);
          vec4ToVec3_22.params.postCreateSpareParams();
          vec4ToVec3_22.params.runOnSceneLoadHooks();
          return vec4ToVec3_22;
        }
        var add1 = create_add1(meshBasicBuilder1);
        var constant1 = create_constant1(meshBasicBuilder1);
        var fit1 = create_fit1(meshBasicBuilder1);
        var fitFrom01_1 = create_fitFrom01_1(meshBasicBuilder1);
        var floatToVec2_1 = create_floatToVec2_1(meshBasicBuilder1);
        var globals1 = create_globals1(meshBasicBuilder1);
        var luminance1 = create_luminance1(meshBasicBuilder1);
        var mix1 = create_mix1(meshBasicBuilder1);
        var mult1 = create_mult1(meshBasicBuilder1);
        var multAdd1 = create_multAdd1(meshBasicBuilder1);
        var noise1 = create_noise1(meshBasicBuilder1);
        var output1 = create_output1(meshBasicBuilder1);
        var param1 = create_param1(meshBasicBuilder1);
        var smoothstep1 = create_smoothstep1(meshBasicBuilder1);
        var texture1 = create_texture1(meshBasicBuilder1);
        var texture2 = create_texture2(meshBasicBuilder1);
        var vec4ToVec3_1 = create_vec4ToVec3_1(meshBasicBuilder1);
        var vec4ToVec3_2 = create_vec4ToVec3_2(meshBasicBuilder1);
        add1.setInput("add0", param1, "val");
        add1.setInput("add1", constant1, "val");
        fit1.setInput("val", noise1, "noise");
        fitFrom01_1.setInput("val", luminance1, "lum");
        floatToVec2_1.setInput("x", multAdd1, "val");
        luminance1.setInput("color", vec4ToVec3_2, "vec3");
        mix1.setInput("value0", texture1, "rgba");
        mix1.setInput("value1", texture2, "rgba");
        mix1.setInput("blend", smoothstep1, "val");
        mult1.setInput("mult0", fitFrom01_1, "val");
        mult1.setInput("mult1", fit1, "val");
        multAdd1.setInput("value", globals1, "time");
        noise1.setInput("position", globals1, "uv");
        noise1.setInput("offset", floatToVec2_1, "vec2");
        output1.setInput("color", vec4ToVec3_1, "vec3");
        smoothstep1.setInput("edge0", param1, "val");
        smoothstep1.setInput("edge1", add1, "sum");
        smoothstep1.setInput("x", mult1, "product");
        texture1.setInput("uv", globals1, "uv");
        texture2.setInput("uv", globals1, "uv");
        vec4ToVec3_1.setInput("vec4", mix1, "mix");
        vec4ToVec3_2.setInput("vec4", texture2, "rgba");
        meshBasicBuilder1.uiData.setComment("This is the material.\nEnter inside to see how it is built.");
        meshBasicBuilder1.uiData.setPosition(-100, -100);
        meshBasicBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "texture1", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__/* .NodeContext.COP */ .sy.COP }
        });
        meshBasicBuilder1.params.get("texture1").set("../COP/image1");
        meshBasicBuilder1.params.get("texture1").options.setOption("nodeSelection", { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__/* .NodeContext.COP */ .sy.COP });
        meshBasicBuilder1.params.get("texture1").options.setOption("editable", void 0);
        meshBasicBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "texture2", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__/* .NodeContext.COP */ .sy.COP }
        });
        meshBasicBuilder1.params.get("texture2").set("../COP/image2");
        meshBasicBuilder1.params.get("texture2").options.setOption("nodeSelection", { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_2__/* .NodeContext.COP */ .sy.COP });
        meshBasicBuilder1.params.get("texture2").options.setOption("editable", void 0);
        meshBasicBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "threshold", 0, {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true
        });
        meshBasicBuilder1.params.get("threshold").options.setOption("editable", void 0);
        meshBasicBuilder1.params.postCreateSpareParams();
        meshBasicBuilder1.params.runOnSceneLoadHooks();
        return meshBasicBuilder1;
      }
      create_ANIM(MAT2);
      create_COP(MAT2);
      create_eventsNetwork1(MAT2);
      create_meshBasicBuilder1(MAT2);
      MAT2.uiData.setComment(
        "The main object in this scene is a plane with a material assigned to it.\nThe material is made of 2 textures, which are mixed with a noise.\nBy clicking on the viewer, we animate a parameter that updates the mix value.\n\nEnter into this node to see how it is set up."
      );
      MAT2.uiData.setPosition(-450, 50);
      MAT2.params.postCreateSpareParams();
      MAT2.params.runOnSceneLoadHooks();
      return MAT2;
    }
    function create_material1(mainObject3) {
      var material12 = mainObject3.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(-250, -50);
      material12.flags.display.set(true);
      material12.p.material.set("../MAT/meshBasicBuilder1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_plane1(mainObject3) {
      var plane12 = mainObject3.createNode("plane");
      plane12.setName("plane1");
      plane12.uiData.setPosition(-250, -250);
      plane12.p.size.set([2, 1]);
      plane12.p.direction.set([0, 0, 1]);
      plane12.params.postCreateSpareParams();
      plane12.params.runOnSceneLoadHooks();
      return plane12;
    }
    var MAT = create_MAT(mainObject2);
    var material1 = create_material1(mainObject2);
    var plane1 = create_plane1(mainObject2);
    material1.setInput(0, plane1);
    mainObject2.uiData.setPosition(-50, -150);
    mainObject2.flags.display.set(true);
    mainObject2.params.postCreateSpareParams();
    mainObject2.params.runOnSceneLoadHooks();
    return { mainObject: mainObject2, MAT };
  }
  function create_text_hint(parentNode) {
    var text_hint = parentNode.createNode("geo");
    text_hint.setName("text_hint");
    function create_MAT(text_hint2) {
      var MAT = text_hint2.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshBasic1(MAT2) {
        var meshBasic1 = MAT2.createNode("meshBasic");
        meshBasic1.setName("meshBasic1");
        meshBasic1.uiData.setPosition(-50, -100);
        meshBasic1.params.postCreateSpareParams();
        meshBasic1.params.runOnSceneLoadHooks();
        return meshBasic1;
      }
      function create_meshBasic_OUTLINE(MAT2) {
        var meshBasic_OUTLINE = MAT2.createNode("meshBasic");
        meshBasic_OUTLINE.setName("meshBasic_OUTLINE");
        meshBasic_OUTLINE.uiData.setPosition(-50, 50);
        meshBasic_OUTLINE.p.color.set([0, 0, 0]);
        meshBasic_OUTLINE.p.wireframe.set(true);
        meshBasic_OUTLINE.p.wireframeLinewidth.set(2.3);
        meshBasic_OUTLINE.params.postCreateSpareParams();
        meshBasic_OUTLINE.params.runOnSceneLoadHooks();
        return meshBasic_OUTLINE;
      }
      create_meshBasic1(MAT);
      create_meshBasic_OUTLINE(MAT);
      MAT.uiData.setPosition(-350, 100);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_material1(text_hint2) {
      var material12 = text_hint2.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(-150, -100);
      material12.p.material.set("../MAT/meshBasic1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_material2(text_hint2) {
      var material22 = text_hint2.createNode("material");
      material22.setName("material2");
      material22.uiData.setPosition(50, -100);
      material22.p.material.set("../MAT/meshBasic_OUTLINE");
      material22.params.postCreateSpareParams();
      material22.params.runOnSceneLoadHooks();
      return material22;
    }
    function create_merge1(text_hint2) {
      var merge12 = text_hint2.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(-150, 150);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_text1(text_hint2) {
      var text12 = text_hint2.createNode("text");
      text12.setName("text1");
      text12.uiData.setPosition(-150, -200);
      text12.p.font.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/fonts/SourceCodePro-Black.ttf"
      );
      text12.p.text.set("click\nto start transition");
      text12.p.type.set(1);
      text12.p.size.set(0.05);
      text12.p.justifyMode.set(2);
      text12.params.postCreateSpareParams();
      text12.params.runOnSceneLoadHooks();
      return text12;
    }
    function create_transform1(text_hint2) {
      var transform12 = text_hint2.createNode("transform");
      transform12.setName("transform1");
      transform12.uiData.setPosition(-150, 250);
      transform12.flags.display.set(true);
      transform12.p.t.set([0, -0.3183023872679045, 0.06]);
      transform12.params.postCreateSpareParams();
      transform12.params.runOnSceneLoadHooks();
      return transform12;
    }
    function create_transform2(text_hint2) {
      var transform22 = text_hint2.createNode("transform");
      transform22.setName("transform2");
      transform22.uiData.setPosition(50, 0);
      transform22.p.t.set([0, 0, -3e-3]);
      transform22.params.postCreateSpareParams();
      transform22.params.runOnSceneLoadHooks();
      return transform22;
    }
    create_MAT(text_hint);
    var material1 = create_material1(text_hint);
    var material2 = create_material2(text_hint);
    var merge1 = create_merge1(text_hint);
    var text1 = create_text1(text_hint);
    var transform1 = create_transform1(text_hint);
    var transform2 = create_transform2(text_hint);
    material1.setInput(0, text1);
    material2.setInput(0, text1);
    merge1.setInput(0, material1);
    merge1.setInput(1, transform2);
    transform1.setInput(0, merge1);
    transform2.setInput(0, material2);
    text_hint.uiData.setPosition(-50, -300);
    text_hint.flags.display.set(true);
    text_hint.params.postCreateSpareParams();
    text_hint.params.runOnSceneLoadHooks();
    return text_hint;
  }
  create_cameras(root);
  var { mainObject } = create_mainObject(root);
  create_text_hint(root);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/orthographicCamera_MAIN",
    focusedNodes: [...mainObject.children()],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshBasicBuilder_texture_transition_ts.9e45cbfaf5ec6fdea4ab.js.map