(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_FileGEOJSON_ts"],{

/***/ 69305:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(50, -50);
      hemisphereLight1.flags.display.set(true);
      hemisphereLight1.p.intensity.set(0.52);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    if (lights.childrenController) {
      lights.childrenController.selection.set([]);
    }
    lights.uiData.setPosition(-50, -250);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-0.28304512284506816, 0.13231542551205483, 0.4224857524837647]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(0, 150);
      cameraControls1.flags.display.set(true);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_perspectiveCamera1(cameras2) {
      var perspectiveCamera1 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera1.setName("perspectiveCamera1");
      const perspectiveCamera1_nodes = {};
      perspectiveCamera1.uiData.setPosition(0, -50);
      perspectiveCamera1.p.position.set([3.3, 3.3, 3.3]);
      perspectiveCamera1.params.postCreateSpareParams();
      perspectiveCamera1.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["perspectiveCamera1"] = create_perspectiveCamera1(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([cameras_nodes["perspectiveCamera1"].node]);
    }
    cameras.uiData.setPosition(-50, -150);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_fileGEOJSON1(geo12) {
      var fileGEOJSON1 = geo12.createNode("fileGEOJSON");
      fileGEOJSON1.setName("fileGEOJSON1");
      const fileGEOJSON1_nodes = {};
      fileGEOJSON1.uiData.setComment("this node imports a .geojson from a url");
      fileGEOJSON1.uiData.setPosition(0, -150);
      fileGEOJSON1.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/geojson/ebrelsford/brooklyn.geojson"
      );
      fileGEOJSON1.params.postCreateSpareParams();
      fileGEOJSON1.params.runOnSceneLoadHooks();
      return { node: fileGEOJSON1, children: fileGEOJSON1_nodes };
    }
    function create_transform1(geo12) {
      var transform1 = geo12.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setComment(
        "Since the content of a .geojson is generally using large coordinates values, the object would not be visible when the camera is around the origin.\n\nThis is why we here use the preset `centerToOrigin`, which sets the translate parameters to `-$CEX` , `-$CEY` a0d `-$CEZ` to move the center of the object to the origin"
      );
      transform1.uiData.setPosition(0, 100);
      transform1.p.applyOn.set(1);
      transform1.p.t.set(["-$CEX", "-$CEY", "-$CEZ"]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_transform2(geo12) {
      var transform2 = geo12.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setComment(
        "here we simply adjust the scale. Note that the `objectMode` is set to `multiply matrix`"
      );
      transform2.uiData.setPosition(0, 550);
      transform2.flags.display.set(true);
      transform2.p.applyOn.set(1);
      transform2.p.objectMode.set(1);
      transform2.p.scale.set(13.7);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    geo1_nodes["fileGEOJSON1"] = create_fileGEOJSON1(geo1);
    geo1_nodes["transform1"] = create_transform1(geo1);
    geo1_nodes["transform2"] = create_transform2(geo1);
    geo1_nodes["transform1"].node.setInput(0, geo1_nodes["fileGEOJSON1"].node);
    geo1_nodes["transform2"].node.setInput(0, geo1_nodes["transform1"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([]);
    }
    geo1.uiData.setPosition(-50, -350);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene_root_nodes["geo1"] = create_geo1(root);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera1",
    focusedNodes: Object.values(scene_root_nodes["cameras"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_FileGEOJSON_ts.59bd46ae2a5d6903e96f.js.map