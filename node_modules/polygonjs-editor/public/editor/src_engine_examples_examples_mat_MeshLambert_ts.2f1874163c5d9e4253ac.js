(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshLambert_ts"],{

/***/ 68002:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ addPerspectiveCameraOBJWithOrbitControls; }
/* harmony export */ });

function addPerspectiveCameraOBJWithOrbitControls(root) {
  const perspectiveCamera1 = root.createNode("perspectiveCamera");
  perspectiveCamera1.p.t.set([5, 5, 5]);
  const events1 = perspectiveCamera1.createNode("eventsNetwork");
  const orbitsControls = events1.createNode("cameraOrbitControls");
  perspectiveCamera1.p.controls.setNode(orbitsControls);
  return { perspectiveCamera1 };
}


/***/ }),

/***/ 40254:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _ExampleUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68002);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const geo = root.createNode("geo");
  const sphere = geo.createNode("sphere");
  sphere.p.center.x.set(-2);
  const box = geo.createNode("box");
  box.p.center.x.set(2);
  const torus = geo.createNode("torus");
  torus.p.center.z.set(-2);
  const torusKnot = geo.createNode("torusKnot");
  torusKnot.p.center.z.set(2);
  const merge = geo.createNode("merge");
  merge.setInput(0, sphere);
  merge.setInput(1, box);
  merge.setInput(2, torus);
  merge.setInput(3, torusKnot);
  const materials = scene.root().createNode("materialsNetwork");
  const meshBasic = materials.createNode("meshLambert");
  meshBasic.p.color.set([0, 0.5, 1]);
  const material = geo.createNode("material");
  material.setInput(0, merge);
  material.p.material.setNode(meshBasic);
  material.flags.display.set(true);
  root.createNode("hemisphereLight");
  const { perspectiveCamera1 } = (0,_ExampleUtils__WEBPACK_IMPORTED_MODULE_0__/* .addPerspectiveCameraOBJWithOrbitControls */ .n)(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [sphere],
    autoLayout: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshLambert_ts.2f1874163c5d9e4253ac.js.map