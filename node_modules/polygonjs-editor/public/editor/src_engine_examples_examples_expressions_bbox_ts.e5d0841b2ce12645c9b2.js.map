{"version":3,"file":"src_engine_examples_examples_expressions_bbox_ts.e5d0841b2ce12645c9b2.js","mappings":";;;;;;;;;AAYO,SAAS,yCAAyC,MAAuB;AAE/E,QAAM,qBAAqB,KAAK,WAAW,mBAAmB;AAC9D,qBAAmB,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAEpC,QAAM,UAAU,mBAAmB,WAAW,eAAe;AAC7D,QAAM,iBAAiB,QAAQ,WAAW,qBAAqB;AAC/D,qBAAmB,EAAE,SAAS,QAAQ,cAAc;AAEpD,SAAO,EAAC,mBAAkB;AAC3B;;;;;;;;;;;;;;ACpBuD;AAEhD,SAAS,WAAW,SAA2C;AACrE,QAAM,EAAC,MAAK,IAAI;AAChB,QAAM,OAAO,MAAM,KAAK;AACxB,QAAM,MAAM,KAAK,WAAW,KAAK;AAEjC,QAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,QAAM,MAAM,IAAI,WAAW,KAAK;AAChC,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,aAAa,IAAI,WAAW,WAAW;AAC7C,QAAM,aAAa,IAAI,WAAW,WAAW;AAC7C,QAAM,SAAS,IAAI,WAAW,OAAO;AACrC,QAAM,SAAS,IAAI,WAAW,OAAO;AAErC,aAAW,SAAS,GAAG,MAAM;AAC7B,aAAW,SAAS,GAAG,GAAG;AAE1B,SAAO,SAAS,GAAG,UAAU;AAC7B,SAAO,SAAS,GAAG,UAAU;AAC7B,SAAO,eAAe,IAAI;AAC1B,MAAI,EAAE,OAAO,EAAE,IAAI,CAAC;AAEpB,SAAO,SAAS,GAAG,MAAM;AACzB,SAAO,SAAS,GAAG,KAAK;AACxB,SAAO,MAAM,QAAQ,IAAI,IAAI;AAE7B,QAAM,EAAE,OAAO,IAAI,YAAY,OAAO,KAAK,WAAW;AACtD,QAAM,EAAE,WAAW,IAAI,IAAI;AAC3B,QAAM,EAAE,eAAe,IAAI,CAAC;AAC5B,QAAM,EAAE,aAAa,IAAI,EAAE;AAC3B,QAAM,EAAE,UAAU,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAE/B,QAAM,OAAO,WAAW;AAAA;AAAA,mFAE0D;AAGlF,OAAK,WAAW,iBAAiB;AAEjC,QAAM,EAAC,mBAAkB,IAAI,gGAAwC,CAAC,IAAI;AAO1E,SAAO;AAAA,IACN;AAAA,IACA,YAAY,mBAAmB,KAAK;AAAA,IACpC,cAAc,CAAC,KAAK;AAAA,IACpB,YAAY;AAAA,EACb;AACD","sources":["webpack:///../src/engine/examples/ExampleUtils.ts","webpack:///../src/engine/examples/examples/expressions/bbox.ts"],"sourcesContent":["import type {BaseNodeType} from './../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\nimport type {RootManagerNode} from './../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\n// import {PolyScene} from './../../../@polygonjs/polygonjs/src/engine/scene/PolyScene';\n// export function initDefaultScene(scene: PolyScene) {\n// \tconst root = scene.root();\n\n// \t// create a box and a sphere\n// \tconst geo = root.createNode('geo');\n\n// \treturn {scene, root, geo};\n// }\n\nexport function addPerspectiveCameraOBJWithOrbitControls(root: RootManagerNode) {\n\t// create a camera\n\tconst perspectiveCamera1 = root.createNode('perspectiveCamera');\n\tperspectiveCamera1.p.t.set([5, 5, 5]);\n\t// add orbitControls\n\tconst events1 = perspectiveCamera1.createNode('eventsNetwork');\n\tconst orbitsControls = events1.createNode('cameraOrbitControls');\n\tperspectiveCamera1.p.controls.setNode(orbitsControls);\n\n\treturn {perspectiveCamera1};\n}\n\ninterface ReturnedNodeData {\n\tnode: BaseNodeType;\n\tchildren: Record<string, ReturnedNodeData>;\n}\nexport type ReturnedNodeDataDict = Record<string, ReturnedNodeData>;\n","// import {ASSETS_ROOT} from './../../../../../@polygonjs/polygonjs/src/core/loader/AssetsUtils';\nimport type {ExampleData, DataCallbackOptions} from '../../Common';\nimport {addPerspectiveCameraOBJWithOrbitControls} from '../../ExampleUtils';\n\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst geo = root.createNode('geo');\n\n\tconst sphere = geo.createNode('sphere');\n\tconst box = geo.createNode('box');\n\tconst torus = geo.createNode('torus');\n\tconst transform1 = geo.createNode('transform');\n\tconst transform2 = geo.createNode('transform');\n\tconst merge1 = geo.createNode('merge');\n\tconst merge2 = geo.createNode('merge');\n\n\ttransform1.setInput(0, sphere);\n\ttransform2.setInput(0, box);\n\n\tmerge1.setInput(0, transform1);\n\tmerge1.setInput(1, transform2);\n\tmerge1.setCompactMode(true);\n\tbox.p.center.x.set(3);\n\n\tmerge2.setInput(0, merge1);\n\tmerge2.setInput(1, torus);\n\tmerge2.flags.display.set(true);\n\n\ttorus.p.radius.set(`bbox('../${merge1.name()}').max.x`);\n\ttorus.p.radiusTube.set(0.15);\n\ttorus.p.segmentsRadial.set(5);\n\ttorus.p.segmentsTube.set(60);\n\ttorus.p.direction.set([0, 0, 1]);\n\n\ttorus.uiData.setComment(`The torus's radius is linked to the bounding box of the sphere and the box.\n\nTry and move either the sphere or the box to see how the torus scales up and down.`);\n\n\t// add a light\n\troot.createNode('hemisphereLight');\n\n\tconst {perspectiveCamera1} = addPerspectiveCameraOBJWithOrbitControls(root);\n\n\t// EXPORT\n\t// const nodes = [torus];\n\t// const htmlNodes = {box};\n\t// const camera = perspectiveCamera1;\n\t// return {scene, camera, nodes, htmlNodes};\n\treturn {\n\t\tscene,\n\t\tcameraPath: perspectiveCamera1.path(),\n\t\tfocusedNodes: [torus],\n\t\tautoLayout: true,\n\t};\n}\n\n// export const expressionBbox = [\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_CATEGORY}/${ExamplePrefix.USING_EXPRESSIONS}/bbox`,\n// \t\tcreateData,\n// \t\trelatedExpressions: [ExpressionType.bbox],\n// \t}),\n// ];\n"],"names":[],"sourceRoot":""}