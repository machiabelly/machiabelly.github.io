(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_anim_Target_Node_ts"],{

/***/ 42450:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "F": function() { return /* binding */ AnimPropertyTarget; }
/* harmony export */ });

class AnimPropertyTarget {
  constructor(_scene, _options) {
    this._scene = _scene;
    this._options = _options;
  }
  clone() {
    return new AnimPropertyTarget(this._scene, this._options);
  }
  objects() {
    const objectData = this._options.object;
    if (!objectData) {
      return;
    }
    if (objectData.list) {
      return objectData.list;
    }
    const mask = objectData.mask;
    if (!mask) {
      return;
    }
    return this._scene.objectsByMask(mask);
  }
  node() {
    if (!this._options.node) {
      return;
    }
    const options = this._options.node;
    return options.relativeTo.node(options.path);
  }
}


/***/ }),

/***/ 31309:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "aO": function() { return /* binding */ ANIM_TARGET_TYPES; },
  "vg": function() { return /* binding */ AnimTargetNodeTargetType; },
  "vP": function() { return /* binding */ TargetAnimNode; }
});

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/_Base.ts
var _Base = __webpack_require__(44276);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/animation/TimelineBuilder.ts + 15 modules
var TimelineBuilder = __webpack_require__(82756);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/utils/params/ParamsConfig.ts
var ParamsConfig = __webpack_require__(96949);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/Assert.ts
var Assert = __webpack_require__(68239);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/animation/PropertyTarget.ts
var PropertyTarget = __webpack_require__(42450);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/core/animation/UpdateCallback.ts

class AnimationUpdateCallback {
  constructor() {
    this._update_matrix = false;
  }
  clone() {
    const new_update_callback = new AnimationUpdateCallback();
    new_update_callback.setUpdateMatrix(this._update_matrix);
    return new_update_callback;
  }
  setUpdateMatrix(update_matrix) {
    this._update_matrix = update_matrix;
  }
  updateMatrix() {
    return this._update_matrix;
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Type.ts
var Type = __webpack_require__(19037);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Anim.ts
var Anim = __webpack_require__(28567);
;// CONCATENATED MODULE: ../@polygonjs/polygonjs/src/engine/nodes/anim/Target.ts



var AnimTargetNodeTargetType = /* @__PURE__ */ ((AnimTargetNodeTargetType2) => {
  AnimTargetNodeTargetType2["SCENE_GRAPH"] = "scene graph";
  AnimTargetNodeTargetType2["NODE"] = "node";
  return AnimTargetNodeTargetType2;
})(AnimTargetNodeTargetType || {});
const ANIM_TARGET_TYPES = [
  "scene graph" /* SCENE_GRAPH */,
  "node" /* NODE */
];
const TARGET_TYPE_SCENE_GRAPH = ANIM_TARGET_TYPES.indexOf("scene graph" /* SCENE_GRAPH */);
const TARGET_TYPE_NODE = ANIM_TARGET_TYPES.indexOf("node" /* NODE */);






class TargetAnimParamsConfig extends ParamsConfig/* NodeParamsConfig */.yI {
  constructor() {
    super(...arguments);
    /** @param sets if the target is a Polygonjs node, or a THREE object */
    this.type = ParamsConfig/* ParamConfig.INTEGER */.XC.INTEGER(TARGET_TYPE_SCENE_GRAPH, {
      menu: {
        entries: ANIM_TARGET_TYPES.map((name, value) => {
          return { name, value };
        })
      }
    });
    /** @param if set to a Polygonjs node, this is the node path */
    this.nodePath = ParamsConfig/* ParamConfig.NODE_PATH */.XC.NODE_PATH("", {
      visibleIf: { type: TARGET_TYPE_NODE }
    });
    /** @param if set to a THREE object, this is a mask to find the objects */
    this.objectMask = ParamsConfig/* ParamConfig.STRING */.XC.STRING("/geo*", {
      visibleIf: { type: TARGET_TYPE_SCENE_GRAPH },
      objectMask: true
    });
    /** @param sets if the matrix should be updated as the animation progresses */
    this.updateMatrix = ParamsConfig/* ParamConfig.BOOLEAN */.XC.BOOLEAN(1, {
      visibleIf: { type: TARGET_TYPE_SCENE_GRAPH }
    });
    /** @param prints which objects are targeted by this node, for debugging */
    this.printResolve = ParamsConfig/* ParamConfig.BUTTON */.XC.BUTTON(null, {
      callback: (node, param) => {
        TargetAnimNode.PARAM_CALLBACK_print_resolve(node);
      }
    });
  }
}
const Target_ParamsConfig = new TargetAnimParamsConfig();
class TargetAnimNode extends _Base/* TypedAnimNode */.D {
  constructor() {
    super(...arguments);
    this.paramsConfig = Target_ParamsConfig;
  }
  static type() {
    return Anim/* AnimType.TARGET */.R.TARGET;
  }
  initializeNode() {
    this.io.inputs.setCount(0, 1);
  }
  cook(inputCoreContents) {
    const timelineBuilder = inputCoreContents[0] || new TimelineBuilder/* TimelineBuilder */.S();
    const target = this._create_target(timelineBuilder);
    timelineBuilder.setTarget(target);
    this._set_update_callback(timelineBuilder);
    this.setTimelineBuilder(timelineBuilder);
  }
  setTargetType(targetType) {
    this.p.type.set(ANIM_TARGET_TYPES.indexOf(targetType));
  }
  _create_target(timelineBuilder) {
    const type = ANIM_TARGET_TYPES[this.pv.type];
    switch (type) {
      case "node" /* NODE */: {
        return new PropertyTarget/* AnimPropertyTarget */.F(this.scene(), {
          node: {
            path: this.pv.nodePath.path(),
            relativeTo: this
          }
        });
      }
      case "scene graph" /* SCENE_GRAPH */: {
        return new PropertyTarget/* AnimPropertyTarget */.F(this.scene(), { object: { mask: this.pv.objectMask } });
      }
    }
    Assert/* TypeAssert.unreachable */.f.unreachable(type);
  }
  _set_update_callback(timelineBuilder) {
    const type = ANIM_TARGET_TYPES[this.pv.type];
    let update_callback = timelineBuilder.updateCallback();
    switch (type) {
      case "node" /* NODE */: {
        return;
      }
      case "scene graph" /* SCENE_GRAPH */: {
        if ((0,Type/* isBooleanTrue */.bI)(this.pv.updateMatrix)) {
          update_callback = update_callback || new AnimationUpdateCallback();
          update_callback.setUpdateMatrix(this.pv.updateMatrix);
          timelineBuilder.setUpdateCallback(update_callback);
        }
        return;
      }
    }
    Assert/* TypeAssert.unreachable */.f.unreachable(type);
  }
  static PARAM_CALLBACK_print_resolve(node) {
    node.print_resolve();
  }
  print_resolve() {
    const type = ANIM_TARGET_TYPES[this.pv.type];
    const timeline_builder = new TimelineBuilder/* TimelineBuilder */.S();
    const target = this._create_target(timeline_builder);
    switch (type) {
      case "node" /* NODE */: {
        return console.log(target.node());
      }
      case "scene graph" /* SCENE_GRAPH */: {
        return console.log(target.objects());
      }
    }
  }
}


/***/ }),

/***/ 75898:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_anim_Target__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(31309);
/* harmony import */ var _polygonjs_polygonjs_src_core_animation_Constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(88218);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    function create_ANIM(geo12) {
      var _a;
      const ANIM2 = geo12.createNode("animationsNetwork");
      ANIM2.setName("ANIM");
      function create_CONTROLS(ANIM3) {
        var CONTROLS3 = ANIM3.createNode("play");
        CONTROLS3.setName("CONTROLS");
        CONTROLS3.uiData.setPosition(-150, 700);
        CONTROLS3.params.postCreateSpareParams();
        CONTROLS3.params.runOnSceneLoadHooks();
        CONTROLS3.uiData.setComment(`By using the play/stop/rewind buttons of this node,
you will animate the copy node that is at the level above.

In this case, the animation is set to animate its parameter 'count',
which then animates the number of objects created.`);
        return CONTROLS3;
      }
      function create_PLAY(ANIM3) {
        var PLAY2 = ANIM3.createNode("null");
        PLAY2.setName("PLAY");
        PLAY2.uiData.setPosition(0, 600);
        PLAY2.params.postCreateSpareParams();
        PLAY2.params.runOnSceneLoadHooks();
        return PLAY2;
      }
      function create_RESET(ANIM3) {
        var RESET2 = ANIM3.createNode("null");
        RESET2.setName("RESET");
        RESET2.uiData.setPosition(-300, 600);
        RESET2.params.postCreateSpareParams();
        RESET2.params.runOnSceneLoadHooks();
        return RESET2;
      }
      function create_duration1(ANIM3) {
        var duration12 = ANIM3.createNode("duration");
        duration12.setName("duration1");
        duration12.uiData.setPosition(0, 0);
        duration12.params.postCreateSpareParams();
        duration12.params.runOnSceneLoadHooks();
        return duration12;
      }
      function create_easing1(ANIM3) {
        var easing12 = ANIM3.createNode("easing");
        easing12.setName("easing1");
        easing12.uiData.setPosition(0, 100);
        easing12.setEasing(_polygonjs_polygonjs_src_core_animation_Constant__WEBPACK_IMPORTED_MODULE_0__/* .AnimNodeEasing.POWER2 */ .Mx.POWER2);
        easing12.params.postCreateSpareParams();
        easing12.params.runOnSceneLoadHooks();
        return easing12;
      }
      function create_propertyName1(ANIM3) {
        var propertyName12 = ANIM3.createNode("propertyName");
        propertyName12.setName("propertyName1");
        propertyName12.uiData.setPosition(0, 400);
        propertyName12.p.name.set("count");
        propertyName12.params.postCreateSpareParams();
        propertyName12.params.runOnSceneLoadHooks();
        return propertyName12;
      }
      function create_propertyValue1(ANIM3) {
        var propertyValue12 = ANIM3.createNode("propertyValue");
        propertyValue12.setName("propertyValue1");
        propertyValue12.uiData.setPosition(0, 500);
        propertyValue12.p.size.set(1);
        propertyValue12.p.value1.set(15);
        propertyValue12.params.postCreateSpareParams();
        propertyValue12.params.runOnSceneLoadHooks();
        return propertyValue12;
      }
      function create_propertyValue2(ANIM3) {
        var propertyValue22 = ANIM3.createNode("propertyValue");
        propertyValue22.setName("propertyValue2");
        propertyValue22.uiData.setPosition(-300, 500);
        propertyValue22.p.size.set(1);
        propertyValue22.params.postCreateSpareParams();
        propertyValue22.params.runOnSceneLoadHooks();
        return propertyValue22;
      }
      function create_target1(ANIM3) {
        var target12 = ANIM3.createNode("target");
        target12.setName("target1");
        target12.uiData.setPosition(0, 300);
        target12.setTargetType(_polygonjs_polygonjs_src_engine_nodes_anim_Target__WEBPACK_IMPORTED_MODULE_1__/* .AnimTargetNodeTargetType.NODE */ .vg.NODE);
        target12.p.nodePath.set("../../copy1");
        target12.params.postCreateSpareParams();
        target12.params.runOnSceneLoadHooks();
        return target12;
      }
      var CONTROLS2 = create_CONTROLS(ANIM2);
      var PLAY = create_PLAY(ANIM2);
      var RESET = create_RESET(ANIM2);
      var duration1 = create_duration1(ANIM2);
      var easing1 = create_easing1(ANIM2);
      var propertyName1 = create_propertyName1(ANIM2);
      var propertyValue1 = create_propertyValue1(ANIM2);
      var propertyValue2 = create_propertyValue2(ANIM2);
      var target1 = create_target1(ANIM2);
      CONTROLS2.setInput(0, RESET);
      CONTROLS2.setInput(1, PLAY);
      PLAY.setInput(0, propertyValue1);
      RESET.setInput(0, propertyValue2);
      easing1.setInput(0, duration1);
      propertyName1.setInput(0, target1);
      propertyValue1.setInput(0, propertyName1);
      propertyValue2.setInput(0, propertyName1);
      target1.setInput(0, easing1);
      (_a = ANIM2.childrenController) == null ? void 0 : _a.selection.add([propertyValue1]);
      ANIM2.uiData.setPosition(-400, 300);
      ANIM2.params.postCreateSpareParams();
      ANIM2.params.runOnSceneLoadHooks();
      return { ANIM: ANIM2, CONTROLS: CONTROLS2 };
    }
    function create_box1(geo12) {
      var box12 = geo12.createNode("box");
      box12.setName("box1");
      box12.uiData.setPosition(-200, 0);
      box12.params.postCreateSpareParams();
      box12.params.runOnSceneLoadHooks();
      return box12;
    }
    function create_copy1(geo12) {
      var copy12 = geo12.createNode("copy");
      copy12.setName("copy1");
      copy12.uiData.setPosition(-200, 200);
      copy12.flags.display.set(true);
      copy12.p.count.set(1);
      copy12.p.t.x.set(1);
      copy12.p.r.x.set(7);
      copy12.p.scale.set(0.95);
      copy12.params.postCreateSpareParams();
      copy12.params.runOnSceneLoadHooks();
      return copy12;
    }
    const ANIM = create_ANIM(geo1);
    var box1 = create_box1(geo1);
    var copy1 = create_copy1(geo1);
    copy1.setInput(0, box1);
    geo1.uiData.setPosition(-50, -150);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return __spreadValues({ geo1 }, ANIM);
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return planeHelper1;
    }
    create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return hemisphereLight1;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.x.set(3.9625400379401956);
        cameraOrbitControls1.p.target.y.set(0.04817053372011402);
        cameraOrbitControls1.p.target.z.set(-0.41243246672712486);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.x.set(3.6074898987970676);
    perspectiveCamera12.p.t.y.set(3.819513329169221);
    perspectiveCamera12.p.t.z.set(7.530044733696088);
    perspectiveCamera12.p.r.x.set(-25.364255830000126);
    perspectiveCamera12.p.r.y.set(-2.6336595742865265);
    perspectiveCamera12.p.r.z.set(-1.2479036576512519);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  const { CONTROLS } = create_geo1(root);
  create_grid(root);
  create_hemisphereLight1(root);
  const perspectiveCamera1 = create_perspectiveCamera1(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [CONTROLS]
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_anim_Target_Node_ts.ccc8fb87fffdb1086eb5.js.map