(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshPhysical_ts"],{

/***/ 29168:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21410);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-1.6846618089891994, 0.6698293049902135, -9.963447217276514]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([6.1083911586397095, 3.617256485043771, -9.63946941516725]);
    perspectiveCamera12.p.r.set([-83.72729559289854, 69.16867648840278, 83.29244801887643]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    function create_envMap(COP2) {
      var envMap2 = COP2.createNode("envMap");
      envMap2.setName("envMap");
      envMap2.uiData.setPosition(50, 200);
      envMap2.params.postCreateSpareParams();
      envMap2.params.runOnSceneLoadHooks();
      return envMap2;
    }
    function create_imageEnv(COP2) {
      var imageEnv2 = COP2.createNode("imageEXR");
      imageEnv2.setName("imageEnv");
      imageEnv2.uiData.setPosition(50, 100);
      imageEnv2.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv2.params.postCreateSpareParams();
      imageEnv2.params.runOnSceneLoadHooks();
      return imageEnv2;
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return imageUv;
    }
    var envMap = create_envMap(COP);
    var imageEnv = create_imageEnv(COP);
    create_imageUv(COP);
    envMap.setInput(0, imageEnv);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return COP;
  }
  function create_geo1(parentNode) {
    var geo12 = parentNode.createNode("geo");
    geo12.setName("geo1");
    function create_MAT(geo13) {
      var MAT = geo13.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_COP_marble(MAT2) {
        var COP_marble = MAT2.createNode("copNetwork");
        COP_marble.setName("COP_marble");
        function create_image_MARBLE_DIFFUSE(COP_marble2) {
          var image_MARBLE_DIFFUSE = COP_marble2.createNode("image");
          image_MARBLE_DIFFUSE.setName("image_MARBLE_DIFFUSE");
          image_MARBLE_DIFFUSE.uiData.setPosition(-300, -150);
          image_MARBLE_DIFFUSE.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/marble_01/2k/diffuse.jpg"
          );
          image_MARBLE_DIFFUSE.p.tcolorSpace.set(true);
          image_MARBLE_DIFFUSE.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);
          image_MARBLE_DIFFUSE.p.tminFilter.set(true);
          image_MARBLE_DIFFUSE.p.tmagFilter.set(true);
          image_MARBLE_DIFFUSE.p.tanisotropy.set(true);
          image_MARBLE_DIFFUSE.p.useRendererMaxAnisotropy.set(true);
          image_MARBLE_DIFFUSE.params.postCreateSpareParams();
          image_MARBLE_DIFFUSE.params.runOnSceneLoadHooks();
          return image_MARBLE_DIFFUSE;
        }
        function create_image_MARBLE_DISP(COP_marble2) {
          var image_MARBLE_DISP = COP_marble2.createNode("image");
          image_MARBLE_DISP.setName("image_MARBLE_DISP");
          image_MARBLE_DISP.uiData.setPosition(-300, 50);
          image_MARBLE_DISP.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/marble_01/2k/displacement.png"
          );
          image_MARBLE_DISP.p.tminFilter.set(true);
          image_MARBLE_DISP.p.tmagFilter.set(true);
          image_MARBLE_DISP.p.tanisotropy.set(true);
          image_MARBLE_DISP.p.useRendererMaxAnisotropy.set(true);
          image_MARBLE_DISP.params.postCreateSpareParams();
          image_MARBLE_DISP.params.runOnSceneLoadHooks();
          return image_MARBLE_DISP;
        }
        function create_image_MARBLE_ROUGHNESS(COP_marble2) {
          var image_MARBLE_ROUGHNESS = COP_marble2.createNode("image");
          image_MARBLE_ROUGHNESS.setName("image_MARBLE_ROUGHNESS");
          image_MARBLE_ROUGHNESS.uiData.setPosition(-300, 250);
          image_MARBLE_ROUGHNESS.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/marble_01/2k/rough.jpg"
          );
          image_MARBLE_ROUGHNESS.p.tminFilter.set(true);
          image_MARBLE_ROUGHNESS.p.tmagFilter.set(true);
          image_MARBLE_ROUGHNESS.p.tanisotropy.set(true);
          image_MARBLE_ROUGHNESS.p.useRendererMaxAnisotropy.set(true);
          image_MARBLE_ROUGHNESS.params.postCreateSpareParams();
          image_MARBLE_ROUGHNESS.params.runOnSceneLoadHooks();
          return image_MARBLE_ROUGHNESS;
        }
        create_image_MARBLE_DIFFUSE(COP_marble);
        create_image_MARBLE_DISP(COP_marble);
        create_image_MARBLE_ROUGHNESS(COP_marble);
        COP_marble.uiData.setPosition(300, 600);
        COP_marble.params.postCreateSpareParams();
        COP_marble.params.runOnSceneLoadHooks();
        return COP_marble;
      }
      function create_COP_medieval_block(MAT2) {
        var COP_medieval_block = MAT2.createNode("copNetwork");
        COP_medieval_block.setName("COP_medieval_block");
        function create_image_MEDIEVAL_BLOCK_DIFFUSE(COP_medieval_block2) {
          var image_MEDIEVAL_BLOCK_DIFFUSE = COP_medieval_block2.createNode("image");
          image_MEDIEVAL_BLOCK_DIFFUSE.setName("image_MEDIEVAL_BLOCK_DIFFUSE");
          image_MEDIEVAL_BLOCK_DIFFUSE.uiData.setPosition(-300, -150);
          image_MEDIEVAL_BLOCK_DIFFUSE.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/medieval_blocks_05/2k/diffuse.jpg"
          );
          image_MEDIEVAL_BLOCK_DIFFUSE.p.tcolorSpace.set(true);
          image_MEDIEVAL_BLOCK_DIFFUSE.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);
          image_MEDIEVAL_BLOCK_DIFFUSE.p.tminFilter.set(true);
          image_MEDIEVAL_BLOCK_DIFFUSE.p.tmagFilter.set(true);
          image_MEDIEVAL_BLOCK_DIFFUSE.p.tanisotropy.set(true);
          image_MEDIEVAL_BLOCK_DIFFUSE.p.useRendererMaxAnisotropy.set(true);
          image_MEDIEVAL_BLOCK_DIFFUSE.params.postCreateSpareParams();
          image_MEDIEVAL_BLOCK_DIFFUSE.params.runOnSceneLoadHooks();
          return image_MEDIEVAL_BLOCK_DIFFUSE;
        }
        function create_image_MEDIEVAL_BLOCK_DISP(COP_medieval_block2) {
          var image_MEDIEVAL_BLOCK_DISP = COP_medieval_block2.createNode("image");
          image_MEDIEVAL_BLOCK_DISP.setName("image_MEDIEVAL_BLOCK_DISP");
          image_MEDIEVAL_BLOCK_DISP.uiData.setPosition(-300, 50);
          image_MEDIEVAL_BLOCK_DISP.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/medieval_blocks_05/2k/displacement.png"
          );
          image_MEDIEVAL_BLOCK_DISP.p.tminFilter.set(true);
          image_MEDIEVAL_BLOCK_DISP.p.tmagFilter.set(true);
          image_MEDIEVAL_BLOCK_DISP.p.tanisotropy.set(true);
          image_MEDIEVAL_BLOCK_DISP.p.useRendererMaxAnisotropy.set(true);
          image_MEDIEVAL_BLOCK_DISP.params.postCreateSpareParams();
          image_MEDIEVAL_BLOCK_DISP.params.runOnSceneLoadHooks();
          return image_MEDIEVAL_BLOCK_DISP;
        }
        function create_image_MEDIEVAL_BLOCK_ROUGHNESS(COP_medieval_block2) {
          var image_MEDIEVAL_BLOCK_ROUGHNESS = COP_medieval_block2.createNode("image");
          image_MEDIEVAL_BLOCK_ROUGHNESS.setName("image_MEDIEVAL_BLOCK_ROUGHNESS");
          image_MEDIEVAL_BLOCK_ROUGHNESS.uiData.setPosition(-300, 250);
          image_MEDIEVAL_BLOCK_ROUGHNESS.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/medieval_blocks_05/2k/rough.jpg"
          );
          image_MEDIEVAL_BLOCK_ROUGHNESS.p.tminFilter.set(true);
          image_MEDIEVAL_BLOCK_ROUGHNESS.p.tmagFilter.set(true);
          image_MEDIEVAL_BLOCK_ROUGHNESS.p.tanisotropy.set(true);
          image_MEDIEVAL_BLOCK_ROUGHNESS.p.useRendererMaxAnisotropy.set(true);
          image_MEDIEVAL_BLOCK_ROUGHNESS.params.postCreateSpareParams();
          image_MEDIEVAL_BLOCK_ROUGHNESS.params.runOnSceneLoadHooks();
          return image_MEDIEVAL_BLOCK_ROUGHNESS;
        }
        create_image_MEDIEVAL_BLOCK_DIFFUSE(COP_medieval_block);
        create_image_MEDIEVAL_BLOCK_DISP(COP_medieval_block);
        create_image_MEDIEVAL_BLOCK_ROUGHNESS(COP_medieval_block);
        COP_medieval_block.uiData.setPosition(300, 800);
        COP_medieval_block.params.postCreateSpareParams();
        COP_medieval_block.params.runOnSceneLoadHooks();
        return COP_medieval_block;
      }
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        meshStandard1.uiData.setPosition(0, 0);
        meshStandard1.p.useMap.set(true);
        meshStandard1.p.map.set("../../../COP/imageUv");
        meshStandard1.p.useEnvMap.set(true);
        meshStandard1.p.envMap.set("../../../COP/envMap");
        meshStandard1.p.metalness.set(1);
        meshStandard1.p.roughness.set(0.07);
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return meshStandard1;
      }
      function create_meshStandard2(MAT2) {
        var meshStandard2 = MAT2.createNode("meshPhysical");
        meshStandard2.setName("meshStandard2");
        meshStandard2.uiData.setPosition(0, 200);
        meshStandard2.p.useMap.set(true);
        meshStandard2.p.map.set("../../../COP/imageUv");
        meshStandard2.p.useEnvMap.set(true);
        meshStandard2.p.envMap.set("../../../COP/envMap");
        meshStandard2.p.metalness.set(1);
        meshStandard2.p.roughness.set(0.34);
        meshStandard2.params.postCreateSpareParams();
        meshStandard2.params.runOnSceneLoadHooks();
        return meshStandard2;
      }
      function create_meshStandard3(MAT2) {
        var meshStandard3 = MAT2.createNode("meshPhysical");
        meshStandard3.setName("meshStandard3");
        meshStandard3.uiData.setPosition(0, 400);
        meshStandard3.p.useMap.set(true);
        meshStandard3.p.map.set("../../../COP/imageUv");
        meshStandard3.p.useEnvMap.set(true);
        meshStandard3.p.envMap.set("../../../COP/envMap");
        meshStandard3.params.postCreateSpareParams();
        meshStandard3.params.runOnSceneLoadHooks();
        return meshStandard3;
      }
      function create_meshStandard4(MAT2) {
        var meshStandard4 = MAT2.createNode("meshPhysical");
        meshStandard4.setName("meshStandard4");
        meshStandard4.uiData.setPosition(0, 600);
        meshStandard4.p.useMap.set(true);
        meshStandard4.p.map.set("../COP_marble/image_MARBLE_DIFFUSE");
        meshStandard4.p.useDisplacementMap.set(true);
        meshStandard4.p.displacementMap.set("../COP_marble/image_MARBLE_DISP");
        meshStandard4.p.displacementScale.set(0.03);
        meshStandard4.p.useEnvMap.set(true);
        meshStandard4.p.envMap.set("../../../COP/envMap");
        meshStandard4.p.useRoughnessMap.set(true);
        meshStandard4.p.roughnessMap.set("../COP_marble/image_MARBLE_ROUGHNESS");
        meshStandard4.params.postCreateSpareParams();
        meshStandard4.params.runOnSceneLoadHooks();
        return meshStandard4;
      }
      function create_meshStandard5(MAT2) {
        var meshStandard5 = MAT2.createNode("meshPhysical");
        meshStandard5.setName("meshStandard5");
        meshStandard5.uiData.setPosition(0, 800);
        meshStandard5.p.useMap.set(true);
        meshStandard5.p.map.set("../COP_medieval_block/image_MEDIEVAL_BLOCK_DIFFUSE");
        meshStandard5.p.useDisplacementMap.set(true);
        meshStandard5.p.displacementMap.set("../COP_medieval_block/image_MEDIEVAL_BLOCK_DISP");
        meshStandard5.p.displacementScale.set(0.25);
        meshStandard5.p.useEnvMap.set(true);
        meshStandard5.p.envMap.set("../../../COP/envMap");
        meshStandard5.p.useRoughnessMap.set(true);
        meshStandard5.p.roughnessMap.set("../COP_medieval_block/image_MEDIEVAL_BLOCK_ROUGHNESS");
        meshStandard5.params.postCreateSpareParams();
        meshStandard5.params.runOnSceneLoadHooks();
        return meshStandard5;
      }
      function create_meshStandard6(MAT2) {
        var meshStandard6 = MAT2.createNode("meshPhysical");
        meshStandard6.setName("meshStandard6");
        meshStandard6.uiData.setComment(
          "the MeshPhysicalMaterial is similar to the MeshStandardMaterial, with a few additional properties such as:- transmission- clearcoat - sheen"
        );
        meshStandard6.uiData.setPosition(0, 1050);
        meshStandard6.p.useMap.set(true);
        meshStandard6.p.map.set("../../../COP/imageUv");
        meshStandard6.p.useEnvMap.set(true);
        meshStandard6.p.envMap.set("../../../COP/envMap");
        meshStandard6.p.roughness.set(0);
        meshStandard6.p.transmission.set(1);
        meshStandard6.params.postCreateSpareParams();
        meshStandard6.params.runOnSceneLoadHooks();
        return meshStandard6;
      }
      function create_meshStandard7(MAT2) {
        var meshStandard7 = MAT2.createNode("meshPhysical");
        meshStandard7.setName("meshStandard7");
        meshStandard7.uiData.setPosition(0, 1450);
        meshStandard7.p.useMap.set(true);
        meshStandard7.p.map.set("../../../COP/imageUv");
        meshStandard7.p.useEnvMap.set(true);
        meshStandard7.p.envMap.set("../../../COP/envMap");
        meshStandard7.p.roughness.set(0);
        meshStandard7.p.transmission.set(1);
        meshStandard7.p.ior.set(1.626651);
        meshStandard7.p.thickness.set(1.1);
        meshStandard7.params.postCreateSpareParams();
        meshStandard7.params.runOnSceneLoadHooks();
        return meshStandard7;
      }
      function create_meshStandard8(MAT2) {
        var meshStandard8 = MAT2.createNode("meshPhysical");
        meshStandard8.setName("meshStandard8");
        meshStandard8.uiData.setPosition(0, 1750);
        meshStandard8.p.map.set("../../../COP/imageUv");
        meshStandard8.p.useEnvMap.set(true);
        meshStandard8.p.envMap.set("../../../COP/envMap");
        meshStandard8.p.roughness.set(0.32);
        meshStandard8.p.transmission.set(1);
        meshStandard8.p.ior.set(1.626651);
        meshStandard8.p.thickness.set(1.1);
        meshStandard8.p.attenuationDistance.set(3.9);
        meshStandard8.p.attenuationColor.set([0.32941176470588235, 0.13333333333333333, 0.8666666666666667]);
        meshStandard8.params.postCreateSpareParams();
        meshStandard8.params.runOnSceneLoadHooks();
        return meshStandard8;
      }
      create_COP_marble(MAT);
      create_COP_medieval_block(MAT);
      create_meshStandard1(MAT);
      create_meshStandard2(MAT);
      create_meshStandard3(MAT);
      create_meshStandard4(MAT);
      create_meshStandard5(MAT);
      create_meshStandard6(MAT);
      create_meshStandard7(MAT);
      create_meshStandard8(MAT);
      MAT.uiData.setPosition(-300, 150);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_material1(geo13) {
      var material12 = geo13.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(-50, 150);
      material12.p.material.set("../MAT/meshStandard1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_material2(geo13) {
      var material22 = geo13.createNode("material");
      material22.setName("material2");
      material22.uiData.setPosition(150, 150);
      material22.p.material.set("../MAT/meshStandard2");
      material22.params.postCreateSpareParams();
      material22.params.runOnSceneLoadHooks();
      return material22;
    }
    function create_material3(geo13) {
      var material32 = geo13.createNode("material");
      material32.setName("material3");
      material32.uiData.setPosition(350, 150);
      material32.p.material.set("../MAT/meshStandard3");
      material32.params.postCreateSpareParams();
      material32.params.runOnSceneLoadHooks();
      return material32;
    }
    function create_material4(geo13) {
      var material42 = geo13.createNode("material");
      material42.setName("material4");
      material42.uiData.setPosition(600, 150);
      material42.p.material.set("../MAT/meshStandard4");
      material42.params.postCreateSpareParams();
      material42.params.runOnSceneLoadHooks();
      return material42;
    }
    function create_material5(geo13) {
      var material52 = geo13.createNode("material");
      material52.setName("material5");
      material52.uiData.setPosition(800, 150);
      material52.p.material.set("../MAT/meshStandard5");
      material52.params.postCreateSpareParams();
      material52.params.runOnSceneLoadHooks();
      return material52;
    }
    function create_material6(geo13) {
      var material62 = geo13.createNode("material");
      material62.setName("material6");
      material62.uiData.setPosition(1e3, 150);
      material62.p.material.set("../MAT/meshStandard6");
      material62.params.postCreateSpareParams();
      material62.params.runOnSceneLoadHooks();
      return material62;
    }
    function create_material7(geo13) {
      var material72 = geo13.createNode("material");
      material72.setName("material7");
      material72.uiData.setPosition(1250, 150);
      material72.p.material.set("../MAT/meshStandard7");
      material72.params.postCreateSpareParams();
      material72.params.runOnSceneLoadHooks();
      return material72;
    }
    function create_material8(geo13) {
      var material82 = geo13.createNode("material");
      material82.setName("material8");
      material82.uiData.setPosition(1500, 150);
      material82.p.material.set("../MAT/meshStandard8");
      material82.params.postCreateSpareParams();
      material82.params.runOnSceneLoadHooks();
      return material82;
    }
    function create_merge1(geo13) {
      var merge12 = geo13.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(550, 600);
      merge12.flags.display.set(true);
      merge12.p.inputsCount.set(8);
      merge12.io.inputs.setCount(1, 8);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_sphere1(geo13) {
      var sphere12 = geo13.createNode("sphere");
      sphere12.setName("sphere1");
      sphere12.uiData.setPosition(350, -300);
      sphere12.p.radius.set(0.92);
      sphere12.p.resolution.set([60, 60]);
      sphere12.params.postCreateSpareParams();
      sphere12.params.runOnSceneLoadHooks();
      return sphere12;
    }
    function create_transform1(geo13) {
      var transform12 = geo13.createNode("transform");
      transform12.setName("transform1");
      transform12.uiData.setPosition(-50, 0);
      transform12.p.t.set([0, 1.0741628078914935, 2]);
      transform12.params.postCreateSpareParams();
      transform12.params.runOnSceneLoadHooks();
      return transform12;
    }
    function create_transform2(geo13) {
      var transform22 = geo13.createNode("transform");
      transform22.setName("transform2");
      transform22.uiData.setPosition(150, 0);
      transform22.p.t.set([0, 1.0741628078914935, 0]);
      transform22.params.postCreateSpareParams();
      transform22.params.runOnSceneLoadHooks();
      return transform22;
    }
    function create_transform3(geo13) {
      var transform32 = geo13.createNode("transform");
      transform32.setName("transform3");
      transform32.uiData.setPosition(350, 0);
      transform32.p.t.set([0, 1.0741628078914935, -2]);
      transform32.params.postCreateSpareParams();
      transform32.params.runOnSceneLoadHooks();
      return transform32;
    }
    function create_transform4(geo13) {
      var transform42 = geo13.createNode("transform");
      transform42.setName("transform4");
      transform42.uiData.setPosition(600, 0);
      transform42.p.t.set([0, 1.0741628078914935, -4]);
      transform42.params.postCreateSpareParams();
      transform42.params.runOnSceneLoadHooks();
      return transform42;
    }
    function create_transform5(geo13) {
      var transform52 = geo13.createNode("transform");
      transform52.setName("transform5");
      transform52.uiData.setPosition(800, 0);
      transform52.p.t.set([0, 1.0741628078914935, -6]);
      transform52.params.postCreateSpareParams();
      transform52.params.runOnSceneLoadHooks();
      return transform52;
    }
    function create_transform6(geo13) {
      var transform62 = geo13.createNode("transform");
      transform62.setName("transform6");
      transform62.uiData.setPosition(1e3, 0);
      transform62.p.t.set([0, 1.0741628078914935, -8]);
      transform62.params.postCreateSpareParams();
      transform62.params.runOnSceneLoadHooks();
      return transform62;
    }
    function create_transform7(geo13) {
      var transform72 = geo13.createNode("transform");
      transform72.setName("transform7");
      transform72.uiData.setPosition(1250, 0);
      transform72.p.t.set([0, 1.0741628078914935, -10]);
      transform72.params.postCreateSpareParams();
      transform72.params.runOnSceneLoadHooks();
      return transform72;
    }
    function create_transform8(geo13) {
      var transform82 = geo13.createNode("transform");
      transform82.setName("transform8");
      transform82.uiData.setPosition(1500, 0);
      transform82.p.t.set([0, 1.0741628078914935, -12]);
      transform82.params.postCreateSpareParams();
      transform82.params.runOnSceneLoadHooks();
      return transform82;
    }
    create_MAT(geo12);
    var material1 = create_material1(geo12);
    var material2 = create_material2(geo12);
    var material3 = create_material3(geo12);
    var material4 = create_material4(geo12);
    var material5 = create_material5(geo12);
    var material6 = create_material6(geo12);
    var material7 = create_material7(geo12);
    var material8 = create_material8(geo12);
    var merge1 = create_merge1(geo12);
    var sphere1 = create_sphere1(geo12);
    var transform1 = create_transform1(geo12);
    var transform2 = create_transform2(geo12);
    var transform3 = create_transform3(geo12);
    var transform4 = create_transform4(geo12);
    var transform5 = create_transform5(geo12);
    var transform6 = create_transform6(geo12);
    var transform7 = create_transform7(geo12);
    var transform8 = create_transform8(geo12);
    material1.setInput(0, transform1);
    material2.setInput(0, transform2);
    material3.setInput(0, transform3);
    material4.setInput(0, transform4);
    material5.setInput(0, transform5);
    material6.setInput(0, transform6);
    material7.setInput(0, transform7);
    material8.setInput(0, transform8);
    merge1.setInput(0, material1);
    merge1.setInput(1, material2);
    merge1.setInput(2, material3);
    merge1.setInput(3, material4);
    merge1.setInput(4, material5);
    merge1.setInput(5, material6);
    merge1.setInput(6, material7);
    merge1.setInput(7, material8);
    transform1.setInput(0, sphere1);
    transform2.setInput(0, sphere1);
    transform3.setInput(0, sphere1);
    transform4.setInput(0, sphere1);
    transform5.setInput(0, sphere1);
    transform6.setInput(0, sphere1);
    transform7.setInput(0, sphere1);
    transform8.setInput(0, sphere1);
    geo12.uiData.setPosition(-50, -150);
    geo12.flags.display.set(true);
    geo12.params.postCreateSpareParams();
    geo12.params.runOnSceneLoadHooks();
    return geo12;
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    function create_hemisphereLight1(lights2) {
      var hemisphereLight12 = lights2.createNode("hemisphereLight");
      hemisphereLight12.setName("hemisphereLight1");
      hemisphereLight12.uiData.setPosition(-100, 0);
      hemisphereLight12.params.postCreateSpareParams();
      hemisphereLight12.params.runOnSceneLoadHooks();
      return hemisphereLight12;
    }
    function create_merge1(lights2) {
      var merge12 = lights2.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setPosition(50, 300);
      merge12.flags.display.set(true);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_polarTransform1(lights2) {
      var polarTransform12 = lights2.createNode("polarTransform");
      polarTransform12.setName("polarTransform1");
      polarTransform12.uiData.setPosition(150, 50);
      polarTransform12.p.longitude.set(7.2);
      polarTransform12.p.latitude.set(46.8);
      polarTransform12.p.depth.set(5.8);
      polarTransform12.params.postCreateSpareParams();
      polarTransform12.params.runOnSceneLoadHooks();
      return polarTransform12;
    }
    function create_spotLight1(lights2) {
      var spotLight12 = lights2.createNode("spotLight");
      spotLight12.setName("spotLight1");
      spotLight12.uiData.setPosition(150, -150);
      spotLight12.params.postCreateSpareParams();
      spotLight12.params.runOnSceneLoadHooks();
      return spotLight12;
    }
    var hemisphereLight1 = create_hemisphereLight1(lights);
    var merge1 = create_merge1(lights);
    var polarTransform1 = create_polarTransform1(lights);
    var spotLight1 = create_spotLight1(lights);
    merge1.setInput(0, hemisphereLight1);
    merge1.setInput(1, polarTransform1);
    polarTransform1.setInput(0, spotLight1);
    lights.uiData.setPosition(-50, -50);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return lights;
  }
  function create_ground(parentNode) {
    var ground = parentNode.createNode("geo");
    ground.setName("ground");
    function create_MAT(ground2) {
      var MAT = ground2.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_COP2(MAT2) {
        var COP = MAT2.createNode("copNetwork");
        COP.setName("COP");
        function create_image_DIFF(COP2) {
          var image_DIFF = COP2.createNode("image");
          image_DIFF.setName("image_DIFF");
          image_DIFF.uiData.setPosition(0, 0);
          image_DIFF.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/floor_tiles_06/2k/diffuse.jpg"
          );
          image_DIFF.p.tcolorSpace.set(true);
          image_DIFF.p.colorSpace.set(three__WEBPACK_IMPORTED_MODULE_0__.SRGBColorSpace);
          image_DIFF.p.tminFilter.set(true);
          image_DIFF.p.tmagFilter.set(true);
          image_DIFF.p.tanisotropy.set(true);
          image_DIFF.p.useRendererMaxAnisotropy.set(true);
          image_DIFF.params.postCreateSpareParams();
          image_DIFF.params.runOnSceneLoadHooks();
          return image_DIFF;
        }
        function create_image_ROUGHNESS(COP2) {
          var image_ROUGHNESS = COP2.createNode("image");
          image_ROUGHNESS.setName("image_ROUGHNESS");
          image_ROUGHNESS.uiData.setPosition(0, 200);
          image_ROUGHNESS.p.url.set(
            "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/floor_tiles_06/2k/rough.jpg"
          );
          image_ROUGHNESS.p.tminFilter.set(true);
          image_ROUGHNESS.p.tmagFilter.set(true);
          image_ROUGHNESS.p.tanisotropy.set(true);
          image_ROUGHNESS.p.useRendererMaxAnisotropy.set(true);
          image_ROUGHNESS.params.postCreateSpareParams();
          image_ROUGHNESS.params.runOnSceneLoadHooks();
          return image_ROUGHNESS;
        }
        create_image_DIFF(COP);
        create_image_ROUGHNESS(COP);
        COP.uiData.setPosition(300, 0);
        COP.params.postCreateSpareParams();
        COP.params.runOnSceneLoadHooks();
        return COP;
      }
      function create_meshPhysical1(MAT2) {
        var meshPhysical1 = MAT2.createNode("meshPhysical");
        meshPhysical1.setName("meshPhysical1");
        meshPhysical1.uiData.setPosition(0, 0);
        meshPhysical1.p.useMap.set(true);
        meshPhysical1.p.map.set("../COP/image_DIFF");
        meshPhysical1.p.useRoughnessMap.set(true);
        meshPhysical1.p.roughnessMap.set("../COP/image_ROUGHNESS");
        meshPhysical1.params.postCreateSpareParams();
        meshPhysical1.params.runOnSceneLoadHooks();
        return meshPhysical1;
      }
      create_COP2(MAT);
      create_meshPhysical1(MAT);
      MAT.uiData.setPosition(-100, 150);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_material1(ground2) {
      var material12 = ground2.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(100, 150);
      material12.p.material.set("../MAT/meshPhysical1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_plane1(ground2) {
      var plane12 = ground2.createNode("plane");
      plane12.setName("plane1");
      plane12.uiData.setPosition(100, 0);
      plane12.p.size.set([25, 25]);
      plane12.params.postCreateSpareParams();
      plane12.params.runOnSceneLoadHooks();
      return plane12;
    }
    function create_uvTransform1(ground2) {
      var uvTransform12 = ground2.createNode("uvTransform");
      uvTransform12.setName("uvTransform1");
      uvTransform12.uiData.setPosition(100, 250);
      uvTransform12.flags.display.set(true);
      uvTransform12.p.s.set([2.3000000000000003, 2.3000000000000003]);
      uvTransform12.params.postCreateSpareParams();
      uvTransform12.params.runOnSceneLoadHooks();
      return uvTransform12;
    }
    create_MAT(ground);
    var material1 = create_material1(ground);
    var plane1 = create_plane1(ground);
    var uvTransform1 = create_uvTransform1(ground);
    material1.setInput(0, plane1);
    uvTransform1.setInput(0, material1);
    ground.uiData.setPosition(-50, -250);
    ground.flags.display.set(true);
    ground.p.t.set([0, 0, -3.958229732582667]);
    ground.params.postCreateSpareParams();
    ground.params.runOnSceneLoadHooks();
    return ground;
  }
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  create_COP(root);
  var geo1 = create_geo1(root);
  create_lights(root);
  create_ground(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [geo1.nodesByType("material")[0]],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshPhysical_ts.1f7f4fdd4e883eb1e63b.js.map