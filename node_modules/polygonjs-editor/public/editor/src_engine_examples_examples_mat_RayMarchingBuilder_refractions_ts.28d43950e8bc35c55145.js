(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_refractions_ts"],{

/***/ 92083:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38857);




function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  const scene_root_nodes = {};
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.tminFilter.set(true);
      imageEnv.p.tmagFilter.set(true);
      imageEnv.p.tanisotropy.set(true);
      imageEnv.p.useRendererMaxAnisotropy.set(true);
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([]);
    }
    COP.uiData.setComment("This node contains the node importing the environment map. Dive into it to change it.");
    COP.uiData.setPosition(-350, 50);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_actor1(cameras2) {
      var actor1 = cameras2.createNode("actor");
      actor1.setName("actor1");
      const actor1_nodes = {};
      function create_cursor1(actor12) {
        var cursor1 = actor12.createNode("cursor");
        cursor1.setName("cursor1");
        const cursor1_nodes = {};
        cursor1.uiData.setPosition(-300, 450);
        cursor1.params.postCreateSpareParams();
        cursor1.params.runOnSceneLoadHooks();
        return { node: cursor1, children: cursor1_nodes };
      }
      function create_euler1(actor12) {
        var euler1 = actor12.createNode("euler");
        euler1.setName("euler1");
        const euler1_nodes = {};
        euler1.uiData.setPosition(-150, 450);
        euler1.params.postCreateSpareParams();
        euler1.params.runOnSceneLoadHooks();
        return { node: euler1, children: euler1_nodes };
      }
      function create_floatToVec3_2(actor12) {
        var floatToVec3_2 = actor12.createNode("floatToVec3");
        floatToVec3_2.setName("floatToVec3_2");
        const floatToVec3_2_nodes = {};
        floatToVec3_2.uiData.setPosition(250, 350);
        floatToVec3_2.params.postCreateSpareParams();
        floatToVec3_2.params.runOnSceneLoadHooks();
        return { node: floatToVec3_2, children: floatToVec3_2_nodes };
      }
      function create_mult1(actor12) {
        var mult1 = actor12.createNode("mult");
        mult1.setName("mult1");
        const mult1_nodes = {};
        mult1.uiData.setPosition(100, 350);
        mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult0", 1, { spare: true, editable: false });
        mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult1", 1, { spare: true, editable: true });
        mult1.params.get("mult1").set(0.53);
        mult1.params.postCreateSpareParams();
        mult1.params.runOnSceneLoadHooks();
        return { node: mult1, children: mult1_nodes };
      }
      function create_mult2(actor12) {
        var mult2 = actor12.createNode("mult");
        mult2.setName("mult2");
        const mult2_nodes = {};
        mult2.uiData.setPosition(100, 500);
        mult2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult0", 1, { spare: true, editable: false });
        mult2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult1", 1, { spare: true, editable: true });
        mult2.params.get("mult1").set(0.45);
        mult2.params.postCreateSpareParams();
        mult2.params.runOnSceneLoadHooks();
        return { node: mult2, children: mult2_nodes };
      }
      function create_onTick1(actor12) {
        var onTick1 = actor12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-100, 0);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_setObjectRotation1(actor12) {
        var setObjectRotation1 = actor12.createNode("setObjectRotation");
        setObjectRotation1.setName("setObjectRotation1");
        const setObjectRotation1_nodes = {};
        setObjectRotation1.uiData.setPosition(400, 300);
        setObjectRotation1.p.lerp.set(0.06);
        setObjectRotation1.params.postCreateSpareParams();
        setObjectRotation1.params.runOnSceneLoadHooks();
        return { node: setObjectRotation1, children: setObjectRotation1_nodes };
      }
      function create_vec2ToFloat1(actor12) {
        var vec2ToFloat1 = actor12.createNode("vec2ToFloat");
        vec2ToFloat1.setName("vec2ToFloat1");
        const vec2ToFloat1_nodes = {};
        vec2ToFloat1.uiData.setPosition(-150, 450);
        vec2ToFloat1.params.postCreateSpareParams();
        vec2ToFloat1.params.runOnSceneLoadHooks();
        return { node: vec2ToFloat1, children: vec2ToFloat1_nodes };
      }
      actor1_nodes["cursor1"] = create_cursor1(actor1);
      actor1_nodes["euler1"] = create_euler1(actor1);
      actor1_nodes["floatToVec3_2"] = create_floatToVec3_2(actor1);
      actor1_nodes["mult1"] = create_mult1(actor1);
      actor1_nodes["mult2"] = create_mult2(actor1);
      actor1_nodes["onTick1"] = create_onTick1(actor1);
      actor1_nodes["setObjectRotation1"] = create_setObjectRotation1(actor1);
      actor1_nodes["vec2ToFloat1"] = create_vec2ToFloat1(actor1);
      actor1_nodes["euler1"].node.setInput("Euler", actor1_nodes["floatToVec3_2"].node, "vec3");
      actor1_nodes["floatToVec3_2"].node.setInput("x", actor1_nodes["mult2"].node, "product");
      actor1_nodes["floatToVec3_2"].node.setInput("y", actor1_nodes["mult1"].node, "product");
      actor1_nodes["mult1"].node.setInput("mult0", actor1_nodes["vec2ToFloat1"].node, "x");
      actor1_nodes["mult2"].node.setInput("mult0", actor1_nodes["vec2ToFloat1"].node, "y");
      actor1_nodes["setObjectRotation1"].node.setInput("trigger", actor1_nodes["onTick1"].node, "trigger");
      actor1_nodes["setObjectRotation1"].node.setInput("Euler", actor1_nodes["euler1"].node, "Euler");
      actor1_nodes["vec2ToFloat1"].node.setInput("vec2", actor1_nodes["cursor1"].node, "cursor");
      if (actor1.childrenController) {
        actor1.childrenController.selection.set([]);
      }
      actor1.uiData.setComment(
        "this actor node adds a rotation to the parent of the camera. If you dive inside this node, you can see that the rotation is controlled by the position of the cursor"
      );
      actor1.uiData.setPosition(-200, 100);
      actor1.params.postCreateSpareParams();
      actor1.params.runOnSceneLoadHooks();
      return { node: actor1, children: actor1_nodes };
    }
    function create_actor2(cameras2) {
      var actor2 = cameras2.createNode("actor");
      actor2.setName("actor2");
      const actor2_nodes = {};
      function create_onPerformanceChange1(actor22) {
        var onPerformanceChange1 = actor22.createNode("onPerformanceChange");
        onPerformanceChange1.setName("onPerformanceChange1");
        const onPerformanceChange1_nodes = {};
        onPerformanceChange1.uiData.setComment(
          "Here we listen to any change of performance of the scene, or `change of FPS` (frames per second). If that performance was to fall below the threshold (0.75 in this case), this node to send a trigger.\n\nIn this case, it would trigger the [setParam](../setParam1) node, which would change the [renderer](../../cameraRenderer1/WebGLRenderer1) `pixelRatio` "
        );
        onPerformanceChange1.uiData.setPosition(-200, 200);
        onPerformanceChange1.p.threshold.set(0.75);
        onPerformanceChange1.params.postCreateSpareParams();
        onPerformanceChange1.params.runOnSceneLoadHooks();
        return { node: onPerformanceChange1, children: onPerformanceChange1_nodes };
      }
      function create_setParam1(actor22) {
        var setParam1 = actor22.createNode("setParam");
        setParam1.setName("setParam1");
        const setParam1_nodes = {};
        setParam1.uiData.setPosition(150, 250);
        setParam1.addParam(
          _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.PARAM_PATH */ ._.PARAM_PATH,
          _polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__/* .JsConnectionPointType.PARAM */ .zF.PARAM,
          "../../cameraRenderer1/WebGLRenderer1/pixelRatio",
          { spare: true, editable: true }
        );
        setParam1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setParam1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: true });
        setParam1.params.get("val").set(1);
        setParam1.params.postCreateSpareParams();
        setParam1.params.runOnSceneLoadHooks();
        return { node: setParam1, children: setParam1_nodes };
      }
      actor2_nodes["onPerformanceChange1"] = create_onPerformanceChange1(actor2);
      actor2_nodes["setParam1"] = create_setParam1(actor2);
      actor2_nodes["setParam1"].node.setInput(
        "trigger",
        actor2_nodes["onPerformanceChange1"].node,
        "triggerbelowThreshold"
      );
      if (actor2.childrenController) {
        actor2.childrenController.selection.set([actor2_nodes["onPerformanceChange1"].node]);
      }
      actor2.uiData.setComment(
        "here we add a behavior to the camera, which allows it to listen to performance change, and update the renderer based on it"
      );
      actor2.uiData.setPosition(-100, -500);
      actor2.params.postCreateSpareParams();
      actor2.params.runOnSceneLoadHooks();
      return { node: actor2, children: actor2_nodes };
    }
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(300, 100);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraRenderer1(cameras2) {
      var cameraRenderer1 = cameras2.createNode("cameraRenderer");
      cameraRenderer1.setName("cameraRenderer1");
      const cameraRenderer1_nodes = {};
      function create_WebGLRenderer1(cameraRenderer12) {
        var WebGLRenderer1 = cameraRenderer12.createNode("WebGLRenderer");
        WebGLRenderer1.setName("WebGLRenderer1");
        const WebGLRenderer1_nodes = {};
        WebGLRenderer1.uiData.setPosition(0, 0);
        WebGLRenderer1.p.tpixelRatio.set(true);
        WebGLRenderer1.p.pixelRatio.set(1);
        WebGLRenderer1.params.postCreateSpareParams();
        WebGLRenderer1.params.runOnSceneLoadHooks();
        return { node: WebGLRenderer1, children: WebGLRenderer1_nodes };
      }
      cameraRenderer1_nodes["WebGLRenderer1"] = create_WebGLRenderer1(cameraRenderer1);
      if (cameraRenderer1.childrenController) {
        cameraRenderer1.childrenController.selection.set([]);
      }
      cameraRenderer1.uiData.setComment(
        "here we add a [custom renderer](./WebGLRenderer1), so that we can control the `pixelRatio`. While it is set to 2, which is the default, the raymarching shader in this scene can be heavy. If the [onPerformanceChange node](../actor2/onPerformanceChange1) detects this, it will trigger a change of this `pixelRatio`"
      );
      cameraRenderer1.uiData.setPosition(-100, -800);
      cameraRenderer1.p.node.set("WebGLRenderer1");
      cameraRenderer1.params.postCreateSpareParams();
      cameraRenderer1.params.runOnSceneLoadHooks();
      return { node: cameraRenderer1, children: cameraRenderer1_nodes };
    }
    function create_emptyObject1(cameras2) {
      var emptyObject1 = cameras2.createNode("emptyObject");
      emptyObject1.setName("emptyObject1");
      const emptyObject1_nodes = {};
      emptyObject1.uiData.setPosition(-350, -300);
      emptyObject1.params.postCreateSpareParams();
      emptyObject1.params.runOnSceneLoadHooks();
      return { node: emptyObject1, children: emptyObject1_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setComment(
        "here we merge both the main camera, as well as a debug camera, which is always useful when setting up the scene"
      );
      merge1.uiData.setPosition(50, 450);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG.setName("perspectiveCamera_DEBUG");
      const perspectiveCamera_DEBUG_nodes = {};
      perspectiveCamera_DEBUG.uiData.setPosition(300, -50);
      perspectiveCamera_DEBUG.p.position.set([2, 2, 2]);
      perspectiveCamera_DEBUG.params.postCreateSpareParams();
      perspectiveCamera_DEBUG.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes };
    }
    function create_perspectiveCamera_MAIN(cameras2) {
      var perspectiveCamera_MAIN = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_MAIN.setName("perspectiveCamera_MAIN");
      const perspectiveCamera_MAIN_nodes = {};
      perspectiveCamera_MAIN.uiData.setComment("This creates the main camera");
      perspectiveCamera_MAIN.uiData.setPosition(-100, -1e3);
      perspectiveCamera_MAIN.p.position.set([0, 0, 3.1]);
      perspectiveCamera_MAIN.params.postCreateSpareParams();
      perspectiveCamera_MAIN.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_MAIN, children: perspectiveCamera_MAIN_nodes };
    }
    function create_setChildren1(cameras2) {
      var setChildren1 = cameras2.createNode("setChildren");
      setChildren1.setName("setChildren1");
      const setChildren1_nodes = {};
      setChildren1.uiData.setComment(
        "we add a parent object above the camera, so that we can control the rotation of the parent"
      );
      setChildren1.uiData.setPosition(-200, -200);
      setChildren1.params.postCreateSpareParams();
      setChildren1.params.runOnSceneLoadHooks();
      return { node: setChildren1, children: setChildren1_nodes };
    }
    cameras_nodes["actor1"] = create_actor1(cameras);
    cameras_nodes["actor2"] = create_actor2(cameras);
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraRenderer1"] = create_cameraRenderer1(cameras);
    cameras_nodes["emptyObject1"] = create_emptyObject1(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera_DEBUG"] = create_perspectiveCamera_DEBUG(cameras);
    cameras_nodes["perspectiveCamera_MAIN"] = create_perspectiveCamera_MAIN(cameras);
    cameras_nodes["setChildren1"] = create_setChildren1(cameras);
    cameras_nodes["actor1"].node.setInput(0, cameras_nodes["setChildren1"].node);
    cameras_nodes["actor2"].node.setInput(0, cameras_nodes["cameraRenderer1"].node);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_DEBUG"].node);
    cameras_nodes["cameraRenderer1"].node.setInput(0, cameras_nodes["perspectiveCamera_MAIN"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["actor1"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraControls1"].node);
    cameras_nodes["setChildren1"].node.setInput(0, cameras_nodes["emptyObject1"].node);
    cameras_nodes["setChildren1"].node.setInput(1, cameras_nodes["actor2"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setComment("This node is where the cameras are set up");
    cameras.uiData.setPosition(-50, -50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  function create_raymarchedObject(parentNode) {
    var raymarchedObject = parentNode.createNode("geo");
    raymarchedObject.setName("raymarchedObject");
    const raymarchedObject_nodes = {};
    function create_MAT(raymarchedObject2) {
      var MAT = raymarchedObject2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        const rayMarchingBuilder1_nodes = {};
        function create_SDFContext1(rayMarchingBuilder12) {
          var SDFContext1 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext1.setName("SDFContext1");
          const SDFContext1_nodes = {};
          SDFContext1.uiData.setPosition(750, 100);
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext1.params.postCreateSpareParams();
          SDFContext1.params.runOnSceneLoadHooks();
          return { node: SDFContext1, children: SDFContext1_nodes };
        }
        function create_SDFMaterial1(rayMarchingBuilder12) {
          var SDFMaterial1 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial1.setName("SDFMaterial1");
          const SDFMaterial1_nodes = {};
          SDFMaterial1.uiData.setComment(
            "This is the material applied to the SDF primitives. It contains the refraction properties, so this is where you would edit the index of refraction or refraction limits."
          );
          SDFMaterial1.uiData.setPosition(550, 300);
          SDFMaterial1.p.useEnvMap.set(true);
          SDFMaterial1.p.useRefraction.set(true);
          SDFMaterial1.p.envMapIntensity.set(2);
          SDFMaterial1.p.envMapFresnel.set(1);
          SDFMaterial1.p.envMapFresnelPower.set(2.1);
          SDFMaterial1.p.refractionTint.set([0.18823529411764706, 0.07058823529411765, 0.25098039215686274]);
          SDFMaterial1.p.transmission.set(2);
          SDFMaterial1.p.absorption.set(1.4);
          SDFMaterial1.p.refractionMaxDist.set(9.575);
          SDFMaterial1.params.postCreateSpareParams();
          SDFMaterial1.params.runOnSceneLoadHooks();
          return { node: SDFMaterial1, children: SDFMaterial1_nodes };
        }
        function create_SDFOctahedron1(rayMarchingBuilder12) {
          var SDFOctahedron1 = rayMarchingBuilder12.createNode("SDFOctahedron");
          SDFOctahedron1.setName("SDFOctahedron1");
          const SDFOctahedron1_nodes = {};
          SDFOctahedron1.uiData.setPosition(-100, 50);
          SDFOctahedron1.p.size.set(0.54);
          SDFOctahedron1.params.postCreateSpareParams();
          SDFOctahedron1.params.runOnSceneLoadHooks();
          return { node: SDFOctahedron1, children: SDFOctahedron1_nodes };
        }
        function create_SDFSphere1(rayMarchingBuilder12) {
          var SDFSphere1 = rayMarchingBuilder12.createNode("SDFSphere");
          SDFSphere1.setName("SDFSphere1");
          const SDFSphere1_nodes = {};
          SDFSphere1.uiData.setPosition(350, -100);
          SDFSphere1.params.postCreateSpareParams();
          SDFSphere1.params.runOnSceneLoadHooks();
          return { node: SDFSphere1, children: SDFSphere1_nodes };
        }
        function create_SDFTorus1(rayMarchingBuilder12) {
          var SDFTorus1 = rayMarchingBuilder12.createNode("SDFTorus");
          SDFTorus1.setName("SDFTorus1");
          const SDFTorus1_nodes = {};
          SDFTorus1.uiData.setPosition(-100, -850);
          SDFTorus1.p.radius2.set(0.07);
          SDFTorus1.p.angle.set(2.6801);
          SDFTorus1.params.postCreateSpareParams();
          SDFTorus1.params.runOnSceneLoadHooks();
          return { node: SDFTorus1, children: SDFTorus1_nodes };
        }
        function create_SDFTorus2(rayMarchingBuilder12) {
          var SDFTorus2 = rayMarchingBuilder12.createNode("SDFTorus");
          SDFTorus2.setName("SDFTorus2");
          const SDFTorus2_nodes = {};
          SDFTorus2.uiData.setPosition(-100, -600);
          SDFTorus2.p.radius1.set(0.83);
          SDFTorus2.p.radius2.set(0.07);
          SDFTorus2.p.angle.set(2.957);
          SDFTorus2.params.postCreateSpareParams();
          SDFTorus2.params.runOnSceneLoadHooks();
          return { node: SDFTorus2, children: SDFTorus2_nodes };
        }
        function create_SDFTorus3(rayMarchingBuilder12) {
          var SDFTorus3 = rayMarchingBuilder12.createNode("SDFTorus");
          SDFTorus3.setName("SDFTorus3");
          const SDFTorus3_nodes = {};
          SDFTorus3.uiData.setPosition(-100, -350);
          SDFTorus3.p.radius1.set(0.69);
          SDFTorus3.p.radius2.set(0.07);
          SDFTorus3.p.angle.set(2.9974);
          SDFTorus3.params.postCreateSpareParams();
          SDFTorus3.params.runOnSceneLoadHooks();
          return { node: SDFTorus3, children: SDFTorus3_nodes };
        }
        function create_SDFTransform1(rayMarchingBuilder12) {
          var SDFTransform1 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform1.setName("SDFTransform1");
          const SDFTransform1_nodes = {};
          SDFTransform1.uiData.setPosition(-700, -800);
          SDFTransform1.params.postCreateSpareParams();
          SDFTransform1.params.runOnSceneLoadHooks();
          return { node: SDFTransform1, children: SDFTransform1_nodes };
        }
        function create_SDFTransform2(rayMarchingBuilder12) {
          var SDFTransform2 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform2.setName("SDFTransform2");
          const SDFTransform2_nodes = {};
          SDFTransform2.uiData.setPosition(-500, -600);
          SDFTransform2.params.postCreateSpareParams();
          SDFTransform2.params.runOnSceneLoadHooks();
          return { node: SDFTransform2, children: SDFTransform2_nodes };
        }
        function create_SDFTransform3(rayMarchingBuilder12) {
          var SDFTransform3 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform3.setName("SDFTransform3");
          const SDFTransform3_nodes = {};
          SDFTransform3.uiData.setPosition(-300, -350);
          SDFTransform3.params.postCreateSpareParams();
          SDFTransform3.params.runOnSceneLoadHooks();
          return { node: SDFTransform3, children: SDFTransform3_nodes };
        }
        function create_SDFTransform4(rayMarchingBuilder12) {
          var SDFTransform4 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform4.setName("SDFTransform4");
          const SDFTransform4_nodes = {};
          SDFTransform4.uiData.setPosition(-250, 50);
          SDFTransform4.params.postCreateSpareParams();
          SDFTransform4.params.runOnSceneLoadHooks();
          return { node: SDFTransform4, children: SDFTransform4_nodes };
        }
        function create_SDFUnion1(rayMarchingBuilder12) {
          var SDFUnion1 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion1.setName("SDFUnion1");
          const SDFUnion1_nodes = {};
          SDFUnion1.uiData.setPosition(350, -400);
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion1.params.get("smoothFactor").set(0.27);
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion1.params.postCreateSpareParams();
          SDFUnion1.params.runOnSceneLoadHooks();
          return { node: SDFUnion1, children: SDFUnion1_nodes };
        }
        function create_SDFUnion2(rayMarchingBuilder12) {
          var SDFUnion2 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion2.setName("SDFUnion2");
          const SDFUnion2_nodes = {};
          SDFUnion2.uiData.setPosition(150, -600);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion2.params.get("smoothFactor").set(0.22);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion2.params.postCreateSpareParams();
          SDFUnion2.params.runOnSceneLoadHooks();
          return { node: SDFUnion2, children: SDFUnion2_nodes };
        }
        function create_SDFUnion3(rayMarchingBuilder12) {
          var SDFUnion3 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion3.setName("SDFUnion3");
          const SDFUnion3_nodes = {};
          SDFUnion3.uiData.setPosition(600, 0);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion3.params.get("smoothFactor").set(0.22);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion3.params.postCreateSpareParams();
          SDFUnion3.params.runOnSceneLoadHooks();
          return { node: SDFUnion3, children: SDFUnion3_nodes };
        }
        function create_constant1(rayMarchingBuilder12) {
          var constant1 = rayMarchingBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(150, 250);
          constant1.p.type.set(4);
          constant1.p.color.set([0.2823529411764706, 0.08235294117647059, 0.5764705882352941]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant3(rayMarchingBuilder12) {
          var constant3 = rayMarchingBuilder12.createNode("constant");
          constant3.setName("constant3");
          const constant3_nodes = {};
          constant3.uiData.setPosition(250, 550);
          constant3.p.type.set(4);
          constant3.p.color.set([0.1450980392156863, 0.011764705882352941, 0.30980392156862746]);
          constant3.p.asColor.set(true);
          constant3.params.postCreateSpareParams();
          constant3.params.runOnSceneLoadHooks();
          return { node: constant3, children: constant3_nodes };
        }
        function create_constant_global_speed(rayMarchingBuilder12) {
          var constant_global_speed = rayMarchingBuilder12.createNode("constant");
          constant_global_speed.setName("constant_global_speed");
          const constant_global_speed_nodes = {};
          constant_global_speed.uiData.setPosition(-1650, -200);
          constant_global_speed.p.float.set(0.41);
          constant_global_speed.params.postCreateSpareParams();
          constant_global_speed.params.runOnSceneLoadHooks();
          return { node: constant_global_speed, children: constant_global_speed_nodes };
        }
        function create_floatToVec3_2(rayMarchingBuilder12) {
          var floatToVec3_2 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(-900, -800);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_floatToVec3_3(rayMarchingBuilder12) {
          var floatToVec3_3 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_3.setName("floatToVec3_3");
          const floatToVec3_3_nodes = {};
          floatToVec3_3.uiData.setPosition(-900, -600);
          floatToVec3_3.params.postCreateSpareParams();
          floatToVec3_3.params.runOnSceneLoadHooks();
          return { node: floatToVec3_3, children: floatToVec3_3_nodes };
        }
        function create_floatToVec3_4(rayMarchingBuilder12) {
          var floatToVec3_4 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_4.setName("floatToVec3_4");
          const floatToVec3_4_nodes = {};
          floatToVec3_4.uiData.setPosition(-900, -350);
          floatToVec3_4.params.postCreateSpareParams();
          floatToVec3_4.params.runOnSceneLoadHooks();
          return { node: floatToVec3_4, children: floatToVec3_4_nodes };
        }
        function create_floatToVec3_5(rayMarchingBuilder12) {
          var floatToVec3_5 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_5.setName("floatToVec3_5");
          const floatToVec3_5_nodes = {};
          floatToVec3_5.uiData.setPosition(-1200, 50);
          floatToVec3_5.params.postCreateSpareParams();
          floatToVec3_5.params.runOnSceneLoadHooks();
          return { node: floatToVec3_5, children: floatToVec3_5_nodes };
        }
        function create_globals1(rayMarchingBuilder12) {
          var globals1 = rayMarchingBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1650, -400);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_mult1(rayMarchingBuilder12) {
          var mult1 = rayMarchingBuilder12.createNode("mult");
          mult1.setName("mult1");
          const mult1_nodes = {};
          mult1.uiData.setPosition(-1450, -400);
          mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult0", 1, { spare: true, editable: false });
          mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult1", 1, { spare: true, editable: false });
          mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult2", 1, { spare: true, editable: true });
          mult1.params.postCreateSpareParams();
          mult1.params.runOnSceneLoadHooks();
          return { node: mult1, children: mult1_nodes };
        }
        function create_multAdd1(rayMarchingBuilder12) {
          var multAdd1 = rayMarchingBuilder12.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-1200, -600);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.params.get("mult").set(0.75);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_multAdd2(rayMarchingBuilder12) {
          var multAdd2 = rayMarchingBuilder12.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(-1200, -800);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd2.params.get("mult").set(0.52);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_multAdd3(rayMarchingBuilder12) {
          var multAdd3 = rayMarchingBuilder12.createNode("multAdd");
          multAdd3.setName("multAdd3");
          const multAdd3_nodes = {};
          multAdd3.uiData.setPosition(-1200, -350);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd3.params.get("mult").set(1.71);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd3.params.postCreateSpareParams();
          multAdd3.params.runOnSceneLoadHooks();
          return { node: multAdd3, children: multAdd3_nodes };
        }
        function create_multAdd4(rayMarchingBuilder12) {
          var multAdd4 = rayMarchingBuilder12.createNode("multAdd");
          multAdd4.setName("multAdd4");
          const multAdd4_nodes = {};
          multAdd4.uiData.setPosition(-900, 50);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [0, 0, 0], { spare: true, editable: false });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "preAdd", [0, 0, 0], { spare: true, editable: true });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "mult", [1, 1, 1], { spare: true, editable: true });
          multAdd4.params.get("mult").set([0.32, 0.48, 1]);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "postAdd", [0, 0, 0], { spare: true, editable: true });
          multAdd4.params.postCreateSpareParams();
          multAdd4.params.runOnSceneLoadHooks();
          return { node: multAdd4, children: multAdd4_nodes };
        }
        function create_multAdd5(rayMarchingBuilder12) {
          var multAdd5 = rayMarchingBuilder12.createNode("multAdd");
          multAdd5.setName("multAdd5");
          const multAdd5_nodes = {};
          multAdd5.uiData.setPosition(0, 100);
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd5.params.get("preAdd").set(-0.04);
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd5.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd5.params.postCreateSpareParams();
          multAdd5.params.runOnSceneLoadHooks();
          return { node: multAdd5, children: multAdd5_nodes };
        }
        function create_null1(rayMarchingBuilder12) {
          var null1 = rayMarchingBuilder12.createNode("null");
          null1.setName("null1");
          const null1_nodes = {};
          null1.uiData.setPosition(-1300, 50);
          null1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          null1.params.postCreateSpareParams();
          null1.params.runOnSceneLoadHooks();
          return { node: null1, children: null1_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(950, 100);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        rayMarchingBuilder1_nodes["SDFContext1"] = create_SDFContext1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial1"] = create_SDFMaterial1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFOctahedron1"] = create_SDFOctahedron1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFSphere1"] = create_SDFSphere1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTorus1"] = create_SDFTorus1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTorus2"] = create_SDFTorus2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTorus3"] = create_SDFTorus3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform1"] = create_SDFTransform1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform2"] = create_SDFTransform2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform3"] = create_SDFTransform3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform4"] = create_SDFTransform4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion1"] = create_SDFUnion1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion2"] = create_SDFUnion2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion3"] = create_SDFUnion3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant1"] = create_constant1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant3"] = create_constant3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant_global_speed"] = create_constant_global_speed(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_2"] = create_floatToVec3_2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_3"] = create_floatToVec3_3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_4"] = create_floatToVec3_4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_5"] = create_floatToVec3_5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals1"] = create_globals1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["mult1"] = create_mult1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd1"] = create_multAdd1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd2"] = create_multAdd2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd3"] = create_multAdd3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd4"] = create_multAdd4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd5"] = create_multAdd5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["null1"] = create_null1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFUnion3"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial1"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["constant1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "refractionTint",
          rayMarchingBuilder1_nodes["constant3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFOctahedron1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform4"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTorus1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTorus2"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform2"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTorus3"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform3"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform1"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_2"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform2"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform2"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_3"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform3"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform2"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform3"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_4"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform4"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["multAdd4"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFUnion1"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFUnion2"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFUnion1"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFTorus3"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFTorus2"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFTorus1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFUnion1"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["multAdd5"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_2"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["multAdd2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_3"].node.setInput(
          "z",
          rayMarchingBuilder1_nodes["multAdd1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_4"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["multAdd3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_5"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["null1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_5"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["null1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_5"].node.setInput(
          "z",
          rayMarchingBuilder1_nodes["null1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["mult1"].node.setInput(
          "mult0",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["mult1"].node.setInput(
          "mult1",
          rayMarchingBuilder1_nodes["constant_global_speed"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["multAdd1"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["multAdd2"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["multAdd3"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["multAdd4"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["floatToVec3_5"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["multAdd5"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["SDFOctahedron1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["null1"].node.setInput(
          "in",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFContext1"].node,
          "SDFContext"
        );
        if (rayMarchingBuilder1.childrenController) {
          rayMarchingBuilder1.childrenController.selection.set([]);
        }
        rayMarchingBuilder1.uiData.setComment(
          "This is the raymarching material. There are only a few properties on the node itself, as most of them are inside other nodes inside it. So dive inside it to edit the various primitivees, like the torus and octagon, how they blend with one another, and also the various refraction properties, like the refraction limit, index of refraction or absorption."
        );
        rayMarchingBuilder1.uiData.setPosition(0, 0);
        rayMarchingBuilder1.p.maxDist.set(8);
        rayMarchingBuilder1.p.surfDist.set(2e-3);
        rayMarchingBuilder1.p.useEnvMap.set(true);
        rayMarchingBuilder1.p.envMap.set("/COP/envMap");
        rayMarchingBuilder1.p.envMapRoughness.set(0);
        rayMarchingBuilder1.p.tEnvMapRotate.set(true);
        rayMarchingBuilder1.p.envMapRotation.set(-3.14159265358979);
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setComment(
        "This node contains the material applied to the sphere. Enter it   to see how the material is setup"
      );
      MAT.uiData.setPosition(-300, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(raymarchedObject2) {
      var material1 = raymarchedObject2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setComment("This applies the raymarching material to the sphere");
      material1.uiData.setPosition(0, 300);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_sphere1(raymarchedObject2) {
      var sphere1 = raymarchedObject2.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setComment("this is a simple sphere");
      sphere1.uiData.setPosition(0, 50);
      sphere1.p.radius.set(1.1400000000000001);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    raymarchedObject_nodes["MAT"] = create_MAT(raymarchedObject);
    raymarchedObject_nodes["material1"] = create_material1(raymarchedObject);
    raymarchedObject_nodes["sphere1"] = create_sphere1(raymarchedObject);
    raymarchedObject_nodes["material1"].node.setInput(0, raymarchedObject_nodes["sphere1"].node);
    if (raymarchedObject.childrenController) {
      raymarchedObject.childrenController.selection.set([]);
    }
    raymarchedObject.uiData.setComment(
      "This node is the most important in this scene. It contains the main object of the scene, and the raymarching material applied to it."
    );
    raymarchedObject.uiData.setPosition(-50, -250);
    raymarchedObject.flags.display.set(true);
    raymarchedObject.params.postCreateSpareParams();
    raymarchedObject.params.runOnSceneLoadHooks();
    return { node: raymarchedObject, children: raymarchedObject_nodes };
  }
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene_root_nodes["raymarchedObject"] = create_raymarchedObject(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_MAIN",
    focusedNodes: scene_root_nodes["raymarchedObject"].children["MAT"].children["rayMarchingBuilder1"].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_refractions_ts.28d43950e8bc35c55145.js.map