(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshMatcap_ts"],{

/***/ 42790:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo12 = parentNode.createNode("geo");
    geo12.setName("geo1");
    function create_COP(geo13) {
      var COP = geo13.createNode("copNetwork");
      COP.setName("COP");
      function create_image1(COP2) {
        var image1 = COP2.createNode("image");
        image1.setName("image1");
        image1.uiData.setComment(
          "Each of those node loads a single texture.\n\nWhen selecting a node, you can use the preset dropdown menu to fetch another matcap texture."
        );
        image1.uiData.setPosition(-350, 0);
        image1.p.url.set("https://makio135.com/matcaps/512/346088_6ABED7_56A0C5_4E91B8-512px.png");
        image1.p.tanisotropy.set(true);
        image1.p.useRendererMaxAnisotropy.set(true);
        image1.params.postCreateSpareParams();
        image1.params.runOnSceneLoadHooks();
        return image1;
      }
      function create_image2(COP2) {
        var image2 = COP2.createNode("image");
        image2.setName("image2");
        image2.uiData.setPosition(-350, 250);
        image2.p.url.set("https://makio135.com/matcaps/512/2D2D2F_C6C2C5_727176_94949B-512px.png");
        image2.p.tanisotropy.set(true);
        image2.p.useRendererMaxAnisotropy.set(true);
        image2.params.postCreateSpareParams();
        image2.params.runOnSceneLoadHooks();
        return image2;
      }
      function create_image3(COP2) {
        var image3 = COP2.createNode("image");
        image3.setName("image3");
        image3.uiData.setPosition(-350, 400);
        image3.p.url.set("https://makio135.com/matcaps/512/593E2C_E5D8A9_BC9F79_9F8A68-512px.png");
        image3.p.tanisotropy.set(true);
        image3.p.useRendererMaxAnisotropy.set(true);
        image3.params.postCreateSpareParams();
        image3.params.runOnSceneLoadHooks();
        return image3;
      }
      function create_image4(COP2) {
        var image4 = COP2.createNode("image");
        image4.setName("image4");
        image4.uiData.setPosition(-350, 550);
        image4.p.url.set("https://makio135.com/matcaps/512/BC5B43_95170B_EEAC92_DB8C7C-512px.png");
        image4.p.tanisotropy.set(true);
        image4.p.useRendererMaxAnisotropy.set(true);
        image4.params.postCreateSpareParams();
        image4.params.runOnSceneLoadHooks();
        return image4;
      }
      function create_image5(COP2) {
        var image5 = COP2.createNode("image");
        image5.setName("image5");
        image5.uiData.setPosition(-350, 700);
        image5.p.url.set("https://makio135.com/matcaps/512/9B9994_E1E0DB_474643_544C4C-512px.png");
        image5.p.tanisotropy.set(true);
        image5.p.useRendererMaxAnisotropy.set(true);
        image5.params.postCreateSpareParams();
        image5.params.runOnSceneLoadHooks();
        return image5;
      }
      create_image1(COP);
      create_image2(COP);
      create_image3(COP);
      create_image4(COP);
      create_image5(COP);
      COP.uiData.setComment("enter into this node to see how the matcap textures are loaded");
      COP.uiData.setPosition(-350, 400);
      COP.params.postCreateSpareParams();
      COP.params.runOnSceneLoadHooks();
      return COP;
    }
    function create_MAT(geo13) {
      var MAT = geo13.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshMatcap1(MAT2) {
        var meshMatcap1 = MAT2.createNode("meshMatcap");
        meshMatcap1.setName("meshMatcap1");
        meshMatcap1.uiData.setPosition(0, -50);
        meshMatcap1.p.useMatcapMap.set(true);
        meshMatcap1.p.matcapMap.set("../../COP/image1");
        meshMatcap1.params.postCreateSpareParams();
        meshMatcap1.params.runOnSceneLoadHooks();
        return meshMatcap1;
      }
      function create_meshMatcap2(MAT2) {
        var meshMatcap2 = MAT2.createNode("meshMatcap");
        meshMatcap2.setName("meshMatcap2");
        meshMatcap2.uiData.setPosition(0, 100);
        meshMatcap2.p.useMatcapMap.set(true);
        meshMatcap2.p.matcapMap.set("../../COP/image2");
        meshMatcap2.params.postCreateSpareParams();
        meshMatcap2.params.runOnSceneLoadHooks();
        return meshMatcap2;
      }
      function create_meshMatcap3(MAT2) {
        var meshMatcap3 = MAT2.createNode("meshMatcap");
        meshMatcap3.setName("meshMatcap3");
        meshMatcap3.uiData.setPosition(0, 250);
        meshMatcap3.p.useMatcapMap.set(true);
        meshMatcap3.p.matcapMap.set("../../COP/image3");
        meshMatcap3.params.postCreateSpareParams();
        meshMatcap3.params.runOnSceneLoadHooks();
        return meshMatcap3;
      }
      function create_meshMatcap4(MAT2) {
        var meshMatcap4 = MAT2.createNode("meshMatcap");
        meshMatcap4.setName("meshMatcap4");
        meshMatcap4.uiData.setPosition(0, 400);
        meshMatcap4.p.useMatcapMap.set(true);
        meshMatcap4.p.matcapMap.set("../../COP/image4");
        meshMatcap4.params.postCreateSpareParams();
        meshMatcap4.params.runOnSceneLoadHooks();
        return meshMatcap4;
      }
      function create_meshMatcap5(MAT2) {
        var meshMatcap5 = MAT2.createNode("meshMatcap");
        meshMatcap5.setName("meshMatcap5");
        meshMatcap5.uiData.setPosition(0, 550);
        meshMatcap5.p.useMatcapMap.set(true);
        meshMatcap5.p.matcapMap.set("../../COP/image5");
        meshMatcap5.params.postCreateSpareParams();
        meshMatcap5.params.runOnSceneLoadHooks();
        return meshMatcap5;
      }
      create_meshMatcap1(MAT);
      create_meshMatcap2(MAT);
      create_meshMatcap3(MAT);
      create_meshMatcap4(MAT);
      create_meshMatcap5(MAT);
      MAT.uiData.setComment("Enter this node to see how the materials are set up.");
      MAT.uiData.setPosition(-350, 250);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_fileOBJ1(geo13) {
      var fileOBJ12 = geo13.createNode("fileOBJ");
      fileOBJ12.setName("fileOBJ1");
      fileOBJ12.uiData.setPosition(450, -400);
      fileOBJ12.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/resources/3dscanstore.com/BaseMeshes/OBJ/Male-Average-Head.obj"
      );
      fileOBJ12.params.postCreateSpareParams();
      fileOBJ12.params.runOnSceneLoadHooks();
      return fileOBJ12;
    }
    function create_hierarchy1(geo13) {
      var hierarchy12 = geo13.createNode("hierarchy");
      hierarchy12.setName("hierarchy1");
      hierarchy12.uiData.setPosition(450, -250);
      hierarchy12.p.mode.set(1);
      hierarchy12.params.postCreateSpareParams();
      hierarchy12.params.runOnSceneLoadHooks();
      return hierarchy12;
    }
    function create_material1(geo13) {
      var material12 = geo13.createNode("material");
      material12.setName("material1");
      material12.uiData.setComment("the sop/material nodes assign a material to the input object.");
      material12.uiData.setPosition(50, 450);
      material12.p.material.set("../MAT/meshMatcap1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_material2(geo13) {
      var material22 = geo13.createNode("material");
      material22.setName("material2");
      material22.uiData.setPosition(250, 450);
      material22.p.material.set("../MAT/meshMatcap2");
      material22.params.postCreateSpareParams();
      material22.params.runOnSceneLoadHooks();
      return material22;
    }
    function create_material3(geo13) {
      var material32 = geo13.createNode("material");
      material32.setName("material3");
      material32.uiData.setPosition(450, 450);
      material32.p.material.set("../MAT/meshMatcap3");
      material32.params.postCreateSpareParams();
      material32.params.runOnSceneLoadHooks();
      return material32;
    }
    function create_material4(geo13) {
      var material42 = geo13.createNode("material");
      material42.setName("material4");
      material42.uiData.setPosition(650, 450);
      material42.p.material.set("../MAT/meshMatcap4");
      material42.params.postCreateSpareParams();
      material42.params.runOnSceneLoadHooks();
      return material42;
    }
    function create_material5(geo13) {
      var material52 = geo13.createNode("material");
      material52.setName("material5");
      material52.uiData.setPosition(850, 450);
      material52.p.material.set("../MAT/meshMatcap5");
      material52.params.postCreateSpareParams();
      material52.params.runOnSceneLoadHooks();
      return material52;
    }
    function create_merge1(geo13) {
      var merge12 = geo13.createNode("merge");
      merge12.setName("merge1");
      merge12.uiData.setComment(
        "Here we are merging 5 copies of the same object, which is imported from the file node at  the top.\n\nThen using the material nodes, each object is assigned a different material. "
      );
      merge12.uiData.setPosition(450, 800);
      merge12.flags.display.set(true);
      merge12.p.inputsCount.set(5);
      merge12.io.inputs.setCount(1, 5);
      merge12.params.postCreateSpareParams();
      merge12.params.runOnSceneLoadHooks();
      return merge12;
    }
    function create_objectProperties1(geo13) {
      var objectProperties12 = geo13.createNode("objectProperties");
      objectProperties12.setName("objectProperties1");
      objectProperties12.uiData.setPosition(450, -50);
      objectProperties12.p.tcastShadow.set(true);
      objectProperties12.p.treceiveShadow.set(true);
      objectProperties12.params.postCreateSpareParams();
      objectProperties12.params.runOnSceneLoadHooks();
      return objectProperties12;
    }
    function create_transform1(geo13) {
      var transform12 = geo13.createNode("transform");
      transform12.setName("transform1");
      transform12.uiData.setPosition(450, -150);
      transform12.params.postCreateSpareParams();
      transform12.params.runOnSceneLoadHooks();
      return transform12;
    }
    function create_transform2(geo13) {
      var transform22 = geo13.createNode("transform");
      transform22.setName("transform2");
      transform22.uiData.setPosition(50, 200);
      transform22.p.t.set([-1.5, 0, 0]);
      transform22.params.postCreateSpareParams();
      transform22.params.runOnSceneLoadHooks();
      return transform22;
    }
    function create_transform3(geo13) {
      var transform32 = geo13.createNode("transform");
      transform32.setName("transform3");
      transform32.uiData.setPosition(250, 200);
      transform32.p.t.set([-0.75, 0, 0]);
      transform32.params.postCreateSpareParams();
      transform32.params.runOnSceneLoadHooks();
      return transform32;
    }
    function create_transform4(geo13) {
      var transform42 = geo13.createNode("transform");
      transform42.setName("transform4");
      transform42.uiData.setPosition(450, 200);
      transform42.params.postCreateSpareParams();
      transform42.params.runOnSceneLoadHooks();
      return transform42;
    }
    function create_transform5(geo13) {
      var transform52 = geo13.createNode("transform");
      transform52.setName("transform5");
      transform52.uiData.setPosition(650, 200);
      transform52.p.t.set([0.75, 0, 0]);
      transform52.params.postCreateSpareParams();
      transform52.params.runOnSceneLoadHooks();
      return transform52;
    }
    function create_transform6(geo13) {
      var transform62 = geo13.createNode("transform");
      transform62.setName("transform6");
      transform62.uiData.setPosition(850, 200);
      transform62.p.t.set([1.5, 0, 0]);
      transform62.params.postCreateSpareParams();
      transform62.params.runOnSceneLoadHooks();
      return transform62;
    }
    create_COP(geo12);
    create_MAT(geo12);
    var fileOBJ1 = create_fileOBJ1(geo12);
    var hierarchy1 = create_hierarchy1(geo12);
    var material1 = create_material1(geo12);
    var material2 = create_material2(geo12);
    var material3 = create_material3(geo12);
    var material4 = create_material4(geo12);
    var material5 = create_material5(geo12);
    var merge1 = create_merge1(geo12);
    var objectProperties1 = create_objectProperties1(geo12);
    var transform1 = create_transform1(geo12);
    var transform2 = create_transform2(geo12);
    var transform3 = create_transform3(geo12);
    var transform4 = create_transform4(geo12);
    var transform5 = create_transform5(geo12);
    var transform6 = create_transform6(geo12);
    hierarchy1.setInput(0, fileOBJ1);
    material1.setInput(0, transform2);
    material2.setInput(0, transform3);
    material3.setInput(0, transform4);
    material4.setInput(0, transform5);
    material5.setInput(0, transform6);
    merge1.setInput(0, material1);
    merge1.setInput(1, material2);
    merge1.setInput(2, material3);
    merge1.setInput(3, material4);
    merge1.setInput(4, material5);
    objectProperties1.setInput(0, transform1);
    transform1.setInput(0, hierarchy1);
    transform2.setInput(0, objectProperties1);
    transform3.setInput(0, objectProperties1);
    transform4.setInput(0, objectProperties1);
    transform5.setInput(0, objectProperties1);
    transform6.setInput(0, objectProperties1);
    geo12.uiData.setPosition(-50, -150);
    geo12.flags.display.set(true);
    geo12.params.postCreateSpareParams();
    geo12.params.runOnSceneLoadHooks();
    return geo12;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.0019975972039125304, 0.5017383128930296, -0.001698771209347175]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-250, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([1.6847874698329743, 0.8811292707702931, 1.872359309424121]);
    perspectiveCamera12.p.r.set([-11.444488908832222, 41.417936387103744, 7.627996414970768]);
    perspectiveCamera12.p.s.set([1, 0.9999999999999997, 1]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return hemisphereLight1;
  }
  var geo1 = create_geo1(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  create_hemisphereLight1(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [geo1.nodesByType("material")[0]],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshMatcap_ts.349a9f76f346b731db8a.js.map