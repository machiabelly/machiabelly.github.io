{"version":3,"file":"src_engine_examples_examples_sop_UvUnwrap_ts.c3b5d2b2baf02e5ae726.js","mappings":";;;;;;;;;AAYO,SAAS,yCAAyC,MAAuB;AAE/E,QAAM,qBAAqB,KAAK,WAAW,mBAAmB;AAC9D,qBAAmB,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAEpC,QAAM,UAAU,mBAAmB,WAAW,eAAe;AAC7D,QAAM,iBAAiB,QAAQ,WAAW,qBAAqB;AAC/D,qBAAmB,EAAE,SAAS,QAAQ,cAAc;AAEpD,SAAO,EAAC,mBAAkB;AAC3B;;;;;;;;;;;;;;ACrBuD;AAEhD,SAAS,WAAW,SAA2C;AACrE,QAAM,EAAC,MAAK,IAAI;AAChB,QAAM,OAAO,MAAM,KAAK;AACxB,QAAM,MAAM,KAAK,WAAW,KAAK;AAEjC,QAAM,MAAM,IAAI,WAAW,kBAAkB;AAC7C,QAAM,YAAY,IAAI,WAAW,WAAW;AAC5C,YAAU,EAAE,UAAU,IAAI,CAAC;AAG3B,QAAM,SAAS,IAAI,WAAW,QAAQ;AACtC,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,WAAW,IAAI,WAAW,UAAU;AAC1C,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,WAAW,IAAI,WAAW,UAAU;AAE1C,QAAM,SAAS,GAAG,MAAM;AACxB,QAAM,SAAS,GAAG,KAAK;AACvB,QAAM,EAAE,QAAQ,IAAI,CAAC;AACrB,WAAS,SAAS,GAAG,KAAK;AAC1B,QAAM,SAAS,GAAG,QAAQ;AAC1B,QAAM,EAAE,QAAQ,IAAI,CAAC;AACrB,QAAM,EAAE,QAAQ,IAAI,CAAC;AACrB,QAAM,EAAE,QAAQ,IAAI,CAAC;AACrB,QAAM,EAAE,EAAE,IAAI,OAAO;AACrB,QAAM,EAAE,EAAE,IAAI,OAAO;AACrB,QAAM,EAAE,EAAE,IAAI,GAAG;AACjB,WAAS,SAAS,GAAG,KAAK;AAC1B,WAAS,EAAE,SAAS,QAAQ,SAAS;AACrC,WAAS,MAAM,QAAQ,IAAI,IAAI;AAE/B,WAAS,OAAO,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKN;AAErB,QAAM,EAAC,mBAAkB,IAAI,gGAAwC,CAAC,IAAI;AAE1E,SAAO;AAAA,IACN;AAAA,IACA,YAAY,mBAAmB,KAAK;AAAA,IACpC,cAAc,CAAC,KAAK;AAAA,IACpB,YAAY;AAAA,EACb;AACD","sources":["webpack:///../src/engine/examples/ExampleUtils.ts","webpack:///../src/engine/examples/examples/sop/UvUnwrap.ts"],"sourcesContent":["import type {BaseNodeType} from './../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\nimport type {RootManagerNode} from './../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\n// import {PolyScene} from './../../../@polygonjs/polygonjs/src/engine/scene/PolyScene';\n// export function initDefaultScene(scene: PolyScene) {\n// \tconst root = scene.root();\n\n// \t// create a box and a sphere\n// \tconst geo = root.createNode('geo');\n\n// \treturn {scene, root, geo};\n// }\n\nexport function addPerspectiveCameraOBJWithOrbitControls(root: RootManagerNode) {\n\t// create a camera\n\tconst perspectiveCamera1 = root.createNode('perspectiveCamera');\n\tperspectiveCamera1.p.t.set([5, 5, 5]);\n\t// add orbitControls\n\tconst events1 = perspectiveCamera1.createNode('eventsNetwork');\n\tconst orbitsControls = events1.createNode('cameraOrbitControls');\n\tperspectiveCamera1.p.controls.setNode(orbitsControls);\n\n\treturn {perspectiveCamera1};\n}\n\ninterface ReturnedNodeData {\n\tnode: BaseNodeType;\n\tchildren: Record<string, ReturnedNodeData>;\n}\nexport type ReturnedNodeDataDict = Record<string, ReturnedNodeData>;\n","import type {ExampleData, DataCallbackOptions} from '../../Common';\nimport {addPerspectiveCameraOBJWithOrbitControls} from '../../ExampleUtils';\n\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst geo = root.createNode('geo');\n\n\tconst MAT = geo.createNode('materialsNetwork');\n\tconst meshBasic = MAT.createNode('meshBasic');\n\tmeshBasic.p.wireframe.set(1);\n\n\t// create an add node\n\tconst sphere = geo.createNode('sphere');\n\tconst plane = geo.createNode('plane');\n\tconst merge = geo.createNode('merge');\n\tconst uvUnwrap = geo.createNode('uvUnwrap');\n\tconst point = geo.createNode('point');\n\tconst material = geo.createNode('material');\n\n\tmerge.setInput(0, sphere);\n\tmerge.setInput(1, plane);\n\tmerge.p.compact.set(1);\n\tuvUnwrap.setInput(0, merge);\n\tpoint.setInput(0, uvUnwrap);\n\tpoint.p.updateX.set(1);\n\tpoint.p.updateY.set(1);\n\tpoint.p.updateZ.set(1);\n\tpoint.p.x.set('@uv.x');\n\tpoint.p.y.set('@uv.y');\n\tpoint.p.z.set('0');\n\tmaterial.setInput(0, point);\n\tmaterial.p.material.setNode(meshBasic);\n\tmaterial.flags.display.set(true);\n\n\tuvUnwrap.uiData.setComment(`When using the local app:\nmake sure to install the xatlast library,\nwith the top menu\nWindows -> Libraries,\nand click on 'Install XAtlast' button.\nThen reload the page.`);\n\n\tconst {perspectiveCamera1} = addPerspectiveCameraOBJWithOrbitControls(root);\n\n\treturn {\n\t\tscene,\n\t\tcameraPath: perspectiveCamera1.path(),\n\t\tfocusedNodes: [plane],\n\t\tautoLayout: true,\n\t};\n}\n// export const sopUvUnwrap = [\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_NODE}/sop/uvUnwrap`,\n// \t\tcreateData,\n// \t\trelatedNodes: [UvUnwrapSopNode],\n// \t}),\n// ];\n"],"names":[],"sourceRoot":""}