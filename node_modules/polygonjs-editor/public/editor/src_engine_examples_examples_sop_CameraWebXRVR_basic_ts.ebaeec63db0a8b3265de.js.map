{"version":3,"file":"src_engine_examples_examples_sop_CameraWebXRVR_basic_ts.ebaeec63db0a8b3265de.js","mappings":"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","sources":["webpack:///../src/engine/examples/examples/sop/CameraWebXRVR.basic.ts"],"sourcesContent":["import type {GeoObjNode} from '../../../../../@polygonjs/polygonjs/src/engine/nodes/obj/Geo';\nimport type {RootManagerNode} from '../../../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\nimport type {ExampleData, DataCallbackOptions} from '../../Common';\nimport type {ReturnedNodeDataDict} from '../../ExampleUtils';\nimport type {CameraControlsSopNode} from '../../../../../@polygonjs/polygonjs/src/engine/nodes/sop/CameraControls';\n\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst scene_root_nodes: ReturnedNodeDataDict = {};\n\tfunction create_env(parentNode: RootManagerNode) {\n\t\tvar env = parentNode.createNode('geo');\n\t\tenv.setName('env');\n\t\tconst env_nodes: ReturnedNodeDataDict = {};\n\t\tfunction create_boxLines1(env: GeoObjNode) {\n\t\t\tvar boxLines1 = env.createNode('boxLines');\n\t\t\tboxLines1.setName('boxLines1');\n\t\t\tconst boxLines1_nodes: ReturnedNodeDataDict = {};\n\t\t\tboxLines1.uiData.setPosition(-150, 200);\n\t\t\tboxLines1.p.divisions.set([11, 11, 11]);\n\t\t\tboxLines1.p.center.set([0, 0.5, 0]);\n\t\t\tboxLines1.params.postCreateSpareParams();\n\t\t\tboxLines1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: boxLines1, children: boxLines1_nodes};\n\t\t}\n\t\tfunction create_merge1(env: GeoObjNode) {\n\t\t\tvar merge1 = env.createNode('merge');\n\t\t\tmerge1.setName('merge1');\n\t\t\tconst merge1_nodes: ReturnedNodeDataDict = {};\n\t\t\tmerge1.uiData.setPosition(-50, 550);\n\t\t\tmerge1.flags.display.set(true);\n\t\t\tmerge1.params.postCreateSpareParams();\n\t\t\tmerge1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: merge1, children: merge1_nodes};\n\t\t}\n\t\tfunction create_sphere1(env: GeoObjNode) {\n\t\t\tvar sphere1 = env.createNode('sphere');\n\t\t\tsphere1.setName('sphere1');\n\t\t\tconst sphere1_nodes: ReturnedNodeDataDict = {};\n\t\t\tsphere1.uiData.setPosition(100, 200);\n\t\t\tsphere1.p.radius.set(0.45);\n\t\t\tsphere1.params.postCreateSpareParams();\n\t\t\tsphere1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: sphere1, children: sphere1_nodes};\n\t\t}\n\t\tfunction create_transform1(env: GeoObjNode) {\n\t\t\tvar transform1 = env.createNode('transform');\n\t\t\ttransform1.setName('transform1');\n\t\t\tconst transform1_nodes: ReturnedNodeDataDict = {};\n\t\t\ttransform1.uiData.setPosition(-150, 350);\n\t\t\ttransform1.p.scale.set(10);\n\t\t\ttransform1.params.postCreateSpareParams();\n\t\t\ttransform1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: transform1, children: transform1_nodes};\n\t\t}\n\t\tfunction create_transform2(env: GeoObjNode) {\n\t\t\tvar transform2 = env.createNode('transform');\n\t\t\ttransform2.setName('transform2');\n\t\t\tconst transform2_nodes: ReturnedNodeDataDict = {};\n\t\t\ttransform2.uiData.setPosition(100, 350);\n\t\t\ttransform2.p.t.set([-2.579839561371403, 1.1380381878791985, -2.33002363287183]);\n\t\t\ttransform2.params.postCreateSpareParams();\n\t\t\ttransform2.params.runOnSceneLoadHooks();\n\t\t\treturn {node: transform2, children: transform2_nodes};\n\t\t}\n\t\tenv_nodes['boxLines1'] = create_boxLines1(env);\n\t\tenv_nodes['merge1'] = create_merge1(env);\n\t\tenv_nodes['sphere1'] = create_sphere1(env);\n\t\tenv_nodes['transform1'] = create_transform1(env);\n\t\tenv_nodes['transform2'] = create_transform2(env);\n\t\tenv_nodes['merge1'].node.setInput(0, env_nodes['transform1'].node);\n\t\tenv_nodes['merge1'].node.setInput(1, env_nodes['transform2'].node);\n\t\tenv_nodes['transform1'].node.setInput(0, env_nodes['boxLines1'].node);\n\t\tenv_nodes['transform2'].node.setInput(0, env_nodes['sphere1'].node);\n\t\tif (env.childrenController) {\n\t\t\tenv.childrenController.selection.set([env_nodes['sphere1'].node]);\n\t\t}\n\t\tenv.uiData.setPosition(-50, -150);\n\t\tenv.flags.display.set(true);\n\t\tenv.params.postCreateSpareParams();\n\t\tenv.params.runOnSceneLoadHooks();\n\t\treturn {node: env, children: env_nodes};\n\t}\n\tfunction create_cameras(parentNode: RootManagerNode) {\n\t\tvar cameras = parentNode.createNode('geo');\n\t\tcameras.setName('cameras');\n\t\tconst cameras_nodes: ReturnedNodeDataDict = {};\n\t\tfunction create_cameraControls1(cameras: GeoObjNode) {\n\t\t\tvar cameraControls1 = cameras.createNode('cameraControls');\n\t\t\tcameraControls1.setName('cameraControls1');\n\t\t\tconst cameraControls1_nodes: ReturnedNodeDataDict = {};\n\t\t\tfunction create_cameraOrbitControls1(cameraControls1: CameraControlsSopNode) {\n\t\t\t\tvar cameraOrbitControls1 = cameraControls1.createNode('cameraOrbitControls');\n\t\t\t\tcameraOrbitControls1.setName('cameraOrbitControls1');\n\t\t\t\tconst cameraOrbitControls1_nodes: ReturnedNodeDataDict = {};\n\t\t\t\tcameraOrbitControls1.uiData.setPosition(0, 0);\n\t\t\t\tcameraOrbitControls1.p.target.set([0.009551706323916092, 0.49956781418231494, -0.2404906439486597]);\n\t\t\t\tcameraOrbitControls1.params.postCreateSpareParams();\n\t\t\t\tcameraOrbitControls1.params.runOnSceneLoadHooks();\n\t\t\t\treturn {node: cameraOrbitControls1, children: cameraOrbitControls1_nodes};\n\t\t\t}\n\t\t\tcameraControls1_nodes['cameraOrbitControls1'] = create_cameraOrbitControls1(cameraControls1);\n\t\t\tif (cameraControls1.childrenController) {\n\t\t\t\tcameraControls1.childrenController.selection.set([]);\n\t\t\t}\n\t\t\tcameraControls1.uiData.setPosition(-450, 50);\n\t\t\tcameraControls1.p.node.set('cameraOrbitControls1');\n\t\t\tcameraControls1.params.postCreateSpareParams();\n\t\t\tcameraControls1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: cameraControls1, children: cameraControls1_nodes};\n\t\t}\n\t\tfunction create_cameraWebXRVR1(cameras: GeoObjNode) {\n\t\t\tvar cameraWebXRVR1 = cameras.createNode('cameraWebXRVR');\n\t\t\tcameraWebXRVR1.setName('cameraWebXRVR1');\n\t\t\tconst cameraWebXRVR1_nodes: ReturnedNodeDataDict = {};\n\t\t\tcameraWebXRVR1.uiData.setComment(\n\t\t\t\t'with this node, you give VR (virtual reality) capability to the camera. When setting the display flag to this one (or any downstream node), and if the camera is selected in the viewer, you will see a `VR button` in the viewer.\\n\\nClicking on it from a device that supports VR will allow you to see the scene in virtual reality.'\n\t\t\t);\n\t\t\tcameraWebXRVR1.uiData.setPosition(-100, 50);\n\t\t\tcameraWebXRVR1.params.postCreateSpareParams();\n\t\t\tcameraWebXRVR1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: cameraWebXRVR1, children: cameraWebXRVR1_nodes};\n\t\t}\n\t\tfunction create_merge1(cameras: GeoObjNode) {\n\t\t\tvar merge1 = cameras.createNode('merge');\n\t\t\tmerge1.setName('merge1');\n\t\t\tconst merge1_nodes: ReturnedNodeDataDict = {};\n\t\t\tmerge1.uiData.setComment(\n\t\t\t\t'Here we merge 2 cameras.\\n\\nThe right one is to navigate the scene in AR, while the left one is to view and edit it when not in AR.\\n\\nIt is recommended to have different camera configurations like this, so that you can edit and debug your scene easily, without having to access your AR device.'\n\t\t\t);\n\t\t\tmerge1.uiData.setPosition(-250, 400);\n\t\t\tmerge1.flags.display.set(true);\n\t\t\tmerge1.params.postCreateSpareParams();\n\t\t\tmerge1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: merge1, children: merge1_nodes};\n\t\t}\n\t\tfunction create_perspectiveCamera_DEBUG(cameras: GeoObjNode) {\n\t\t\tvar perspectiveCamera_DEBUG = cameras.createNode('perspectiveCamera');\n\t\t\tperspectiveCamera_DEBUG.setName('perspectiveCamera_DEBUG');\n\t\t\tconst perspectiveCamera_DEBUG_nodes: ReturnedNodeDataDict = {};\n\t\t\tperspectiveCamera_DEBUG.uiData.setPosition(-450, -100);\n\t\t\tperspectiveCamera_DEBUG.p.position.set([3, 3, 3]);\n\t\t\tperspectiveCamera_DEBUG.params.postCreateSpareParams();\n\t\t\tperspectiveCamera_DEBUG.params.runOnSceneLoadHooks();\n\t\t\treturn {node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes};\n\t\t}\n\t\tfunction create_perspectiveCamera_VR(cameras: GeoObjNode) {\n\t\t\tvar perspectiveCamera_VR = cameras.createNode('perspectiveCamera');\n\t\t\tperspectiveCamera_VR.setName('perspectiveCamera_VR');\n\t\t\tconst perspectiveCamera_VR_nodes: ReturnedNodeDataDict = {};\n\t\t\tperspectiveCamera_VR.uiData.setPosition(-100, -100);\n\t\t\tperspectiveCamera_VR.p.position.set([0, 1.6, 0]);\n\t\t\tperspectiveCamera_VR.params.postCreateSpareParams();\n\t\t\tperspectiveCamera_VR.params.runOnSceneLoadHooks();\n\t\t\treturn {node: perspectiveCamera_VR, children: perspectiveCamera_VR_nodes};\n\t\t}\n\t\tcameras_nodes['cameraControls1'] = create_cameraControls1(cameras);\n\t\tcameras_nodes['cameraWebXRVR1'] = create_cameraWebXRVR1(cameras);\n\t\tcameras_nodes['merge1'] = create_merge1(cameras);\n\t\tcameras_nodes['perspectiveCamera_DEBUG'] = create_perspectiveCamera_DEBUG(cameras);\n\t\tcameras_nodes['perspectiveCamera_VR'] = create_perspectiveCamera_VR(cameras);\n\t\tcameras_nodes['cameraControls1'].node.setInput(0, cameras_nodes['perspectiveCamera_DEBUG'].node);\n\t\tcameras_nodes['cameraWebXRVR1'].node.setInput(0, cameras_nodes['perspectiveCamera_VR'].node);\n\t\tcameras_nodes['merge1'].node.setInput(0, cameras_nodes['cameraControls1'].node);\n\t\tcameras_nodes['merge1'].node.setInput(1, cameras_nodes['cameraWebXRVR1'].node);\n\t\tif (cameras.childrenController) {\n\t\t\tcameras.childrenController.selection.set([]);\n\t\t}\n\t\tcameras.uiData.setPosition(-50, -50);\n\t\tcameras.flags.display.set(true);\n\t\tcameras.params.postCreateSpareParams();\n\t\tcameras.params.runOnSceneLoadHooks();\n\t\treturn {node: cameras, children: cameras_nodes};\n\t}\n\tfunction create_lights(parentNode: RootManagerNode) {\n\t\tvar lights = parentNode.createNode('geo');\n\t\tlights.setName('lights');\n\t\tconst lights_nodes: ReturnedNodeDataDict = {};\n\t\tfunction create_hemisphereLight1(lights: GeoObjNode) {\n\t\t\tvar hemisphereLight1 = lights.createNode('hemisphereLight');\n\t\t\themisphereLight1.setName('hemisphereLight1');\n\t\t\tconst hemisphereLight1_nodes: ReturnedNodeDataDict = {};\n\t\t\themisphereLight1.uiData.setPosition(0, 150);\n\t\t\themisphereLight1.flags.display.set(true);\n\t\t\themisphereLight1.params.postCreateSpareParams();\n\t\t\themisphereLight1.params.runOnSceneLoadHooks();\n\t\t\treturn {node: hemisphereLight1, children: hemisphereLight1_nodes};\n\t\t}\n\t\tlights_nodes['hemisphereLight1'] = create_hemisphereLight1(lights);\n\t\tif (lights.childrenController) {\n\t\t\tlights.childrenController.selection.set([]);\n\t\t}\n\t\tlights.uiData.setPosition(-50, 50);\n\t\tlights.flags.display.set(true);\n\t\tlights.params.postCreateSpareParams();\n\t\tlights.params.runOnSceneLoadHooks();\n\t\treturn {node: lights, children: lights_nodes};\n\t}\n\tscene_root_nodes['env'] = create_env(root);\n\tscene_root_nodes['cameras'] = create_cameras(root);\n\tscene_root_nodes['lights'] = create_lights(root);\n\treturn {\n\t\tscene,\n\t\tcameraPath: '/cameras/cameras:sopGroup/perspectiveCamera_VR',\n\t\tfocusedNodes: Object.values(scene_root_nodes['cameras'].children).map((n) => n.node),\n\t\tautoLayout: false,\n\t};\n}\n// export const sopCameraWebXRVR_basic = [\n// \t// new Example({name: `${ExamplePrefix.BY_NODE}/sop/cameraWebXRVR/basic`, createData}),\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_CATEGORY}/${ExampleCategory.VR}/basic`,\n// \t\tcreateData,\n// \t\tcategories: [ExampleCategory.VR],\n// \t\trelatedNodes: [{node: CameraWebXRARSopNode, label: 'basic VR'}],\n// \t}),\n// ];\n"],"names":["env","cameras","cameraControls1","lights"],"sourceRoot":""}