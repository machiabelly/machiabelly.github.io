(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_anim_Easing_ts"],{

/***/ 92449:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_core_loader_AssetsUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29248);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    function create_ANIM(geo12) {
      var ANIM2 = geo12.createNode("animationsNetwork");
      ANIM2.setName("ANIM");
      function create_CONTROLS(ANIM3) {
        var CONTROLS3 = ANIM3.createNode("play");
        CONTROLS3.setName("CONTROLS");
        CONTROLS3.uiData.setComment("Use this node to start/stop the animation.");
        CONTROLS3.uiData.setPosition(-150, 700);
        CONTROLS3.params.postCreateSpareParams();
        CONTROLS3.params.runOnSceneLoadHooks();
        return CONTROLS3;
      }
      function create_PLAY(ANIM3) {
        var PLAY2 = ANIM3.createNode("null");
        PLAY2.setName("PLAY");
        PLAY2.uiData.setPosition(0, 600);
        PLAY2.params.postCreateSpareParams();
        PLAY2.params.runOnSceneLoadHooks();
        return PLAY2;
      }
      function create_RESET(ANIM3) {
        var RESET2 = ANIM3.createNode("null");
        RESET2.setName("RESET");
        RESET2.uiData.setPosition(-300, 600);
        RESET2.params.postCreateSpareParams();
        RESET2.params.runOnSceneLoadHooks();
        return RESET2;
      }
      function create_duration1(ANIM3) {
        var duration12 = ANIM3.createNode("duration");
        duration12.setName("duration1");
        duration12.uiData.setPosition(0, -250);
        duration12.params.postCreateSpareParams();
        duration12.params.runOnSceneLoadHooks();
        return duration12;
      }
      function create_easing1(ANIM3) {
        var easing12 = ANIM3.createNode("easing");
        easing12.setName("easing1");
        easing12.uiData.setPosition(-100, -100);
        easing12.params.postCreateSpareParams();
        easing12.params.runOnSceneLoadHooks();
        return easing12;
      }
      function create_easing2(ANIM3) {
        var easing22 = ANIM3.createNode("easing");
        easing22.setName("easing2");
        easing22.uiData.setPosition(50, -100);
        easing22.p.name.set(1);
        easing22.p.inOut.set(2);
        easing22.params.postCreateSpareParams();
        easing22.params.runOnSceneLoadHooks();
        return easing22;
      }
      function create_easing3(ANIM3) {
        var easing32 = ANIM3.createNode("easing");
        easing32.setName("easing3");
        easing32.uiData.setPosition(250, -100);
        easing32.p.name.set(6);
        easing32.p.inOut.set(2);
        easing32.params.postCreateSpareParams();
        easing32.params.runOnSceneLoadHooks();
        return easing32;
      }
      function create_propertyName1(ANIM3) {
        var propertyName12 = ANIM3.createNode("propertyName");
        propertyName12.setName("propertyName1");
        propertyName12.uiData.setPosition(0, 400);
        propertyName12.params.postCreateSpareParams();
        propertyName12.params.runOnSceneLoadHooks();
        return propertyName12;
      }
      function create_propertyValue1(ANIM3) {
        var propertyValue12 = ANIM3.createNode("propertyValue");
        propertyValue12.setName("propertyValue1");
        propertyValue12.uiData.setPosition(0, 500);
        propertyValue12.p.value3.y.set(1);
        propertyValue12.params.postCreateSpareParams();
        propertyValue12.params.runOnSceneLoadHooks();
        return propertyValue12;
      }
      function create_propertyValue2(ANIM3) {
        var propertyValue22 = ANIM3.createNode("propertyValue");
        propertyValue22.setName("propertyValue2");
        propertyValue22.uiData.setPosition(-300, 500);
        propertyValue22.params.postCreateSpareParams();
        propertyValue22.params.runOnSceneLoadHooks();
        return propertyValue22;
      }
      function create_switch1(ANIM3) {
        var switch12 = ANIM3.createNode("switch");
        switch12.setName("switch1");
        switch12.uiData.setComment(
          "With this switch node, you can select which easing node would be used on the animation. "
        );
        switch12.uiData.setPosition(0, 100);
        switch12.p.input.set(2);
        switch12.params.postCreateSpareParams();
        switch12.params.runOnSceneLoadHooks();
        return switch12;
      }
      function create_target1(ANIM3) {
        var target12 = ANIM3.createNode("target");
        target12.setName("target1");
        target12.uiData.setPosition(0, 300);
        target12.p.objectMask.set("*/animTarget");
        target12.params.postCreateSpareParams();
        target12.params.runOnSceneLoadHooks();
        return target12;
      }
      var CONTROLS2 = create_CONTROLS(ANIM2);
      var PLAY = create_PLAY(ANIM2);
      var RESET = create_RESET(ANIM2);
      var duration1 = create_duration1(ANIM2);
      var easing1 = create_easing1(ANIM2);
      var easing2 = create_easing2(ANIM2);
      var easing3 = create_easing3(ANIM2);
      var propertyName1 = create_propertyName1(ANIM2);
      var propertyValue1 = create_propertyValue1(ANIM2);
      var propertyValue2 = create_propertyValue2(ANIM2);
      var switch1 = create_switch1(ANIM2);
      var target1 = create_target1(ANIM2);
      CONTROLS2.setInput(0, RESET);
      CONTROLS2.setInput(1, PLAY);
      PLAY.setInput(0, propertyValue1);
      RESET.setInput(0, propertyValue2);
      easing1.setInput(0, duration1);
      easing2.setInput(0, duration1);
      easing3.setInput(0, duration1);
      propertyName1.setInput(0, target1);
      propertyValue1.setInput(0, propertyName1);
      propertyValue2.setInput(0, propertyName1);
      switch1.setInput(0, easing1);
      switch1.setInput(1, easing2);
      switch1.setInput(2, easing3);
      target1.setInput(0, switch1);
      ANIM2.childrenController.selection.add([CONTROLS2]);
      ANIM2.uiData.setPosition(-250, 350);
      ANIM2.params.postCreateSpareParams();
      ANIM2.params.runOnSceneLoadHooks();
      return { ANIM: ANIM2, CONTROLS: CONTROLS2 };
    }
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        meshStandard1.uiData.setPosition(0, 100);
        meshStandard1.p.useMap.set(true);
        meshStandard1.p.map.set("../../../COP/imageUv");
        meshStandard1.p.useEnvMap.set(true);
        meshStandard1.p.envMap.set("../../../COP/envMap");
        meshStandard1.p.metalness.set(1);
        meshStandard1.p.roughness.set(0.07);
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return meshStandard1;
      }
      create_meshStandard1(MAT);
      MAT.uiData.setPosition(-250, 150);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_material1(geo12) {
      var material12 = geo12.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(0, 150);
      material12.p.material.set("../MAT/meshStandard1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_objectProperties1(geo12) {
      var objectProperties12 = geo12.createNode("objectProperties");
      objectProperties12.setName("objectProperties1");
      objectProperties12.uiData.setPosition(0, 300);
      objectProperties12.flags.display.set(true);
      objectProperties12.p.tname.set(true);
      objectProperties12.p.name.set("animTarget");
      objectProperties12.params.postCreateSpareParams();
      objectProperties12.params.runOnSceneLoadHooks();
      return objectProperties12;
    }
    function create_sphere1(geo12) {
      var sphere12 = geo12.createNode("sphere");
      sphere12.setName("sphere1");
      sphere12.uiData.setPosition(0, 50);
      sphere12.params.postCreateSpareParams();
      sphere12.params.runOnSceneLoadHooks();
      return sphere12;
    }
    var ANIM = create_ANIM(geo1);
    create_MAT(geo1);
    var material1 = create_material1(geo1);
    var objectProperties1 = create_objectProperties1(geo1);
    var sphere1 = create_sphere1(geo1);
    material1.setInput(0, sphere1);
    objectProperties1.setInput(0, material1);
    geo1.uiData.setPosition(-50, -150);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return __spreadValues({ geo1 }, ANIM);
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return planeHelper1;
    }
    create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return hemisphereLight1;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.x.set(0.2140135607673551);
        cameraOrbitControls1.p.target.y.set(0.08486305110524985);
        cameraOrbitControls1.p.target.z.set(-0.31163000976043653);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.x.set(3.0161526633531355);
    perspectiveCamera12.p.t.y.set(1.1787657307191874);
    perspectiveCamera12.p.t.z.set(2.814738208647524);
    perspectiveCamera12.p.r.x.set(-22.723127930556515);
    perspectiveCamera12.p.r.y.set(44.66532130223666);
    perspectiveCamera12.p.r.z.set(16.403892417511617);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    function create_envMap(COP2) {
      var envMap2 = COP2.createNode("envMap");
      envMap2.setName("envMap");
      envMap2.uiData.setPosition(50, 200);
      envMap2.params.postCreateSpareParams();
      envMap2.params.runOnSceneLoadHooks();
      return envMap2;
    }
    function create_imageEnv(COP2) {
      var imageEnv2 = COP2.createNode("imageEXR");
      imageEnv2.setName("imageEnv");
      imageEnv2.uiData.setPosition(50, 100);
      imageEnv2.p.url.set(`${_polygonjs_polygonjs_src_core_loader_AssetsUtils__WEBPACK_IMPORTED_MODULE_0__/* .ASSETS_ROOT */ .V}/textures/piz_compressed.exr`);
      imageEnv2.params.postCreateSpareParams();
      imageEnv2.params.runOnSceneLoadHooks();
      return imageEnv2;
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set(`${_polygonjs_polygonjs_src_core_loader_AssetsUtils__WEBPACK_IMPORTED_MODULE_0__/* .ASSETS_ROOT */ .V}/textures/uv.jpg`);
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return imageUv;
    }
    var envMap = create_envMap(COP);
    var imageEnv = create_imageEnv(COP);
    create_imageUv(COP);
    envMap.setInput(0, imageEnv);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return COP;
  }
  const { CONTROLS } = create_geo1(root);
  create_grid(root);
  create_hemisphereLight1(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  create_COP(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [CONTROLS]
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_anim_Easing_ts.58a8654e16df6b570c33.js.map