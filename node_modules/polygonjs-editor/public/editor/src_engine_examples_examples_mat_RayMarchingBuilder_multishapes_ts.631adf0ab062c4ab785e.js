(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_multishapes_ts"],{

/***/ 40964:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38857);




function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  const scene_root_nodes = {};
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(200, 150);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setPosition(-150, 250);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_raymarchedObject(parentNode) {
    var raymarchedObject = parentNode.createNode("geo");
    raymarchedObject.setName("raymarchedObject");
    const raymarchedObject_nodes = {};
    function create_MAT(raymarchedObject2) {
      var MAT = raymarchedObject2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        rayMarchingBuilder1.p.maxDist.set(12);
        const rayMarchingBuilder1_nodes = {};
        function create_SDFContext2(rayMarchingBuilder12) {
          var SDFContext2 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext2.setName("SDFContext2");
          const SDFContext2_nodes = {};
          SDFContext2.uiData.setPosition(-300, -1e3);
          SDFContext2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext2.params.postCreateSpareParams();
          SDFContext2.params.runOnSceneLoadHooks();
          return { node: SDFContext2, children: SDFContext2_nodes };
        }
        function create_SDFContext3(rayMarchingBuilder12) {
          var SDFContext3 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext3.setName("SDFContext3");
          const SDFContext3_nodes = {};
          SDFContext3.uiData.setPosition(-200, -250);
          SDFContext3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext3.params.postCreateSpareParams();
          SDFContext3.params.runOnSceneLoadHooks();
          return { node: SDFContext3, children: SDFContext3_nodes };
        }
        function create_SDFMaterial2(rayMarchingBuilder12) {
          var SDFMaterial2 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial2.setName("SDFMaterial2");
          const SDFMaterial2_nodes = {};
          SDFMaterial2.uiData.setPosition(-450, -850);
          SDFMaterial2.p.useEnvMap.set(true);
          SDFMaterial2.p.envMapRoughness.set(0.3);
          SDFMaterial2.params.postCreateSpareParams();
          SDFMaterial2.params.runOnSceneLoadHooks();
          return { node: SDFMaterial2, children: SDFMaterial2_nodes };
        }
        function create_SDFMaterial3(rayMarchingBuilder12) {
          var SDFMaterial3 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial3.setName("SDFMaterial3");
          const SDFMaterial3_nodes = {};
          SDFMaterial3.uiData.setPosition(-350, -100);
          SDFMaterial3.p.useEnvMap.set(true);
          SDFMaterial3.params.postCreateSpareParams();
          SDFMaterial3.params.runOnSceneLoadHooks();
          return { node: SDFMaterial3, children: SDFMaterial3_nodes };
        }
        function create_SDFSphere1(rayMarchingBuilder12) {
          var SDFSphere1 = rayMarchingBuilder12.createNode("SDFSphere");
          SDFSphere1.setName("SDFSphere1");
          const SDFSphere1_nodes = {};
          SDFSphere1.uiData.setPosition(-450, -1100);
          SDFSphere1.p.radius.set(0.82);
          SDFSphere1.params.postCreateSpareParams();
          SDFSphere1.params.runOnSceneLoadHooks();
          return { node: SDFSphere1, children: SDFSphere1_nodes };
        }
        function create_SDFUnion2(rayMarchingBuilder12) {
          var SDFUnion2 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion2.setName("SDFUnion2");
          const SDFUnion2_nodes = {};
          SDFUnion2.uiData.setPosition(0, -650);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "sdf0", "0", { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "sdf1", "0", { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: false });
          SDFUnion2.params.get("smoothFactor").set(0.5);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion2.params.get("matBlendDist").set(0.88);
          SDFUnion2.params.postCreateSpareParams();
          SDFUnion2.params.runOnSceneLoadHooks();
          return { node: SDFUnion2, children: SDFUnion2_nodes };
        }
        function create_constant2(rayMarchingBuilder12) {
          var constant2 = rayMarchingBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(-650, -850);
          constant2.p.type.set(4);
          constant2.p.color.set([0.49019607843137253, 0.043137254901960784, 0.8549019607843137]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_constant3(rayMarchingBuilder12) {
          var constant3 = rayMarchingBuilder12.createNode("constant");
          constant3.setName("constant3");
          const constant3_nodes = {};
          constant3.uiData.setPosition(-550, -100);
          constant3.p.type.set(4);
          constant3.p.color.set([1, 1, 1]);
          constant3.p.asColor.set(true);
          constant3.params.postCreateSpareParams();
          constant3.params.runOnSceneLoadHooks();
          return { node: constant3, children: constant3_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(150, -650);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_param1(rayMarchingBuilder12) {
          var param1 = rayMarchingBuilder12.createNode("param");
          param1.setName("param1");
          const param1_nodes = {};
          param1.uiData.setPosition(-650, -1100);
          param1.p.name.set("spherePos");
          param1.p.type.set(4);
          param1.params.postCreateSpareParams();
          param1.params.runOnSceneLoadHooks();
          return { node: param1, children: param1_nodes };
        }
        function create_subnet1(rayMarchingBuilder12) {
          var subnet1 = rayMarchingBuilder12.createNode("subnet");
          subnet1.setName("subnet1");
          const subnet1_nodes = {};
          subnet1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: true });
          subnet1.params.postCreateSpareParams();
          subnet1.params.runOnSceneLoadHooks();
          function create_fitFrom01ToVariance1(subnet12) {
            var fitFrom01ToVariance1 = subnet12.createNode("fitFrom01ToVariance");
            fitFrom01ToVariance1.setName("fitFrom01ToVariance1");
            const fitFrom01ToVariance1_nodes = {};
            fitFrom01ToVariance1.uiData.setPosition(-50, -550);
            fitFrom01ToVariance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
            fitFrom01ToVariance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "center", 0.5, { spare: true, editable: true });
            fitFrom01ToVariance1.params.get("center").set(0.79);
            fitFrom01ToVariance1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "variance", 0.5, { spare: true, editable: true });
            fitFrom01ToVariance1.params.postCreateSpareParams();
            fitFrom01ToVariance1.params.runOnSceneLoadHooks();
            return { node: fitFrom01ToVariance1, children: fitFrom01ToVariance1_nodes };
          }
          function create_globals1(subnet12) {
            var globals1 = subnet12.createNode("globals");
            globals1.setName("globals1");
            const globals1_nodes = {};
            globals1.uiData.setPosition(-550, -550);
            globals1.params.postCreateSpareParams();
            globals1.params.runOnSceneLoadHooks();
            return { node: globals1, children: globals1_nodes };
          }
          function create_multAdd1(subnet12) {
            var multAdd1 = subnet12.createNode("multAdd");
            multAdd1.setName("multAdd1");
            const multAdd1_nodes = {};
            multAdd1.uiData.setPosition(-350, -550);
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
            multAdd1.params.postCreateSpareParams();
            multAdd1.params.runOnSceneLoadHooks();
            return { node: multAdd1, children: multAdd1_nodes };
          }
          function create_multAdd2(subnet12) {
            var multAdd2 = subnet12.createNode("multAdd");
            multAdd2.setName("multAdd2");
            const multAdd2_nodes = {};
            multAdd2.uiData.setPosition(-150, -550);
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multAdd2.params.get("mult").set(0.5);
            multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
            multAdd2.params.get("postAdd").set(0.5);
            multAdd2.params.postCreateSpareParams();
            multAdd2.params.runOnSceneLoadHooks();
            return { node: multAdd2, children: multAdd2_nodes };
          }
          function create_sin1(subnet12) {
            var sin1 = subnet12.createNode("sin");
            sin1.setName("sin1");
            const sin1_nodes = {};
            sin1.uiData.setPosition(-250, -550);
            sin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
            sin1.params.postCreateSpareParams();
            sin1.params.runOnSceneLoadHooks();
            return { node: sin1, children: sin1_nodes };
          }
          function create_subnetOutput1(subnet12) {
            var subnetOutput1 = subnet12.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(100, -600);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          subnet1_nodes["fitFrom01ToVariance1"] = create_fitFrom01ToVariance1(subnet1);
          subnet1_nodes["globals1"] = create_globals1(subnet1);
          subnet1_nodes["multAdd1"] = create_multAdd1(subnet1);
          subnet1_nodes["multAdd2"] = create_multAdd2(subnet1);
          subnet1_nodes["sin1"] = create_sin1(subnet1);
          subnet1_nodes["subnetOutput1"] = create_subnetOutput1(subnet1);
          subnet1_nodes["fitFrom01ToVariance1"].node.setInput("val", subnet1_nodes["multAdd2"].node, "val");
          subnet1_nodes["multAdd1"].node.setInput("value", subnet1_nodes["globals1"].node, "time");
          subnet1_nodes["multAdd2"].node.setInput("value", subnet1_nodes["sin1"].node, "val");
          subnet1_nodes["sin1"].node.setInput("radians", subnet1_nodes["multAdd1"].node, "val");
          subnet1_nodes["subnetOutput1"].node.setInput(
            "input0",
            subnet1_nodes["fitFrom01ToVariance1"].node,
            "val"
          );
          subnet1.uiData.setPosition(-200, -550);
          subnet1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: true });
          subnet1.params.postCreateSpareParams();
          subnet1.params.runOnSceneLoadHooks();
          return { node: subnet1, children: subnet1_nodes };
        }
        function create_subnet_static_shapes(rayMarchingBuilder12) {
          var subnet_static_shapes = rayMarchingBuilder12.createNode("subnet");
          subnet_static_shapes.setName("subnet_static_shapes");
          const subnet_static_shapes_nodes = {};
          subnet_static_shapes.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: true });
          subnet_static_shapes.params.postCreateSpareParams();
          subnet_static_shapes.params.runOnSceneLoadHooks();
          function create_SDFBox1(subnet_static_shapes2) {
            var SDFBox1 = subnet_static_shapes2.createNode("SDFBox");
            SDFBox1.setName("SDFBox1");
            const SDFBox1_nodes = {};
            SDFBox1.uiData.setPosition(-850, 50);
            SDFBox1.p.center.set([0, -1.8, 0]);
            SDFBox1.params.postCreateSpareParams();
            SDFBox1.params.runOnSceneLoadHooks();
            return { node: SDFBox1, children: SDFBox1_nodes };
          }
          function create_SDFBox2(subnet_static_shapes2) {
            var SDFBox2 = subnet_static_shapes2.createNode("SDFBox");
            SDFBox2.setName("SDFBox2");
            const SDFBox2_nodes = {};
            SDFBox2.uiData.setPosition(-850, 200);
            SDFBox2.params.postCreateSpareParams();
            SDFBox2.params.runOnSceneLoadHooks();
            return { node: SDFBox2, children: SDFBox2_nodes };
          }
          function create_SDFBoxFrame1(subnet_static_shapes2) {
            var SDFBoxFrame1 = subnet_static_shapes2.createNode("SDFBoxFrame");
            SDFBoxFrame1.setName("SDFBoxFrame1");
            const SDFBoxFrame1_nodes = {};
            SDFBoxFrame1.uiData.setPosition(-750, -200);
            SDFBoxFrame1.params.postCreateSpareParams();
            SDFBoxFrame1.params.runOnSceneLoadHooks();
            return { node: SDFBoxFrame1, children: SDFBoxFrame1_nodes };
          }
          function create_SDFBoxFrame2(subnet_static_shapes2) {
            var SDFBoxFrame2 = subnet_static_shapes2.createNode("SDFBoxFrame");
            SDFBoxFrame2.setName("SDFBoxFrame2");
            const SDFBoxFrame2_nodes = {};
            SDFBoxFrame2.uiData.setPosition(-750, -500);
            SDFBoxFrame2.p.center.set([0, 1.7, 0]);
            SDFBoxFrame2.params.postCreateSpareParams();
            SDFBoxFrame2.params.runOnSceneLoadHooks();
            return { node: SDFBoxFrame2, children: SDFBoxFrame2_nodes };
          }
          function create_SDFTransform1(subnet_static_shapes2) {
            var SDFTransform1 = subnet_static_shapes2.createNode("SDFTransform");
            SDFTransform1.setName("SDFTransform1");
            const SDFTransform1_nodes = {};
            SDFTransform1.uiData.setPosition(-1e3, -200);
            SDFTransform1.p.r.set([0.9, 0.8, 0]);
            SDFTransform1.params.postCreateSpareParams();
            SDFTransform1.params.runOnSceneLoadHooks();
            return { node: SDFTransform1, children: SDFTransform1_nodes };
          }
          function create_SDFTransform2(subnet_static_shapes2) {
            var SDFTransform2 = subnet_static_shapes2.createNode("SDFTransform");
            SDFTransform2.setName("SDFTransform2");
            const SDFTransform2_nodes = {};
            SDFTransform2.uiData.setPosition(-1100, 200);
            SDFTransform2.p.t.set([0, -1.9, 0]);
            SDFTransform2.p.r.set([0.8, 0.9, 0]);
            SDFTransform2.params.postCreateSpareParams();
            SDFTransform2.params.runOnSceneLoadHooks();
            return { node: SDFTransform2, children: SDFTransform2_nodes };
          }
          function create_SDFTransform3(subnet_static_shapes2) {
            var SDFTransform3 = subnet_static_shapes2.createNode("SDFTransform");
            SDFTransform3.setName("SDFTransform3");
            const SDFTransform3_nodes = {};
            SDFTransform3.uiData.setPosition(-1250, 200);
            SDFTransform3.params.postCreateSpareParams();
            SDFTransform3.params.runOnSceneLoadHooks();
            return { node: SDFTransform3, children: SDFTransform3_nodes };
          }
          function create_SDFUnion1(subnet_static_shapes2) {
            var SDFUnion1 = subnet_static_shapes2.createNode("SDFUnion");
            SDFUnion1.setName("SDFUnion1");
            const SDFUnion1_nodes = {};
            SDFUnion1.uiData.setPosition(-700, 100);
            SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
            SDFUnion1.params.get("smoothFactor").set(0.19);
            SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
            SDFUnion1.params.postCreateSpareParams();
            SDFUnion1.params.runOnSceneLoadHooks();
            return { node: SDFUnion1, children: SDFUnion1_nodes };
          }
          function create_SDFUnion22(subnet_static_shapes2) {
            var SDFUnion2 = subnet_static_shapes2.createNode("SDFUnion");
            SDFUnion2.setName("SDFUnion2");
            const SDFUnion2_nodes = {};
            SDFUnion2.uiData.setPosition(-600, -400);
            SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
            SDFUnion2.params.get("smoothFactor").set(0.07);
            SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
            SDFUnion2.params.postCreateSpareParams();
            SDFUnion2.params.runOnSceneLoadHooks();
            return { node: SDFUnion2, children: SDFUnion2_nodes };
          }
          function create_SDFUnion3(subnet_static_shapes2) {
            var SDFUnion3 = subnet_static_shapes2.createNode("SDFUnion");
            SDFUnion3.setName("SDFUnion3");
            const SDFUnion3_nodes = {};
            SDFUnion3.uiData.setPosition(-400, -200);
            SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
            SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
            SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
            SDFUnion3.params.get("smoothFactor").set(0.08);
            SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
            SDFUnion3.params.postCreateSpareParams();
            SDFUnion3.params.runOnSceneLoadHooks();
            return { node: SDFUnion3, children: SDFUnion3_nodes };
          }
          function create_floatToVec3_1(subnet_static_shapes2) {
            var floatToVec3_1 = subnet_static_shapes2.createNode("floatToVec3");
            floatToVec3_1.setName("floatToVec3_1");
            const floatToVec3_1_nodes = {};
            floatToVec3_1.uiData.setPosition(-1450, 200);
            floatToVec3_1.params.postCreateSpareParams();
            floatToVec3_1.params.runOnSceneLoadHooks();
            return { node: floatToVec3_1, children: floatToVec3_1_nodes };
          }
          function create_globals1(subnet_static_shapes2) {
            var globals1 = subnet_static_shapes2.createNode("globals");
            globals1.setName("globals1");
            const globals1_nodes = {};
            globals1.uiData.setPosition(-1650, 200);
            globals1.params.postCreateSpareParams();
            globals1.params.runOnSceneLoadHooks();
            return { node: globals1, children: globals1_nodes };
          }
          function create_multAdd1(subnet_static_shapes2) {
            var multAdd1 = subnet_static_shapes2.createNode("multAdd");
            multAdd1.setName("multAdd1");
            const multAdd1_nodes = {};
            multAdd1.uiData.setPosition(-1550, 200);
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
            multAdd1.params.postCreateSpareParams();
            multAdd1.params.runOnSceneLoadHooks();
            return { node: multAdd1, children: multAdd1_nodes };
          }
          function create_subnetOutput1(subnet_static_shapes2) {
            var subnetOutput1 = subnet_static_shapes2.createNode("subnetOutput");
            subnetOutput1.setName("subnetOutput1");
            const subnetOutput1_nodes = {};
            subnetOutput1.uiData.setPosition(-200, -200);
            subnetOutput1.params.postCreateSpareParams();
            subnetOutput1.params.runOnSceneLoadHooks();
            return { node: subnetOutput1, children: subnetOutput1_nodes };
          }
          subnet_static_shapes_nodes["SDFBox1"] = create_SDFBox1(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFBox2"] = create_SDFBox2(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFBoxFrame1"] = create_SDFBoxFrame1(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFBoxFrame2"] = create_SDFBoxFrame2(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFTransform1"] = create_SDFTransform1(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFTransform2"] = create_SDFTransform2(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFTransform3"] = create_SDFTransform3(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFUnion1"] = create_SDFUnion1(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFUnion2"] = create_SDFUnion22(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFUnion3"] = create_SDFUnion3(subnet_static_shapes);
          subnet_static_shapes_nodes["floatToVec3_1"] = create_floatToVec3_1(subnet_static_shapes);
          subnet_static_shapes_nodes["globals1"] = create_globals1(subnet_static_shapes);
          subnet_static_shapes_nodes["multAdd1"] = create_multAdd1(subnet_static_shapes);
          subnet_static_shapes_nodes["subnetOutput1"] = create_subnetOutput1(subnet_static_shapes);
          subnet_static_shapes_nodes["SDFBox1"].node.setInput(
            "position",
            subnet_static_shapes_nodes["SDFTransform3"].node,
            "p"
          );
          subnet_static_shapes_nodes["SDFBox2"].node.setInput(
            "position",
            subnet_static_shapes_nodes["SDFTransform2"].node,
            "p"
          );
          subnet_static_shapes_nodes["SDFBoxFrame1"].node.setInput(
            "position",
            subnet_static_shapes_nodes["SDFTransform1"].node,
            "p"
          );
          subnet_static_shapes_nodes["SDFTransform2"].node.setInput(
            "position",
            subnet_static_shapes_nodes["SDFTransform3"].node,
            "p"
          );
          subnet_static_shapes_nodes["SDFTransform3"].node.setInput(
            "r",
            subnet_static_shapes_nodes["floatToVec3_1"].node,
            "vec3"
          );
          subnet_static_shapes_nodes["SDFUnion1"].node.setInput(
            "sdf0",
            subnet_static_shapes_nodes["SDFBox1"].node,
            "float"
          );
          subnet_static_shapes_nodes["SDFUnion1"].node.setInput(
            "sdf1",
            subnet_static_shapes_nodes["SDFBox2"].node,
            "float"
          );
          subnet_static_shapes_nodes["SDFUnion2"].node.setInput(
            "sdf0",
            subnet_static_shapes_nodes["SDFBoxFrame2"].node,
            "float"
          );
          subnet_static_shapes_nodes["SDFUnion2"].node.setInput(
            "sdf1",
            subnet_static_shapes_nodes["SDFBoxFrame1"].node,
            "float"
          );
          subnet_static_shapes_nodes["SDFUnion3"].node.setInput(
            "sdf0",
            subnet_static_shapes_nodes["SDFUnion2"].node,
            "union"
          );
          subnet_static_shapes_nodes["SDFUnion3"].node.setInput(
            "sdf1",
            subnet_static_shapes_nodes["SDFUnion1"].node,
            "union"
          );
          subnet_static_shapes_nodes["floatToVec3_1"].node.setInput(
            "y",
            subnet_static_shapes_nodes["multAdd1"].node,
            "val"
          );
          subnet_static_shapes_nodes["multAdd1"].node.setInput(
            "value",
            subnet_static_shapes_nodes["globals1"].node,
            "time"
          );
          subnet_static_shapes_nodes["subnetOutput1"].node.setInput(
            "input0",
            subnet_static_shapes_nodes["SDFUnion3"].node,
            "union"
          );
          subnet_static_shapes.uiData.setPosition(-500, -350);
          subnet_static_shapes.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "input0", 0, { spare: true, editable: true });
          subnet_static_shapes.params.postCreateSpareParams();
          subnet_static_shapes.params.runOnSceneLoadHooks();
          return { node: subnet_static_shapes, children: subnet_static_shapes_nodes };
        }
        rayMarchingBuilder1_nodes["SDFContext2"] = create_SDFContext2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext3"] = create_SDFContext3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial2"] = create_SDFMaterial2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial3"] = create_SDFMaterial3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFSphere1"] = create_SDFSphere1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion2"] = create_SDFUnion2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant2"] = create_constant2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant3"] = create_constant3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["param1"] = create_param1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["subnet1"] = create_subnet1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["subnet_static_shapes"] = create_subnet_static_shapes(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext2"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFSphere1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFContext2"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial2"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFContext3"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["subnet_static_shapes"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["SDFContext3"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial3"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFMaterial2"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["constant2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFMaterial3"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["constant3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFSphere1"].node.setInput(
          "center",
          rayMarchingBuilder1_nodes["param1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFContext2"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFContext3"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "smoothFactor",
          rayMarchingBuilder1_nodes["subnet1"].node,
          "input0"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFUnion2"].node,
          "union"
        );
        rayMarchingBuilder1.uiData.setPosition(0, 200);
        rayMarchingBuilder1.p.maxDist.set(12);
        rayMarchingBuilder1.p.useEnvMap.set(true);
        rayMarchingBuilder1.p.envMap.set("../../../COP/envMap");
        rayMarchingBuilder1.p.front.set(false);
        rayMarchingBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "spherePos", [0, 0, 0], {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true
        });
        rayMarchingBuilder1.params.get("spherePos").set([0, 0, -5]);
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      MAT.uiData.setPosition(-450, 150);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_actor1(raymarchedObject2) {
      var actor1 = raymarchedObject2.createNode("actor");
      actor1.setName("actor1");
      const actor1_nodes = {};
      function create_onTick1(actor12) {
        var onTick1 = actor12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-100, 100);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_plane1(actor12) {
        var plane1 = actor12.createNode("plane");
        plane1.setName("plane1");
        const plane1_nodes = {};
        plane1.uiData.setPosition(-200, 550);
        plane1.p.normal.set([0, 0, 1]);
        plane1.params.postCreateSpareParams();
        plane1.params.runOnSceneLoadHooks();
        return { node: plane1, children: plane1_nodes };
      }
      function create_rayFromCursor1(actor12) {
        var rayFromCursor1 = actor12.createNode("rayFromCursor");
        rayFromCursor1.setName("rayFromCursor1");
        const rayFromCursor1_nodes = {};
        rayFromCursor1.uiData.setPosition(-200, 350);
        rayFromCursor1.params.postCreateSpareParams();
        rayFromCursor1.params.runOnSceneLoadHooks();
        return { node: rayFromCursor1, children: rayFromCursor1_nodes };
      }
      function create_rayIntersectPlane1(actor12) {
        var rayIntersectPlane1 = actor12.createNode("rayIntersectPlane");
        rayIntersectPlane1.setName("rayIntersectPlane1");
        const rayIntersectPlane1_nodes = {};
        rayIntersectPlane1.uiData.setPosition(0, 450);
        rayIntersectPlane1.params.postCreateSpareParams();
        rayIntersectPlane1.params.runOnSceneLoadHooks();
        return { node: rayIntersectPlane1, children: rayIntersectPlane1_nodes };
      }
      function create_setMaterialUniform1(actor12) {
        var setMaterialUniform1 = actor12.createNode("setMaterialUniform");
        setMaterialUniform1.setName("setMaterialUniform1");
        const setMaterialUniform1_nodes = {};
        setMaterialUniform1.uiData.setPosition(400, 200);
        setMaterialUniform1.setUniformType(_polygonjs_polygonjs_src_engine_nodes_utils_io_connections_Js__WEBPACK_IMPORTED_MODULE_2__/* .JsConnectionPointType.VECTOR3 */ .zF.VECTOR3);
        setMaterialUniform1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "Vector3", [0, 0, 0], { spare: true, editable: false });
        setMaterialUniform1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "uniformName", "", { spare: true, editable: true });
        setMaterialUniform1.params.get("uniformName").set("spherePos");
        setMaterialUniform1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 0, { spare: true, editable: true });
        setMaterialUniform1.params.get("lerp").set(0.52);
        setMaterialUniform1.params.postCreateSpareParams();
        setMaterialUniform1.params.runOnSceneLoadHooks();
        return { node: setMaterialUniform1, children: setMaterialUniform1_nodes };
      }
      actor1_nodes["onTick1"] = create_onTick1(actor1);
      actor1_nodes["plane1"] = create_plane1(actor1);
      actor1_nodes["rayFromCursor1"] = create_rayFromCursor1(actor1);
      actor1_nodes["rayIntersectPlane1"] = create_rayIntersectPlane1(actor1);
      actor1_nodes["setMaterialUniform1"] = create_setMaterialUniform1(actor1);
      actor1_nodes["rayIntersectPlane1"].node.setInput("Ray", actor1_nodes["rayFromCursor1"].node, "Ray");
      actor1_nodes["rayIntersectPlane1"].node.setInput("Plane", actor1_nodes["plane1"].node, "Plane");
      actor1_nodes["setMaterialUniform1"].node.setInput("trigger", actor1_nodes["onTick1"].node, "trigger");
      actor1_nodes["setMaterialUniform1"].node.setInput(
        "Vector3",
        actor1_nodes["rayIntersectPlane1"].node,
        "position"
      );
      actor1.uiData.setPosition(-250, 300);
      actor1.flags.display.set(true);
      actor1.params.postCreateSpareParams();
      actor1.params.runOnSceneLoadHooks();
      return { node: actor1, children: actor1_nodes };
    }
    function create_box1(raymarchedObject2) {
      var box1 = raymarchedObject2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(-150, -50);
      box1.p.sizes.set([7, 5.7, 1]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_boxLines1(raymarchedObject2) {
      var boxLines1 = raymarchedObject2.createNode("boxLines");
      boxLines1.setName("boxLines1");
      const boxLines1_nodes = {};
      boxLines1.uiData.setPosition(-50, 150);
      boxLines1.params.postCreateSpareParams();
      boxLines1.params.runOnSceneLoadHooks();
      return { node: boxLines1, children: boxLines1_nodes };
    }
    function create_material1(raymarchedObject2) {
      var material1 = raymarchedObject2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(-250, 150);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_merge1(raymarchedObject2) {
      var merge1 = raymarchedObject2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-100, 450);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    raymarchedObject_nodes["MAT"] = create_MAT(raymarchedObject);
    raymarchedObject_nodes["actor1"] = create_actor1(raymarchedObject);
    raymarchedObject_nodes["box1"] = create_box1(raymarchedObject);
    raymarchedObject_nodes["boxLines1"] = create_boxLines1(raymarchedObject);
    raymarchedObject_nodes["material1"] = create_material1(raymarchedObject);
    raymarchedObject_nodes["merge1"] = create_merge1(raymarchedObject);
    raymarchedObject_nodes["actor1"].node.setInput(0, raymarchedObject_nodes["material1"].node);
    raymarchedObject_nodes["boxLines1"].node.setInput(0, raymarchedObject_nodes["box1"].node);
    raymarchedObject_nodes["material1"].node.setInput(0, raymarchedObject_nodes["box1"].node);
    raymarchedObject_nodes["merge1"].node.setInput(0, raymarchedObject_nodes["actor1"].node);
    raymarchedObject_nodes["merge1"].node.setInput(1, raymarchedObject_nodes["boxLines1"].node);
    raymarchedObject.uiData.setPosition(0, -100);
    raymarchedObject.flags.display.set(true);
    raymarchedObject.params.postCreateSpareParams();
    raymarchedObject.params.runOnSceneLoadHooks();
    return { node: raymarchedObject, children: raymarchedObject_nodes };
  }
  function create_background(parentNode) {
    var background = parentNode.createNode("geo");
    background.setName("background");
    const background_nodes = {};
    function create_MAT(background2) {
      var MAT = background2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshBasicBuilder1(MAT2) {
        var meshBasicBuilder1 = MAT2.createNode("meshBasicBuilder");
        meshBasicBuilder1.setName("meshBasicBuilder1");
        const meshBasicBuilder1_nodes = {};
        function create_constant1(meshBasicBuilder12) {
          var constant1 = meshBasicBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(-200, -150);
          constant1.p.type.set(4);
          constant1.p.color.set([0.41568627450980394, 0.5725490196078431, 0.8235294117647058]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_disk1(meshBasicBuilder12) {
          var disk1 = meshBasicBuilder12.createNode("disk");
          disk1.setName("disk1");
          const disk1_nodes = {};
          disk1.uiData.setPosition(-250, 50);
          disk1.p.center.set([0.5, 0.5]);
          disk1.p.radius.set(0.18);
          disk1.p.feather.set(0.7);
          disk1.params.postCreateSpareParams();
          disk1.params.runOnSceneLoadHooks();
          return { node: disk1, children: disk1_nodes };
        }
        function create_globals1(meshBasicBuilder12) {
          var globals1 = meshBasicBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-450, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_multScalar1(meshBasicBuilder12) {
          var multScalar1 = meshBasicBuilder12.createNode("multScalar");
          multScalar1.setName("multScalar1");
          const multScalar1_nodes = {};
          multScalar1.uiData.setPosition(0, -150);
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: false });
          multScalar1.params.postCreateSpareParams();
          multScalar1.params.runOnSceneLoadHooks();
          return { node: multScalar1, children: multScalar1_nodes };
        }
        function create_output1(meshBasicBuilder12) {
          var output1 = meshBasicBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_pow1(meshBasicBuilder12) {
          var pow1 = meshBasicBuilder12.createNode("pow");
          pow1.setName("pow1");
          const pow1_nodes = {};
          pow1.uiData.setPosition(-100, 50);
          pow1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "x", 0, { spare: true, editable: false });
          pow1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "y", 0, { spare: true, editable: true });
          pow1.params.get("y").set(1.8);
          pow1.params.postCreateSpareParams();
          pow1.params.runOnSceneLoadHooks();
          return { node: pow1, children: pow1_nodes };
        }
        meshBasicBuilder1_nodes["constant1"] = create_constant1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["disk1"] = create_disk1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["globals1"] = create_globals1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["multScalar1"] = create_multScalar1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["output1"] = create_output1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["pow1"] = create_pow1(meshBasicBuilder1);
        meshBasicBuilder1_nodes["disk1"].node.setInput(
          "position",
          meshBasicBuilder1_nodes["globals1"].node,
          "uv"
        );
        meshBasicBuilder1_nodes["multScalar1"].node.setInput(
          "value",
          meshBasicBuilder1_nodes["constant1"].node,
          "val"
        );
        meshBasicBuilder1_nodes["multScalar1"].node.setInput(
          "mult",
          meshBasicBuilder1_nodes["pow1"].node,
          "val"
        );
        meshBasicBuilder1_nodes["output1"].node.setInput(
          "color",
          meshBasicBuilder1_nodes["multScalar1"].node,
          "val"
        );
        meshBasicBuilder1_nodes["pow1"].node.setInput("x", meshBasicBuilder1_nodes["disk1"].node, "float");
        meshBasicBuilder1.uiData.setPosition(0, 150);
        meshBasicBuilder1.params.postCreateSpareParams();
        meshBasicBuilder1.params.runOnSceneLoadHooks();
        return { node: meshBasicBuilder1, children: meshBasicBuilder1_nodes };
      }
      MAT_nodes["meshBasicBuilder1"] = create_meshBasicBuilder1(MAT);
      MAT.uiData.setPosition(-350, 250);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(background2) {
      var material1 = background2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(-150, 250);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshBasicBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_plane1(background2) {
      var plane1 = background2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(-150, -50);
      plane1.p.direction.set([0, 0, 1]);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    function create_transform1(background2) {
      var transform1 = background2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-150, 100);
      transform1.p.t.set([0, 0, -2.4467675300478717]);
      transform1.p.s.set([7.3, 7.3, 2.3]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    background_nodes["MAT"] = create_MAT(background);
    background_nodes["material1"] = create_material1(background);
    background_nodes["plane1"] = create_plane1(background);
    background_nodes["transform1"] = create_transform1(background);
    background_nodes["material1"].node.setInput(0, background_nodes["transform1"].node);
    background_nodes["transform1"].node.setInput(0, background_nodes["plane1"].node);
    background.uiData.setPosition(0, -200);
    background.flags.display.set(true);
    background.params.postCreateSpareParams();
    background.params.runOnSceneLoadHooks();
    return { node: background, children: background_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      cameraControls1.uiData.setPosition(50, 50);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraControls2(cameras2) {
      var cameraControls2 = cameras2.createNode("cameraControls");
      cameraControls2.setName("cameraControls2");
      const cameraControls2_nodes = {};
      function create_cameraOrbitControls1(cameraControls22) {
        var cameraOrbitControls1 = cameraControls22.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls2_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls2);
      cameraControls2.p.node.set("cameraOrbitControls1");
      cameraControls2.params.postCreateSpareParams();
      cameraControls2.params.runOnSceneLoadHooks();
      return { node: cameraControls2, children: cameraControls2_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-100, 300);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG.setName("perspectiveCamera_DEBUG");
      const perspectiveCamera_DEBUG_nodes = {};
      perspectiveCamera_DEBUG.uiData.setPosition(50, -100);
      perspectiveCamera_DEBUG.p.position.set([4, 4, 4]);
      perspectiveCamera_DEBUG.params.postCreateSpareParams();
      perspectiveCamera_DEBUG.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes };
    }
    function create_perspectiveCamera_MAIN(cameras2) {
      var perspectiveCamera_MAIN = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_MAIN.setName("perspectiveCamera_MAIN");
      const perspectiveCamera_MAIN_nodes = {};
      perspectiveCamera_MAIN.uiData.setPosition(-300, -100);
      perspectiveCamera_MAIN.p.position.set([0, 1.1787657307191874, 6.914738208647524]);
      perspectiveCamera_MAIN.params.postCreateSpareParams();
      perspectiveCamera_MAIN.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_MAIN, children: perspectiveCamera_MAIN_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraControls2"] = create_cameraControls2(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera_DEBUG"] = create_perspectiveCamera_DEBUG(cameras);
    cameras_nodes["perspectiveCamera_MAIN"] = create_perspectiveCamera_MAIN(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_DEBUG"].node);
    cameras_nodes["cameraControls2"].node.setInput(0, cameras_nodes["perspectiveCamera_MAIN"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["cameraControls2"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraControls1"].node);
    cameras.uiData.setPosition(0, 0);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["raymarchedObject"] = create_raymarchedObject(root);
  scene_root_nodes["background"] = create_background(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_MAIN",
    focusedNodes: scene_root_nodes["raymarchedObject"].children["MAT"].children["rayMarchingBuilder1"].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_multishapes_ts.631adf0ab062c4ab785e.js.map