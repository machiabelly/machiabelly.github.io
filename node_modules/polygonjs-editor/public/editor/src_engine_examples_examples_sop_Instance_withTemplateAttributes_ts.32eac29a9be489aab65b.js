(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_Instance_withTemplateAttributes_ts"],{

/***/ 44808:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshLambertBuilder_INSTANCES(MAT2) {
        var meshLambertBuilder_INSTANCES = MAT2.createNode("meshLambertBuilder");
        meshLambertBuilder_INSTANCES.setName("meshLambertBuilder_INSTANCES");
        const meshLambertBuilder_INSTANCES_nodes = {};
        function create_globals1(meshLambertBuilder_INSTANCES2) {
          var globals1 = meshLambertBuilder_INSTANCES2.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-200, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_instanceTransform1(meshLambertBuilder_INSTANCES2) {
          var instanceTransform1 = meshLambertBuilder_INSTANCES2.createNode("instanceTransform");
          instanceTransform1.setName("instanceTransform1");
          const instanceTransform1_nodes = {};
          instanceTransform1.uiData.setPosition(0, 0);
          instanceTransform1.params.postCreateSpareParams();
          instanceTransform1.params.runOnSceneLoadHooks();
          return { node: instanceTransform1, children: instanceTransform1_nodes };
        }
        function create_output1(meshLambertBuilder_INSTANCES2) {
          var output1 = meshLambertBuilder_INSTANCES2.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(200, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        meshLambertBuilder_INSTANCES_nodes["globals1"] = create_globals1(meshLambertBuilder_INSTANCES);
        meshLambertBuilder_INSTANCES_nodes["instanceTransform1"] = create_instanceTransform1(meshLambertBuilder_INSTANCES);
        meshLambertBuilder_INSTANCES_nodes["output1"] = create_output1(meshLambertBuilder_INSTANCES);
        meshLambertBuilder_INSTANCES_nodes["output1"].node.setInput(
          "position",
          meshLambertBuilder_INSTANCES_nodes["instanceTransform1"].node,
          "position"
        );
        meshLambertBuilder_INSTANCES_nodes["output1"].node.setInput(
          "normal",
          meshLambertBuilder_INSTANCES_nodes["instanceTransform1"].node,
          "normal"
        );
        meshLambertBuilder_INSTANCES.uiData.setPosition(0, 0);
        meshLambertBuilder_INSTANCES.params.postCreateSpareParams();
        meshLambertBuilder_INSTANCES.params.runOnSceneLoadHooks();
        return { node: meshLambertBuilder_INSTANCES, children: meshLambertBuilder_INSTANCES_nodes };
      }
      MAT_nodes["meshLambertBuilder_INSTANCES"] = create_meshLambertBuilder_INSTANCES(MAT);
      MAT.uiData.setPosition(-750, 500);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_attribCreate1(geo12) {
      var attribCreate1 = geo12.createNode("attribCreate");
      attribCreate1.setName("attribCreate1");
      const attribCreate1_nodes = {};
      attribCreate1.uiData.setComment(
        "This adds an up attribute. This is used to define the orientation of the duplicated objects, along side the normal attribute.\nIt is currently bypassed, so you would need to un-bypass it to see how it changes the output of the instance node"
      );
      attribCreate1.uiData.setPosition(-200, -50);
      attribCreate1.flags.bypass.set(true);
      attribCreate1.p.name.set("up");
      attribCreate1.p.size.set(3);
      attribCreate1.p.value1.set("10000 * rand(@ptnum * 124.543)");
      attribCreate1.p.value3.set([0.1, 1, -1]);
      attribCreate1.params.postCreateSpareParams();
      attribCreate1.params.runOnSceneLoadHooks();
      return { node: attribCreate1, children: attribCreate1_nodes };
    }
    function create_attribCreate2(geo12) {
      var attribCreate2 = geo12.createNode("attribCreate");
      attribCreate2.setName("attribCreate2");
      const attribCreate2_nodes = {};
      attribCreate2.uiData.setComment(
        "This node adds a pscale attribute. Using an expression, the pscale is set to 0 for the first point and 1 for the last point.\nThe node is currently bypassed. so you would need to un-bypass it to see its result."
      );
      attribCreate2.uiData.setPosition(-200, 250);
      attribCreate2.flags.bypass.set(true);
      attribCreate2.p.name.set("pscale");
      attribCreate2.p.value1.set("@ptnum / (pointsCount(0)-1)");
      attribCreate2.params.postCreateSpareParams();
      attribCreate2.params.runOnSceneLoadHooks();
      return { node: attribCreate2, children: attribCreate2_nodes };
    }
    function create_circle1(geo12) {
      var circle1 = geo12.createNode("circle");
      circle1.setName("circle1");
      const circle1_nodes = {};
      circle1.uiData.setComment(
        "this circle node creates points that will then be used by the instance node below to define the position of the new objects. Try changing the arcAngle and segments to see how this changes the output of the instance node"
      );
      circle1.uiData.setPosition(-200, -550);
      circle1.p.radius.set(3);
      circle1.p.segments.set(6);
      circle1.p.connectLastPoint.set(false);
      circle1.p.arcAngle.set(90);
      circle1.params.postCreateSpareParams();
      circle1.params.runOnSceneLoadHooks();
      return { node: circle1, children: circle1_nodes };
    }
    function create_instance1(geo12) {
      var instance1 = geo12.createNode("instance");
      instance1.setName("instance1");
      const instance1_nodes = {};
      instance1.uiData.setComment(
        "This instance nodes duplicate the content of the left input onto the points of the second input.\nIt uses the point position, but also the following attributes: scale (3 float), pscale (1 float), normal (3 float) and up (3 float) to transform the created geometry."
      );
      instance1.uiData.setPosition(-450, 500);
      instance1.flags.display.set(true);
      instance1.p.material.set("../MAT/meshLambertBuilder_INSTANCES");
      instance1.params.postCreateSpareParams();
      instance1.params.runOnSceneLoadHooks();
      return { node: instance1, children: instance1_nodes };
    }
    function create_normals1(geo12) {
      var normals1 = geo12.createNode("normals");
      normals1.setName("normals1");
      const normals1_nodes = {};
      normals1.uiData.setComment(
        "this adds a normal attribute. Using expressions, it sets the normals to the same value as the position. But you can set it to any value.\nYou can also try and bypass it to see the result."
      );
      normals1.uiData.setPosition(-200, -250);
      normals1.p.edit.set(true);
      normals1.p.updateX.set(true);
      normals1.p.x.set("@P.x");
      normals1.p.updateY.set(true);
      normals1.p.y.set("@P.y");
      normals1.p.updateZ.set(true);
      normals1.p.z.set("@P.z");
      normals1.params.postCreateSpareParams();
      normals1.params.runOnSceneLoadHooks();
      return { node: normals1, children: normals1_nodes };
    }
    function create_normals2(geo12) {
      var normals2 = geo12.createNode("normals");
      normals2.setName("normals2");
      const normals2_nodes = {};
      normals2.uiData.setComment(
        "this normal node sets the normals to [0,1,0] to all points. Try and replace the other normal node by this one to see how that changes the output of the instance node"
      );
      normals2.uiData.setPosition(150, -250);
      normals2.p.edit.set(true);
      normals2.p.updateX.set(true);
      normals2.p.x.set(0);
      normals2.p.updateY.set(true);
      normals2.p.y.set(1);
      normals2.p.updateZ.set(true);
      normals2.p.z.set(0);
      normals2.p.recompute.set(false);
      normals2.params.postCreateSpareParams();
      normals2.params.runOnSceneLoadHooks();
      return { node: normals2, children: normals2_nodes };
    }
    function create_subnet_arrow(geo12) {
      var subnet_arrow = geo12.createNode("subnet");
      subnet_arrow.setName("subnet_arrow");
      const subnet_arrow_nodes = {};
      function create_box1(subnet_arrow2) {
        var box1 = subnet_arrow2.createNode("box");
        box1.setName("box1");
        const box1_nodes = {};
        box1.uiData.setPosition(-750, 0);
        box1.params.postCreateSpareParams();
        box1.params.runOnSceneLoadHooks();
        return { node: box1, children: box1_nodes };
      }
      function create_merge1(subnet_arrow2) {
        var merge1 = subnet_arrow2.createNode("merge");
        merge1.setName("merge1");
        const merge1_nodes = {};
        merge1.uiData.setPosition(-700, 300);
        merge1.p.compact.set(true);
        merge1.params.postCreateSpareParams();
        merge1.params.runOnSceneLoadHooks();
        return { node: merge1, children: merge1_nodes };
      }
      function create_subnetOutput1(subnet_arrow2) {
        var subnetOutput1 = subnet_arrow2.createNode("subnetOutput");
        subnetOutput1.setName("subnetOutput1");
        const subnetOutput1_nodes = {};
        subnetOutput1.uiData.setPosition(-700, 700);
        subnetOutput1.params.postCreateSpareParams();
        subnetOutput1.params.runOnSceneLoadHooks();
        return { node: subnetOutput1, children: subnetOutput1_nodes };
      }
      function create_transform1(subnet_arrow2) {
        var transform1 = subnet_arrow2.createNode("transform");
        transform1.setName("transform1");
        const transform1_nodes = {};
        transform1.uiData.setPosition(-700, 400);
        transform1.flags.display.set(true);
        transform1.p.s.set([1, 0.30000000000000004, 1]);
        transform1.p.scale.set(0.43);
        transform1.params.postCreateSpareParams();
        transform1.params.runOnSceneLoadHooks();
        return { node: transform1, children: transform1_nodes };
      }
      function create_tube1(subnet_arrow2) {
        var tube1 = subnet_arrow2.createNode("tube");
        tube1.setName("tube1");
        const tube1_nodes = {};
        tube1.uiData.setPosition(-550, 150);
        tube1.p.segmentsRadial.set(3);
        tube1.p.center.set([0, 0, 1]);
        tube1.p.direction.set([0, 1, 0]);
        tube1.params.postCreateSpareParams();
        tube1.params.runOnSceneLoadHooks();
        return { node: tube1, children: tube1_nodes };
      }
      subnet_arrow_nodes["box1"] = create_box1(subnet_arrow);
      subnet_arrow_nodes["merge1"] = create_merge1(subnet_arrow);
      subnet_arrow_nodes["subnetOutput1"] = create_subnetOutput1(subnet_arrow);
      subnet_arrow_nodes["transform1"] = create_transform1(subnet_arrow);
      subnet_arrow_nodes["tube1"] = create_tube1(subnet_arrow);
      subnet_arrow_nodes["merge1"].node.setInput(0, subnet_arrow_nodes["box1"].node);
      subnet_arrow_nodes["merge1"].node.setInput(1, subnet_arrow_nodes["tube1"].node);
      subnet_arrow_nodes["subnetOutput1"].node.setInput(0, subnet_arrow_nodes["transform1"].node);
      subnet_arrow_nodes["transform1"].node.setInput(0, subnet_arrow_nodes["merge1"].node);
      subnet_arrow.uiData.setPosition(-650, 50);
      subnet_arrow.params.postCreateSpareParams();
      subnet_arrow.params.runOnSceneLoadHooks();
      return { node: subnet_arrow, children: subnet_arrow_nodes };
    }
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["attribCreate1"] = create_attribCreate1(geo1);
    geo1_nodes["attribCreate2"] = create_attribCreate2(geo1);
    geo1_nodes["circle1"] = create_circle1(geo1);
    geo1_nodes["instance1"] = create_instance1(geo1);
    geo1_nodes["normals1"] = create_normals1(geo1);
    geo1_nodes["normals2"] = create_normals2(geo1);
    geo1_nodes["subnet_arrow"] = create_subnet_arrow(geo1);
    geo1_nodes["attribCreate1"].node.setInput(0, geo1_nodes["normals1"].node);
    geo1_nodes["attribCreate2"].node.setInput(0, geo1_nodes["attribCreate1"].node);
    geo1_nodes["instance1"].node.setInput(0, geo1_nodes["subnet_arrow"].node);
    geo1_nodes["instance1"].node.setInput(1, geo1_nodes["attribCreate2"].node);
    geo1_nodes["normals1"].node.setInput(0, geo1_nodes["circle1"].node);
    geo1_nodes["normals2"].node.setInput(0, geo1_nodes["circle1"].node);
    geo1.uiData.setPosition(0, -50);
    geo1.flags.display.set(true);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    grid.uiData.setPosition(0, -150);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(200, 200);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.6610931372932695, -1.5878491680619118, -1.544847541286043]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    perspectiveCamera1.uiData.setPosition(-150, 200);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([4.0859463258358675, 5.868268087915243, 1.3055653371223168]);
    perspectiveCamera1.p.r.set([-68.72444324394021, 22.97761684435261, 45.07194773819147]);
    perspectiveCamera1.p.s.set([1, 0.9999999999999998, 1]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: Object.values(scene_root_nodes["geo1"].children).map((n) => n.node),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_Instance_withTemplateAttributes_ts.32eac29a9be489aab65b.js.map