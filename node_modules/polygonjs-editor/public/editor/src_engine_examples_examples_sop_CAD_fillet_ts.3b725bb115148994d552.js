(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_CAD_fillet_ts"],{

/***/ 92759:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_CADBoolean1(geo12) {
      var CADBoolean1 = geo12.createNode("CADBoolean");
      CADBoolean1.setName("CADBoolean1");
      const CADBoolean1_nodes = {};
      CADBoolean1.uiData.setComment(
        "This subtracts the tubes created on the right nodes, to dig holes in our main shape. Those holes are akin to ventilation gaps you could see on industrial designs"
      );
      CADBoolean1.uiData.setPosition(-450, 3800);
      CADBoolean1.p.operation.set(1);
      CADBoolean1.params.postCreateSpareParams();
      CADBoolean1.params.runOnSceneLoadHooks();
      return { node: CADBoolean1, children: CADBoolean1_nodes };
    }
    function create_CADBoolean2(geo12) {
      var CADBoolean2 = geo12.createNode("CADBoolean");
      CADBoolean2.setName("CADBoolean2");
      const CADBoolean2_nodes = {};
      CADBoolean2.uiData.setComment(
        "This second boolean node digs holes on the top of the box, using the hexagonally distributed tubes created with the nodes on the right."
      );
      CADBoolean2.uiData.setPosition(-450, 4800);
      CADBoolean2.p.operation.set(1);
      CADBoolean2.params.postCreateSpareParams();
      CADBoolean2.params.runOnSceneLoadHooks();
      return { node: CADBoolean2, children: CADBoolean2_nodes };
    }
    function create_CADBox3(geo12) {
      var CADBox3 = geo12.createNode("CADBox");
      CADBox3.setName("CADBox3");
      const CADBox3_nodes = {};
      CADBox3.uiData.setComment("We start with a simple box");
      CADBox3.uiData.setPosition(-450, -150);
      CADBox3.p.sizes.set([4, 1, 2]);
      CADBox3.params.postCreateSpareParams();
      CADBox3.params.runOnSceneLoadHooks();
      return { node: CADBox3, children: CADBox3_nodes };
    }
    function create_CADFillet1(geo12) {
      var CADFillet1 = geo12.createNode("CADFillet");
      CADFillet1.setName("CADFillet1");
      const CADFillet1_nodes = {};
      CADFillet1.uiData.setComment(
        "this fillet node only creates fillet on edges specified by the group parameter, which in this case is set to `frontEdges`. This group being created by the [group node](../CADGroup1) just above."
      );
      CADFillet1.uiData.setPosition(-450, 500);
      CADFillet1.p.group.set("frontEdges");
      CADFillet1.params.postCreateSpareParams();
      CADFillet1.params.runOnSceneLoadHooks();
      return { node: CADFillet1, children: CADFillet1_nodes };
    }
    function create_CADFillet2(geo12) {
      var CADFillet2 = geo12.createNode("CADFillet");
      CADFillet2.setName("CADFillet2");
      const CADFillet2_nodes = {};
      CADFillet2.uiData.setComment("Here we create another fillet, on the `backEdges` this time.");
      CADFillet2.uiData.setPosition(-450, 1250);
      CADFillet2.p.group.set("backEdges");
      CADFillet2.p.radius.set(0.373646);
      CADFillet2.params.postCreateSpareParams();
      CADFillet2.params.runOnSceneLoadHooks();
      return { node: CADFillet2, children: CADFillet2_nodes };
    }
    function create_CADFillet3(geo12) {
      var CADFillet3 = geo12.createNode("CADFillet");
      CADFillet3.setName("CADFillet3");
      const CADFillet3_nodes = {};
      CADFillet3.uiData.setComment(
        'This node then creates fillets on the `bottomEdges`. As opposed to the previous fillets which were round, this one is flat. They can also be called "chamfers".'
      );
      CADFillet3.uiData.setPosition(-450, 1900);
      CADFillet3.p.group.set("bottomEdges");
      CADFillet3.p.mode.set(0);
      CADFillet3.p.radius.set(0.035788);
      CADFillet3.params.postCreateSpareParams();
      CADFillet3.params.runOnSceneLoadHooks();
      return { node: CADFillet3, children: CADFillet3_nodes };
    }
    function create_CADFillet4(geo12) {
      var CADFillet4 = geo12.createNode("CADFillet");
      CADFillet4.setName("CADFillet4");
      const CADFillet4_nodes = {};
      CADFillet4.uiData.setComment("We create here the 4th and last set of fillets, on the `topEdges`");
      CADFillet4.uiData.setPosition(-450, 2700);
      CADFillet4.p.group.set("topEdges");
      CADFillet4.p.mode.set(0);
      CADFillet4.p.radius.set(0.095023);
      CADFillet4.params.postCreateSpareParams();
      CADFillet4.params.runOnSceneLoadHooks();
      return { node: CADFillet4, children: CADFillet4_nodes };
    }
    function create_CADGroup1(geo12) {
      var CADGroup1 = geo12.createNode("CADGroup");
      CADGroup1.setName("CADGroup1");
      const CADGroup1_nodes = {};
      CADGroup1.uiData.setComment(
        "Here we group 2 edges called `frontEdges`, using the box in the second input. This group is then used by the following [fillet node]('../CADFillet1)"
      );
      CADGroup1.uiData.setPosition(-450, 250);
      CADGroup1.p.name.set("frontEdges");
      CADGroup1.p.byBoundingObject.set(true);
      CADGroup1.params.postCreateSpareParams();
      CADGroup1.params.runOnSceneLoadHooks();
      return { node: CADGroup1, children: CADGroup1_nodes };
    }
    function create_CADGroup3(geo12) {
      var CADGroup3 = geo12.createNode("CADGroup");
      CADGroup3.setName("CADGroup3");
      const CADGroup3_nodes = {};
      CADGroup3.uiData.setPosition(-450, 1100);
      CADGroup3.p.name.set("backEdges");
      CADGroup3.p.byBoundingObject.set(true);
      CADGroup3.params.postCreateSpareParams();
      CADGroup3.params.runOnSceneLoadHooks();
      return { node: CADGroup3, children: CADGroup3_nodes };
    }
    function create_CADGroup4(geo12) {
      var CADGroup4 = geo12.createNode("CADGroup");
      CADGroup4.setName("CADGroup4");
      const CADGroup4_nodes = {};
      CADGroup4.uiData.setPosition(-450, 1750);
      CADGroup4.p.name.set("bottomEdges");
      CADGroup4.p.byBoundingObject.set(true);
      CADGroup4.params.postCreateSpareParams();
      CADGroup4.params.runOnSceneLoadHooks();
      return { node: CADGroup4, children: CADGroup4_nodes };
    }
    function create_CADGroup5(geo12) {
      var CADGroup5 = geo12.createNode("CADGroup");
      CADGroup5.setName("CADGroup5");
      const CADGroup5_nodes = {};
      CADGroup5.uiData.setPosition(-450, 2550);
      CADGroup5.p.name.set("topEdges");
      CADGroup5.p.byBoundingObject.set(true);
      CADGroup5.params.postCreateSpareParams();
      CADGroup5.params.runOnSceneLoadHooks();
      return { node: CADGroup5, children: CADGroup5_nodes };
    }
    function create_CADMirror1(geo12) {
      var CADMirror1 = geo12.createNode("CADMirror");
      CADMirror1.setName("CADMirror1");
      const CADMirror1_nodes = {};
      CADMirror1.uiData.setPosition(150, 3400);
      CADMirror1.p.axis.set([1, 0, 0]);
      CADMirror1.params.postCreateSpareParams();
      CADMirror1.params.runOnSceneLoadHooks();
      return { node: CADMirror1, children: CADMirror1_nodes };
    }
    function create_CADTriangulate2(geo12) {
      var CADTriangulate2 = geo12.createNode("CADTriangulate");
      CADTriangulate2.setName("CADTriangulate2");
      const CADTriangulate2_nodes = {};
      CADTriangulate2.uiData.setComment(
        "The CAD nodes compute mathematical shapes, which need to be triangulated in order to be displayed. This node defines how precise the triangulation is.\n\nThe more precise the longer it can take.\n\nNote that when you set  the display flag on any node above, you will still see its output. This is because it gets triangulated automatically. You can still tweak the triangulation setting using the parameters of the [parent geo node](../../)"
      );
      CADTriangulate2.uiData.setPosition(-450, 5150);
      CADTriangulate2.p.linearTolerance.set(0.44056);
      CADTriangulate2.p.angularTolerance.set(0.42058);
      CADTriangulate2.p.curveAbscissa.set(0.02098);
      CADTriangulate2.p.curveTolerance.set(0.03097);
      CADTriangulate2.p.edgesColor.set([0.002428215868235294, 0.002428215868235294, 0.002428215868235294]);
      CADTriangulate2.params.postCreateSpareParams();
      CADTriangulate2.params.runOnSceneLoadHooks();
      return { node: CADTriangulate2, children: CADTriangulate2_nodes };
    }
    function create_CADTube1(geo12) {
      var CADTube1 = geo12.createNode("CADTube");
      CADTube1.setName("CADTube1");
      const CADTube1_nodes = {};
      CADTube1.uiData.setPosition(50, 3e3);
      CADTube1.p.radius.set(0.07);
      CADTube1.p.height.set(0.527903);
      CADTube1.p.center.set([0, '-0.5*ch("height")', 0]);
      CADTube1.params.postCreateSpareParams();
      CADTube1.params.runOnSceneLoadHooks();
      return { node: CADTube1, children: CADTube1_nodes };
    }
    function create_CADTube2(geo12) {
      var CADTube2 = geo12.createNode("CADTube");
      CADTube2.setName("CADTube2");
      const CADTube2_nodes = {};
      CADTube2.uiData.setPosition(-150, 4300);
      CADTube2.p.radius.set(0.119841);
      CADTube2.p.center.set([0, 0, '-0.5*ch("height")']);
      CADTube2.p.axis.set([0, 0, 1]);
      CADTube2.params.postCreateSpareParams();
      CADTube2.params.runOnSceneLoadHooks();
      return { node: CADTube2, children: CADTube2_nodes };
    }
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        const meshStandard1_nodes = {};
        meshStandard1.uiData.setPosition(0, 0);
        meshStandard1.p.useEnvMap.set(true);
        meshStandard1.p.envMap.set("../../../COP/envMap");
        meshStandard1.p.metalness.set(1);
        meshStandard1.p.roughness.set(0.74);
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return { node: meshStandard1, children: meshStandard1_nodes };
      }
      MAT_nodes["meshStandard1"] = create_meshStandard1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([MAT_nodes["meshStandard1"].node]);
      }
      MAT.uiData.setPosition(-650, 5900);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_boxLines1(geo12) {
      var boxLines1 = geo12.createNode("boxLines");
      boxLines1.setName("boxLines1");
      const boxLines1_nodes = {};
      boxLines1.uiData.setPosition(-250, 100);
      boxLines1.p.sizes.set([1.5, 0.7, 2.3]);
      boxLines1.p.center.set([1.9475394371841808, 0, 0]);
      boxLines1.params.postCreateSpareParams();
      boxLines1.params.runOnSceneLoadHooks();
      return { node: boxLines1, children: boxLines1_nodes };
    }
    function create_boxLines2(geo12) {
      var boxLines2 = geo12.createNode("boxLines");
      boxLines2.setName("boxLines2");
      const boxLines2_nodes = {};
      boxLines2.uiData.setPosition(-250, 950);
      boxLines2.p.sizes.set([1.5, 0.7, 2.3]);
      boxLines2.p.center.set([-1.4145370445852117, 0, 0]);
      boxLines2.params.postCreateSpareParams();
      boxLines2.params.runOnSceneLoadHooks();
      return { node: boxLines2, children: boxLines2_nodes };
    }
    function create_boxLines3(geo12) {
      var boxLines3 = geo12.createNode("boxLines");
      boxLines3.setName("boxLines3");
      const boxLines3_nodes = {};
      boxLines3.uiData.setPosition(-250, 1600);
      boxLines3.p.sizes.set([4.5, 0.7, 2.3]);
      boxLines3.p.center.set([-0.08354225283322192, -0.3075626707825796, 0]);
      boxLines3.params.postCreateSpareParams();
      boxLines3.params.runOnSceneLoadHooks();
      return { node: boxLines3, children: boxLines3_nodes };
    }
    function create_boxLines4(geo12) {
      var boxLines4 = geo12.createNode("boxLines");
      boxLines4.setName("boxLines4");
      const boxLines4_nodes = {};
      boxLines4.uiData.setPosition(-250, 2400);
      boxLines4.p.sizes.set([4.5, 0.7, 2.3]);
      boxLines4.p.center.set([-0.08354225283322192, 0.4180941951223607, 0]);
      boxLines4.params.postCreateSpareParams();
      boxLines4.params.runOnSceneLoadHooks();
      return { node: boxLines4, children: boxLines4_nodes };
    }
    function create_copy1(geo12) {
      var copy1 = geo12.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setPosition(50, 3150);
      copy1.p.count.set(8);
      copy1.p.t.set([0.15, 0, 0]);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_copy2(geo12) {
      var copy2 = geo12.createNode("copy");
      copy2.setName("copy2");
      const copy2_nodes = {};
      copy2.uiData.setComment(
        "We duplicate tubes onto an hexagonal grid, so that those tubes end up placed in a nice hexagonal pattern. We then use them to  dig holes on the top of the box."
      );
      copy2.uiData.setPosition(100, 4600);
      copy2.params.postCreateSpareParams();
      copy2.params.runOnSceneLoadHooks();
      return { node: copy2, children: copy2_nodes };
    }
    function create_hexagons1(geo12) {
      var hexagons1 = geo12.createNode("hexagons");
      hexagons1.setName("hexagons1");
      const hexagons1_nodes = {};
      hexagons1.uiData.setPosition(150, 4150);
      hexagons1.p.size.set([2.0999999999999996, 1.5999999999999999]);
      hexagons1.p.hexagonRadius.set(0.35065);
      hexagons1.params.postCreateSpareParams();
      hexagons1.params.runOnSceneLoadHooks();
      return { node: hexagons1, children: hexagons1_nodes };
    }
    function create_material1(geo12) {
      var material1 = geo12.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setComment("Finally, we give our object a nice material");
      material1.uiData.setPosition(-450, 5900);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshStandard1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_merge1(geo12) {
      var merge1 = geo12.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-250, 800);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_merge2(geo12) {
      var merge2 = geo12.createNode("merge");
      merge2.setName("merge2");
      const merge2_nodes = {};
      merge2.uiData.setPosition(-250, 1450);
      merge2.params.postCreateSpareParams();
      merge2.params.runOnSceneLoadHooks();
      return { node: merge2, children: merge2_nodes };
    }
    function create_merge3(geo12) {
      var merge3 = geo12.createNode("merge");
      merge3.setName("merge3");
      const merge3_nodes = {};
      merge3.uiData.setPosition(-250, 2200);
      merge3.params.postCreateSpareParams();
      merge3.params.runOnSceneLoadHooks();
      return { node: merge3, children: merge3_nodes };
    }
    function create_merge4(geo12) {
      var merge4 = geo12.createNode("merge");
      merge4.setName("merge4");
      const merge4_nodes = {};
      merge4.uiData.setPosition(-250, 2950);
      merge4.params.postCreateSpareParams();
      merge4.params.runOnSceneLoadHooks();
      return { node: merge4, children: merge4_nodes };
    }
    function create_merge5(geo12) {
      var merge5 = geo12.createNode("merge");
      merge5.setName("merge5");
      const merge5_nodes = {};
      merge5.uiData.setComment(
        "Here we create a set of tubes, which are then used to be subtracted from our main shape, using a [boolean](../CADBoolean1) node."
      );
      merge5.uiData.setPosition(50, 3500);
      merge5.params.postCreateSpareParams();
      merge5.params.runOnSceneLoadHooks();
      return { node: merge5, children: merge5_nodes };
    }
    function create_merge7(geo12) {
      var merge7 = geo12.createNode("merge");
      merge7.setName("merge7");
      const merge7_nodes = {};
      merge7.uiData.setComment(
        "Since the triangulation creates many objects, we merge them into one here, to optimise the display"
      );
      merge7.uiData.setPosition(-450, 5650);
      merge7.p.compact.set(true);
      merge7.params.postCreateSpareParams();
      merge7.params.runOnSceneLoadHooks();
      return { node: merge7, children: merge7_nodes };
    }
    function create_transform1(geo12) {
      var transform1 = geo12.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(50, 3300);
      transform1.p.t.set([-1.425161766973393, 0, 1.0289526802217042]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_transform2(geo12) {
      var transform2 = geo12.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setPosition(150, 4300);
      transform2.p.t.set(["-$CEX", "-$CEY", "-$CEZ"]);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    function create_transform3(geo12) {
      var transform3 = geo12.createNode("transform");
      transform3.setName("transform3");
      const transform3_nodes = {};
      transform3.uiData.setPosition(150, 4450);
      transform3.p.t.set([0.7592166896941637, 0.8, 0]);
      transform3.params.postCreateSpareParams();
      transform3.params.runOnSceneLoadHooks();
      return { node: transform3, children: transform3_nodes };
    }
    geo1_nodes["CADBoolean1"] = create_CADBoolean1(geo1);
    geo1_nodes["CADBoolean2"] = create_CADBoolean2(geo1);
    geo1_nodes["CADBox3"] = create_CADBox3(geo1);
    geo1_nodes["CADFillet1"] = create_CADFillet1(geo1);
    geo1_nodes["CADFillet2"] = create_CADFillet2(geo1);
    geo1_nodes["CADFillet3"] = create_CADFillet3(geo1);
    geo1_nodes["CADFillet4"] = create_CADFillet4(geo1);
    geo1_nodes["CADGroup1"] = create_CADGroup1(geo1);
    geo1_nodes["CADGroup3"] = create_CADGroup3(geo1);
    geo1_nodes["CADGroup4"] = create_CADGroup4(geo1);
    geo1_nodes["CADGroup5"] = create_CADGroup5(geo1);
    geo1_nodes["CADMirror1"] = create_CADMirror1(geo1);
    geo1_nodes["CADTriangulate2"] = create_CADTriangulate2(geo1);
    geo1_nodes["CADTube1"] = create_CADTube1(geo1);
    geo1_nodes["CADTube2"] = create_CADTube2(geo1);
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["boxLines1"] = create_boxLines1(geo1);
    geo1_nodes["boxLines2"] = create_boxLines2(geo1);
    geo1_nodes["boxLines3"] = create_boxLines3(geo1);
    geo1_nodes["boxLines4"] = create_boxLines4(geo1);
    geo1_nodes["copy1"] = create_copy1(geo1);
    geo1_nodes["copy2"] = create_copy2(geo1);
    geo1_nodes["hexagons1"] = create_hexagons1(geo1);
    geo1_nodes["material1"] = create_material1(geo1);
    geo1_nodes["merge1"] = create_merge1(geo1);
    geo1_nodes["merge2"] = create_merge2(geo1);
    geo1_nodes["merge3"] = create_merge3(geo1);
    geo1_nodes["merge4"] = create_merge4(geo1);
    geo1_nodes["merge5"] = create_merge5(geo1);
    geo1_nodes["merge7"] = create_merge7(geo1);
    geo1_nodes["transform1"] = create_transform1(geo1);
    geo1_nodes["transform2"] = create_transform2(geo1);
    geo1_nodes["transform3"] = create_transform3(geo1);
    geo1_nodes["CADBoolean1"].node.setInput(0, geo1_nodes["CADFillet4"].node);
    geo1_nodes["CADBoolean1"].node.setInput(1, geo1_nodes["merge5"].node);
    geo1_nodes["CADBoolean2"].node.setInput(0, geo1_nodes["CADBoolean1"].node);
    geo1_nodes["CADBoolean2"].node.setInput(1, geo1_nodes["copy2"].node);
    geo1_nodes["CADFillet1"].node.setInput(0, geo1_nodes["CADGroup1"].node);
    geo1_nodes["CADFillet2"].node.setInput(0, geo1_nodes["CADGroup3"].node);
    geo1_nodes["CADFillet3"].node.setInput(0, geo1_nodes["CADGroup4"].node);
    geo1_nodes["CADFillet4"].node.setInput(0, geo1_nodes["CADGroup5"].node);
    geo1_nodes["CADGroup1"].node.setInput(0, geo1_nodes["CADBox3"].node);
    geo1_nodes["CADGroup1"].node.setInput(1, geo1_nodes["boxLines1"].node);
    geo1_nodes["CADGroup3"].node.setInput(0, geo1_nodes["CADFillet1"].node);
    geo1_nodes["CADGroup3"].node.setInput(1, geo1_nodes["boxLines2"].node);
    geo1_nodes["CADGroup4"].node.setInput(0, geo1_nodes["CADFillet2"].node);
    geo1_nodes["CADGroup4"].node.setInput(1, geo1_nodes["boxLines3"].node);
    geo1_nodes["CADGroup5"].node.setInput(0, geo1_nodes["CADFillet3"].node);
    geo1_nodes["CADGroup5"].node.setInput(1, geo1_nodes["boxLines4"].node);
    geo1_nodes["CADMirror1"].node.setInput(0, geo1_nodes["transform1"].node);
    geo1_nodes["CADTriangulate2"].node.setInput(0, geo1_nodes["CADBoolean2"].node);
    geo1_nodes["copy1"].node.setInput(0, geo1_nodes["CADTube1"].node);
    geo1_nodes["copy2"].node.setInput(0, geo1_nodes["CADTube2"].node);
    geo1_nodes["copy2"].node.setInput(1, geo1_nodes["transform3"].node);
    geo1_nodes["material1"].node.setInput(0, geo1_nodes["merge7"].node);
    geo1_nodes["merge1"].node.setInput(0, geo1_nodes["CADFillet1"].node);
    geo1_nodes["merge1"].node.setInput(1, geo1_nodes["boxLines1"].node);
    geo1_nodes["merge2"].node.setInput(0, geo1_nodes["CADFillet2"].node);
    geo1_nodes["merge2"].node.setInput(1, geo1_nodes["boxLines2"].node);
    geo1_nodes["merge3"].node.setInput(0, geo1_nodes["CADFillet3"].node);
    geo1_nodes["merge3"].node.setInput(1, geo1_nodes["boxLines3"].node);
    geo1_nodes["merge4"].node.setInput(0, geo1_nodes["CADFillet4"].node);
    geo1_nodes["merge4"].node.setInput(1, geo1_nodes["boxLines4"].node);
    geo1_nodes["merge5"].node.setInput(0, geo1_nodes["transform1"].node);
    geo1_nodes["merge5"].node.setInput(1, geo1_nodes["CADMirror1"].node);
    geo1_nodes["merge7"].node.setInput(0, geo1_nodes["CADTriangulate2"].node);
    geo1_nodes["transform1"].node.setInput(0, geo1_nodes["copy1"].node);
    geo1_nodes["transform2"].node.setInput(0, geo1_nodes["hexagons1"].node);
    geo1_nodes["transform3"].node.setInput(0, geo1_nodes["transform2"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([]);
    }
    geo1.uiData.setPosition(-50, -350);
    geo1.flags.display.set(true);
    geo1.p.CADLinearTolerance.options.setOption("editable", void 0);
    geo1.p.CADAngularTolerance.options.setOption("editable", void 0);
    geo1.p.CADCurveAbscissa.options.setOption("editable", void 0);
    geo1.p.CADCurveTolerance.options.setOption("editable", void 0);
    geo1.p.CADDisplayEdges.options.setOption("editable", void 0);
    geo1.p.CADEdgesColor.options.setOption("editable", void 0);
    geo1.p.CADDisplayMeshes.options.setOption("editable", void 0);
    geo1.p.CADMeshesColor.options.setOption("editable", void 0);
    geo1.p.CADWireframe.options.setOption("editable", void 0);
    geo1.p.CSGFacetAngle.options.setOption("editable", void 0);
    geo1.p.CSGLinesColor.options.setOption("editable", void 0);
    geo1.p.CSGMeshesColor.options.setOption("editable", void 0);
    geo1.p.CSGWireframe.options.setOption("editable", void 0);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_ground(parentNode) {
    var ground = parentNode.createNode("geo");
    ground.setName("ground");
    const ground_nodes = {};
    function create_MAT(ground2) {
      var MAT = ground2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandardBuilder1(MAT2) {
        var meshStandardBuilder1 = MAT2.createNode("meshStandardBuilder");
        meshStandardBuilder1.setName("meshStandardBuilder1");
        const meshStandardBuilder1_nodes = {};
        function create_checkers1(meshStandardBuilder12) {
          var checkers1 = meshStandardBuilder12.createNode("checkers");
          checkers1.setName("checkers1");
          const checkers1_nodes = {};
          checkers1.uiData.setPosition(50, 200);
          checkers1.params.postCreateSpareParams();
          checkers1.params.runOnSceneLoadHooks();
          return { node: checkers1, children: checkers1_nodes };
        }
        function create_constant1(meshStandardBuilder12) {
          var constant1 = meshStandardBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(50, -150);
          constant1.p.type.set(4);
          constant1.p.color.set([0.24313725490196078, 0.5098039215686274, 0.8549019607843137]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(meshStandardBuilder12) {
          var constant2 = meshStandardBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(0, 0);
          constant2.p.type.set(4);
          constant2.p.color.set([0.047058823529411764, 0.10196078431372549, 0.17647058823529413]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_floatToVec2_1(meshStandardBuilder12) {
          var floatToVec2_1 = meshStandardBuilder12.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-100, 200);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(meshStandardBuilder12) {
          var globals1 = meshStandardBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-450, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_mix1(meshStandardBuilder12) {
          var mix1 = meshStandardBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(250, 0);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(meshStandardBuilder12) {
          var output1 = meshStandardBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(400, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_vec3ToFloat1(meshStandardBuilder12) {
          var vec3ToFloat1 = meshStandardBuilder12.createNode("vec3ToFloat");
          vec3ToFloat1.setName("vec3ToFloat1");
          const vec3ToFloat1_nodes = {};
          vec3ToFloat1.uiData.setPosition(-200, 200);
          vec3ToFloat1.params.postCreateSpareParams();
          vec3ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec3ToFloat1, children: vec3ToFloat1_nodes };
        }
        meshStandardBuilder1_nodes["checkers1"] = create_checkers1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant1"] = create_constant1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant2"] = create_constant2(meshStandardBuilder1);
        meshStandardBuilder1_nodes["floatToVec2_1"] = create_floatToVec2_1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["globals1"] = create_globals1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["mix1"] = create_mix1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["output1"] = create_output1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["vec3ToFloat1"] = create_vec3ToFloat1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["checkers1"].node.setInput(
          "uv",
          meshStandardBuilder1_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshStandardBuilder1_nodes["vec3ToFloat1"].node,
          "x"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "y",
          meshStandardBuilder1_nodes["vec3ToFloat1"].node,
          "z"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value0",
          meshStandardBuilder1_nodes["constant1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value1",
          meshStandardBuilder1_nodes["constant2"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "blend",
          meshStandardBuilder1_nodes["checkers1"].node,
          "checker"
        );
        meshStandardBuilder1_nodes["output1"].node.setInput(
          "color",
          meshStandardBuilder1_nodes["mix1"].node,
          "mix"
        );
        meshStandardBuilder1_nodes["vec3ToFloat1"].node.setInput(
          "vec",
          meshStandardBuilder1_nodes["globals1"].node,
          "position"
        );
        if (meshStandardBuilder1.childrenController) {
          meshStandardBuilder1.childrenController.selection.set([]);
        }
        meshStandardBuilder1.uiData.setPosition(0, 200);
        meshStandardBuilder1.params.postCreateSpareParams();
        meshStandardBuilder1.params.runOnSceneLoadHooks();
        return { node: meshStandardBuilder1, children: meshStandardBuilder1_nodes };
      }
      MAT_nodes["meshStandardBuilder1"] = create_meshStandardBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-200, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_box1(ground2) {
      var box1 = ground2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(0, 100);
      box1.p.sizes.set([9.98, 1, 9.98]);
      box1.p.center.set([0, -0.5, 0]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_material1(ground2) {
      var material1 = ground2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 300);
      material1.p.material.set("../MAT/meshStandardBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_transform1(ground2) {
      var transform1 = ground2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(0, 450);
      transform1.flags.display.set(true);
      transform1.p.t.set([0, -0.5223866248565079, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    ground_nodes["MAT"] = create_MAT(ground);
    ground_nodes["box1"] = create_box1(ground);
    ground_nodes["material1"] = create_material1(ground);
    ground_nodes["transform1"] = create_transform1(ground);
    ground_nodes["material1"].node.setInput(0, ground_nodes["box1"].node);
    ground_nodes["transform1"].node.setInput(0, ground_nodes["material1"].node);
    if (ground.childrenController) {
      ground.childrenController.selection.set([]);
    }
    ground.uiData.setPosition(-50, -450);
    ground.flags.display.set(true);
    ground.p.CADLinearTolerance.options.setOption("editable", void 0);
    ground.p.CADAngularTolerance.options.setOption("editable", void 0);
    ground.p.CADCurveAbscissa.options.setOption("editable", void 0);
    ground.p.CADCurveTolerance.options.setOption("editable", void 0);
    ground.p.CADDisplayEdges.options.setOption("editable", void 0);
    ground.p.CADEdgesColor.options.setOption("editable", void 0);
    ground.p.CADDisplayMeshes.options.setOption("editable", void 0);
    ground.p.CADMeshesColor.options.setOption("editable", void 0);
    ground.p.CADWireframe.options.setOption("editable", void 0);
    ground.p.CSGFacetAngle.options.setOption("editable", void 0);
    ground.p.CSGLinesColor.options.setOption("editable", void 0);
    ground.p.CSGMeshesColor.options.setOption("editable", void 0);
    ground.p.CSGWireframe.options.setOption("editable", void 0);
    ground.params.postCreateSpareParams();
    ground.params.runOnSceneLoadHooks();
    return { node: ground, children: ground_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 250);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_image1(COP2) {
      var image1 = COP2.createNode("image");
      image1.setName("image1");
      const image1_nodes = {};
      image1.uiData.setPosition(-200, 100);
      image1.params.postCreateSpareParams();
      image1.params.runOnSceneLoadHooks();
      return { node: image1, children: image1_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.tminFilter.set(true);
      imageEnv.p.tmagFilter.set(true);
      imageEnv.p.tanisotropy.set(true);
      imageEnv.p.useRendererMaxAnisotropy.set(true);
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["image1"] = create_image1(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([COP_nodes["image1"].node]);
    }
    COP.uiData.setPosition(-300, -50);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_areaLight1(lights2) {
      var areaLight1 = lights2.createNode("areaLight");
      areaLight1.setName("areaLight1");
      const areaLight1_nodes = {};
      areaLight1.uiData.setPosition(500, -150);
      areaLight1.p.width.set(3.1);
      areaLight1.p.showHelper.set(true);
      areaLight1.params.postCreateSpareParams();
      areaLight1.params.runOnSceneLoadHooks();
      return { node: areaLight1, children: areaLight1_nodes };
    }
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(50, -50);
      hemisphereLight1.p.intensity.set(0.4);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(100, 300);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_merge2(lights2) {
      var merge2 = lights2.createNode("merge");
      merge2.setName("merge2");
      const merge2_nodes = {};
      merge2.uiData.setPosition(450, 50);
      merge2.params.postCreateSpareParams();
      merge2.params.runOnSceneLoadHooks();
      return { node: merge2, children: merge2_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(300, 150);
      polarTransform1.p.center.set([0, 0.7, 0]);
      polarTransform1.p.longitude.set(57.6);
      polarTransform1.p.latitude.set(25.2);
      polarTransform1.p.depth.set(3);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_spotLight1(lights2) {
      var spotLight1 = lights2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(300, -150);
      spotLight1.p.decay.set(0.1);
      spotLight1.p.distance.set(10);
      spotLight1.p.castShadow.set(true);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    lights_nodes["areaLight1"] = create_areaLight1(lights);
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["merge2"] = create_merge2(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["spotLight1"] = create_spotLight1(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["merge2"].node.setInput(0, lights_nodes["spotLight1"].node);
    lights_nodes["merge2"].node.setInput(1, lights_nodes["areaLight1"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["merge2"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([lights_nodes["hemisphereLight1"].node]);
    }
    lights.uiData.setPosition(-50, -250);
    lights.flags.display.set(true);
    lights.p.CADLinearTolerance.options.setOption("editable", void 0);
    lights.p.CADAngularTolerance.options.setOption("editable", void 0);
    lights.p.CADCurveAbscissa.options.setOption("editable", void 0);
    lights.p.CADCurveTolerance.options.setOption("editable", void 0);
    lights.p.CADDisplayEdges.options.setOption("editable", void 0);
    lights.p.CADEdgesColor.options.setOption("editable", void 0);
    lights.p.CADDisplayMeshes.options.setOption("editable", void 0);
    lights.p.CADMeshesColor.options.setOption("editable", void 0);
    lights.p.CADWireframe.options.setOption("editable", void 0);
    lights.p.CSGFacetAngle.options.setOption("editable", void 0);
    lights.p.CSGLinesColor.options.setOption("editable", void 0);
    lights.p.CSGMeshesColor.options.setOption("editable", void 0);
    lights.p.CSGWireframe.options.setOption("editable", void 0);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-0.033729112885250476, -0.15263026086378756, -0.25133426077852167]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(0, 150);
      cameraControls1.flags.display.set(true);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_perspectiveCamera1(cameras2) {
      var perspectiveCamera1 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera1.setName("perspectiveCamera1");
      const perspectiveCamera1_nodes = {};
      perspectiveCamera1.uiData.setPosition(0, -50);
      perspectiveCamera1.p.position.set([-2.903280553615174, 3.184165467928829, 2.6198387007544865]);
      perspectiveCamera1.p.rotation.set([-49.28938383283398, -33.09914389450772, -32.401239870671716]);
      perspectiveCamera1.params.postCreateSpareParams();
      perspectiveCamera1.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["perspectiveCamera1"] = create_perspectiveCamera1(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(-50, -150);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["ground"] = create_ground(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera1",
    focusedNodes: Object.values(scene_root_nodes["geo1"].children).map((n) => n.node).filter((n) => n.name() == "material1"),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_CAD_fillet_ts.3b725bb115148994d552.js.map