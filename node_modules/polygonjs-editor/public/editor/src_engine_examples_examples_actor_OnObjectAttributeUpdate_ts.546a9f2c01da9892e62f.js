(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_actor_OnObjectAttributeUpdate_ts"],{

/***/ 23939:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(91568);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    if (grid.childrenController) {
      grid.childrenController.selection.set([]);
    }
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_environment(parentNode) {
    var environment = parentNode.createNode("geo");
    environment.setName("environment");
    const environment_nodes = {};
    function create_attribDelete1(environment2) {
      var attribDelete1 = environment2.createNode("attribDelete");
      attribDelete1.setName("attribDelete1");
      const attribDelete1_nodes = {};
      attribDelete1.uiData.setPosition(150, 350);
      attribDelete1.p.name.set("N");
      attribDelete1.params.postCreateSpareParams();
      attribDelete1.params.runOnSceneLoadHooks();
      return { node: attribDelete1, children: attribDelete1_nodes };
    }
    function create_box1(environment2) {
      var box1 = environment2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(300, 600);
      box1.p.sizes.set([27, 1, 17]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_box2(environment2) {
      var box2 = environment2.createNode("box");
      box2.setName("box2");
      const box2_nodes = {};
      box2.uiData.setPosition(-150, 300);
      box2.p.size.set(0.9);
      box2.params.postCreateSpareParams();
      box2.params.runOnSceneLoadHooks();
      return { node: box2, children: box2_nodes };
    }
    function create_copy1(environment2) {
      var copy1 = environment2.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setPosition(-50, 600);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_fuse1(environment2) {
      var fuse1 = environment2.createNode("fuse");
      fuse1.setName("fuse1");
      const fuse1_nodes = {};
      fuse1.uiData.setPosition(150, 200);
      fuse1.params.postCreateSpareParams();
      fuse1.params.runOnSceneLoadHooks();
      return { node: fuse1, children: fuse1_nodes };
    }
    function create_hemisphereLight1(environment2) {
      var hemisphereLight1 = environment2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(550, 550);
      hemisphereLight1.p.intensity.set(0.18);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_jitter1(environment2) {
      var jitter1 = environment2.createNode("jitter");
      jitter1.setName("jitter1");
      const jitter1_nodes = {};
      jitter1.uiData.setPosition(150, 0);
      jitter1.params.postCreateSpareParams();
      jitter1.params.runOnSceneLoadHooks();
      return { node: jitter1, children: jitter1_nodes };
    }
    function create_merge1(environment2) {
      var merge1 = environment2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(100, 950);
      merge1.p.compact.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_merge2(environment2) {
      var merge2 = environment2.createNode("merge");
      merge2.setName("merge2");
      const merge2_nodes = {};
      merge2.uiData.setPosition(600, 850);
      merge2.params.postCreateSpareParams();
      merge2.params.runOnSceneLoadHooks();
      return { node: merge2, children: merge2_nodes };
    }
    function create_merge3(environment2) {
      var merge3 = environment2.createNode("merge");
      merge3.setName("merge3");
      const merge3_nodes = {};
      merge3.uiData.setPosition(300, 1150);
      merge3.flags.display.set(true);
      merge3.params.postCreateSpareParams();
      merge3.params.runOnSceneLoadHooks();
      return { node: merge3, children: merge3_nodes };
    }
    function create_plane1(environment2) {
      var plane1 = environment2.createNode("plane");
      plane1.setName("plane1");
      const plane1_nodes = {};
      plane1.uiData.setPosition(150, -400);
      plane1.p.size.set([9, 9]);
      plane1.p.useSegmentsCount.set(true);
      plane1.params.postCreateSpareParams();
      plane1.params.runOnSceneLoadHooks();
      return { node: plane1, children: plane1_nodes };
    }
    function create_point1(environment2) {
      var point1 = environment2.createNode("point");
      point1.setName("point1");
      const point1_nodes = {};
      point1.uiData.setPosition(150, 100);
      point1.p.updateX.set(true);
      point1.p.x.set("round(@P.x)");
      point1.p.updateY.set(true);
      point1.p.y.set("round(@P.y)");
      point1.p.updateZ.set(true);
      point1.p.z.set("round(@P.z)");
      point1.params.postCreateSpareParams();
      point1.params.runOnSceneLoadHooks();
      return { node: point1, children: point1_nodes };
    }
    function create_polarTransform1(environment2) {
      var polarTransform1 = environment2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(800, 700);
      polarTransform1.p.longitude.set(115.2);
      polarTransform1.p.latitude.set(32.4);
      polarTransform1.p.depth.set(10.6);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_scatter1(environment2) {
      var scatter1 = environment2.createNode("scatter");
      scatter1.setName("scatter1");
      const scatter1_nodes = {};
      scatter1.uiData.setPosition(150, -150);
      scatter1.p.pointsCount.set(69);
      scatter1.params.postCreateSpareParams();
      scatter1.params.runOnSceneLoadHooks();
      return { node: scatter1, children: scatter1_nodes };
    }
    function create_spotLight1(environment2) {
      var spotLight1 = environment2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(800, 550);
      spotLight1.p.angle.set(59.4);
      spotLight1.p.intensity.set(10);
      spotLight1.p.decay.set(1.5);
      spotLight1.p.penumbra.set(0.33);
      spotLight1.p.castShadow.set(true);
      spotLight1.p.shadowBias.set(0);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    function create_transform1(environment2) {
      var transform1 = environment2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(150, -250);
      transform1.p.t.set([0, 2.1448255697777263, 0]);
      transform1.p.r.set([5.686624845899085, 0, -4.762641819539954]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    environment_nodes["attribDelete1"] = create_attribDelete1(environment);
    environment_nodes["box1"] = create_box1(environment);
    environment_nodes["box2"] = create_box2(environment);
    environment_nodes["copy1"] = create_copy1(environment);
    environment_nodes["fuse1"] = create_fuse1(environment);
    environment_nodes["hemisphereLight1"] = create_hemisphereLight1(environment);
    environment_nodes["jitter1"] = create_jitter1(environment);
    environment_nodes["merge1"] = create_merge1(environment);
    environment_nodes["merge2"] = create_merge2(environment);
    environment_nodes["merge3"] = create_merge3(environment);
    environment_nodes["plane1"] = create_plane1(environment);
    environment_nodes["point1"] = create_point1(environment);
    environment_nodes["polarTransform1"] = create_polarTransform1(environment);
    environment_nodes["scatter1"] = create_scatter1(environment);
    environment_nodes["spotLight1"] = create_spotLight1(environment);
    environment_nodes["transform1"] = create_transform1(environment);
    environment_nodes["attribDelete1"].node.setInput(0, environment_nodes["fuse1"].node);
    environment_nodes["copy1"].node.setInput(0, environment_nodes["box2"].node);
    environment_nodes["copy1"].node.setInput(1, environment_nodes["attribDelete1"].node);
    environment_nodes["fuse1"].node.setInput(0, environment_nodes["point1"].node);
    environment_nodes["jitter1"].node.setInput(0, environment_nodes["scatter1"].node);
    environment_nodes["merge1"].node.setInput(0, environment_nodes["copy1"].node);
    environment_nodes["merge1"].node.setInput(1, environment_nodes["box1"].node);
    environment_nodes["merge2"].node.setInput(0, environment_nodes["hemisphereLight1"].node);
    environment_nodes["merge2"].node.setInput(1, environment_nodes["polarTransform1"].node);
    environment_nodes["merge3"].node.setInput(0, environment_nodes["merge1"].node);
    environment_nodes["merge3"].node.setInput(1, environment_nodes["merge2"].node);
    environment_nodes["point1"].node.setInput(0, environment_nodes["jitter1"].node);
    environment_nodes["polarTransform1"].node.setInput(0, environment_nodes["spotLight1"].node);
    environment_nodes["scatter1"].node.setInput(0, environment_nodes["transform1"].node);
    environment_nodes["transform1"].node.setInput(0, environment_nodes["plane1"].node);
    if (environment.childrenController) {
      environment.childrenController.selection.set([environment_nodes["spotLight1"].node]);
    }
    environment.uiData.setPosition(-50, -150);
    environment.flags.display.set(true);
    environment.params.postCreateSpareParams();
    environment.params.runOnSceneLoadHooks();
    return { node: environment, children: environment_nodes };
  }
  function create_objects(parentNode) {
    var objects = parentNode.createNode("geo");
    objects.setName("objects");
    const objects_nodes = {};
    function create_BVH1(objects2) {
      var BVH1 = objects2.createNode("BVH");
      BVH1.setName("BVH1");
      const BVH1_nodes = {};
      BVH1.uiData.setPosition(-500, 700);
      BVH1.params.postCreateSpareParams();
      BVH1.params.runOnSceneLoadHooks();
      return { node: BVH1, children: BVH1_nodes };
    }
    function create_actor_appliedToIndividualObjects(objects2) {
      var actor_appliedToIndividualObjects = objects2.createNode("actor");
      actor_appliedToIndividualObjects.setName("actor_appliedToIndividualObjects");
      const actor_appliedToIndividualObjects_nodes = {};
      function create_getObject1(actor_appliedToIndividualObjects2) {
        var getObject1 = actor_appliedToIndividualObjects2.createNode("getObject");
        getObject1.setName("getObject1");
        const getObject1_nodes = {};
        getObject1.uiData.setPosition(-50, 550);
        getObject1.p.getCurrentObject.set(false);
        getObject1.p.mask.set("*perspectiveCamera_MAIN");
        getObject1.params.postCreateSpareParams();
        getObject1.params.runOnSceneLoadHooks();
        return { node: getObject1, children: getObject1_nodes };
      }
      function create_getObjectProperty1(actor_appliedToIndividualObjects2) {
        var getObjectProperty1 = actor_appliedToIndividualObjects2.createNode("getObjectProperty");
        getObjectProperty1.setName("getObjectProperty1");
        const getObjectProperty1_nodes = {};
        getObjectProperty1.uiData.setPosition(100, 700);
        getObjectProperty1.params.postCreateSpareParams();
        getObjectProperty1.params.runOnSceneLoadHooks();
        return { node: getObjectProperty1, children: getObjectProperty1_nodes };
      }
      function create_onObjectClick1(actor_appliedToIndividualObjects2) {
        var onObjectClick1 = actor_appliedToIndividualObjects2.createNode("onObjectClick");
        onObjectClick1.setName("onObjectClick1");
        const onObjectClick1_nodes = {};
        onObjectClick1.uiData.setComment(
          "this sends a trigger when an object is clicked. The trigger is then received by [setObjectAttribute1](../setObjectAttribute1), which, unlike [setObjectAttribute2](../setObjectAttribute2), will not set an attribute on the current object, but instead on the camera. This happens because we override the `Object3D` input, with the node [getObject1](../getObject1), which fetches the camera by its name, using a mask `*perspectiveCamera_MAIN`"
        );
        onObjectClick1.uiData.setPosition(-50, 50);
        onObjectClick1.params.postCreateSpareParams();
        onObjectClick1.params.runOnSceneLoadHooks();
        return { node: onObjectClick1, children: onObjectClick1_nodes };
      }
      function create_onObjectHover1(actor_appliedToIndividualObjects2) {
        var onObjectHover1 = actor_appliedToIndividualObjects2.createNode("onObjectHover");
        onObjectHover1.setName("onObjectHover1");
        const onObjectHover1_nodes = {};
        onObjectHover1.uiData.setComment(
          "this node sends a trigger whenever an object is hovered, or when the cursor does not hover it anymore. When that trigger is sent, it is received by [setObjectAttribute2](../setObjectAttribute2), which then sets the `hovered` attribute accordingly. This is then used by [actor_objectsParent](../../actor_objectsParent)"
        );
        onObjectHover1.uiData.setPosition(-50, -350);
        onObjectHover1.params.postCreateSpareParams();
        onObjectHover1.params.runOnSceneLoadHooks();
        return { node: onObjectHover1, children: onObjectHover1_nodes };
      }
      function create_setObjectAttribute1(actor_appliedToIndividualObjects2) {
        var setObjectAttribute1 = actor_appliedToIndividualObjects2.createNode("setObjectAttribute");
        setObjectAttribute1.setName("setObjectAttribute1");
        const setObjectAttribute1_nodes = {};
        setObjectAttribute1.uiData.setComment(
          "as this node sets the `lookAtTarget` attribute on the camera, it needs a way to know what value it should set it to.\n\nIt takes that value from its `value` input, which comes from the node [getObjectProperty1](../getObjectProperty1), which returns the value of t he clicked object."
        );
        setObjectAttribute1.uiData.setPosition(550, 150);
        setObjectAttribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "lookAtTarget", {
          spare: true,
          editable: true
        });
        setObjectAttribute1.p.type.set(6);
        setObjectAttribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setObjectAttribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "val", [0, 0, 0], { spare: true, editable: false });
        setObjectAttribute1.params.postCreateSpareParams();
        setObjectAttribute1.params.runOnSceneLoadHooks();
        return { node: setObjectAttribute1, children: setObjectAttribute1_nodes };
      }
      function create_setObjectAttribute2(actor_appliedToIndividualObjects2) {
        var setObjectAttribute2 = actor_appliedToIndividualObjects2.createNode("setObjectAttribute");
        setObjectAttribute2.setName("setObjectAttribute2");
        const setObjectAttribute2_nodes = {};
        setObjectAttribute2.uiData.setPosition(350, -350);
        setObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "hovered", { spare: true, editable: true });
        setObjectAttribute2.p.type.set(0);
        setObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.BOOLEAN */ ._.BOOLEAN, "val", false, { spare: true, editable: false });
        setObjectAttribute2.params.postCreateSpareParams();
        setObjectAttribute2.params.runOnSceneLoadHooks();
        return { node: setObjectAttribute2, children: setObjectAttribute2_nodes };
      }
      function create_setObjectAttribute4(actor_appliedToIndividualObjects2) {
        var setObjectAttribute4 = actor_appliedToIndividualObjects2.createNode("setObjectAttribute");
        setObjectAttribute4.setName("setObjectAttribute4");
        const setObjectAttribute4_nodes = {};
        setObjectAttribute4.uiData.setPosition(900, 150);
        setObjectAttribute4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "focused", { spare: true, editable: true });
        setObjectAttribute4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setObjectAttribute4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: true });
        setObjectAttribute4.params.get("val").set(1);
        setObjectAttribute4.params.postCreateSpareParams();
        setObjectAttribute4.params.runOnSceneLoadHooks();
        return { node: setObjectAttribute4, children: setObjectAttribute4_nodes };
      }
      actor_appliedToIndividualObjects_nodes["getObject1"] = create_getObject1(actor_appliedToIndividualObjects);
      actor_appliedToIndividualObjects_nodes["getObjectProperty1"] = create_getObjectProperty1(
        actor_appliedToIndividualObjects
      );
      actor_appliedToIndividualObjects_nodes["onObjectClick1"] = create_onObjectClick1(
        actor_appliedToIndividualObjects
      );
      actor_appliedToIndividualObjects_nodes["onObjectHover1"] = create_onObjectHover1(
        actor_appliedToIndividualObjects
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute1"] = create_setObjectAttribute1(
        actor_appliedToIndividualObjects
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute2"] = create_setObjectAttribute2(
        actor_appliedToIndividualObjects
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute4"] = create_setObjectAttribute4(
        actor_appliedToIndividualObjects
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute1"].node.setInput(
        "trigger",
        actor_appliedToIndividualObjects_nodes["onObjectClick1"].node,
        "trigger"
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute1"].node.setInput(
        "Object3D",
        actor_appliedToIndividualObjects_nodes["getObject1"].node,
        "Object3D"
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute1"].node.setInput(
        "val",
        actor_appliedToIndividualObjects_nodes["getObjectProperty1"].node,
        "position"
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute2"].node.setInput(
        "trigger",
        actor_appliedToIndividualObjects_nodes["onObjectHover1"].node,
        "trigger"
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute2"].node.setInput(
        "val",
        actor_appliedToIndividualObjects_nodes["onObjectHover1"].node,
        "hovered"
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute4"].node.setInput(
        "trigger",
        actor_appliedToIndividualObjects_nodes["setObjectAttribute1"].node,
        "trigger"
      );
      actor_appliedToIndividualObjects_nodes["setObjectAttribute4"].node.setInput(
        "Object3D",
        actor_appliedToIndividualObjects_nodes["getObject1"].node,
        "Object3D"
      );
      if (actor_appliedToIndividualObjects.childrenController) {
        actor_appliedToIndividualObjects.childrenController.selection.set([]);
      }
      actor_appliedToIndividualObjects.uiData.setPosition(-500, 850);
      actor_appliedToIndividualObjects.params.postCreateSpareParams();
      actor_appliedToIndividualObjects.params.runOnSceneLoadHooks();
      return { node: actor_appliedToIndividualObjects, children: actor_appliedToIndividualObjects_nodes };
    }
    function create_actor_objectsParent(objects2) {
      var actor_objectsParent = objects2.createNode("actor");
      actor_objectsParent.setName("actor_objectsParent");
      const actor_objectsParent_nodes = {};
      function create_onChildAttributeUpdate1(actor_objectsParent2) {
        var onChildAttributeUpdate1 = actor_objectsParent2.createNode("onChildAttributeUpdate");
        onChildAttributeUpdate1.setName("onChildAttributeUpdate1");
        const onChildAttributeUpdate1_nodes = {};
        onChildAttributeUpdate1.uiData.setComment(
          "this sends a trigger whenever one of its children `hovered` attribute changes.\n\nThis is then received by the [setViewer1](../setViewer1) node, which gets the value from the [or1](../or1) node, which returns `true` if any of its inputs is `true`, or `false` if none is. And its input is an array of the `hovered` attributes of its children."
        );
        onChildAttributeUpdate1.uiData.setPosition(-150, 0);
        onChildAttributeUpdate1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "hovered", {
          spare: true,
          editable: true
        });
        onChildAttributeUpdate1.p.type.set(0);
        onChildAttributeUpdate1.params.postCreateSpareParams();
        onChildAttributeUpdate1.params.runOnSceneLoadHooks();
        return { node: onChildAttributeUpdate1, children: onChildAttributeUpdate1_nodes };
      }
      function create_or1(actor_objectsParent2) {
        var or1 = actor_objectsParent2.createNode("or");
        or1.setName("or1");
        const or1_nodes = {};
        or1.uiData.setPosition(200, 150);
        or1.params.postCreateSpareParams();
        or1.params.runOnSceneLoadHooks();
        return { node: or1, children: or1_nodes };
      }
      function create_setViewer1(actor_objectsParent2) {
        var setViewer1 = actor_objectsParent2.createNode("setViewer");
        setViewer1.setName("setViewer1");
        const setViewer1_nodes = {};
        setViewer1.uiData.setPosition(400, 0);
        setViewer1.params.postCreateSpareParams();
        setViewer1.params.runOnSceneLoadHooks();
        return { node: setViewer1, children: setViewer1_nodes };
      }
      actor_objectsParent_nodes["onChildAttributeUpdate1"] = create_onChildAttributeUpdate1(actor_objectsParent);
      actor_objectsParent_nodes["or1"] = create_or1(actor_objectsParent);
      actor_objectsParent_nodes["setViewer1"] = create_setViewer1(actor_objectsParent);
      actor_objectsParent_nodes["or1"].node.setInput(
        "boolean0",
        actor_objectsParent_nodes["onChildAttributeUpdate1"].node,
        "newValues"
      );
      actor_objectsParent_nodes["setViewer1"].node.setInput(
        "trigger",
        actor_objectsParent_nodes["onChildAttributeUpdate1"].node,
        "trigger"
      );
      actor_objectsParent_nodes["setViewer1"].node.setInput("set", actor_objectsParent_nodes["or1"].node, "or");
      if (actor_objectsParent.childrenController) {
        actor_objectsParent.childrenController.selection.set([]);
      }
      actor_objectsParent.uiData.setPosition(-500, 1200);
      actor_objectsParent.flags.display.set(true);
      actor_objectsParent.params.postCreateSpareParams();
      actor_objectsParent.params.runOnSceneLoadHooks();
      return { node: actor_objectsParent, children: actor_objectsParent_nodes };
    }
    function create_capsule1(objects2) {
      var capsule1 = objects2.createNode("capsule");
      capsule1.setName("capsule1");
      const capsule1_nodes = {};
      capsule1.uiData.setPosition(-950, 0);
      capsule1.params.postCreateSpareParams();
      capsule1.params.runOnSceneLoadHooks();
      return { node: capsule1, children: capsule1_nodes };
    }
    function create_cone1(objects2) {
      var cone1 = objects2.createNode("cone");
      cone1.setName("cone1");
      const cone1_nodes = {};
      cone1.uiData.setPosition(-700, 0);
      cone1.p.radius.set(0.81);
      cone1.p.segmentsRadial.set(26);
      cone1.p.direction.set([0, 1, 0]);
      cone1.params.postCreateSpareParams();
      cone1.params.runOnSceneLoadHooks();
      return { node: cone1, children: cone1_nodes };
    }
    function create_hierarchy1(objects2) {
      var hierarchy1 = objects2.createNode("hierarchy");
      hierarchy1.setName("hierarchy1");
      const hierarchy1_nodes = {};
      hierarchy1.uiData.setPosition(-500, 1050);
      hierarchy1.params.postCreateSpareParams();
      hierarchy1.params.runOnSceneLoadHooks();
      return { node: hierarchy1, children: hierarchy1_nodes };
    }
    function create_merge1(objects2) {
      var merge1 = objects2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-500, 300);
      merge1.p.inputsCount.set(6);
      merge1.io.inputs.setCount(1, 6);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_objectProperties1(objects2) {
      var objectProperties1 = objects2.createNode("objectProperties");
      objectProperties1.setName("objectProperties1");
      const objectProperties1_nodes = {};
      objectProperties1.uiData.setPosition(-500, 400);
      objectProperties1.p.tcastShadow.set(true);
      objectProperties1.params.postCreateSpareParams();
      objectProperties1.params.runOnSceneLoadHooks();
      return { node: objectProperties1, children: objectProperties1_nodes };
    }
    function create_roundedBox1(objects2) {
      var roundedBox1 = objects2.createNode("roundedBox");
      roundedBox1.setName("roundedBox1");
      const roundedBox1_nodes = {};
      roundedBox1.uiData.setPosition(-1200, 0);
      roundedBox1.params.postCreateSpareParams();
      roundedBox1.params.runOnSceneLoadHooks();
      return { node: roundedBox1, children: roundedBox1_nodes };
    }
    function create_sphere1(objects2) {
      var sphere1 = objects2.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(-450, 0);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    function create_subnet1(objects2) {
      var subnet1 = objects2.createNode("subnet");
      subnet1.setName("subnet1");
      const subnet1_nodes = {};
      function create_boolean1(subnet12) {
        var boolean1 = subnet12.createNode("boolean");
        boolean1.setName("boolean1");
        const boolean1_nodes = {};
        boolean1.uiData.setPosition(-100, -50);
        boolean1.p.operation.set(1);
        boolean1.params.postCreateSpareParams();
        boolean1.params.runOnSceneLoadHooks();
        return { node: boolean1, children: boolean1_nodes };
      }
      function create_box1(subnet12) {
        var box1 = subnet12.createNode("box");
        box1.setName("box1");
        const box1_nodes = {};
        box1.uiData.setPosition(-200, -250);
        box1.params.postCreateSpareParams();
        box1.params.runOnSceneLoadHooks();
        return { node: box1, children: box1_nodes };
      }
      function create_sphere12(subnet12) {
        var sphere1 = subnet12.createNode("sphere");
        sphere1.setName("sphere1");
        const sphere1_nodes = {};
        sphere1.uiData.setPosition(0, -250);
        sphere1.flags.display.set(true);
        sphere1.p.radius.set(0.63);
        sphere1.params.postCreateSpareParams();
        sphere1.params.runOnSceneLoadHooks();
        return { node: sphere1, children: sphere1_nodes };
      }
      function create_subnetOutput1(subnet12) {
        var subnetOutput1 = subnet12.createNode("subnetOutput");
        subnetOutput1.setName("subnetOutput1");
        const subnetOutput1_nodes = {};
        subnetOutput1.uiData.setPosition(-100, 100);
        subnetOutput1.params.postCreateSpareParams();
        subnetOutput1.params.runOnSceneLoadHooks();
        return { node: subnetOutput1, children: subnetOutput1_nodes };
      }
      subnet1_nodes["boolean1"] = create_boolean1(subnet1);
      subnet1_nodes["box1"] = create_box1(subnet1);
      subnet1_nodes["sphere1"] = create_sphere12(subnet1);
      subnet1_nodes["subnetOutput1"] = create_subnetOutput1(subnet1);
      subnet1_nodes["boolean1"].node.setInput(0, subnet1_nodes["box1"].node);
      subnet1_nodes["boolean1"].node.setInput(1, subnet1_nodes["sphere1"].node);
      subnet1_nodes["subnetOutput1"].node.setInput(0, subnet1_nodes["boolean1"].node);
      if (subnet1.childrenController) {
        subnet1.childrenController.selection.set([subnet1_nodes["boolean1"].node]);
      }
      subnet1.uiData.setPosition(100, 0);
      subnet1.params.postCreateSpareParams();
      subnet1.params.runOnSceneLoadHooks();
      return { node: subnet1, children: subnet1_nodes };
    }
    function create_subnet_colors(objects2) {
      var subnet_colors = objects2.createNode("subnet");
      subnet_colors.setName("subnet_colors");
      const subnet_colors_nodes = {};
      function create_MAT(subnet_colors2) {
        var MAT = subnet_colors2.createNode("materialsNetwork");
        MAT.setName("MAT");
        const MAT_nodes = {};
        function create_meshStandardBuilder1(MAT2) {
          var meshStandardBuilder1 = MAT2.createNode("meshStandardBuilder");
          meshStandardBuilder1.setName("meshStandardBuilder1");
          const meshStandardBuilder1_nodes = {};
          function create_attribute1(meshStandardBuilder12) {
            var attribute1 = meshStandardBuilder12.createNode("attribute");
            attribute1.setName("attribute1");
            const attribute1_nodes = {};
            attribute1.uiData.setPosition(-400, -200);
            attribute1.p.name.set("idn");
            attribute1.params.postCreateSpareParams();
            attribute1.params.runOnSceneLoadHooks();
            return { node: attribute1, children: attribute1_nodes };
          }
          function create_floatToVec3_1(meshStandardBuilder12) {
            var floatToVec3_1 = meshStandardBuilder12.createNode("floatToVec3");
            floatToVec3_1.setName("floatToVec3_1");
            const floatToVec3_1_nodes = {};
            floatToVec3_1.uiData.setPosition(-150, -200);
            floatToVec3_1.p.y.set(0.68);
            floatToVec3_1.p.z.set(0.71);
            floatToVec3_1.params.postCreateSpareParams();
            floatToVec3_1.params.runOnSceneLoadHooks();
            return { node: floatToVec3_1, children: floatToVec3_1_nodes };
          }
          function create_globals1(meshStandardBuilder12) {
            var globals1 = meshStandardBuilder12.createNode("globals");
            globals1.setName("globals1");
            const globals1_nodes = {};
            globals1.uiData.setPosition(-200, 0);
            globals1.params.postCreateSpareParams();
            globals1.params.runOnSceneLoadHooks();
            return { node: globals1, children: globals1_nodes };
          }
          function create_hsvToRgb1(meshStandardBuilder12) {
            var hsvToRgb1 = meshStandardBuilder12.createNode("hsvToRgb");
            hsvToRgb1.setName("hsvToRgb1");
            const hsvToRgb1_nodes = {};
            hsvToRgb1.uiData.setPosition(-50, -200);
            hsvToRgb1.params.postCreateSpareParams();
            hsvToRgb1.params.runOnSceneLoadHooks();
            return { node: hsvToRgb1, children: hsvToRgb1_nodes };
          }
          function create_multAdd1(meshStandardBuilder12) {
            var multAdd1 = meshStandardBuilder12.createNode("multAdd");
            multAdd1.setName("multAdd1");
            const multAdd1_nodes = {};
            multAdd1.uiData.setPosition(-300, -200);
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
            multAdd1.params.get("mult").set(0.92);
            multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
            multAdd1.params.postCreateSpareParams();
            multAdd1.params.runOnSceneLoadHooks();
            return { node: multAdd1, children: multAdd1_nodes };
          }
          function create_output1(meshStandardBuilder12) {
            var output1 = meshStandardBuilder12.createNode("output");
            output1.setName("output1");
            const output1_nodes = {};
            output1.uiData.setPosition(200, 0);
            output1.params.postCreateSpareParams();
            output1.params.runOnSceneLoadHooks();
            return { node: output1, children: output1_nodes };
          }
          meshStandardBuilder1_nodes["attribute1"] = create_attribute1(meshStandardBuilder1);
          meshStandardBuilder1_nodes["floatToVec3_1"] = create_floatToVec3_1(meshStandardBuilder1);
          meshStandardBuilder1_nodes["globals1"] = create_globals1(meshStandardBuilder1);
          meshStandardBuilder1_nodes["hsvToRgb1"] = create_hsvToRgb1(meshStandardBuilder1);
          meshStandardBuilder1_nodes["multAdd1"] = create_multAdd1(meshStandardBuilder1);
          meshStandardBuilder1_nodes["output1"] = create_output1(meshStandardBuilder1);
          meshStandardBuilder1_nodes["floatToVec3_1"].node.setInput(
            "x",
            meshStandardBuilder1_nodes["multAdd1"].node,
            "val"
          );
          meshStandardBuilder1_nodes["hsvToRgb1"].node.setInput(
            "hsv",
            meshStandardBuilder1_nodes["floatToVec3_1"].node,
            "vec3"
          );
          meshStandardBuilder1_nodes["multAdd1"].node.setInput(
            "value",
            meshStandardBuilder1_nodes["attribute1"].node,
            "val"
          );
          meshStandardBuilder1_nodes["output1"].node.setInput(
            "color",
            meshStandardBuilder1_nodes["hsvToRgb1"].node,
            "rgb"
          );
          if (meshStandardBuilder1.childrenController) {
            meshStandardBuilder1.childrenController.selection.set([
              meshStandardBuilder1_nodes["multAdd1"].node
            ]);
          }
          meshStandardBuilder1.uiData.setPosition(0, 250);
          meshStandardBuilder1.params.postCreateSpareParams();
          meshStandardBuilder1.params.runOnSceneLoadHooks();
          return { node: meshStandardBuilder1, children: meshStandardBuilder1_nodes };
        }
        MAT_nodes["meshStandardBuilder1"] = create_meshStandardBuilder1(MAT);
        if (MAT.childrenController) {
          MAT.childrenController.selection.set([]);
        }
        MAT.uiData.setPosition(-200, 150);
        MAT.params.postCreateSpareParams();
        MAT.params.runOnSceneLoadHooks();
        return { node: MAT, children: MAT_nodes };
      }
      function create_attribId1(subnet_colors2) {
        var attribId1 = subnet_colors2.createNode("attribId");
        attribId1.setName("attribId1");
        const attribId1_nodes = {};
        attribId1.uiData.setPosition(0, -150);
        attribId1.setAttribClass(_polygonjs_polygonjs_src_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.OBJECT */ .io.OBJECT);
        attribId1.p.id.set(false);
        attribId1.params.postCreateSpareParams();
        attribId1.params.runOnSceneLoadHooks();
        return { node: attribId1, children: attribId1_nodes };
      }
      function create_attribPromote1(subnet_colors2) {
        var attribPromote1 = subnet_colors2.createNode("attribPromote");
        attribPromote1.setName("attribPromote1");
        const attribPromote1_nodes = {};
        attribPromote1.uiData.setPosition(0, 0);
        attribPromote1.setAttribClassFrom(_polygonjs_polygonjs_src_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.OBJECT */ .io.OBJECT);
        attribPromote1.setAttribClassTo(_polygonjs_polygonjs_src_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.POINT */ .io.POINT);
        attribPromote1.p.name.set("idn");
        attribPromote1.params.postCreateSpareParams();
        attribPromote1.params.runOnSceneLoadHooks();
        return { node: attribPromote1, children: attribPromote1_nodes };
      }
      function create_material1(subnet_colors2) {
        var material1 = subnet_colors2.createNode("material");
        material1.setName("material1");
        const material1_nodes = {};
        material1.uiData.setPosition(0, 150);
        material1.p.material.set("../MAT/meshStandardBuilder1");
        material1.params.postCreateSpareParams();
        material1.params.runOnSceneLoadHooks();
        return { node: material1, children: material1_nodes };
      }
      function create_subnetInput1(subnet_colors2) {
        var subnetInput1 = subnet_colors2.createNode("subnetInput");
        subnetInput1.setName("subnetInput1");
        const subnetInput1_nodes = {};
        subnetInput1.uiData.setPosition(0, -250);
        subnetInput1.flags.display.set(true);
        subnetInput1.params.postCreateSpareParams();
        subnetInput1.params.runOnSceneLoadHooks();
        return { node: subnetInput1, children: subnetInput1_nodes };
      }
      function create_subnetOutput1(subnet_colors2) {
        var subnetOutput1 = subnet_colors2.createNode("subnetOutput");
        subnetOutput1.setName("subnetOutput1");
        const subnetOutput1_nodes = {};
        subnetOutput1.uiData.setPosition(0, 250);
        subnetOutput1.params.postCreateSpareParams();
        subnetOutput1.params.runOnSceneLoadHooks();
        return { node: subnetOutput1, children: subnetOutput1_nodes };
      }
      subnet_colors_nodes["MAT"] = create_MAT(subnet_colors);
      subnet_colors_nodes["attribId1"] = create_attribId1(subnet_colors);
      subnet_colors_nodes["attribPromote1"] = create_attribPromote1(subnet_colors);
      subnet_colors_nodes["material1"] = create_material1(subnet_colors);
      subnet_colors_nodes["subnetInput1"] = create_subnetInput1(subnet_colors);
      subnet_colors_nodes["subnetOutput1"] = create_subnetOutput1(subnet_colors);
      subnet_colors_nodes["attribId1"].node.setInput(0, subnet_colors_nodes["subnetInput1"].node);
      subnet_colors_nodes["attribPromote1"].node.setInput(0, subnet_colors_nodes["attribId1"].node);
      subnet_colors_nodes["material1"].node.setInput(0, subnet_colors_nodes["attribPromote1"].node);
      subnet_colors_nodes["subnetOutput1"].node.setInput(0, subnet_colors_nodes["material1"].node);
      if (subnet_colors.childrenController) {
        subnet_colors.childrenController.selection.set([]);
      }
      subnet_colors.uiData.setPosition(-500, 550);
      subnet_colors.params.postCreateSpareParams();
      subnet_colors.params.runOnSceneLoadHooks();
      return { node: subnet_colors, children: subnet_colors_nodes };
    }
    function create_torus1(objects2) {
      var torus1 = objects2.createNode("torus");
      torus1.setName("torus1");
      const torus1_nodes = {};
      torus1.uiData.setPosition(-150, 0);
      torus1.p.radius.set(0.27);
      torus1.p.radiusTube.set(0.11);
      torus1.p.direction.set([0, 0, 1]);
      torus1.params.postCreateSpareParams();
      torus1.params.runOnSceneLoadHooks();
      return { node: torus1, children: torus1_nodes };
    }
    function create_transform1(objects2) {
      var transform1 = objects2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(-1200, 100);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([-3.9099003509189485, 4.240886921982162, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_transform2(objects2) {
      var transform2 = objects2.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setPosition(-950, 100);
      transform2.p.applyOn.set(1);
      transform2.p.t.set([-0.9748541410391344, 3.1391173361667635, 2.958713760859885]);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    function create_transform3(objects2) {
      var transform3 = objects2.createNode("transform");
      transform3.setName("transform3");
      const transform3_nodes = {};
      transform3.uiData.setPosition(-700, 100);
      transform3.p.applyOn.set(1);
      transform3.p.t.set([4.581050898493111, 4.240886921982162, 0]);
      transform3.params.postCreateSpareParams();
      transform3.params.runOnSceneLoadHooks();
      return { node: transform3, children: transform3_nodes };
    }
    function create_transform4(objects2) {
      var transform4 = objects2.createNode("transform");
      transform4.setName("transform4");
      const transform4_nodes = {};
      transform4.uiData.setPosition(-450, 100);
      transform4.p.applyOn.set(1);
      transform4.p.t.set([-0.36924297935036243, 4.240886921982162, -2.8668085813199458]);
      transform4.params.postCreateSpareParams();
      transform4.params.runOnSceneLoadHooks();
      return { node: transform4, children: transform4_nodes };
    }
    function create_transform5(objects2) {
      var transform5 = objects2.createNode("transform");
      transform5.setName("transform5");
      const transform5_nodes = {};
      transform5.uiData.setPosition(-150, 100);
      transform5.p.applyOn.set(1);
      transform5.p.t.set([2.6725700820644875, 1.9986000670529571, 3.1543483596892585]);
      transform5.params.postCreateSpareParams();
      transform5.params.runOnSceneLoadHooks();
      return { node: transform5, children: transform5_nodes };
    }
    function create_transform6(objects2) {
      var transform6 = objects2.createNode("transform");
      transform6.setName("transform6");
      const transform6_nodes = {};
      transform6.uiData.setPosition(100, 100);
      transform6.p.applyOn.set(1);
      transform6.p.t.set([5.824443272100191, 1.351609219113499, 3.824104643821644]);
      transform6.params.postCreateSpareParams();
      transform6.params.runOnSceneLoadHooks();
      return { node: transform6, children: transform6_nodes };
    }
    objects_nodes["BVH1"] = create_BVH1(objects);
    objects_nodes["actor_appliedToIndividualObjects"] = create_actor_appliedToIndividualObjects(objects);
    objects_nodes["actor_objectsParent"] = create_actor_objectsParent(objects);
    objects_nodes["capsule1"] = create_capsule1(objects);
    objects_nodes["cone1"] = create_cone1(objects);
    objects_nodes["hierarchy1"] = create_hierarchy1(objects);
    objects_nodes["merge1"] = create_merge1(objects);
    objects_nodes["objectProperties1"] = create_objectProperties1(objects);
    objects_nodes["roundedBox1"] = create_roundedBox1(objects);
    objects_nodes["sphere1"] = create_sphere1(objects);
    objects_nodes["subnet1"] = create_subnet1(objects);
    objects_nodes["subnet_colors"] = create_subnet_colors(objects);
    objects_nodes["torus1"] = create_torus1(objects);
    objects_nodes["transform1"] = create_transform1(objects);
    objects_nodes["transform2"] = create_transform2(objects);
    objects_nodes["transform3"] = create_transform3(objects);
    objects_nodes["transform4"] = create_transform4(objects);
    objects_nodes["transform5"] = create_transform5(objects);
    objects_nodes["transform6"] = create_transform6(objects);
    objects_nodes["BVH1"].node.setInput(0, objects_nodes["subnet_colors"].node);
    objects_nodes["actor_appliedToIndividualObjects"].node.setInput(0, objects_nodes["BVH1"].node);
    objects_nodes["actor_objectsParent"].node.setInput(0, objects_nodes["hierarchy1"].node);
    objects_nodes["hierarchy1"].node.setInput(0, objects_nodes["actor_appliedToIndividualObjects"].node);
    objects_nodes["merge1"].node.setInput(0, objects_nodes["transform1"].node);
    objects_nodes["merge1"].node.setInput(1, objects_nodes["transform2"].node);
    objects_nodes["merge1"].node.setInput(2, objects_nodes["transform3"].node);
    objects_nodes["merge1"].node.setInput(3, objects_nodes["transform4"].node);
    objects_nodes["merge1"].node.setInput(4, objects_nodes["transform5"].node);
    objects_nodes["merge1"].node.setInput(5, objects_nodes["transform6"].node);
    objects_nodes["objectProperties1"].node.setInput(0, objects_nodes["merge1"].node);
    objects_nodes["subnet_colors"].node.setInput(0, objects_nodes["objectProperties1"].node);
    objects_nodes["transform1"].node.setInput(0, objects_nodes["roundedBox1"].node);
    objects_nodes["transform2"].node.setInput(0, objects_nodes["capsule1"].node);
    objects_nodes["transform3"].node.setInput(0, objects_nodes["cone1"].node);
    objects_nodes["transform4"].node.setInput(0, objects_nodes["sphere1"].node);
    objects_nodes["transform5"].node.setInput(0, objects_nodes["torus1"].node);
    objects_nodes["transform6"].node.setInput(0, objects_nodes["subnet1"].node);
    if (objects.childrenController) {
      objects.childrenController.selection.set([]);
    }
    objects.uiData.setPosition(-50, -50);
    objects.flags.display.set(true);
    objects.params.postCreateSpareParams();
    objects.params.runOnSceneLoadHooks();
    return { node: objects, children: objects_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_actor1(cameras2) {
      var actor1 = cameras2.createNode("actor");
      actor1.setName("actor1");
      const actor1_nodes = {};
      function create_add1(actor12) {
        var add1 = actor12.createNode("add");
        add1.setName("add1");
        const add1_nodes = {};
        add1.uiData.setPosition(-350, -50);
        add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], { spare: true, editable: false });
        add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], { spare: true, editable: true });
        add1.params.get("add1").set([0, 0, 3]);
        add1.params.postCreateSpareParams();
        add1.params.runOnSceneLoadHooks();
        return { node: add1, children: add1_nodes };
      }
      function create_compare1(actor12) {
        var compare1 = actor12.createNode("compare");
        compare1.setName("compare1");
        const compare1_nodes = {};
        compare1.uiData.setPosition(-350, -750);
        compare1.p.test.set(0);
        compare1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value0", 0, { spare: true, editable: false });
        compare1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value1", 0, { spare: true, editable: true });
        compare1.params.get("value1").set(1);
        compare1.params.postCreateSpareParams();
        compare1.params.runOnSceneLoadHooks();
        return { node: compare1, children: compare1_nodes };
      }
      function create_constant_defaultLookAt(actor12) {
        var constant_defaultLookAt = actor12.createNode("constant");
        constant_defaultLookAt.setName("constant_defaultLookAt");
        const constant_defaultLookAt_nodes = {};
        constant_defaultLookAt.uiData.setPosition(-50, 50);
        constant_defaultLookAt.p.type.set(6);
        constant_defaultLookAt.params.postCreateSpareParams();
        constant_defaultLookAt.params.runOnSceneLoadHooks();
        return { node: constant_defaultLookAt, children: constant_defaultLookAt_nodes };
      }
      function create_getObject1(actor12) {
        var getObject1 = actor12.createNode("getObject");
        getObject1.setName("getObject1");
        const getObject1_nodes = {};
        getObject1.uiData.setPosition(-600, -300);
        getObject1.p.getCurrentObject.set(false);
        getObject1.p.mask.set("*/perspectiveCamera_ROTATING");
        getObject1.params.postCreateSpareParams();
        getObject1.params.runOnSceneLoadHooks();
        return { node: getObject1, children: getObject1_nodes };
      }
      function create_getObjectAttribute1(actor12) {
        var getObjectAttribute1 = actor12.createNode("getObjectAttribute");
        getObjectAttribute1.setName("getObjectAttribute1");
        const getObjectAttribute1_nodes = {};
        getObjectAttribute1.uiData.setPosition(-450, 450);
        getObjectAttribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "blend", { spare: true, editable: true });
        getObjectAttribute1.params.postCreateSpareParams();
        getObjectAttribute1.params.runOnSceneLoadHooks();
        return { node: getObjectAttribute1, children: getObjectAttribute1_nodes };
      }
      function create_getObjectAttribute2(actor12) {
        var getObjectAttribute2 = actor12.createNode("getObjectAttribute");
        getObjectAttribute2.setName("getObjectAttribute2");
        const getObjectAttribute2_nodes = {};
        getObjectAttribute2.uiData.setPosition(-500, 150);
        getObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "lookAtTarget", {
          spare: true,
          editable: true
        });
        getObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "defaultVector3", [0, 0, 0], {
          spare: true,
          editable: true
        });
        getObjectAttribute2.p.type.set(6);
        getObjectAttribute2.params.postCreateSpareParams();
        getObjectAttribute2.params.runOnSceneLoadHooks();
        return { node: getObjectAttribute2, children: getObjectAttribute2_nodes };
      }
      function create_getObjectAttribute3(actor12) {
        var getObjectAttribute3 = actor12.createNode("getObjectAttribute");
        getObjectAttribute3.setName("getObjectAttribute3");
        const getObjectAttribute3_nodes = {};
        getObjectAttribute3.uiData.setPosition(-200, -1050);
        getObjectAttribute3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "focused", { spare: true, editable: true });
        getObjectAttribute3.params.postCreateSpareParams();
        getObjectAttribute3.params.runOnSceneLoadHooks();
        return { node: getObjectAttribute3, children: getObjectAttribute3_nodes };
      }
      function create_getObjectWorldPosition1(actor12) {
        var getObjectWorldPosition1 = actor12.createNode("getObjectWorldPosition");
        getObjectWorldPosition1.setName("getObjectWorldPosition1");
        const getObjectWorldPosition1_nodes = {};
        getObjectWorldPosition1.uiData.setPosition(-300, -300);
        getObjectWorldPosition1.params.postCreateSpareParams();
        getObjectWorldPosition1.params.runOnSceneLoadHooks();
        return { node: getObjectWorldPosition1, children: getObjectWorldPosition1_nodes };
      }
      function create_mix1(actor12) {
        var mix1 = actor12.createNode("mix");
        mix1.setName("mix1");
        const mix1_nodes = {};
        mix1.uiData.setPosition(0, -150);
        mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
        mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [1, 1, 1], { spare: true, editable: false });
        mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
        mix1.params.postCreateSpareParams();
        mix1.params.runOnSceneLoadHooks();
        return { node: mix1, children: mix1_nodes };
      }
      function create_mix2(actor12) {
        var mix2 = actor12.createNode("mix");
        mix2.setName("mix2");
        const mix2_nodes = {};
        mix2.uiData.setPosition(200, 150);
        mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
        mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [1, 1, 1], { spare: true, editable: false });
        mix2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
        mix2.params.postCreateSpareParams();
        mix2.params.runOnSceneLoadHooks();
        return { node: mix2, children: mix2_nodes };
      }
      function create_onObjectAttributeUpdate1(actor12) {
        var onObjectAttributeUpdate1 = actor12.createNode("onObjectAttributeUpdate");
        onObjectAttributeUpdate1.setName("onObjectAttributeUpdate1");
        const onObjectAttributeUpdate1_nodes = {};
        onObjectAttributeUpdate1.uiData.setPosition(-500, -850);
        onObjectAttributeUpdate1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "focused", {
          spare: true,
          editable: true
        });
        onObjectAttributeUpdate1.params.postCreateSpareParams();
        onObjectAttributeUpdate1.params.runOnSceneLoadHooks();
        return { node: onObjectAttributeUpdate1, children: onObjectAttributeUpdate1_nodes };
      }
      function create_onTick1(actor12) {
        var onTick1 = actor12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-100, -450);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_onTick2(actor12) {
        var onTick2 = actor12.createNode("onTick");
        onTick2.setName("onTick2");
        const onTick2_nodes = {};
        onTick2.uiData.setPosition(-200, -1200);
        onTick2.params.postCreateSpareParams();
        onTick2.params.runOnSceneLoadHooks();
        return { node: onTick2, children: onTick2_nodes };
      }
      function create_setObjectAttribute1(actor12) {
        var setObjectAttribute1 = actor12.createNode("setObjectAttribute");
        setObjectAttribute1.setName("setObjectAttribute1");
        const setObjectAttribute1_nodes = {};
        setObjectAttribute1.uiData.setPosition(200, -1200);
        setObjectAttribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "blend", { spare: true, editable: true });
        setObjectAttribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setObjectAttribute1.params.get("lerp").set(0.03);
        setObjectAttribute1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
        setObjectAttribute1.params.postCreateSpareParams();
        setObjectAttribute1.params.runOnSceneLoadHooks();
        return { node: setObjectAttribute1, children: setObjectAttribute1_nodes };
      }
      function create_setObjectAttribute2(actor12) {
        var setObjectAttribute2 = actor12.createNode("setObjectAttribute");
        setObjectAttribute2.setName("setObjectAttribute2");
        const setObjectAttribute2_nodes = {};
        setObjectAttribute2.uiData.setPosition(200, -850);
        setObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.STRING */ ._.STRING, "attribName", "focused", { spare: true, editable: true });
        setObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "lerp", 1, { spare: true, editable: true });
        setObjectAttribute2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: true });
        setObjectAttribute2.params.postCreateSpareParams();
        setObjectAttribute2.params.runOnSceneLoadHooks();
        return { node: setObjectAttribute2, children: setObjectAttribute2_nodes };
      }
      function create_setObjectLookAt1(actor12) {
        var setObjectLookAt1 = actor12.createNode("setObjectLookAt");
        setObjectLookAt1.setName("setObjectLookAt1");
        const setObjectLookAt1_nodes = {};
        setObjectLookAt1.uiData.setPosition(550, -250);
        setObjectLookAt1.p.lerp.set(0.05);
        setObjectLookAt1.params.postCreateSpareParams();
        setObjectLookAt1.params.runOnSceneLoadHooks();
        return { node: setObjectLookAt1, children: setObjectLookAt1_nodes };
      }
      function create_setObjectPosition1(actor12) {
        var setObjectPosition1 = actor12.createNode("setObjectPosition");
        setObjectPosition1.setName("setObjectPosition1");
        const setObjectPosition1_nodes = {};
        setObjectPosition1.uiData.setPosition(250, -250);
        setObjectPosition1.p.lerp.set(0.05);
        setObjectPosition1.params.postCreateSpareParams();
        setObjectPosition1.params.runOnSceneLoadHooks();
        return { node: setObjectPosition1, children: setObjectPosition1_nodes };
      }
      function create_triggerDelay1(actor12) {
        var triggerDelay1 = actor12.createNode("triggerDelay");
        triggerDelay1.setName("triggerDelay1");
        const triggerDelay1_nodes = {};
        triggerDelay1.uiData.setPosition(0, -850);
        triggerDelay1.p.delay.set(5e3);
        triggerDelay1.params.postCreateSpareParams();
        triggerDelay1.params.runOnSceneLoadHooks();
        return { node: triggerDelay1, children: triggerDelay1_nodes };
      }
      function create_triggerFilter1(actor12) {
        var triggerFilter1 = actor12.createNode("triggerFilter");
        triggerFilter1.setName("triggerFilter1");
        const triggerFilter1_nodes = {};
        triggerFilter1.uiData.setPosition(-200, -850);
        triggerFilter1.params.postCreateSpareParams();
        triggerFilter1.params.runOnSceneLoadHooks();
        return { node: triggerFilter1, children: triggerFilter1_nodes };
      }
      actor1_nodes["add1"] = create_add1(actor1);
      actor1_nodes["compare1"] = create_compare1(actor1);
      actor1_nodes["constant_defaultLookAt"] = create_constant_defaultLookAt(actor1);
      actor1_nodes["getObject1"] = create_getObject1(actor1);
      actor1_nodes["getObjectAttribute1"] = create_getObjectAttribute1(actor1);
      actor1_nodes["getObjectAttribute2"] = create_getObjectAttribute2(actor1);
      actor1_nodes["getObjectAttribute3"] = create_getObjectAttribute3(actor1);
      actor1_nodes["getObjectWorldPosition1"] = create_getObjectWorldPosition1(actor1);
      actor1_nodes["mix1"] = create_mix1(actor1);
      actor1_nodes["mix2"] = create_mix2(actor1);
      actor1_nodes["onObjectAttributeUpdate1"] = create_onObjectAttributeUpdate1(actor1);
      actor1_nodes["onTick1"] = create_onTick1(actor1);
      actor1_nodes["onTick2"] = create_onTick2(actor1);
      actor1_nodes["setObjectAttribute1"] = create_setObjectAttribute1(actor1);
      actor1_nodes["setObjectAttribute2"] = create_setObjectAttribute2(actor1);
      actor1_nodes["setObjectLookAt1"] = create_setObjectLookAt1(actor1);
      actor1_nodes["setObjectPosition1"] = create_setObjectPosition1(actor1);
      actor1_nodes["triggerDelay1"] = create_triggerDelay1(actor1);
      actor1_nodes["triggerFilter1"] = create_triggerFilter1(actor1);
      actor1_nodes["add1"].node.setInput("add0", actor1_nodes["getObjectAttribute2"].node, "val");
      actor1_nodes["compare1"].node.setInput("value0", actor1_nodes["onObjectAttributeUpdate1"].node, "newValue");
      actor1_nodes["getObjectWorldPosition1"].node.setInput(
        "Object3D",
        actor1_nodes["getObject1"].node,
        "Object3D"
      );
      actor1_nodes["mix1"].node.setInput("value0", actor1_nodes["getObjectWorldPosition1"].node, "worldPosition");
      actor1_nodes["mix1"].node.setInput("value1", actor1_nodes["add1"].node, "sum");
      actor1_nodes["mix1"].node.setInput("blend", actor1_nodes["getObjectAttribute1"].node, "val");
      actor1_nodes["mix2"].node.setInput("value0", actor1_nodes["constant_defaultLookAt"].node, "val");
      actor1_nodes["mix2"].node.setInput("value1", actor1_nodes["getObjectAttribute2"].node, "val");
      actor1_nodes["mix2"].node.setInput("blend", actor1_nodes["getObjectAttribute1"].node, "val");
      actor1_nodes["setObjectAttribute1"].node.setInput("trigger", actor1_nodes["onTick2"].node, "trigger");
      actor1_nodes["setObjectAttribute1"].node.setInput("val", actor1_nodes["getObjectAttribute3"].node, "val");
      actor1_nodes["setObjectAttribute2"].node.setInput("trigger", actor1_nodes["triggerDelay1"].node, "trigger");
      actor1_nodes["setObjectLookAt1"].node.setInput(
        "trigger",
        actor1_nodes["setObjectPosition1"].node,
        "trigger"
      );
      actor1_nodes["setObjectLookAt1"].node.setInput("targetPosition", actor1_nodes["mix2"].node, "mix");
      actor1_nodes["setObjectPosition1"].node.setInput("trigger", actor1_nodes["onTick1"].node, "trigger");
      actor1_nodes["setObjectPosition1"].node.setInput("position", actor1_nodes["mix1"].node, "mix");
      actor1_nodes["triggerDelay1"].node.setInput("trigger", actor1_nodes["triggerFilter1"].node, "trigger");
      actor1_nodes["triggerFilter1"].node.setInput(
        "trigger",
        actor1_nodes["onObjectAttributeUpdate1"].node,
        "trigger"
      );
      actor1_nodes["triggerFilter1"].node.setInput("condition", actor1_nodes["compare1"].node, "val");
      if (actor1.childrenController) {
        actor1.childrenController.selection.set([]);
      }
      actor1.uiData.setPosition(-200, 0);
      actor1.params.postCreateSpareParams();
      actor1.params.runOnSceneLoadHooks();
      return { node: actor1, children: actor1_nodes };
    }
    function create_actor2(cameras2) {
      var actor2 = cameras2.createNode("actor");
      actor2.setName("actor2");
      const actor2_nodes = {};
      function create_floatToVec3_2(actor22) {
        var floatToVec3_2 = actor22.createNode("floatToVec3");
        floatToVec3_2.setName("floatToVec3_2");
        const floatToVec3_2_nodes = {};
        floatToVec3_2.uiData.setPosition(200, 150);
        floatToVec3_2.params.postCreateSpareParams();
        floatToVec3_2.params.runOnSceneLoadHooks();
        return { node: floatToVec3_2, children: floatToVec3_2_nodes };
      }
      function create_multAdd1(actor22) {
        var multAdd1 = actor22.createNode("multAdd");
        multAdd1.setName("multAdd1");
        const multAdd1_nodes = {};
        multAdd1.uiData.setPosition(100, 150);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
        multAdd1.params.get("mult").set(0.3);
        multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
        multAdd1.params.postCreateSpareParams();
        multAdd1.params.runOnSceneLoadHooks();
        return { node: multAdd1, children: multAdd1_nodes };
      }
      function create_onTick1(actor22) {
        var onTick1 = actor22.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-100, 0);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_setObjectRotation1(actor22) {
        var setObjectRotation1 = actor22.createNode("setObjectRotation");
        setObjectRotation1.setName("setObjectRotation1");
        const setObjectRotation1_nodes = {};
        setObjectRotation1.uiData.setPosition(400, 0);
        setObjectRotation1.params.postCreateSpareParams();
        setObjectRotation1.params.runOnSceneLoadHooks();
        return { node: setObjectRotation1, children: setObjectRotation1_nodes };
      }
      function create_euler(actor1) {
        var vec2ToFloat1 = actor1.createNode("euler");
        vec2ToFloat1.setName("euler1");
        const vec2ToFloat1_nodes = {};
        vec2ToFloat1.uiData.setPosition(-150, 450);
        vec2ToFloat1.params.postCreateSpareParams();
        vec2ToFloat1.params.runOnSceneLoadHooks();
        return { node: vec2ToFloat1, children: vec2ToFloat1_nodes };
      }
      actor2_nodes["floatToVec3_2"] = create_floatToVec3_2(actor2);
      actor2_nodes["multAdd1"] = create_multAdd1(actor2);
      actor2_nodes["onTick1"] = create_onTick1(actor2);
      actor2_nodes["setObjectRotation1"] = create_setObjectRotation1(actor2);
      actor2_nodes["euler1"] = create_euler(actor2);
      actor2_nodes["floatToVec3_2"].node.setInput("y", actor2_nodes["multAdd1"].node, "val");
      actor2_nodes["multAdd1"].node.setInput("value", actor2_nodes["onTick1"].node, "time");
      actor2_nodes["setObjectRotation1"].node.setInput("trigger", actor2_nodes["onTick1"].node, "trigger");
      actor2_nodes["setObjectRotation1"].node.setInput("Euler", actor2_nodes["euler1"].node);
      actor2_nodes["euler1"].node.setInput("Euler", actor2_nodes["floatToVec3_2"].node, "vec3");
      if (actor2.childrenController) {
        actor2.childrenController.selection.set([actor2_nodes["multAdd1"].node]);
      }
      actor2.uiData.setPosition(-500, 0);
      actor2.params.postCreateSpareParams();
      actor2.params.runOnSceneLoadHooks();
      return { node: actor2, children: actor2_nodes };
    }
    function create_attribCreate1(cameras2) {
      var attribCreate1 = cameras2.createNode("attribCreate");
      attribCreate1.setName("attribCreate1");
      const attribCreate1_nodes = {};
      attribCreate1.uiData.setPosition(-200, -200);
      attribCreate1.setAttribClass(_polygonjs_polygonjs_src_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.OBJECT */ .io.OBJECT);
      attribCreate1.p.name.set("lookAtTarget");
      attribCreate1.p.size.set(3);
      attribCreate1.p.value3.set([0, 1.8, 0]);
      attribCreate1.params.postCreateSpareParams();
      attribCreate1.params.runOnSceneLoadHooks();
      return { node: attribCreate1, children: attribCreate1_nodes };
    }
    function create_attribCreate3(cameras2) {
      var attribCreate3 = cameras2.createNode("attribCreate");
      attribCreate3.setName("attribCreate3");
      const attribCreate3_nodes = {};
      attribCreate3.uiData.setPosition(-200, -650);
      attribCreate3.setAttribClass(_polygonjs_polygonjs_src_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.OBJECT */ .io.OBJECT);
      attribCreate3.p.name.set("focused");
      attribCreate3.params.postCreateSpareParams();
      attribCreate3.params.runOnSceneLoadHooks();
      return { node: attribCreate3, children: attribCreate3_nodes };
    }
    function create_attribCreate4(cameras2) {
      var attribCreate4 = cameras2.createNode("attribCreate");
      attribCreate4.setName("attribCreate4");
      const attribCreate4_nodes = {};
      attribCreate4.uiData.setPosition(-200, -450);
      attribCreate4.setAttribClass(_polygonjs_polygonjs_src_core_geometry_Constant__WEBPACK_IMPORTED_MODULE_1__/* .AttribClass.OBJECT */ .io.OBJECT);
      attribCreate4.p.name.set("blend");
      attribCreate4.params.postCreateSpareParams();
      attribCreate4.params.runOnSceneLoadHooks();
      return { node: attribCreate4, children: attribCreate4_nodes };
    }
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([0.2421462470218893, 0.20790490229898526, -0.4243705859269765]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(200, -100);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_hierarchy1(cameras2) {
      var hierarchy1 = cameras2.createNode("hierarchy");
      hierarchy1.setName("hierarchy1");
      const hierarchy1_nodes = {};
      hierarchy1.uiData.setPosition(-500, -150);
      hierarchy1.params.postCreateSpareParams();
      hierarchy1.params.runOnSceneLoadHooks();
      return { node: hierarchy1, children: hierarchy1_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-100, 450);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_merge2(cameras2) {
      var merge2 = cameras2.createNode("merge");
      merge2.setName("merge2");
      const merge2_nodes = {};
      merge2.uiData.setPosition(-300, 250);
      merge2.params.postCreateSpareParams();
      merge2.params.runOnSceneLoadHooks();
      return { node: merge2, children: merge2_nodes };
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG.setName("perspectiveCamera_DEBUG");
      const perspectiveCamera_DEBUG_nodes = {};
      perspectiveCamera_DEBUG.uiData.setPosition(200, -250);
      perspectiveCamera_DEBUG.p.position.set([7.2, 7.2, 7.2]);
      perspectiveCamera_DEBUG.params.postCreateSpareParams();
      perspectiveCamera_DEBUG.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes };
    }
    function create_perspectiveCamera_MAIN(cameras2) {
      var perspectiveCamera_MAIN = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_MAIN.setName("perspectiveCamera_MAIN");
      const perspectiveCamera_MAIN_nodes = {};
      perspectiveCamera_MAIN.uiData.setPosition(-200, -800);
      perspectiveCamera_MAIN.p.position.set([0, 5, 8.9]);
      perspectiveCamera_MAIN.params.postCreateSpareParams();
      perspectiveCamera_MAIN.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_MAIN, children: perspectiveCamera_MAIN_nodes };
    }
    function create_perspectiveCamera_ROTATING(cameras2) {
      var perspectiveCamera_ROTATING = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_ROTATING.setName("perspectiveCamera_ROTATING");
      const perspectiveCamera_ROTATING_nodes = {};
      perspectiveCamera_ROTATING.uiData.setPosition(-500, -550);
      perspectiveCamera_ROTATING.params.postCreateSpareParams();
      perspectiveCamera_ROTATING.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_ROTATING, children: perspectiveCamera_ROTATING_nodes };
    }
    function create_polarTransform1(cameras2) {
      var polarTransform1 = cameras2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(-500, -350);
      polarTransform1.p.center.set([0, 1.2, 0]);
      polarTransform1.p.latitude.set(28.8);
      polarTransform1.p.depth.set(11.8);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    cameras_nodes["actor1"] = create_actor1(cameras);
    cameras_nodes["actor2"] = create_actor2(cameras);
    cameras_nodes["attribCreate1"] = create_attribCreate1(cameras);
    cameras_nodes["attribCreate3"] = create_attribCreate3(cameras);
    cameras_nodes["attribCreate4"] = create_attribCreate4(cameras);
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["hierarchy1"] = create_hierarchy1(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["merge2"] = create_merge2(cameras);
    cameras_nodes["perspectiveCamera_DEBUG"] = create_perspectiveCamera_DEBUG(cameras);
    cameras_nodes["perspectiveCamera_MAIN"] = create_perspectiveCamera_MAIN(cameras);
    cameras_nodes["perspectiveCamera_ROTATING"] = create_perspectiveCamera_ROTATING(cameras);
    cameras_nodes["polarTransform1"] = create_polarTransform1(cameras);
    cameras_nodes["actor1"].node.setInput(0, cameras_nodes["attribCreate1"].node);
    cameras_nodes["actor2"].node.setInput(0, cameras_nodes["hierarchy1"].node);
    cameras_nodes["attribCreate1"].node.setInput(0, cameras_nodes["attribCreate4"].node);
    cameras_nodes["attribCreate3"].node.setInput(0, cameras_nodes["perspectiveCamera_MAIN"].node);
    cameras_nodes["attribCreate4"].node.setInput(0, cameras_nodes["attribCreate3"].node);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_DEBUG"].node);
    cameras_nodes["hierarchy1"].node.setInput(0, cameras_nodes["polarTransform1"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["merge2"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraControls1"].node);
    cameras_nodes["merge2"].node.setInput(0, cameras_nodes["actor2"].node);
    cameras_nodes["merge2"].node.setInput(1, cameras_nodes["actor1"].node);
    cameras_nodes["polarTransform1"].node.setInput(0, cameras_nodes["perspectiveCamera_ROTATING"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(-50, 50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["environment"] = create_environment(root);
  scene_root_nodes["objects"] = create_objects(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_MAIN",
    focusedNodes: scene_root_nodes["cameras"].node.children(),
    autoLayout: false,
    playWhenLoaded: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_actor_OnObjectAttributeUpdate_ts.546a9f2c01da9892e62f.js.map