(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshNormal_ts"],{

/***/ 68131:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo12 = parentNode.createNode("geo");
    geo12.setName("geo1");
    function create_MAT(geo13) {
      var MAT = geo13.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshNormal1(MAT2) {
        var meshNormal1 = MAT2.createNode("meshNormal");
        meshNormal1.setName("meshNormal1");
        meshNormal1.uiData.setPosition(0, 100);
        meshNormal1.params.postCreateSpareParams();
        meshNormal1.params.runOnSceneLoadHooks();
        return meshNormal1;
      }
      create_meshNormal1(MAT);
      MAT.uiData.setPosition(-350, 250);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_fileGLTF1(geo13) {
      var fileGLTF12 = geo13.createNode("fileGLTF");
      fileGLTF12.setName("fileGLTF1");
      fileGLTF12.uiData.setPosition(-150, 50);
      fileGLTF12.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/resources/threedscans.com/theodoric_the_great.glb"
      );
      fileGLTF12.params.postCreateSpareParams();
      fileGLTF12.params.runOnSceneLoadHooks();
      return fileGLTF12;
    }
    function create_material1(geo13) {
      var material12 = geo13.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(-150, 250);
      material12.flags.display.set(true);
      material12.p.material.set("../MAT/meshNormal1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    create_MAT(geo12);
    var fileGLTF1 = create_fileGLTF1(geo12);
    var material1 = create_material1(geo12);
    material1.setInput(0, fileGLTF1);
    geo12.uiData.setPosition(-50, -150);
    geo12.flags.display.set(true);
    geo12.params.postCreateSpareParams();
    geo12.params.runOnSceneLoadHooks();
    return geo12;
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return planeHelper1;
    }
    create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.04003207776900154, 0.45369634017218685, -0.07522770510602053]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([0.11254789339849623, 0.7354562476316117, 1.2755973471727238]);
    perspectiveCamera12.p.r.set([-11.782029169623556, 6.3097578558789005, 1.3132231598444772]);
    perspectiveCamera12.p.s.set([0.9999999999999999, 0.9999999999999998, 1]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return hemisphereLight1;
  }
  var geo1 = create_geo1(root);
  create_grid(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  create_hemisphereLight1(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [geo1.nodesByType("material")[0]],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshNormal_ts.95bf54a2e3b7e8f7d5fa.js.map