(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_physics_PhysicsRBDSimple_ts"],{

/***/ 27138:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandard1(MAT2) {
        var meshStandard1 = MAT2.createNode("meshStandard");
        meshStandard1.setName("meshStandard1");
        const meshStandard1_nodes = {};
        meshStandard1.uiData.setPosition(0, -50);
        meshStandard1.p.useMap.set(true);
        meshStandard1.p.map.set("../../../COP/image1");
        meshStandard1.params.postCreateSpareParams();
        meshStandard1.params.runOnSceneLoadHooks();
        return { node: meshStandard1, children: meshStandard1_nodes };
      }
      MAT_nodes["meshStandard1"] = create_meshStandard1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-500, 550);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_bboxScatter1(geo12) {
      var bboxScatter1 = geo12.createNode("bboxScatter");
      bboxScatter1.setName("bboxScatter1");
      const bboxScatter1_nodes = {};
      bboxScatter1.uiData.setPosition(400, -600);
      bboxScatter1.p.stepSize.set(1);
      bboxScatter1.params.postCreateSpareParams();
      bboxScatter1.params.runOnSceneLoadHooks();
      return { node: bboxScatter1, children: bboxScatter1_nodes };
    }
    function create_box1(geo12) {
      var box1 = geo12.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(400, -850);
      box1.p.size.set(2);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_copy1(geo12) {
      var copy1 = geo12.createNode("copy");
      copy1.setName("copy1");
      const copy1_nodes = {};
      copy1.uiData.setPosition(150, -100);
      copy1.params.postCreateSpareParams();
      copy1.params.runOnSceneLoadHooks();
      return { node: copy1, children: copy1_nodes };
    }
    function create_material1(geo12) {
      var material1 = geo12.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(150, 600);
      material1.p.material.set("../MAT/meshStandard1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_merge1(geo12) {
      var merge1 = geo12.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(0, 750);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_objectProperties1(geo12) {
      var objectProperties1 = geo12.createNode("objectProperties");
      objectProperties1.setName("objectProperties1");
      const objectProperties1_nodes = {};
      objectProperties1.uiData.setPosition(-350, 200);
      objectProperties1.p.tcastShadow.set(true);
      objectProperties1.p.treceiveShadow.set(true);
      objectProperties1.params.postCreateSpareParams();
      objectProperties1.params.runOnSceneLoadHooks();
      return { node: objectProperties1, children: objectProperties1_nodes };
    }
    function create_objectProperties2(geo12) {
      var objectProperties2 = geo12.createNode("objectProperties");
      objectProperties2.setName("objectProperties2");
      const objectProperties2_nodes = {};
      objectProperties2.uiData.setPosition(150, 100);
      objectProperties2.p.tcastShadow.set(true);
      objectProperties2.p.treceiveShadow.set(true);
      objectProperties2.params.postCreateSpareParams();
      objectProperties2.params.runOnSceneLoadHooks();
      return { node: objectProperties2, children: objectProperties2_nodes };
    }
    function create_physicsGround1(geo12) {
      var physicsGround1 = geo12.createNode("physicsGround");
      physicsGround1.setName("physicsGround1");
      const physicsGround1_nodes = {};
      physicsGround1.uiData.setPosition(-350, 0);
      physicsGround1.params.postCreateSpareParams();
      physicsGround1.params.runOnSceneLoadHooks();
      return { node: physicsGround1, children: physicsGround1_nodes };
    }
    function create_physicsRBDAttributes1(geo12) {
      var physicsRBDAttributes1 = geo12.createNode("physicsRBDAttributes");
      physicsRBDAttributes1.setName("physicsRBDAttributes1");
      const physicsRBDAttributes1_nodes = {};
      physicsRBDAttributes1.uiData.setPosition(150, 300);
      physicsRBDAttributes1.p.colliderType.set(1);
      physicsRBDAttributes1.p.radius.set(0.3);
      physicsRBDAttributes1.params.postCreateSpareParams();
      physicsRBDAttributes1.params.runOnSceneLoadHooks();
      return { node: physicsRBDAttributes1, children: physicsRBDAttributes1_nodes };
    }
    function create_physicsWorld1(geo12) {
      var physicsWorld1 = geo12.createNode("physicsWorld");
      physicsWorld1.setName("physicsWorld1");
      const physicsWorld1_nodes = {};
      function create_onScenePause1(physicsWorld12) {
        var onScenePause1 = physicsWorld12.createNode("onScenePause");
        onScenePause1.setName("onScenePause1");
        const onScenePause1_nodes = {};
        onScenePause1.uiData.setPosition(-100, -100);
        onScenePause1.params.postCreateSpareParams();
        onScenePause1.params.runOnSceneLoadHooks();
        return { node: onScenePause1, children: onScenePause1_nodes };
      }
      function create_onTick1(physicsWorld12) {
        var onTick1 = physicsWorld12.createNode("onTick");
        onTick1.setName("onTick1");
        const onTick1_nodes = {};
        onTick1.uiData.setPosition(-100, 100);
        onTick1.params.postCreateSpareParams();
        onTick1.params.runOnSceneLoadHooks();
        return { node: onTick1, children: onTick1_nodes };
      }
      function create_physicsWorldReset1(physicsWorld12) {
        var physicsWorldReset1 = physicsWorld12.createNode("physicsWorldReset");
        physicsWorldReset1.setName("physicsWorldReset1");
        const physicsWorldReset1_nodes = {};
        physicsWorldReset1.uiData.setPosition(100, -100);
        physicsWorldReset1.params.postCreateSpareParams();
        physicsWorldReset1.params.runOnSceneLoadHooks();
        return { node: physicsWorldReset1, children: physicsWorldReset1_nodes };
      }
      function create_physicsWorldStepSimulation1(physicsWorld12) {
        var physicsWorldStepSimulation1 = physicsWorld12.createNode("physicsWorldStepSimulation");
        physicsWorldStepSimulation1.setName("physicsWorldStepSimulation1");
        const physicsWorldStepSimulation1_nodes = {};
        physicsWorldStepSimulation1.uiData.setPosition(100, 100);
        physicsWorldStepSimulation1.params.postCreateSpareParams();
        physicsWorldStepSimulation1.params.runOnSceneLoadHooks();
        return { node: physicsWorldStepSimulation1, children: physicsWorldStepSimulation1_nodes };
      }
      physicsWorld1_nodes["onScenePause1"] = create_onScenePause1(physicsWorld1);
      physicsWorld1_nodes["onTick1"] = create_onTick1(physicsWorld1);
      physicsWorld1_nodes["physicsWorldReset1"] = create_physicsWorldReset1(physicsWorld1);
      physicsWorld1_nodes["physicsWorldStepSimulation1"] = create_physicsWorldStepSimulation1(physicsWorld1);
      physicsWorld1_nodes["physicsWorldReset1"].node.setInput(
        "trigger",
        physicsWorld1_nodes["onScenePause1"].node,
        "trigger"
      );
      physicsWorld1_nodes["physicsWorldStepSimulation1"].node.setInput(
        "trigger",
        physicsWorld1_nodes["onTick1"].node,
        "trigger"
      );
      if (physicsWorld1.childrenController) {
        physicsWorld1.childrenController.selection.set([]);
      }
      physicsWorld1.uiData.setPosition(0, 950);
      physicsWorld1.flags.display.set(true);
      physicsWorld1.params.postCreateSpareParams();
      physicsWorld1.params.runOnSceneLoadHooks();
      return { node: physicsWorld1, children: physicsWorld1_nodes };
    }
    function create_sphere1(geo12) {
      var sphere1 = geo12.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(50, -300);
      sphere1.p.radius.set(0.3);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    function create_transform1(geo12) {
      var transform1 = geo12.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(400, -300);
      transform1.p.t.set([0, 3.742610962458797, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    function create_transform2(geo12) {
      var transform2 = geo12.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setPosition(400, -450);
      transform2.p.r.set([16.260239758608012, 0, 20.048703030767687]);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["bboxScatter1"] = create_bboxScatter1(geo1);
    geo1_nodes["box1"] = create_box1(geo1);
    geo1_nodes["copy1"] = create_copy1(geo1);
    geo1_nodes["material1"] = create_material1(geo1);
    geo1_nodes["merge1"] = create_merge1(geo1);
    geo1_nodes["objectProperties1"] = create_objectProperties1(geo1);
    geo1_nodes["objectProperties2"] = create_objectProperties2(geo1);
    geo1_nodes["physicsGround1"] = create_physicsGround1(geo1);
    geo1_nodes["physicsRBDAttributes1"] = create_physicsRBDAttributes1(geo1);
    geo1_nodes["physicsWorld1"] = create_physicsWorld1(geo1);
    geo1_nodes["sphere1"] = create_sphere1(geo1);
    geo1_nodes["transform1"] = create_transform1(geo1);
    geo1_nodes["transform2"] = create_transform2(geo1);
    geo1_nodes["bboxScatter1"].node.setInput(0, geo1_nodes["box1"].node);
    geo1_nodes["copy1"].node.setInput(0, geo1_nodes["sphere1"].node);
    geo1_nodes["copy1"].node.setInput(1, geo1_nodes["transform1"].node);
    geo1_nodes["material1"].node.setInput(0, geo1_nodes["physicsRBDAttributes1"].node);
    geo1_nodes["merge1"].node.setInput(0, geo1_nodes["objectProperties1"].node);
    geo1_nodes["merge1"].node.setInput(1, geo1_nodes["material1"].node);
    geo1_nodes["objectProperties1"].node.setInput(0, geo1_nodes["physicsGround1"].node);
    geo1_nodes["objectProperties2"].node.setInput(0, geo1_nodes["copy1"].node);
    geo1_nodes["physicsRBDAttributes1"].node.setInput(0, geo1_nodes["objectProperties2"].node);
    geo1_nodes["physicsWorld1"].node.setInput(0, geo1_nodes["merge1"].node);
    geo1_nodes["transform1"].node.setInput(0, geo1_nodes["transform2"].node);
    geo1_nodes["transform2"].node.setInput(0, geo1_nodes["bboxScatter1"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([geo1_nodes["objectProperties2"].node]);
    }
    geo1.uiData.setPosition(150, -250);
    geo1.flags.display.set(true);
    geo1.p.CSGWireframe.options.setOption("editable", void 0);
    geo1.p.TetScale.options.setOption("editable", void 0);
    geo1.p.TetDisplayLines.options.setOption("editable", void 0);
    geo1.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    geo1.p.TetDisplayPoints.options.setOption("editable", void 0);
    geo1.p.TetDisplayCenter.options.setOption("editable", void 0);
    geo1.p.TetDisplaySphere.options.setOption("editable", void 0);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_image1(COP2) {
      var image1 = COP2.createNode("image");
      image1.setName("image1");
      const image1_nodes = {};
      image1.uiData.setPosition(-200, 50);
      image1.params.postCreateSpareParams();
      image1.params.runOnSceneLoadHooks();
      return { node: image1, children: image1_nodes };
    }
    COP_nodes["image1"] = create_image1(COP);
    if (COP.childrenController) {
      COP.childrenController.selection.set([]);
    }
    COP.uiData.setPosition(0, 0);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_eventsNetwork1(perspectiveCamera12) {
      var eventsNetwork1 = perspectiveCamera12.createNode("eventsNetwork");
      eventsNetwork1.setName("eventsNetwork1");
      const eventsNetwork1_nodes = {};
      function create_cameraOrbitControls1(eventsNetwork12) {
        var cameraOrbitControls1 = eventsNetwork12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(-100, 100);
        cameraOrbitControls1.p.target.set([-0.4340442147691516, 1.6620590805719715, -0.5249017793988726]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      eventsNetwork1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(eventsNetwork1);
      if (eventsNetwork1.childrenController) {
        eventsNetwork1.childrenController.selection.set([]);
      }
      eventsNetwork1.uiData.setPosition(-150, 100);
      eventsNetwork1.params.postCreateSpareParams();
      eventsNetwork1.params.runOnSceneLoadHooks();
      return { node: eventsNetwork1, children: eventsNetwork1_nodes };
    }
    perspectiveCamera1_nodes["eventsNetwork1"] = create_eventsNetwork1(perspectiveCamera1);
    if (perspectiveCamera1.childrenController) {
      perspectiveCamera1.childrenController.selection.set([]);
    }
    perspectiveCamera1.uiData.setPosition(0, -100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([7, 7, 7]);
    perspectiveCamera1.p.controls.set("eventsNetwork1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(50, -50);
      hemisphereLight1.p.intensity.set(0.52);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(100, 300);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(300, 150);
      polarTransform1.p.center.set([0, 0.7, 0]);
      polarTransform1.p.latitude.set(25.2);
      polarTransform1.p.depth.set(3);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_spotLight1(lights2) {
      var spotLight1 = lights2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(300, -50);
      spotLight1.p.decay.set(0.1);
      spotLight1.p.distance.set(10);
      spotLight1.p.castShadow.set(true);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["spotLight1"] = create_spotLight1(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["spotLight1"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([]);
    }
    lights.uiData.setPosition(150, 100);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: [],
    // no node is focused here, so that we don't have the transform gizmo appearing
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_physics_PhysicsRBDSimple_ts.14b1cc9feb03fd7f05c2.js.map