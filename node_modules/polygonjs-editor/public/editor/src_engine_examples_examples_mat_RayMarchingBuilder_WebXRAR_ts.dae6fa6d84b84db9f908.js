(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_WebXRAR_ts"],{

/***/ 49357:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0.12, 0.12, 0.12]);
  const scene_root_nodes = {};
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    if (grid.childrenController) {
      grid.childrenController.selection.set([]);
    }
    grid.uiData.setPosition(200, -250);
    grid.flags.display.set(false);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/piz_compressed.exr"
      );
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    if (COP.childrenController) {
      COP.childrenController.selection.set([]);
    }
    COP.uiData.setPosition(0, 250);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_raymarchedObject(parentNode) {
    var raymarchedObject = parentNode.createNode("geo");
    raymarchedObject.setName("raymarchedObject");
    const raymarchedObject_nodes = {};
    function create_MAT(raymarchedObject2) {
      var MAT = raymarchedObject2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        const rayMarchingBuilder1_nodes = {};
        function create_SDFContext1(rayMarchingBuilder12) {
          var SDFContext1 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext1.setName("SDFContext1");
          const SDFContext1_nodes = {};
          SDFContext1.uiData.setPosition(750, 100);
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext1.params.postCreateSpareParams();
          SDFContext1.params.runOnSceneLoadHooks();
          return { node: SDFContext1, children: SDFContext1_nodes };
        }
        function create_SDFMaterial1(rayMarchingBuilder12) {
          var SDFMaterial1 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial1.setName("SDFMaterial1");
          const SDFMaterial1_nodes = {};
          SDFMaterial1.uiData.setComment(
            "This is the material applied to the SDF primitives. It contains the refraction properties, so this is where you would edit the index of refraction or refraction limits."
          );
          SDFMaterial1.uiData.setPosition(550, 300);
          SDFMaterial1.p.envMapIntensity.set(8);
          SDFMaterial1.p.envMapFresnel.set(1);
          SDFMaterial1.p.refractionTint.set([0.18823529411764706, 0.07058823529411765, 0.25098039215686274]);
          SDFMaterial1.p.transmission.set(0.92);
          SDFMaterial1.p.absorption.set(1.4);
          SDFMaterial1.p.refractionMaxDist.set(9.575);
          SDFMaterial1.params.postCreateSpareParams();
          SDFMaterial1.params.runOnSceneLoadHooks();
          return { node: SDFMaterial1, children: SDFMaterial1_nodes };
        }
        function create_SDFOctahedron1(rayMarchingBuilder12) {
          var SDFOctahedron1 = rayMarchingBuilder12.createNode("SDFOctahedron");
          SDFOctahedron1.setName("SDFOctahedron1");
          const SDFOctahedron1_nodes = {};
          SDFOctahedron1.uiData.setPosition(-100, 50);
          SDFOctahedron1.p.size.set(0.54);
          SDFOctahedron1.params.postCreateSpareParams();
          SDFOctahedron1.params.runOnSceneLoadHooks();
          return { node: SDFOctahedron1, children: SDFOctahedron1_nodes };
        }
        function create_SDFSphere1(rayMarchingBuilder12) {
          var SDFSphere1 = rayMarchingBuilder12.createNode("SDFSphere");
          SDFSphere1.setName("SDFSphere1");
          const SDFSphere1_nodes = {};
          SDFSphere1.uiData.setPosition(350, -100);
          SDFSphere1.params.postCreateSpareParams();
          SDFSphere1.params.runOnSceneLoadHooks();
          return { node: SDFSphere1, children: SDFSphere1_nodes };
        }
        function create_SDFTorus1(rayMarchingBuilder12) {
          var SDFTorus1 = rayMarchingBuilder12.createNode("SDFTorus");
          SDFTorus1.setName("SDFTorus1");
          const SDFTorus1_nodes = {};
          SDFTorus1.uiData.setPosition(-100, -850);
          SDFTorus1.p.radius2.set(0.07);
          SDFTorus1.p.angle.set(2.6801);
          SDFTorus1.params.postCreateSpareParams();
          SDFTorus1.params.runOnSceneLoadHooks();
          return { node: SDFTorus1, children: SDFTorus1_nodes };
        }
        function create_SDFTorus2(rayMarchingBuilder12) {
          var SDFTorus2 = rayMarchingBuilder12.createNode("SDFTorus");
          SDFTorus2.setName("SDFTorus2");
          const SDFTorus2_nodes = {};
          SDFTorus2.uiData.setPosition(-100, -600);
          SDFTorus2.p.radius1.set(0.83);
          SDFTorus2.p.radius2.set(0.07);
          SDFTorus2.p.angle.set(2.957);
          SDFTorus2.params.postCreateSpareParams();
          SDFTorus2.params.runOnSceneLoadHooks();
          return { node: SDFTorus2, children: SDFTorus2_nodes };
        }
        function create_SDFTorus3(rayMarchingBuilder12) {
          var SDFTorus3 = rayMarchingBuilder12.createNode("SDFTorus");
          SDFTorus3.setName("SDFTorus3");
          const SDFTorus3_nodes = {};
          SDFTorus3.uiData.setPosition(-100, -350);
          SDFTorus3.p.radius1.set(0.69);
          SDFTorus3.p.radius2.set(0.07);
          SDFTorus3.p.angle.set(2.9974);
          SDFTorus3.params.postCreateSpareParams();
          SDFTorus3.params.runOnSceneLoadHooks();
          return { node: SDFTorus3, children: SDFTorus3_nodes };
        }
        function create_SDFTransform1(rayMarchingBuilder12) {
          var SDFTransform1 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform1.setName("SDFTransform1");
          const SDFTransform1_nodes = {};
          SDFTransform1.uiData.setPosition(-700, -800);
          SDFTransform1.params.postCreateSpareParams();
          SDFTransform1.params.runOnSceneLoadHooks();
          return { node: SDFTransform1, children: SDFTransform1_nodes };
        }
        function create_SDFTransform2(rayMarchingBuilder12) {
          var SDFTransform2 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform2.setName("SDFTransform2");
          const SDFTransform2_nodes = {};
          SDFTransform2.uiData.setPosition(-500, -600);
          SDFTransform2.params.postCreateSpareParams();
          SDFTransform2.params.runOnSceneLoadHooks();
          return { node: SDFTransform2, children: SDFTransform2_nodes };
        }
        function create_SDFTransform3(rayMarchingBuilder12) {
          var SDFTransform3 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform3.setName("SDFTransform3");
          const SDFTransform3_nodes = {};
          SDFTransform3.uiData.setPosition(-300, -350);
          SDFTransform3.params.postCreateSpareParams();
          SDFTransform3.params.runOnSceneLoadHooks();
          return { node: SDFTransform3, children: SDFTransform3_nodes };
        }
        function create_SDFTransform4(rayMarchingBuilder12) {
          var SDFTransform4 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform4.setName("SDFTransform4");
          const SDFTransform4_nodes = {};
          SDFTransform4.uiData.setPosition(-250, 50);
          SDFTransform4.params.postCreateSpareParams();
          SDFTransform4.params.runOnSceneLoadHooks();
          return { node: SDFTransform4, children: SDFTransform4_nodes };
        }
        function create_SDFUnion1(rayMarchingBuilder12) {
          var SDFUnion1 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion1.setName("SDFUnion1");
          const SDFUnion1_nodes = {};
          SDFUnion1.uiData.setPosition(350, -400);
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion1.params.get("smoothFactor").set(0.27);
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion1.params.postCreateSpareParams();
          SDFUnion1.params.runOnSceneLoadHooks();
          return { node: SDFUnion1, children: SDFUnion1_nodes };
        }
        function create_SDFUnion2(rayMarchingBuilder12) {
          var SDFUnion2 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion2.setName("SDFUnion2");
          const SDFUnion2_nodes = {};
          SDFUnion2.uiData.setPosition(150, -600);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion2.params.get("smoothFactor").set(0.22);
          SDFUnion2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion2.params.postCreateSpareParams();
          SDFUnion2.params.runOnSceneLoadHooks();
          return { node: SDFUnion2, children: SDFUnion2_nodes };
        }
        function create_SDFUnion3(rayMarchingBuilder12) {
          var SDFUnion3 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion3.setName("SDFUnion3");
          const SDFUnion3_nodes = {};
          SDFUnion3.uiData.setPosition(600, 0);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion3.params.get("smoothFactor").set(0.22);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion3.params.postCreateSpareParams();
          SDFUnion3.params.runOnSceneLoadHooks();
          return { node: SDFUnion3, children: SDFUnion3_nodes };
        }
        function create_constant1(rayMarchingBuilder12) {
          var constant1 = rayMarchingBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(150, 250);
          constant1.p.type.set(4);
          constant1.p.color.set([1, 1, 1]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant3(rayMarchingBuilder12) {
          var constant3 = rayMarchingBuilder12.createNode("constant");
          constant3.setName("constant3");
          const constant3_nodes = {};
          constant3.uiData.setPosition(250, 550);
          constant3.p.type.set(4);
          constant3.p.color.set([0.1450980392156863, 0.011764705882352941, 0.30980392156862746]);
          constant3.p.asColor.set(true);
          constant3.params.postCreateSpareParams();
          constant3.params.runOnSceneLoadHooks();
          return { node: constant3, children: constant3_nodes };
        }
        function create_constant_global_speed(rayMarchingBuilder12) {
          var constant_global_speed = rayMarchingBuilder12.createNode("constant");
          constant_global_speed.setName("constant_global_speed");
          const constant_global_speed_nodes = {};
          constant_global_speed.uiData.setPosition(-1650, -200);
          constant_global_speed.p.float.set(0.41);
          constant_global_speed.params.postCreateSpareParams();
          constant_global_speed.params.runOnSceneLoadHooks();
          return { node: constant_global_speed, children: constant_global_speed_nodes };
        }
        function create_floatToVec3_2(rayMarchingBuilder12) {
          var floatToVec3_2 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_2.setName("floatToVec3_2");
          const floatToVec3_2_nodes = {};
          floatToVec3_2.uiData.setPosition(-900, -800);
          floatToVec3_2.params.postCreateSpareParams();
          floatToVec3_2.params.runOnSceneLoadHooks();
          return { node: floatToVec3_2, children: floatToVec3_2_nodes };
        }
        function create_floatToVec3_3(rayMarchingBuilder12) {
          var floatToVec3_3 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_3.setName("floatToVec3_3");
          const floatToVec3_3_nodes = {};
          floatToVec3_3.uiData.setPosition(-900, -600);
          floatToVec3_3.params.postCreateSpareParams();
          floatToVec3_3.params.runOnSceneLoadHooks();
          return { node: floatToVec3_3, children: floatToVec3_3_nodes };
        }
        function create_floatToVec3_4(rayMarchingBuilder12) {
          var floatToVec3_4 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_4.setName("floatToVec3_4");
          const floatToVec3_4_nodes = {};
          floatToVec3_4.uiData.setPosition(-900, -350);
          floatToVec3_4.params.postCreateSpareParams();
          floatToVec3_4.params.runOnSceneLoadHooks();
          return { node: floatToVec3_4, children: floatToVec3_4_nodes };
        }
        function create_floatToVec3_5(rayMarchingBuilder12) {
          var floatToVec3_5 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_5.setName("floatToVec3_5");
          const floatToVec3_5_nodes = {};
          floatToVec3_5.uiData.setPosition(-1200, 50);
          floatToVec3_5.params.postCreateSpareParams();
          floatToVec3_5.params.runOnSceneLoadHooks();
          return { node: floatToVec3_5, children: floatToVec3_5_nodes };
        }
        function create_globals1(rayMarchingBuilder12) {
          var globals1 = rayMarchingBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1650, -400);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_mult1(rayMarchingBuilder12) {
          var mult1 = rayMarchingBuilder12.createNode("mult");
          mult1.setName("mult1");
          const mult1_nodes = {};
          mult1.uiData.setPosition(-1450, -400);
          mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult0", 1, { spare: true, editable: false });
          mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult1", 1, { spare: true, editable: false });
          mult1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult2", 1, { spare: true, editable: true });
          mult1.params.postCreateSpareParams();
          mult1.params.runOnSceneLoadHooks();
          return { node: mult1, children: mult1_nodes };
        }
        function create_multAdd1(rayMarchingBuilder12) {
          var multAdd1 = rayMarchingBuilder12.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-1200, -600);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.params.get("mult").set(0.75);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_multAdd2(rayMarchingBuilder12) {
          var multAdd2 = rayMarchingBuilder12.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(-1200, -800);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd2.params.get("mult").set(0.52);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_multAdd3(rayMarchingBuilder12) {
          var multAdd3 = rayMarchingBuilder12.createNode("multAdd");
          multAdd3.setName("multAdd3");
          const multAdd3_nodes = {};
          multAdd3.uiData.setPosition(-1200, -350);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd3.params.get("mult").set(1.71);
          multAdd3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd3.params.postCreateSpareParams();
          multAdd3.params.runOnSceneLoadHooks();
          return { node: multAdd3, children: multAdd3_nodes };
        }
        function create_multAdd4(rayMarchingBuilder12) {
          var multAdd4 = rayMarchingBuilder12.createNode("multAdd");
          multAdd4.setName("multAdd4");
          const multAdd4_nodes = {};
          multAdd4.uiData.setPosition(-900, 50);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [0, 0, 0], { spare: true, editable: false });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "preAdd", [0, 0, 0], { spare: true, editable: true });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "mult", [1, 1, 1], { spare: true, editable: true });
          multAdd4.params.get("mult").set([0.32, 0.48, 1]);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "postAdd", [0, 0, 0], { spare: true, editable: true });
          multAdd4.params.postCreateSpareParams();
          multAdd4.params.runOnSceneLoadHooks();
          return { node: multAdd4, children: multAdd4_nodes };
        }
        function create_multScalar1(rayMarchingBuilder12) {
          var multScalar1 = rayMarchingBuilder12.createNode("multScalar");
          multScalar1.setName("multScalar1");
          const multScalar1_nodes = {};
          multScalar1.uiData.setPosition(350, 300);
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [1, 1, 1], { spare: true, editable: false });
          multScalar1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multScalar1.params.get("mult").set(0.43);
          multScalar1.params.postCreateSpareParams();
          multScalar1.params.runOnSceneLoadHooks();
          return { node: multScalar1, children: multScalar1_nodes };
        }
        function create_null1(rayMarchingBuilder12) {
          var null1 = rayMarchingBuilder12.createNode("null");
          null1.setName("null1");
          const null1_nodes = {};
          null1.uiData.setPosition(-1300, 50);
          null1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "in", 0, { spare: true, editable: false });
          null1.params.postCreateSpareParams();
          null1.params.runOnSceneLoadHooks();
          return { node: null1, children: null1_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(950, 100);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        rayMarchingBuilder1_nodes["SDFContext1"] = create_SDFContext1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial1"] = create_SDFMaterial1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFOctahedron1"] = create_SDFOctahedron1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFSphere1"] = create_SDFSphere1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTorus1"] = create_SDFTorus1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTorus2"] = create_SDFTorus2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTorus3"] = create_SDFTorus3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform1"] = create_SDFTransform1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform2"] = create_SDFTransform2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform3"] = create_SDFTransform3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform4"] = create_SDFTransform4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion1"] = create_SDFUnion1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion2"] = create_SDFUnion2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion3"] = create_SDFUnion3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant1"] = create_constant1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant3"] = create_constant3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant_global_speed"] = create_constant_global_speed(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_2"] = create_floatToVec3_2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_3"] = create_floatToVec3_3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_4"] = create_floatToVec3_4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_5"] = create_floatToVec3_5(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals1"] = create_globals1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["mult1"] = create_mult1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd1"] = create_multAdd1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd2"] = create_multAdd2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd3"] = create_multAdd3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd4"] = create_multAdd4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multScalar1"] = create_multScalar1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["null1"] = create_null1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFUnion3"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial1"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["multScalar1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFOctahedron1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform4"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTorus1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTorus2"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform2"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTorus3"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform3"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform1"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_2"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform2"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform2"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_3"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform3"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform2"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform3"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_4"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform4"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["multAdd4"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFUnion1"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFUnion2"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFUnion1"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFTorus3"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFTorus2"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion2"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFTorus1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFUnion1"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFOctahedron1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["floatToVec3_2"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["multAdd2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_3"].node.setInput(
          "z",
          rayMarchingBuilder1_nodes["multAdd1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_4"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["multAdd3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_5"].node.setInput(
          "x",
          rayMarchingBuilder1_nodes["null1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_5"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["null1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["floatToVec3_5"].node.setInput(
          "z",
          rayMarchingBuilder1_nodes["null1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["mult1"].node.setInput(
          "mult0",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["mult1"].node.setInput(
          "mult1",
          rayMarchingBuilder1_nodes["constant_global_speed"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["multAdd1"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["multAdd2"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["multAdd3"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["multAdd4"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["floatToVec3_5"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["multScalar1"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["constant1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["null1"].node.setInput(
          "in",
          rayMarchingBuilder1_nodes["mult1"].node,
          "product"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFContext1"].node,
          "SDFContext"
        );
        if (rayMarchingBuilder1.childrenController) {
          rayMarchingBuilder1.childrenController.selection.set([
            rayMarchingBuilder1_nodes["multScalar1"].node
          ]);
        }
        rayMarchingBuilder1.uiData.setComment(
          "This is the raymarching material. There are only a few properties on the node itself, as most of them are inside other nodes inside it. So dive inside it to edit the various primitivees, like the torus and octagon, how they blend with one another, and also the various refraction properties, like the refraction limit, index of refraction or absorption."
        );
        rayMarchingBuilder1.uiData.setPosition(0, 0);
        rayMarchingBuilder1.p.maxDist.set(8);
        rayMarchingBuilder1.p.surfDist.set(2e-3);
        rayMarchingBuilder1.p.useEnvMap.set(true);
        rayMarchingBuilder1.p.envMap.set("/COP/envMap");
        rayMarchingBuilder1.p.envMapRoughness.set(0);
        rayMarchingBuilder1.p.tEnvMapRotate.set(true);
        rayMarchingBuilder1.p.envMapRotation.set(-3.14159265358979);
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([MAT_nodes["rayMarchingBuilder1"].node]);
      }
      MAT.uiData.setComment(
        "This node contains the material applied to the sphere. Enter it   to see how the material is setup"
      );
      MAT.uiData.setPosition(-300, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(raymarchedObject2) {
      var material1 = raymarchedObject2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setComment("This applies the raymarching material to the sphere");
      material1.uiData.setPosition(0, 300);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_sphere1(raymarchedObject2) {
      var sphere1 = raymarchedObject2.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setComment("this is a simple sphere");
      sphere1.uiData.setPosition(0, 50);
      sphere1.p.radius.set(1.1400000000000001);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    function create_transform1(raymarchedObject2) {
      var transform1 = raymarchedObject2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(0, 550);
      transform1.flags.display.set(true);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([0, -0.4, -3]);
      transform1.p.scale.set(0.6);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    raymarchedObject_nodes["MAT"] = create_MAT(raymarchedObject);
    raymarchedObject_nodes["material1"] = create_material1(raymarchedObject);
    raymarchedObject_nodes["sphere1"] = create_sphere1(raymarchedObject);
    raymarchedObject_nodes["transform1"] = create_transform1(raymarchedObject);
    raymarchedObject_nodes["material1"].node.setInput(0, raymarchedObject_nodes["sphere1"].node);
    raymarchedObject_nodes["transform1"].node.setInput(0, raymarchedObject_nodes["material1"].node);
    if (raymarchedObject.childrenController) {
      raymarchedObject.childrenController.selection.set([]);
    }
    raymarchedObject.uiData.setPosition(200, -150);
    raymarchedObject.flags.display.set(true);
    raymarchedObject.params.postCreateSpareParams();
    raymarchedObject.params.runOnSceneLoadHooks();
    return { node: raymarchedObject, children: raymarchedObject_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_areaLight1(lights2) {
      var areaLight1 = lights2.createNode("areaLight");
      areaLight1.setName("areaLight1");
      const areaLight1_nodes = {};
      areaLight1.uiData.setPosition(-50, -50);
      areaLight1.p.intensity.set(2);
      areaLight1.p.showHelper.set(true);
      areaLight1.params.postCreateSpareParams();
      areaLight1.params.runOnSceneLoadHooks();
      return { node: areaLight1, children: areaLight1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(-50, 100);
      polarTransform1.p.center.set([0, 0, -3]);
      polarTransform1.p.latitude.set(64.8);
      polarTransform1.p.depth.set(1.3);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_webXRAREstimatedLight1(lights2) {
      var webXRAREstimatedLight1 = lights2.createNode("webXRAREstimatedLight");
      webXRAREstimatedLight1.setName("webXRAREstimatedLight1");
      const webXRAREstimatedLight1_nodes = {};
      webXRAREstimatedLight1.uiData.setPosition(-50, 300);
      webXRAREstimatedLight1.flags.display.set(true);
      webXRAREstimatedLight1.params.postCreateSpareParams();
      webXRAREstimatedLight1.params.runOnSceneLoadHooks();
      return { node: webXRAREstimatedLight1, children: webXRAREstimatedLight1_nodes };
    }
    lights_nodes["areaLight1"] = create_areaLight1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["webXRAREstimatedLight1"] = create_webXRAREstimatedLight1(lights);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["areaLight1"].node);
    lights_nodes["webXRAREstimatedLight1"].node.setInput(0, lights_nodes["polarTransform1"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([lights_nodes["webXRAREstimatedLight1"].node]);
    }
    lights.uiData.setPosition(200, -50);
    lights.flags.display.set(true);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([0.08160960711322912, 0.24208653936036023, -2.976529222477319]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(-300, 100);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_cameraWebXRAR1(cameras2) {
      var cameraWebXRAR1 = cameras2.createNode("cameraWebXRAR");
      cameraWebXRAR1.setName("cameraWebXRAR1");
      const cameraWebXRAR1_nodes = {};
      cameraWebXRAR1.uiData.setPosition(100, 100);
      cameraWebXRAR1.params.postCreateSpareParams();
      cameraWebXRAR1.params.runOnSceneLoadHooks();
      return { node: cameraWebXRAR1, children: cameraWebXRAR1_nodes };
    }
    function create_merge1(cameras2) {
      var merge1 = cameras2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(-100, 300);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_perspectiveCamera_AR(cameras2) {
      var perspectiveCamera_AR = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_AR.setName("perspectiveCamera_AR");
      const perspectiveCamera_AR_nodes = {};
      perspectiveCamera_AR.uiData.setPosition(100, -100);
      perspectiveCamera_AR.params.postCreateSpareParams();
      perspectiveCamera_AR.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_AR, children: perspectiveCamera_AR_nodes };
    }
    function create_perspectiveCamera_DEBUG(cameras2) {
      var perspectiveCamera_DEBUG = cameras2.createNode("perspectiveCamera");
      perspectiveCamera_DEBUG.setName("perspectiveCamera_DEBUG");
      const perspectiveCamera_DEBUG_nodes = {};
      perspectiveCamera_DEBUG.uiData.setPosition(-300, -100);
      perspectiveCamera_DEBUG.p.position.set([0, 0, 5]);
      perspectiveCamera_DEBUG.params.postCreateSpareParams();
      perspectiveCamera_DEBUG.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera_DEBUG, children: perspectiveCamera_DEBUG_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["cameraWebXRAR1"] = create_cameraWebXRAR1(cameras);
    cameras_nodes["merge1"] = create_merge1(cameras);
    cameras_nodes["perspectiveCamera_AR"] = create_perspectiveCamera_AR(cameras);
    cameras_nodes["perspectiveCamera_DEBUG"] = create_perspectiveCamera_DEBUG(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera_DEBUG"].node);
    cameras_nodes["cameraWebXRAR1"].node.setInput(0, cameras_nodes["perspectiveCamera_AR"].node);
    cameras_nodes["merge1"].node.setInput(0, cameras_nodes["cameraControls1"].node);
    cameras_nodes["merge1"].node.setInput(1, cameras_nodes["cameraWebXRAR1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([cameras_nodes["cameraWebXRAR1"].node]);
    }
    cameras.uiData.setPosition(200, 50);
    cameras.flags.display.set(true);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["raymarchedObject"] = create_raymarchedObject(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera_AR",
    focusedNodes: [scene_root_nodes["lights"].children["webXRAREstimatedLight1"].node],
    //scene_root_nodes['raymarchedObject'].children['MAT'].children['rayMarchingBuilder1'].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_WebXRAR_ts.dae6fa6d84b84db9f908.js.map