(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_editor_components_panels_codePreview_CodePreview_vue"],{

/***/ 6815:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20559);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93476);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".Panel.CodePreview .tabs-container .shader-tab{display:inline;cursor:pointer}.Panel.CodePreview .tabs-container .shader-tab.active .tab_item .panel_type_name,.Panel.CodePreview .tabs-container .shader-tab.active .tab_item .panel_type_close{position:relative;top:3px}", "",{"version":3,"sources":["webpack://./../src/editor/components/panels/codePreview/CodePreview.vue"],"names":[],"mappings":"AAUE,+CACC,cAAA,CAGA,cAAA,CAgBE,mKACC,iBAAA,CACA,OAAA","sourcesContent":["\n@import \"globals.sass\"\n\n$color_border_tab_item_container: darken($color_bg, 20%)\n$color_font_tab_item_container_active: black\n\n.Panel.CodePreview\n\t.tabs-container\n\t\t// margin: 0\n\t\t// padding-left: 10px\n\t\t.shader-tab\n\t\t\tdisplay: inline\n\t\t\t// padding: 7px 10px\n\t\t\t// font-size: 0.6rem\n\t\t\tcursor: pointer\n\t\t\t// border: 1px solid $color_border_tab_item_container\n\t\t\t// border-bottom: 0px\n\t\t\t// border-top-left-radius: 3px\n\t\t\t// border-top-right-radius: 3px\n\t\t\t// background-color: darken($color_bg_panel_shader_code_preview, 20%)\n\t\t\t// color: lighten($color_font_tab_item_container_active, 20%)\n\t\t\t&.active\n\t\t\t\t//background-color: $color_bg_tab_item_container_active\n\t\t\t\t// color: $color_font_tab_item_container_active\n\t\t\t\t// padding-bottom: 14px\n\t\t\t\t// top: -3px\n\t\t\t\t// position: relative\n\t\t\t\t// background-color: lighten($color_bg_panel_shader_code_preview, 10%)\n\t\t\t\t// font-weight: bold\n\t\t\t\t.tab_item\n\t\t\t\t\t.panel_type_name, .panel_type_close\n\t\t\t\t\t\tposition: relative\n\t\t\t\t\t\ttop: 3px\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 67265:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(20559);
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(93476);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, ".monaco-readonly-container{min-height:1000px}.monaco-readonly-container .highlightedLine{background-color:#4d370f}", "",{"version":3,"sources":["webpack://./../src/editor/components/widgets/monaco/MonacoReadonly.vue"],"names":[],"mappings":"AAEA,2BACC,iBAAA,CACA,4CACC,wBAAA","sourcesContent":["\n\n.monaco-readonly-container\n\tmin-height: 1000px\n\t.highlightedLine\n\t\tbackground-color: mix(black, lighten(orange,10%), 70%)\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ 29993:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "u": function() { return /* binding */ MonacoEditorEnvironment; }
/* harmony export */ });

class MonacoEditorEnvironment {
  static setup() {
    const monaco_setup_element = document.getElementById("monaco-setup");
    const json_url = (monaco_setup_element == null ? void 0 : monaco_setup_element.dataset["json"]) || "/editor/json.worker.js";
    const css_url = (monaco_setup_element == null ? void 0 : monaco_setup_element.dataset["css"]) || "/editor/css.worker.js";
    const html_url = (monaco_setup_element == null ? void 0 : monaco_setup_element.dataset["html"]) || "/editor/html.worker.js";
    const typescript_url = (monaco_setup_element == null ? void 0 : monaco_setup_element.dataset["typescript"]) || "/editor/ts.worker.js";
    const urls = {
      json: json_url,
      css: css_url,
      html: html_url,
      typescript: typescript_url,
      javascript: typescript_url
    };
    const default_url = (monaco_setup_element == null ? void 0 : monaco_setup_element.dataset["editor"]) || "/editor/editor.worker.js";
    self.MonacoEnvironment = {
      getWorkerUrl: function(moduleId, label) {
        const url = urls[label] || default_url;
        return url;
      }
    };
  }
}


/***/ }),

/***/ 77336:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": function() { return /* binding */ monacoEditorAddHotkeys; }
/* harmony export */ });
/* harmony import */ var monaco_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99391);


function monacoEditorAddHotkeys(options) {
  const { monacoEditor, readonly, callbacks } = options;
  monacoEditor.addCommand(monaco_editor__WEBPACK_IMPORTED_MODULE_0__.KeyMod.CtrlCmd | monaco_editor__WEBPACK_IMPORTED_MODULE_0__.KeyCode.KeyB, callbacks.togglePanelToFullScreen);
  if (!readonly) {
    if (callbacks.saveParam) {
      monacoEditor.addCommand(monaco_editor__WEBPACK_IMPORTED_MODULE_0__.KeyMod.CtrlCmd | monaco_editor__WEBPACK_IMPORTED_MODULE_0__.KeyCode.Enter, callbacks.saveParam);
    }
    if (callbacks.saveParamAndScene) {
      monacoEditor.addCommand(monaco_editor__WEBPACK_IMPORTED_MODULE_0__.KeyMod.CtrlCmd | monaco_editor__WEBPACK_IMPORTED_MODULE_0__.KeyCode.KeyS, callbacks.saveParamAndScene);
    }
  }
}


/***/ }),

/***/ 55116:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": function() { return /* binding */ monacoEditorSetupForGLSL; }
/* harmony export */ });
/* unused harmony export language */
/* harmony import */ var _polygonjs_polygonjs_src_engine_params_utils_OptionsController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(94051);
/* harmony import */ var monaco_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99391);
/* harmony import */ var _MonacoEditorCommon__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(33015);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
const conf = {
  comments: {
    lineComment: "//",
    blockComment: ["/*", "*/"]
  },
  brackets: [
    ["{", "}"],
    ["[", "]"],
    ["(", ")"]
  ],
  autoClosingPairs: [
    { open: "[", close: "]" },
    { open: "{", close: "}" },
    { open: "(", close: ")" },
    { open: "'", close: "'", notIn: ["string", "comment"] },
    { open: '"', close: '"', notIn: ["string"] }
  ],
  surroundingPairs: [
    { open: "{", close: "}" },
    { open: "[", close: "]" },
    { open: "(", close: ")" },
    { open: '"', close: '"' },
    { open: "'", close: "'" }
  ]
};
const keywords = [
  "const",
  "uniform",
  "break",
  "continue",
  "do",
  "for",
  "while",
  "if",
  "else",
  "switch",
  "case",
  "in",
  "out",
  "inout",
  "true",
  "false",
  "invariant",
  "discard",
  "return",
  "sampler2D",
  "samplerCube",
  "sampler3D",
  "struct",
  "radians",
  "degrees",
  "sin",
  "cos",
  "tan",
  "asin",
  "acos",
  "atan",
  "pow",
  "sinh",
  "cosh",
  "tanh",
  "asinh",
  "acosh",
  "atanh",
  "exp",
  "log",
  "exp2",
  "log2",
  "sqrt",
  "inversesqrt",
  "abs",
  "sign",
  "floor",
  "ceil",
  "round",
  "roundEven",
  "trunc",
  "fract",
  "mod",
  "modf",
  "min",
  "max",
  "clamp",
  "mix",
  "step",
  "smoothstep",
  "length",
  "distance",
  "dot",
  "cross ",
  "determinant",
  "inverse",
  "normalize",
  "faceforward",
  "reflect",
  "refract",
  "matrixCompMult",
  "outerProduct",
  "transpose",
  "lessThan ",
  "lessThanEqual",
  "greaterThan",
  "greaterThanEqual",
  "equal",
  "notEqual",
  "any",
  "all",
  "not",
  "packUnorm2x16",
  "unpackUnorm2x16",
  "packSnorm2x16",
  "unpackSnorm2x16",
  "packHalf2x16",
  "unpackHalf2x16",
  "dFdx",
  "dFdy",
  "fwidth",
  "textureSize",
  "texture",
  "textureProj",
  "textureLod",
  "textureGrad",
  "texelFetch",
  "texelFetchOffset",
  "textureProjLod",
  "textureLodOffset",
  "textureGradOffset",
  "textureProjLodOffset",
  "textureProjGrad",
  "intBitsToFloat",
  "uintBitsToFloat",
  "floatBitsToInt",
  "floatBitsToUint",
  "isnan",
  "isinf",
  "vec2",
  "vec3",
  "vec4",
  "ivec2",
  "ivec3",
  "ivec4",
  "uvec2",
  "uvec3",
  "uvec4",
  "bvec2",
  "bvec3",
  "bvec4",
  "mat2",
  "mat3",
  "mat2x2",
  "mat2x3",
  "mat2x4",
  "mat3x2",
  "mat3x3",
  "mat3x4",
  "mat4x2",
  "mat4x3",
  "mat4x4",
  "mat4",
  "float",
  "int",
  "uint",
  "void",
  "bool"
];
const language = {
  tokenPostfix: ".glsl",
  // Set defaultToken to invalid to see what you do not tokenize yet
  defaultToken: "invalid",
  keywords,
  operators: [
    "=",
    ">",
    "<",
    "!",
    "~",
    "?",
    ":",
    "==",
    "<=",
    ">=",
    "!=",
    "&&",
    "||",
    "++",
    "--",
    "+",
    "-",
    "*",
    "/",
    "&",
    "|",
    "^",
    "%",
    "<<",
    ">>",
    ">>>",
    "+=",
    "-=",
    "*=",
    "/=",
    "&=",
    "|=",
    "^=",
    "%=",
    "<<=",
    ">>=",
    ">>>="
  ],
  symbols: /[=><!~?:&|+\-*\/\^%]+/,
  escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
  integersuffix: /([uU](ll|LL|l|L)|(ll|LL|l|L)?[uU]?)/,
  floatsuffix: /[fFlL]?/,
  encoding: /u|u8|U|L/,
  tokenizer: {
    root: [
      // identifiers and keywords
      [
        /[a-zA-Z_]\w*/,
        {
          cases: {
            "@keywords": { token: "keyword.$0" },
            "@default": "identifier"
          }
        }
      ],
      // Preprocessor directive (#define)
      [/^\s*#\s*\w+/, "keyword.directive"],
      // whitespace
      { include: "@whitespace" },
      // delimiters and operators
      [/[{}()\[\]]/, "@brackets"],
      [
        /@symbols/,
        {
          cases: {
            "@operators": "operator",
            "@default": ""
          }
        }
      ],
      // numbers
      [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, "number.float"],
      [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, "number.float"],
      [/0[xX][0-9a-fA-F']*[0-9a-fA-F](@integersuffix)/, "number.hex"],
      [/0[0-7']*[0-7](@integersuffix)/, "number.octal"],
      [/0[bB][0-1']*[0-1](@integersuffix)/, "number.binary"],
      [/\d[\d']*\d(@integersuffix)/, "number"],
      [/\d(@integersuffix)/, "number"],
      // delimiter: after number because of .\d floats
      [/[;,.]/, "delimiter"]
    ],
    comment: [
      [/[^\/*]+/, "comment"],
      [/\/\*/, "comment", "@push"],
      ["\\*/", "comment", "@pop"],
      [/[\/*]/, "comment"]
    ],
    // Does it have strings?
    string: [
      [/[^\\"]+/, "string"],
      [/@escapes/, "string.escape"],
      [/\\./, "string.escape.invalid"],
      [
        /"/,
        {
          token: "string.quote",
          bracket: "@close",
          next: "@pop"
        }
      ]
    ],
    whitespace: [
      [/[ \t\r\n]+/, "white"],
      [/\/\*/, "comment", "@comment"],
      [/\/\/.*$/, "comment"]
    ]
  }
};



function monacoEditorSetupForGLSL(rawInput, element, options) {
  monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.register({
    id: "glsl"
    // extensions?: string[];
    // filenames?: string[];
    // filenamePatterns?: string[];
    // firstLine?: string;
    // aliases?: string[];
    // mimetypes?: string[];
    // configuration?: Uri;
  });
  monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.setLanguageConfiguration("glsl", conf);
  monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.setMonarchTokensProvider("glsl", language);
  const editor = monaco_editor__WEBPACK_IMPORTED_MODULE_0__.editor.create(element, __spreadValues({
    model: (0,_MonacoEditorCommon__WEBPACK_IMPORTED_MODULE_1__/* .monacoEditorCreateModel */ .Ih)(rawInput, _polygonjs_polygonjs_src_engine_params_utils_OptionsController__WEBPACK_IMPORTED_MODULE_2__/* .StringParamLanguage.GLSL */ .qs.GLSL, options.uniqueId),
    value: rawInput,
    language: _polygonjs_polygonjs_src_engine_params_utils_OptionsController__WEBPACK_IMPORTED_MODULE_2__/* .StringParamLanguage.GLSL */ .qs.GLSL,
    readOnly: options.readOnly
  }, _MonacoEditorCommon__WEBPACK_IMPORTED_MODULE_1__/* .MonacoCommonOptions */ .mD));
  return editor;
}


/***/ }),

/***/ 33015:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Ih": function() { return /* binding */ monacoEditorCreateModel; },
/* harmony export */   "JU": function() { return /* binding */ updateMonacoEditorModel; },
/* harmony export */   "mD": function() { return /* binding */ MonacoCommonOptions; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_core_Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(19037);
/* harmony import */ var monaco_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99391);



const MonacoCommonOptions = {
  renderWhitespace: "boundary",
  theme: "vs-dark",
  // 'hc-black', // vs-dark // not sure why only the minimap gets the theme
  insertSpaces: false,
  tabSize: 4,
  automaticLayout: true
  // auto resize (https://stackoverflow.com/questions/47017753/monaco-editor-dynamically-resizable)
};
function updateMonacoEditorModel(content, model) {
  if (model) {
    if ((0,_polygonjs_polygonjs_src_core_Type__WEBPACK_IMPORTED_MODULE_1__/* .isString */ .HD)(content)) {
      model.setValue(content);
    }
  } else {
    console.warn("no model to update");
  }
}
function monacoEditorCreateModel(rawInput, language, editorId) {
  const uri = monaco_editor__WEBPACK_IMPORTED_MODULE_0__.Uri.parse(`file:///${language}-${editorId}.tsx`);
  let model = monaco_editor__WEBPACK_IMPORTED_MODULE_0__.editor.getModel(uri);
  if (!model) {
    model = monaco_editor__WEBPACK_IMPORTED_MODULE_0__.editor.createModel(rawInput, language, uri);
  } else {
    model.setValue(rawInput);
  }
  return model;
}


/***/ }),

/***/ 1726:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "f": function() { return /* binding */ MonacoTypescriptController; }
/* harmony export */ });
/* harmony import */ var monaco_editor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(99391);
/* harmony import */ var _self_contained_FilesRegister__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(91282);
/* harmony import */ var _polygonjs_polygonjs_src_core_String__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(40065);
/* harmony import */ var _history_commands_ParamSet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(42362);
/* harmony import */ var _MonacoEditorCommon__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(33015);
/* harmony import */ var _polygonjs_polygonjs_src_engine_params_utils_OptionsController__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(94051);

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};






const DEBUG_EXTRA_LIB = false;
const _MonacoTypescriptController = class {
  constructor() {
  }
  static updateModel(content) {
    (0,_MonacoEditorCommon__WEBPACK_IMPORTED_MODULE_3__/* .updateMonacoEditorModel */ .JU)(content, this.model);
  }
  static saveParam(param, multiCmd) {
    return __async(this, null, function* () {
      const javascriptParam = param.node.params.get("codeJavascript");
      if (javascriptParam && this.model) {
        const transpiled = (yield _MonacoTypescriptController.transpile(this.model)) || "";
        const cmd = new _history_commands_ParamSet__WEBPACK_IMPORTED_MODULE_2__/* .ParamSetCommand */ .O(javascriptParam, transpiled);
        multiCmd.pushCommand(cmd);
      }
    });
  }
  static addLibs() {
    return __async(this, null, function* () {
      if (this._libsAdded) {
        return;
      }
      this._libsAdded = true;
    });
  }
  static setupForTypescriptWithoutNode(rawInput, element, options, param) {
    return __async(this, null, function* () {
      _MonacoTypescriptController.setCompilerOptions();
      if (DEBUG_EXTRA_LIB) {
        debugExtraLib();
        return;
      }
      yield _MonacoTypescriptController.addLibs();
      if (param) {
        yield _MonacoTypescriptController.addTypesForNode(param.node);
      }
      this.model = (0,_MonacoEditorCommon__WEBPACK_IMPORTED_MODULE_3__/* .monacoEditorCreateModel */ .Ih)(rawInput, _polygonjs_polygonjs_src_engine_params_utils_OptionsController__WEBPACK_IMPORTED_MODULE_4__/* .StringParamLanguage.TYPESCRIPT */ .qs.TYPESCRIPT, options.uniqueId);
      const editor = monaco_editor__WEBPACK_IMPORTED_MODULE_0__.editor.create(element, __spreadValues({
        model: this.model,
        value: rawInput,
        readOnly: options.readOnly
      }, _MonacoEditorCommon__WEBPACK_IMPORTED_MODULE_3__/* .MonacoCommonOptions */ .mD));
      return editor;
    });
  }
  static setupForTypescript(param, rawInput, element, options) {
    return __async(this, null, function* () {
      return this.setupForTypescriptWithoutNode(rawInput, element, options, param);
    });
  }
  static addTypesForNode(node) {
    return __async(this, null, function* () {
      yield _self_contained_FilesRegister__WEBPACK_IMPORTED_MODULE_1__.FilesRegister.init();
      let content = yield _self_contained_FilesRegister__WEBPACK_IMPORTED_MODULE_1__.FilesRegister.polygonjsBundledTypes();
      content = this._injectNodeSpareParamsTypes(content, node);
      const uri = "ts:filename/facts2.d.ts";
      monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.typescript.typescriptDefaults.addExtraLib(content, uri);
    });
  }
  static _injectNodeSpareParamsTypes(content, node) {
    const spareParams = node.params.spare.filter((p) => p.parentParam() == null);
    const linesToAdd = spareParams.map((p) => `${p.name()}: ParamTemplate<ParamType.${p.type().toUpperCase()}>;`);
    const lineStart = `declare class Code${_polygonjs_polygonjs_src_core_String__WEBPACK_IMPORTED_MODULE_5__/* .CoreString.titleize */ .YE.titleize(
      node.context()
    )}ParamsConfig extends NodeParamsConfig {`;
    const replacement = `${lineStart}
${linesToAdd.join("\n")}`;
    content = content.replace(lineStart, replacement);
    return content;
  }
  static setCompilerOptions() {
    if (this._compilerOptionsSet) {
      return;
    }
    this._compilerOptionsSet = true;
    monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.typescript.typescriptDefaults.setDiagnosticsOptions({
      noSemanticValidation: false,
      noSyntaxValidation: false
      // noSuggestionDiagnostics
    });
    monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.typescript.typescriptDefaults.setCompilerOptions({
      target: monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.typescript.ScriptTarget.ES2020,
      // allowNonTsExtensions: true,
      moduleResolution: monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.typescript.ModuleResolutionKind.NodeJs,
      // module: monaco.languages.typescript.ModuleKind.CommonJS,
      // noEmit: true,
      typeRoots: ["node_modules/@types"]
      //
      // allowNonTsExtensions: true,
      // strictNullChecks: true,
    });
  }
  static transpile(model) {
    return __async(this, null, function* () {
      const worker = yield monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.typescript.getTypeScriptWorker();
      const client = yield worker(model.uri);
      const result = yield client.getEmitOutput(model.uri.toString());
      return result.outputFiles[0].text;
    });
  }
};
let MonacoTypescriptController = _MonacoTypescriptController;
MonacoTypescriptController._libsAdded = false;
MonacoTypescriptController.model = null;
MonacoTypescriptController._compilerOptionsSet = false;
let _started = false;
function debugExtraLib() {
  return __async(this, null, function* () {
    if (_started) {
      return;
    }
    _started = true;
    const extraLibs = {
      "polygonjs_bundled_types.d.ts": yield _self_contained_FilesRegister__WEBPACK_IMPORTED_MODULE_1__.FilesRegister.polygonjsBundledTypes()
    };
    const testContent = `
	export class CodeJsProcessor extends BaseCodeJsProcessor {}
	`;
    for (const libName of Object.keys(extraLibs)) {
      const content =  true ? extraLibs[libName] : 0;
      const libModel = monaco_editor__WEBPACK_IMPORTED_MODULE_0__.editor.createModel(content, "typescript", monaco_editor__WEBPACK_IMPORTED_MODULE_0__.Uri.file(libName));
      setTimeout(() => {
        validateCode(libModel);
      }, 500);
    }
    function validateCode(model) {
      monaco_editor__WEBPACK_IMPORTED_MODULE_0__.languages.typescript.getTypeScriptWorker().then((worker) => {
        worker(model.uri).then((client) => {
          client.getSuggestionDiagnostics(model.uri.toString()).then((diagnostics) => {
            console.log("getSuggestionDiagnostics:", diagnostics);
          });
          client.getCompilerOptionsDiagnostics(model.uri.toString()).then((diagnostics) => {
            console.log("getCompilerOptionsDiagnostics:", diagnostics);
          });
          client.getSyntacticDiagnostics(model.uri.toString()).then((diagnostics) => {
            console.log("Syntax errors:", diagnostics);
          });
          client.getSemanticDiagnostics(model.uri.toString()).then((diagnostics) => {
            console.log("Semantic errors:", diagnostics);
          });
        });
      });
    }
  });
}


/***/ }),

/***/ 23361:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": function() { return /* binding */ CodePreview; }
});

// EXTERNAL MODULE: ../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
var runtime_core_esm_bundler = __webpack_require__(88917);
// EXTERNAL MODULE: ../node_modules/@vue/runtime-core/node_modules/@vue/shared/dist/shared.esm-bundler.js
var shared_esm_bundler = __webpack_require__(13053);
// EXTERNAL MODULE: ../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js + 1 modules
var runtime_dom_esm_bundler = __webpack_require__(90996);
;// CONCATENATED MODULE: ../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/panels/codePreview/CodePreview.vue?vue&type=template&id=5ed04369&ts=true

const _hoisted_1 = {
  key: 0,
  class: "text-center"
};
const _hoisted_2 = { key: 1 };
const _hoisted_3 = {
  key: 2,
  class: "flex"
};
const _hoisted_4 = { class: "" };
const _hoisted_5 = { class: "no-bullet tabs-container disable-select text-xs pb-2 pl-2" };
const _hoisted_6 = ["onClick"];
const _hoisted_7 = {
  key: 0,
  class: "text-right flex-1 whitespace-nowrap text-xs px-2"
};
const _hoisted_8 = ["for"];
const _hoisted_9 = ["id", "name", "checked"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_EmptyState = (0,runtime_core_esm_bundler/* resolveComponent */.up)("EmptyState");
  const _component_MonacoReadonly = (0,runtime_core_esm_bundler/* resolveComponent */.up)("MonacoReadonly");
  return (0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)(
    "div",
    {
      class: "Panel CodePreview full_height_container grid-y overflow-hidden",
      onPointermove: _cache[1] || (_cache[1] = //@ts-ignore
      (...args) => _ctx.on_pointer_move && _ctx.on_pointer_move(...args))
    },
    [
      _ctx.displayedName ? ((0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)(
        "div",
        _hoisted_1,
        (0,shared_esm_bundler/* toDisplayString */.zw)(_ctx.displayedName),
        1
        /* TEXT */
      )) : ((0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)("div", _hoisted_2, [
        (0,runtime_core_esm_bundler/* createVNode */.Wm)(_component_EmptyState, {
          title: "No GL or JS node selected",
          subtitle: "Select any GLSL or JS node (or its parent node) to display the\n				generated code"
        })
      ])),
      _ctx.displayedName ? ((0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)("div", _hoisted_3, [
        (0,runtime_core_esm_bundler/* createElementVNode */._)("div", _hoisted_4, [
          (0,runtime_core_esm_bundler/* createElementVNode */._)("ul", _hoisted_5, [
            ((0,runtime_core_esm_bundler/* openBlock */.wg)(true), (0,runtime_core_esm_bundler/* createElementBlock */.iD)(
              runtime_core_esm_bundler/* Fragment */.HY,
              null,
              (0,runtime_core_esm_bundler/* renderList */.Ko)(_ctx.shaderNames, (_, i) => {
                return (0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)("li", {
                  onClick: ($event) => _ctx.setCurrentShaderIndex(i),
                  class: (0,shared_esm_bundler/* normalizeClass */.C_)([[_ctx.tabClassObjects[i], _ctx.tabActiveStates[i] ? "opacity-100" : "opacity-70"], "px-4 py-1 shader-tab border-b-2 border-text-white text-white hover:border-text-white hover:text-white"])
                }, (0,shared_esm_bundler/* toDisplayString */.zw)(_ctx.shaderNames[i]), 11, _hoisted_6);
              }),
              256
              /* UNKEYED_FRAGMENT */
            ))
          ])
        ]),
        _ctx.displayExpandToggle ? ((0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)("div", _hoisted_7, [
          (0,runtime_core_esm_bundler/* createElementVNode */._)("label", {
            for: _ctx.expandCheckboxId,
            class: "ml-2 text-text cursor-pointer disable-select inline"
          }, " Expand Shader ", 8, _hoisted_8),
          (0,runtime_core_esm_bundler/* withDirectives */.wy)((0,runtime_core_esm_bundler/* createElementVNode */._)("input", {
            type: "checkbox",
            class: "h-4 w-4 text-emerald-600 border-slate-800 rounded cursor-pointer focus:outline-none bg-black ml-2",
            id: _ctx.expandCheckboxId,
            name: _ctx.expandCheckboxId,
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => _ctx.expandShader = $event),
            checked: _ctx.expandShader
          }, null, 8, _hoisted_9), [
            [runtime_dom_esm_bundler.vModelCheckbox, _ctx.expandShader]
          ])
        ])) : (0,runtime_core_esm_bundler/* createCommentVNode */.kq)("v-if", true)
      ])) : (0,runtime_core_esm_bundler/* createCommentVNode */.kq)("v-if", true),
      _ctx.editorDisplayed && _ctx.displayedCode ? ((0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createBlock */.j4)(_component_MonacoReadonly, {
        key: 3,
        content: _ctx.displayedCode,
        highlightedLines: _ctx.highlightedLines,
        language: _ctx.monacoLanguage,
        uniqueId: _ctx.editorUniqueId,
        onToggleFullScreen: _ctx.toggleFullScreen
      }, null, 8, ["content", "highlightedLines", "language", "uniqueId", "onToggleFullScreen"])) : (0,runtime_core_esm_bundler/* createCommentVNode */.kq)("v-if", true)
    ],
    32
    /* HYDRATE_EVENTS */
  );
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/CodePreview.vue?vue&type=template&id=5ed04369&ts=true

// EXTERNAL MODULE: ../src/editor/components/mixins/SelectedNode.ts
var SelectedNode = __webpack_require__(47392);
;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/mixins/LayoutData.ts

var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

function SetupLayoutData(props, setupLinkIndexReturn) {
  (0,runtime_core_esm_bundler/* onBeforeMount */.wF)(() => {
    fromJSON(props.init_layout_data);
  });
  function fromJSON(json) {
    setupLinkIndexReturn.fromJSON(json);
  }
  function layoutData() {
    return __spreadValues({}, setupLinkIndexReturn.toJSON());
  }
  return { fromJSON, layoutData };
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/mixins/EventKey.ts

function SetupEventKey() {
  function onKeypress(event) {
    return false;
  }
  function onKeydown(event) {
    return false;
  }
  function onKeyup(event) {
    return false;
  }
  return {
    onKeypress,
    onKeydown,
    onKeyup
  };
}

// EXTERNAL MODULE: ../src/editor/helpers/KeyEventsDispatcher.ts
var KeyEventsDispatcher = __webpack_require__(72359);
;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/mixins/EventMouse.ts


function SetupEventMouse(options) {
  const { event_key_options } = options;
  function on_pointer_move(event) {
    KeyEventsDispatcher/* KeyEventsDispatcher.instance */.s.instance().registerProcessor(event_key_options);
  }
  return {
    on_pointer_move
  };
}

// EXTERNAL MODULE: ../src/editor/store/controllers/StoreController.ts + 44 modules
var StoreController = __webpack_require__(72555);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/NodeContext.ts
var NodeContext = __webpack_require__(52070);
;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/updater/Common.ts

var CodeLanguage = /* @__PURE__ */ ((CodeLanguage2) => {
  CodeLanguage2["UNKNOWN"] = "unknown";
  CodeLanguage2["GL"] = "gl";
  CodeLanguage2["JS"] = "js";
  return CodeLanguage2;
})(CodeLanguage || {});
var CodeDisplayer = /* @__PURE__ */ ((CodeDisplayer2) => {
  CodeDisplayer2["UNKNOWN"] = "unknown";
  CodeDisplayer2["FRAGMENT_ONLY"] = "fragmentOnly";
  CodeDisplayer2["VERTEX_AND_FRAGMENT"] = "vertexAndFragment";
  CodeDisplayer2["MULTI"] = "multi";
  CodeDisplayer2["ACTOR"] = "actor";
  CodeDisplayer2["ACTOR_VELOCITY_COLLIDER"] = "actorVelocityCollider";
  return CodeDisplayer2;
})(CodeDisplayer || {});

// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/poly/registers/nodes/types/Sop.ts
var Sop = __webpack_require__(58986);
;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/mixins/SetupDisplayedNode.ts






function _isGlBuilderNode(node) {
  const builderMat = node;
  if (builderMat.assemblerController && builderMat.assemblerController()) {
    return true;
  }
  return false;
}
function _isJsBuilderNode(node) {
  const builderJs = node;
  if (builderJs.assemblerController && builderJs.assemblerController()) {
    return true;
  }
  return false;
}
function SetupDisplayedNode(options) {
  const { currentJSONNode, displayedNodeId, codeData } = options;
  (0,runtime_core_esm_bundler/* onMounted */.bv)(_checkDisplayedNodeId);
  const nodeId = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
    var _a;
    return (_a = currentJSONNode.value) == null ? void 0 : _a.graph_node_id;
  });
  (0,runtime_core_esm_bundler/* watch */.YP)(nodeId, _checkDisplayedNodeId);
  function _checkDisplayedNodeId() {
    const id = nodeId.value;
    codeData.value.language = CodeLanguage.UNKNOWN;
    codeData.value.displayer = CodeDisplayer.UNKNOWN;
    if (id == null) {
      return;
    }
    const node = StoreController/* StoreController.engine.node */.F.engine.node(id);
    if (!node) {
      return;
    }
    const _applyActorNetwork = (_node) => {
      return;
    };
    const _applyGlParent = (_node) => {
      const context2 = _node.context();
      const type = _node.type();
      switch (context2) {
        case NodeContext/* NodeContext.SOP */.sy.SOP: {
          switch (type) {
            case Sop/* SopType.CLOTH_SOLVER */.aB.CLOTH_SOLVER: {
              displayedNodeId.value = _node.graphNodeId();
              codeData.value.language = CodeLanguage.GL;
              codeData.value.displayer = CodeDisplayer.MULTI;
              break;
            }
            case Sop/* SopType.PARTICLES_SYSTEM_GPU */.aB.PARTICLES_SYSTEM_GPU: {
              displayedNodeId.value = _node.graphNodeId();
              codeData.value.language = CodeLanguage.GL;
              codeData.value.displayer = CodeDisplayer.MULTI;
              break;
            }
          }
        }
      }
    };
    const _applyJsParent = (_node) => {
      const context2 = _node.context();
      const type = _node.type();
      switch (context2) {
        case NodeContext/* NodeContext.SOP */.sy.SOP: {
          switch (type) {
            case Sop/* SopType.ACTOR */.aB.ACTOR:
            case Sop/* SopType.ACTOR_INSTANCE */.aB.ACTOR_INSTANCE:
            case Sop/* SopType.ACTOR_POINT */.aB.ACTOR_POINT:
            case Sop/* SopType.ENTITY_BUILDER */.aB.ENTITY_BUILDER:
            case Sop/* SopType.INSTANCE_BUILDER */.aB.INSTANCE_BUILDER:
            case Sop/* SopType.OBJECT_BUILDER */.aB.OBJECT_BUILDER:
            case Sop/* SopType.POINT_BUILDER */.aB.POINT_BUILDER:
            case Sop/* SopType.SDF_BUILDER */.aB.SDF_BUILDER: {
              displayedNodeId.value = _node.graphNodeId();
              codeData.value.language = CodeLanguage.JS;
              codeData.value.displayer = CodeDisplayer.ACTOR;
              return;
            }
            case Sop/* SopType.TET_SOFT_BODY_SOLVER */.aB.TET_SOFT_BODY_SOLVER: {
              displayedNodeId.value = _node.graphNodeId();
              codeData.value.language = CodeLanguage.JS;
              codeData.value.displayer = CodeDisplayer.ACTOR_VELOCITY_COLLIDER;
              return;
            }
          }
        }
      }
    };
    if (node.type() == NodeContext/* NetworkNodeType.ACTOR */.kX.ACTOR) {
      return _applyActorNetwork(node);
    }
    const context = node.context();
    switch (context) {
      case NodeContext/* NodeContext.MAT */.sy.MAT: {
        const builderMat = node;
        if (_isGlBuilderNode(builderMat)) {
          displayedNodeId.value = builderMat.graphNodeId();
          codeData.value.language = CodeLanguage.GL;
          codeData.value.displayer = CodeDisplayer.VERTEX_AND_FRAGMENT;
          return;
        }
      }
      case NodeContext/* NodeContext.GL */.sy.GL: {
        codeData.value.language = CodeLanguage.GL;
        const parentMAT = node.parentController.firstAncestorWithContext(NodeContext/* NodeContext.MAT */.sy.MAT);
        if (parentMAT) {
          const mat = parentMAT;
          const builderMat = mat;
          if (_isGlBuilderNode(builderMat)) {
            displayedNodeId.value = builderMat.graphNodeId();
            codeData.value.displayer = CodeDisplayer.VERTEX_AND_FRAGMENT;
            return;
          }
        }
        const parentCOP = node.parentController.firstAncestorWithContext(NodeContext/* NodeContext.COP */.sy.COP);
        if (parentCOP) {
          const cop = parentCOP;
          const builderCop = cop;
          if (_isGlBuilderNode(builderCop)) {
            displayedNodeId.value = builderCop.graphNodeId();
            codeData.value.displayer = CodeDisplayer.FRAGMENT_ONLY;
            return;
          }
        }
        const parentPOST = node.parentController.firstAncestorWithContext(NodeContext/* NodeContext.POST */.sy.POST);
        if (parentPOST) {
          const post = parentPOST;
          const builderPost = post;
          if (_isGlBuilderNode(builderPost)) {
            displayedNodeId.value = builderPost.graphNodeId();
            codeData.value.displayer = CodeDisplayer.FRAGMENT_ONLY;
            return;
          }
        }
        const parentSOP = node.parentController.firstAncestorWithContext(NodeContext/* NodeContext.SOP */.sy.SOP);
        if (parentSOP) {
          const sop = parentSOP;
          const particles = sop;
          if (_isGlBuilderNode(particles)) {
            displayedNodeId.value = particles.graphNodeId();
            codeData.value.displayer = CodeDisplayer.MULTI;
            return;
          }
        }
      }
      case NodeContext/* NodeContext.JS */.sy.JS: {
        codeData.value.language = CodeLanguage.JS;
        const parentSOP = node.parentController.firstAncestorWithContext(NodeContext/* NodeContext.SOP */.sy.SOP);
        if (parentSOP) {
          if (_isJsBuilderNode(parentSOP)) {
            _applyJsParent(parentSOP);
            return;
          }
        } else {
          const parentActorsNetwork = node.parentController.findParent(
            (n) => n.type() == NodeContext/* NetworkNodeType.ACTOR */.kX.ACTOR
          );
          if (parentActorsNetwork) {
            return _applyActorNetwork(parentActorsNetwork);
          }
        }
      }
      case NodeContext/* NodeContext.SOP */.sy.SOP: {
        _applyJsParent(node);
        if (codeData.value.language != CodeLanguage.UNKNOWN) {
          return;
        }
        _applyGlParent(node);
      }
    }
  }
  return {};
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/updater/_Base.ts

class BaseCodeDisplayer {
  static clear(shadersByName, shaderNames) {
    shaderNames.value.splice(0, shaderNames.value.length);
    const namesInShaderByName = Object.keys(shadersByName.value);
    for (let shaderName of namesInShaderByName) {
      delete shadersByName.value[shaderName];
    }
  }
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/updater/FragmentOnly.ts

var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

class FragmentOnlyCodeDisplayer {
  static update(node, shadersByName, shaderNames) {
    return __async(this, null, function* () {
      yield node.compute();
      BaseCodeDisplayer.clear(shadersByName, shaderNames);
      const fragment = node.shaders_by_name().fragment;
      shadersByName.value["fragment"] = fragment || null;
      shaderNames.value.push("fragment");
    });
  }
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/updater/FunctionData.ts

var FunctionData_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

class FunctionDataCodeDisplayer {
  static update(node, shadersByName, shaderNames) {
    return FunctionData_async(this, null, function* () {
      var _a;
      yield node.compute();
      BaseCodeDisplayer.clear(shadersByName, shaderNames);
      const code = (_a = node.functionData()) == null ? void 0 : _a.functionBody;
      shadersByName.value["main"] = code || "";
      shaderNames.value.push("main");
    });
  }
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/updater/FunctionDataVelocityCollider.ts

var FunctionDataVelocityCollider_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

class FunctionDataVelocityColliderCodeDisplayer {
  static update(node, shadersByName, shaderNames) {
    return FunctionDataVelocityCollider_async(this, null, function* () {
      var _a, _b;
      yield node.compute();
      BaseCodeDisplayer.clear(shadersByName, shaderNames);
      const codeVelocity = (_a = node.functionData()) == null ? void 0 : _a.functionBody.velocity;
      const codeCollider = (_b = node.functionData()) == null ? void 0 : _b.functionBody.collider;
      shadersByName.value["velocity"] = codeVelocity || "";
      shadersByName.value["collider"] = codeCollider || "";
      shaderNames.value.push("velocity");
      shaderNames.value.push("collider");
    });
  }
}

// EXTERNAL MODULE: ../@polygonjs/polygonjs/node_modules/three/build/three.module.js
var three_module = __webpack_require__(21410);
;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/CompileHelper.ts

var CompileHelper_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};





const _MaterialCompileHelper = class {
  static compile(matNode) {
    return CompileHelper_async(this, null, function* () {
      const renderer = yield StoreController/* StoreController.engine.scene.renderersRegister.waitForRenderer */.F.engine.scene.renderersRegister.waitForRenderer();
      if (!renderer) {
        console.error("no renderer found");
        return;
      }
      let material;
      if (matNode instanceof three_module.Material) {
        material = matNode;
      } else {
        material = yield matNode.material();
      }
      this._mesh.material = material;
      renderer.compile(this._mesh, this._camera);
    });
  }
  static _createMatCompileScene() {
    this._scene = new three_module.Scene();
    this._mesh = new three_module.Mesh(new three_module.BoxGeometry(1, 1, 1));
    this._mesh.frustumCulled = false;
    this._camera = new three_module.PerspectiveCamera();
    this._camera.position.z = 5;
    this._camera.updateMatrix();
    this._scene.add(this._mesh);
    this._scene.add(this._camera);
    return this._scene;
  }
};
let MaterialCompileHelper = _MaterialCompileHelper;
MaterialCompileHelper._scene = _MaterialCompileHelper._createMatCompileScene();
MaterialCompileHelper._camera = new three_module.PerspectiveCamera();
MaterialCompileHelper._mesh = new three_module.Mesh();

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/updater/VertexAndFragment.ts

var VertexAndFragment_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};


class VertexAndFragmentCodeDisplayer {
  static update(node, shadersByName, shaderNames) {
    return VertexAndFragment_async(this, null, function* () {
      const shaderMaterial = yield node.material();
      yield node.compute();
      yield MaterialCompileHelper.compile(shaderMaterial);
      BaseCodeDisplayer.clear(shadersByName, shaderNames);
      if (shaderMaterial.vertexShader) {
        shadersByName.value["vertex"] = shaderMaterial.vertexShader;
        shaderNames.value.push("vertex");
      }
      if (shaderMaterial.fragmentShader) {
        shadersByName.value["fragment"] = shaderMaterial.fragmentShader;
        shaderNames.value.push("fragment");
      }
    });
  }
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/helpers/updater/MultiShader.ts

var MultiShader_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

class MultiShaderCodeDisplayer {
  static update(node, shadersByName, shaderNames) {
    return MultiShader_async(this, null, function* () {
      yield node.compute();
      BaseCodeDisplayer.clear(shadersByName, shaderNames);
      const nodeShadersByName = node.shadersByName();
      const nodeShaderNames = [];
      nodeShadersByName.forEach((shader, shaderName) => {
        nodeShaderNames.push(shaderName);
      });
      for (let shaderName of nodeShaderNames) {
        const shader = nodeShadersByName.get(shaderName);
        if (shader) {
          shadersByName.value[shaderName] = shader;
          shaderNames.value.push(shaderName);
        }
      }
    });
  }
}

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/mixins/SetupUpdateCode.ts

var SetupUpdateCode_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};








function SetupUpdateCode(options) {
  const { displayedNodeId, displayedShaderIndex, shaderNames, shadersByName, codeData } = options;
  (0,runtime_core_esm_bundler/* onUnmounted */.Ah)(_unListenToChangesForCurrentNode);
  (0,runtime_core_esm_bundler/* watch */.YP)(displayedNodeId, (newId, oldId) => {
    if (oldId != null) {
      _unListenToChanges(oldId);
    }
    if (newId != null) {
      _listenToChanges(newId);
    }
    _updateCodePreview();
  });
  const DIRTY_CALLBACK_NAME = "codePreviewPanel";
  function _listenToChanges(nodeId) {
    const node = StoreController/* StoreController.engine.node */.F.engine.node(nodeId);
    if (!node) {
      console.warn("no node");
      return;
    }
    node.dirtyController.addPostDirtyHook(DIRTY_CALLBACK_NAME, _updateCodePreview);
    const compilationController = node.compilationController;
    if (compilationController) {
      compilationController.addOnCompilationCompleted(_updateCodePreview);
    }
  }
  function _unListenToChanges(nodeId) {
    const node = StoreController/* StoreController.engine.node */.F.engine.node(nodeId);
    if (!node) {
      return;
    }
    node.dirtyController.removePostDirtyHook(DIRTY_CALLBACK_NAME);
    const compilationController = node.compilationController;
    if (compilationController) {
      compilationController.removeOnCompilationCompleted(_updateCodePreview);
    }
  }
  function _unListenToChangesForCurrentNode() {
    if (displayedNodeId.value == null) {
      return;
    }
    _unListenToChanges(displayedNodeId.value);
  }
  function _clearShaders() {
    shaderNames.value.splice(0, shaderNames.value.length);
    const namesInShaderByName = Object.keys(shadersByName.value);
    for (let shaderName of namesInShaderByName) {
      delete shadersByName.value[shaderName];
    }
  }
  function _updateCodePreview() {
    return SetupUpdateCode_async(this, null, function* () {
      const nodeId = displayedNodeId.value;
      if (!nodeId) {
        return;
      }
      const node = StoreController/* StoreController.engine.node */.F.engine.node(nodeId);
      if (!node) {
        return;
      }
      _clearShaders();
      switch (codeData.value.language) {
        case CodeLanguage.JS: {
          switch (codeData.value.displayer) {
            case CodeDisplayer.ACTOR: {
              yield FunctionDataCodeDisplayer.update(
                node,
                shadersByName,
                shaderNames
              );
              break;
            }
            case CodeDisplayer.ACTOR_VELOCITY_COLLIDER: {
              yield FunctionDataVelocityColliderCodeDisplayer.update(
                node,
                shadersByName,
                shaderNames
              );
              break;
            }
          }
        }
        case CodeLanguage.GL: {
          switch (codeData.value.displayer) {
            case CodeDisplayer.FRAGMENT_ONLY: {
              yield FragmentOnlyCodeDisplayer.update(node, shadersByName, shaderNames);
              break;
            }
            case CodeDisplayer.VERTEX_AND_FRAGMENT: {
              yield VertexAndFragmentCodeDisplayer.update(
                node,
                shadersByName,
                shaderNames
              );
              break;
            }
            case CodeDisplayer.MULTI: {
              yield MultiShaderCodeDisplayer.update(
                node,
                shadersByName,
                shaderNames
              );
              break;
            }
          }
          break;
        }
      }
      displayedShaderIndex.value = Math.min(displayedShaderIndex.value, shaderNames.value.length - 1);
    });
  }
  return {};
}

// EXTERNAL MODULE: ../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js + 1 modules
var reactivity_esm_bundler = __webpack_require__(61334);
// EXTERNAL MODULE: ../src/editor/components/panels/common/LinkIndex.ts
var LinkIndex = __webpack_require__(44822);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/Type.ts
var Type = __webpack_require__(19037);
;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/mixins/LocalStorage.ts


const KEY = "shaderCodePreview-displayedShaderIndex";
function SetupLocalStorage(options) {
  function saveToLocalStorage() {
    localStorage.setItem(KEY, `${options.displayedShaderIndex.value}`);
  }
  function loadFromLocalStorage() {
    return localStorage.getItem(KEY);
  }
  const current = loadFromLocalStorage();
  if (current) {
    const currentInt = parseInt(current);
    if (Type/* CoreType.isNumber */.MR.isNumber(currentInt) && !Type/* CoreType.isNaN */.MR.isNaN(currentInt)) {
      options.displayedShaderIndex.value = currentInt;
    }
  }
  return {
    saveToLocalStorage,
    loadFromLocalStorage
  };
}

;// CONCATENATED MODULE: ../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../node_modules/vue-loader/dist/templateLoader.js??ruleSet[1].rules[2]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/widgets/monaco/MonacoReadonly.vue?vue&type=template&id=b7c5692a&ts=true

const MonacoReadonlyvue_type_template_id_b7c5692a_ts_true_hoisted_1 = { class: "MonacoReadonly" };
const MonacoReadonlyvue_type_template_id_b7c5692a_ts_true_hoisted_2 = {
  class: "monaco-readonly-container",
  ref: "editorElement"
};
function MonacoReadonlyvue_type_template_id_b7c5692a_ts_true_render(_ctx, _cache, $props, $setup, $data, $options) {
  return (0,runtime_core_esm_bundler/* openBlock */.wg)(), (0,runtime_core_esm_bundler/* createElementBlock */.iD)("div", MonacoReadonlyvue_type_template_id_b7c5692a_ts_true_hoisted_1, [
    (0,runtime_core_esm_bundler/* createElementVNode */._)(
      "div",
      {
        class: "monaco-editor-events-catcher",
        onKeypress: _cache[0] || (_cache[0] = (0,runtime_dom_esm_bundler.withModifiers)(() => {
        }, ["stop"])),
        onKeyup: _cache[1] || (_cache[1] = (0,runtime_dom_esm_bundler.withModifiers)(() => {
        }, ["stop"])),
        onKeydown: _cache[2] || (_cache[2] = (0,runtime_dom_esm_bundler.withModifiers)(() => {
        }, ["stop"]))
      },
      [
        (0,runtime_core_esm_bundler/* createElementVNode */._)(
          "div",
          MonacoReadonlyvue_type_template_id_b7c5692a_ts_true_hoisted_2,
          null,
          512
          /* NEED_PATCH */
        )
      ],
      32
      /* HYDRATE_EVENTS */
    )
  ]);
}

;// CONCATENATED MODULE: ../src/editor/components/widgets/monaco/MonacoReadonly.vue?vue&type=template&id=b7c5692a&ts=true

// EXTERNAL MODULE: include-loader!../node_modules/monaco-editor/esm/vs/editor/editor.api.js + 690 modules
var editor_api = __webpack_require__(99391);
// EXTERNAL MODULE: ../src/editor/components/widgets/monaco/MonacoEditorEnvironment.ts
var MonacoEditorEnvironment = __webpack_require__(29993);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/params/utils/OptionsController.ts
var OptionsController = __webpack_require__(94051);
// EXTERNAL MODULE: ../src/editor/components/widgets/monaco/languages/GLSL.ts
var GLSL = __webpack_require__(55116);
// EXTERNAL MODULE: ../src/editor/components/widgets/monaco/languages/TypescriptController.ts
var TypescriptController = __webpack_require__(1726);
// EXTERNAL MODULE: ../src/editor/components/widgets/monaco/MonacoHotKeys.ts
var MonacoHotKeys = __webpack_require__(77336);
;// CONCATENATED MODULE: ../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/widgets/monaco/MonacoReadonly.vue?vue&type=script&lang=ts
var MonacoReadonlyvue_type_script_lang_ts_async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};







/* harmony default export */ var MonacoReadonlyvue_type_script_lang_ts = ((0,runtime_core_esm_bundler/* defineComponent */.aZ)({
  emit: ["toggleFullScreen"],
  name: "monaco-editor-wrapper",
  props: {
    content: {
      type: String,
      default: ""
    },
    highlightedLines: {
      type: Array,
      default: () => {
        return [];
      }
    },
    language: {
      type: String,
      default: "typescript"
    },
    uniqueId: {
      type: String,
      required: true
    }
  },
  setup(props, context) {
    let monacoEditor;
    const editorElement = (0,reactivity_esm_bundler/* ref */.iH)(null);
    (0,runtime_core_esm_bundler/* onMounted */.bv)(() => MonacoReadonlyvue_type_script_lang_ts_async(this, null, function* () {
      _createEditor();
    }));
    (0,runtime_core_esm_bundler/* onBeforeUnmount */.Jd)(() => {
      if (monacoEditor) {
        monacoEditor.dispose();
      }
    });
    const content = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.content);
    const highlightedLines = (0,runtime_core_esm_bundler/* computed */.Fl)(() => props.highlightedLines);
    (0,runtime_core_esm_bundler/* watch */.YP)(content, () => {
      if (monacoEditor) {
        monacoEditor.setValue(content.value);
        highlightLines();
      }
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(highlightedLines, highlightLines);
    function _createEditor() {
      return MonacoReadonlyvue_type_script_lang_ts_async(this, null, function* () {
        if (!editor_api.editor || !editorElement.value) {
          return;
        }
        MonacoEditorEnvironment/* MonacoEditorEnvironment.setup */.u.setup();
        switch (props.language) {
          case OptionsController/* StringParamLanguage.GLSL */.qs.GLSL: {
            monacoEditor = (0,GLSL/* monacoEditorSetupForGLSL */.x)(content.value, editorElement.value, {
              readOnly: true,
              uniqueId: props.uniqueId
            });
            break;
          }
          case OptionsController/* StringParamLanguage.TYPESCRIPT */.qs.TYPESCRIPT: {
            const _monacoEditor = yield TypescriptController/* MonacoTypescriptController.setupForTypescriptWithoutNode */.f.setupForTypescriptWithoutNode(
              content.value,
              editorElement.value,
              {
                readOnly: true,
                uniqueId: props.uniqueId
              }
            );
            if (_monacoEditor) {
              monacoEditor = _monacoEditor;
            }
            break;
          }
        }
        if (!monacoEditor) {
          return;
        }
        (0,MonacoHotKeys/* monacoEditorAddHotkeys */.t)({
          monacoEditor,
          readonly: true,
          callbacks: {
            togglePanelToFullScreen: toggleFullScreen,
            saveParam: void 0,
            saveParamAndScene: void 0
          }
        });
        highlightLines();
      });
    }
    function toggleFullScreen() {
      context.emit("toggleFullScreen");
    }
    let previousDecoration;
    function highlightLines() {
      if (!monacoEditor) {
        return;
      }
      const newDecorations = highlightedLines.value.map((line) => {
        return {
          range: new editor_api.Range(line + 1, 0, line + 1, 999),
          options: {
            // linesDecorationsClassName: 'rightLineDecoration',
            inlineClassName: "highlightedLine"
          }
        };
      });
      previousDecoration = monacoEditor.deltaDecorations(previousDecoration || [], newDecorations);
    }
    return {
      // CSS_URL,
      editorElement
    };
  }
}));

;// CONCATENATED MODULE: ../src/editor/components/widgets/monaco/MonacoReadonly.vue?vue&type=script&lang=ts
 
// EXTERNAL MODULE: ../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/dist/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-7.use[2]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/widgets/monaco/MonacoReadonly.vue?vue&type=style&index=0&id=b7c5692a&lang=sass
var MonacoReadonlyvue_type_style_index_0_id_b7c5692a_lang_sass = __webpack_require__(35656);
;// CONCATENATED MODULE: ../src/editor/components/widgets/monaco/MonacoReadonly.vue?vue&type=style&index=0&id=b7c5692a&lang=sass

// EXTERNAL MODULE: ../node_modules/vue-loader/dist/exportHelper.js
var exportHelper = __webpack_require__(6959);
;// CONCATENATED MODULE: ../src/editor/components/widgets/monaco/MonacoReadonly.vue




;


const __exports__ = /*#__PURE__*/(0,exportHelper/* default */.Z)(MonacoReadonlyvue_type_script_lang_ts, [['render',MonacoReadonlyvue_type_template_id_b7c5692a_ts_true_render]])

/* harmony default export */ var MonacoReadonly = (__exports__);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/core/ArrayUtils.ts
var ArrayUtils = __webpack_require__(87132);
// EXTERNAL MODULE: ../src/editor/components/widgets/EmptyState.vue + 4 modules
var EmptyState = __webpack_require__(21842);
// EXTERNAL MODULE: ../@polygonjs/polygonjs/src/engine/nodes/gl/code/assemblers/_Base.ts
var _Base = __webpack_require__(59955);
;// CONCATENATED MODULE: ../node_modules/esbuild-loader/dist/index.cjs??clonedRuleSet-2.use[0]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/panels/codePreview/CodePreview.vue?vue&type=script&lang=ts
var CodePreviewvue_type_script_lang_ts_defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var CodePreviewvue_type_script_lang_ts_getOwnPropSymbols = Object.getOwnPropertySymbols;
var CodePreviewvue_type_script_lang_ts_hasOwnProp = Object.prototype.hasOwnProperty;
var CodePreviewvue_type_script_lang_ts_propIsEnum = Object.prototype.propertyIsEnumerable;
var CodePreviewvue_type_script_lang_ts_defNormalProp = (obj, key, value) => key in obj ? CodePreviewvue_type_script_lang_ts_defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var CodePreviewvue_type_script_lang_ts_spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (CodePreviewvue_type_script_lang_ts_hasOwnProp.call(b, prop))
      CodePreviewvue_type_script_lang_ts_defNormalProp(a, prop, b[prop]);
  if (CodePreviewvue_type_script_lang_ts_getOwnPropSymbols)
    for (var prop of CodePreviewvue_type_script_lang_ts_getOwnPropSymbols(b)) {
      if (CodePreviewvue_type_script_lang_ts_propIsEnum.call(b, prop))
        CodePreviewvue_type_script_lang_ts_defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
















/* harmony default export */ var CodePreviewvue_type_script_lang_ts = ((0,runtime_core_esm_bundler/* defineComponent */.aZ)({
  name: "code-preview-panel",
  // @ts-ignore
  components: {
    MonacoReadonly: MonacoReadonly,
    EmptyState: EmptyState/* default */.Z
  },
  props: {
    panelId: {
      type: String,
      default: null
    },
    nodeId: {
      type: Number,
      default: null
    },
    init_layout_data: {
      type: Object,
      default() {
        return {};
      }
    }
  },
  setup(props, { emit }) {
    const setupLinkIndex = (0,LinkIndex/* SetupLinkIndex */.US)(props.init_layout_data.linkIndex);
    const selectionOptions = (0,SelectedNode/* SetupSelectedNode */.d)(setupLinkIndex);
    const shadersByName = (0,reactivity_esm_bundler/* ref */.iH)({});
    const displayedShaderIndex = (0,reactivity_esm_bundler/* ref */.iH)(0);
    const shaderNames = (0,reactivity_esm_bundler/* ref */.iH)([]);
    const expandCheckboxId = (0,reactivity_esm_bundler/* ref */.iH)(`shader-expand-${props.nodeId}`);
    const expandShader = (0,reactivity_esm_bundler/* ref */.iH)(false);
    const displayedNodeId = (0,reactivity_esm_bundler/* ref */.iH)(null);
    const codeData = (0,reactivity_esm_bundler/* ref */.iH)({
      language: CodeLanguage.GL,
      displayer: CodeDisplayer.VERTEX_AND_FRAGMENT
    });
    const displayExpandToggle = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return codeData.value.language == CodeLanguage.GL;
    });
    const monacoLanguage = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return codeData.value.language == CodeLanguage.GL ? OptionsController/* StringParamLanguage.GLSL */.qs.GLSL : OptionsController/* StringParamLanguage.TYPESCRIPT */.qs.TYPESCRIPT;
    });
    const setupLocalStorage = SetupLocalStorage({
      displayedShaderIndex
    });
    (0,runtime_core_esm_bundler/* watch */.YP)(displayedShaderIndex, () => {
      setupLocalStorage.saveToLocalStorage();
    });
    const displayedShaderName = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return shaderNames.value[displayedShaderIndex.value] || shaderNames.value[shaderNames.value.length - 1];
    });
    const displayedCode = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      const code = shadersByName.value[displayedShaderName.value];
      return expandShader.value ? _Base/* BaseGlShaderAssembler.expandShader */.X.expandShader(code) : code;
    });
    const currentJSONNode = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (props.nodeId != null) {
        return StoreController/* StoreController.engine.json_node */.F.engine.json_node(props.nodeId);
      }
      return selectionOptions.first_or_previous_selected_json_node.value;
    });
    const editorUniqueId = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return `${props.nodeId}`;
    });
    const nodeName = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (displayedNodeId.value) {
        const JSONNode = StoreController/* StoreController.engine.json_node */.F.engine.json_node(displayedNodeId.value);
        return JSONNode == null ? void 0 : JSONNode.name;
      }
    });
    const displayedName = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return nodeName.value;
    });
    const editorDisplayed = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return nodeName.value != null;
    });
    function setCurrentShaderIndex(index) {
      displayedShaderIndex.value = index;
    }
    const tabActiveStates = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return shaderNames.value.map((shaderName, i) => i == displayedShaderIndex.value);
    });
    const tabClassObjects = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      return shaderNames.value.map((shaderName, i) => {
        return {
          active: tabActiveStates.value[i]
        };
      });
    });
    const parentNodeId = (0,runtime_core_esm_bundler/* computed */.Fl)(
      () => StoreController/* StoreController.editor.current_node_graph_id */.F.editor.current_node_graph_id(setupLinkIndex.linkIndex.value)
    );
    const parentNodeJSON = (0,runtime_core_esm_bundler/* computed */.Fl)(
      () => parentNodeId.value ? StoreController/* StoreController.engine.json_node */.F.engine.json_node(parentNodeId.value) : null
    );
    const selectedNodeIds = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      var _a;
      return ((_a = parentNodeJSON.value) == null ? void 0 : _a.selection) || [];
    });
    const highlightedLines = (0,runtime_core_esm_bundler/* computed */.Fl)(() => {
      if (!displayedCode.value) {
        return [];
      }
      const parentNode = StoreController/* StoreController.engine.node */.F.engine.node(parentNodeId.value);
      if (!parentNode) {
        return [];
      }
      const parentNodePath = parentNode.path();
      const nodeNames = [];
      ArrayUtils/* ArrayUtils.compact */.BB.compact(
        selectedNodeIds.value.map((id) => {
          var _a;
          return (_a = StoreController/* StoreController.engine.json_node */.F.engine.json_node(id)) == null ? void 0 : _a.name;
        }),
        nodeNames
      );
      const nodePaths = nodeNames.map((nodeName2) => `${parentNodePath}/${nodeName2}`);
      const lineIndices = [];
      const lines = displayedCode.value.split("\n");
      let i = 0;
      for (let line of lines) {
        for (let nodePath of nodePaths) {
          if (line.includes(nodePath)) {
            lineIndices.push(i);
          }
        }
        i++;
      }
      const uniqIndices = [];
      ArrayUtils/* ArrayUtils.uniq */.BB.uniq(lineIndices, uniqIndices);
      return uniqIndices;
    });
    function toggleFullScreen() {
      if (StoreController/* StoreController.editor.panel.fullscreenPanelId */.F.editor.panel.fullscreenPanelId()) {
        StoreController/* StoreController.editor.panel.setFullscreenPanelId */.F.editor.panel.setFullscreenPanelId(null);
      } else {
        StoreController/* StoreController.editor.panel.setFullscreenPanelId */.F.editor.panel.setFullscreenPanelId(props.panelId);
      }
    }
    const event_key_options = SetupEventKey();
    const options = {
      event_key_options: __spreadProps(CodePreviewvue_type_script_lang_ts_spreadValues({}, event_key_options), {
        panelId: props.panelId,
        emit
      })
    };
    const event_mouse_options = SetupEventMouse(options);
    const setupDisplayedNode = SetupDisplayedNode({ currentJSONNode, displayedNodeId, codeData });
    const setupUpdateCode = SetupUpdateCode({
      displayedNodeId,
      displayedShaderIndex,
      shaderNames,
      shadersByName,
      codeData
    });
    return CodePreviewvue_type_script_lang_ts_spreadValues(CodePreviewvue_type_script_lang_ts_spreadValues(CodePreviewvue_type_script_lang_ts_spreadValues(CodePreviewvue_type_script_lang_ts_spreadValues({
      editorUniqueId,
      displayedName,
      editorDisplayed,
      shaderNames,
      displayedCode,
      setCurrentShaderIndex,
      tabClassObjects,
      tabActiveStates,
      highlightedLines,
      expandCheckboxId,
      expandShader,
      toggleFullScreen,
      displayExpandToggle,
      monacoLanguage
    }, SetupLayoutData(props, setupLinkIndex)), event_mouse_options), setupDisplayedNode), setupUpdateCode);
  }
}));

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/CodePreview.vue?vue&type=script&lang=ts
 
// EXTERNAL MODULE: ../node_modules/vue-style-loader/index.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/dist/stylePostLoader.js!../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-7.use[2]!../node_modules/vue-loader/dist/index.js??ruleSet[1].rules[14].use[0]!../src/editor/components/panels/codePreview/CodePreview.vue?vue&type=style&index=0&id=5ed04369&lang=sass
var CodePreviewvue_type_style_index_0_id_5ed04369_lang_sass = __webpack_require__(27673);
;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/CodePreview.vue?vue&type=style&index=0&id=5ed04369&lang=sass

;// CONCATENATED MODULE: ../src/editor/components/panels/codePreview/CodePreview.vue




;


const CodePreview_exports_ = /*#__PURE__*/(0,exportHelper/* default */.Z)(CodePreviewvue_type_script_lang_ts, [['render',render]])

/* harmony default export */ var CodePreview = (CodePreview_exports_);

/***/ }),

/***/ 27673:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(6815);
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.id, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var add = (__webpack_require__(49441)/* ["default"] */ .Z)
var update = add("5706498b", content, false, {});
// Hot Module Replacement
if(false) {}

/***/ }),

/***/ 35656:
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__(67265);
if(content.__esModule) content = content.default;
if(typeof content === 'string') content = [[module.id, content, '']];
if(content.locals) module.exports = content.locals;
// add the styles to the DOM
var add = (__webpack_require__(49441)/* ["default"] */ .Z)
var update = add("3ad49834", content, false, {});
// Hot Module Replacement
if(false) {}

/***/ })

}])
//# sourceMappingURL=src_editor_components_panels_codePreview_CodePreview_vue.ae2e0a35a4dedd1838f1.js.map