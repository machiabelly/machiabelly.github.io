(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_anim_Target_SceneGraph_ts"],{

/***/ 68002:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "n": function() { return /* binding */ addPerspectiveCameraOBJWithOrbitControls; }
/* harmony export */ });

function addPerspectiveCameraOBJWithOrbitControls(root) {
  const perspectiveCamera1 = root.createNode("perspectiveCamera");
  perspectiveCamera1.p.t.set([5, 5, 5]);
  const events1 = perspectiveCamera1.createNode("eventsNetwork");
  const orbitsControls = events1.createNode("cameraOrbitControls");
  perspectiveCamera1.p.controls.setNode(orbitsControls);
  return { perspectiveCamera1 };
}


/***/ }),

/***/ 68042:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _ExampleUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(68002);


function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const geo = root.createNode("geo");
  const roundedBox = geo.createNode("roundedBox");
  const objectProperties = geo.createNode("objectProperties");
  const plane = geo.createNode("plane");
  const copy = geo.createNode("copy");
  objectProperties.setInput(0, roundedBox);
  copy.setInput(0, objectProperties);
  copy.setInput(1, plane);
  roundedBox.p.sizes.set([0.8, 0.8, 0.8]);
  plane.p.size.set([3, 3]);
  objectProperties.p.tname.set(true);
  objectProperties.p.name.set("animTarget");
  copy.flags.display.set(true);
  const animations = root.createNode("animationsNetwork");
  const target = animations.createNode("target");
  target.p.objectMask.set("*animTarget");
  target.p.updateMatrix.set(1);
  const propertyName = animations.createNode("propertyName");
  propertyName.setInput(0, target);
  propertyName.p.name.set("rotation.z");
  const propertyValue = animations.createNode("propertyValue");
  propertyValue.setInput(0, propertyName);
  propertyValue.p.size.set(1);
  propertyValue.p.value1.set(0.5 * Math.PI);
  const duration = animations.createNode("duration");
  duration.setInput(0, propertyValue);
  duration.p.duration.set(0.5);
  const operation = animations.createNode("operation");
  operation.setInput(0, duration);
  operation.p.operation.set(1);
  const easing = animations.createNode("easing");
  easing.setInput(0, operation);
  const position = animations.createNode("position");
  position.setInput(0, easing);
  position.p.offset.set(0.02);
  const null1 = animations.createNode("null");
  null1.setInput(0, position);
  root.createNode("hemisphereLight");
  const { perspectiveCamera1 } = (0,_ExampleUtils__WEBPACK_IMPORTED_MODULE_0__/* .addPerspectiveCameraOBJWithOrbitControls */ .n)(root);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [null1],
    autoLayout: true
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_anim_Target_SceneGraph_ts.0918911d3beeaaffe4c9.js.map