(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_sop_CSS3DObject_basic_ts"],{

/***/ 62033:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    const grid_nodes = {};
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      const planeHelper1_nodes = {};
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return { node: planeHelper1, children: planeHelper1_nodes };
    }
    grid_nodes["planeHelper1"] = create_planeHelper1(grid);
    if (grid.childrenController) {
      grid.childrenController.selection.set([]);
    }
    grid.uiData.setPosition(0, -150);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return { node: grid, children: grid_nodes };
  }
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(200, 200);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_ROP(perspectiveCamera12) {
      var ROP = perspectiveCamera12.createNode("renderersNetwork");
      ROP.setName("ROP");
      const ROP_nodes = {};
      function create_CSS3DRenderer1(ROP2) {
        var CSS3DRenderer1 = ROP2.createNode("CSS3DRenderer");
        CSS3DRenderer1.setName("CSS3DRenderer1");
        const CSS3DRenderer1_nodes = {};
        CSS3DRenderer1.uiData.setComment(
          "With this node, you can set the CSS rules that will be added to your page. In this case, it updates the `.CSS3DObject` class, which is used by the [CSS3DObject](/HTMLElement/CSS3DObject1)"
        );
        CSS3DRenderer1.uiData.setPosition(-50, 150);
        CSS3DRenderer1.p.css.set(`.CSS3DObject {
	will-change: transform;
	color: white;
	background-color: black;
	padding: 5px 10px;
	border: 1px solid blue;
	border-radius: 5px;
	pointer-events: auto;
	user-select: none;
	-webkit-font-smoothing: antialiased;
	-moz-osx-font-smoothing: grayscale;
	text-rendering: optimizeLegibility;
	font-smooth: always;
}`);
        CSS3DRenderer1.params.postCreateSpareParams();
        CSS3DRenderer1.params.runOnSceneLoadHooks();
        return { node: CSS3DRenderer1, children: CSS3DRenderer1_nodes };
      }
      ROP_nodes["CSS3DRenderer1"] = create_CSS3DRenderer1(ROP);
      if (ROP.childrenController) {
        ROP.childrenController.selection.set([]);
      }
      ROP.uiData.setPosition(-200, 150);
      ROP.params.postCreateSpareParams();
      ROP.params.runOnSceneLoadHooks();
      return { node: ROP, children: ROP_nodes };
    }
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.18544564311142359, 0.055960436509450505, 0.30736753678809603]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      if (events1.childrenController) {
        events1.childrenController.selection.set([]);
      }
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["ROP"] = create_ROP(perspectiveCamera1);
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    if (perspectiveCamera1.childrenController) {
      perspectiveCamera1.childrenController.selection.set([]);
    }
    perspectiveCamera1.uiData.setComment(
      "In order to add HTML element to your 3D experiences, you need 2 things:\n\n- a CSS3DObject, which in this case is created inside the [HTMLElement](../HTMLElement) node.\n\n- a CSS3DRenderer on the camera. When the camera is at the obj level like in this scene, it is added via its `CSSRenderer` parameter, from its `render` tab. You can see [how the node is setup](/perspectiveCamera1/ROP/CSS3DRenderer1)"
    );
    perspectiveCamera1.uiData.setPosition(-150, 200);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([3.0161526633531355, 1.1787657307191874, 2.814738208647524]);
    perspectiveCamera1.p.r.set([-22.723127930556515, 44.66532130223666, 16.403892417511617]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.p.setCSSRenderer.set(true);
    perspectiveCamera1.p.CSSRenderer.set("ROP/CSS3DRenderer1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_HTMLElement(parentNode) {
    var HTMLElement = parentNode.createNode("geo");
    HTMLElement.setName("HTMLElement");
    const HTMLElement_nodes = {};
    function create_CSS3DObject1(HTMLElement2) {
      var CSS3DObject1 = HTMLElement2.createNode("CSS3DObject");
      CSS3DObject1.setName("CSS3DObject1");
      const CSS3DObject1_nodes = {};
      CSS3DObject1.uiData.setComment(
        "This node is what creates the HTML elements inside your 3D experiences. Note that for it to be visible, it needs a [CSSRenderer](/perspectiveCamera1/ROP/CSS3DRenderer1) node added to the camera.\n\nAnd you can change the html `content`, `id`, `class`3"
      );
      CSS3DObject1.p.html.set("<div>this is an html element</div>");
      CSS3DObject1.uiData.setPosition(0, 250);
      CSS3DObject1.params.postCreateSpareParams();
      CSS3DObject1.params.runOnSceneLoadHooks();
      return { node: CSS3DObject1, children: CSS3DObject1_nodes };
    }
    function create_transform1(HTMLElement2) {
      var transform1 = HTMLElement2.createNode("transform");
      transform1.setName("transform1");
      const transform1_nodes = {};
      transform1.uiData.setPosition(0, 600);
      transform1.flags.display.set(true);
      transform1.p.applyOn.set(1);
      transform1.p.t.set([1.3726335552229398, 0.7530751438336716, 0]);
      transform1.params.postCreateSpareParams();
      transform1.params.runOnSceneLoadHooks();
      return { node: transform1, children: transform1_nodes };
    }
    HTMLElement_nodes["CSS3DObject1"] = create_CSS3DObject1(HTMLElement);
    HTMLElement_nodes["transform1"] = create_transform1(HTMLElement);
    HTMLElement_nodes["transform1"].node.setInput(0, HTMLElement_nodes["CSS3DObject1"].node);
    if (HTMLElement.childrenController) {
      HTMLElement.childrenController.selection.set([]);
    }
    HTMLElement.uiData.setComment("[Enter this node](.) to see how it is setup");
    HTMLElement.uiData.setPosition(0, -50);
    HTMLElement.flags.display.set(true);
    HTMLElement.params.postCreateSpareParams();
    HTMLElement.params.runOnSceneLoadHooks();
    return { node: HTMLElement, children: HTMLElement_nodes };
  }
  scene_root_nodes["grid"] = create_grid(root);
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["HTMLElement"] = create_HTMLElement(root);
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: []
    //scene_root_nodes['HTMLElement'].node.children(),
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_sop_CSS3DObject_basic_ts.af6b735e96bc1963dc46.js.map