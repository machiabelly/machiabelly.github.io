(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_MeshToon_ts"],{

/***/ 4261:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });

function createData(options) {
  const { scene } = options;
  const root = scene.root();
  function create_geo1(parentNode) {
    var geo12 = parentNode.createNode("geo");
    geo12.setName("geo1");
    function create_MAT(geo13) {
      var MAT = geo13.createNode("materialsNetwork");
      MAT.setName("MAT");
      function create_meshToon1(MAT2) {
        var meshToon1 = MAT2.createNode("meshToon");
        meshToon1.setName("meshToon1");
        meshToon1.uiData.setPosition(0, -50);
        meshToon1.p.color.set([0.8823529411764706, 0.5058823529411764, 0.2549019607843137]);
        meshToon1.params.postCreateSpareParams();
        meshToon1.params.runOnSceneLoadHooks();
        return meshToon1;
      }
      create_meshToon1(MAT);
      MAT.uiData.setPosition(-350, 200);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return MAT;
    }
    function create_fileGLTF1(geo13) {
      var fileGLTF12 = geo13.createNode("fileGLTF");
      fileGLTF12.setName("fileGLTF1");
      fileGLTF12.uiData.setPosition(-150, -50);
      fileGLTF12.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/models/resources/quaternius/animals/Horse.gltf"
      );
      fileGLTF12.params.postCreateSpareParams();
      fileGLTF12.params.runOnSceneLoadHooks();
      return fileGLTF12;
    }
    function create_material1(geo13) {
      var material12 = geo13.createNode("material");
      material12.setName("material1");
      material12.uiData.setPosition(-150, 200);
      material12.flags.display.set(true);
      material12.p.material.set("../MAT/meshToon1");
      material12.params.postCreateSpareParams();
      material12.params.runOnSceneLoadHooks();
      return material12;
    }
    function create_transform1(geo13) {
      var transform12 = geo13.createNode("transform");
      transform12.setName("transform1");
      transform12.uiData.setPosition(-150, 50);
      transform12.p.applyOn.set(1);
      transform12.p.scale.set(0.25);
      transform12.params.postCreateSpareParams();
      transform12.params.runOnSceneLoadHooks();
      return transform12;
    }
    create_MAT(geo12);
    var fileGLTF1 = create_fileGLTF1(geo12);
    var material1 = create_material1(geo12);
    var transform1 = create_transform1(geo12);
    material1.setInput(0, transform1);
    transform1.setInput(0, fileGLTF1);
    geo12.uiData.setPosition(-50, -150);
    geo12.flags.display.set(true);
    geo12.params.postCreateSpareParams();
    geo12.params.runOnSceneLoadHooks();
    return geo12;
  }
  function create_grid(parentNode) {
    var grid = parentNode.createNode("geo");
    grid.setName("grid");
    function create_planeHelper1(grid2) {
      var planeHelper1 = grid2.createNode("planeHelper");
      planeHelper1.setName("planeHelper1");
      planeHelper1.uiData.setPosition(0, 0);
      planeHelper1.flags.display.set(true);
      planeHelper1.params.postCreateSpareParams();
      planeHelper1.params.runOnSceneLoadHooks();
      return planeHelper1;
    }
    create_planeHelper1(grid);
    grid.uiData.setPosition(-50, -250);
    grid.flags.display.set(true);
    grid.params.postCreateSpareParams();
    grid.params.runOnSceneLoadHooks();
    return grid;
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera12 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera12.setName("perspectiveCamera1");
    function create_events1(perspectiveCamera13) {
      var events1 = perspectiveCamera13.createNode("eventsNetwork");
      events1.setName("events1");
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([0.09038083430380983, 0.6798456202391073, 0.28455932605119966]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return cameraOrbitControls1;
      }
      create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return events1;
    }
    create_events1(perspectiveCamera12);
    perspectiveCamera12.uiData.setPosition(-200, 100);
    perspectiveCamera12.flags.display.set(true);
    perspectiveCamera12.p.t.set([1.4983708220318666, 0.9304216098655744, 1.6569575758310338]);
    perspectiveCamera12.p.r.set([-10.347235096885514, 45.26375735149414, 7.3899140981050175]);
    perspectiveCamera12.p.s.set([0.9999999999999999, 0.9999999999999999, 0.9999999999999999]);
    perspectiveCamera12.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera12.params.postCreateSpareParams();
    perspectiveCamera12.params.runOnSceneLoadHooks();
    return perspectiveCamera12;
  }
  function create_spotLight1(parentNode) {
    var spotLight12 = parentNode.createNode("spotLight");
    spotLight12.setName("spotLight1");
    spotLight12.uiData.setPosition(200, 200);
    spotLight12.flags.display.set(true);
    spotLight12.p.showHelper.set(true);
    spotLight12.params.postCreateSpareParams();
    spotLight12.params.runOnSceneLoadHooks();
    return spotLight12;
  }
  function create_polarTransform1(parentNode) {
    var polarTransform12 = parentNode.createNode("polarTransform");
    polarTransform12.setName("polarTransform1");
    polarTransform12.uiData.setPosition(200, 50);
    polarTransform12.flags.display.set(false);
    polarTransform12.p.longitude.set(-309.6);
    polarTransform12.p.latitude.set(32.4);
    polarTransform12.p.depth.set(2.2);
    polarTransform12.params.postCreateSpareParams();
    polarTransform12.params.runOnSceneLoadHooks();
    return polarTransform12;
  }
  var geo1 = create_geo1(root);
  create_grid(root);
  var perspectiveCamera1 = create_perspectiveCamera1(root);
  var spotLight1 = create_spotLight1(root);
  var polarTransform1 = create_polarTransform1(root);
  spotLight1.setInput(0, polarTransform1);
  return {
    scene,
    cameraPath: perspectiveCamera1.path(),
    focusedNodes: [geo1.nodesByType("material")[0]],
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_MeshToon_ts.3a194fb90c28f68aab3b.js.map