{"version":3,"file":"src_engine_examples_examples_sop_AttribAddMult_ts.0c847afe890574e3df45.js","mappings":";;;;;;;;;AAYO,SAAS,yCAAyC,MAAuB;AAE/E,QAAM,qBAAqB,KAAK,WAAW,mBAAmB;AAC9D,qBAAmB,EAAE,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;AAEpC,QAAM,UAAU,mBAAmB,WAAW,eAAe;AAC7D,QAAM,iBAAiB,QAAQ,WAAW,qBAAqB;AAC/D,qBAAmB,EAAE,SAAS,QAAQ,cAAc;AAEpD,SAAO,EAAC,mBAAkB;AAC3B;;;;;;;;;;;;;;ACrBuD;AAEhD,SAAS,WAAW,SAA2C;AACrE,QAAM,EAAC,MAAK,IAAI;AAChB,QAAM,OAAO,MAAM,KAAK;AACxB,QAAM,MAAM,KAAK,WAAW,KAAK;AACjC,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC;AAEvB,QAAM,EAAE,SAAS,IAAI,IAAI;AAGzB,QAAM,eAAe,IAAI,WAAW,cAAc;AAClD,eAAa,SAAS,GAAG,KAAK;AAC9B,eAAa,EAAE,KAAK,IAAI,QAAQ;AAGhC,eAAa,EAAE,OAAO,IAAI,aAAa;AAGvC,QAAM,gBAAgB,IAAI,WAAW,eAAe;AACpD,gBAAc,SAAS,GAAG,YAAY;AACtC,gBAAc,EAAE,KAAK,IAAI,QAAQ;AACjC,gBAAc,EAAE,KAAK,IAAI,GAAG;AAG5B,QAAM,QAAQ,IAAI,WAAW,OAAO;AACpC,QAAM,SAAS,GAAG,aAAa;AAC/B,QAAM,EAAE,QAAQ,IAAI,CAAC;AAGrB,QAAM,EAAE,EAAE,IAAI,SAAS;AACvB,QAAM,MAAM,QAAQ,IAAI,IAAI;AAG5B,OAAK,WAAW,iBAAiB;AAEjC,QAAM,EAAC,mBAAkB,IAAI,gGAAwC,CAAC,IAAI;AAE1E,SAAO;AAAA,IACN;AAAA,IACA,YAAY,mBAAmB,KAAK;AAAA,IACpC,cAAc,CAAC,aAAa;AAAA,IAC5B,YAAY;AAAA,EACb;AACD","sources":["webpack:///../src/engine/examples/ExampleUtils.ts","webpack:///../src/engine/examples/examples/sop/AttribAddMult.ts"],"sourcesContent":["import type {BaseNodeType} from './../../../@polygonjs/polygonjs/src/engine/nodes/_Base';\nimport type {RootManagerNode} from './../../../@polygonjs/polygonjs/src/engine/nodes/manager/Root';\n// import {PolyScene} from './../../../@polygonjs/polygonjs/src/engine/scene/PolyScene';\n// export function initDefaultScene(scene: PolyScene) {\n// \tconst root = scene.root();\n\n// \t// create a box and a sphere\n// \tconst geo = root.createNode('geo');\n\n// \treturn {scene, root, geo};\n// }\n\nexport function addPerspectiveCameraOBJWithOrbitControls(root: RootManagerNode) {\n\t// create a camera\n\tconst perspectiveCamera1 = root.createNode('perspectiveCamera');\n\tperspectiveCamera1.p.t.set([5, 5, 5]);\n\t// add orbitControls\n\tconst events1 = perspectiveCamera1.createNode('eventsNetwork');\n\tconst orbitsControls = events1.createNode('cameraOrbitControls');\n\tperspectiveCamera1.p.controls.setNode(orbitsControls);\n\n\treturn {perspectiveCamera1};\n}\n\ninterface ReturnedNodeData {\n\tnode: BaseNodeType;\n\tchildren: Record<string, ReturnedNodeData>;\n}\nexport type ReturnedNodeDataDict = Record<string, ReturnedNodeData>;\n","import type {ExampleData, DataCallbackOptions} from '../../Common';\nimport {addPerspectiveCameraOBJWithOrbitControls} from '../../ExampleUtils';\n\nexport function createData(options: DataCallbackOptions): ExampleData {\n\tconst {scene} = options;\n\tconst root = scene.root();\n\tconst geo = root.createNode('geo');\n\tconst plane = geo.createNode('plane');\n\tplane.p.size.set([4, 4]);\n\t//let's increase the resolution of the plane\n\tplane.p.stepSize.set(0.05);\n\n\t// create an attrib create\n\tconst attribCreate = geo.createNode('attribCreate');\n\tattribCreate.setInput(0, plane);\n\tattribCreate.p.name.set('height');\n\t// here we set the attribute value with an expression\n\t// that depends on the z position of each point\n\tattribCreate.p.value1.set('sin(2*@P.z)');\n\n\t// create the attribAddMult\n\tconst attribAddMult = geo.createNode('attribAddMult');\n\tattribAddMult.setInput(0, attribCreate);\n\tattribAddMult.p.name.set('height');\n\tattribAddMult.p.mult.set(0.5);\n\n\t// create a point SOP to use the height attribute to deform the plane\n\tconst point = geo.createNode('point');\n\tpoint.setInput(0, attribAddMult);\n\tpoint.p.updateY.set(1);\n\t// by setting another expression,\n\t// we set the y position to equal the height attribute\n\tpoint.p.y.set('@height');\n\tpoint.flags.display.set(true);\n\n\t// add a light\n\troot.createNode('hemisphereLight');\n\n\tconst {perspectiveCamera1} = addPerspectiveCameraOBJWithOrbitControls(root);\n\n\treturn {\n\t\tscene,\n\t\tcameraPath: perspectiveCamera1.path(),\n\t\tfocusedNodes: [attribAddMult],\n\t\tautoLayout: true,\n\t};\n}\n// export const sopAttribAddMult = [\n// \tnew Example({\n// \t\tname: `${ExamplePrefix.BY_NODE}/sop/attribAddMult`,\n// \t\tcreateData,\n// \t\trelatedNodes: [AttribAddMultSopNode],\n// \t}),\n// ];\n"],"names":[],"sourceRoot":""}