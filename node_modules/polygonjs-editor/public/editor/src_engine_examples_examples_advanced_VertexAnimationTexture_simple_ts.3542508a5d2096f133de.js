(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_advanced_VertexAnimationTexture_simple_ts"],{

/***/ 76260:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(52070);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  const scene_root_nodes = {};
  function create_geo1(parentNode) {
    var geo1 = parentNode.createNode("geo");
    geo1.setName("geo1");
    const geo1_nodes = {};
    function create_COP(geo12) {
      var COP = geo12.createNode("copNetwork");
      COP.setName("COP");
      const COP_nodes = {};
      function create_imageEXR_P(COP2) {
        var imageEXR_P = COP2.createNode("imageEXR");
        imageEXR_P.setName("imageEXR_P");
        const imageEXR_P_nodes = {};
        imageEXR_P.uiData.setPosition(-200, 0);
        imageEXR_P.p.url.set(
          "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/vat/export/vat_export/tex/vertex_animation_textures1_pos.exr"
        );
        imageEXR_P.p.tcolorSpace.set(true);
        imageEXR_P.p.twrap.set(true);
        imageEXR_P.p.tminFilter.set(true);
        imageEXR_P.p.minFilter.set(1003);
        imageEXR_P.p.tmagFilter.set(true);
        imageEXR_P.p.magFilter.set(1003);
        imageEXR_P.params.postCreateSpareParams();
        imageEXR_P.params.runOnSceneLoadHooks();
        return { node: imageEXR_P, children: imageEXR_P_nodes };
      }
      function create_imageEXR_P2(COP2) {
        var imageEXR_P2 = COP2.createNode("imageEXR");
        imageEXR_P2.setName("imageEXR_P2");
        const imageEXR_P2_nodes = {};
        imageEXR_P2.uiData.setPosition(-200, 150);
        imageEXR_P2.p.url.set(
          "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/vat/export/vat_export/tex/vertex_animation_textures1_pos2.exr"
        );
        imageEXR_P2.p.tcolorSpace.set(true);
        imageEXR_P2.p.twrap.set(true);
        imageEXR_P2.p.tminFilter.set(true);
        imageEXR_P2.p.minFilter.set(1003);
        imageEXR_P2.p.tmagFilter.set(true);
        imageEXR_P2.p.magFilter.set(1003);
        imageEXR_P2.params.postCreateSpareParams();
        imageEXR_P2.params.runOnSceneLoadHooks();
        return { node: imageEXR_P2, children: imageEXR_P2_nodes };
      }
      COP_nodes["imageEXR_P"] = create_imageEXR_P(COP);
      COP_nodes["imageEXR_P2"] = create_imageEXR_P2(COP);
      if (COP.childrenController) {
        COP.childrenController.selection.set([]);
      }
      COP.uiData.setPosition(-150, 200);
      COP.params.postCreateSpareParams();
      COP.params.runOnSceneLoadHooks();
      return { node: COP, children: COP_nodes };
    }
    function create_MAT(geo12) {
      var MAT = geo12.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshPhysicalBuilder1(MAT2) {
        var meshPhysicalBuilder1 = MAT2.createNode("meshPhysicalBuilder");
        meshPhysicalBuilder1.setName("meshPhysicalBuilder1");
        const meshPhysicalBuilder1_nodes = {};
        function create_add1(meshPhysicalBuilder12) {
          var add1 = meshPhysicalBuilder12.createNode("add");
          add1.setName("add1");
          const add1_nodes = {};
          add1.uiData.setPosition(0, -50);
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add0", [0, 0, 0], {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add1", [0, 0, 0], {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          add1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "add2", [0, 0, 0], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          add1.params.postCreateSpareParams();
          add1.params.runOnSceneLoadHooks();
          return { node: add1, children: add1_nodes };
        }
        function create_attribute1(meshPhysicalBuilder12) {
          var attribute1 = meshPhysicalBuilder12.createNode("attribute");
          attribute1.setName("attribute1");
          const attribute1_nodes = {};
          attribute1.uiData.setPosition(-350, 250);
          attribute1.p.name.set("uvVAT");
          attribute1.p.type.set(1);
          attribute1.params.postCreateSpareParams();
          attribute1.params.runOnSceneLoadHooks();
          return { node: attribute1, children: attribute1_nodes };
        }
        function create_divide1(meshPhysicalBuilder12) {
          var divide1 = meshPhysicalBuilder12.createNode("divide");
          divide1.setName("divide1");
          const divide1_nodes = {};
          divide1.uiData.setPosition(-350, -100);
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "div0", 1, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "div1", 1, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          divide1.params.get("div1").set(2);
          divide1.params.postCreateSpareParams();
          divide1.params.runOnSceneLoadHooks();
          return { node: divide1, children: divide1_nodes };
        }
        function create_globals1(meshPhysicalBuilder12) {
          var globals1 = meshPhysicalBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-900, -300);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_mix1(meshPhysicalBuilder12) {
          var mix1 = meshPhysicalBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(100, -200);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          mix1.params.get("blend").set(1);
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_multAdd1(meshPhysicalBuilder12) {
          var multAdd1 = meshPhysicalBuilder12.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-500, -100);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd1.params.get("mult").set(60);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_multAdd2(meshPhysicalBuilder12) {
          var multAdd2 = meshPhysicalBuilder12.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(0, 100);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value", [0, 0, 0], {
            spare: true,
            editable: false,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "preAdd", [0, 0, 0], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "mult", [1, 1, 1], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.params.get("mult").set([57, 57, 57]);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "postAdd", [0, 0, 0], {
            spare: true,
            editable: true,
            computeOnDirty: true,
            dependentOnFoundParam: false
          });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_output1(meshPhysicalBuilder12) {
          var output1 = meshPhysicalBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(300, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_param1(meshPhysicalBuilder12) {
          var param1 = meshPhysicalBuilder12.createNode("param");
          param1.setName("param1");
          const param1_nodes = {};
          param1.uiData.setPosition(-500, 150);
          param1.p.name.set("framesCount");
          param1.params.postCreateSpareParams();
          param1.params.runOnSceneLoadHooks();
          return { node: param1, children: param1_nodes };
        }
        function create_vertexAnimationTexture1(meshPhysicalBuilder12) {
          var vertexAnimationTexture1 = meshPhysicalBuilder12.createNode("vertexAnimationTexture");
          vertexAnimationTexture1.setName("vertexAnimationTexture1");
          const vertexAnimationTexture1_nodes = {};
          vertexAnimationTexture1.uiData.setPosition(-150, 0);
          vertexAnimationTexture1.p.frame.set(2);
          vertexAnimationTexture1.p.framesCount.set(5);
          vertexAnimationTexture1.params.postCreateSpareParams();
          vertexAnimationTexture1.params.runOnSceneLoadHooks();
          return { node: vertexAnimationTexture1, children: vertexAnimationTexture1_nodes };
        }
        meshPhysicalBuilder1_nodes["add1"] = create_add1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["attribute1"] = create_attribute1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["divide1"] = create_divide1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["globals1"] = create_globals1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["mix1"] = create_mix1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["multAdd1"] = create_multAdd1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["multAdd2"] = create_multAdd2(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["output1"] = create_output1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["param1"] = create_param1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["vertexAnimationTexture1"] = create_vertexAnimationTexture1(meshPhysicalBuilder1);
        meshPhysicalBuilder1_nodes["add1"].node.setInput(
          "add0",
          meshPhysicalBuilder1_nodes["globals1"].node,
          "position"
        );
        meshPhysicalBuilder1_nodes["add1"].node.setInput(
          "add1",
          meshPhysicalBuilder1_nodes["vertexAnimationTexture1"].node,
          "position"
        );
        meshPhysicalBuilder1_nodes["divide1"].node.setInput(
          "div0",
          meshPhysicalBuilder1_nodes["multAdd1"].node,
          "val"
        );
        meshPhysicalBuilder1_nodes["mix1"].node.setInput(
          "value0",
          meshPhysicalBuilder1_nodes["globals1"].node,
          "position"
        );
        meshPhysicalBuilder1_nodes["mix1"].node.setInput(
          "value1",
          meshPhysicalBuilder1_nodes["add1"].node,
          "sum"
        );
        meshPhysicalBuilder1_nodes["multAdd1"].node.setInput(
          "value",
          meshPhysicalBuilder1_nodes["globals1"].node,
          "time"
        );
        meshPhysicalBuilder1_nodes["multAdd2"].node.setInput(
          "value",
          meshPhysicalBuilder1_nodes["vertexAnimationTexture1"].node,
          "position"
        );
        meshPhysicalBuilder1_nodes["output1"].node.setInput(
          "position",
          meshPhysicalBuilder1_nodes["add1"].node,
          "sum"
        );
        meshPhysicalBuilder1_nodes["vertexAnimationTexture1"].node.setInput(
          "frame",
          meshPhysicalBuilder1_nodes["divide1"].node,
          "divide"
        );
        meshPhysicalBuilder1_nodes["vertexAnimationTexture1"].node.setInput(
          "framesCount",
          meshPhysicalBuilder1_nodes["param1"].node,
          "val"
        );
        meshPhysicalBuilder1_nodes["vertexAnimationTexture1"].node.setInput(
          "uv",
          meshPhysicalBuilder1_nodes["attribute1"].node,
          "val"
        );
        if (meshPhysicalBuilder1.childrenController) {
          meshPhysicalBuilder1.childrenController.selection.set([]);
        }
        meshPhysicalBuilder1.uiData.setPosition(0, 150);
        meshPhysicalBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "textureP", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.COP */ .sy.COP }
        });
        meshPhysicalBuilder1.params.get("textureP").set("../../COP/imageEXR_P");
        meshPhysicalBuilder1.params.get("textureP").options.setOption("editable", void 0);
        meshPhysicalBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "textureP2", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.COP */ .sy.COP }
        });
        meshPhysicalBuilder1.params.get("textureP2").set("../../COP/imageEXR_P2");
        meshPhysicalBuilder1.params.get("textureP2").options.setOption("editable", void 0);
        meshPhysicalBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.NODE_PATH */ ._.NODE_PATH, "textureN", "", {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true,
          nodeSelection: { context: _polygonjs_polygonjs_src_engine_poly_NodeContext__WEBPACK_IMPORTED_MODULE_1__/* .NodeContext.COP */ .sy.COP }
        });
        meshPhysicalBuilder1.params.get("textureN").set("../../COP/imageEXR_P2");
        meshPhysicalBuilder1.params.get("textureN").options.setOption("editable", void 0);
        meshPhysicalBuilder1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "framesCount", 0, {
          spare: true,
          computeOnDirty: true,
          cook: false,
          dependentOnFoundNode: true
        });
        meshPhysicalBuilder1.params.get("framesCount").set(50);
        meshPhysicalBuilder1.params.get("framesCount").options.setOption("editable", void 0);
        meshPhysicalBuilder1.params.postCreateSpareParams();
        meshPhysicalBuilder1.params.runOnSceneLoadHooks();
        return { node: meshPhysicalBuilder1, children: meshPhysicalBuilder1_nodes };
      }
      MAT_nodes["meshPhysicalBuilder1"] = create_meshPhysicalBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-150, 50);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_attribRename1(geo12) {
      var attribRename1 = geo12.createNode("attribRename");
      attribRename1.setName("attribRename1");
      const attribRename1_nodes = {};
      attribRename1.uiData.setPosition(200, -50);
      attribRename1.p.oldName.set("uv1");
      attribRename1.p.newName.set("uvVAT");
      attribRename1.params.postCreateSpareParams();
      attribRename1.params.runOnSceneLoadHooks();
      return { node: attribRename1, children: attribRename1_nodes };
    }
    function create_fileFBX1(geo12) {
      var fileFBX1 = geo12.createNode("fileFBX");
      fileFBX1.setName("fileFBX1");
      const fileFBX1_nodes = {};
      fileFBX1.uiData.setPosition(200, -450);
      fileFBX1.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/vat/export/vat_export/geo/vertex_animation_textures1_mesh.fbx"
      );
      fileFBX1.params.postCreateSpareParams();
      fileFBX1.params.runOnSceneLoadHooks();
      return { node: fileFBX1, children: fileFBX1_nodes };
    }
    function create_hierarchy1(geo12) {
      var hierarchy1 = geo12.createNode("hierarchy");
      hierarchy1.setName("hierarchy1");
      const hierarchy1_nodes = {};
      hierarchy1.uiData.setPosition(200, -300);
      hierarchy1.p.mode.set(1);
      hierarchy1.params.postCreateSpareParams();
      hierarchy1.params.runOnSceneLoadHooks();
      return { node: hierarchy1, children: hierarchy1_nodes };
    }
    function create_material1(geo12) {
      var material1 = geo12.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(200, 250);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshPhysicalBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_objectProperties1(geo12) {
      var objectProperties1 = geo12.createNode("objectProperties");
      objectProperties1.setName("objectProperties1");
      const objectProperties1_nodes = {};
      objectProperties1.uiData.setPosition(200, -150);
      objectProperties1.p.tcastShadow.set(true);
      objectProperties1.params.postCreateSpareParams();
      objectProperties1.params.runOnSceneLoadHooks();
      return { node: objectProperties1, children: objectProperties1_nodes };
    }
    function create_transform2(geo12) {
      var transform2 = geo12.createNode("transform");
      transform2.setName("transform2");
      const transform2_nodes = {};
      transform2.uiData.setPosition(200, 100);
      transform2.p.applyOn.set(1);
      transform2.p.scale.set(0.01);
      transform2.params.postCreateSpareParams();
      transform2.params.runOnSceneLoadHooks();
      return { node: transform2, children: transform2_nodes };
    }
    geo1_nodes["COP"] = create_COP(geo1);
    geo1_nodes["MAT"] = create_MAT(geo1);
    geo1_nodes["attribRename1"] = create_attribRename1(geo1);
    geo1_nodes["fileFBX1"] = create_fileFBX1(geo1);
    geo1_nodes["hierarchy1"] = create_hierarchy1(geo1);
    geo1_nodes["material1"] = create_material1(geo1);
    geo1_nodes["objectProperties1"] = create_objectProperties1(geo1);
    geo1_nodes["transform2"] = create_transform2(geo1);
    geo1_nodes["attribRename1"].node.setInput(0, geo1_nodes["objectProperties1"].node);
    geo1_nodes["hierarchy1"].node.setInput(0, geo1_nodes["fileFBX1"].node);
    geo1_nodes["material1"].node.setInput(0, geo1_nodes["transform2"].node);
    geo1_nodes["objectProperties1"].node.setInput(0, geo1_nodes["hierarchy1"].node);
    geo1_nodes["transform2"].node.setInput(0, geo1_nodes["attribRename1"].node);
    if (geo1.childrenController) {
      geo1.childrenController.selection.set([]);
    }
    geo1.uiData.setPosition(-50, -350);
    geo1.flags.display.set(true);
    geo1.p.CSGWireframe.options.setOption("editable", void 0);
    geo1.p.TetScale.options.setOption("editable", void 0);
    geo1.p.TetDisplayLines.options.setOption("editable", void 0);
    geo1.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    geo1.p.TetDisplayPoints.options.setOption("editable", void 0);
    geo1.p.TetDisplayCenter.options.setOption("editable", void 0);
    geo1.p.TetDisplaySphere.options.setOption("editable", void 0);
    geo1.params.postCreateSpareParams();
    geo1.params.runOnSceneLoadHooks();
    return { node: geo1, children: geo1_nodes };
  }
  function create_ground(parentNode) {
    var ground = parentNode.createNode("geo");
    ground.setName("ground");
    const ground_nodes = {};
    function create_MAT(ground2) {
      var MAT = ground2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_meshStandardBuilder1(MAT2) {
        var meshStandardBuilder1 = MAT2.createNode("meshStandardBuilder");
        meshStandardBuilder1.setName("meshStandardBuilder1");
        const meshStandardBuilder1_nodes = {};
        function create_checkers1(meshStandardBuilder12) {
          var checkers1 = meshStandardBuilder12.createNode("checkers");
          checkers1.setName("checkers1");
          const checkers1_nodes = {};
          checkers1.uiData.setPosition(50, 200);
          checkers1.params.postCreateSpareParams();
          checkers1.params.runOnSceneLoadHooks();
          return { node: checkers1, children: checkers1_nodes };
        }
        function create_constant1(meshStandardBuilder12) {
          var constant1 = meshStandardBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(50, -150);
          constant1.p.type.set(4);
          constant1.p.color.set([0.24313725490196078, 0.5098039215686274, 0.8549019607843137]);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_constant2(meshStandardBuilder12) {
          var constant2 = meshStandardBuilder12.createNode("constant");
          constant2.setName("constant2");
          const constant2_nodes = {};
          constant2.uiData.setPosition(0, 0);
          constant2.p.type.set(4);
          constant2.p.color.set([0.047058823529411764, 0.10196078431372549, 0.17647058823529413]);
          constant2.p.asColor.set(true);
          constant2.params.postCreateSpareParams();
          constant2.params.runOnSceneLoadHooks();
          return { node: constant2, children: constant2_nodes };
        }
        function create_floatToVec2_1(meshStandardBuilder12) {
          var floatToVec2_1 = meshStandardBuilder12.createNode("floatToVec2");
          floatToVec2_1.setName("floatToVec2_1");
          const floatToVec2_1_nodes = {};
          floatToVec2_1.uiData.setPosition(-100, 200);
          floatToVec2_1.params.postCreateSpareParams();
          floatToVec2_1.params.runOnSceneLoadHooks();
          return { node: floatToVec2_1, children: floatToVec2_1_nodes };
        }
        function create_globals1(meshStandardBuilder12) {
          var globals1 = meshStandardBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-450, 0);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_mix1(meshStandardBuilder12) {
          var mix1 = meshStandardBuilder12.createNode("mix");
          mix1.setName("mix1");
          const mix1_nodes = {};
          mix1.uiData.setPosition(250, 0);
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value0", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.VECTOR3 */ ._.VECTOR3, "value1", [0, 0, 0], { spare: true, editable: false });
          mix1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_0__/* .ParamType.FLOAT */ ._.FLOAT, "blend", 0.5, { spare: true, editable: false });
          mix1.params.postCreateSpareParams();
          mix1.params.runOnSceneLoadHooks();
          return { node: mix1, children: mix1_nodes };
        }
        function create_output1(meshStandardBuilder12) {
          var output1 = meshStandardBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(400, 0);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_vec3ToFloat1(meshStandardBuilder12) {
          var vec3ToFloat1 = meshStandardBuilder12.createNode("vec3ToFloat");
          vec3ToFloat1.setName("vec3ToFloat1");
          const vec3ToFloat1_nodes = {};
          vec3ToFloat1.uiData.setPosition(-200, 200);
          vec3ToFloat1.params.postCreateSpareParams();
          vec3ToFloat1.params.runOnSceneLoadHooks();
          return { node: vec3ToFloat1, children: vec3ToFloat1_nodes };
        }
        meshStandardBuilder1_nodes["checkers1"] = create_checkers1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant1"] = create_constant1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["constant2"] = create_constant2(meshStandardBuilder1);
        meshStandardBuilder1_nodes["floatToVec2_1"] = create_floatToVec2_1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["globals1"] = create_globals1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["mix1"] = create_mix1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["output1"] = create_output1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["vec3ToFloat1"] = create_vec3ToFloat1(meshStandardBuilder1);
        meshStandardBuilder1_nodes["checkers1"].node.setInput(
          "uv",
          meshStandardBuilder1_nodes["floatToVec2_1"].node,
          "vec2"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "x",
          meshStandardBuilder1_nodes["vec3ToFloat1"].node,
          "x"
        );
        meshStandardBuilder1_nodes["floatToVec2_1"].node.setInput(
          "y",
          meshStandardBuilder1_nodes["vec3ToFloat1"].node,
          "z"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value0",
          meshStandardBuilder1_nodes["constant1"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "value1",
          meshStandardBuilder1_nodes["constant2"].node,
          "val"
        );
        meshStandardBuilder1_nodes["mix1"].node.setInput(
          "blend",
          meshStandardBuilder1_nodes["checkers1"].node,
          "checker"
        );
        meshStandardBuilder1_nodes["output1"].node.setInput(
          "color",
          meshStandardBuilder1_nodes["mix1"].node,
          "mix"
        );
        meshStandardBuilder1_nodes["vec3ToFloat1"].node.setInput(
          "vec",
          meshStandardBuilder1_nodes["globals1"].node,
          "position"
        );
        if (meshStandardBuilder1.childrenController) {
          meshStandardBuilder1.childrenController.selection.set([]);
        }
        meshStandardBuilder1.uiData.setPosition(0, 200);
        meshStandardBuilder1.params.postCreateSpareParams();
        meshStandardBuilder1.params.runOnSceneLoadHooks();
        return { node: meshStandardBuilder1, children: meshStandardBuilder1_nodes };
      }
      MAT_nodes["meshStandardBuilder1"] = create_meshStandardBuilder1(MAT);
      if (MAT.childrenController) {
        MAT.childrenController.selection.set([]);
      }
      MAT.uiData.setPosition(-200, 300);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_box1(ground2) {
      var box1 = ground2.createNode("box");
      box1.setName("box1");
      const box1_nodes = {};
      box1.uiData.setPosition(0, 100);
      box1.p.sizes.set([9.98, 1, 9.98]);
      box1.p.center.set([0, -0.5, 0]);
      box1.params.postCreateSpareParams();
      box1.params.runOnSceneLoadHooks();
      return { node: box1, children: box1_nodes };
    }
    function create_material1(ground2) {
      var material1 = ground2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 300);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/meshStandardBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    ground_nodes["MAT"] = create_MAT(ground);
    ground_nodes["box1"] = create_box1(ground);
    ground_nodes["material1"] = create_material1(ground);
    ground_nodes["material1"].node.setInput(0, ground_nodes["box1"].node);
    if (ground.childrenController) {
      ground.childrenController.selection.set([]);
    }
    ground.uiData.setPosition(-50, -450);
    ground.flags.display.set(true);
    ground.p.t.set([0, 0.21108486846670993, 0]);
    ground.p.CSGWireframe.options.setOption("editable", void 0);
    ground.p.TetScale.options.setOption("editable", void 0);
    ground.p.TetDisplayLines.options.setOption("editable", void 0);
    ground.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    ground.p.TetDisplayPoints.options.setOption("editable", void 0);
    ground.p.TetDisplayCenter.options.setOption("editable", void 0);
    ground.p.TetDisplaySphere.options.setOption("editable", void 0);
    ground.params.postCreateSpareParams();
    ground.params.runOnSceneLoadHooks();
    return { node: ground, children: ground_nodes };
  }
  function create_lights(parentNode) {
    var lights = parentNode.createNode("geo");
    lights.setName("lights");
    const lights_nodes = {};
    function create_hemisphereLight1(lights2) {
      var hemisphereLight1 = lights2.createNode("hemisphereLight");
      hemisphereLight1.setName("hemisphereLight1");
      const hemisphereLight1_nodes = {};
      hemisphereLight1.uiData.setPosition(50, -50);
      hemisphereLight1.p.intensity.set(0.52);
      hemisphereLight1.params.postCreateSpareParams();
      hemisphereLight1.params.runOnSceneLoadHooks();
      return { node: hemisphereLight1, children: hemisphereLight1_nodes };
    }
    function create_merge1(lights2) {
      var merge1 = lights2.createNode("merge");
      merge1.setName("merge1");
      const merge1_nodes = {};
      merge1.uiData.setPosition(100, 300);
      merge1.flags.display.set(true);
      merge1.params.postCreateSpareParams();
      merge1.params.runOnSceneLoadHooks();
      return { node: merge1, children: merge1_nodes };
    }
    function create_polarTransform1(lights2) {
      var polarTransform1 = lights2.createNode("polarTransform");
      polarTransform1.setName("polarTransform1");
      const polarTransform1_nodes = {};
      polarTransform1.uiData.setPosition(300, 150);
      polarTransform1.p.center.set([0, 0.7, 0]);
      polarTransform1.p.latitude.set(25.2);
      polarTransform1.p.depth.set(3);
      polarTransform1.params.postCreateSpareParams();
      polarTransform1.params.runOnSceneLoadHooks();
      return { node: polarTransform1, children: polarTransform1_nodes };
    }
    function create_spotLight1(lights2) {
      var spotLight1 = lights2.createNode("spotLight");
      spotLight1.setName("spotLight1");
      const spotLight1_nodes = {};
      spotLight1.uiData.setPosition(300, -50);
      spotLight1.p.decay.set(0.1);
      spotLight1.p.distance.set(10);
      spotLight1.p.castShadow.set(true);
      spotLight1.params.postCreateSpareParams();
      spotLight1.params.runOnSceneLoadHooks();
      return { node: spotLight1, children: spotLight1_nodes };
    }
    lights_nodes["hemisphereLight1"] = create_hemisphereLight1(lights);
    lights_nodes["merge1"] = create_merge1(lights);
    lights_nodes["polarTransform1"] = create_polarTransform1(lights);
    lights_nodes["spotLight1"] = create_spotLight1(lights);
    lights_nodes["merge1"].node.setInput(0, lights_nodes["hemisphereLight1"].node);
    lights_nodes["merge1"].node.setInput(1, lights_nodes["polarTransform1"].node);
    lights_nodes["polarTransform1"].node.setInput(0, lights_nodes["spotLight1"].node);
    if (lights.childrenController) {
      lights.childrenController.selection.set([lights_nodes["hemisphereLight1"].node]);
    }
    lights.uiData.setPosition(-50, -250);
    lights.flags.display.set(true);
    lights.p.CSGWireframe.options.setOption("editable", void 0);
    lights.p.TetScale.options.setOption("editable", void 0);
    lights.p.TetDisplayLines.options.setOption("editable", void 0);
    lights.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    lights.p.TetDisplayPoints.options.setOption("editable", void 0);
    lights.p.TetDisplayCenter.options.setOption("editable", void 0);
    lights.p.TetDisplaySphere.options.setOption("editable", void 0);
    lights.params.postCreateSpareParams();
    lights.params.runOnSceneLoadHooks();
    return { node: lights, children: lights_nodes };
  }
  function create_cameras(parentNode) {
    var cameras = parentNode.createNode("geo");
    cameras.setName("cameras");
    const cameras_nodes = {};
    function create_cameraControls1(cameras2) {
      var cameraControls1 = cameras2.createNode("cameraControls");
      cameraControls1.setName("cameraControls1");
      const cameraControls1_nodes = {};
      function create_cameraOrbitControls1(cameraControls12) {
        var cameraOrbitControls1 = cameraControls12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(0, 0);
        cameraOrbitControls1.p.target.set([-0.07008984671531124, 0.4534507747288908, -0.09868113877006408]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      cameraControls1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(cameraControls1);
      if (cameraControls1.childrenController) {
        cameraControls1.childrenController.selection.set([]);
      }
      cameraControls1.uiData.setPosition(0, 150);
      cameraControls1.flags.display.set(true);
      cameraControls1.p.node.set("cameraOrbitControls1");
      cameraControls1.params.postCreateSpareParams();
      cameraControls1.params.runOnSceneLoadHooks();
      return { node: cameraControls1, children: cameraControls1_nodes };
    }
    function create_perspectiveCamera1(cameras2) {
      var perspectiveCamera1 = cameras2.createNode("perspectiveCamera");
      perspectiveCamera1.setName("perspectiveCamera1");
      const perspectiveCamera1_nodes = {};
      perspectiveCamera1.uiData.setPosition(0, -50);
      perspectiveCamera1.p.position.set([4.0280631841749015, 3.261663101816814, 4.724376152337324]);
      perspectiveCamera1.p.rotation.set([-30.209976283322618, 36.28985638141934, 19.014710684553215]);
      perspectiveCamera1.params.postCreateSpareParams();
      perspectiveCamera1.params.runOnSceneLoadHooks();
      return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
    }
    cameras_nodes["cameraControls1"] = create_cameraControls1(cameras);
    cameras_nodes["perspectiveCamera1"] = create_perspectiveCamera1(cameras);
    cameras_nodes["cameraControls1"].node.setInput(0, cameras_nodes["perspectiveCamera1"].node);
    if (cameras.childrenController) {
      cameras.childrenController.selection.set([]);
    }
    cameras.uiData.setPosition(-50, -150);
    cameras.flags.display.set(true);
    cameras.p.CSGWireframe.options.setOption("editable", void 0);
    cameras.p.TetScale.options.setOption("editable", void 0);
    cameras.p.TetDisplayLines.options.setOption("editable", void 0);
    cameras.p.TetDisplaySharedFaces.options.setOption("editable", void 0);
    cameras.p.TetDisplayPoints.options.setOption("editable", void 0);
    cameras.p.TetDisplayCenter.options.setOption("editable", void 0);
    cameras.p.TetDisplaySphere.options.setOption("editable", void 0);
    cameras.params.postCreateSpareParams();
    cameras.params.runOnSceneLoadHooks();
    return { node: cameras, children: cameras_nodes };
  }
  scene_root_nodes["geo1"] = create_geo1(root);
  scene_root_nodes["ground"] = create_ground(root);
  scene_root_nodes["lights"] = create_lights(root);
  scene_root_nodes["cameras"] = create_cameras(root);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: "/cameras/cameras:sopGroup/perspectiveCamera1",
    focusedNodes: Object.values(scene_root_nodes["geo1"].children).map((n) => n.node).filter((n) => n.name() == "material1"),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_advanced_VertexAnimationTexture_simple_ts.3542508a5d2096f133de.js.map