(self["webpackChunk"] = self["webpackChunk"] || []).push([["src_engine_examples_examples_mat_RayMarchingBuilder_reflections_ts"],{

/***/ 28078:
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createData": function() { return /* binding */ createData; }
/* harmony export */ });
/* harmony import */ var _polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51254);
/* harmony import */ var _polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1934);



function createData(options) {
  const { scene } = options;
  const root = scene.root();
  root.p.displayAudioIcon.set(1);
  root.p.audioIconColor.set([1, 1, 1]);
  root.sceneBackgroundController.setMode(_polygonjs_polygonjs_src_engine_nodes_manager_utils_Scene_Background__WEBPACK_IMPORTED_MODULE_0__/* .BackgroundMode.COLOR */ .zc.COLOR);
  root.p.bgColor.set([0, 0, 0]);
  const scene_root_nodes = {};
  function create_hemisphereLight1(parentNode) {
    var hemisphereLight1 = parentNode.createNode("hemisphereLight");
    hemisphereLight1.setName("hemisphereLight1");
    const hemisphereLight1_nodes = {};
    hemisphereLight1.uiData.setPosition(150, 100);
    hemisphereLight1.flags.display.set(true);
    hemisphereLight1.params.postCreateSpareParams();
    hemisphereLight1.params.runOnSceneLoadHooks();
    return { node: hemisphereLight1, children: hemisphereLight1_nodes };
  }
  function create_perspectiveCamera1(parentNode) {
    var perspectiveCamera1 = parentNode.createNode("perspectiveCamera");
    perspectiveCamera1.setName("perspectiveCamera1");
    const perspectiveCamera1_nodes = {};
    function create_events1(perspectiveCamera12) {
      var events1 = perspectiveCamera12.createNode("eventsNetwork");
      events1.setName("events1");
      const events1_nodes = {};
      function create_cameraOrbitControls1(events12) {
        var cameraOrbitControls1 = events12.createNode("cameraOrbitControls");
        cameraOrbitControls1.setName("cameraOrbitControls1");
        const cameraOrbitControls1_nodes = {};
        cameraOrbitControls1.uiData.setPosition(150, 50);
        cameraOrbitControls1.p.target.set([-0.5277577903015963, -0.022244930847508414, 1.083219986909123]);
        cameraOrbitControls1.params.postCreateSpareParams();
        cameraOrbitControls1.params.runOnSceneLoadHooks();
        return { node: cameraOrbitControls1, children: cameraOrbitControls1_nodes };
      }
      events1_nodes["cameraOrbitControls1"] = create_cameraOrbitControls1(events1);
      events1.uiData.setPosition(-200, 50);
      events1.params.postCreateSpareParams();
      events1.params.runOnSceneLoadHooks();
      return { node: events1, children: events1_nodes };
    }
    perspectiveCamera1_nodes["events1"] = create_events1(perspectiveCamera1);
    perspectiveCamera1.uiData.setPosition(-200, 100);
    perspectiveCamera1.flags.display.set(true);
    perspectiveCamera1.p.t.set([0.6333203838996962, 0.11640160101709753, 1.6166078067072727]);
    perspectiveCamera1.p.r.set([-14.604587675138916, 64.64407571527009, 13.249762391692522]);
    perspectiveCamera1.p.controls.set("./events1/cameraOrbitControls1");
    perspectiveCamera1.params.postCreateSpareParams();
    perspectiveCamera1.params.runOnSceneLoadHooks();
    return { node: perspectiveCamera1, children: perspectiveCamera1_nodes };
  }
  function create_COP(parentNode) {
    var COP = parentNode.createNode("copNetwork");
    COP.setName("COP");
    const COP_nodes = {};
    function create_envMap(COP2) {
      var envMap = COP2.createNode("envMap");
      envMap.setName("envMap");
      const envMap_nodes = {};
      envMap.uiData.setPosition(50, 200);
      envMap.params.postCreateSpareParams();
      envMap.params.runOnSceneLoadHooks();
      return { node: envMap, children: envMap_nodes };
    }
    function create_imageEnv(COP2) {
      var imageEnv = COP2.createNode("imageEXR");
      imageEnv.setName("imageEnv");
      const imageEnv_nodes = {};
      imageEnv.uiData.setPosition(50, 100);
      imageEnv.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/resources/polyhaven.com/envmaps/satara_night_1k.exr"
      );
      imageEnv.p.tminFilter.set(true);
      imageEnv.p.tmagFilter.set(true);
      imageEnv.p.tanisotropy.set(true);
      imageEnv.p.useRendererMaxAnisotropy.set(true);
      imageEnv.params.postCreateSpareParams();
      imageEnv.params.runOnSceneLoadHooks();
      return { node: imageEnv, children: imageEnv_nodes };
    }
    function create_imageUv(COP2) {
      var imageUv = COP2.createNode("image");
      imageUv.setName("imageUv");
      const imageUv_nodes = {};
      imageUv.uiData.setPosition(-100, 100);
      imageUv.p.url.set("https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/textures/uv.jpg");
      imageUv.p.tflipY.set(true);
      imageUv.params.postCreateSpareParams();
      imageUv.params.runOnSceneLoadHooks();
      return { node: imageUv, children: imageUv_nodes };
    }
    COP_nodes["envMap"] = create_envMap(COP);
    COP_nodes["imageEnv"] = create_imageEnv(COP);
    COP_nodes["imageUv"] = create_imageUv(COP);
    COP_nodes["envMap"].node.setInput(0, COP_nodes["imageEnv"].node);
    COP.uiData.setPosition(-200, 200);
    COP.params.postCreateSpareParams();
    COP.params.runOnSceneLoadHooks();
    return { node: COP, children: COP_nodes };
  }
  function create_raymarchedObject(parentNode) {
    var raymarchedObject = parentNode.createNode("geo");
    raymarchedObject.setName("raymarchedObject");
    const raymarchedObject_nodes = {};
    function create_MAT(raymarchedObject2) {
      var MAT = raymarchedObject2.createNode("materialsNetwork");
      MAT.setName("MAT");
      const MAT_nodes = {};
      function create_rayMarchingBuilder1(MAT2) {
        var rayMarchingBuilder1 = MAT2.createNode("rayMarchingBuilder");
        rayMarchingBuilder1.setName("rayMarchingBuilder1");
        const rayMarchingBuilder1_nodes = {};
        function create_SDFBox1(rayMarchingBuilder12) {
          var SDFBox1 = rayMarchingBuilder12.createNode("SDFBox");
          SDFBox1.setName("SDFBox1");
          const SDFBox1_nodes = {};
          SDFBox1.uiData.setPosition(-750, -1550);
          SDFBox1.p.size.set(1.7);
          SDFBox1.params.postCreateSpareParams();
          SDFBox1.params.runOnSceneLoadHooks();
          return { node: SDFBox1, children: SDFBox1_nodes };
        }
        function create_SDFBoxFrame1(rayMarchingBuilder12) {
          var SDFBoxFrame1 = rayMarchingBuilder12.createNode("SDFBoxFrame");
          SDFBoxFrame1.setName("SDFBoxFrame1");
          const SDFBoxFrame1_nodes = {};
          SDFBoxFrame1.uiData.setPosition(-750, -650);
          SDFBoxFrame1.p.width.set(0.05);
          SDFBoxFrame1.params.postCreateSpareParams();
          SDFBoxFrame1.params.runOnSceneLoadHooks();
          return { node: SDFBoxFrame1, children: SDFBoxFrame1_nodes };
        }
        function create_SDFBoxFrame2(rayMarchingBuilder12) {
          var SDFBoxFrame2 = rayMarchingBuilder12.createNode("SDFBoxFrame");
          SDFBoxFrame2.setName("SDFBoxFrame2");
          const SDFBoxFrame2_nodes = {};
          SDFBoxFrame2.uiData.setPosition(-750, -850);
          SDFBoxFrame2.p.width.set(0.08);
          SDFBoxFrame2.params.postCreateSpareParams();
          SDFBoxFrame2.params.runOnSceneLoadHooks();
          return { node: SDFBoxFrame2, children: SDFBoxFrame2_nodes };
        }
        function create_SDFContext1(rayMarchingBuilder12) {
          var SDFContext1 = rayMarchingBuilder12.createNode("SDFContext");
          SDFContext1.setName("SDFContext1");
          const SDFContext1_nodes = {};
          SDFContext1.uiData.setPosition(450, -1300);
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf", 0, { spare: true, editable: false });
          SDFContext1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.STRING */ ._.STRING, "material", "DefaultSDFMaterial()", {
            spare: true,
            editable: false
          });
          SDFContext1.params.postCreateSpareParams();
          SDFContext1.params.runOnSceneLoadHooks();
          return { node: SDFContext1, children: SDFContext1_nodes };
        }
        function create_SDFMaterial1(rayMarchingBuilder12) {
          var SDFMaterial1 = rayMarchingBuilder12.createNode("SDFMaterial");
          SDFMaterial1.setName("SDFMaterial1");
          const SDFMaterial1_nodes = {};
          SDFMaterial1.uiData.setPosition(250, -1100);
          SDFMaterial1.p.useEnvMap.set(true);
          SDFMaterial1.p.useReflection.set(true);
          SDFMaterial1.p.envMapIntensity.set(0.06);
          SDFMaterial1.p.envMapFresnel.set(1);
          SDFMaterial1.p.envMapFresnelPower.set(2);
          SDFMaterial1.p.reflectivity.set(1);
          SDFMaterial1.params.postCreateSpareParams();
          SDFMaterial1.params.runOnSceneLoadHooks();
          return { node: SDFMaterial1, children: SDFMaterial1_nodes };
        }
        function create_SDFRepeatPolar1(rayMarchingBuilder12) {
          var SDFRepeatPolar1 = rayMarchingBuilder12.createNode("SDFRepeatPolar");
          SDFRepeatPolar1.setName("SDFRepeatPolar1");
          const SDFRepeatPolar1_nodes = {};
          SDFRepeatPolar1.uiData.setPosition(-1100, -1650);
          SDFRepeatPolar1.p.periodLon.set(0.785398163397448);
          SDFRepeatPolar1.params.postCreateSpareParams();
          SDFRepeatPolar1.params.runOnSceneLoadHooks();
          return { node: SDFRepeatPolar1, children: SDFRepeatPolar1_nodes };
        }
        function create_SDFSphere1(rayMarchingBuilder12) {
          var SDFSphere1 = rayMarchingBuilder12.createNode("SDFSphere");
          SDFSphere1.setName("SDFSphere1");
          const SDFSphere1_nodes = {};
          SDFSphere1.uiData.setPosition(-750, -1650);
          SDFSphere1.params.postCreateSpareParams();
          SDFSphere1.params.runOnSceneLoadHooks();
          return { node: SDFSphere1, children: SDFSphere1_nodes };
        }
        function create_SDFTransform1(rayMarchingBuilder12) {
          var SDFTransform1 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform1.setName("SDFTransform1");
          const SDFTransform1_nodes = {};
          SDFTransform1.uiData.setPosition(-950, -850);
          SDFTransform1.p.r.set([2.5999999999999996, 2.5999999999999996, 2.5999999999999996]);
          SDFTransform1.params.postCreateSpareParams();
          SDFTransform1.params.runOnSceneLoadHooks();
          return { node: SDFTransform1, children: SDFTransform1_nodes };
        }
        function create_SDFTransform2(rayMarchingBuilder12) {
          var SDFTransform2 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform2.setName("SDFTransform2");
          const SDFTransform2_nodes = {};
          SDFTransform2.uiData.setPosition(-950, -1600);
          SDFTransform2.p.t.set([0, 0, 3]);
          SDFTransform2.params.postCreateSpareParams();
          SDFTransform2.params.runOnSceneLoadHooks();
          return { node: SDFTransform2, children: SDFTransform2_nodes };
        }
        function create_SDFTransform3(rayMarchingBuilder12) {
          var SDFTransform3 = rayMarchingBuilder12.createNode("SDFTransform");
          SDFTransform3.setName("SDFTransform3");
          const SDFTransform3_nodes = {};
          SDFTransform3.uiData.setPosition(-850, -650);
          SDFTransform3.p.r.set([0, 0.9, 1.1]);
          SDFTransform3.params.postCreateSpareParams();
          SDFTransform3.params.runOnSceneLoadHooks();
          return { node: SDFTransform3, children: SDFTransform3_nodes };
        }
        function create_SDFUnion1(rayMarchingBuilder12) {
          var SDFUnion1 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion1.setName("SDFUnion1");
          const SDFUnion1_nodes = {};
          SDFUnion1.uiData.setPosition(-500, -800);
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: false });
          SDFUnion1.params.get("smoothFactor").set(0.11);
          SDFUnion1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion1.params.postCreateSpareParams();
          SDFUnion1.params.runOnSceneLoadHooks();
          return { node: SDFUnion1, children: SDFUnion1_nodes };
        }
        function create_SDFUnion3(rayMarchingBuilder12) {
          var SDFUnion3 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion3.setName("SDFUnion3");
          const SDFUnion3_nodes = {};
          SDFUnion3.uiData.setPosition(-200, -1300);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: true });
          SDFUnion3.params.get("smoothFactor").set(0.43);
          SDFUnion3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion3.params.postCreateSpareParams();
          SDFUnion3.params.runOnSceneLoadHooks();
          return { node: SDFUnion3, children: SDFUnion3_nodes };
        }
        function create_SDFUnion4(rayMarchingBuilder12) {
          var SDFUnion4 = rayMarchingBuilder12.createNode("SDFUnion");
          SDFUnion4.setName("SDFUnion4");
          const SDFUnion4_nodes = {};
          SDFUnion4.uiData.setPosition(-500, -1550);
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf0", 0, { spare: true, editable: false });
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "sdf1", 0, { spare: true, editable: false });
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "smoothFactor", 0, { spare: true, editable: false });
          SDFUnion4.params.get("smoothFactor").set(0.31);
          SDFUnion4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "matBlendDist", 0, { spare: true, editable: true });
          SDFUnion4.params.postCreateSpareParams();
          SDFUnion4.params.runOnSceneLoadHooks();
          return { node: SDFUnion4, children: SDFUnion4_nodes };
        }
        function create_constant1(rayMarchingBuilder12) {
          var constant1 = rayMarchingBuilder12.createNode("constant");
          constant1.setName("constant1");
          const constant1_nodes = {};
          constant1.uiData.setPosition(50, -1100);
          constant1.p.type.set(4);
          constant1.p.asColor.set(true);
          constant1.params.postCreateSpareParams();
          constant1.params.runOnSceneLoadHooks();
          return { node: constant1, children: constant1_nodes };
        }
        function create_fit1(rayMarchingBuilder12) {
          var fit1 = rayMarchingBuilder12.createNode("fit");
          fit1.setName("fit1");
          const fit1_nodes = {};
          fit1.uiData.setPosition(-950, -1400);
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit1.params.get("srcMin").set(-1);
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit1.params.get("destMin").set(0.06);
          fit1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit1.params.get("destMax").set(0.37);
          fit1.params.postCreateSpareParams();
          fit1.params.runOnSceneLoadHooks();
          return { node: fit1, children: fit1_nodes };
        }
        function create_fit2(rayMarchingBuilder12) {
          var fit2 = rayMarchingBuilder12.createNode("fit");
          fit2.setName("fit2");
          const fit2_nodes = {};
          fit2.uiData.setPosition(-1e3, -1500);
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit2.params.get("srcMin").set(-1);
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit2.params.get("destMin").set(1.2);
          fit2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit2.params.get("destMax").set(1.7);
          fit2.params.postCreateSpareParams();
          fit2.params.runOnSceneLoadHooks();
          return { node: fit2, children: fit2_nodes };
        }
        function create_fit3(rayMarchingBuilder12) {
          var fit3 = rayMarchingBuilder12.createNode("fit");
          fit3.setName("fit3");
          const fit3_nodes = {};
          fit3.uiData.setPosition(-900, -400);
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "val", 0, { spare: true, editable: false });
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMin", 0, { spare: true, editable: true });
          fit3.params.get("srcMin").set(-1);
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "srcMax", 1, { spare: true, editable: true });
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMin", 0, { spare: true, editable: true });
          fit3.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "destMax", 1, { spare: true, editable: true });
          fit3.params.get("destMax").set(0.4);
          fit3.params.postCreateSpareParams();
          fit3.params.runOnSceneLoadHooks();
          return { node: fit3, children: fit3_nodes };
        }
        function create_floatToVec3_1(rayMarchingBuilder12) {
          var floatToVec3_1 = rayMarchingBuilder12.createNode("floatToVec3");
          floatToVec3_1.setName("floatToVec3_1");
          const floatToVec3_1_nodes = {};
          floatToVec3_1.uiData.setPosition(-1100, -850);
          floatToVec3_1.params.postCreateSpareParams();
          floatToVec3_1.params.runOnSceneLoadHooks();
          return { node: floatToVec3_1, children: floatToVec3_1_nodes };
        }
        function create_globals1(rayMarchingBuilder12) {
          var globals1 = rayMarchingBuilder12.createNode("globals");
          globals1.setName("globals1");
          const globals1_nodes = {};
          globals1.uiData.setPosition(-1600, -900);
          globals1.params.postCreateSpareParams();
          globals1.params.runOnSceneLoadHooks();
          return { node: globals1, children: globals1_nodes };
        }
        function create_multAdd1(rayMarchingBuilder12) {
          var multAdd1 = rayMarchingBuilder12.createNode("multAdd");
          multAdd1.setName("multAdd1");
          const multAdd1_nodes = {};
          multAdd1.uiData.setPosition(-1250, -900);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd1.params.get("mult").set(0.45);
          multAdd1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd1.params.postCreateSpareParams();
          multAdd1.params.runOnSceneLoadHooks();
          return { node: multAdd1, children: multAdd1_nodes };
        }
        function create_multAdd2(rayMarchingBuilder12) {
          var multAdd2 = rayMarchingBuilder12.createNode("multAdd");
          multAdd2.setName("multAdd2");
          const multAdd2_nodes = {};
          multAdd2.uiData.setPosition(-1200, -400);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd2.params.get("mult").set(0.39);
          multAdd2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd2.params.postCreateSpareParams();
          multAdd2.params.runOnSceneLoadHooks();
          return { node: multAdd2, children: multAdd2_nodes };
        }
        function create_multAdd4(rayMarchingBuilder12) {
          var multAdd4 = rayMarchingBuilder12.createNode("multAdd");
          multAdd4.setName("multAdd4");
          const multAdd4_nodes = {};
          multAdd4.uiData.setPosition(-1250, -1400);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "value", 0, { spare: true, editable: false });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "preAdd", 0, { spare: true, editable: true });
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "mult", 1, { spare: true, editable: true });
          multAdd4.params.get("mult").set(0.39);
          multAdd4.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "postAdd", 0, { spare: true, editable: true });
          multAdd4.params.postCreateSpareParams();
          multAdd4.params.runOnSceneLoadHooks();
          return { node: multAdd4, children: multAdd4_nodes };
        }
        function create_output1(rayMarchingBuilder12) {
          var output1 = rayMarchingBuilder12.createNode("output");
          output1.setName("output1");
          const output1_nodes = {};
          output1.uiData.setPosition(600, -1300);
          output1.params.postCreateSpareParams();
          output1.params.runOnSceneLoadHooks();
          return { node: output1, children: output1_nodes };
        }
        function create_sin1(rayMarchingBuilder12) {
          var sin1 = rayMarchingBuilder12.createNode("sin");
          sin1.setName("sin1");
          const sin1_nodes = {};
          sin1.uiData.setPosition(-1050, -400);
          sin1.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin1.params.postCreateSpareParams();
          sin1.params.runOnSceneLoadHooks();
          return { node: sin1, children: sin1_nodes };
        }
        function create_sin2(rayMarchingBuilder12) {
          var sin2 = rayMarchingBuilder12.createNode("sin");
          sin2.setName("sin2");
          const sin2_nodes = {};
          sin2.uiData.setPosition(-1100, -1400);
          sin2.addParam(_polygonjs_polygonjs_src_engine_poly_ParamType__WEBPACK_IMPORTED_MODULE_1__/* .ParamType.FLOAT */ ._.FLOAT, "radians", 0, { spare: true, editable: false });
          sin2.params.postCreateSpareParams();
          sin2.params.runOnSceneLoadHooks();
          return { node: sin2, children: sin2_nodes };
        }
        rayMarchingBuilder1_nodes["SDFBox1"] = create_SDFBox1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBoxFrame1"] = create_SDFBoxFrame1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBoxFrame2"] = create_SDFBoxFrame2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFContext1"] = create_SDFContext1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFMaterial1"] = create_SDFMaterial1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFRepeatPolar1"] = create_SDFRepeatPolar1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFSphere1"] = create_SDFSphere1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform1"] = create_SDFTransform1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform2"] = create_SDFTransform2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFTransform3"] = create_SDFTransform3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion1"] = create_SDFUnion1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion3"] = create_SDFUnion3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFUnion4"] = create_SDFUnion4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["constant1"] = create_constant1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit1"] = create_fit1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit2"] = create_fit2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["fit3"] = create_fit3(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["floatToVec3_1"] = create_floatToVec3_1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["globals1"] = create_globals1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd1"] = create_multAdd1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd2"] = create_multAdd2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["multAdd4"] = create_multAdd4(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["output1"] = create_output1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin1"] = create_sin1(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["sin2"] = create_sin2(rayMarchingBuilder1);
        rayMarchingBuilder1_nodes["SDFBox1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform2"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFBox1"].node.setInput(
          "size",
          rayMarchingBuilder1_nodes["fit2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFBoxFrame1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform3"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFBoxFrame2"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "sdf",
          rayMarchingBuilder1_nodes["SDFUnion3"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFContext1"].node.setInput(
          "material",
          rayMarchingBuilder1_nodes["SDFMaterial1"].node,
          "SDFMaterial"
        );
        rayMarchingBuilder1_nodes["SDFMaterial1"].node.setInput(
          "color",
          rayMarchingBuilder1_nodes["constant1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFSphere1"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform2"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform1"].node.setInput(
          "r",
          rayMarchingBuilder1_nodes["floatToVec3_1"].node,
          "vec3"
        );
        rayMarchingBuilder1_nodes["SDFTransform2"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFRepeatPolar1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFTransform3"].node.setInput(
          "position",
          rayMarchingBuilder1_nodes["SDFTransform1"].node,
          "p"
        );
        rayMarchingBuilder1_nodes["SDFUnion1"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFBoxFrame2"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion1"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFBoxFrame1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion1"].node.setInput(
          "smoothFactor",
          rayMarchingBuilder1_nodes["fit3"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFUnion4"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFUnion3"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFUnion1"].node,
          "union"
        );
        rayMarchingBuilder1_nodes["SDFUnion4"].node.setInput(
          "sdf0",
          rayMarchingBuilder1_nodes["SDFSphere1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion4"].node.setInput(
          "sdf1",
          rayMarchingBuilder1_nodes["SDFBox1"].node,
          "float"
        );
        rayMarchingBuilder1_nodes["SDFUnion4"].node.setInput(
          "smoothFactor",
          rayMarchingBuilder1_nodes["fit1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["fit1"].node.setInput("val", rayMarchingBuilder1_nodes["sin2"].node, "val");
        rayMarchingBuilder1_nodes["fit2"].node.setInput("val", rayMarchingBuilder1_nodes["sin2"].node, "val");
        rayMarchingBuilder1_nodes["fit3"].node.setInput("val", rayMarchingBuilder1_nodes["sin1"].node, "val");
        rayMarchingBuilder1_nodes["floatToVec3_1"].node.setInput(
          "y",
          rayMarchingBuilder1_nodes["multAdd1"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["multAdd1"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd2"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["multAdd4"].node.setInput(
          "value",
          rayMarchingBuilder1_nodes["globals1"].node,
          "time"
        );
        rayMarchingBuilder1_nodes["output1"].node.setInput(
          "SDFContext",
          rayMarchingBuilder1_nodes["SDFContext1"].node,
          "SDFContext"
        );
        rayMarchingBuilder1_nodes["sin1"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd2"].node,
          "val"
        );
        rayMarchingBuilder1_nodes["sin2"].node.setInput(
          "radians",
          rayMarchingBuilder1_nodes["multAdd4"].node,
          "val"
        );
        rayMarchingBuilder1.uiData.setPosition(-50, 0);
        rayMarchingBuilder1.p.maxSteps.set(60);
        rayMarchingBuilder1.p.maxDist.set(34.66);
        rayMarchingBuilder1.p.surfDist.set(2e-3);
        rayMarchingBuilder1.p.front.set(false);
        rayMarchingBuilder1.p.useEnvMap.set(1);
        rayMarchingBuilder1.p.envMap.set("/COP/envMap");
        rayMarchingBuilder1.params.postCreateSpareParams();
        rayMarchingBuilder1.params.runOnSceneLoadHooks();
        return { node: rayMarchingBuilder1, children: rayMarchingBuilder1_nodes };
      }
      MAT_nodes["rayMarchingBuilder1"] = create_rayMarchingBuilder1(MAT);
      MAT.uiData.setPosition(-250, 150);
      MAT.params.postCreateSpareParams();
      MAT.params.runOnSceneLoadHooks();
      return { node: MAT, children: MAT_nodes };
    }
    function create_material1(raymarchedObject2) {
      var material1 = raymarchedObject2.createNode("material");
      material1.setName("material1");
      const material1_nodes = {};
      material1.uiData.setPosition(0, 150);
      material1.flags.display.set(true);
      material1.p.material.set("../MAT/rayMarchingBuilder1");
      material1.params.postCreateSpareParams();
      material1.params.runOnSceneLoadHooks();
      return { node: material1, children: material1_nodes };
    }
    function create_sphere1(raymarchedObject2) {
      var sphere1 = raymarchedObject2.createNode("sphere");
      sphere1.setName("sphere1");
      const sphere1_nodes = {};
      sphere1.uiData.setPosition(0, 50);
      sphere1.p.radius.set(4);
      sphere1.params.postCreateSpareParams();
      sphere1.params.runOnSceneLoadHooks();
      return { node: sphere1, children: sphere1_nodes };
    }
    raymarchedObject_nodes["MAT"] = create_MAT(raymarchedObject);
    raymarchedObject_nodes["material1"] = create_material1(raymarchedObject);
    raymarchedObject_nodes["sphere1"] = create_sphere1(raymarchedObject);
    raymarchedObject_nodes["material1"].node.setInput(0, raymarchedObject_nodes["sphere1"].node);
    raymarchedObject.uiData.setPosition(-50, -150);
    raymarchedObject.flags.display.set(true);
    raymarchedObject.params.postCreateSpareParams();
    raymarchedObject.params.runOnSceneLoadHooks();
    return { node: raymarchedObject, children: raymarchedObject_nodes };
  }
  function create_positionalAudio1(parentNode) {
    var positionalAudio1 = parentNode.createNode("positionalAudio");
    positionalAudio1.setName("positionalAudio1");
    const positionalAudio1_nodes = {};
    function create_AMSynth1(positionalAudio12) {
      var AMSynth1 = positionalAudio12.createNode("AMSynth");
      AMSynth1.setName("AMSynth1");
      const AMSynth1_nodes = {};
      AMSynth1.uiData.setPosition(0, -200);
      AMSynth1.params.postCreateSpareParams();
      AMSynth1.params.runOnSceneLoadHooks();
      return { node: AMSynth1, children: AMSynth1_nodes };
    }
    function create_OUT(positionalAudio12) {
      var OUT = positionalAudio12.createNode("null");
      OUT.setName("OUT");
      const OUT_nodes = {};
      OUT.uiData.setPosition(-150, 0);
      OUT.params.postCreateSpareParams();
      OUT.params.runOnSceneLoadHooks();
      return { node: OUT, children: OUT_nodes };
    }
    function create_envelope1(positionalAudio12) {
      var envelope1 = positionalAudio12.createNode("envelope");
      envelope1.setName("envelope1");
      const envelope1_nodes = {};
      envelope1.uiData.setPosition(0, -300);
      envelope1.params.postCreateSpareParams();
      envelope1.params.runOnSceneLoadHooks();
      return { node: envelope1, children: envelope1_nodes };
    }
    function create_file1(positionalAudio12) {
      var file1 = positionalAudio12.createNode("file");
      file1.setName("file1");
      const file1_nodes = {};
      file1.uiData.setPosition(-150, -300);
      file1.p.url.set(
        "https://raw.githubusercontent.com/polygonjs/polygonjs-assets/master/audio/457211__kiddpark__bladish.mp3"
      );
      file1.p.duration.set(74.84659863945578);
      file1.params.postCreateSpareParams();
      file1.params.runOnSceneLoadHooks();
      return { node: file1, children: file1_nodes };
    }
    function create_playInstrument1(positionalAudio12) {
      var playInstrument1 = positionalAudio12.createNode("playInstrument");
      playInstrument1.setName("playInstrument1");
      const playInstrument1_nodes = {};
      playInstrument1.uiData.setPosition(0, -100);
      playInstrument1.params.postCreateSpareParams();
      playInstrument1.params.runOnSceneLoadHooks();
      return { node: playInstrument1, children: playInstrument1_nodes };
    }
    positionalAudio1_nodes["AMSynth1"] = create_AMSynth1(positionalAudio1);
    positionalAudio1_nodes["OUT"] = create_OUT(positionalAudio1);
    positionalAudio1_nodes["envelope1"] = create_envelope1(positionalAudio1);
    positionalAudio1_nodes["file1"] = create_file1(positionalAudio1);
    positionalAudio1_nodes["playInstrument1"] = create_playInstrument1(positionalAudio1);
    positionalAudio1_nodes["AMSynth1"].node.setInput(0, positionalAudio1_nodes["envelope1"].node);
    positionalAudio1_nodes["OUT"].node.setInput(0, positionalAudio1_nodes["file1"].node);
    positionalAudio1_nodes["playInstrument1"].node.setInput(0, positionalAudio1_nodes["AMSynth1"].node);
    positionalAudio1.uiData.setPosition(-400, 350);
    positionalAudio1.flags.display.set(true);
    positionalAudio1.p.audioNode.set("OUT");
    positionalAudio1.p.showHelper.set(false);
    positionalAudio1.params.postCreateSpareParams();
    positionalAudio1.params.runOnSceneLoadHooks();
    return { node: positionalAudio1, children: positionalAudio1_nodes };
  }
  function create_audioListener1(parentNode) {
    var audioListener1 = parentNode.createNode("audioListener");
    audioListener1.setName("audioListener1");
    const audioListener1_nodes = {};
    audioListener1.uiData.setPosition(-400, 250);
    audioListener1.flags.display.set(true);
    audioListener1.p.listenerTransformAutoUpdate.set(false);
    audioListener1.params.postCreateSpareParams();
    audioListener1.params.runOnSceneLoadHooks();
    return { node: audioListener1, children: audioListener1_nodes };
  }
  scene_root_nodes["hemisphereLight1"] = create_hemisphereLight1(root);
  scene_root_nodes["perspectiveCamera1"] = create_perspectiveCamera1(root);
  scene_root_nodes["COP"] = create_COP(root);
  scene_root_nodes["raymarchedObject"] = create_raymarchedObject(root);
  scene_root_nodes["positionalAudio1"] = create_positionalAudio1(root);
  scene_root_nodes["audioListener1"] = create_audioListener1(root);
  scene_root_nodes["audioListener1"].node.setInput(0, scene_root_nodes["perspectiveCamera1"].node);
  scene.setFrame(0);
  scene.play();
  return {
    scene,
    cameraPath: scene_root_nodes["perspectiveCamera1"].node.path(),
    focusedNodes: scene_root_nodes["raymarchedObject"].children["MAT"].children["rayMarchingBuilder1"].node.children(),
    autoLayout: false
  };
}


/***/ })

}])
//# sourceMappingURL=src_engine_examples_examples_mat_RayMarchingBuilder_reflections_ts.27e453e6422b8033fec8.js.map