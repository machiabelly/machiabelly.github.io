import {
  HierarchyController,
  ObjChildrenDisplayController,
  ObjType,
  TransformController,
  TransformedParamConfig
} from "./chunk-GP5RO6D3.js";
import {
  DisplayNodeController
} from "./chunk-F6CWW4TB.js";
import "./chunk-EGRHWZRV.js";
import {
  TypedObjNode
} from "./chunk-26GUALO3.js";
import {
  FlagsControllerD,
  NodeParamsConfig,
  ParamConfig
} from "./chunk-FUAFRKQ7.js";
import "./chunk-RVFV2LA3.js";
import {
  Poly
} from "./chunk-O564GFGZ.js";
import {
  Group,
  isBooleanTrue
} from "./chunk-6OBTIB4K.js";
import {
  NodeContext
} from "./chunk-PQDBXNT6.js";
import "./chunk-UXIASGQL.js";

// node_modules/@polygonjs/polygonjs/dist/src/engine/nodes/obj/utils/ChildrenDisplayControllerSpecialized.js
var ChildrenDisplayControllerSpecialized = class extends ObjChildrenDisplayController {
  constructor(node) {
    super(node);
    this.node = node;
  }
  _addSpecializedObjects(displayNode, coreGroup, newObjects) {
    const _newObjectsAreDifferent = Poly.specializedChildren.runHooks(
      displayNode,
      coreGroup,
      newObjects,
      this.node.pv
    );
    if (_newObjectsAreDifferent) {
      this._newObjectsAreDifferent = _newObjectsAreDifferent;
    }
  }
};

// node_modules/@polygonjs/polygonjs/dist/src/core/geometry/modules/cad/utils/TesselationParamsConfig.js
var DEFAULT = {
  edgesColor: [0.1, 0.7, 0.2]
};
function OBJCADTesselationParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.CADLinearTolerance = ParamConfig.FLOAT(0.1, {
        range: [1e-3, 1],
        rangeLocked: [true, false]
      });
      this.CADAngularTolerance = ParamConfig.FLOAT(0.1, {
        range: [1e-3, 1],
        rangeLocked: [true, false]
      });
      this.CADCurveAbscissa = ParamConfig.FLOAT(0.1, {
        range: [1e-3, 1],
        rangeLocked: [true, false]
      });
      this.CADCurveTolerance = ParamConfig.FLOAT(0.1, {
        range: [1e-3, 1],
        rangeLocked: [true, false]
      });
      this.CADDisplayEdges = ParamConfig.BOOLEAN(true, {
        separatorBefore: true
      });
      this.CADEdgesColor = ParamConfig.COLOR(DEFAULT.edgesColor, {
        visibleIf: {
          CADDisplayEdges: true
        }
      });
      this.CADDisplayMeshes = ParamConfig.BOOLEAN(true);
      this.CADMeshesColor = ParamConfig.COLOR([1, 1, 1], {
        visibleIf: {
          CADDisplayMeshes: true
        }
      });
      this.CADWireframe = ParamConfig.BOOLEAN(false, {
        visibleIf: {
          CADDisplayMeshes: true
        }
      });
    }
  };
}
var TESSELATION_PARAM_NAMES = /* @__PURE__ */ new Set([
  "CADLinearTolerance",
  "CADAngularTolerance",
  "CADCurveAbscissa",
  "CADCurveTolerance",
  "CADDisplayEdges",
  "CADEdgesColor",
  "CADDisplayMeshes",
  "CADMeshesColor",
  "CADWireframe"
]);
function addCADTesselationParamsCallback(node, callback) {
  node.params.onParamsCreated("CADtesselationParamsHooks", () => {
    const params = node.params.all;
    for (const param of params) {
      if (TESSELATION_PARAM_NAMES.has(param.name())) {
        param.options.setOption("callback", callback);
      }
    }
  });
}

// node_modules/@polygonjs/polygonjs/dist/src/core/geometry/modules/csg/utils/TesselationParamsConfig.js
var DEFAULT2 = {
  facetAngle: 45,
  linesColor: [0.4, 0.1, 0.6]
};
function OBJCSGTesselationParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.CSGFacetAngle = ParamConfig.FLOAT(DEFAULT2.facetAngle, {
        range: [0, 180],
        rangeLocked: [true, false]
      });
      this.CSGLinesColor = ParamConfig.COLOR(DEFAULT2.linesColor);
      this.CSGMeshesColor = ParamConfig.COLOR([1, 1, 1]);
      this.CSGWireframe = ParamConfig.BOOLEAN(false);
    }
  };
}
var TESSELATION_PARAM_NAMES2 = /* @__PURE__ */ new Set([
  "CSGFacetAngle",
  "CSGLinesColor",
  "CSGMeshesColor",
  "CSGWireframe"
]);
function addCSGTesselationParamsCallback(node, callback) {
  node.params.onParamsCreated("CSGtesselationParamsHooks", () => {
    const params = node.params.all;
    for (const param of params) {
      if (TESSELATION_PARAM_NAMES2.has(param.name())) {
        param.options.setOption("callback", callback);
      }
    }
  });
}

// node_modules/@polygonjs/polygonjs/dist/src/core/geometry/modules/quad/utils/TesselationParamsConfig.js
function OBJQUADTesselationParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.QUADTriangles = ParamConfig.BOOLEAN(true);
      this.QUADWireframe = ParamConfig.BOOLEAN(true, {
        separatorBefore: true
      });
      this.QUADUnsharedEdges = ParamConfig.BOOLEAN(false, {
        visibleIf: { wireframe: true }
      });
      this.QUADWireframeColor = ParamConfig.COLOR([0, 0, 0], {
        visibleIf: { QUADWireframe: true }
      });
      this.QUADCenter = ParamConfig.BOOLEAN(false, {
        separatorBefore: true
      });
      this.QUADInnerRadius = ParamConfig.BOOLEAN(false, {
        visibleIf: { QUADCenter: true }
      });
      this.QUADOuterRadius = ParamConfig.BOOLEAN(false, {
        visibleIf: { QUADCenter: true }
      });
      this.QUADSplitQuads = ParamConfig.BOOLEAN(false, {
        separatorBefore: true,
        visibleIf: [{ QUADTriangles: true }, { QUADWireframe: true }]
      });
      this.QUADPointAttributes = ParamConfig.STRING("*", {
        visibleIf: [{ QUADTriangles: true }]
      });
      this.QUADPrimitiveAttributes = ParamConfig.STRING("*");
    }
  };
}
var TESSELATION_PARAM_NAMES3 = /* @__PURE__ */ new Set(["QUADTriangles", "QUADWireframe"]);
function addQUADTesselationParamsCallback(node, callback) {
  node.params.onParamsCreated("QUADtesselationParamsHooks", () => {
    const params = node.params.all;
    for (const param of params) {
      if (TESSELATION_PARAM_NAMES3.has(param.name())) {
        param.options.setOption("callback", callback);
      }
    }
  });
}

// node_modules/@polygonjs/polygonjs/dist/src/core/geometry/modules/tet/utils/TesselationParamsConfig.js
var DEFAULT3 = {
  scale: 1,
  displayOuterMesh: false,
  displayTetMesh: true,
  displayLines: false,
  displaySharedFaces: false,
  displayPoints: false,
  displayCenter: false,
  displaySphere: false
};
function OBJTetTesselationParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.TetScale = ParamConfig.FLOAT(DEFAULT3.scale, {
        range: [0, 1],
        rangeLocked: [true, true]
      });
      this.TetDisplayOuterMesh = ParamConfig.BOOLEAN(DEFAULT3.displayOuterMesh);
      this.TetDisplayTetMesh = ParamConfig.BOOLEAN(DEFAULT3.displayTetMesh);
      this.TetDisplayLines = ParamConfig.BOOLEAN(DEFAULT3.displayLines);
      this.TetDisplaySharedFaces = ParamConfig.BOOLEAN(DEFAULT3.displaySharedFaces);
      this.TetDisplayPoints = ParamConfig.BOOLEAN(DEFAULT3.displayPoints);
      this.TetDisplayCenter = ParamConfig.BOOLEAN(DEFAULT3.displayCenter);
      this.TetDisplaySphere = ParamConfig.BOOLEAN(DEFAULT3.displaySphere);
    }
  };
}
var TESSELATION_PARAM_NAMES4 = /* @__PURE__ */ new Set([
  "TetScale",
  "TetDisplayMesh",
  "TetDisplayLines",
  "TetDisplaySharedFaces",
  "TetDisplayPoints",
  "TetDisplayCenter",
  "TetDisplaySphere"
]);
function addTetTesselationParamsCallback(node, callback) {
  node.params.onParamsCreated("TettesselationParamsHooks", () => {
    const params = node.params.all;
    for (const param of params) {
      if (TESSELATION_PARAM_NAMES4.has(param.name())) {
        param.options.setOption("callback", callback);
      }
    }
  });
}

// node_modules/@polygonjs/polygonjs/dist/src/engine/nodes/obj/utils/TesselationParams.js
function ObjCADTesselationFolderParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.CAD = ParamConfig.FOLDER();
    }
  };
}
function ObjCSGTesselationFolderParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.CSG = ParamConfig.FOLDER();
    }
  };
}
function ObjQUADTesselationFolderParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.QUAD = ParamConfig.FOLDER();
    }
  };
}
function ObjTetTesselationFolderParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.TET = ParamConfig.FOLDER();
    }
  };
}
function ObjTesselationParamConfig(Base) {
  return class Mixin extends OBJTetTesselationParamConfig(
    ObjTetTesselationFolderParamConfig(
      OBJQUADTesselationParamConfig(
        ObjQUADTesselationFolderParamConfig(
          OBJCSGTesselationParamConfig(
            ObjCSGTesselationFolderParamConfig(
              OBJCADTesselationParamConfig(ObjCADTesselationFolderParamConfig(Base))
            )
          )
        )
        //		)
        //)
      )
    )
  ) {
  };
}
var TesselationParamParamsConfig = class extends ObjTesselationParamConfig(NodeParamsConfig) {
};

// node_modules/@polygonjs/polygonjs/dist/src/engine/nodes/obj/Geo.js
function GeoParamConfig(Base) {
  return class Mixin extends Base {
    constructor() {
      super(...arguments);
      this.display = ParamConfig.BOOLEAN(1);
      this.renderOrder = ParamConfig.INTEGER(0, {
        range: [0, 10],
        rangeLocked: [true, false]
      });
    }
  };
}
var GeoObjParamConfig = class extends ObjTesselationParamConfig(GeoParamConfig(TransformedParamConfig(NodeParamsConfig))) {
};
var ParamsConfig = new GeoObjParamConfig();
var GeoObjNode = class extends TypedObjNode {
  constructor() {
    super(...arguments);
    this.paramsConfig = ParamsConfig;
    this.hierarchyController = new HierarchyController(this);
    this.transformController = new TransformController(this);
    this.flags = new FlagsControllerD(this);
    this.childrenDisplayController = new ChildrenDisplayControllerSpecialized(this);
    this.displayNodeController = new DisplayNodeController(
      this,
      this.childrenDisplayController.displayNodeControllerCallbacks()
    );
    this._childrenControllerContext = NodeContext.SOP;
    this._onChildAddBound = this._onChildAdd.bind(this);
  }
  static type() {
    return ObjType.GEO;
  }
  createObject() {
    const group = new Group();
    group.matrixAutoUpdate = false;
    return group;
  }
  initializeNode() {
    this.lifecycle.onChildAdd(this._onChildAddBound);
    this.hierarchyController.initializeNode();
    this.transformController.initializeNode();
    this.childrenDisplayController.initializeNode();
    const _updateSpecializedChildren = () => {
      this.childrenDisplayController.requestDisplayNodeContainer();
    };
    addCADTesselationParamsCallback(this, _updateSpecializedChildren);
    addCSGTesselationParamsCallback(this, _updateSpecializedChildren);
    addQUADTesselationParamsCallback(this, _updateSpecializedChildren);
    addTetTesselationParamsCallback(this, _updateSpecializedChildren);
  }
  createNode(node_class, options) {
    return super.createNode(node_class, options);
  }
  children() {
    return super.children();
  }
  nodesByType(type) {
    return super.nodesByType(type);
  }
  //
  //
  // HOOK
  //
  //
  _onChildAdd(node) {
    var _a, _b;
    if (this.scene().loadingController.loaded()) {
      if (this.children().length == 1) {
        (_b = (_a = node.flags) == null ? void 0 : _a.display) == null ? void 0 : _b.set(true);
      }
    }
  }
  //
  //
  // COOK
  //
  //
  cook() {
    this.transformController.update();
    this.object.visible = isBooleanTrue(this.pv.display);
    this.object.renderOrder = this.pv.renderOrder;
    this.cookController.endCook();
  }
};
export {
  GeoObjNode,
  GeoParamConfig
};
//# sourceMappingURL=@polygonjs_polygonjs_dist_src_engine_nodes_obj_Geo.js.map
