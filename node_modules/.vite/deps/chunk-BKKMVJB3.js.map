{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/core/ThreeToGl.js"],
  "sourcesContent": ["\"use strict\";\nimport { CoreString } from \"./String\";\nimport { Color, Vector2, Vector3, Vector4 } from \"three\";\nimport { CoreType } from \"./Type\";\nimport { GlConnectionPointType } from \"../engine/nodes/utils/io/connections/Gl\";\nexport const COMPONENTS_BY_GL_TYPE = {\n  [GlConnectionPointType.BOOL]: void 0,\n  [GlConnectionPointType.INT]: void 0,\n  [GlConnectionPointType.FLOAT]: void 0,\n  [GlConnectionPointType.VEC2]: [\"x\", \"y\"],\n  [GlConnectionPointType.VEC3]: [\"x\", \"y\", \"z\"],\n  [GlConnectionPointType.VEC4]: [\"x\", \"y\", \"z\", \"w\"],\n  [GlConnectionPointType.MAT3]: void 0,\n  [GlConnectionPointType.MAT4]: void 0,\n  [GlConnectionPointType.SAMPLER_2D]: void 0,\n  [GlConnectionPointType.SAMPLER_2D_ARRAY]: void 0,\n  [GlConnectionPointType.SAMPLER_3D]: void 0,\n  [GlConnectionPointType.SAMPLER_CUBE]: void 0,\n  [GlConnectionPointType.SSS_MODEL]: void 0,\n  [GlConnectionPointType.SDF_CONTEXT]: void 0,\n  [GlConnectionPointType.SDF_MATERIAL]: void 0\n};\nexport class ThreeToGl {\n  static glType(glType, value) {\n    switch (glType) {\n      case GlConnectionPointType.BOOL:\n        return this.bool(value);\n      case GlConnectionPointType.INT:\n        return this.integer(value);\n      case GlConnectionPointType.FLOAT:\n        return this.float(value);\n      case GlConnectionPointType.VEC2:\n        return this.vector2(value);\n      case GlConnectionPointType.VEC3:\n        return this.vector3(value);\n      case GlConnectionPointType.VEC4:\n        return this.vector4(value);\n    }\n    return `no matching implementation for glType '${glType}' in ThreeToGl.glType`;\n  }\n  static any(value) {\n    if (CoreType.isString(value)) {\n      return value;\n    }\n    if (CoreType.isBoolean(value)) {\n      return `${value}`;\n    }\n    if (CoreType.isNumber(value)) {\n      return `${CoreString.ensureFloat(value)}`;\n    }\n    if (CoreType.isArray(value)) {\n      return this.numeric_array(value);\n    }\n    if (value instanceof Vector2 || value instanceof Vector3 || value instanceof Vector4 || value instanceof Color) {\n      return this.numeric_array(value.toArray());\n    }\n    return `ThreeToGl error: unknown value type '${value}'`;\n  }\n  static numeric_array(values) {\n    const values_str = new Array(values.length);\n    for (let i = 0; i < values.length; i++) {\n      values_str[i] = `${CoreString.ensureFloat(values[i])}`;\n    }\n    const gl_type = `vec${values.length}`;\n    return `${gl_type}(${values_str.join(\", \")})`;\n  }\n  static mat4(vec) {\n    if (CoreType.isString(vec)) {\n      return vec;\n    }\n    const values = vec.toArray().map((v) => {\n      return `${CoreString.ensureFloat(v)}`;\n    });\n    return `mat4(${values.join(\", \")})`;\n  }\n  static mat3(vec) {\n    if (CoreType.isString(vec)) {\n      return vec;\n    }\n    const values = vec.toArray().map((v) => {\n      return `${CoreString.ensureFloat(v)}`;\n    });\n    return `mat3(${values.join(\", \")})`;\n  }\n  static vector4(vec) {\n    if (CoreType.isString(vec)) {\n      return vec;\n    }\n    const values = vec.toArray().map((v) => {\n      return `${CoreString.ensureFloat(v)}`;\n    });\n    return `vec4(${values.join(\", \")})`;\n  }\n  static vector3(vec) {\n    if (CoreType.isString(vec)) {\n      return vec;\n    }\n    const values = vec.toArray().map((v) => {\n      return `${CoreString.ensureFloat(v)}`;\n    });\n    return `vec3(${values.join(\", \")})`;\n  }\n  static vector2(vec) {\n    if (CoreType.isString(vec)) {\n      return vec;\n    }\n    const values = vec.toArray().map((v) => {\n      return `${CoreString.ensureFloat(v)}`;\n    });\n    return `vec2(${values.join(\", \")})`;\n  }\n  static vector3_float(vec, num) {\n    if (CoreType.isNumber(num)) {\n      num = CoreString.ensureFloat(num);\n    }\n    return `vec4(${this.vector3(vec)}, ${num})`;\n  }\n  static float4(x, y, z, w) {\n    if (CoreType.isNumber(x)) {\n      x = CoreString.ensureFloat(x);\n    }\n    if (CoreType.isNumber(y)) {\n      y = CoreString.ensureFloat(y);\n    }\n    if (CoreType.isNumber(z)) {\n      z = CoreString.ensureFloat(z);\n    }\n    if (CoreType.isNumber(w)) {\n      w = CoreString.ensureFloat(w);\n    }\n    return `vec4(${x}, ${y}, ${z}, ${w})`;\n  }\n  static float3(x, y, z) {\n    if (CoreType.isNumber(x)) {\n      x = CoreString.ensureFloat(x);\n    }\n    if (CoreType.isNumber(y)) {\n      y = CoreString.ensureFloat(y);\n    }\n    if (CoreType.isNumber(z)) {\n      z = CoreString.ensureFloat(z);\n    }\n    return `vec3(${x}, ${y}, ${z})`;\n  }\n  static float2(x, y) {\n    if (CoreType.isNumber(x)) {\n      x = CoreString.ensureFloat(x);\n    }\n    if (CoreType.isNumber(y)) {\n      y = CoreString.ensureFloat(y);\n    }\n    return `vec2(${x}, ${y})`;\n  }\n  static float(x) {\n    if (CoreType.isNumber(x)) {\n      return CoreString.ensureFloat(x);\n    } else {\n      const converted = parseFloat(x);\n      if (CoreType.isNaN(converted)) {\n        return x;\n      } else {\n        return CoreString.ensureFloat(converted);\n      }\n    }\n  }\n  static integer(x) {\n    if (CoreType.isNumber(x)) {\n      return CoreString.ensureInteger(x);\n    } else {\n      const converted = parseInt(x);\n      if (CoreType.isNaN(converted)) {\n        return x;\n      } else {\n        return CoreString.ensureInteger(converted);\n      }\n    }\n  }\n  static bool(x) {\n    if (CoreType.isBoolean(x)) {\n      return `${x}`;\n    } else {\n      return x;\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAKO,IAAM,wBAAwB;AAAA,EACnC,CAAC,sBAAsB,IAAI,GAAG;AAAA,EAC9B,CAAC,sBAAsB,GAAG,GAAG;AAAA,EAC7B,CAAC,sBAAsB,KAAK,GAAG;AAAA,EAC/B,CAAC,sBAAsB,IAAI,GAAG,CAAC,KAAK,GAAG;AAAA,EACvC,CAAC,sBAAsB,IAAI,GAAG,CAAC,KAAK,KAAK,GAAG;AAAA,EAC5C,CAAC,sBAAsB,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK,GAAG;AAAA,EACjD,CAAC,sBAAsB,IAAI,GAAG;AAAA,EAC9B,CAAC,sBAAsB,IAAI,GAAG;AAAA,EAC9B,CAAC,sBAAsB,UAAU,GAAG;AAAA,EACpC,CAAC,sBAAsB,gBAAgB,GAAG;AAAA,EAC1C,CAAC,sBAAsB,UAAU,GAAG;AAAA,EACpC,CAAC,sBAAsB,YAAY,GAAG;AAAA,EACtC,CAAC,sBAAsB,SAAS,GAAG;AAAA,EACnC,CAAC,sBAAsB,WAAW,GAAG;AAAA,EACrC,CAAC,sBAAsB,YAAY,GAAG;AACxC;AACO,IAAM,YAAN,MAAgB;AAAA,EACrB,OAAO,OAAO,QAAQ,OAAO;AAC3B,YAAQ,QAAQ;AAAA,MACd,KAAK,sBAAsB;AACzB,eAAO,KAAK,KAAK,KAAK;AAAA,MACxB,KAAK,sBAAsB;AACzB,eAAO,KAAK,QAAQ,KAAK;AAAA,MAC3B,KAAK,sBAAsB;AACzB,eAAO,KAAK,MAAM,KAAK;AAAA,MACzB,KAAK,sBAAsB;AACzB,eAAO,KAAK,QAAQ,KAAK;AAAA,MAC3B,KAAK,sBAAsB;AACzB,eAAO,KAAK,QAAQ,KAAK;AAAA,MAC3B,KAAK,sBAAsB;AACzB,eAAO,KAAK,QAAQ,KAAK;AAAA,IAC7B;AACA,WAAO,0CAA0C,MAAM;AAAA,EACzD;AAAA,EACA,OAAO,IAAI,OAAO;AAChB,QAAI,SAAS,SAAS,KAAK,GAAG;AAC5B,aAAO;AAAA,IACT;AACA,QAAI,SAAS,UAAU,KAAK,GAAG;AAC7B,aAAO,GAAG,KAAK;AAAA,IACjB;AACA,QAAI,SAAS,SAAS,KAAK,GAAG;AAC5B,aAAO,GAAG,WAAW,YAAY,KAAK,CAAC;AAAA,IACzC;AACA,QAAI,SAAS,QAAQ,KAAK,GAAG;AAC3B,aAAO,KAAK,cAAc,KAAK;AAAA,IACjC;AACA,QAAI,iBAAiB,WAAW,iBAAiB,WAAW,iBAAiB,WAAW,iBAAiB,OAAO;AAC9G,aAAO,KAAK,cAAc,MAAM,QAAQ,CAAC;AAAA,IAC3C;AACA,WAAO,wCAAwC,KAAK;AAAA,EACtD;AAAA,EACA,OAAO,cAAc,QAAQ;AAC3B,UAAM,aAAa,IAAI,MAAM,OAAO,MAAM;AAC1C,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,iBAAW,CAAC,IAAI,GAAG,WAAW,YAAY,OAAO,CAAC,CAAC,CAAC;AAAA,IACtD;AACA,UAAM,UAAU,MAAM,OAAO,MAAM;AACnC,WAAO,GAAG,OAAO,IAAI,WAAW,KAAK,IAAI,CAAC;AAAA,EAC5C;AAAA,EACA,OAAO,KAAK,KAAK;AACf,QAAI,SAAS,SAAS,GAAG,GAAG;AAC1B,aAAO;AAAA,IACT;AACA,UAAM,SAAS,IAAI,QAAQ,EAAE,IAAI,CAAC,MAAM;AACtC,aAAO,GAAG,WAAW,YAAY,CAAC,CAAC;AAAA,IACrC,CAAC;AACD,WAAO,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,EAClC;AAAA,EACA,OAAO,KAAK,KAAK;AACf,QAAI,SAAS,SAAS,GAAG,GAAG;AAC1B,aAAO;AAAA,IACT;AACA,UAAM,SAAS,IAAI,QAAQ,EAAE,IAAI,CAAC,MAAM;AACtC,aAAO,GAAG,WAAW,YAAY,CAAC,CAAC;AAAA,IACrC,CAAC;AACD,WAAO,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,EAClC;AAAA,EACA,OAAO,QAAQ,KAAK;AAClB,QAAI,SAAS,SAAS,GAAG,GAAG;AAC1B,aAAO;AAAA,IACT;AACA,UAAM,SAAS,IAAI,QAAQ,EAAE,IAAI,CAAC,MAAM;AACtC,aAAO,GAAG,WAAW,YAAY,CAAC,CAAC;AAAA,IACrC,CAAC;AACD,WAAO,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,EAClC;AAAA,EACA,OAAO,QAAQ,KAAK;AAClB,QAAI,SAAS,SAAS,GAAG,GAAG;AAC1B,aAAO;AAAA,IACT;AACA,UAAM,SAAS,IAAI,QAAQ,EAAE,IAAI,CAAC,MAAM;AACtC,aAAO,GAAG,WAAW,YAAY,CAAC,CAAC;AAAA,IACrC,CAAC;AACD,WAAO,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,EAClC;AAAA,EACA,OAAO,QAAQ,KAAK;AAClB,QAAI,SAAS,SAAS,GAAG,GAAG;AAC1B,aAAO;AAAA,IACT;AACA,UAAM,SAAS,IAAI,QAAQ,EAAE,IAAI,CAAC,MAAM;AACtC,aAAO,GAAG,WAAW,YAAY,CAAC,CAAC;AAAA,IACrC,CAAC;AACD,WAAO,QAAQ,OAAO,KAAK,IAAI,CAAC;AAAA,EAClC;AAAA,EACA,OAAO,cAAc,KAAK,KAAK;AAC7B,QAAI,SAAS,SAAS,GAAG,GAAG;AAC1B,YAAM,WAAW,YAAY,GAAG;AAAA,IAClC;AACA,WAAO,QAAQ,KAAK,QAAQ,GAAG,CAAC,KAAK,GAAG;AAAA,EAC1C;AAAA,EACA,OAAO,OAAO,GAAG,GAAG,GAAG,GAAG;AACxB,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,WAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC;AAAA,EACpC;AAAA,EACA,OAAO,OAAO,GAAG,GAAG,GAAG;AACrB,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,WAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;AAAA,EAC9B;AAAA,EACA,OAAO,OAAO,GAAG,GAAG;AAClB,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,UAAI,WAAW,YAAY,CAAC;AAAA,IAC9B;AACA,WAAO,QAAQ,CAAC,KAAK,CAAC;AAAA,EACxB;AAAA,EACA,OAAO,MAAM,GAAG;AACd,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,aAAO,WAAW,YAAY,CAAC;AAAA,IACjC,OAAO;AACL,YAAM,YAAY,WAAW,CAAC;AAC9B,UAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,eAAO;AAAA,MACT,OAAO;AACL,eAAO,WAAW,YAAY,SAAS;AAAA,MACzC;AAAA,IACF;AAAA,EACF;AAAA,EACA,OAAO,QAAQ,GAAG;AAChB,QAAI,SAAS,SAAS,CAAC,GAAG;AACxB,aAAO,WAAW,cAAc,CAAC;AAAA,IACnC,OAAO;AACL,YAAM,YAAY,SAAS,CAAC;AAC5B,UAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,eAAO;AAAA,MACT,OAAO;AACL,eAAO,WAAW,cAAc,SAAS;AAAA,MAC3C;AAAA,IACF;AAAA,EACF;AAAA,EACA,OAAO,KAAK,GAAG;AACb,QAAI,SAAS,UAAU,CAAC,GAAG;AACzB,aAAO,GAAG,CAAC;AAAA,IACb,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AACF;",
  "names": []
}
