{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/functions/_Ray.js"],
  "sourcesContent": ["\"use strict\";\nimport {\n  Vector3,\n  Raycaster,\n  Object3D,\n  PerspectiveCamera,\n  OrthographicCamera,\n  Vector2\n} from \"three\";\nimport { ObjectNamedFunction3, NamedFunction2, NamedFunction3 } from \"./_Base\";\nimport { getDefaultCamera } from \"./_Camera\";\nconst raycaster = new Raycaster();\nconst DEFAULT_POS = new Vector3();\nconst DEFAULT_INTERSECTION = {\n  distance: -1,\n  point: DEFAULT_POS,\n  object: new Object3D()\n};\nconst tmpV2 = new Vector2();\nexport class raySet extends NamedFunction3 {\n  static type() {\n    return \"raySet\";\n  }\n  func(origin, direction, target) {\n    target.origin.copy(origin);\n    target.direction.copy(direction);\n    return target;\n  }\n}\nexport class rayFromCamera extends ObjectNamedFunction3 {\n  static type() {\n    return \"rayFromCamera\";\n  }\n  func(object3D, x, y, target) {\n    if (object3D == null) {\n      this._getDefaultCamera = this._getDefaultCamera || new getDefaultCamera(this.node, this.shadersCollectionController);\n      object3D = this._getDefaultCamera.func();\n    }\n    if (!(object3D instanceof PerspectiveCamera || object3D instanceof OrthographicCamera)) {\n      return target;\n    }\n    tmpV2.set(x, y);\n    raycaster.setFromCamera(tmpV2, object3D);\n    target.copy(raycaster.ray);\n    return target;\n  }\n}\nexport class getRayOrigin extends NamedFunction2 {\n  static type() {\n    return \"getRayOrigin\";\n  }\n  func(ray, target) {\n    return target.copy(ray.origin);\n  }\n}\nexport class getRayDirection extends NamedFunction2 {\n  static type() {\n    return \"getRayDirection\";\n  }\n  func(ray, target) {\n    return target.copy(ray.direction);\n  }\n}\nexport class rayIntersectBox3 extends NamedFunction3 {\n  static type() {\n    return \"rayIntersectBox3\";\n  }\n  func(ray, box, target) {\n    ray.intersectBox(box, target);\n    return target;\n  }\n}\nexport class rayIntersectsBox3 extends NamedFunction2 {\n  static type() {\n    return \"rayIntersectsBox3\";\n  }\n  func(ray, box) {\n    return ray.intersectsBox(box);\n  }\n}\nfunction _defaultIntersection(object3D) {\n  DEFAULT_INTERSECTION.object = object3D;\n  return DEFAULT_INTERSECTION;\n}\nexport class rayIntersectObject3D extends NamedFunction3 {\n  static type() {\n    return \"rayIntersectObject3D\";\n  }\n  func(ray, object3D, recursive) {\n    raycaster.ray.copy(ray);\n    const intersections = raycaster.intersectObject(object3D, recursive);\n    return intersections[0] || _defaultIntersection(object3D);\n  }\n}\nexport class rayIntersectsObject3D extends NamedFunction3 {\n  static type() {\n    return \"rayIntersectsObject3D\";\n  }\n  func(ray, object3D, recursive) {\n    raycaster.ray.copy(ray);\n    const intersections = raycaster.intersectObject(object3D, recursive);\n    return intersections.length > 0;\n  }\n}\nexport class rayIntersectPlane extends NamedFunction3 {\n  static type() {\n    return \"rayIntersectPlane\";\n  }\n  func(ray, plane, target) {\n    ray.intersectPlane(plane, target);\n    return target;\n  }\n}\nexport class rayIntersectsPlane extends NamedFunction2 {\n  static type() {\n    return \"rayIntersectsPlane\";\n  }\n  func(ray, plane) {\n    return ray.intersectsPlane(plane);\n  }\n}\nexport class rayDistanceToPlane extends NamedFunction2 {\n  static type() {\n    return \"rayDistanceToPlane\";\n  }\n  func(ray, plane) {\n    return ray.distanceToPlane(plane);\n  }\n}\nexport class rayIntersectSphere extends NamedFunction3 {\n  static type() {\n    return \"rayIntersectSphere\";\n  }\n  func(ray, sphere, target) {\n    ray.intersectSphere(sphere, target);\n    return target;\n  }\n}\nexport class rayIntersectsSphere extends NamedFunction2 {\n  static type() {\n    return \"rayIntersectsSphere\";\n  }\n  func(ray, sphere) {\n    return ray.intersectsSphere(sphere);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAWA,IAAM,YAAY,IAAI,UAAU;AAChC,IAAM,cAAc,IAAI,QAAQ;AAChC,IAAM,uBAAuB;AAAA,EAC3B,UAAU;AAAA,EACV,OAAO;AAAA,EACP,QAAQ,IAAI,SAAS;AACvB;AACA,IAAM,QAAQ,IAAI,QAAQ;AAsFnB,IAAM,oBAAN,cAAgC,eAAe;AAAA,EACpD,OAAO,OAAO;AACZ,WAAO;AAAA,EACT;AAAA,EACA,KAAK,KAAK,OAAO,QAAQ;AACvB,QAAI,eAAe,OAAO,MAAM;AAChC,WAAO;AAAA,EACT;AACF;",
  "names": []
}
