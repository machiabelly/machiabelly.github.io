import {
  Matrix4,
  Quaternion,
  Vector3,
  incrementRefSafely,
  isBooleanTrue,
  ref
} from "./chunk-6OBTIB4K.js";
import {
  ObjectNamedFunction5
} from "./chunk-5VOYCMKV.js";
import "./chunk-PQDBXNT6.js";
import "./chunk-UXIASGQL.js";

// node_modules/@polygonjs/polygonjs/dist/src/core/LookAt.js
var t = new Vector3();
var _m4 = new Matrix4();
var CoreLookAt = class {
  static applyLookAt(object, target, invert) {
    if (invert) {
      t.copy(object.position);
      object.position.copy(target);
      object.updateMatrix();
      object.lookAt(t);
      object.position.copy(t);
      object.updateMatrix();
    } else {
      object.lookAt(target);
    }
  }
};

// node_modules/@polygonjs/polygonjs/dist/src/core/reactivity/ObjectPropertyReactivity.js
var GetObjectPropertyJsNodeInputName = ((GetObjectPropertyJsNodeInputName2) => {
  GetObjectPropertyJsNodeInputName2["position"] = "position";
  GetObjectPropertyJsNodeInputName2["rotation"] = "rotation";
  GetObjectPropertyJsNodeInputName2["quaternion"] = "quaternion";
  GetObjectPropertyJsNodeInputName2["scale"] = "scale";
  GetObjectPropertyJsNodeInputName2["matrix"] = "matrix";
  GetObjectPropertyJsNodeInputName2["visible"] = "visible";
  GetObjectPropertyJsNodeInputName2["castShadow"] = "castShadow";
  GetObjectPropertyJsNodeInputName2["receiveShadow"] = "receiveShadow";
  GetObjectPropertyJsNodeInputName2["frustumCulled"] = "frustumCulled";
  GetObjectPropertyJsNodeInputName2["up"] = "up";
  GetObjectPropertyJsNodeInputName2["matrixAutoUpdate"] = "matrixAutoUpdate";
  GetObjectPropertyJsNodeInputName2["material"] = "material";
  return GetObjectPropertyJsNodeInputName2;
})(GetObjectPropertyJsNodeInputName || {});
var refByObjectUuidByPropertyName = /* @__PURE__ */ new Map();
function getObjectPropertyRef(object3D, propertyName) {
  let mapForObject = refByObjectUuidByPropertyName.get(object3D.uuid);
  if (!mapForObject) {
    mapForObject = /* @__PURE__ */ new Map();
    refByObjectUuidByPropertyName.set(object3D.uuid, mapForObject);
  }
  let refForProperty = mapForObject.get(propertyName);
  if (!refForProperty) {
    refForProperty = ref(0);
    mapForObject.set(propertyName, refForProperty);
  }
  return refForProperty;
}
function touchObjectProperty(object3D, propertyName) {
  const _ref = getObjectPropertyRef(object3D, propertyName);
  incrementRefSafely(_ref);
}

// node_modules/@polygonjs/polygonjs/dist/src/engine/functions/_SetObjectLookAt.js
var q1 = new Quaternion();
var q2 = new Quaternion();
var setObjectLookAt = class extends ObjectNamedFunction5 {
  static type() {
    return "setObjectLookAt";
  }
  func(object3D, targetPosition, up, lerp, invertDirection, updateMatrix) {
    object3D.up.copy(up);
    if (lerp >= 1) {
      CoreLookAt.applyLookAt(object3D, targetPosition, invertDirection);
    } else {
      q1.copy(object3D.quaternion);
      CoreLookAt.applyLookAt(object3D, targetPosition, invertDirection);
      q2.copy(object3D.quaternion);
      q1.slerp(q2, lerp);
      object3D.quaternion.copy(q1);
    }
    touchObjectProperty(object3D, GetObjectPropertyJsNodeInputName.quaternion);
    if (isBooleanTrue(updateMatrix)) {
      object3D.updateMatrix();
      touchObjectProperty(object3D, GetObjectPropertyJsNodeInputName.matrix);
    }
  }
};
export {
  setObjectLookAt
};
//# sourceMappingURL=@polygonjs_polygonjs_dist_src_engine_functions_setObjectLookAt.js.map
