{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/DisplayNodeController.js"],
  "sourcesContent": ["\"use strict\";\nimport { CoreGraphNode } from \"../../../core/graph/CoreGraphNode\";\nconst DEFAULT_DISPLAY_NODE_CONTROLLER_OPTIONS = {\n  dependsOnDisplayNode: true\n};\nfunction _warnNotInitialized(node) {\n  console.error(\"displayNodeController not initialized\", node);\n}\nfunction _warnAlreadyInitialized(node) {\n  console.error(\"displayNodeController already initialed\", node);\n}\nexport class DisplayNodeController {\n  // TODO: the node could be a different than BaseNodeType\n  // at least there should be a way to infer that it is a node\n  // with children that have a display flag. This would avoid all the flags?.display?... below\n  constructor(node, callbacks, options = DEFAULT_DISPLAY_NODE_CONTROLLER_OPTIONS) {\n    this.node = node;\n    this.options = options;\n    this._initialized = false;\n    this._displayNode = void 0;\n    this._displayNodeOverride = void 0;\n    this._graphNode = new CoreGraphNode(node.scene(), `DisplayNodeController-${node.name()}`);\n    this._onDisplayNodeRemoveCallback = callbacks.onDisplayNodeRemove;\n    this._onDisplayNodeSetCallback = callbacks.onDisplayNodeSet;\n    this._onDisplayNodeUpdateCallback = callbacks.onDisplayNodeUpdate;\n  }\n  dispose() {\n    this._graphNode.dispose();\n  }\n  displayNode() {\n    return this._displayNodeOverride || this._displayNode;\n  }\n  firstNonBypassedDisplayNode() {\n    var _a;\n    return (_a = this.displayNode()) == null ? void 0 : _a.containerController.firstNonBypassedNode();\n  }\n  initializeNode() {\n    if (this._initialized) {\n      _warnAlreadyInitialized(this.node);\n      return;\n    }\n    this._initialized = true;\n    this.node.lifecycle.onChildAdd((childNode) => {\n      var _a, _b;\n      if (!this._displayNode) {\n        (_b = (_a = childNode.flags) == null ? void 0 : _a.display) == null ? void 0 : _b.set(true);\n      }\n    });\n    this.node.lifecycle.onChildRemove((childNode) => {\n      var _a, _b;\n      if (childNode.graphNodeId() == ((_a = this._displayNode) == null ? void 0 : _a.graphNodeId())) {\n        const children = this.node.children();\n        for (let i = children.length - 1; i >= 0; i--) {\n          const child = children[i];\n          const displayFlag = (_b = child.flags) == null ? void 0 : _b.display;\n          if (displayFlag) {\n            displayFlag.set(true);\n            return;\n          }\n        }\n        this.setDisplayNode(void 0);\n      }\n    });\n    this._graphNode.dirtyController.addPostDirtyHook(\"_requestDisplayNodeContainer\", () => {\n      if (this._onDisplayNodeUpdateCallback) {\n        this._onDisplayNodeUpdateCallback();\n      }\n    });\n  }\n  setDisplayNodeOverride(newDisplayNodeOverride) {\n    if (!this._initialized) {\n      _warnNotInitialized(this.node);\n    }\n    const currentDisplayNode = this._displayNodeOverride;\n    if (currentDisplayNode != newDisplayNodeOverride) {\n      const oldDisplayNode = currentDisplayNode;\n      if (oldDisplayNode) {\n        if (this.options.dependsOnDisplayNode) {\n          this._graphNode.removeGraphInput(oldDisplayNode);\n        }\n        if (this._onDisplayNodeRemoveCallback) {\n          this._onDisplayNodeRemoveCallback();\n        }\n      }\n      this._displayNodeOverride = newDisplayNodeOverride;\n      if (newDisplayNodeOverride) {\n        if (this.options.dependsOnDisplayNode) {\n          this._graphNode.addGraphInput(newDisplayNodeOverride);\n        }\n        if (this._onDisplayNodeSetCallback) {\n          this._onDisplayNodeSetCallback();\n        }\n      } else {\n        if (this._displayNode) {\n          this._commitDisplayNode(this._displayNode);\n        }\n      }\n    }\n  }\n  setDisplayNode(newDisplayNode) {\n    if (!this._initialized) {\n      _warnNotInitialized(this.node);\n    }\n    const currentDisplayNode = this._displayNode;\n    if (currentDisplayNode != newDisplayNode) {\n      const oldDisplayNode = currentDisplayNode;\n      if (oldDisplayNode) {\n        oldDisplayNode.flags.display.set(false);\n        if (this.options.dependsOnDisplayNode) {\n          this._graphNode.removeGraphInput(oldDisplayNode);\n        }\n        if (this._onDisplayNodeRemoveCallback) {\n          this._onDisplayNodeRemoveCallback();\n        }\n      }\n      this._displayNode = newDisplayNode;\n      if (newDisplayNode) {\n        this._commitDisplayNode(newDisplayNode);\n      }\n    }\n  }\n  _commitDisplayNode(newDisplayNode) {\n    if (this.options.dependsOnDisplayNode) {\n      this._graphNode.addGraphInput(newDisplayNode);\n    }\n    if (this._onDisplayNodeSetCallback) {\n      this._onDisplayNodeSetCallback();\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
