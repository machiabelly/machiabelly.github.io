{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/nodes/post/_Base.js"],
  "sourcesContent": ["\"use strict\";\nimport { TypedNode } from \"../_Base\";\nimport { NodeContext } from \"../../poly/NodeContext\";\nimport { FlagsControllerDB } from \"../utils/FlagsController\";\nimport { CoreCameraPostProcessController } from \"../../../core/camera/CoreCameraPostProcessController\";\nimport { CoreType } from \"../../../core/Type\";\nfunction PostParamCallback(node, param) {\n  TypedPostNode.PARAM_CALLBACK_updatePasses(node);\n}\nexport const PostParamOptions = {\n  cook: false,\n  callback: PostParamCallback,\n  computeOnDirty: true\n  // important if an expression drives a param\n};\nexport class TypedPostNode extends TypedNode {\n  constructor() {\n    super(...arguments);\n    this.flags = new FlagsControllerDB(this);\n    this._passesByEffectsComposer = /* @__PURE__ */ new Map();\n  }\n  static context() {\n    return NodeContext.POST;\n  }\n  initializeNode() {\n    this.flags.display.set(false);\n    this.flags.display.onUpdate(() => {\n      if (!this.flags.display.active()) {\n        return;\n      }\n      const parent = this.parent();\n      if (!(parent && parent.displayNodeController)) {\n        return;\n      }\n      parent.displayNodeController.setDisplayNode(this);\n    });\n    this.io.inputs.setCount(0, 1);\n    this.io.outputs.setHasOneOutput();\n  }\n  cook() {\n    this.cookController.endCook();\n  }\n  setupComposer(context) {\n    this._addPassFromInput(0, context);\n    if (!this.flags.bypass.active()) {\n      this._setupComposerIfActive(context);\n    }\n  }\n  _setupComposerIfActive(context) {\n    const pass = this.createPassForContext(context);\n    if (pass) {\n      const array = CoreType.isArray(pass) ? pass : [pass];\n      for (const p of array) {\n        context.composerController.addPassByNodeInBuildPassesProcess(this, p, context.composer);\n      }\n    }\n  }\n  passesByComposer(composer) {\n    return this._passesByEffectsComposer.get(composer);\n  }\n  _addPassFromInput(index, context) {\n    const input = this.io.inputs.input(index);\n    if (input) {\n      input.setupComposer(context);\n    }\n  }\n  createPassForContext(context) {\n    let pass = this._passesByEffectsComposer.get(context.composer);\n    if (!pass) {\n      pass = this.createPass(context);\n      if (pass) {\n        this._passesByEffectsComposer.set(context.composer, pass);\n      }\n    }\n    return pass;\n  }\n  createPass(context) {\n    return void 0;\n  }\n  static PARAM_CALLBACK_updatePasses(node) {\n    node._updatePasses();\n  }\n  _updatePasses() {\n    this._passesByEffectsComposer.forEach((passOrPasses) => {\n      const passes = CoreType.isArray(passOrPasses) ? passOrPasses : [passOrPasses];\n      for (const pass of passes) {\n        this.updatePass(pass);\n      }\n    });\n  }\n  updatePass(pass) {\n  }\n  _postProcessNetworkNode() {\n    const parentNode = this.parent();\n    if (CoreCameraPostProcessController.isPostProcessNetworkNode(parentNode)) {\n      return parentNode;\n    } else {\n      console.error(\"parent is neither a POST NETWORK or a POST node\", parentNode);\n      const parentPostNode = parentNode;\n      return parentPostNode._postProcessNetworkNode();\n    }\n  }\n  // protected _createRenderTarget(renderer: WebGLRenderer, options?: RenderTargetCreateOptions) {\n  // \tconst parentNode = this._postProcessNetworkNode();\n  // \treturn parentNode.effectsComposerController.createRenderTarget(renderer);\n  // }\n  // protected _createEffectComposer(renderer: WebGLRenderer, renderTarget?: WebGLRenderTarget) {\n  // \treturn new EffectComposer(renderer, renderTarget);\n  // }\n}\nexport class BasePostProcessNodeClass extends TypedPostNode {\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;AAMA,SAAS,kBAAkB,MAAM,OAAO;AACtC,gBAAc,4BAA4B,IAAI;AAChD;AACO,IAAM,mBAAmB;AAAA,EAC9B,MAAM;AAAA,EACN,UAAU;AAAA,EACV,gBAAgB;AAAA;AAElB;AACO,IAAM,gBAAN,cAA4B,UAAU;AAAA,EAC3C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,SAAK,QAAQ,IAAI,kBAAkB,IAAI;AACvC,SAAK,2BAA2C,oBAAI,IAAI;AAAA,EAC1D;AAAA,EACA,OAAO,UAAU;AACf,WAAO,YAAY;AAAA,EACrB;AAAA,EACA,iBAAiB;AACf,SAAK,MAAM,QAAQ,IAAI,KAAK;AAC5B,SAAK,MAAM,QAAQ,SAAS,MAAM;AAChC,UAAI,CAAC,KAAK,MAAM,QAAQ,OAAO,GAAG;AAChC;AAAA,MACF;AACA,YAAM,SAAS,KAAK,OAAO;AAC3B,UAAI,EAAE,UAAU,OAAO,wBAAwB;AAC7C;AAAA,MACF;AACA,aAAO,sBAAsB,eAAe,IAAI;AAAA,IAClD,CAAC;AACD,SAAK,GAAG,OAAO,SAAS,GAAG,CAAC;AAC5B,SAAK,GAAG,QAAQ,gBAAgB;AAAA,EAClC;AAAA,EACA,OAAO;AACL,SAAK,eAAe,QAAQ;AAAA,EAC9B;AAAA,EACA,cAAc,SAAS;AACrB,SAAK,kBAAkB,GAAG,OAAO;AACjC,QAAI,CAAC,KAAK,MAAM,OAAO,OAAO,GAAG;AAC/B,WAAK,uBAAuB,OAAO;AAAA,IACrC;AAAA,EACF;AAAA,EACA,uBAAuB,SAAS;AAC9B,UAAM,OAAO,KAAK,qBAAqB,OAAO;AAC9C,QAAI,MAAM;AACR,YAAM,QAAQ,SAAS,QAAQ,IAAI,IAAI,OAAO,CAAC,IAAI;AACnD,iBAAW,KAAK,OAAO;AACrB,gBAAQ,mBAAmB,kCAAkC,MAAM,GAAG,QAAQ,QAAQ;AAAA,MACxF;AAAA,IACF;AAAA,EACF;AAAA,EACA,iBAAiB,UAAU;AACzB,WAAO,KAAK,yBAAyB,IAAI,QAAQ;AAAA,EACnD;AAAA,EACA,kBAAkB,OAAO,SAAS;AAChC,UAAM,QAAQ,KAAK,GAAG,OAAO,MAAM,KAAK;AACxC,QAAI,OAAO;AACT,YAAM,cAAc,OAAO;AAAA,IAC7B;AAAA,EACF;AAAA,EACA,qBAAqB,SAAS;AAC5B,QAAI,OAAO,KAAK,yBAAyB,IAAI,QAAQ,QAAQ;AAC7D,QAAI,CAAC,MAAM;AACT,aAAO,KAAK,WAAW,OAAO;AAC9B,UAAI,MAAM;AACR,aAAK,yBAAyB,IAAI,QAAQ,UAAU,IAAI;AAAA,MAC1D;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,WAAW,SAAS;AAClB,WAAO;AAAA,EACT;AAAA,EACA,OAAO,4BAA4B,MAAM;AACvC,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,gBAAgB;AACd,SAAK,yBAAyB,QAAQ,CAAC,iBAAiB;AACtD,YAAM,SAAS,SAAS,QAAQ,YAAY,IAAI,eAAe,CAAC,YAAY;AAC5E,iBAAW,QAAQ,QAAQ;AACzB,aAAK,WAAW,IAAI;AAAA,MACtB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,WAAW,MAAM;AAAA,EACjB;AAAA,EACA,0BAA0B;AACxB,UAAM,aAAa,KAAK,OAAO;AAC/B,QAAI,gCAAgC,yBAAyB,UAAU,GAAG;AACxE,aAAO;AAAA,IACT,OAAO;AACL,cAAQ,MAAM,mDAAmD,UAAU;AAC3E,YAAM,iBAAiB;AACvB,aAAO,eAAe,wBAAwB;AAAA,IAChD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQF;",
  "names": []
}
