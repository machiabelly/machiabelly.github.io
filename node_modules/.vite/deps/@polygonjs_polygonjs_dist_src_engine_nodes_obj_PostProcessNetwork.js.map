{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/nodes/post/utils/EffectComposerController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/obj/PostProcessNetwork.js"],
  "sourcesContent": ["\"use strict\";\nimport { UnsignedByteType, HalfFloatType, FloatType } from \"three\";\nimport { EffectComposer, RenderPass } from \"postprocessing\";\nimport { NodeParamsConfig, ParamConfig } from \"../../utils/params/ParamsConfig\";\nimport { isBooleanTrue } from \"../../../../core/BooleanValue\";\nconst RENDER_TARGET_TEXTURE_TYPE_OPTIONS = {\n  UnsignedByteType,\n  HalfFloatType,\n  FloatType\n};\nconst RENDER_TARGET_TEXTURE_TYPE_MENU_ENTRIES = Object.keys(RENDER_TARGET_TEXTURE_TYPE_OPTIONS).map((name) => {\n  return {\n    name,\n    value: RENDER_TARGET_TEXTURE_TYPE_OPTIONS[name]\n  };\n});\nexport function postProcessTextureTypeLabel(value) {\n  for (const entry of RENDER_TARGET_TEXTURE_TYPE_MENU_ENTRIES) {\n    if (entry.value == value) {\n      return entry.name;\n    }\n  }\n}\nexport function PostProcessNetworkParamsConfigMixin(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      this.prependRenderPass = ParamConfig.BOOLEAN(1, {\n        separatorAfter: true\n      });\n      this.depthBuffer = ParamConfig.BOOLEAN(1);\n      this.stencilBuffer = ParamConfig.BOOLEAN(0);\n      this.sampling = ParamConfig.INTEGER(0, {\n        range: [0, 4],\n        rangeLocked: [true, false]\n      });\n      this.tTextureType = ParamConfig.BOOLEAN(0);\n      this.textureType = ParamConfig.INTEGER(UnsignedByteType, {\n        visibleIf: { tTextureType: 1 },\n        menu: {\n          entries: RENDER_TARGET_TEXTURE_TYPE_MENU_ENTRIES\n        }\n      });\n    }\n  };\n}\nexport class PostProcessNetworkParamsConfig extends PostProcessNetworkParamsConfigMixin(NodeParamsConfig) {\n}\nexport class EffectComposerController {\n  constructor(node) {\n    this.node = node;\n    this._composerAndOptionsByCamera = /* @__PURE__ */ new Map();\n    this._nextId = 0;\n    this._passByNodeInBuildPassesProcess = /* @__PURE__ */ new Map();\n    this.node.dirtyController.addPostDirtyHook(\"EffectComposerController\", () => {\n      this._updateComposers();\n    });\n  }\n  displayNodeControllerCallbacks() {\n    return {\n      onDisplayNodeRemove: () => {\n      },\n      onDisplayNodeSet: () => {\n        this.node.setDirty();\n      },\n      onDisplayNodeUpdate: () => {\n        this.node.setDirty();\n      }\n    };\n  }\n  createEffectsComposer(options) {\n    const renderer = options.renderer;\n    const pv = this.node.pv;\n    const composer = new EffectComposer(renderer, {\n      depthBuffer: isBooleanTrue(pv.depthBuffer),\n      stencilBuffer: isBooleanTrue(pv.stencilBuffer),\n      multisampling: pv.sampling,\n      frameBufferType: isBooleanTrue(pv.tTextureType) ? pv.textureType : void 0\n    });\n    composer._polygonId = this._nextId++;\n    return composer;\n  }\n  createEffectsComposerAndBuildPasses(options) {\n    const composer = this.createEffectsComposer(options);\n    this._composerAndOptionsByCamera.set(options.camera, { composer, options });\n    this._buildPasses(composer, options);\n    return composer;\n  }\n  _updateComposers() {\n    this._composerAndOptionsByCamera.forEach(({ composer, options }) => {\n      this._buildPasses(composer, options);\n    });\n  }\n  addPassByNodeInBuildPassesProcess(node, pass, composer) {\n    this._passByNodeInBuildPassesProcess.set(node, pass);\n    composer.addPass(pass);\n  }\n  // passByNodeInBuildPassesProcess(node: BaseNodeType) {\n  // \treturn this._passByNodeInBuildPassesProcess.get(node);\n  // }\n  _buildPasses(composer, options) {\n    this._passByNodeInBuildPassesProcess.clear();\n    composer.removeAllPasses();\n    if (isBooleanTrue(this.node.pv.prependRenderPass)) {\n      const renderPass = new RenderPass(options.scene, options.camera);\n      composer.addPass(renderPass);\n    }\n    const postNode = this.node.displayNodeController.displayNode();\n    if (postNode) {\n      postNode.setupComposer({\n        composerController: this,\n        composer,\n        camera: options.camera,\n        renderer: options.renderer,\n        // resolution: options.resolution,\n        scene: options.scene,\n        // requester: options.requester,\n        viewer: options.viewer\n      });\n    } else {\n      console.warn(`no displayNode found inside '${this.node.path()}'`);\n    }\n    this._passByNodeInBuildPassesProcess.clear();\n  }\n}\n", "\"use strict\";\nimport { BaseManagerObjNode } from \"./_BaseManager\";\nimport { NetworkNodeType, NodeContext } from \"../../poly/NodeContext\";\nimport { DisplayNodeController } from \"../utils/DisplayNodeController\";\nimport { EffectComposerController, PostProcessNetworkParamsConfig } from \"../post/utils/EffectComposerController\";\nexport class PostProcessNetworkObjNode extends BaseManagerObjNode {\n  constructor() {\n    super(...arguments);\n    this.paramsConfig = new PostProcessNetworkParamsConfig();\n    this.effectsComposerController = new EffectComposerController(this);\n    this.displayNodeController = new DisplayNodeController(\n      this,\n      this.effectsComposerController.displayNodeControllerCallbacks()\n    );\n    this._childrenControllerContext = NodeContext.POST;\n  }\n  static type() {\n    return NetworkNodeType.POST;\n  }\n  createNode(node_class, options) {\n    return super.createNode(node_class, options);\n  }\n  children() {\n    return super.children();\n  }\n  nodesByType(type) {\n    return super.nodesByType(type);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
