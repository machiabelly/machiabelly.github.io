{
  "version": 3,
  "sources": ["../../@jscad/modeling/src/utils/flatten.js", "../../@jscad/modeling/src/geometries/geom2/clone.js", "../../@jscad/modeling/src/maths/mat4/add.js", "../../@jscad/modeling/src/maths/mat4/create.js", "../../@jscad/modeling/src/maths/mat4/clone.js", "../../@jscad/modeling/src/maths/mat4/copy.js", "../../@jscad/modeling/src/maths/mat4/invert.js", "../../@jscad/modeling/src/maths/mat4/equals.js", "../../@jscad/modeling/src/maths/constants.js", "../../@jscad/modeling/src/maths/utils/trigonometry.js", "../../@jscad/modeling/src/maths/mat4/identity.js", "../../@jscad/modeling/src/maths/mat4/fromRotation.js", "../../@jscad/modeling/src/maths/mat4/fromScaling.js", "../../@jscad/modeling/src/maths/mat4/fromTaitBryanRotation.js", "../../@jscad/modeling/src/maths/mat4/fromTranslation.js", "../../@jscad/modeling/src/maths/mat4/fromValues.js", "../../@jscad/modeling/src/maths/vec3/abs.js", "../../@jscad/modeling/src/maths/vec3/add.js", "../../@jscad/modeling/src/maths/vec3/dot.js", "../../@jscad/modeling/src/maths/vec3/angle.js", "../../@jscad/modeling/src/maths/vec3/create.js", "../../@jscad/modeling/src/maths/vec3/clone.js", "../../@jscad/modeling/src/maths/vec3/copy.js", "../../@jscad/modeling/src/maths/vec3/cross.js", "../../@jscad/modeling/src/maths/vec3/distance.js", "../../@jscad/modeling/src/maths/vec3/divide.js", "../../@jscad/modeling/src/maths/vec3/equals.js", "../../@jscad/modeling/src/maths/vec3/fromScalar.js", "../../@jscad/modeling/src/maths/vec3/fromValues.js", "../../@jscad/modeling/src/maths/vec3/fromVec2.js", "../../@jscad/modeling/src/maths/vec3/length.js", "../../@jscad/modeling/src/maths/vec3/lerp.js", "../../@jscad/modeling/src/maths/vec3/max.js", "../../@jscad/modeling/src/maths/vec3/min.js", "../../@jscad/modeling/src/maths/vec3/multiply.js", "../../@jscad/modeling/src/maths/vec3/negate.js", "../../@jscad/modeling/src/maths/vec3/normalize.js", "../../@jscad/modeling/src/maths/vec3/orthogonal.js", "../../@jscad/modeling/src/maths/vec3/rotateX.js", "../../@jscad/modeling/src/maths/vec3/rotateY.js", "../../@jscad/modeling/src/maths/vec3/rotateZ.js", "../../@jscad/modeling/src/maths/vec3/scale.js", "../../@jscad/modeling/src/maths/vec3/snap.js", "../../@jscad/modeling/src/maths/vec3/squaredDistance.js", "../../@jscad/modeling/src/maths/vec3/squaredLength.js", "../../@jscad/modeling/src/maths/vec3/subtract.js", "../../@jscad/modeling/src/maths/vec3/toString.js", "../../@jscad/modeling/src/maths/vec3/transform.js", "../../@jscad/modeling/src/maths/vec3/index.js", "../../@jscad/modeling/src/maths/mat4/fromVectorRotation.js", "../../@jscad/modeling/src/maths/mat4/fromXRotation.js", "../../@jscad/modeling/src/maths/mat4/fromYRotation.js", "../../@jscad/modeling/src/maths/mat4/fromZRotation.js", "../../@jscad/modeling/src/maths/mat4/isIdentity.js", "../../@jscad/modeling/src/maths/mat4/isOnlyTransformScale.js", "../../@jscad/modeling/src/maths/mat4/isMirroring.js", "../../@jscad/modeling/src/maths/mat4/mirrorByPlane.js", "../../@jscad/modeling/src/maths/mat4/multiply.js", "../../@jscad/modeling/src/maths/mat4/rotate.js", "../../@jscad/modeling/src/maths/mat4/rotateX.js", "../../@jscad/modeling/src/maths/mat4/rotateY.js", "../../@jscad/modeling/src/maths/mat4/rotateZ.js", "../../@jscad/modeling/src/maths/mat4/scale.js", "../../@jscad/modeling/src/maths/mat4/subtract.js", "../../@jscad/modeling/src/maths/mat4/toString.js", "../../@jscad/modeling/src/maths/mat4/translate.js", "../../@jscad/modeling/src/maths/mat4/index.js", "../../@jscad/modeling/src/geometries/geom2/create.js", "../../@jscad/modeling/src/maths/vec2/abs.js", "../../@jscad/modeling/src/maths/vec2/add.js", "../../@jscad/modeling/src/maths/vec2/angleRadians.js", "../../@jscad/modeling/src/maths/vec2/angle.js", "../../@jscad/modeling/src/maths/vec2/angleDegrees.js", "../../@jscad/modeling/src/maths/vec2/create.js", "../../@jscad/modeling/src/maths/vec2/clone.js", "../../@jscad/modeling/src/maths/vec2/copy.js", "../../@jscad/modeling/src/maths/vec2/cross.js", "../../@jscad/modeling/src/maths/vec2/distance.js", "../../@jscad/modeling/src/maths/vec2/divide.js", "../../@jscad/modeling/src/maths/vec2/dot.js", "../../@jscad/modeling/src/maths/vec2/equals.js", "../../@jscad/modeling/src/maths/vec2/fromAngleRadians.js", "../../@jscad/modeling/src/maths/vec2/fromAngleDegrees.js", "../../@jscad/modeling/src/maths/vec2/fromScalar.js", "../../@jscad/modeling/src/maths/vec2/fromValues.js", "../../@jscad/modeling/src/maths/vec2/length.js", "../../@jscad/modeling/src/maths/vec2/lerp.js", "../../@jscad/modeling/src/maths/vec2/max.js", "../../@jscad/modeling/src/maths/vec2/min.js", "../../@jscad/modeling/src/maths/vec2/multiply.js", "../../@jscad/modeling/src/maths/vec2/negate.js", "../../@jscad/modeling/src/maths/vec2/rotate.js", "../../@jscad/modeling/src/maths/vec2/normal.js", "../../@jscad/modeling/src/maths/vec2/normalize.js", "../../@jscad/modeling/src/maths/vec2/scale.js", "../../@jscad/modeling/src/maths/vec2/snap.js", "../../@jscad/modeling/src/maths/vec2/squaredDistance.js", "../../@jscad/modeling/src/maths/vec2/squaredLength.js", "../../@jscad/modeling/src/maths/vec2/subtract.js", "../../@jscad/modeling/src/maths/vec2/toString.js", "../../@jscad/modeling/src/maths/vec2/transform.js", "../../@jscad/modeling/src/maths/vec2/index.js", "../../@jscad/modeling/src/geometries/geom2/fromPoints.js", "../../@jscad/modeling/src/geometries/geom2/fromCompactBinary.js", "../../@jscad/modeling/src/geometries/geom2/isA.js", "../../@jscad/modeling/src/geometries/geom2/applyTransforms.js", "../../@jscad/modeling/src/geometries/geom2/toSides.js", "../../@jscad/modeling/src/geometries/geom2/reverse.js", "../../@jscad/modeling/src/geometries/geom2/toOutlines.js", "../../@jscad/modeling/src/geometries/geom2/toPoints.js", "../../@jscad/modeling/src/geometries/geom2/toString.js", "../../@jscad/modeling/src/geometries/geom2/toCompactBinary.js", "../../@jscad/modeling/src/geometries/geom2/transform.js", "../../@jscad/modeling/src/geometries/geom2/validate.js", "../../@jscad/modeling/src/geometries/geom2/index.js", "../../@jscad/modeling/src/geometries/geom3/clone.js", "../../@jscad/modeling/src/geometries/geom3/create.js", "../../@jscad/modeling/src/geometries/poly3/create.js", "../../@jscad/modeling/src/geometries/poly3/clone.js", "../../@jscad/modeling/src/geometries/poly3/fromPoints.js", "../../@jscad/modeling/src/geometries/poly3/fromPointsAndPlane.js", "../../@jscad/modeling/src/maths/vec4/create.js", "../../@jscad/modeling/src/maths/vec4/clone.js", "../../@jscad/modeling/src/maths/vec4/copy.js", "../../@jscad/modeling/src/maths/vec4/equals.js", "../../@jscad/modeling/src/maths/plane/flip.js", "../../@jscad/modeling/src/maths/plane/fromNormalAndPoint.js", "../../@jscad/modeling/src/maths/vec4/fromValues.js", "../../@jscad/modeling/src/maths/plane/fromPoints.js", "../../@jscad/modeling/src/maths/plane/fromPointsRandom.js", "../../@jscad/modeling/src/maths/plane/projectionOfPoint.js", "../../@jscad/modeling/src/maths/plane/signedDistanceToPoint.js", "../../@jscad/modeling/src/maths/vec4/toString.js", "../../@jscad/modeling/src/maths/plane/transform.js", "../../@jscad/modeling/src/maths/plane/index.js", "../../@jscad/modeling/src/geometries/poly3/invert.js", "../../@jscad/modeling/src/geometries/poly3/isA.js", "../../@jscad/modeling/src/geometries/poly3/isConvex.js", "../../@jscad/modeling/src/geometries/poly3/plane.js", "../../@jscad/modeling/src/geometries/poly3/measureArea.js", "../../@jscad/modeling/src/geometries/poly3/measureBoundingBox.js", "../../@jscad/modeling/src/maths/vec4/dot.js", "../../@jscad/modeling/src/maths/vec4/fromScalar.js", "../../@jscad/modeling/src/maths/vec4/transform.js", "../../@jscad/modeling/src/maths/vec4/index.js", "../../@jscad/modeling/src/geometries/poly3/measureBoundingSphere.js", "../../@jscad/modeling/src/geometries/poly3/measureSignedVolume.js", "../../@jscad/modeling/src/geometries/poly3/toPoints.js", "../../@jscad/modeling/src/geometries/poly3/toString.js", "../../@jscad/modeling/src/geometries/poly3/transform.js", "../../@jscad/modeling/src/geometries/poly3/validate.js", "../../@jscad/modeling/src/geometries/poly3/index.js", "../../@jscad/modeling/src/geometries/geom3/fromPoints.js", "../../@jscad/modeling/src/geometries/geom3/fromCompactBinary.js", "../../@jscad/modeling/src/geometries/geom3/applyTransforms.js", "../../@jscad/modeling/src/geometries/geom3/toPolygons.js", "../../@jscad/modeling/src/geometries/geom3/invert.js", "../../@jscad/modeling/src/geometries/geom3/isA.js", "../../@jscad/modeling/src/geometries/geom3/toPoints.js", "../../@jscad/modeling/src/geometries/geom3/toString.js", "../../@jscad/modeling/src/geometries/geom3/toCompactBinary.js", "../../@jscad/modeling/src/geometries/geom3/transform.js", "../../@jscad/modeling/src/geometries/geom3/validate.js", "../../@jscad/modeling/src/geometries/geom3/index.js", "../../@jscad/modeling/src/geometries/path2/clone.js", "../../@jscad/modeling/src/geometries/path2/close.js", "../../@jscad/modeling/src/geometries/path2/create.js", "../../@jscad/modeling/src/geometries/path2/fromPoints.js", "../../@jscad/modeling/src/geometries/path2/applyTransforms.js", "../../@jscad/modeling/src/geometries/path2/toPoints.js", "../../@jscad/modeling/src/geometries/path2/appendArc.js", "../../@jscad/modeling/src/geometries/path2/concat.js", "../../@jscad/modeling/src/geometries/path2/appendPoints.js", "../../@jscad/modeling/src/geometries/path2/appendBezier.js", "../../@jscad/modeling/src/geometries/path2/equals.js", "../../@jscad/modeling/src/geometries/path2/fromCompactBinary.js", "../../@jscad/modeling/src/geometries/path2/isA.js", "../../@jscad/modeling/src/geometries/path2/reverse.js", "../../@jscad/modeling/src/geometries/path2/toString.js", "../../@jscad/modeling/src/geometries/path2/toCompactBinary.js", "../../@jscad/modeling/src/geometries/path2/transform.js", "../../@jscad/modeling/src/geometries/path2/validate.js", "../../@jscad/modeling/src/geometries/path2/index.js", "../../@jscad/modeling/src/colors/colorize.js", "../../@jscad/modeling/src/colors/cssColors.js", "../../@jscad/modeling/src/colors/colorNameToRgb.js", "../../@jscad/modeling/src/colors/hexToRgb.js", "../../@jscad/modeling/src/colors/hueToColorComponent.js", "../../@jscad/modeling/src/colors/hslToRgb.js", "../../@jscad/modeling/src/colors/hsvToRgb.js", "../../@jscad/modeling/src/colors/rgbToHex.js", "../../@jscad/modeling/src/colors/rgbToHsl.js", "../../@jscad/modeling/src/colors/rgbToHsv.js", "../../@jscad/modeling/src/colors/index.js", "../../@jscad/modeling/src/curves/bezier/create.js", "../../@jscad/modeling/src/curves/bezier/valueAt.js", "../../@jscad/modeling/src/curves/bezier/tangentAt.js", "../../@jscad/modeling/src/curves/bezier/index.js", "../../@jscad/modeling/src/curves/index.js", "../../@jscad/modeling/src/maths/utils/area.js", "../../@jscad/modeling/src/geometries/poly2/measureArea.js", "../../@jscad/modeling/src/geometries/poly2/create.js", "../../@jscad/modeling/src/geometries/poly2/flip.js", "../../@jscad/modeling/src/geometries/poly2/arePointsInside.js", "../../@jscad/modeling/src/geometries/poly2/index.js", "../../@jscad/modeling/src/geometries/index.js", "../../@jscad/modeling/src/maths/line2/create.js", "../../@jscad/modeling/src/maths/line2/clone.js", "../../@jscad/modeling/src/maths/line2/direction.js", "../../@jscad/modeling/src/maths/line2/origin.js", "../../@jscad/modeling/src/maths/line2/closestPoint.js", "../../@jscad/modeling/src/maths/line2/copy.js", "../../@jscad/modeling/src/maths/line2/distanceToPoint.js", "../../@jscad/modeling/src/maths/line2/equals.js", "../../@jscad/modeling/src/maths/line2/fromPoints.js", "../../@jscad/modeling/src/maths/line2/fromValues.js", "../../@jscad/modeling/src/maths/utils/aboutEqualNormals.js", "../../@jscad/modeling/src/maths/utils/interpolateBetween2DPointsForY.js", "../../@jscad/modeling/src/maths/utils/intersect.js", "../../@jscad/modeling/src/maths/utils/solve2Linear.js", "../../@jscad/modeling/src/maths/utils/index.js", "../../@jscad/modeling/src/maths/line2/intersectPointOfLines.js", "../../@jscad/modeling/src/maths/line2/reverse.js", "../../@jscad/modeling/src/maths/line2/toString.js", "../../@jscad/modeling/src/maths/line2/transform.js", "../../@jscad/modeling/src/maths/line2/xAtY.js", "../../@jscad/modeling/src/maths/line2/index.js", "../../@jscad/modeling/src/maths/line3/create.js", "../../@jscad/modeling/src/maths/line3/clone.js", "../../@jscad/modeling/src/maths/line3/closestPoint.js", "../../@jscad/modeling/src/maths/line3/copy.js", "../../@jscad/modeling/src/maths/line3/direction.js", "../../@jscad/modeling/src/maths/line3/distanceToPoint.js", "../../@jscad/modeling/src/maths/line3/equals.js", "../../@jscad/modeling/src/maths/line3/fromPointAndDirection.js", "../../@jscad/modeling/src/maths/line3/fromPlanes.js", "../../@jscad/modeling/src/maths/line3/fromPoints.js", "../../@jscad/modeling/src/maths/line3/intersectPointOfLineAndPlane.js", "../../@jscad/modeling/src/maths/line3/origin.js", "../../@jscad/modeling/src/maths/line3/reverse.js", "../../@jscad/modeling/src/maths/line3/toString.js", "../../@jscad/modeling/src/maths/line3/transform.js", "../../@jscad/modeling/src/maths/line3/index.js", "../../@jscad/modeling/src/maths/index.js", "../../@jscad/modeling/src/measurements/measureArea.js", "../../@jscad/modeling/src/measurements/measureAggregateArea.js", "../../@jscad/modeling/src/measurements/measureBoundingBox.js", "../../@jscad/modeling/src/measurements/measureAggregateBoundingBox.js", "../../@jscad/modeling/src/measurements/calculateEpsilonFromBounds.js", "../../@jscad/modeling/src/measurements/measureAggregateEpsilon.js", "../../@jscad/modeling/src/measurements/measureVolume.js", "../../@jscad/modeling/src/measurements/measureAggregateVolume.js", "../../@jscad/modeling/src/measurements/measureBoundingSphere.js", "../../@jscad/modeling/src/measurements/measureCenter.js", "../../@jscad/modeling/src/measurements/measureCenterOfMass.js", "../../@jscad/modeling/src/measurements/measureDimensions.js", "../../@jscad/modeling/src/measurements/measureEpsilon.js", "../../@jscad/modeling/src/measurements/index.js", "../../@jscad/modeling/src/primitives/commonChecks.js", "../../@jscad/modeling/src/primitives/arc.js", "../../@jscad/modeling/src/primitives/ellipse.js", "../../@jscad/modeling/src/primitives/circle.js", "../../@jscad/modeling/src/primitives/cuboid.js", "../../@jscad/modeling/src/primitives/cube.js", "../../@jscad/modeling/src/primitives/cylinderElliptic.js", "../../@jscad/modeling/src/primitives/cylinder.js", "../../@jscad/modeling/src/primitives/ellipsoid.js", "../../@jscad/modeling/src/primitives/polyhedron.js", "../../@jscad/modeling/src/primitives/geodesicSphere.js", "../../@jscad/modeling/src/primitives/line.js", "../../@jscad/modeling/src/primitives/polygon.js", "../../@jscad/modeling/src/primitives/rectangle.js", "../../@jscad/modeling/src/primitives/roundedCuboid.js", "../../@jscad/modeling/src/primitives/roundedCylinder.js", "../../@jscad/modeling/src/primitives/roundedRectangle.js", "../../@jscad/modeling/src/primitives/sphere.js", "../../@jscad/modeling/src/primitives/square.js", "../../@jscad/modeling/src/primitives/star.js", "../../@jscad/modeling/src/operations/transforms/mirror.js", "../../@jscad/modeling/src/operations/extrusions/slice/calculatePlane.js", "../../@jscad/modeling/src/operations/extrusions/slice/create.js", "../../@jscad/modeling/src/operations/extrusions/slice/clone.js", "../../@jscad/modeling/src/operations/extrusions/slice/equals.js", "../../@jscad/modeling/src/operations/extrusions/slice/fromPoints.js", "../../@jscad/modeling/src/operations/extrusions/slice/fromSides.js", "../../@jscad/modeling/src/operations/extrusions/slice/isA.js", "../../@jscad/modeling/src/operations/extrusions/slice/reverse.js", "../../@jscad/modeling/src/operations/extrusions/slice/toEdges.js", "../../@jscad/modeling/src/operations/extrusions/earcut/linkedListSort.js", "../../@jscad/modeling/src/operations/extrusions/earcut/linkedList.js", "../../@jscad/modeling/src/operations/extrusions/earcut/triangle.js", "../../@jscad/modeling/src/operations/extrusions/earcut/linkedPolygon.js", "../../@jscad/modeling/src/operations/extrusions/earcut/eliminateHoles.js", "../../@jscad/modeling/src/operations/extrusions/earcut/index.js", "../../@jscad/modeling/src/operations/extrusions/earcut/assignHoles.js", "../../@jscad/modeling/src/operations/extrusions/earcut/polygonHierarchy.js", "../../@jscad/modeling/src/operations/extrusions/slice/toPolygons.js", "../../@jscad/modeling/src/operations/extrusions/slice/toString.js", "../../@jscad/modeling/src/operations/extrusions/slice/transform.js", "../../@jscad/modeling/src/operations/extrusions/slice/index.js", "../../@jscad/modeling/src/operations/extrusions/slice/repair.js", "../../@jscad/modeling/src/operations/extrusions/extrudeWalls.js", "../../@jscad/modeling/src/operations/extrusions/extrudeFromSlices.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRotate.js", "../../@jscad/modeling/src/operations/transforms/rotate.js", "../../@jscad/modeling/src/operations/transforms/translate.js", "../../@jscad/modeling/src/primitives/torus.js", "../../@jscad/modeling/src/primitives/triangle.js", "../../@jscad/modeling/src/primitives/index.js", "../../@jscad/modeling/src/text/fonts/single-line/hershey/simplex.js", "../../@jscad/modeling/src/text/vectorParams.js", "../../@jscad/modeling/src/text/vectorChar.js", "../../@jscad/modeling/src/text/vectorText.js", "../../@jscad/modeling/src/text/index.js", "../../@jscad/modeling/src/utils/areAllShapesTheSameType.js", "../../@jscad/modeling/src/utils/degToRad.js", "../../@jscad/modeling/src/utils/fnNumberSort.js", "../../@jscad/modeling/src/utils/insertSorted.js", "../../@jscad/modeling/src/utils/radiusToSegments.js", "../../@jscad/modeling/src/utils/radToDeg.js", "../../@jscad/modeling/src/utils/index.js", "../../@jscad/modeling/src/operations/booleans/fromFakePolygons.js", "../../@jscad/modeling/src/operations/booleans/to3DWalls.js", "../../@jscad/modeling/src/maths/OrthoNormalBasis.js", "../../@jscad/modeling/src/operations/modifiers/reTesselateCoplanarPolygons.js", "../../@jscad/modeling/src/operations/modifiers/retessellate.js", "../../@jscad/modeling/src/operations/booleans/mayOverlap.js", "../../@jscad/modeling/src/operations/booleans/trees/Node.js", "../../@jscad/modeling/src/operations/booleans/trees/splitLineSegmentByPlane.js", "../../@jscad/modeling/src/operations/booleans/trees/splitPolygonByPlane.js", "../../@jscad/modeling/src/operations/booleans/trees/PolygonTreeNode.js", "../../@jscad/modeling/src/operations/booleans/trees/Tree.js", "../../@jscad/modeling/src/operations/booleans/trees/index.js", "../../@jscad/modeling/src/operations/booleans/intersectGeom3Sub.js", "../../@jscad/modeling/src/operations/booleans/intersectGeom3.js", "../../@jscad/modeling/src/operations/booleans/intersectGeom2.js", "../../@jscad/modeling/src/operations/booleans/intersect.js", "../../@jscad/modeling/src/operations/booleans/scissionGeom3.js", "../../@jscad/modeling/src/operations/booleans/scission.js", "../../@jscad/modeling/src/operations/booleans/subtractGeom3Sub.js", "../../@jscad/modeling/src/operations/booleans/subtractGeom3.js", "../../@jscad/modeling/src/operations/booleans/subtractGeom2.js", "../../@jscad/modeling/src/operations/booleans/subtract.js", "../../@jscad/modeling/src/operations/booleans/unionGeom3Sub.js", "../../@jscad/modeling/src/operations/booleans/unionGeom3.js", "../../@jscad/modeling/src/operations/booleans/unionGeom2.js", "../../@jscad/modeling/src/operations/booleans/union.js", "../../@jscad/modeling/src/operations/booleans/index.js", "../../@jscad/modeling/src/operations/expansions/offsetFromPoints.js", "../../@jscad/modeling/src/operations/expansions/expandGeom2.js", "../../@jscad/modeling/src/operations/expansions/extrudePolygon.js", "../../@jscad/modeling/src/operations/expansions/expandShell.js", "../../@jscad/modeling/src/operations/expansions/expandGeom3.js", "../../@jscad/modeling/src/operations/expansions/expandPath2.js", "../../@jscad/modeling/src/operations/expansions/expand.js", "../../@jscad/modeling/src/operations/expansions/offsetGeom2.js", "../../@jscad/modeling/src/operations/expansions/offsetPath2.js", "../../@jscad/modeling/src/operations/expansions/offset.js", "../../@jscad/modeling/src/operations/expansions/index.js", "../../@jscad/modeling/src/operations/extrusions/extrudeLinearGeom2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeLinearPath2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeLinear.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRectangularPath2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRectangularGeom2.js", "../../@jscad/modeling/src/operations/extrusions/extrudeRectangular.js", "../../@jscad/modeling/src/operations/extrusions/extrudeHelical.js", "../../@jscad/modeling/src/operations/extrusions/project.js", "../../@jscad/modeling/src/operations/extrusions/index.js", "../../@jscad/modeling/src/operations/hulls/hullPoints2.js", "../../@jscad/modeling/src/operations/hulls/toUniquePoints.js", "../../@jscad/modeling/src/operations/hulls/hullPath2.js", "../../@jscad/modeling/src/operations/hulls/hullGeom2.js", "../../@jscad/modeling/src/operations/hulls/quickhull/point-line-distance.js", "../../@jscad/modeling/src/operations/hulls/quickhull/get-plane-normal.js", "../../@jscad/modeling/src/operations/hulls/quickhull/VertexList.js", "../../@jscad/modeling/src/operations/hulls/quickhull/Vertex.js", "../../@jscad/modeling/src/operations/hulls/quickhull/HalfEdge.js", "../../@jscad/modeling/src/operations/hulls/quickhull/Face.js", "../../@jscad/modeling/src/operations/hulls/quickhull/QuickHull.js", "../../@jscad/modeling/src/operations/hulls/quickhull/index.js", "../../@jscad/modeling/src/operations/hulls/hullGeom3.js", "../../@jscad/modeling/src/operations/hulls/hull.js", "../../@jscad/modeling/src/operations/hulls/hullChain.js", "../../@jscad/modeling/src/operations/hulls/index.js", "../../@jscad/modeling/src/operations/modifiers/snapPolygons.js", "../../@jscad/modeling/src/operations/modifiers/mergePolygons.js", "../../@jscad/modeling/src/operations/modifiers/insertTjunctions.js", "../../@jscad/modeling/src/operations/modifiers/triangulatePolygons.js", "../../@jscad/modeling/src/operations/modifiers/generalize.js", "../../@jscad/modeling/src/operations/modifiers/snap.js", "../../@jscad/modeling/src/operations/modifiers/index.js", "../../@jscad/modeling/src/utils/padArrayToLength.js", "../../@jscad/modeling/src/operations/transforms/align.js", "../../@jscad/modeling/src/operations/transforms/center.js", "../../@jscad/modeling/src/operations/transforms/scale.js", "../../@jscad/modeling/src/operations/transforms/transform.js", "../../@jscad/modeling/src/operations/transforms/index.js", "../../@jscad/modeling/src/index.js", "../../@polygonjs/polygonjs/dist/src/engine/poly/ParamType.js", "../../@polygonjs/polygonjs/dist/src/engine/poly/ParamEvent.js", "../../@polygonjs/polygonjs/dist/src/core/Color.js", "../../@polygonjs/polygonjs/dist/src/engine/params/utils/OptionsController.js", "../../@polygonjs/polygonjs/dist/src/engine/params/utils/EmitController.js", "../../@polygonjs/polygonjs/dist/src/engine/params/utils/states/TimeDependent.js", "../../@polygonjs/polygonjs/dist/src/engine/params/utils/states/Error.js", "../../@polygonjs/polygonjs/dist/src/engine/params/utils/StatesController.js", "../../@polygonjs/polygonjs/dist/src/engine/params/_Base.js", "../../@polygonjs/polygonjs/dist/src/engine/params/ramp/RampValue.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Ramp.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/params/ParamsConfig.js", "../../@polygonjs/polygonjs/dist/src/engine/poly/NodeEvent.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/Constant.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/Attribute.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/Instancer.js", "../../@polygonjs/polygonjs/dist/src/engine/poly/Assert.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/CoreEntity.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/sop/utils/group/GroupCommon.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/EntityGroupCollection.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/utils/Common.js", "../../@polygonjs/polygonjs/dist/src/core/reactivity/ObjectAttributeReactivity.js", "../../@polygonjs/polygonjs/dist/src/core/reactivity/ObjectAttributeReactivityUpdateRef.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/connections/_Base.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/connections/Js.js", "../../@polygonjs/polygonjs/dist/src/core/reactivity/ObjectAttributeReactivityCreateRef.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/ObjectContent.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/object/BaseCoreObjectUtils.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/object/BaseCoreObject.js", "../../@polygonjs/polygonjs/dist/src/core/Transform.js", "../../@polygonjs/polygonjs/dist/src/core/TransformSpace.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/point/CorePoint.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/quad/QuadCommon.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/quad/QuadCoreType.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/GeometryUtils.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/CoreThreejsPointUtils.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/vertex/CoreVertex.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/vertex/CoreVertexUtils.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreejsVertex.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreejsPoint.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/Geometry.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/code/configs/BaseParamConfig.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/gl/code/utils/GLParamConfig.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/gl/code/assemblers/materials/OnBeforeCompile.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/Material.js", "../../three/build/three.module.js", "../../three-mesh-bvh/src/core/Constants.js", "../../three-mesh-bvh/src/core/build/geometryUtils.js", "../../three-mesh-bvh/src/utils/ArrayBoxUtilities.js", "../../three-mesh-bvh/src/core/build/computeBoundsUtils.js", "../../three-mesh-bvh/src/core/build/splitUtils.js", "../../three-mesh-bvh/src/core/MeshBVHNode.js", "../../three-mesh-bvh/src/core/build/sortUtils.generated.js", "../../three-mesh-bvh/src/core/build/sortUtils_indirect.generated.js", "../../three-mesh-bvh/src/core/build/buildTree.js", "../../three-mesh-bvh/src/math/SeparatingAxisBounds.js", "../../three-mesh-bvh/src/math/MathUtilities.js", "../../three-mesh-bvh/src/math/ExtendedTriangle.js", "../../three-mesh-bvh/src/math/OrientedBox.js", "../../three-mesh-bvh/src/utils/PrimitivePool.js", "../../three-mesh-bvh/src/utils/ExtendedTrianglePool.js", "../../three-mesh-bvh/src/core/utils/nodeBufferUtils.js", "../../three-mesh-bvh/src/core/utils/BufferStack.js", "../../three-mesh-bvh/src/core/cast/shapecast.js", "../../three-mesh-bvh/src/core/cast/closestPointToPoint.js", "../../three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js", "../../three-mesh-bvh/src/utils/TriangleUtilities.js", "../../three-mesh-bvh/src/core/utils/iterationUtils.generated.js", "../../three-mesh-bvh/src/core/cast/refit.generated.js", "../../three-mesh-bvh/src/core/utils/intersectUtils.js", "../../three-mesh-bvh/src/core/utils/iterationUtils_indirect.generated.js", "../../three-mesh-bvh/src/core/cast/raycast.generated.js", "../../three-mesh-bvh/src/core/cast/raycastFirst.generated.js", "../../three-mesh-bvh/src/core/cast/intersectsGeometry.generated.js", "../../three-mesh-bvh/src/core/cast/closestPointToGeometry.generated.js", "../../three-mesh-bvh/src/core/cast/refit_indirect.generated.js", "../../three-mesh-bvh/src/core/cast/raycast_indirect.generated.js", "../../three-mesh-bvh/src/core/cast/raycastFirst_indirect.generated.js", "../../three-mesh-bvh/src/core/cast/intersectsGeometry_indirect.generated.js", "../../three-mesh-bvh/src/core/cast/closestPointToGeometry_indirect.generated.js", "../../three-mesh-bvh/src/utils/BufferUtils.js", "../../three-mesh-bvh/src/core/cast/bvhcast.js", "../../three-mesh-bvh/src/core/MeshBVH.js", "../../three-mesh-bvh/src/objects/MeshBVHVisualizer.js", "../../three-mesh-bvh/src/debug/Debug.js", "../../three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js", "../../three-mesh-bvh/src/utils/ExtensionUtilities.js", "../../three-mesh-bvh/src/utils/StaticGeometryGenerator.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/bvh/ThreeMeshBVHHelper.js", "../../@polygonjs/polygonjs/node_modules/three/examples/jsm/utils/BufferGeometryUtils.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/util/IndexBuilder.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/builders/Merge.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/cad/CadCommon.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/cad/CadCoreType.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/csg/CsgCoreType.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/csg/CsgCommon.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/tet/TetCoreType.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/Group.js", "../../@polygonjs/polygonjs/dist/src/engine/operations/_Base.js", "../../@polygonjs/polygonjs/dist/src/engine/operations/sop/_Base.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreejsCoreObject.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/primitive/CorePrimitive.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/primitive/CorePrimitiveUtils.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreejsPrimitive.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/builders/Mesh.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreejsPrimitiveTriangle.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreejsPrimitiveLineSegment.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreejsPrimitivePoint.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/modules/three/ThreeModule.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/CoreObjectFactory.js", "../../@polygonjs/polygonjs/dist/src/core/geometry/entities/point/CorePointUtils.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/flags/Base.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/flags/Bypass.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/flags/Display.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/flags/Optimize.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/FlagsController.js", "../../@polygonjs/polygonjs/dist/src/engine/poly/InputCloneMode.js", "../../jsep/dist/jsep.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/traversers/ParsedTree.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/LiteralConstructsController.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/traversers/_Base.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/Common.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/AttributeRequirementsController.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/traversers/FunctionGenerator.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/traversers/ExpressionStringGenerator.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/DependenciesController.js", "../../@polygonjs/polygonjs/dist/src/engine/expressions/ExpressionManager.js", "../../@polygonjs/polygonjs/dist/src/engine/params/utils/ExpressionController.js", "../../@polygonjs/polygonjs/dist/src/engine/params/_Numeric.js", "../../@polygonjs/polygonjs/dist/src/engine/params/_BaseString.js", "../../@polygonjs/polygonjs/dist/src/engine/params/_BasePath.js", "../../@polygonjs/polygonjs/dist/src/engine/params/NodePath.js", "../../@polygonjs/polygonjs/dist/src/engine/params/ParamPath.js", "../../@polygonjs/polygonjs/dist/src/engine/params/String.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Float.js", "../../@polygonjs/polygonjs/dist/src/engine/params/_Multiple.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/UIData.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/states/Base.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/states/TimeDependent.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/states/Error.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/StatesController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/hierarchy/ParentController.js", "../../@polygonjs/polygonjs/dist/src/core/NodeSelection.js", "../../@polygonjs/polygonjs/dist/src/engine/operations/container/utils/inputs/ClonedStatesController.js", "../../@polygonjs/polygonjs/dist/src/engine/operations/container/utils/InputsController.js", "../../@polygonjs/polygonjs/dist/src/engine/operations/container/_Base.js", "../../@polygonjs/polygonjs/dist/src/engine/operations/container/sop.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/NameController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/hierarchy/ChildrenController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/LifeCycleController.js", "../../@polygonjs/polygonjs/dist/src/core/animation/Constant.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/Common.js", "../../@polygonjs/polygonjs/dist/src/core/animation/AnimatedPropertiesRegister.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/StartTimeline.js", "../../@polygonjs/polygonjs/dist/src/core/animation/ParamProxy.js", "../../@polygonjs/polygonjs/dist/src/core/animation/NodeParamProxiesRegister.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/AnimBuilderTypes.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/WithOp.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Vector4.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Color.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Vector3.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Vector2.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Number.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Vector.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Quaternion.js", "../../@polygonjs/polygonjs/dist/src/core/animation/vars/type/Euler.js", "../../@polygonjs/polygonjs/dist/src/core/animation/TimelineBuilderProperty.js", "../../@polygonjs/polygonjs/dist/src/core/thirdParty/gsap/gsapFactory.js", "../../@polygonjs/polygonjs/dist/src/core/animation/TimelineBuilder.js", "../../@polygonjs/polygonjs/dist/src/core/audio/AudioBuilder.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/utils/ContainableMap.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/_Base.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Animation.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Audio.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Event.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Geometry.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Gl.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Js.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Manager.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Material.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Object.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Texture.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/PostProcess.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/Rop.js", "../../@polygonjs/polygonjs/dist/src/engine/containers/utils/ContainerMap.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/ContainerController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/cook/PerformanceController.js", "../../@polygonjs/polygonjs/dist/src/core/reactivity/NodeReactivity.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/CookController.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Boolean.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Button.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Color.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Folder.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Integer.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Vector2.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Vector3.js", "../../@polygonjs/polygonjs/dist/src/engine/params/Vector4.js", "../../@polygonjs/polygonjs/dist/src/engine/params/types/ParamConstructorByType.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/params/ParamsController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/params/ParamsValueAccessor.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/NodeConnection.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/utils/ClonedStatesController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/InputsController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/OutputsController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/ConnectionsController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/SavedConnectionPointsDataController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/connections/Gl.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/connections/Event.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/connections/ConnectionMap.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/ConnectionPointsSpareParamsController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/ConnectionPointsController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/io/IOController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/params/ParamsAccessor.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/_Base.js"],
  "sourcesContent": ["/**\n * Flatten the given list of arguments into a single flat array.\n * The arguments can be composed of multiple depths of objects and arrays.\n * @param {Array} arr - list of arguments\n * @returns {Array} a flat list of arguments\n * @alias module:modeling/utils.flatten\n */\nconst flatten = (arr) => arr.reduce((acc, val) => Array.isArray(val) ? acc.concat(flatten(val)) : acc.concat(val), [])\n\nmodule.exports = flatten\n", "/**\n * Performs a shallow clone of the given geometry.\n * @param {geom2} geometry - the geometry to clone\n * @returns {geom2} new geometry\n * @alias module:modeling/geometries/geom2.clone\n */\nconst clone = (geometry) => Object.assign({}, geometry)\n\nmodule.exports = clone\n", "/**\n * Adds the two matrices (A+B).\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} a - first operand\n * @param {mat4} b - second operand\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.add\n */\nconst add = (out, a, b) => {\n  out[0] = a[0] + b[0]\n  out[1] = a[1] + b[1]\n  out[2] = a[2] + b[2]\n  out[3] = a[3] + b[3]\n  out[4] = a[4] + b[4]\n  out[5] = a[5] + b[5]\n  out[6] = a[6] + b[6]\n  out[7] = a[7] + b[7]\n  out[8] = a[8] + b[8]\n  out[9] = a[9] + b[9]\n  out[10] = a[10] + b[10]\n  out[11] = a[11] + b[11]\n  out[12] = a[12] + b[12]\n  out[13] = a[13] + b[13]\n  out[14] = a[14] + b[14]\n  out[15] = a[15] + b[15]\n  return out\n}\n\nmodule.exports = add\n", "/**\n * Represents a 4x4 matrix which is column-major (when typed out it looks row-major).\n * See fromValues().\n * @typedef {Array} mat4\n */\n\n/**\n * Creates a new identity matrix.\n *\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.create\n */\nconst create = () => [\n  1, 0, 0, 0,\n  0, 1, 0, 0,\n  0, 0, 1, 0,\n  0, 0, 0, 1\n]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Creates a clone of the given matrix.\n *\n * @param {mat4} matrix - matrix to clone\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.clone\n */\nconst clone = (matrix) => {\n  const out = create()\n  out[0] = matrix[0]\n  out[1] = matrix[1]\n  out[2] = matrix[2]\n  out[3] = matrix[3]\n  out[4] = matrix[4]\n  out[5] = matrix[5]\n  out[6] = matrix[6]\n  out[7] = matrix[7]\n  out[8] = matrix[8]\n  out[9] = matrix[9]\n  out[10] = matrix[10]\n  out[11] = matrix[11]\n  out[12] = matrix[12]\n  out[13] = matrix[13]\n  out[14] = matrix[14]\n  out[15] = matrix[15]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Creates a copy of the given matrix.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to copy\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.copy\n */\nconst copy = (out, matrix) => {\n  out[0] = matrix[0]\n  out[1] = matrix[1]\n  out[2] = matrix[2]\n  out[3] = matrix[3]\n  out[4] = matrix[4]\n  out[5] = matrix[5]\n  out[6] = matrix[6]\n  out[7] = matrix[7]\n  out[8] = matrix[8]\n  out[9] = matrix[9]\n  out[10] = matrix[10]\n  out[11] = matrix[11]\n  out[12] = matrix[12]\n  out[13] = matrix[13]\n  out[14] = matrix[14]\n  out[15] = matrix[15]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Creates a invert copy of the given matrix.\n * @author Julian Lloyd\n * code from https://github.com/jlmakes/rematrix/blob/master/src/index.js\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to invert\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.invert\n */\nconst invert = (out, matrix) => {\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n  const a30 = matrix[12]\n  const a31 = matrix[13]\n  const a32 = matrix[14]\n  const a33 = matrix[15]\n\n  const b00 = a00 * a11 - a01 * a10\n  const b01 = a00 * a12 - a02 * a10\n  const b02 = a00 * a13 - a03 * a10\n  const b03 = a01 * a12 - a02 * a11\n  const b04 = a01 * a13 - a03 * a11\n  const b05 = a02 * a13 - a03 * a12\n  const b06 = a20 * a31 - a21 * a30\n  const b07 = a20 * a32 - a22 * a30\n  const b08 = a20 * a33 - a23 * a30\n  const b09 = a21 * a32 - a22 * a31\n  const b10 = a21 * a33 - a23 * a31\n  const b11 = a22 * a33 - a23 * a32\n\n  // Calculate the determinant\n  let det =\n    b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06\n\n  if (!det) {\n    return null\n  }\n  det = 1.0 / det\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det\n\n  return out\n}\n\nmodule.exports = invert\n", "/**\n * Returns whether or not the matrices have exactly the same elements in the same position.\n *\n * @param {mat4} a - first matrix\n * @param {mat4} b - second matrix\n * @returns {Boolean} true if the matrices are equal\n * @alias module:modeling/maths/mat4.equals\n */\nconst equals = (a, b) => (\n  a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n  a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n  a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n  a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15]\n)\n\nmodule.exports = equals\n", "/**\n * The resolution of space, currently one hundred nanometers.\n * This should be 1 / EPS.\n * @alias module:modeling/maths.spatialResolution\n * @default\n */\nconst spatialResolution = 1e5\n\n/**\n * Epsilon used during determination of near zero distances.\n * This should be 1 / spacialResolution.\n * @default\n * @alias module:modeling/maths.EPS\n */\nconst EPS = 1e-5\n\n/**\n * Smaller epsilon used for measuring near zero distances.\n * @default\n * @alias module:modeling/maths.NEPS\n */\nconst NEPS = 1e-13\n// NEPS is derived from a series of tests to determine the optimal precision\n// for comparing coplanar polygons, as provided by the sphere primitive at high\n// segmentation. NEPS is for 64 bit Number values.\n\n/**\n * The TAU property represents the ratio of the circumference of a circle to its radius.\n * Approximately 6.28318530717958647692\n * @default\n * @example\n * const { TAU } = require('@jscad/modeling').maths.constants\n */\nconst TAU = Math.PI * 2\n\nmodule.exports = {\n  EPS,\n  NEPS,\n  TAU,\n  spatialResolution\n}\n", "const { NEPS } = require('../constants')\n\n/*\n * Returns zero if n is within epsilon of zero, otherwise return n\n */\nconst rezero = (n) => Math.abs(n) < NEPS ? 0 : n\n\n/**\n * Return Math.sin but accurate for TAU / 4 rotations.\n * Fixes rounding errors when sin should be 0.\n *\n * @param {Number} radians - angle in radians\n * @returns {Number} sine of the given angle\n * @alias module:modeling/utils.sin\n * @example\n * sin(TAU / 2) == 0\n * sin(TAU) == 0\n */\nconst sin = (radians) => rezero(Math.sin(radians))\n\n/**\n * Return Math.cos but accurate for TAU / 4 rotations.\n * Fixes rounding errors when cos should be 0.\n *\n * @param {Number} radians - angle in radians\n * @returns {Number} cosine of the given angle\n * @alias module:modeling/utils.cos\n * @example\n * cos(TAU * 0.25) == 0\n * cos(TAU * 0.75) == 0\n */\nconst cos = (radians) => rezero(Math.cos(radians))\n\nmodule.exports = { sin, cos }\n", "/**\n * Set a matrix to the identity transform.\n *\n * @param {mat4} out - receiving matrix\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.identity\n */\nconst identity = (out) => {\n  out[0] = 1\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = 1\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = 1\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = identity\n", "const { EPS } = require('../constants')\n\nconst { sin, cos } = require('../utils/trigonometry')\n\nconst identity = require('./identity')\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotate(dest, dest, rad, axis)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} rad - angle to rotate the matrix by\n * @param {vec3} axis - axis of which to rotate around\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromRotation\n * @example\n * let matrix = fromRotation(create(), TAU / 4, [0, 0, 3])\n */\nconst fromRotation = (out, rad, axis) => {\n  let [x, y, z] = axis\n  const lengthSquared = x * x + y * y + z * z\n\n  if (Math.abs(lengthSquared) < EPS) {\n    // axis is 0,0,0 or almost\n    return identity(out)\n  }\n\n  const len = 1 / Math.sqrt(lengthSquared)\n  x *= len\n  y *= len\n  z *= len\n\n  const s = sin(rad)\n  const c = cos(rad)\n  const t = 1 - c\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c\n  out[1] = y * x * t + z * s\n  out[2] = z * x * t - y * s\n  out[3] = 0\n  out[4] = x * y * t - z * s\n  out[5] = y * y * t + c\n  out[6] = z * y * t + x * s\n  out[7] = 0\n  out[8] = x * z * t + y * s\n  out[9] = y * z * t - x * s\n  out[10] = z * z * t + c\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromRotation\n", "/**\n * Creates a matrix from a vector scaling.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.scale(dest, dest, vec)\n *\n * @param {mat4} out - receiving matrix\n * @param {vec3} vector - X, Y, Z factors by which to scale\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromScaling\n * @example\n * let matrix = fromScaling([1, 2, 0.5])\n */\nconst fromScaling = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = vector[1]\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = vector[2]\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromScaling\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given Tait–Bryan angles.\n *\n * Tait-Bryan Euler angle convention using active, intrinsic rotations around the axes in the order z-y-x.\n * @see https://en.wikipedia.org/wiki/Euler_angles\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} yaw - Z rotation in radians\n * @param {Number} pitch - Y rotation in radians\n * @param {Number} roll - X rotation in radians\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromTaitBryanRotation\n * @example\n * let matrix = fromTaitBryanRotation(create(), TAU / 4, 0, TAU / 2)\n */\nconst fromTaitBryanRotation = (out, yaw, pitch, roll) => {\n  // precompute sines and cosines of Euler angles\n  const sy = sin(yaw)\n  const cy = cos(yaw)\n  const sp = sin(pitch)\n  const cp = cos(pitch)\n  const sr = sin(roll)\n  const cr = cos(roll)\n\n  // create and populate rotation matrix\n  // left-hand-rule rotation\n  // const els = [\n  //  cp*cy, sr*sp*cy - cr*sy, sr*sy + cr*sp*cy, 0,\n  //  cp*sy, cr*cy + sr*sp*sy, cr*sp*sy - sr*cy, 0,\n  //  -sp, sr*cp, cr*cp, 0,\n  //  0, 0, 0, 1\n  // ]\n  // right-hand-rule rotation\n  out[0] = cp * cy\n  out[1] = cp * sy\n  out[2] = -sp\n  out[3] = 0\n  out[4] = sr * sp * cy - cr * sy\n  out[5] = cr * cy + sr * sp * sy\n  out[6] = sr * cp\n  out[7] = 0\n  out[8] = sr * sy + cr * sp * cy\n  out[9] = cr * sp * sy - sr * cy\n  out[10] = cr * cp\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromTaitBryanRotation\n", "/**\n * Creates a matrix from a vector translation.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.translate(dest, dest, vec)\n *\n * @param {mat4} out - receiving matrix\n * @param {vec3} vector - offset (vector) of translation\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromTranslation\n * @example\n * let matrix = fromTranslation(create(), [1, 2, 3])\n */\nconst fromTranslation = (out, vector) => {\n  out[0] = 1\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = 1\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = 1\n  out[11] = 0\n  out[12] = vector[0]\n  out[13] = vector[1]\n  out[14] = vector[2]\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromTranslation\n", "const create = require('./create')\n\n/**\n * Create a matrix with the given values.\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.fromValues\n * @example\n * let matrix = fromValues(\n *   1, 0, 0, 1,\n *   0, 1, 0, 0,\n *   0, 0, 1, 0,\n *   0, 0, 0, 1\n * )\n */\nconst fromValues = (m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) => {\n  const out = create()\n  out[0] = m00\n  out[1] = m01\n  out[2] = m02\n  out[3] = m03\n  out[4] = m10\n  out[5] = m11\n  out[6] = m12\n  out[7] = m13\n  out[8] = m20\n  out[9] = m21\n  out[10] = m22\n  out[11] = m23\n  out[12] = m30\n  out[13] = m31\n  out[14] = m32\n  out[15] = m33\n  return out\n}\n\nmodule.exports = fromValues\n", "/**\n * Calculates the absolute coordinates of the give vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector of reference\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.abs\n */\nconst abs = (out, vector) => {\n  out[0] = Math.abs(vector[0])\n  out[1] = Math.abs(vector[1])\n  out[2] = Math.abs(vector[2])\n  return out\n}\n\nmodule.exports = abs\n", "/**\n * Adds the coordinates of two vectors (A+B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.add\n */\nconst add = (out, a, b) => {\n  out[0] = a[0] + b[0]\n  out[1] = a[1] + b[1]\n  out[2] = a[2] + b[2]\n  return out\n}\n\nmodule.exports = add\n", "/**\n * Calculates the dot product of two vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} dot product\n * @alias module:modeling/maths/vec3.dot\n */\nconst dot = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\nmodule.exports = dot\n", "const dot = require('./dot')\n\n/**\n * Calculate the angle between two vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} angle (radians)\n * @alias module:modeling/maths/vec3.angle\n */\nconst angle = (a, b) => {\n  const ax = a[0]\n  const ay = a[1]\n  const az = a[2]\n  const bx = b[0]\n  const by = b[1]\n  const bz = b[2]\n  const mag1 = Math.sqrt(ax * ax + ay * ay + az * az)\n  const mag2 = Math.sqrt(bx * bx + by * by + bz * bz)\n  const mag = mag1 * mag2\n  const cosine = mag && dot(a, b) / mag\n  return Math.acos(Math.min(Math.max(cosine, -1), 1))\n}\n\nmodule.exports = angle\n", "/**\n * Represents a three dimensional vector.\n * See fromValues().\n * @typedef {Array} vec3\n */\n\n/**\n * Creates a new vector initialized to [0,0,0].\n *\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.create\n */\nconst create = () => [0, 0, 0]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given vector.\n *\n * @param {vec3} vector - vector to clone\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.clone\n */\nconst clone = (vector) => {\n  const out = create()\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Create a copy of the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to copy\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.copy\n */\nconst copy = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Computes the cross product of the given vectors (AxB).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.cross\n */\nconst cross = (out, a, b) => {\n  const ax = a[0]\n  const ay = a[1]\n  const az = a[2]\n  const bx = b[0]\n  const by = b[1]\n  const bz = b[2]\n\n  out[0] = ay * bz - az * by\n  out[1] = az * bx - ax * bz\n  out[2] = ax * by - ay * bx\n  return out\n}\n\nmodule.exports = cross\n", "/**\n * Calculates the Euclidian distance between the given vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} distance\n * @alias module:modeling/maths/vec3.distance\n */\nconst distance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  const z = b[2] - a[2]\n  return Math.sqrt(x * x + y * y + z * z)\n}\n\nmodule.exports = distance\n", "/**\n * Divides the coordinates of two vectors (A/B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - dividend vector\n * @param {vec3} b - divisor vector\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.divide\n */\nconst divide = (out, a, b) => {\n  out[0] = a[0] / b[0]\n  out[1] = a[1] / b[1]\n  out[2] = a[2] / b[2]\n  return out\n}\n\nmodule.exports = divide\n", "/**\n * Compare the given vectors for equality.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Boolean} true if a and b are equal\n * @alias module:modeling/maths/vec3.equals\n */\nconst equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2])\n\nmodule.exports = equals\n", "/**\n * Creates a vector from a single scalar value.\n * All components of the resulting vector have the given value.\n *\n * @param {vec3} out - receiving vector\n * @param {Number} scalar\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.fromScalar\n */\nconst fromScalar = (out, scalar) => {\n  out[0] = scalar\n  out[1] = scalar\n  out[2] = scalar\n  return out\n}\n\nmodule.exports = fromScalar\n", "const create = require('./create')\n\n/**\n * Creates a new vector initialized with the given values.\n *\n * @param {Number} x - X component\n * @param {Number} y - Y component\n * @param {Number} z - Z component\n * @returns {vec3} a new vector\n * @alias module:modeling/maths/vec3.fromValues\n */\nconst fromValues = (x, y, z) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  out[2] = z\n  return out\n}\n\nmodule.exports = fromValues\n", "/**\n * Create a new vector by extending a 2D vector with a Z value.\n *\n * @param {vec3} out - receiving vector\n * @param {Array} vector - 2D vector of values\n * @param {Number} [z=0] - Z value\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.fromVec2\n */\nconst fromVector2 = (out, vector, z = 0) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = z\n  return out\n}\n\nmodule.exports = fromVector2\n", "/**\n * Calculates the length of a vector.\n *\n * @param {vec3} vector - vector to calculate length of\n * @returns {Number} length\n * @alias module:modeling/maths/vec3.length\n */\nconst length = (vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  return Math.sqrt(x * x + y * y + z * z)\n}\n\nmodule.exports = length\n", "/**\n * Performs a linear interpolation between two vectors.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @param {Number} t - interpolant (0.0 to 1.0) applied between the two inputs\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.lerp\n */\nconst lerp = (out, a, b, t) => {\n  out[0] = a[0] + t * (b[0] - a[0])\n  out[1] = a[1] + t * (b[1] - a[1])\n  out[2] = a[2] + t * (b[2] - a[2])\n  return out\n}\n\nmodule.exports = lerp\n", "/**\n * Returns the maximum coordinates of the given vectors.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.max\n */\nconst max = (out, a, b) => {\n  out[0] = Math.max(a[0], b[0])\n  out[1] = Math.max(a[1], b[1])\n  out[2] = Math.max(a[2], b[2])\n  return out\n}\n\nmodule.exports = max\n", "/**\n * Returns the minimum coordinates of the given vectors.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.min\n */\nconst min = (out, a, b) => {\n  out[0] = Math.min(a[0], b[0])\n  out[1] = Math.min(a[1], b[1])\n  out[2] = Math.min(a[2], b[2])\n  return out\n}\n\nmodule.exports = min\n", "/**\n * Multiply the coordinates of the given vectors (A*B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.multiply\n */\nconst multiply = (out, a, b) => {\n  out[0] = a[0] * b[0]\n  out[1] = a[1] * b[1]\n  out[2] = a[2] * b[2]\n  return out\n}\n\nmodule.exports = multiply\n", "/**\n * Negates the coordinates of the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to negate\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.negate\n */\nconst negate = (out, vector) => {\n  out[0] = -vector[0]\n  out[1] = -vector[1]\n  out[2] = -vector[2]\n  return out\n}\n\nmodule.exports = negate\n", "/**\n * Normalize the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to normalize\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.normalize\n */\nconst normalize = (out, vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  let len = x * x + y * y + z * z\n  if (len > 0) {\n    len = 1 / Math.sqrt(len)\n  }\n  out[0] = x * len\n  out[1] = y * len\n  out[2] = z * len\n  return out\n}\n\nmodule.exports = normalize\n", "const abs = require('./abs')\nconst create = require('./create')\nconst cross = require('./cross')\n\n/**\n * Create a new vector that is orthogonal to the given vector.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector of reference\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.orthogonal\n */\nconst orthogonal = (out, vector) => {\n  const bV = abs(create(), vector)\n  const b0 = 0 + ((bV[0] < bV[1]) && (bV[0] < bV[2]))\n  const b1 = 0 + ((bV[1] <= bV[0]) && (bV[1] < bV[2]))\n  const b2 = 0 + ((bV[2] <= bV[0]) && (bV[2] <= bV[1]))\n\n  return cross(out, vector, [b0, b1, b2])\n}\n\nmodule.exports = orthogonal\n", "/**\n * Rotate the given vector around the given origin, X axis only.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to rotate\n * @param {vec3} origin - origin of the rotation\n * @param {Number} radians - angle of rotation\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.rotateX\n */\nconst rotateX = (out, vector, origin, radians) => {\n  const p = []\n  const r = []\n\n  // translate point to the origin\n  p[0] = vector[0] - origin[0]\n  p[1] = vector[1] - origin[1]\n  p[2] = vector[2] - origin[2]\n\n  // perform rotation\n  r[0] = p[0]\n  r[1] = p[1] * Math.cos(radians) - p[2] * Math.sin(radians)\n  r[2] = p[1] * Math.sin(radians) + p[2] * Math.cos(radians)\n\n  // translate to correct position\n  out[0] = r[0] + origin[0]\n  out[1] = r[1] + origin[1]\n  out[2] = r[2] + origin[2]\n\n  return out\n}\n\nmodule.exports = rotateX\n", "/**\n * Rotate the given vector around the given origin, Y axis only.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to rotate\n * @param {vec3} origin - origin of the rotation\n * @param {Number} radians - angle of rotation\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.rotateY\n */\nconst rotateY = (out, vector, origin, radians) => {\n  const p = []\n  const r = []\n\n  // translate point to the origin\n  p[0] = vector[0] - origin[0]\n  p[1] = vector[1] - origin[1]\n  p[2] = vector[2] - origin[2]\n\n  // perform rotation\n  r[0] = p[2] * Math.sin(radians) + p[0] * Math.cos(radians)\n  r[1] = p[1]\n  r[2] = p[2] * Math.cos(radians) - p[0] * Math.sin(radians)\n\n  // translate to correct position\n  out[0] = r[0] + origin[0]\n  out[1] = r[1] + origin[1]\n  out[2] = r[2] + origin[2]\n\n  return out\n}\n\nmodule.exports = rotateY\n", "/**\n * Rotate the given vector around the given origin, Z axis only.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to rotate\n * @param {vec3} origin - origin of the rotation\n * @param {Number} radians - angle of rotation in radians\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.rotateZ\n */\nconst rotateZ = (out, vector, origin, radians) => {\n  const p = []\n  const r = []\n  // Translate point to the origin\n  p[0] = vector[0] - origin[0]\n  p[1] = vector[1] - origin[1]\n\n  // perform rotation\n  r[0] = (p[0] * Math.cos(radians)) - (p[1] * Math.sin(radians))\n  r[1] = (p[0] * Math.sin(radians)) + (p[1] * Math.cos(radians))\n\n  // translate to correct position\n  out[0] = r[0] + origin[0]\n  out[1] = r[1] + origin[1]\n  out[2] = vector[2]\n\n  return out\n}\n\nmodule.exports = rotateZ\n", "/**\n * Scales the coordinates of the given vector by a scalar number.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to scale\n * @param {Number} amount - amount to scale the vector by\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.scale\n */\nconst scale = (out, vector, amount) => {\n  out[0] = vector[0] * amount\n  out[1] = vector[1] * amount\n  out[2] = vector[2] * amount\n  return out\n}\n\nmodule.exports = scale\n", "/**\n * Snaps the coordinates of the given vector to the given epsilon.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to snap\n * @param {Number} epsilon - epsilon of precision, less than 0\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.snap\n */\nconst snap = (out, vector, epsilon) => {\n  out[0] = Math.round(vector[0] / epsilon) * epsilon + 0\n  out[1] = Math.round(vector[1] / epsilon) * epsilon + 0\n  out[2] = Math.round(vector[2] / epsilon) * epsilon + 0\n  return out\n}\n\nmodule.exports = snap\n", "/**\n * Calculates the squared distance between two vectors.\n *\n * @param {vec3} a - first operand\n * @param {vec3} b - second operand\n * @returns {Number} squared distance\n * @alias module:modeling/maths/vec3.squaredDistance\n */\nconst squaredDistance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  const z = b[2] - a[2]\n  return x * x + y * y + z * z\n}\n\nmodule.exports = squaredDistance\n", "/**\n * Calculates the squared length of the given vector.\n *\n * @param {vec3} vector - vector to calculate squared length of\n * @returns {Number} squared length\n * @alias module:modeling/maths/vec3.squaredLength\n */\nconst squaredLength = (vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  return x * x + y * y + z * z\n}\n\nmodule.exports = squaredLength\n", "/**\n * Subtracts the coordinates of two vectors (A-B).\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} a - minuend vector\n * @param {vec3} b - subtrahend vector\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.subtract\n */\nconst subtract = (out, a, b) => {\n  out[0] = a[0] - b[0]\n  out[1] = a[1] - b[1]\n  out[2] = a[2] - b[2]\n  return out\n}\n\nmodule.exports = subtract\n", "/**\n * Convert the given vector to a representative string.\n * @param {vec3} vec - vector of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/vec3.toString\n */\nconst toString = (vec) => `[${vec[0].toFixed(7)}, ${vec[1].toFixed(7)}, ${vec[2].toFixed(7)}]`\n\nmodule.exports = toString\n", "/**\n * Transforms the given vector using the given matrix.\n *\n * @param {vec3} out - receiving vector\n * @param {vec3} vector - vector to transform\n * @param {mat4} matrix - transform matrix\n * @returns {vec3} out\n * @alias module:modeling/maths/vec3.transform\n */\nconst transform = (out, vector, matrix) => {\n  const x = vector[0]\n  const y = vector[1]\n  const z = vector[2]\n  let w = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15]\n  w = w || 1.0\n  out[0] = (matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]) / w\n  out[1] = (matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]) / w\n  out[2] = (matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]) / w\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a three dimensional vector.\n * @see {@link vec3} for data structure information.\n * @module modeling/maths/vec3\n */\nmodule.exports = {\n  abs: require('./abs'),\n  add: require('./add'),\n  angle: require('./angle'),\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  cross: require('./cross'),\n  distance: require('./distance'),\n  divide: require('./divide'),\n  dot: require('./dot'),\n  equals: require('./equals'),\n  fromScalar: require('./fromScalar'),\n  fromValues: require('./fromValues'),\n  fromVec2: require('./fromVec2'),\n  length: require('./length'),\n  lerp: require('./lerp'),\n  max: require('./max'),\n  min: require('./min'),\n  multiply: require('./multiply'),\n  negate: require('./negate'),\n  normalize: require('./normalize'),\n  orthogonal: require('./orthogonal'),\n  rotateX: require('./rotateX'),\n  rotateY: require('./rotateY'),\n  rotateZ: require('./rotateZ'),\n  scale: require('./scale'),\n  snap: require('./snap'),\n  squaredDistance: require('./squaredDistance'),\n  squaredLength: require('./squaredLength'),\n  subtract: require('./subtract'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec3 = require('../vec3')\n\nconst fromRotation = require('./fromRotation')\n\n/**\n * Create a matrix that rotates the given source to the given target vector.\n *\n * Each vector must be a directional vector with a length greater than zero.\n * @see https://gist.github.com/kevinmoran/b45980723e53edeb8a5a43c49f134724\n * @param {mat4} out - receiving matrix\n * @param {vec3} source - source vector\n * @param {vec3} target - target vector\n * @returns {mat4} a new matrix\n * @alias module:modeling/maths/mat4.fromVectorRotation\n * @example\n * let matrix = fromVectorRotation(mat4.create(), [1, 2, 2], [-3, 3, 12])\n */\nconst fromVectorRotation = (out, source, target) => {\n  const sourceNormal = vec3.normalize(vec3.create(), source)\n  const targetNormal = vec3.normalize(vec3.create(), target)\n\n  const axis = vec3.cross(vec3.create(), targetNormal, sourceNormal)\n  const cosA = vec3.dot(targetNormal, sourceNormal)\n  if (cosA === -1.0) return fromRotation(out, Math.PI, vec3.orthogonal(axis, sourceNormal))\n\n  const k = 1 / (1 + cosA)\n  out[0] = (axis[0] * axis[0] * k) + cosA\n  out[1] = (axis[1] * axis[0] * k) - axis[2]\n  out[2] = (axis[2] * axis[0] * k) + axis[1]\n  out[3] = 0\n\n  out[4] = (axis[0] * axis[1] * k) + axis[2]\n  out[5] = (axis[1] * axis[1] * k) + cosA\n  out[6] = (axis[2] * axis[1] * k) - axis[0]\n  out[7] = 0\n\n  out[8] = (axis[0] * axis[2] * k) - axis[1]\n  out[9] = (axis[1] * axis[2] * k) + axis[0]\n  out[10] = (axis[2] * axis[2] * k) + cosA\n  out[11] = 0\n\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromVectorRotation\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given angle around the X axis.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotateX(dest, dest, radians)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromXRotation\n * @example\n * let matrix = fromXRotation(create(), TAU / 4)\n */\nconst fromXRotation = (out, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1\n  out[1] = 0\n  out[2] = 0\n  out[3] = 0\n  out[4] = 0\n  out[5] = c\n  out[6] = s\n  out[7] = 0\n  out[8] = 0\n  out[9] = -s\n  out[10] = c\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromXRotation\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given angle around the Y axis.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotateY(dest, dest, radians)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromYRotation\n * @example\n * let matrix = fromYRotation(create(), TAU / 4)\n */\nconst fromYRotation = (out, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c\n  out[1] = 0\n  out[2] = -s\n  out[3] = 0\n  out[4] = 0\n  out[5] = 1\n  out[6] = 0\n  out[7] = 0\n  out[8] = s\n  out[9] = 0\n  out[10] = c\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromYRotation\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Creates a matrix from the given angle around the Z axis.\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest)\n *     mat4.rotateZ(dest, dest, radians)\n *\n * @param {mat4} out - receiving matrix\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.fromZRotation\n * @example\n * let matrix = fromZRotation(create(), TAU / 4)\n */\nconst fromZRotation = (out, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c\n  out[1] = s\n  out[2] = 0\n  out[3] = 0\n  out[4] = -s\n  out[5] = c\n  out[6] = 0\n  out[7] = 0\n  out[8] = 0\n  out[9] = 0\n  out[10] = 1\n  out[11] = 0\n  out[12] = 0\n  out[13] = 0\n  out[14] = 0\n  out[15] = 1\n  return out\n}\n\nmodule.exports = fromZRotation\n", "/**\n * Determine whether the given matrix is the identity transform.\n * This is equivalent to (but much faster than):\n *\n *     mat4.equals(mat4.create(), matrix)\n *\n * @param {mat4} matrix - the matrix\n * @returns {Boolean} true if matrix is the identity transform\n * @alias module:modeling/maths/mat4.isIdentity\n * @example\n * if (mat4.isIdentity(mymatrix)) ...\n */\nconst isIdentity = (matrix) => (\n  matrix[0] === 1 && matrix[1] === 0 && matrix[2] === 0 && matrix[3] === 0 &&\n  matrix[4] === 0 && matrix[5] === 1 && matrix[6] === 0 && matrix[7] === 0 &&\n  matrix[8] === 0 && matrix[9] === 0 && matrix[10] === 1 && matrix[11] === 0 &&\n  matrix[12] === 0 && matrix[13] === 0 && matrix[14] === 0 && matrix[15] === 1\n)\n\nmodule.exports = isIdentity\n", "\n/**\n * Determine whether the given matrix is only translate and/or scale.\n * This code returns true for TAU / 2 rotation as it can be interpreted as scale.\n *\n * @param {mat4} matrix - the matrix\n * @returns {Boolean} true if matrix is for translate and/or scale\n * @alias module:modeling/maths/mat4.isOnlyTransformScale\n */\nconst isOnlyTransformScale = (matrix) => (\n\n  // TODO check if it is worth the effort to add recognition of 90 deg rotations\n\n  isZero(matrix[1]) && isZero(matrix[2]) && isZero(matrix[3]) &&\n  isZero(matrix[4]) && isZero(matrix[6]) && isZero(matrix[7]) &&\n  isZero(matrix[8]) && isZero(matrix[9]) && isZero(matrix[11]) &&\n  matrix[15] === 1\n)\n\nconst isZero = (num) => Math.abs(num) < Number.EPSILON\n\nmodule.exports = isOnlyTransformScale\n", "/**\n * Determine whether the given matrix is a mirroring transformation.\n *\n * @param {mat4} matrix - matrix of reference\n * @returns {Boolean} true if matrix is a mirroring transformation\n * @alias module:modeling/maths/mat4.isMirroring\n */\nconst isMirroring = (matrix) => {\n  // const xVector = [matrix[0], matrix[4], matrix[8]]\n  // const yVector = [matrix[1], matrix[5], matrix[9]]\n  // const zVector = [matrix[2], matrix[6], matrix[10]]\n\n  // for a true orthogonal, non-mirrored base, xVector.cross(yVector) == zVector\n  // If they have an opposite direction then we are mirroring\n  // calcuate xVector.cross(yVector)\n  const x = matrix[4] * matrix[9] - matrix[8] * matrix[5]\n  const y = matrix[8] * matrix[1] - matrix[0] * matrix[9]\n  const z = matrix[0] * matrix[5] - matrix[4] * matrix[1]\n  // calcualte dot(cross, zVector)\n  const d = x * matrix[2] + y * matrix[6] + z * matrix[10]\n  return (d < 0)\n}\n\nmodule.exports = isMirroring\n", "/**\n * Create a matrix for mirroring about the given plane.\n *\n * @param {mat4} out - receiving matrix\n * @param {vec4} plane - plane of which to mirror the matrix\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.mirrorByPlane\n */\nconst mirrorByPlane = (out, plane) => {\n  const [nx, ny, nz, w] = plane\n\n  out[0] = (1.0 - 2.0 * nx * nx)\n  out[1] = (-2.0 * ny * nx)\n  out[2] = (-2.0 * nz * nx)\n  out[3] = 0\n  out[4] = (-2.0 * nx * ny)\n  out[5] = (1.0 - 2.0 * ny * ny)\n  out[6] = (-2.0 * nz * ny)\n  out[7] = 0\n  out[8] = (-2.0 * nx * nz)\n  out[9] = (-2.0 * ny * nz)\n  out[10] = (1.0 - 2.0 * nz * nz)\n  out[11] = 0\n  out[12] = (2.0 * nx * w)\n  out[13] = (2.0 * ny * w)\n  out[14] = (2.0 * nz * w)\n  out[15] = 1\n\n  return out\n}\n\nmodule.exports = mirrorByPlane\n", "/**\n * Multiplies the two matrices.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} a - first operand\n * @param {mat4} b - second operand\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.multiply\n */\nconst multiply = (out, a, b) => {\n  const a00 = a[0]\n  const a01 = a[1]\n  const a02 = a[2]\n  const a03 = a[3]\n  const a10 = a[4]\n  const a11 = a[5]\n  const a12 = a[6]\n  const a13 = a[7]\n  const a20 = a[8]\n  const a21 = a[9]\n  const a22 = a[10]\n  const a23 = a[11]\n  const a30 = a[12]\n  const a31 = a[13]\n  const a32 = a[14]\n  const a33 = a[15]\n\n  // Cache only the current line of the second matrix\n  let b0 = b[0]\n  let b1 = b[1]\n  let b2 = b[2]\n  let b3 = b[3]\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n\n  b0 = b[4]\n  b1 = b[5]\n  b2 = b[6]\n  b3 = b[7]\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n\n  b0 = b[8]\n  b1 = b[9]\n  b2 = b[10]\n  b3 = b[11]\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n\n  b0 = b[12]\n  b1 = b[13]\n  b2 = b[14]\n  b3 = b[15]\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33\n  return out\n}\n\nmodule.exports = multiply\n", "const { EPS } = require('../constants')\n\nconst { sin, cos } = require('../utils/trigonometry')\n\nconst copy = require('./copy')\n\n/**\n * Rotates a matrix by the given angle about the given axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @param {vec3} axis - axis to rotate around\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotate\n */\nconst rotate = (out, matrix, radians, axis) => {\n  let [x, y, z] = axis\n  const lengthSquared = x * x + y * y + z * z\n\n  if (Math.abs(lengthSquared) < EPS) {\n    // axis is 0,0,0 or almost\n    return copy(out, matrix)\n  }\n\n  const len = 1 / Math.sqrt(lengthSquared)\n  x *= len\n  y *= len\n  z *= len\n\n  const s = sin(radians)\n  const c = cos(radians)\n  const t = 1 - c\n\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n\n  // Construct the elements of the rotation matrix\n  const b00 = x * x * t + c\n  const b01 = y * x * t + z * s\n  const b02 = z * x * t - y * s\n  const b10 = x * y * t - z * s\n  const b11 = y * y * t + c\n  const b12 = z * y * t + x * s\n  const b20 = x * z * t + y * s\n  const b21 = y * z * t - x * s\n  const b22 = z * z * t + c\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n  return out\n}\n\nmodule.exports = rotate\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Rotates a matrix by the given angle around the X axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotateX\n */\nconst rotateX = (out, matrix, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0] = matrix[0]\n    out[1] = matrix[1]\n    out[2] = matrix[2]\n    out[3] = matrix[3]\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s\n  out[5] = a11 * c + a21 * s\n  out[6] = a12 * c + a22 * s\n  out[7] = a13 * c + a23 * s\n  out[8] = a20 * c - a10 * s\n  out[9] = a21 * c - a11 * s\n  out[10] = a22 * c - a12 * s\n  out[11] = a23 * c - a13 * s\n  return out\n}\n\nmodule.exports = rotateX\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Rotates a matrix by the given angle around the Y axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotateY\n */\nconst rotateY = (out, matrix, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a20 = matrix[8]\n  const a21 = matrix[9]\n  const a22 = matrix[10]\n  const a23 = matrix[11]\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4] = matrix[4]\n    out[5] = matrix[5]\n    out[6] = matrix[6]\n    out[7] = matrix[7]\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s\n  out[1] = a01 * c - a21 * s\n  out[2] = a02 * c - a22 * s\n  out[3] = a03 * c - a23 * s\n  out[8] = a00 * s + a20 * c\n  out[9] = a01 * s + a21 * c\n  out[10] = a02 * s + a22 * c\n  out[11] = a03 * s + a23 * c\n  return out\n}\n\nmodule.exports = rotateY\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Rotates a matrix by the given angle around the Z axis.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to rotate\n * @param {Number} radians - angle to rotate the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.rotateZ\n */\nconst rotateZ = (out, matrix, radians) => {\n  const s = sin(radians)\n  const c = cos(radians)\n  const a00 = matrix[0]\n  const a01 = matrix[1]\n  const a02 = matrix[2]\n  const a03 = matrix[3]\n  const a10 = matrix[4]\n  const a11 = matrix[5]\n  const a12 = matrix[6]\n  const a13 = matrix[7]\n\n  if (matrix !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8] = matrix[8]\n    out[9] = matrix[9]\n    out[10] = matrix[10]\n    out[11] = matrix[11]\n    out[12] = matrix[12]\n    out[13] = matrix[13]\n    out[14] = matrix[14]\n    out[15] = matrix[15]\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s\n  out[1] = a01 * c + a11 * s\n  out[2] = a02 * c + a12 * s\n  out[3] = a03 * c + a13 * s\n  out[4] = a10 * c - a00 * s\n  out[5] = a11 * c - a01 * s\n  out[6] = a12 * c - a02 * s\n  out[7] = a13 * c - a03 * s\n  return out\n}\n\nmodule.exports = rotateZ\n", "/**\n * Scales the matrix by the given dimensions.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to scale\n * @param {vec3} dimensions - dimensions to scale the matrix by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.scale\n */\nconst scale = (out, matrix, dimensions) => {\n  const x = dimensions[0]\n  const y = dimensions[1]\n  const z = dimensions[2]\n\n  out[0] = matrix[0] * x\n  out[1] = matrix[1] * x\n  out[2] = matrix[2] * x\n  out[3] = matrix[3] * x\n  out[4] = matrix[4] * y\n  out[5] = matrix[5] * y\n  out[6] = matrix[6] * y\n  out[7] = matrix[7] * y\n  out[8] = matrix[8] * z\n  out[9] = matrix[9] * z\n  out[10] = matrix[10] * z\n  out[11] = matrix[11] * z\n  out[12] = matrix[12]\n  out[13] = matrix[13]\n  out[14] = matrix[14]\n  out[15] = matrix[15]\n  return out\n}\n\nmodule.exports = scale\n", "/**\n * Subtracts matrix b from matrix a. (A-B)\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} a - first operand\n * @param {mat4} b - second operand\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.subtract\n */\nconst subtract = (out, a, b) => {\n  out[0] = a[0] - b[0]\n  out[1] = a[1] - b[1]\n  out[2] = a[2] - b[2]\n  out[3] = a[3] - b[3]\n  out[4] = a[4] - b[4]\n  out[5] = a[5] - b[5]\n  out[6] = a[6] - b[6]\n  out[7] = a[7] - b[7]\n  out[8] = a[8] - b[8]\n  out[9] = a[9] - b[9]\n  out[10] = a[10] - b[10]\n  out[11] = a[11] - b[11]\n  out[12] = a[12] - b[12]\n  out[13] = a[13] - b[13]\n  out[14] = a[14] - b[14]\n  out[15] = a[15] - b[15]\n  return out\n}\n\nmodule.exports = subtract\n", "/**\n * Return a string representing the given matrix.\n *\n * @param {mat4} mat - matrix of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/mat4.toString\n */\nconst toString = (mat) => mat.map((n) => n.toFixed(7)).toString()\n\nmodule.exports = toString\n", "/**\n * Translate the matrix by the given offset vector.\n *\n * @param {mat4} out - receiving matrix\n * @param {mat4} matrix - matrix to translate\n * @param {vec3} offsets - offset vector to translate by\n * @returns {mat4} out\n * @alias module:modeling/maths/mat4.translate\n */\nconst translate = (out, matrix, offsets) => {\n  const x = offsets[0]\n  const y = offsets[1]\n  const z = offsets[2]\n  let a00\n  let a01\n  let a02\n  let a03\n  let a10\n  let a11\n  let a12\n  let a13\n  let a20\n  let a21\n  let a22\n  let a23\n\n  if (matrix === out) {\n  // 0-11 assignments are unnecessary\n    out[12] = matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12]\n    out[13] = matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13]\n    out[14] = matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14]\n    out[15] = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15]\n  } else {\n    a00 = matrix[0]; a01 = matrix[1]; a02 = matrix[2]; a03 = matrix[3]\n    a10 = matrix[4]; a11 = matrix[5]; a12 = matrix[6]; a13 = matrix[7]\n    a20 = matrix[8]; a21 = matrix[9]; a22 = matrix[10]; a23 = matrix[11]\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23\n\n    out[12] = a00 * x + a10 * y + a20 * z + matrix[12]\n    out[13] = a01 * x + a11 * y + a21 * z + matrix[13]\n    out[14] = a02 * x + a12 * y + a22 * z + matrix[14]\n    out[15] = a03 * x + a13 * y + a23 * z + matrix[15]\n  }\n\n  return out\n}\n\nmodule.exports = translate\n", "/**\n * Represents a 4x4 matrix which is column-major (when typed out it looks row-major).\n * @see {@link mat4} for data structure information.\n * @module modeling/maths/mat4\n */\nmodule.exports = {\n  add: require('./add'),\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  invert: require('./invert'),\n  equals: require('./equals'),\n  fromRotation: require('./fromRotation'),\n  fromScaling: require('./fromScaling'),\n  fromTaitBryanRotation: require('./fromTaitBryanRotation'),\n  fromTranslation: require('./fromTranslation'),\n  fromValues: require('./fromValues'),\n  fromVectorRotation: require('./fromVectorRotation'),\n  fromXRotation: require('./fromXRotation'),\n  fromYRotation: require('./fromYRotation'),\n  fromZRotation: require('./fromZRotation'),\n  identity: require('./identity'),\n  isIdentity: require('./isIdentity'),\n  isOnlyTransformScale: require('./isOnlyTransformScale'),\n  isMirroring: require('./isMirroring'),\n  mirrorByPlane: require('./mirrorByPlane'),\n  multiply: require('./multiply'),\n  rotate: require('./rotate'),\n  rotateX: require('./rotateX'),\n  rotateY: require('./rotateY'),\n  rotateZ: require('./rotateZ'),\n  scale: require('./scale'),\n  subtract: require('./subtract'),\n  toString: require('./toString'),\n  translate: require('./translate')\n}\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Represents a 2D geometry consisting of a list of sides.\n * @typedef {Object} geom2\n * @property {Array} sides - list of sides, each side containing two points\n * @property {mat4} transforms - transforms to apply to the sides, see transform()\n */\n\n/**\n * Create a new 2D geometry composed of unordered sides (two connected points).\n * @param {Array} [sides] - list of sides where each side is an array of two points\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.create\n */\nconst create = (sides) => {\n  if (sides === undefined) {\n    sides = [] // empty contents\n  }\n  return {\n    sides: sides,\n    transforms: mat4.create()\n  }\n}\n\nmodule.exports = create\n", "/**\n * Calculates the absolute coordinates of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector of reference\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.abs\n */\nconst abs = (out, vector) => {\n  out[0] = Math.abs(vector[0])\n  out[1] = Math.abs(vector[1])\n  return out\n}\n\nmodule.exports = abs\n", "/**\n * Adds the coordinates of two vectors (A+B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.add\n */\nconst add = (out, a, b) => {\n  out[0] = a[0] + b[0]\n  out[1] = a[1] + b[1]\n  return out\n}\n\nmodule.exports = add\n", "/**\n * Calculate the angle of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} angle in radians\n * @alias module:modeling/maths/vec2.angleRadians\n */\nconst angleRadians = (vector) => Math.atan2(vector[1], vector[0]) // y=sin, x=cos\n\nmodule.exports = angleRadians\n", "module.exports = require('./angleRadians')\n", "const angleRadians = require('./angleRadians')\n\n/**\n * Calculate the angle of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} angle in degrees\n * @alias module:modeling/maths/vec2.angleDegrees\n */\nconst angleDegrees = (vector) => angleRadians(vector) * 57.29577951308232\n\nmodule.exports = angleDegrees\n", "/**\n * Represents a two dimensional vector.\n * See fromValues().\n * @typedef {Array} vec2\n */\n\n/**\n * Creates a new vector, initialized to [0,0].\n *\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.create\n */\nconst create = () => [0, 0]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given vector.\n *\n * @param {vec2} vector - vector to clone\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.clone\n */\nconst clone = (vector) => {\n  const out = create()\n  out[0] = vector[0]\n  out[1] = vector[1]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Create a copy of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - source vector\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.copy\n */\nconst copy = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Computes the cross product (3D) of two vectors.\n *\n * @param {vec3} out - receiving vector (3D)\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec3} out\n * @alias module:modeling/maths/vec2.cross\n */\nconst cross = (out, a, b) => {\n  out[0] = 0\n  out[1] = 0\n  out[2] = a[0] * b[1] - a[1] * b[0]\n  return out\n}\n\nmodule.exports = cross\n", "/**\n * Calculates the distance between two vectors.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Number} distance\n * @alias module:modeling/maths/vec2.distance\n */\nconst distance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  return Math.sqrt(x * x + y * y)\n}\n\nmodule.exports = distance\n", "/**\n * Divides the coordinates of two vectors (A/B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.divide\n */\nconst divide = (out, a, b) => {\n  out[0] = a[0] / b[0]\n  out[1] = a[1] / b[1]\n  return out\n}\n\nmodule.exports = divide\n", "/**\n * Calculates the dot product of two vectors.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Number} dot product\n * @alias module:modeling/maths/vec2.dot\n */\nconst dot = (a, b) => a[0] * b[0] + a[1] * b[1]\n\nmodule.exports = dot\n", "/**\n * Compare the given vectors for equality.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Boolean} true if a and b are equal\n * @alias module:modeling/maths/vec2.equals\n */\nconst equals = (a, b) => (a[0] === b[0]) && (a[1] === b[1])\n\nmodule.exports = equals\n", "const { sin, cos } = require('../utils/trigonometry')\n\n/**\n * Create a new vector in the direction of the given angle.\n *\n * @param {vec2} out - receiving vector\n * @param {Number} radians - angle in radians\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.fromAngleRadians\n */\nconst fromAngleRadians = (out, radians) => {\n  out[0] = cos(radians)\n  out[1] = sin(radians)\n  return out\n}\n\nmodule.exports = fromAngleRadians\n", "const fromAngleRadians = require('./fromAngleRadians')\n\n/**\n * Create a new vector in the direction of the given angle.\n *\n * @param {vec2} out - receiving vector\n * @param {Number} degrees - angle in degrees\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.fromAngleDegrees\n */\nconst fromAngleDegrees = (out, degrees) => fromAngleRadians(out, degrees * 0.017453292519943295)\n\nmodule.exports = fromAngleDegrees\n", "/**\n * Create a vector from a single scalar value.\n *\n * @param {vec2} out - receiving vector\n * @param {Number} scalar - the scalar value\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.fromScalar\n */\nconst fromScalar = (out, scalar) => {\n  out[0] = scalar\n  out[1] = scalar\n  return out\n}\n\nmodule.exports = fromScalar\n", "const create = require('./create')\n\n/**\n * Creates a new vector initialized with the given values.\n *\n * @param {Number} x - X coordinate\n * @param {Number} y - Y coordinate\n * @returns {vec2} a new vector\n * @alias module:modeling/maths/vec2.fromValues\n */\nconst fromValues = (x, y) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  return out\n}\n\nmodule.exports = fromValues\n", "/**\n * Calculates the length of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} length\n * @alias module:modeling/maths/vec2.length\n */\nconst length = (vector) => Math.sqrt(vector[0] * vector[0] + vector[1] * vector[1])\n\nmodule.exports = length\n", "/**\n * Performs a linear interpolation between two vectors.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @param {Number} t - interpolation amount between the two vectors\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.lerp\n */\nconst lerp = (out, a, b, t) => {\n  const ax = a[0]\n  const ay = a[1]\n  out[0] = ax + t * (b[0] - ax)\n  out[1] = ay + t * (b[1] - ay)\n  return out\n}\n\nmodule.exports = lerp\n", "/**\n * Returns the maximum coordinates of two vectors.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.max\n */\nconst max = (out, a, b) => {\n  out[0] = Math.max(a[0], b[0])\n  out[1] = Math.max(a[1], b[1])\n  return out\n}\n\nmodule.exports = max\n", "/**\n * Returns the minimum coordinates of two vectors.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.min\n */\nconst min = (out, a, b) => {\n  out[0] = Math.min(a[0], b[0])\n  out[1] = Math.min(a[1], b[1])\n  return out\n}\n\nmodule.exports = min\n", "/**\n * Multiplies the coordinates of two vectors (A*B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.multiply\n */\nconst multiply = (out, a, b) => {\n  out[0] = a[0] * b[0]\n  out[1] = a[1] * b[1]\n  return out\n}\n\nmodule.exports = multiply\n", "/**\n * Negates the coordinates of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to negate\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.negate\n */\nconst negate = (out, vector) => {\n  out[0] = -vector[0]\n  out[1] = -vector[1]\n  return out\n}\n\nmodule.exports = negate\n", "/**\n * Rotates the given vector by the given angle.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to rotate\n * @param {vec2} origin - origin of the rotation\n * @param {Number} radians - angle of rotation (radians)\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.rotate\n */\nconst rotate = (out, vector, origin, radians) => {\n  const x = vector[0] - origin[0]\n  const y = vector[1] - origin[1]\n  const c = Math.cos(radians)\n  const s = Math.sin(radians)\n\n  out[0] = x * c - y * s + origin[0]\n  out[1] = x * s + y * c + origin[1]\n\n  return out\n}\n\nmodule.exports = rotate\n", "const { TAU } = require('../constants')\n\nconst create = require('./create')\nconst rotate = require('./rotate')\n\n/**\n * Calculates the normal of the given vector.\n * The normal value is the given vector rotated 90 degrees.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - given value\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.normal\n */\nconst normal = (out, vector) => rotate(out, vector, create(), (TAU / 4))\n\nmodule.exports = normal\n", "/**\n * Normalize the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to normalize\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.normalize\n */\nconst normalize = (out, vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  let len = x * x + y * y\n  if (len > 0) {\n    len = 1 / Math.sqrt(len)\n  }\n  out[0] = x * len\n  out[1] = y * len\n  return out\n}\n\n// old this.dividedBy(this.length())\n\nmodule.exports = normalize\n", "/**\n * Scales the coordinates of the given vector.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to scale\n * @param {Number} amount - amount to scale\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.scale\n */\nconst scale = (out, vector, amount) => {\n  out[0] = vector[0] * amount\n  out[1] = vector[1] * amount\n  return out\n}\n\nmodule.exports = scale\n", "/**\n * Snaps the coordinates of the given vector to the given epsilon.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to snap\n * @param {Number} epsilon - epsilon of precision, less than 0\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.snap\n */\nconst snap = (out, vector, epsilon) => {\n  out[0] = Math.round(vector[0] / epsilon) * epsilon + 0\n  out[1] = Math.round(vector[1] / epsilon) * epsilon + 0\n  return out\n}\n\nmodule.exports = snap\n", "/**\n * Calculates the squared distance between the given vectors.\n *\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {Number} squared distance\n * @alias module:modeling/maths/vec2.squaredDistance\n */\nconst squaredDistance = (a, b) => {\n  const x = b[0] - a[0]\n  const y = b[1] - a[1]\n  return x * x + y * y\n}\n\nmodule.exports = squaredDistance\n", "/**\n * Calculates the squared length of the given vector.\n *\n * @param {vec2} vector - vector of reference\n * @returns {Number} squared length\n * @alias module:modeling/maths/vec2.squaredLength\n */\nconst squaredLength = (vector) => {\n  const x = vector[0]\n  const y = vector[1]\n  return x * x + y * y\n}\n\nmodule.exports = squaredLength\n", "/**\n * Subtracts the coordinates of two vectors (A-B).\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} a - first operand\n * @param {vec2} b - second operand\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.subtract\n */\nconst subtract = (out, a, b) => {\n  out[0] = a[0] - b[0]\n  out[1] = a[1] - b[1]\n  return out\n}\n\nmodule.exports = subtract\n", "/**\n * Convert the given vector to a representative string.\n *\n * @param {vec2} vector - vector of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/vec2.toString\n */\nconst toString = (vector) => `[${vector[0].toFixed(7)}, ${vector[1].toFixed(7)}]`\n\nmodule.exports = toString\n", "/**\n * Transforms the given vector using the given matrix.\n *\n * @param {vec2} out - receiving vector\n * @param {vec2} vector - vector to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {vec2} out\n * @alias module:modeling/maths/vec2.transform\n */\nconst transform = (out, vector, matrix) => {\n  const x = vector[0]\n  const y = vector[1]\n  out[0] = matrix[0] * x + matrix[4] * y + matrix[12]\n  out[1] = matrix[1] * x + matrix[5] * y + matrix[13]\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a two dimensional vector.\n * @module modeling/maths/vec2\n */\nmodule.exports = {\n  abs: require('./abs'),\n  add: require('./add'),\n  angle: require('./angle'),\n  angleDegrees: require('./angleDegrees'),\n  angleRadians: require('./angleRadians'),\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  cross: require('./cross'),\n  distance: require('./distance'),\n  divide: require('./divide'),\n  dot: require('./dot'),\n  equals: require('./equals'),\n  fromAngleDegrees: require('./fromAngleDegrees'),\n  fromAngleRadians: require('./fromAngleRadians'),\n  fromScalar: require('./fromScalar'),\n  fromValues: require('./fromValues'),\n  length: require('./length'),\n  lerp: require('./lerp'),\n  max: require('./max'),\n  min: require('./min'),\n  multiply: require('./multiply'),\n  negate: require('./negate'),\n  normal: require('./normal'),\n  normalize: require('./normalize'),\n  rotate: require('./rotate'),\n  scale: require('./scale'),\n  snap: require('./snap'),\n  squaredDistance: require('./squaredDistance'),\n  squaredLength: require('./squaredLength'),\n  subtract: require('./subtract'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new 2D geometry from the given points.\n * The direction (rotation) of the points is not relevant,\n * as the points can define a convex or a concave polygon.\n * The geometry must not self intersect, i.e. the sides cannot cross.\n * @param {Array} points - list of points in 2D space\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.fromPoints\n */\nconst fromPoints = (points) => {\n  if (!Array.isArray(points)) {\n    throw new Error('the given points must be an array')\n  }\n  let length = points.length\n  if (length < 3) {\n    throw new Error('the given points must define a closed geometry with three or more points')\n  }\n  // adjust length if the given points are closed by the same point\n  if (vec2.equals(points[0], points[length - 1])) --length\n\n  const sides = []\n  let prevpoint = points[length - 1]\n  for (let i = 0; i < length; i++) {\n    const point = points[i]\n    sides.push([vec2.clone(prevpoint), vec2.clone(point)])\n    prevpoint = point\n  }\n  return create(sides)\n}\n\nmodule.exports = fromPoints\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new 2D geometry from the given compact binary data.\n * @param {Array} data - compact binary data\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 0) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  for (let i = 21; i < data.length; i += 4) {\n    const point0 = vec2.fromValues(data[i + 0], data[i + 1])\n    const point1 = vec2.fromValues(data[i + 2], data[i + 3])\n    created.sides.push([point0, point1])\n  }\n  // transfer known properties, i.e. color\n  if (data[17] >= 0) {\n    created.color = [data[17], data[18], data[19], data[20]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n", "/**\n * Determine if the given object is a 2D geometry.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true, if the object matches a geom2 based object\n * @alias module:modeling/geometries/geom2.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('sides' in object && 'transforms' in object) {\n      if (Array.isArray(object.sides) && 'length' in object.transforms) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\n/*\n * Apply the transforms of the given geometry.\n * NOTE: This function must be called BEFORE exposing any data. See toSides().\n * @param {geom2} geometry - the geometry to transform\n * @returns {geom2} the given geometry\n *\n * @example\n * geometry = applyTransforms(geometry)\n */\nconst applyTransforms = (geometry) => {\n  if (mat4.isIdentity(geometry.transforms)) return geometry\n\n  // apply transforms to each side\n  geometry.sides = geometry.sides.map((side) => {\n    const p0 = vec2.transform(vec2.create(), side[0], geometry.transforms)\n    const p1 = vec2.transform(vec2.create(), side[1], geometry.transforms)\n    return [p0, p1]\n  })\n  geometry.transforms = mat4.create()\n  return geometry\n}\n\nmodule.exports = applyTransforms\n", "const applyTransforms = require('./applyTransforms')\n\n/**\n * Produces an array of sides from the given geometry.\n * The returned array should not be modified as the data is shared with the geometry.\n * NOTE: The sides returned do NOT define an order. Use toOutlines() for ordered points.\n * @param {geom2} geometry - the geometry\n * @returns {Array} an array of sides\n * @alias module:modeling/geometries/geom2.toSides\n *\n * @example\n * let sharedsides = toSides(geometry)\n */\nconst toSides = (geometry) => applyTransforms(geometry).sides\n\nmodule.exports = toSides\n", "const create = require('./create')\nconst toSides = require('./toSides')\n\n/**\n * Reverses the given geometry so that the sides are flipped in the opposite order.\n * This swaps the left (interior) and right (exterior) edges.\n * @param {geom2} geometry - the geometry to reverse\n * @returns {geom2} the new reversed geometry\n * @alias module:modeling/geometries/geom2.reverse\n *\n * @example\n * let newgeometry = reverse(geometry)\n */\nconst reverse = (geometry) => {\n  const oldsides = toSides(geometry)\n\n  const newsides = oldsides.map((side) => [side[1], side[0]])\n  newsides.reverse() // is this required?\n  return create(newsides)\n}\n\nmodule.exports = reverse\n", "const vec2 = require('../../maths/vec2')\n\nconst toSides = require('./toSides')\n\n/*\n * Create a list of edges which SHARE vertices.\n * This allows the edges to be traversed in order.\n */\nconst toSharedVertices = (sides) => {\n  const unique = new Map() // {key: vertex}\n  const getUniqueVertex = (vertex) => {\n    const key = vertex.toString()\n    if (unique.has(key)) {\n      return unique.get(key)\n    } else {\n      unique.set(key, vertex)\n      return vertex\n    }\n  }\n\n  return sides.map((side) => side.map(getUniqueVertex))\n}\n\n/*\n * Convert a list of sides into a map from vertex to edges.\n */\nconst toVertexMap = (sides) => {\n  const vertexMap = new Map()\n  // first map to edges with shared vertices\n  const edges = toSharedVertices(sides)\n  // construct adjacent edges map\n  edges.forEach((edge) => {\n    if (vertexMap.has(edge[0])) {\n      vertexMap.get(edge[0]).push(edge)\n    } else {\n      vertexMap.set(edge[0], [edge])\n    }\n  })\n  return vertexMap\n}\n\n/**\n * Create the outline(s) of the given geometry.\n * @param {geom2} geometry - geometry to create outlines from\n * @returns {Array} an array of outlines, where each outline is an array of ordered points\n * @alias module:modeling/geometries/geom2.toOutlines\n *\n * @example\n * let geometry = subtract(rectangle({size: [5, 5]}), rectangle({size: [3, 3]}))\n * let outlines = toOutlines(geometry) // returns two outlines\n */\nconst toOutlines = (geometry) => {\n  const vertexMap = toVertexMap(toSides(geometry)) // {vertex: [edges]}\n  const outlines = []\n  while (true) {\n    let startSide\n    for (const [vertex, edges] of vertexMap) {\n      startSide = edges.shift()\n      if (!startSide) {\n        vertexMap.delete(vertex)\n        continue\n      }\n      break\n    }\n    if (startSide === undefined) break // all starting sides have been visited\n\n    const connectedVertexPoints = []\n    const startVertex = startSide[0]\n    while (true) {\n      connectedVertexPoints.push(startSide[0])\n      const nextVertex = startSide[1]\n      if (nextVertex === startVertex) break // the outline has been closed\n      const nextPossibleSides = vertexMap.get(nextVertex)\n      if (!nextPossibleSides) {\n        throw new Error(`geometry is not closed at vertex ${nextVertex}`)\n      }\n      const nextSide = popNextSide(startSide, nextPossibleSides)\n      if (nextPossibleSides.length === 0) {\n        vertexMap.delete(nextVertex)\n      }\n      startSide = nextSide\n    } // inner loop\n\n    // due to the logic of fromPoints()\n    // move the first point to the last\n    if (connectedVertexPoints.length > 0) {\n      connectedVertexPoints.push(connectedVertexPoints.shift())\n    }\n    outlines.push(connectedVertexPoints)\n  } // outer loop\n  vertexMap.clear()\n  return outlines\n}\n\n// find the first counter-clockwise edge from startSide and pop from nextSides\nconst popNextSide = (startSide, nextSides) => {\n  if (nextSides.length === 1) {\n    return nextSides.pop()\n  }\n  const v0 = vec2.create()\n  const startAngle = vec2.angleDegrees(vec2.subtract(v0, startSide[1], startSide[0]))\n  let bestAngle\n  let bestIndex\n  nextSides.forEach((nextSide, index) => {\n    const nextAngle = vec2.angleDegrees(vec2.subtract(v0, nextSide[1], nextSide[0]))\n    let angle = nextAngle - startAngle\n    if (angle < -180) angle += 360\n    if (angle >= 180) angle -= 360\n    if (bestIndex === undefined || angle > bestAngle) {\n      bestIndex = index\n      bestAngle = angle\n    }\n  })\n  const nextSide = nextSides[bestIndex]\n  nextSides.splice(bestIndex, 1) // remove side from list\n  return nextSide\n}\n\nmodule.exports = toOutlines\n", "const toSides = require('./toSides')\n\n/**\n * Produces an array of points from the given geometry.\n * The returned array should not be modified as the points are shared with the geometry.\n * NOTE: The points returned do NOT define an order. Use toOutlines() for ordered points.\n * @param {geom2} geometry - the geometry\n * @returns {Array} an array of points\n * @alias module:modeling/geometries/geom2.toPoints\n *\n * @example\n * let sharedpoints = toPoints(geometry)\n */\nconst toPoints = (geometry) => {\n  const sides = toSides(geometry)\n  const points = sides.map((side) => side[0])\n  // due to the logic of fromPoints()\n  // move the first point to the last\n  if (points.length > 0) {\n    points.push(points.shift())\n  }\n  return points\n}\n\nmodule.exports = toPoints\n", "const vec2 = require('../../maths/vec2')\n\nconst toSides = require('./toSides')\n\n/**\n * Create a string representing the contents of the given geometry.\n * @param {geom2} geometry - the geometry\n * @returns {String} a representative string\n * @alias module:modeling/geometries/geom2.toString\n *\n * @example\n * console.out(toString(geometry))\n */\nconst toString = (geometry) => {\n  const sides = toSides(geometry)\n  let result = 'geom2 (' + sides.length + ' sides):\\n[\\n'\n  sides.forEach((side) => {\n    result += '  [' + vec2.toString(side[0]) + ', ' + vec2.toString(side[1]) + ']\\n'\n  })\n  result += ']\\n'\n  return result\n}\n\nmodule.exports = toString\n", "/**\n * Produces a compact binary representation from the given geometry.\n * @param {geom2} geometry - the geometry\n * @returns {TypedArray} compact binary representation\n * @alias module:modeling/geometries/geom2.toCompactBinary\n */\nconst toCompactBinary = (geometry) => {\n  const sides = geometry.sides\n  const transforms = geometry.transforms\n  let color = [-1, -1, -1, -1]\n  if (geometry.color) color = geometry.color\n\n  // FIXME why Float32Array?\n  const compacted = new Float32Array(1 + 16 + 4 + (sides.length * 4)) // type + transforms + color + sides data\n\n  compacted[0] = 0 // type code: 0 => geom2, 1 => geom3 , 2 => path2\n\n  compacted[1] = transforms[0]\n  compacted[2] = transforms[1]\n  compacted[3] = transforms[2]\n  compacted[4] = transforms[3]\n  compacted[5] = transforms[4]\n  compacted[6] = transforms[5]\n  compacted[7] = transforms[6]\n  compacted[8] = transforms[7]\n  compacted[9] = transforms[8]\n  compacted[10] = transforms[9]\n  compacted[11] = transforms[10]\n  compacted[12] = transforms[11]\n  compacted[13] = transforms[12]\n  compacted[14] = transforms[13]\n  compacted[15] = transforms[14]\n  compacted[16] = transforms[15]\n\n  compacted[17] = color[0]\n  compacted[18] = color[1]\n  compacted[19] = color[2]\n  compacted[20] = color[3]\n\n  for (let i = 0; i < sides.length; i++) {\n    const ci = i * 4 + 21\n    const point0 = sides[i][0]\n    const point1 = sides[i][1]\n    compacted[ci + 0] = point0[0]\n    compacted[ci + 1] = point0[1]\n    compacted[ci + 2] = point1[0]\n    compacted[ci + 3] = point1[1]\n  }\n  // TODO: how about custom properties or fields ?\n  return compacted\n}\n\nmodule.exports = toCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Transform the given geometry using the given matrix.\n * This is a lazy transform of the sides, as this function only adjusts the transforms.\n * The transforms are applied when accessing the sides via toSides().\n * @param {mat4} matrix - the matrix to transform with\n * @param {geom2} geometry - the geometry to transform\n * @returns {geom2} a new geometry\n * @alias module:modeling/geometries/geom2.transform\n *\n * @example\n * let newgeometry = transform(fromZRotation(degToRad(90)), geometry)\n */\nconst transform = (matrix, geometry) => {\n  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)\n  return Object.assign({}, geometry, { transforms })\n}\n\nmodule.exports = transform\n", "const vec2 = require('../../maths/vec2')\nconst isA = require('./isA')\nconst toOutlines = require('./toOutlines')\n\n/**\n * Determine if the given object is a valid geom2.\n * Checks for closedness, self-edges, and valid data points.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/geom2.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid geom2 structure')\n  }\n\n  // check for closedness\n  toOutlines(object)\n\n  // check for self-edges\n  object.sides.forEach((side) => {\n    if (vec2.equals(side[0], side[1])) {\n      throw new Error(`geom2 self-edge ${side[0]}`)\n    }\n  })\n\n  // check transforms\n  if (!object.transforms.every(Number.isFinite)) {\n    throw new Error(`geom2 invalid transforms ${object.transforms}`)\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a 2D geometry consisting of a list of sides.\n * @see {@link geom2} for data structure information.\n * @module modeling/geometries/geom2\n *\n * @example\n * colorize([0.5,0,1,1], square()) // purple square\n *\n * @example\n * {\n *   \"sides\": [[[-1,1],[-1,-1]],[[-1,-1],[1,-1]],[[1,-1],[1,1]],[[1,1],[-1,1]]],\n *   \"transforms\": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],\n *   \"color\": [0.5,0,1,1]\n * }\n */\nmodule.exports = {\n  clone: require('./clone'),\n  create: require('./create'),\n  fromPoints: require('./fromPoints'),\n  fromCompactBinary: require('./fromCompactBinary'),\n  isA: require('./isA'),\n  reverse: require('./reverse'),\n  toOutlines: require('./toOutlines'),\n  toPoints: require('./toPoints'),\n  toSides: require('./toSides'),\n  toString: require('./toString'),\n  toCompactBinary: require('./toCompactBinary'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "/**\n * Performs a shallow clone of the given geometry.\n * @param {geom3} geometry - the geometry to clone\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.clone\n */\nconst clone = (geometry) => Object.assign({}, geometry)\n\nmodule.exports = clone\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Represents a 3D geometry consisting of a list of polygons.\n * @typedef {Object} geom3\n * @property {Array} polygons - list of polygons, each polygon containing three or more points\n * @property {mat4} transforms - transforms to apply to the polygons, see transform()\n */\n\n/**\n * Create a new 3D geometry composed of the given polygons.\n * @param {Array} [polygons] - list of polygons, or undefined\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.create\n */\nconst create = (polygons) => {\n  if (polygons === undefined) {\n    polygons = [] // empty contents\n  }\n  return {\n    polygons,\n    transforms: mat4.create()\n  }\n}\n\nmodule.exports = create\n", "\n/**\n * Represents a convex 3D polygon. The vertices used to initialize a polygon must\n * be coplanar and form a convex shape. The vertices do not have to be `vec3`\n * instances but they must behave similarly.\n * @typedef {Object} poly3\n * @property {Array} vertices - list of ordered vertices (3D)\n */\n\n/**\n * Creates a new 3D polygon with initial values.\n *\n * @param {Array} [vertices] - a list of vertices (3D)\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.create\n */\nconst create = (vertices) => {\n  if (vertices === undefined || vertices.length < 3) {\n    vertices = [] // empty contents\n  }\n  return { vertices }\n}\n\nmodule.exports = create\n", "const create = require('./create')\n\nconst vec3 = require('../../maths/vec3')\n\n/**\n * Create a deep clone of the given polygon\n *\n * @param {poly3} [out] - receiving polygon\n * @param {poly3} polygon - polygon to clone\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.clone\n */\nconst clone = (...params) => {\n  let out\n  let poly3\n  if (params.length === 1) {\n    out = create()\n    poly3 = params[0]\n  } else {\n    out = params[0]\n    poly3 = params[1]\n  }\n  // deep clone of vertices\n  out.vertices = poly3.vertices.map((vec) => vec3.clone(vec))\n  return out\n}\n\nmodule.exports = clone\n", "const vec3 = require('../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Create a polygon from the given points.\n *\n * @param {Array} points - list of points (3D)\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.fromPoints\n *\n * @example\n * const points = [\n *   [0,  0, 0],\n *   [0, 10, 0],\n *   [0, 10, 10]\n * ]\n * const polygon = fromPoints(points)\n */\nconst fromPoints = (points) => {\n  const vertices = points.map((point) => vec3.clone(point))\n  return create(vertices)\n}\n\nmodule.exports = fromPoints\n", "const create = require('./create')\n\n/**\n * Create a polygon from the given vertices and plane.\n * NOTE: No checks are performed on the parameters.\n * @param {Array} vertices - list of vertices (3D)\n * @param {plane} plane - plane of the polygon\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.fromPointsAndPlane\n */\nconst fromPointsAndPlane = (vertices, plane) => {\n  const poly = create(vertices)\n  poly.plane = plane // retain the plane for later use\n  return poly\n}\n\nmodule.exports = fromPointsAndPlane\n", "/**\n * Represents a four dimensional vector.\n * See fromValues().\n * @typedef {Array} vec4\n */\n\n/**\n * Creates a new vector initialized to [0,0,0,0].\n *\n * @returns {vec4} a new vector\n * @alias module:modeling/maths/vec4.create\n */\nconst create = () => [0, 0, 0, 0]\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given vector.\n *\n * @param {vec4} vector - source vector\n * @returns {vec4} a new vector\n * @alias module:modeling/maths/vec4.clone\n */\nconst clone = (vector) => {\n  const out = create()\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  out[3] = vector[3]\n  return out\n}\n\nmodule.exports = clone\n", "/**\n * Create a copy of the given vector.\n *\n * @param {vec4} out - receiving vector\n * @param {vec4} vector - source vector\n * @returns {vec4} out\n * @alias module:modeling/maths/vec4.copy\n */\nconst copy = (out, vector) => {\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = vector[2]\n  out[3] = vector[3]\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Compare the given vectors for equality.\n *\n * @param {vec4} a - first vector\n * @param {vec4} b - second vector\n * @return {Boolean} true if vectors are equal\n * @alias module:modeling/maths/vec4.equals\n */\nconst equals = (a, b) => ((a[0] === b[0]) && (a[1] === b[1]) && (a[2] === b[2]) && (a[3] === b[3]))\n\nmodule.exports = equals\n", "/**\n * Flip the given plane.\n *\n * @param {plane} out - receiving plane\n * @param {plane} plane - plane to flip\n * @return {plane} out\n * @alias module:modeling/maths/plane.flip\n */\nconst flip = (out, plane) => {\n  out[0] = -plane[0]\n  out[1] = -plane[1]\n  out[2] = -plane[2]\n  out[3] = -plane[3]\n  return out\n}\n\nmodule.exports = flip\n", "const vec3 = require('../vec3')\n\n/**\n * Represents a plane in 3D coordinate space as determined by a normal (perpendicular to the plane)\n * and distance from 0,0,0.\n *\n * The contents of the array are a normal [0,1,2] and a distance [3].\n * @see https://en.wikipedia.org/wiki/Hesse_normal_form\n * @typedef {Array} plane\n */\n\n/**\n * Create a new plane from the given normal and point values.\n *\n * @param {plane} out - receiving plane\n * @param {vec3} normal - directional vector\n * @param {vec3} point - origin of plane\n * @returns {plane} out\n * @alias module:modeling/maths/plane.fromNormalAndPoint\n */\nconst fromNormalAndPoint = (out, normal, point) => {\n  const u = vec3.normalize(vec3.create(), normal)\n  const w = vec3.dot(point, u)\n\n  out[0] = u[0]\n  out[1] = u[1]\n  out[2] = u[2]\n  out[3] = w\n  return out\n}\n\nmodule.exports = fromNormalAndPoint\n", "const create = require('./create')\n\n/**\n * Creates a new vector with the given values.\n *\n * @param {Number} x - X component\n * @param {Number} y - Y component\n * @param {Number} z - Z component\n * @param {Number} w - W component\n * @returns {vec4} a new vector\n * @alias module:modeling/maths/vec4.fromValues\n */\nconst fromValues = (x, y, z, w) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  out[2] = z\n  out[3] = w\n  return out\n}\n\nmodule.exports = fromValues\n", "const vec3 = require('../vec3')\n\n/**\n * Create a plane from the given points.\n *\n * @param {plane} out - receiving plane\n * @param {Array} vertices - points on the plane\n * @returns {plane} out\n * @alias module:modeling/maths/plane.fromPoints\n */\nconst fromPoints = (out, ...vertices) => {\n  const len = vertices.length\n\n  // Calculate normal vector for a single vertex\n  // Inline to avoid allocations\n  const ba = vec3.create()\n  const ca = vec3.create()\n  const vertexNormal = (index) => {\n    const a = vertices[index]\n    const b = vertices[(index + 1) % len]\n    const c = vertices[(index + 2) % len]\n    vec3.subtract(ba, b, a) // ba = b - a\n    vec3.subtract(ca, c, a) // ca = c - a\n    vec3.cross(ba, ba, ca) // ba = ba x ca\n    vec3.normalize(ba, ba)\n    return ba\n  }\n\n  out[0] = 0\n  out[1] = 0\n  out[2] = 0\n  if (len === 3) {\n    // optimization for triangles, which are always coplanar\n    vec3.copy(out, vertexNormal(0))\n  } else {\n    // sum of vertex normals\n    vertices.forEach((v, i) => {\n      vec3.add(out, out, vertexNormal(i))\n    })\n    // renormalize normal vector\n    vec3.normalize(out, out)\n  }\n  out[3] = vec3.dot(out, vertices[0])\n  return out\n}\n\nmodule.exports = fromPoints\n", "const { EPS } = require('../constants')\n\nconst vec3 = require('../vec3')\n\n/**\n * Create a new plane from the given points like fromPoints,\n * but allow the vectors to be on one point or one line.\n * In such a case, a random plane through the given points is constructed.\n *\n * @param {plane} out - receiving plane\n * @param {vec3} a - 3D point\n * @param {vec3} b - 3D point\n * @param {vec3} c - 3D point\n * @returns {plane} out\n * @alias module:modeling/maths/plane.fromPointsRandom\n */\nconst fromPointsRandom = (out, a, b, c) => {\n  let ba = vec3.subtract(vec3.create(), b, a)\n  let ca = vec3.subtract(vec3.create(), c, a)\n  if (vec3.length(ba) < EPS) {\n    ba = vec3.orthogonal(ba, ca)\n  }\n  if (vec3.length(ca) < EPS) {\n    ca = vec3.orthogonal(ca, ba)\n  }\n  let normal = vec3.cross(vec3.create(), ba, ca)\n  if (vec3.length(normal) < EPS) {\n    // this would mean that ba == ca.negated()\n    ca = vec3.orthogonal(ca, ba)\n    normal = vec3.cross(normal, ba, ca)\n  }\n  normal = vec3.normalize(normal, normal)\n  const w = vec3.dot(normal, a)\n\n  out[0] = normal[0]\n  out[1] = normal[1]\n  out[2] = normal[2]\n  out[3] = w\n  return out\n}\n\nmodule.exports = fromPointsRandom\n", "const vec3 = require('../vec3')\n\n/**\n * Project the given point on to the given plane.\n *\n * @param {plane} plane - plane of reference\n * @param {vec3} point - point of reference\n * @return {vec3} projected point on plane\n * @alias module:modeling/maths/plane.projectionOfPoint\n */\nconst projectionOfPoint = (plane, point) => {\n  const a = point[0] * plane[0] + point[1] * plane[1] + point[2] * plane[2] - plane[3]\n  const x = point[0] - a * plane[0]\n  const y = point[1] - a * plane[1]\n  const z = point[2] - a * plane[2]\n  return vec3.fromValues(x, y, z)\n}\n\nmodule.exports = projectionOfPoint\n", "const vec3 = require('../vec3')\n\n/**\n * Calculate the distance to the given point.\n *\n * @param {plane} plane - plane of reference\n * @param {vec3} point - point of reference\n * @return {Number} signed distance to point\n * @alias module:modeling/maths/plane.signedDistanceToPoint\n */\nconst signedDistanceToPoint = (plane, point) => vec3.dot(plane, point) - plane[3]\n\nmodule.exports = signedDistanceToPoint\n", "/**\n * Convert the given vector to a representative string.\n *\n * @param {vec4} vec - vector to convert\n * @returns {String} representative string\n * @alias module:modeling/maths/vec4.toString\n */\nconst toString = (vec) => `(${vec[0].toFixed(9)}, ${vec[1].toFixed(9)}, ${vec[2].toFixed(9)}, ${vec[3].toFixed(9)})`\n\nmodule.exports = toString\n", "const mat4 = require('../mat4')\nconst vec3 = require('../vec3')\n\nconst fromPoints = require('./fromPoints')\nconst flip = require('./flip')\n\n/**\n * Transform the given plane using the given matrix\n *\n * @param {plane} out - receiving plane\n * @param {plane} plane - plane to transform\n * @param {mat4} matrix - matrix to transform with\n * @return {plane} out\n * @alias module:modeling/maths/plane.transform\n */\nconst transform = (out, plane, matrix) => {\n  const ismirror = mat4.isMirroring(matrix)\n  // get two vectors in the plane:\n  const r = vec3.orthogonal(vec3.create(), plane)\n  const u = vec3.cross(r, plane, r)\n  const v = vec3.cross(vec3.create(), plane, u)\n  // get 3 points in the plane:\n  let point1 = vec3.fromScalar(vec3.create(), plane[3])\n  vec3.multiply(point1, point1, plane)\n  let point2 = vec3.add(vec3.create(), point1, u)\n  let point3 = vec3.add(vec3.create(), point1, v)\n  // transform the points:\n  point1 = vec3.transform(point1, point1, matrix)\n  point2 = vec3.transform(point2, point2, matrix)\n  point3 = vec3.transform(point3, point3, matrix)\n  // and create a new plane from the transformed points:\n  fromPoints(out, point1, point2, point3)\n  if (ismirror) {\n    // the transform is mirroring so flip the plane\n    flip(out, out)\n  }\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a plane in 3D coordinate space as determined by a normal (perpendicular to the plane)\n * and distance from 0,0,0.\n * @see {@link plane} for data structure information.\n * @module modeling/maths/plane\n */\nmodule.exports = {\n  /**\n   * @see [vec4.clone()]{@link module:modeling/maths/vec4.clone}\n   * @function clone\n   */\n  clone: require('../vec4/clone'),\n  /**\n   * @see [vec4.copy()]{@link module:modeling/maths/vec4.copy}\n   * @function copy\n   */\n  copy: require('../vec4/copy'),\n  /**\n   * @see [vec4.create()]{@link module:modeling/maths/vec4.create}\n   * @function create\n   */\n  create: require('../vec4/create'),\n  /**\n   * @see [vec4.equals()]{@link module:modeling/maths/vec4.equals}\n   * @function equals\n   */\n  equals: require('../vec4/equals'),\n  flip: require('./flip'),\n  fromNormalAndPoint: require('./fromNormalAndPoint'),\n  /**\n   * @see [vec4.fromValues()]{@link module:modeling/maths/vec4.fromValues}\n   * @function fromValues\n   */\n  fromValues: require('../vec4/fromValues'),\n  fromPoints: require('./fromPoints'),\n  fromPointsRandom: require('./fromPointsRandom'),\n  projectionOfPoint: require('./projectionOfPoint'),\n  signedDistanceToPoint: require('./signedDistanceToPoint'),\n  /**\n   * @see [vec4.toString()]{@link module:modeling/maths/vec4.toString}\n   * @function toString\n   */\n  toString: require('../vec4/toString'),\n  transform: require('./transform')\n}\n", "const plane = require('../../maths/plane')\nconst create = require('./create')\n\n/**\n * Invert the give polygon to face the opposite direction.\n *\n * @param {poly3} polygon - the polygon to invert\n * @returns {poly3} a new poly3\n * @alias module:modeling/geometries/poly3.invert\n */\nconst invert = (polygon) => {\n  const vertices = polygon.vertices.slice().reverse()\n  const inverted = create(vertices)\n  if (polygon.plane) {\n    // Flip existing plane to save recompute\n    inverted.plane = plane.flip(plane.create(), polygon.plane)\n  }\n  return inverted\n}\n\nmodule.exports = invert\n", "/**\n * Determine if the given object is a polygon.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true if the object matches a poly3\n * @alias module:modeling/geometries/poly3.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('vertices' in object) {\n      if (Array.isArray(object.vertices)) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const plane = require('../../maths/plane')\nconst vec3 = require('../../maths/vec3')\n\n/**\n * Check whether the given polygon is convex.\n * @param {poly3} polygon - the polygon to interrogate\n * @returns {Boolean} true if convex\n * @alias module:modeling/geometries/poly3.isConvex\n */\nconst isConvex = (polygon) => areVerticesConvex(polygon.vertices)\n\nconst areVerticesConvex = (vertices) => {\n  const numvertices = vertices.length\n  if (numvertices > 2) {\n    // note: plane ~= normal point\n    const normal = plane.fromPoints(plane.create(), ...vertices)\n    let prevprevpos = vertices[numvertices - 2]\n    let prevpos = vertices[numvertices - 1]\n    for (let i = 0; i < numvertices; i++) {\n      const pos = vertices[i]\n      if (!isConvexPoint(prevprevpos, prevpos, pos, normal)) {\n        return false\n      }\n      prevprevpos = prevpos\n      prevpos = pos\n    }\n  }\n  return true\n}\n\n// calculate whether three points form a convex corner\n//  prevpoint, point, nextpoint: the 3 coordinates (Vector3D instances)\n//  normal: the normal vector of the plane\nconst isConvexPoint = (prevpoint, point, nextpoint, normal) => {\n  const crossproduct = vec3.cross(\n    vec3.create(),\n    vec3.subtract(vec3.create(), point, prevpoint),\n    vec3.subtract(vec3.create(), nextpoint, point)\n  )\n  const crossdotnormal = vec3.dot(crossproduct, normal)\n  return crossdotnormal >= 0\n}\n\nmodule.exports = isConvex\n", "const mplane = require('../../maths/plane/')\n\nconst plane = (polygon) => {\n  if (!polygon.plane) {\n    polygon.plane = mplane.fromPoints(mplane.create(), ...polygon.vertices)\n  }\n  return polygon.plane\n}\n\nmodule.exports = plane\n", "const plane = require('./plane')\n\n/**\n * Measure the area of the given polygon.\n * @see 2000 softSurfer http://geomalgorithms.com\n * @param {poly3} polygon - the polygon to measure\n * @return {Number} area of the polygon\n * @alias module:modeling/geometries/poly3.measureArea\n */\nconst measureArea = (polygon) => {\n  const n = polygon.vertices.length\n  if (n < 3) {\n    return 0 // degenerate polygon\n  }\n  const vertices = polygon.vertices\n\n  // calculate a normal vector\n  const normal = plane(polygon)\n\n  // determine direction of projection\n  const ax = Math.abs(normal[0])\n  const ay = Math.abs(normal[1])\n  const az = Math.abs(normal[2])\n\n  if (ax + ay + az === 0) {\n    // normal does not exist\n    return 0\n  }\n\n  let coord = 3 // ignore Z coordinates\n  if ((ax > ay) && (ax > az)) {\n    coord = 1 // ignore X coordinates\n  } else\n  if (ay > az) {\n    coord = 2 // ignore Y coordinates\n  }\n\n  let area = 0\n  let h = 0\n  let i = 1\n  let j = 2\n  switch (coord) {\n    case 1: // ignore X coordinates\n      // compute area of 2D projection\n      for (i = 1; i < n; i++) {\n        h = i - 1\n        j = (i + 1) % n\n        area += (vertices[i][1] * (vertices[j][2] - vertices[h][2]))\n      }\n      area += (vertices[0][1] * (vertices[1][2] - vertices[n - 1][2]))\n      // scale to get area\n      area /= (2 * normal[0])\n      break\n\n    case 2: // ignore Y coordinates\n      // compute area of 2D projection\n      for (i = 1; i < n; i++) {\n        h = i - 1\n        j = (i + 1) % n\n        area += (vertices[i][2] * (vertices[j][0] - vertices[h][0]))\n      }\n      area += (vertices[0][2] * (vertices[1][0] - vertices[n - 1][0]))\n      // scale to get area\n      area /= (2 * normal[1])\n      break\n\n    case 3: // ignore Z coordinates\n    default:\n      // compute area of 2D projection\n      for (i = 1; i < n; i++) {\n        h = i - 1\n        j = (i + 1) % n\n        area += (vertices[i][0] * (vertices[j][1] - vertices[h][1]))\n      }\n      area += (vertices[0][0] * (vertices[1][1] - vertices[n - 1][1]))\n      // scale to get area\n      area /= (2 * normal[2])\n      break\n  }\n  return area\n}\n\nmodule.exports = measureArea\n", "const vec3 = require('../../maths/vec3')\n\n/**\n * @param {poly3} polygon - the polygon to measure\n * @returns {Array} an array of two vectors (3D);  minimum and maximum coordinates\n * @alias module:modeling/geometries/poly3.measureBoundingBox\n */\nconst measureBoundingBox = (polygon) => {\n  const vertices = polygon.vertices\n  const numvertices = vertices.length\n  const min = numvertices === 0 ? vec3.create() : vec3.clone(vertices[0])\n  const max = vec3.clone(min)\n  for (let i = 1; i < numvertices; i++) {\n    vec3.min(min, min, vertices[i])\n    vec3.max(max, max, vertices[i])\n  }\n  return [min, max]\n}\n\nmodule.exports = measureBoundingBox\n", "/**\n * Calculates the dot product of the given vectors.\n *\n * @param {vec4} a - first vector\n * @param {vec4} b - second vector\n * @returns {Number} dot product\n * @alias module:modeling/maths/vec4.dot\n */\nconst dot = (a, b) => a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]\n\nmodule.exports = dot\n", "/**\n * Create a new vector from the given scalar value.\n *\n * @param {vec4} out - receiving vector\n * @param  {Number} scalar\n * @returns {vec4} out\n * @alias module:modeling/maths/vec4.fromScalar\n */\nconst fromScalar = (out, scalar) => {\n  out[0] = scalar\n  out[1] = scalar\n  out[2] = scalar\n  out[3] = scalar\n  return out\n}\n\nmodule.exports = fromScalar\n", "/**\n * Transform the given vector using the given matrix.\n *\n * @param {vec4} out - receiving vector\n * @param {vec4} vector - vector to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {vec4} out\n * @alias module:modeling/maths/vec4.transform\n */\nconst transform = (out, vector, matrix) => {\n  const [x, y, z, w] = vector\n\n  out[0] = matrix[0] * x + matrix[4] * y + matrix[8] * z + matrix[12] * w\n  out[1] = matrix[1] * x + matrix[5] * y + matrix[9] * z + matrix[13] * w\n  out[2] = matrix[2] * x + matrix[6] * y + matrix[10] * z + matrix[14] * w\n  out[3] = matrix[3] * x + matrix[7] * y + matrix[11] * z + matrix[15] * w\n  return out\n}\n\nmodule.exports = transform\n", "/**\n * Represents a four dimensional vector.\n * @see {@link vec4} for data structure information.\n * @module modeling/maths/vec4\n */\nmodule.exports = {\n  clone: require('./clone'),\n  copy: require('./copy'),\n  create: require('./create'),\n  dot: require('./dot'),\n  equals: require('./equals'),\n  fromScalar: require('./fromScalar'),\n  fromValues: require('./fromValues'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec3 = require('../../maths/vec3')\nconst vec4 = require('../../maths/vec4')\n\nconst cache = new WeakMap()\n\n/**\n * Measure the bounding sphere of the given polygon.\n * @param {poly3} polygon - the polygon to measure\n * @returns {vec4} the computed bounding sphere; center point (3D) and radius\n * @alias module:modeling/geometries/poly3.measureBoundingSphere\n */\nconst measureBoundingSphere = (polygon) => {\n  let boundingSphere = cache.get(polygon)\n  if (boundingSphere) return boundingSphere\n\n  const vertices = polygon.vertices\n  const out = vec4.create()\n\n  if (vertices.length === 0) {\n    out[0] = 0\n    out[1] = 0\n    out[2] = 0\n    out[3] = 0\n    return out\n  }\n\n  // keep a list of min/max vertices by axis\n  let minx = vertices[0]\n  let miny = minx\n  let minz = minx\n  let maxx = minx\n  let maxy = minx\n  let maxz = minx\n\n  vertices.forEach((v) => {\n    if (minx[0] > v[0]) minx = v\n    if (miny[1] > v[1]) miny = v\n    if (minz[2] > v[2]) minz = v\n    if (maxx[0] < v[0]) maxx = v\n    if (maxy[1] < v[1]) maxy = v\n    if (maxz[2] < v[2]) maxz = v\n  })\n\n  out[0] = (minx[0] + maxx[0]) * 0.5 // center of sphere\n  out[1] = (miny[1] + maxy[1]) * 0.5\n  out[2] = (minz[2] + maxz[2]) * 0.5\n  const x = out[0] - maxx[0]\n  const y = out[1] - maxy[1]\n  const z = out[2] - maxz[2]\n  out[3] = Math.sqrt(x * x + y * y + z * z) // radius of sphere\n\n  cache.set(polygon, out)\n\n  return out\n}\n\nmodule.exports = measureBoundingSphere\n", "const vec3 = require('../../maths/vec3')\n\n/**\n * Measure the signed volume of the given polygon, which must be convex.\n * The volume is that formed by the tetrahedron connected to the axis [0,0,0],\n * and will be positive or negative based on the rotation of the vertices.\n * @see http://chenlab.ece.cornell.edu/Publication/Cha/icip01_Cha.pdf\n * @param {poly3} polygon - the polygon to measure\n * @return {Number} volume of the polygon\n * @alias module:modeling/geometries/poly3.measureSignedVolume\n */\nconst measureSignedVolume = (polygon) => {\n  let signedVolume = 0\n  const vertices = polygon.vertices\n  // calculate based on triangular polygons\n  const cross = vec3.create()\n  for (let i = 0; i < vertices.length - 2; i++) {\n    vec3.cross(cross, vertices[i + 1], vertices[i + 2])\n    signedVolume += vec3.dot(vertices[0], cross)\n  }\n  signedVolume /= 6\n  return signedVolume\n}\n\nmodule.exports = measureSignedVolume\n", "/**\n * Return the given polygon as a list of points.\n * NOTE: The returned array should not be modified as the points are shared with the geometry.\n * @param {poly3} polygon - the polygon\n * @return {Array} list of points (3D)\n * @alias module:modeling/geometries/poly3.toPoints\n */\nconst toPoints = (polygon) => polygon.vertices\n\nmodule.exports = toPoints\n", "const vec3 = require('../../maths/vec3/')\n\n/**\n * @param {poly3} polygon - the polygon to measure\n * @return {String} the string representation\n * @alias module:modeling/geometries/poly3.toString\n */\nconst toString = (polygon) => {\n  let result = 'poly3: vertices: ['\n  polygon.vertices.forEach((vertex) => {\n    result += `${vec3.toString(vertex)}, `\n  })\n  result += ']'\n  return result\n}\n\nmodule.exports = toString\n", "const mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Transform the given polygon using the given matrix.\n * @param {mat4} matrix - the matrix to transform with\n * @param {poly3} polygon - the polygon to transform\n * @returns {poly3} a new polygon\n * @alias module:modeling/geometries/poly3.transform\n */\nconst transform = (matrix, polygon) => {\n  const vertices = polygon.vertices.map((vertex) => vec3.transform(vec3.create(), vertex, matrix))\n  if (mat4.isMirroring(matrix)) {\n    // reverse the order to preserve the orientation\n    vertices.reverse()\n  }\n  return create(vertices)\n}\n\nmodule.exports = transform\n", "const signedDistanceToPoint = require('../../maths/plane/signedDistanceToPoint')\nconst { NEPS } = require('../../maths/constants')\nconst vec3 = require('../../maths/vec3')\nconst isA = require('./isA')\nconst isConvex = require('./isConvex')\nconst measureArea = require('./measureArea')\nconst plane = require('./plane')\n\n/**\n * Determine if the given object is a valid polygon.\n * Checks for valid data structure, convex polygons, and duplicate points.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/poly3.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid poly3 structure')\n  }\n\n  // check for empty polygon\n  if (object.vertices.length < 3) {\n    throw new Error(`poly3 not enough vertices ${object.vertices.length}`)\n  }\n  // check area\n  if (measureArea(object) <= 0) {\n    throw new Error('poly3 area must be greater than zero')\n  }\n\n  // check for duplicate points\n  for (let i = 0; i < object.vertices.length; i++) {\n    if (vec3.equals(object.vertices[i], object.vertices[(i + 1) % object.vertices.length])) {\n      throw new Error(`poly3 duplicate vertex ${object.vertices[i]}`)\n    }\n  }\n\n  // check convexity\n  if (!isConvex(object)) {\n    throw new Error('poly3 must be convex')\n  }\n\n  // check for infinity, nan\n  object.vertices.forEach((vertex) => {\n    if (!vertex.every(Number.isFinite)) {\n      throw new Error(`poly3 invalid vertex ${vertex}`)\n    }\n  })\n\n  // check that points are co-planar\n  if (object.vertices.length > 3) {\n    const normal = plane(object)\n    object.vertices.forEach((vertex) => {\n      const dist = Math.abs(signedDistanceToPoint(normal, vertex))\n      if (dist > NEPS) {\n        throw new Error(`poly3 must be coplanar: vertex ${vertex} distance ${dist}`)\n      }\n    })\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a convex 3D polygon consisting of a list of ordered vertices.\n * @see {@link poly3} for data structure information.\n * @module modeling/geometries/poly3\n *\n * @example\n * poly3.create([[0,0,0], [4,0,0], [4,3,12]])\n *\n * @example\n * {\"vertices\": [[0,0,0], [4,0,0], [4,3,12]]}\n */\nmodule.exports = {\n  clone: require('./clone'),\n  create: require('./create'),\n  fromPoints: require('./fromPoints'),\n  fromPointsAndPlane: require('./fromPointsAndPlane'),\n  invert: require('./invert'),\n  isA: require('./isA'),\n  isConvex: require('./isConvex'),\n  measureArea: require('./measureArea'),\n  measureBoundingBox: require('./measureBoundingBox'),\n  measureBoundingSphere: require('./measureBoundingSphere'),\n  measureSignedVolume: require('./measureSignedVolume'),\n  plane: require('./plane'),\n  toPoints: require('./toPoints'),\n  toString: require('./toString'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "const poly3 = require('../poly3')\n\nconst create = require('./create')\n\n/**\n * Construct a new 3D geometry from a list of points.\n * The list of points should contain sub-arrays, each defining a single polygon of points.\n * In addition, the points should follow the right-hand rule for rotation in order to\n * define an external facing polygon.\n * @param {Array} listofpoints - list of lists, where each list is a set of points to construct a polygon\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.fromPoints\n */\nconst fromPoints = (listofpoints) => {\n  if (!Array.isArray(listofpoints)) {\n    throw new Error('the given points must be an array')\n  }\n\n  const polygons = listofpoints.map((points, index) => {\n    // TODO catch the error, and rethrow with index\n    const polygon = poly3.create(points)\n    return polygon\n  })\n  const result = create(polygons)\n  return result\n}\n\nmodule.exports = fromPoints\n", "const vec3 = require('../../maths/vec3')\nconst mat4 = require('../../maths/mat4')\n\nconst poly3 = require('../poly3')\n\nconst create = require('./create')\n\n/**\n * Construct a new 3D geometry from the given compact binary data.\n * @param {TypedArray} data - compact binary data\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 1) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  const numberOfVertices = data[21]\n  let ci = 22\n  let vi = data.length - (numberOfVertices * 3)\n  while (vi < data.length) {\n    const verticesPerPolygon = data[ci]\n    ci++\n\n    const vertices = []\n    for (let i = 0; i < verticesPerPolygon; i++) {\n      vertices.push(vec3.fromValues(data[vi], data[vi + 1], data[vi + 2]))\n      vi += 3\n    }\n    created.polygons.push(poly3.create(vertices))\n  }\n\n  // transfer known properties, i.e. color\n  if (data[17] >= 0) {\n    created.color = [data[17], data[18], data[19], data[20]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\nconst poly3 = require('../poly3')\n\n/*\n * Apply the transforms of the given geometry.\n * NOTE: This function must be called BEFORE exposing any data. See toPolygons.\n * @param {geom3} geometry - the geometry to transform\n * @returns {geom3} the given geometry\n * @example\n * geometry = applyTransforms(geometry)\n */\nconst applyTransforms = (geometry) => {\n  if (mat4.isIdentity(geometry.transforms)) return geometry\n\n  // apply transforms to each polygon\n  geometry.polygons = geometry.polygons.map((polygon) => poly3.transform(geometry.transforms, polygon))\n  // reset transforms\n  geometry.transforms = mat4.create()\n  return geometry\n}\n\nmodule.exports = applyTransforms\n", "const applyTransforms = require('./applyTransforms')\n\n/**\n * Produces an array of polygons from the given geometry, after applying transforms.\n * The returned array should not be modified as the polygons are shared with the geometry.\n * @param {geom3} geometry - the geometry\n * @returns {Array} an array of polygons\n * @alias module:modeling/geometries/geom3.toPolygons\n *\n * @example\n * let sharedpolygons = toPolygons(geometry)\n */\nconst toPolygons = (geometry) => applyTransforms(geometry).polygons\n\nmodule.exports = toPolygons\n", "const poly3 = require('../poly3')\n\nconst create = require('./create')\nconst toPolygons = require('./toPolygons')\n\n/**\n * Invert the given geometry, transposing solid and empty space.\n * @param {geom3} geometry - the geometry to invert\n * @return {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.invert\n */\nconst invert = (geometry) => {\n  const polygons = toPolygons(geometry)\n  const newpolygons = polygons.map((polygon) => poly3.invert(polygon))\n  return create(newpolygons)\n}\n\nmodule.exports = invert\n", "/**\n * Determine if the given object is a 3D geometry.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true if the object matches a geom3\n * @alias module:modeling/geometries/geom3.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('polygons' in object && 'transforms' in object) {\n      if (Array.isArray(object.polygons) && 'length' in object.transforms) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const poly3 = require('../poly3')\n\nconst toPolygons = require('./toPolygons')\n\n/**\n * Return the given geometry as a list of points, after applying transforms.\n * The returned array should not be modified as the points are shared with the geometry.\n * @param {geom3} geometry - the geometry\n * @return {Array} list of points, where each sub-array represents a polygon\n * @alias module:modeling/geometries/geom3.toPoints\n */\nconst toPoints = (geometry) => {\n  const polygons = toPolygons(geometry)\n  const listofpoints = polygons.map((polygon) => poly3.toPoints(polygon))\n  return listofpoints\n}\n\nmodule.exports = toPoints\n", "const poly3 = require('../poly3')\n\nconst toPolygons = require('./toPolygons')\n\n/**\n * Create a string representing the contents of the given geometry.\n * @param {geom3} geometry - the geometry\n * @returns {String} a representative string\n * @alias module:modeling/geometries/geom3.toString\n *\n * @example\n * console.out(toString(geometry))\n */\nconst toString = (geometry) => {\n  const polygons = toPolygons(geometry)\n  let result = 'geom3 (' + polygons.length + ' polygons):\\n'\n  polygons.forEach((polygon) => {\n    result += '  ' + poly3.toString(polygon) + '\\n'\n  })\n  return result\n}\n\nmodule.exports = toString\n", "const poly3 = require('../poly3')\n\n/**\n * Return the given geometry in compact binary representation.\n * @param {geom3} geometry - the geometry\n * @return {TypedArray} compact binary representation\n * @alias module:modeling/geometries/geom3.toCompactBinary\n */\nconst toCompactBinary = (geometry) => {\n  const polygons = geometry.polygons\n  const transforms = geometry.transforms\n\n  const numberOfPolygons = polygons.length\n  const numberOfVertices = polygons.reduce((count, polygon) => count + polygon.vertices.length, 0)\n  let color = [-1, -1, -1, -1]\n  if (geometry.color) color = geometry.color\n\n  // FIXME why Float32Array?\n  const compacted = new Float32Array(1 + 16 + 4 + 1 + numberOfPolygons + (numberOfVertices * 3))\n  // type + transforms + color + numberOfPolygons + numberOfVerticesPerPolygon[] + vertices data[]\n\n  compacted[0] = 1 // type code: 0 => geom2, 1 => geom3 , 2 => path2\n\n  compacted[1] = transforms[0]\n  compacted[2] = transforms[1]\n  compacted[3] = transforms[2]\n  compacted[4] = transforms[3]\n  compacted[5] = transforms[4]\n  compacted[6] = transforms[5]\n  compacted[7] = transforms[6]\n  compacted[8] = transforms[7]\n  compacted[9] = transforms[8]\n  compacted[10] = transforms[9]\n  compacted[11] = transforms[10]\n  compacted[12] = transforms[11]\n  compacted[13] = transforms[12]\n  compacted[14] = transforms[13]\n  compacted[15] = transforms[14]\n  compacted[16] = transforms[15]\n\n  compacted[17] = color[0]\n  compacted[18] = color[1]\n  compacted[19] = color[2]\n  compacted[20] = color[3]\n\n  compacted[21] = numberOfVertices\n\n  let ci = 22\n  let vi = ci + numberOfPolygons\n  polygons.forEach((polygon) => {\n    const points = poly3.toPoints(polygon)\n    // record the number of vertices per polygon\n    compacted[ci] = points.length\n    ci++\n    // convert the vertices\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i]\n      compacted[vi + 0] = point[0]\n      compacted[vi + 1] = point[1]\n      compacted[vi + 2] = point[2]\n      vi += 3\n    }\n  })\n  // TODO: how about custom properties or fields ?\n  return compacted\n}\n\nmodule.exports = toCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Transform the given geometry using the given matrix.\n * This is a lazy transform of the polygons, as this function only adjusts the transforms.\n * See applyTransforms() for the actual application of the transforms to the polygons.\n * @param {mat4} matrix - the matrix to transform with\n * @param {geom3} geometry - the geometry to transform\n * @returns {geom3} a new geometry\n * @alias module:modeling/geometries/geom3.transform\n *\n * @example\n * let newgeometry = transform(fromXRotation(degToRad(90)), geometry)\n */\nconst transform = (matrix, geometry) => {\n  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)\n  return Object.assign({}, geometry, { transforms })\n}\n\nmodule.exports = transform\n", "const poly3 = require('../poly3')\nconst isA = require('./isA')\n\n/**\n * Determine if the given object is a valid 3D geometry.\n * Checks for valid data structure, convex polygon faces, and manifold edges.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/geom3.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid geom3 structure')\n  }\n\n  // check polygons\n  object.polygons.forEach(poly3.validate)\n  validateManifold(object)\n\n  // check transforms\n  if (!object.transforms.every(Number.isFinite)) {\n    throw new Error(`geom3 invalid transforms ${object.transforms}`)\n  }\n\n  // TODO: check for self-intersecting\n}\n\n/*\n * Check manifold edge condition: Every edge is in exactly 2 faces\n */\nconst validateManifold = (object) => {\n  // count of each edge\n  const edgeCount = new Map()\n  object.polygons.forEach(({ vertices }) => {\n    vertices.forEach((v, i) => {\n      const v1 = `${v}`\n      const v2 = `${vertices[(i + 1) % vertices.length]}`\n      // sort for undirected edge\n      const edge = `${v1}/${v2}`\n      const count = edgeCount.has(edge) ? edgeCount.get(edge) : 0\n      edgeCount.set(edge, count + 1)\n    })\n  })\n\n  // check that edges are always matched\n  const nonManifold = []\n  edgeCount.forEach((count, edge) => {\n    const complementEdge = edge.split('/').reverse().join('/')\n    const complementCount = edgeCount.get(complementEdge)\n    if (count !== complementCount) {\n      nonManifold.push(edge.replace('/', ' -> '))\n    }\n  })\n  if (nonManifold.length > 0) {\n    throw new Error(`non-manifold edges ${nonManifold.length}\\n${nonManifold.join('\\n')}`)\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a 3D geometry consisting of a list of polygons.\n * @see {@link geom3} for data structure information.\n * @module modeling/geometries/geom3\n *\n * @example\n * colorize([0,0.5,1,0.6], cube()) // transparent ice cube\n *\n * @example\n * {\n *   \"polygons\": [\n *     {\"vertices\": [[-1,-1,-1], [-1,-1,1], [-1,1,1], [-1,1,-1]]},\n *     {\"vertices\": [[1,-1,-1], [1,1,-1], [1,1,1], [1,-1,1]]},\n *     {\"vertices\": [[-1,-1,-1], [1,-1,-1], [1,-1,1], [-1,-1,1]]},\n *     {\"vertices\": [[-1,1,-1], [-1,1,1], [1,1,1], [1,1,-1]]},\n *     {\"vertices\": [[-1,-1,-1], [-1,1,-1], [1,1,-1], [1,-1,-1]]},\n *     {\"vertices\": [[-1,-1,1], [1,-1,1], [1,1,1], [-1,1,1]]}\n *   ],\n *   \"transforms\": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],\n *   \"color\": [0,0.5,1,0.6]\n * }\n */\nmodule.exports = {\n  clone: require('./clone'),\n  create: require('./create'),\n  fromPoints: require('./fromPoints'),\n  fromCompactBinary: require('./fromCompactBinary'),\n  invert: require('./invert'),\n  isA: require('./isA'),\n  toPoints: require('./toPoints'),\n  toPolygons: require('./toPolygons'),\n  toString: require('./toString'),\n  toCompactBinary: require('./toCompactBinary'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "/**\n * Performs a shallow clone of the give geometry.\n * @param {path2} geometry - the geometry to clone\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.clone\n */\nconst clone = (geometry) => Object.assign({}, geometry)\n\nmodule.exports = clone\n", "const { EPS } = require('../../maths/constants')\n\nconst vec2 = require('../../maths/vec2')\n\nconst clone = require('./clone')\n\n/**\n * Close the given geometry.\n * @param {path2} geometry - the path to close\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.close\n */\nconst close = (geometry) => {\n  if (geometry.isClosed) return geometry\n\n  const cloned = clone(geometry)\n  cloned.isClosed = true\n\n  if (cloned.points.length > 1) {\n    // make sure the paths are formed properly\n    const points = cloned.points\n    const p0 = points[0]\n    let pn = points[points.length - 1]\n    while (vec2.distance(p0, pn) < (EPS * EPS)) {\n      points.pop()\n      if (points.length === 1) break\n      pn = points[points.length - 1]\n    }\n  }\n  return cloned\n}\n\nmodule.exports = close\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Represents a 2D geometry consisting of a list of ordered points.\n * @typedef {Object} path2\n * @property {Array} points - list of ordered points\n * @property {Boolean} isClosed - true if the path is closed where start and end points are the same\n * @property {mat4} transforms - transforms to apply to the points, see transform()\n */\n\n/**\n * Create an empty, open path.\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.create\n *\n * @example\n * let newpath = create()\n */\nconst create = (points) => {\n  if (points === undefined) {\n    points = []\n  }\n  return {\n    points: points,\n    isClosed: false,\n    transforms: mat4.create()\n  }\n}\n\nmodule.exports = create\n", "const { EPS } = require('../../maths/constants')\n\nconst vec2 = require('../../maths/vec2')\n\nconst close = require('./close')\nconst create = require('./create')\n\n/**\n * Create a new path from the given points.\n * The points must be provided an array of points,\n * where each point is an array of two numbers.\n * @param {Object} options - options for construction\n * @param {Boolean} [options.closed=false] - if the path should be open or closed\n * @param {Array} points - array of points (2D) from which to create the path\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.fromPoints\n *\n * @example:\n * my newpath = fromPoints({closed: true}, [[10, 10], [-10, 10]])\n */\nconst fromPoints = (options, points) => {\n  const defaults = { closed: false }\n  let { closed } = Object.assign({}, defaults, options)\n\n  let created = create()\n  created.points = points.map((point) => vec2.clone(point))\n\n  // check if first and last points are equal\n  if (created.points.length > 1) {\n    const p0 = created.points[0]\n    const pn = created.points[created.points.length - 1]\n    if (vec2.distance(p0, pn) < (EPS * EPS)) {\n      // and close automatically\n      closed = true\n    }\n  }\n  if (closed === true) created = close(created)\n\n  return created\n}\n\nmodule.exports = fromPoints\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\n/*\n * Apply the transforms of the given geometry.\n * NOTE: This function must be called BEFORE exposing any data. See toPoints.\n * @param {path} geometry - the geometry to transform\n * @returns {path} the given geometry\n * @example\n * geometry = applyTransforms(geometry)\n */\nconst applyTransforms = (geometry) => {\n  if (mat4.isIdentity(geometry.transforms)) return geometry\n\n  geometry.points = geometry.points.map((point) => vec2.transform(vec2.create(), point, geometry.transforms))\n  geometry.transforms = mat4.create()\n  return geometry\n}\n\nmodule.exports = applyTransforms\n", "const applyTransforms = require('./applyTransforms')\n\n/**\n * Produces an array of points from the given geometry.\n * The returned array should not be modified as the data is shared with the geometry.\n * @param {path2} geometry - the geometry\n * @returns {Array} an array of points\n * @alias module:modeling/geometries/path2.toPoints\n *\n * @example\n * let sharedpoints = toPoints(geometry)\n */\nconst toPoints = (geometry) => applyTransforms(geometry).points\n\nmodule.exports = toPoints\n", "const { TAU } = require('../../maths/constants')\nconst vec2 = require('../../maths/vec2')\n\nconst fromPoints = require('./fromPoints')\nconst toPoints = require('./toPoints')\n\n/**\n * Append a series of points to the given geometry that represent an arc.\n * This implementation follows the SVG specifications.\n * @see http://www.w3.org/TR/SVG/paths.html#PathDataEllipticalArcCommands\n * @param {Object} options - options for construction\n * @param {vec2} options.endpoint - end point of arc (REQUIRED)\n * @param {vec2} [options.radius=[0,0]] - radius of arc (X and Y)\n * @param {Number} [options.xaxisrotation=0] - rotation (RADIANS) of the X axis of the arc with respect to the X axis of the coordinate system\n * @param {Boolean} [options.clockwise=false] - draw an arc clockwise with respect to the center point\n * @param {Boolean} [options.large=false] - draw an arc longer than TAU / 2 radians\n * @param {Number} [options.segments=16] - number of segments per full rotation\n * @param {path2} geometry - the path of which to append the arc\n * @returns {path2} a new path with the appended points\n * @alias module:modeling/geometries/path2.appendArc\n *\n * @example\n * let p1 = path2.fromPoints({}, [[27.5,-22.96875]]);\n * p1 = path2.appendPoints([[27.5,-3.28125]], p1);\n * p1 = path2.appendArc({endpoint: [12.5, -22.96875], radius: [15, -19.6875]}, p1);\n */\nconst appendArc = (options, geometry) => {\n  const defaults = {\n    radius: [0, 0], // X and Y radius\n    xaxisrotation: 0,\n    clockwise: false,\n    large: false,\n    segments: 16\n  }\n  let { endpoint, radius, xaxisrotation, clockwise, large, segments } = Object.assign({}, defaults, options)\n\n  // validate the given options\n  if (!Array.isArray(endpoint)) throw new Error('endpoint must be an array of X and Y values')\n  if (endpoint.length < 2) throw new Error('endpoint must contain X and Y values')\n  endpoint = vec2.clone(endpoint)\n\n  if (!Array.isArray(radius)) throw new Error('radius must be an array of X and Y values')\n  if (radius.length < 2) throw new Error('radius must contain X and Y values')\n\n  if (segments < 4) throw new Error('segments must be four or more')\n\n  const decimals = 100000\n\n  // validate the given geometry\n  if (geometry.isClosed) {\n    throw new Error('the given path cannot be closed')\n  }\n\n  const points = toPoints(geometry)\n  if (points.length < 1) {\n    throw new Error('the given path must contain one or more points (as the starting point for the arc)')\n  }\n\n  let xradius = radius[0]\n  let yradius = radius[1]\n  const startpoint = points[points.length - 1]\n\n  // round to precision in order to have determinate calculations\n  xradius = Math.round(xradius * decimals) / decimals\n  yradius = Math.round(yradius * decimals) / decimals\n  endpoint = vec2.fromValues(Math.round(endpoint[0] * decimals) / decimals, Math.round(endpoint[1] * decimals) / decimals)\n\n  const sweepFlag = !clockwise\n  let newpoints = []\n  if ((xradius === 0) || (yradius === 0)) {\n    // http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes:\n    // If rx = 0 or ry = 0, then treat this as a straight line from (x1, y1) to (x2, y2) and stop\n    newpoints.push(endpoint)\n  } else {\n    xradius = Math.abs(xradius)\n    yradius = Math.abs(yradius)\n\n    // see http://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes :\n    const phi = xaxisrotation\n    const cosphi = Math.cos(phi)\n    const sinphi = Math.sin(phi)\n    const minushalfdistance = vec2.subtract(vec2.create(), startpoint, endpoint)\n    vec2.scale(minushalfdistance, minushalfdistance, 0.5)\n    // F.6.5.1:\n    // round to precision in order to have determinate calculations\n    const x = Math.round((cosphi * minushalfdistance[0] + sinphi * minushalfdistance[1]) * decimals) / decimals\n    const y = Math.round((-sinphi * minushalfdistance[0] + cosphi * minushalfdistance[1]) * decimals) / decimals\n    const startTranslated = vec2.fromValues(x, y)\n    // F.6.6.2:\n    const biglambda = (startTranslated[0] * startTranslated[0]) / (xradius * xradius) + (startTranslated[1] * startTranslated[1]) / (yradius * yradius)\n    if (biglambda > 1.0) {\n      // F.6.6.3:\n      const sqrtbiglambda = Math.sqrt(biglambda)\n      xradius *= sqrtbiglambda\n      yradius *= sqrtbiglambda\n      // round to precision in order to have determinate calculations\n      xradius = Math.round(xradius * decimals) / decimals\n      yradius = Math.round(yradius * decimals) / decimals\n    }\n    // F.6.5.2:\n    let multiplier1 = Math.sqrt((xradius * xradius * yradius * yradius - xradius * xradius * startTranslated[1] * startTranslated[1] - yradius * yradius * startTranslated[0] * startTranslated[0]) / (xradius * xradius * startTranslated[1] * startTranslated[1] + yradius * yradius * startTranslated[0] * startTranslated[0]))\n    if (sweepFlag === large) multiplier1 = -multiplier1\n    const centerTranslated = vec2.fromValues(xradius * startTranslated[1] / yradius, -yradius * startTranslated[0] / xradius)\n    vec2.scale(centerTranslated, centerTranslated, multiplier1)\n    // F.6.5.3:\n    let center = vec2.fromValues(cosphi * centerTranslated[0] - sinphi * centerTranslated[1], sinphi * centerTranslated[0] + cosphi * centerTranslated[1])\n    center = vec2.add(center, center, vec2.scale(vec2.create(), vec2.add(vec2.create(), startpoint, endpoint), 0.5))\n\n    // F.6.5.5:\n    const vector1 = vec2.fromValues((startTranslated[0] - centerTranslated[0]) / xradius, (startTranslated[1] - centerTranslated[1]) / yradius)\n    const vector2 = vec2.fromValues((-startTranslated[0] - centerTranslated[0]) / xradius, (-startTranslated[1] - centerTranslated[1]) / yradius)\n    const theta1 = vec2.angleRadians(vector1)\n    const theta2 = vec2.angleRadians(vector2)\n    let deltatheta = theta2 - theta1\n    deltatheta = deltatheta % TAU\n    if ((!sweepFlag) && (deltatheta > 0)) {\n      deltatheta -= TAU\n    } else if ((sweepFlag) && (deltatheta < 0)) {\n      deltatheta += TAU\n    }\n\n    // Ok, we have the center point and angle range (from theta1, deltatheta radians) so we can create the ellipse\n    let numsteps = Math.ceil(Math.abs(deltatheta) / TAU * segments) + 1\n    if (numsteps < 1) numsteps = 1\n    for (let step = 1; step < numsteps; step++) {\n      const theta = theta1 + step / numsteps * deltatheta\n      const costheta = Math.cos(theta)\n      const sintheta = Math.sin(theta)\n      // F.6.3.1:\n      const point = vec2.fromValues(cosphi * xradius * costheta - sinphi * yradius * sintheta, sinphi * xradius * costheta + cosphi * yradius * sintheta)\n      vec2.add(point, point, center)\n      newpoints.push(point)\n    }\n    // ensure end point is precisely what user gave as parameter\n    if (numsteps) newpoints.push(options.endpoint)\n  }\n  newpoints = points.concat(newpoints)\n  const result = fromPoints({}, newpoints)\n  return result\n}\n\nmodule.exports = appendArc\n", "const fromPoints = require('./fromPoints')\nconst toPoints = require('./toPoints')\n\nconst { equals } = require('../../maths/vec2')\n\n/**\n * Concatenate the given paths.\n *\n * If both contain the same point at the junction, merge it into one.\n * A concatenation of zero paths is an empty, open path.\n * A concatenation of one closed path to a series of open paths produces a closed path.\n * A concatenation of a path to a closed path is an error.\n * @param {...path2} paths - the paths to concatenate\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.concat\n *\n * @example\n * let newpath = concat(fromPoints({}, [[1, 2]]), fromPoints({}, [[3, 4]]))\n */\nconst concat = (...paths) => {\n  // Only the last path can be closed, producing a closed path.\n  let isClosed = false\n  let newpoints = []\n  paths.forEach((path, i) => {\n    const tmp = toPoints(path).slice()\n    if (newpoints.length > 0 && tmp.length > 0 && equals(tmp[0], newpoints[newpoints.length - 1])) tmp.shift()\n    if (tmp.length > 0 && isClosed) {\n      throw new Error(`Cannot concatenate to a closed path; check the ${i}th path`)\n    }\n    isClosed = path.isClosed\n    newpoints = newpoints.concat(tmp)\n  })\n  return fromPoints({ closed: isClosed }, newpoints)\n}\n\nmodule.exports = concat\n", "const concat = require('./concat')\nconst create = require('./create')\n\n/**\n * Append the given list of points to the end of the given geometry.\n * @param {Array} points - the points (2D) to append to the given path\n * @param {path2} geometry - the given path\n * @returns {path2} a new path with the appended points\n * @alias module:modeling/geometries/path2.appendPoints\n * @example\n * let newpath = appendPoints([[3, 4], [4, 5]], oldpath)\n */\nconst appendPoints = (points, geometry) => concat(geometry, create(points))\n\nmodule.exports = appendPoints\n", "const { TAU } = require('../../maths/constants')\nconst vec2 = require('../../maths/vec2')\nconst vec3 = require('../../maths/vec2')\n\nconst appendPoints = require('./appendPoints')\nconst toPoints = require('./toPoints')\n\n/**\n * Append a series of points to the given geometry that represent a Bezier curve.\n * The Bézier curve starts at the last point in the given geometry, and ends at the last control point.\n * The other control points are intermediate control points to transition the curve from start to end points.\n * The first control point may be null to ensure a smooth transition occurs. In this case,\n * the second to last point of the given geometry is mirrored into the control points of the Bezier curve.\n * In other words, the trailing gradient of the geometry matches the new gradient of the curve.\n * @param {Object} options - options for construction\n * @param {Array} options.controlPoints - list of control points (2D) for the bezier curve\n * @param {Number} [options.segment=16] - number of segments per 360 rotation\n * @param {path2} geometry - the path of which to appended points\n * @returns {path2} a new path with the appended points\n * @alias module:modeling/geometries/path2.appendBezier\n *\n * @example\n * let p5 = path2.create({}, [[10,-20]])\n * p5 = path2.appendBezier({controlPoints: [[10,-10],[25,-10],[25,-20]]}, p5);\n * p5 = path2.appendBezier({controlPoints: [null, [25,-30],[40,-30],[40,-20]]}, p5)\n */\nconst appendBezier = (options, geometry) => {\n  const defaults = {\n    segments: 16\n  }\n  let { controlPoints, segments } = Object.assign({}, defaults, options)\n\n  // validate the given options\n  if (!Array.isArray(controlPoints)) throw new Error('controlPoints must be an array of one or more points')\n  if (controlPoints.length < 1) throw new Error('controlPoints must be an array of one or more points')\n\n  if (segments < 4) throw new Error('segments must be four or more')\n\n  // validate the given geometry\n  if (geometry.isClosed) {\n    throw new Error('the given geometry cannot be closed')\n  }\n\n  const points = toPoints(geometry)\n  if (points.length < 1) {\n    throw new Error('the given path must contain one or more points (as the starting point for the bezier curve)')\n  }\n\n  // make a copy of the control points\n  controlPoints = controlPoints.slice()\n\n  // special handling of null control point (only first is allowed)\n  const firstControlPoint = controlPoints[0]\n  if (firstControlPoint === null) {\n    if (controlPoints.length < 2) {\n      throw new Error('a null control point must be passed with one more control points')\n    }\n    // special handling of a previous bezier curve\n    let lastBezierControlPoint = points[points.length - 2]\n    if ('lastBezierControlPoint' in geometry) {\n      lastBezierControlPoint = geometry.lastBezierControlPoint\n    }\n    if (!Array.isArray(lastBezierControlPoint)) {\n      throw new Error('the given path must contain TWO or more points if given a null control point')\n    }\n    // replace the first control point with the mirror of the last bezier control point\n    const controlpoint = vec2.scale(vec2.create(), points[points.length - 1], 2)\n    vec2.subtract(controlpoint, controlpoint, lastBezierControlPoint)\n\n    controlPoints[0] = controlpoint\n  }\n\n  // add a control point for the previous end point\n  controlPoints.unshift(points[points.length - 1])\n\n  const bezierOrder = controlPoints.length - 1\n  const factorials = []\n  let fact = 1\n  for (let i = 0; i <= bezierOrder; ++i) {\n    if (i > 0) fact *= i\n    factorials.push(fact)\n  }\n\n  const binomials = []\n  for (let i = 0; i <= bezierOrder; ++i) {\n    const binomial = factorials[bezierOrder] / (factorials[i] * factorials[bezierOrder - i])\n    binomials.push(binomial)\n  }\n\n  const v0 = vec2.create()\n  const v1 = vec2.create()\n  const v3 = vec3.create()\n  const getPointForT = (t) => {\n    let tk = 1 // = pow(t,k)\n    let oneMinusTNMinusK = Math.pow(1 - t, bezierOrder) // = pow( 1-t, bezierOrder - k)\n    const invOneMinusT = (t !== 1) ? (1 / (1 - t)) : 1\n    const point = vec2.create() // 0, 0, 0\n    for (let k = 0; k <= bezierOrder; ++k) {\n      if (k === bezierOrder) oneMinusTNMinusK = 1\n      const bernsteinCoefficient = binomials[k] * tk * oneMinusTNMinusK\n      const derivativePoint = vec2.scale(v0, controlPoints[k], bernsteinCoefficient)\n      vec2.add(point, point, derivativePoint)\n      tk *= t\n      oneMinusTNMinusK *= invOneMinusT\n    }\n    return point\n  }\n\n  const newpoints = []\n  const newpointsT = []\n  const numsteps = bezierOrder + 1\n  for (let i = 0; i < numsteps; ++i) {\n    const t = i / (numsteps - 1)\n    const point = getPointForT(t)\n    newpoints.push(point)\n    newpointsT.push(t)\n  }\n\n  // subdivide each segment until the angle at each vertex becomes small enough:\n  let subdivideBase = 1\n  const maxangle = TAU / segments\n  const maxsinangle = Math.sin(maxangle)\n  while (subdivideBase < newpoints.length - 1) {\n    const dir1 = vec2.subtract(v0, newpoints[subdivideBase], newpoints[subdivideBase - 1])\n    vec2.normalize(dir1, dir1)\n    const dir2 = vec2.subtract(v1, newpoints[subdivideBase + 1], newpoints[subdivideBase])\n    vec2.normalize(dir2, dir2)\n    const sinangle = vec2.cross(v3, dir1, dir2) // the sine of the angle\n    if (Math.abs(sinangle[2]) > maxsinangle) {\n      // angle is too big, we need to subdivide\n      const t0 = newpointsT[subdivideBase - 1]\n      const t1 = newpointsT[subdivideBase + 1]\n      const newt0 = t0 + (t1 - t0) * 1 / 3\n      const newt1 = t0 + (t1 - t0) * 2 / 3\n      const point0 = getPointForT(newt0)\n      const point1 = getPointForT(newt1)\n      // remove the point at subdivideBase and replace with 2 new points:\n      newpoints.splice(subdivideBase, 1, point0, point1)\n      newpointsT.splice(subdivideBase, 1, newt0, newt1)\n      // re - evaluate the angles, starting at the previous junction since it has changed:\n      subdivideBase--\n      if (subdivideBase < 1) subdivideBase = 1\n    } else {\n      ++subdivideBase\n    }\n  }\n\n  // append to the new points to the given path\n  // but skip the first new point because it is identical to the last point in the given path\n  newpoints.shift()\n  const result = appendPoints(newpoints, geometry)\n  result.lastBezierControlPoint = controlPoints[controlPoints.length - 2]\n  return result\n}\n\nmodule.exports = appendBezier\n", "const vec2 = require('../../maths/vec2')\n\nconst toPoints = require('./toPoints')\n\n/**\n  * Determine if the given paths are equal.\n  * For closed paths, this includes equality under point order rotation.\n  * @param {path2} a - the first path to compare\n  * @param {path2} b - the second path to compare\n  * @returns {Boolean}\n  * @alias module:modeling/geometries/path2.equals\n  */\nconst equals = (a, b) => {\n  if (a.isClosed !== b.isClosed) {\n    return false\n  }\n  if (a.points.length !== b.points.length) {\n    return false\n  }\n\n  const apoints = toPoints(a)\n  const bpoints = toPoints(b)\n\n  // closed paths might be equal under graph rotation\n  // so try comparison by rotating across all points\n  const length = apoints.length\n  let offset = 0\n  do {\n    let unequal = false\n    for (let i = 0; i < length; i++) {\n      if (!vec2.equals(apoints[i], bpoints[(i + offset) % length])) {\n        unequal = true\n        break\n      }\n    }\n    if (unequal === false) {\n      return true\n    }\n    // unequal open paths should only be compared once, never rotated\n    if (!a.isClosed) {\n      return false\n    }\n  } while (++offset < length)\n  return false\n}\n\nmodule.exports = equals\n", "const mat4 = require('../../maths/mat4')\nconst vec2 = require('../../maths/vec2')\n\nconst create = require('./create')\n\n/**\n * Create a new path from the given compact binary data.\n * @param {TypedArray} data - compact binary data\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.fromCompactBinary\n */\nconst fromCompactBinary = (data) => {\n  if (data[0] !== 2) throw new Error('invalid compact binary data')\n\n  const created = create()\n\n  created.transforms = mat4.clone(data.slice(1, 17))\n\n  created.isClosed = !!data[17]\n\n  for (let i = 22; i < data.length; i += 2) {\n    const point = vec2.fromValues(data[i], data[i + 1])\n    created.points.push(point)\n  }\n  // transfer known properties, i.e. color\n  if (data[18] >= 0) {\n    created.color = [data[18], data[19], data[20], data[21]]\n  }\n  // TODO: how about custom properties or fields ?\n  return created\n}\n\nmodule.exports = fromCompactBinary\n", "/**\n * Determine if the given object is a path2 geometry.\n * @param {Object} object - the object to interrogate\n * @returns {Boolean} true if the object matches a path2\n * @alias module:modeling/geometries/path2.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    // see create for the required attributes and types\n    if ('points' in object && 'transforms' in object && 'isClosed' in object) {\n      // NOTE: transforms should be a TypedArray, which has a read-only length\n      if (Array.isArray(object.points) && 'length' in object.transforms) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const clone = require('./clone')\n\n/**\n * Reverses the path so that the points are in the opposite order.\n * This swaps the left (interior) and right (exterior) edges.\n * @param {path2} geometry - the path to reverse\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.reverse\n *\n * @example\n * let newpath = reverse(mypath)\n */\nconst reverse = (geometry) => {\n  // NOTE: this only updates the order of the points\n  const cloned = clone(geometry)\n  cloned.points = geometry.points.slice().reverse()\n  return cloned\n}\n\nmodule.exports = reverse\n", "const vec2 = require('../../maths/vec2')\n\nconst toPoints = require('./toPoints')\n\n/**\n * Create a string representing the contents of the given path.\n * @param {path2} geometry - the path\n * @returns {String} a representative string\n * @alias module:modeling/geometries/path2.toString\n *\n * @example\n * console.out(toString(path))\n */\nconst toString = (geometry) => {\n  const points = toPoints(geometry)\n  let result = 'path (' + points.length + ' points, ' + geometry.isClosed + '):\\n[\\n'\n  points.forEach((point) => {\n    result += '  ' + vec2.toString(point) + ',\\n'\n  })\n  result += ']\\n'\n  return result\n}\n\nmodule.exports = toString\n", "/**\n * Produce a compact binary representation from the given path.\n * @param {path2} geometry - the path geometry\n * @returns {TypedArray} compact binary representation\n * @alias module:modeling/geometries/path2.toCompactBinary\n */\nconst toCompactBinary = (geometry) => {\n  const points = geometry.points\n  const transforms = geometry.transforms\n  let color = [-1, -1, -1, -1]\n  if (geometry.color) color = geometry.color\n\n  // FIXME why Float32Array?\n  const compacted = new Float32Array(1 + 16 + 1 + 4 + (points.length * 2)) // type + transforms + isClosed + color + points data\n\n  compacted[0] = 2 // type code: 0 => geom2, 1 => geom3 , 2 => path2\n\n  compacted[1] = transforms[0]\n  compacted[2] = transforms[1]\n  compacted[3] = transforms[2]\n  compacted[4] = transforms[3]\n  compacted[5] = transforms[4]\n  compacted[6] = transforms[5]\n  compacted[7] = transforms[6]\n  compacted[8] = transforms[7]\n  compacted[9] = transforms[8]\n  compacted[10] = transforms[9]\n  compacted[11] = transforms[10]\n  compacted[12] = transforms[11]\n  compacted[13] = transforms[12]\n  compacted[14] = transforms[13]\n  compacted[15] = transforms[14]\n  compacted[16] = transforms[15]\n\n  compacted[17] = geometry.isClosed ? 1 : 0\n\n  compacted[18] = color[0]\n  compacted[19] = color[1]\n  compacted[20] = color[2]\n  compacted[21] = color[3]\n\n  for (let j = 0; j < points.length; j++) {\n    const ci = j * 2 + 22\n    const point = points[j]\n    compacted[ci] = point[0]\n    compacted[ci + 1] = point[1]\n  }\n  // TODO: how about custom properties or fields ?\n  return compacted\n}\n\nmodule.exports = toCompactBinary\n", "const mat4 = require('../../maths/mat4')\n\n/**\n * Transform the given geometry using the given matrix.\n * This is a lazy transform of the points, as this function only adjusts the transforms.\n * The transforms are applied when accessing the points via toPoints().\n * @param {mat4} matrix - the matrix to transform with\n * @param {path2} geometry - the geometry to transform\n * @returns {path2} a new path\n * @alias module:modeling/geometries/path2.transform\n *\n * @example\n * let newpath = transform(fromZRotation(TAU / 8), path)\n */\nconst transform = (matrix, geometry) => {\n  const transforms = mat4.multiply(mat4.create(), matrix, geometry.transforms)\n  return Object.assign({}, geometry, { transforms })\n}\n\nmodule.exports = transform\n", "const vec2 = require('../../maths/vec2')\nconst isA = require('./isA')\n\n/**\n * Determine if the given object is a valid path2.\n * Checks for valid data points, and duplicate points.\n *\n * **If the geometry is not valid, an exception will be thrown with details of the geometry error.**\n *\n * @param {Object} object - the object to interrogate\n * @throws {Error} error if the geometry is not valid\n * @alias module:modeling/geometries/path2.validate\n */\nconst validate = (object) => {\n  if (!isA(object)) {\n    throw new Error('invalid path2 structure')\n  }\n\n  // check for duplicate points\n  if (object.points.length > 1) {\n    for (let i = 0; i < object.points.length; i++) {\n      if (vec2.equals(object.points[i], object.points[(i + 1) % object.points.length])) {\n        throw new Error(`path2 duplicate points ${object.points[i]}`)\n      }\n    }\n  }\n\n  // check for infinity, nan\n  object.points.forEach((point) => {\n    if (!point.every(Number.isFinite)) {\n      throw new Error(`path2 invalid point ${point}`)\n    }\n  })\n\n  // check transforms\n  if (!object.transforms.every(Number.isFinite)) {\n    throw new Error(`path2 invalid transforms ${object.transforms}`)\n  }\n}\n\nmodule.exports = validate\n", "/**\n * Represents a 2D geometry consisting of a list of ordered points.\n * @see {@link path2} for data structure information.\n * @module modeling/geometries/path2\n *\n * @example\n * colorize([0,0,0,1], path2.fromPoints({ closed: true }, [[0,0], [4,0], [4,3]]))\n *\n * @example\n * {\n *   \"points\": [[0,0], [4,0], [4,3]],\n *   \"isClosed\": true,\n *   \"transforms\": [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],\n *   \"color\": [0,0,0,1]\n * }\n */\nmodule.exports = {\n  appendArc: require('./appendArc'),\n  appendBezier: require('./appendBezier'),\n  appendPoints: require('./appendPoints'),\n  clone: require('./clone'),\n  close: require('./close'),\n  concat: require('./concat'),\n  create: require('./create'),\n  equals: require('./equals'),\n  fromPoints: require('./fromPoints'),\n  fromCompactBinary: require('./fromCompactBinary'),\n  isA: require('./isA'),\n  reverse: require('./reverse'),\n  toPoints: require('./toPoints'),\n  toString: require('./toString'),\n  toCompactBinary: require('./toCompactBinary'),\n  transform: require('./transform'),\n  validate: require('./validate')\n}\n", "const flatten = require('../utils/flatten')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst colorGeom2 = (color, object) => {\n  const newgeom2 = geom2.clone(object)\n  newgeom2.color = color\n  return newgeom2\n}\n\nconst colorGeom3 = (color, object) => {\n  const newgeom3 = geom3.clone(object)\n  newgeom3.color = color\n  return newgeom3\n}\n\nconst colorPath2 = (color, object) => {\n  const newpath2 = path2.clone(object)\n  newpath2.color = color\n  return newpath2\n}\n\nconst colorPoly3 = (color, object) => {\n  const newpoly = poly3.clone(object)\n  newpoly.color = color\n  return newpoly\n}\n\n/**\n * Assign the given color to the given objects.\n * @param {Array} color - RGBA color values, where each value is between 0 and 1.0\n * @param {Object|Array} objects - the objects of which to apply the given color\n * @return {Object|Array} new object, or list of new objects with an additional attribute 'color'\n * @alias module:modeling/colors.colorize\n *\n * @example\n * let redSphere = colorize([1,0,0], sphere()) // red\n * let greenCircle = colorize([0,1,0,0.8], circle()) // green transparent\n * let blueArc = colorize([0,0,1], arc()) // blue\n * let wildcylinder = colorize(colorNameToRgb('fuchsia'), cylinder()) // CSS color\n */\nconst colorize = (color, ...objects) => {\n  if (!Array.isArray(color)) throw new Error('color must be an array')\n  if (color.length < 3) throw new Error('color must contain R, G and B values')\n  if (color.length === 3) color = [color[0], color[1], color[2], 1.0] // add alpha\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (geom2.isA(object)) return colorGeom2(color, object)\n    if (geom3.isA(object)) return colorGeom3(color, object)\n    if (path2.isA(object)) return colorPath2(color, object)\n    if (poly3.isA(object)) return colorPoly3(color, object)\n\n    object.color = color\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = colorize\n", "/**\n * @alias module:modeling/colors.cssColors\n * @see CSS color table from http://www.w3.org/TR/css3-color/\n * @enum {Array}\n * @example\n * let newshape = colorize(cssColors.red, oldshape)\n */\nconst cssColors = {\n  // basic color keywords\n  black: [0 / 255, 0 / 255, 0 / 255],\n  silver: [192 / 255, 192 / 255, 192 / 255],\n  gray: [128 / 255, 128 / 255, 128 / 255],\n  white: [255 / 255, 255 / 255, 255 / 255],\n  maroon: [128 / 255, 0 / 255, 0 / 255],\n  red: [255 / 255, 0 / 255, 0 / 255],\n  purple: [128 / 255, 0 / 255, 128 / 255],\n  fuchsia: [255 / 255, 0 / 255, 255 / 255],\n  green: [0 / 255, 128 / 255, 0 / 255],\n  lime: [0 / 255, 255 / 255, 0 / 255],\n  olive: [128 / 255, 128 / 255, 0 / 255],\n  yellow: [255 / 255, 255 / 255, 0 / 255],\n  navy: [0 / 255, 0 / 255, 128 / 255],\n  blue: [0 / 255, 0 / 255, 255 / 255],\n  teal: [0 / 255, 128 / 255, 128 / 255],\n  aqua: [0 / 255, 255 / 255, 255 / 255],\n  // extended color keywords\n  aliceblue: [240 / 255, 248 / 255, 255 / 255],\n  antiquewhite: [250 / 255, 235 / 255, 215 / 255],\n  // 'aqua': [ 0 / 255, 255 / 255, 255 / 255 ],\n  aquamarine: [127 / 255, 255 / 255, 212 / 255],\n  azure: [240 / 255, 255 / 255, 255 / 255],\n  beige: [245 / 255, 245 / 255, 220 / 255],\n  bisque: [255 / 255, 228 / 255, 196 / 255],\n  // 'black': [ 0 / 255, 0 / 255, 0 / 255 ],\n  blanchedalmond: [255 / 255, 235 / 255, 205 / 255],\n  // 'blue': [ 0 / 255, 0 / 255, 255 / 255 ],\n  blueviolet: [138 / 255, 43 / 255, 226 / 255],\n  brown: [165 / 255, 42 / 255, 42 / 255],\n  burlywood: [222 / 255, 184 / 255, 135 / 255],\n  cadetblue: [95 / 255, 158 / 255, 160 / 255],\n  chartreuse: [127 / 255, 255 / 255, 0 / 255],\n  chocolate: [210 / 255, 105 / 255, 30 / 255],\n  coral: [255 / 255, 127 / 255, 80 / 255],\n  cornflowerblue: [100 / 255, 149 / 255, 237 / 255],\n  cornsilk: [255 / 255, 248 / 255, 220 / 255],\n  crimson: [220 / 255, 20 / 255, 60 / 255],\n  cyan: [0 / 255, 255 / 255, 255 / 255],\n  darkblue: [0 / 255, 0 / 255, 139 / 255],\n  darkcyan: [0 / 255, 139 / 255, 139 / 255],\n  darkgoldenrod: [184 / 255, 134 / 255, 11 / 255],\n  darkgray: [169 / 255, 169 / 255, 169 / 255],\n  darkgreen: [0 / 255, 100 / 255, 0 / 255],\n  darkgrey: [169 / 255, 169 / 255, 169 / 255],\n  darkkhaki: [189 / 255, 183 / 255, 107 / 255],\n  darkmagenta: [139 / 255, 0 / 255, 139 / 255],\n  darkolivegreen: [85 / 255, 107 / 255, 47 / 255],\n  darkorange: [255 / 255, 140 / 255, 0 / 255],\n  darkorchid: [153 / 255, 50 / 255, 204 / 255],\n  darkred: [139 / 255, 0 / 255, 0 / 255],\n  darksalmon: [233 / 255, 150 / 255, 122 / 255],\n  darkseagreen: [143 / 255, 188 / 255, 143 / 255],\n  darkslateblue: [72 / 255, 61 / 255, 139 / 255],\n  darkslategray: [47 / 255, 79 / 255, 79 / 255],\n  darkslategrey: [47 / 255, 79 / 255, 79 / 255],\n  darkturquoise: [0 / 255, 206 / 255, 209 / 255],\n  darkviolet: [148 / 255, 0 / 255, 211 / 255],\n  deeppink: [255 / 255, 20 / 255, 147 / 255],\n  deepskyblue: [0 / 255, 191 / 255, 255 / 255],\n  dimgray: [105 / 255, 105 / 255, 105 / 255],\n  dimgrey: [105 / 255, 105 / 255, 105 / 255],\n  dodgerblue: [30 / 255, 144 / 255, 255 / 255],\n  firebrick: [178 / 255, 34 / 255, 34 / 255],\n  floralwhite: [255 / 255, 250 / 255, 240 / 255],\n  forestgreen: [34 / 255, 139 / 255, 34 / 255],\n  // 'fuchsia': [ 255 / 255, 0 / 255, 255 / 255 ],\n  gainsboro: [220 / 255, 220 / 255, 220 / 255],\n  ghostwhite: [248 / 255, 248 / 255, 255 / 255],\n  gold: [255 / 255, 215 / 255, 0 / 255],\n  goldenrod: [218 / 255, 165 / 255, 32 / 255],\n  // 'gray': [ 128 / 255, 128 / 255, 128 / 255 ],\n  // 'green': [ 0 / 255, 128 / 255, 0 / 255 ],\n  greenyellow: [173 / 255, 255 / 255, 47 / 255],\n  grey: [128 / 255, 128 / 255, 128 / 255],\n  honeydew: [240 / 255, 255 / 255, 240 / 255],\n  hotpink: [255 / 255, 105 / 255, 180 / 255],\n  indianred: [205 / 255, 92 / 255, 92 / 255],\n  indigo: [75 / 255, 0 / 255, 130 / 255],\n  ivory: [255 / 255, 255 / 255, 240 / 255],\n  khaki: [240 / 255, 230 / 255, 140 / 255],\n  lavender: [230 / 255, 230 / 255, 250 / 255],\n  lavenderblush: [255 / 255, 240 / 255, 245 / 255],\n  lawngreen: [124 / 255, 252 / 255, 0 / 255],\n  lemonchiffon: [255 / 255, 250 / 255, 205 / 255],\n  lightblue: [173 / 255, 216 / 255, 230 / 255],\n  lightcoral: [240 / 255, 128 / 255, 128 / 255],\n  lightcyan: [224 / 255, 255 / 255, 255 / 255],\n  lightgoldenrodyellow: [250 / 255, 250 / 255, 210 / 255],\n  lightgray: [211 / 255, 211 / 255, 211 / 255],\n  lightgreen: [144 / 255, 238 / 255, 144 / 255],\n  lightgrey: [211 / 255, 211 / 255, 211 / 255],\n  lightpink: [255 / 255, 182 / 255, 193 / 255],\n  lightsalmon: [255 / 255, 160 / 255, 122 / 255],\n  lightseagreen: [32 / 255, 178 / 255, 170 / 255],\n  lightskyblue: [135 / 255, 206 / 255, 250 / 255],\n  lightslategray: [119 / 255, 136 / 255, 153 / 255],\n  lightslategrey: [119 / 255, 136 / 255, 153 / 255],\n  lightsteelblue: [176 / 255, 196 / 255, 222 / 255],\n  lightyellow: [255 / 255, 255 / 255, 224 / 255],\n  // 'lime': [ 0 / 255, 255 / 255, 0 / 255 ],\n  limegreen: [50 / 255, 205 / 255, 50 / 255],\n  linen: [250 / 255, 240 / 255, 230 / 255],\n  magenta: [255 / 255, 0 / 255, 255 / 255],\n  // 'maroon': [ 128 / 255, 0 / 255, 0 / 255 ],\n  mediumaquamarine: [102 / 255, 205 / 255, 170 / 255],\n  mediumblue: [0 / 255, 0 / 255, 205 / 255],\n  mediumorchid: [186 / 255, 85 / 255, 211 / 255],\n  mediumpurple: [147 / 255, 112 / 255, 219 / 255],\n  mediumseagreen: [60 / 255, 179 / 255, 113 / 255],\n  mediumslateblue: [123 / 255, 104 / 255, 238 / 255],\n  mediumspringgreen: [0 / 255, 250 / 255, 154 / 255],\n  mediumturquoise: [72 / 255, 209 / 255, 204 / 255],\n  mediumvioletred: [199 / 255, 21 / 255, 133 / 255],\n  midnightblue: [25 / 255, 25 / 255, 112 / 255],\n  mintcream: [245 / 255, 255 / 255, 250 / 255],\n  mistyrose: [255 / 255, 228 / 255, 225 / 255],\n  moccasin: [255 / 255, 228 / 255, 181 / 255],\n  navajowhite: [255 / 255, 222 / 255, 173 / 255],\n  // 'navy': [ 0 / 255, 0 / 255, 128 / 255 ],\n  oldlace: [253 / 255, 245 / 255, 230 / 255],\n  // 'olive': [ 128 / 255, 128 / 255, 0 / 255 ],\n  olivedrab: [107 / 255, 142 / 255, 35 / 255],\n  orange: [255 / 255, 165 / 255, 0 / 255],\n  orangered: [255 / 255, 69 / 255, 0 / 255],\n  orchid: [218 / 255, 112 / 255, 214 / 255],\n  palegoldenrod: [238 / 255, 232 / 255, 170 / 255],\n  palegreen: [152 / 255, 251 / 255, 152 / 255],\n  paleturquoise: [175 / 255, 238 / 255, 238 / 255],\n  palevioletred: [219 / 255, 112 / 255, 147 / 255],\n  papayawhip: [255 / 255, 239 / 255, 213 / 255],\n  peachpuff: [255 / 255, 218 / 255, 185 / 255],\n  peru: [205 / 255, 133 / 255, 63 / 255],\n  pink: [255 / 255, 192 / 255, 203 / 255],\n  plum: [221 / 255, 160 / 255, 221 / 255],\n  powderblue: [176 / 255, 224 / 255, 230 / 255],\n  // 'purple': [ 128 / 255, 0 / 255, 128 / 255 ],\n  // 'red': [ 255 / 255, 0 / 255, 0 / 255 ],\n  rosybrown: [188 / 255, 143 / 255, 143 / 255],\n  royalblue: [65 / 255, 105 / 255, 225 / 255],\n  saddlebrown: [139 / 255, 69 / 255, 19 / 255],\n  salmon: [250 / 255, 128 / 255, 114 / 255],\n  sandybrown: [244 / 255, 164 / 255, 96 / 255],\n  seagreen: [46 / 255, 139 / 255, 87 / 255],\n  seashell: [255 / 255, 245 / 255, 238 / 255],\n  sienna: [160 / 255, 82 / 255, 45 / 255],\n  // 'silver': [ 192 / 255, 192 / 255, 192 / 255 ],\n  skyblue: [135 / 255, 206 / 255, 235 / 255],\n  slateblue: [106 / 255, 90 / 255, 205 / 255],\n  slategray: [112 / 255, 128 / 255, 144 / 255],\n  slategrey: [112 / 255, 128 / 255, 144 / 255],\n  snow: [255 / 255, 250 / 255, 250 / 255],\n  springgreen: [0 / 255, 255 / 255, 127 / 255],\n  steelblue: [70 / 255, 130 / 255, 180 / 255],\n  tan: [210 / 255, 180 / 255, 140 / 255],\n  // 'teal': [ 0 / 255, 128 / 255, 128 / 255 ],\n  thistle: [216 / 255, 191 / 255, 216 / 255],\n  tomato: [255 / 255, 99 / 255, 71 / 255],\n  turquoise: [64 / 255, 224 / 255, 208 / 255],\n  violet: [238 / 255, 130 / 255, 238 / 255],\n  wheat: [245 / 255, 222 / 255, 179 / 255],\n  // 'white': [ 255 / 255, 255 / 255, 255 / 255 ],\n  whitesmoke: [245 / 255, 245 / 255, 245 / 255],\n  // 'yellow': [ 255 / 255, 255 / 255, 0 / 255 ],\n  yellowgreen: [154 / 255, 205 / 255, 50 / 255]\n}\n\nmodule.exports = cssColors\n", "const cssColors = require('./cssColors')\n\n/**\n * Converts a CSS color name to RGB color.\n *\n * @param {String} s - the CSS color name\n * @return {Array} the RGB color, or undefined if not found\n * @alias module:modeling/colors.colorNameToRgb\n * @example\n * let mysphere = colorize(colorNameToRgb('lightblue'), sphere())\n */\nconst colorNameToRgb = (s) => cssColors[s.toLowerCase()]\n\nmodule.exports = colorNameToRgb\n", "/**\n * Converts CSS color notations (string of hex values) to RGB values.\n *\n * @see https://www.w3.org/TR/css-color-3/\n * @param {String} notation - color notation\n * @return {Array} RGB color values\n * @alias module:modeling/colors.hexToRgb\n *\n * @example\n * let mysphere = colorize(hexToRgb('#000080'), sphere()) // navy blue\n */\nconst hexToRgb = (notation) => {\n  notation = notation.replace('#', '')\n  if (notation.length < 6) throw new Error('the given notation must contain 3 or more hex values')\n\n  const r = parseInt(notation.substring(0, 2), 16) / 255\n  const g = parseInt(notation.substring(2, 4), 16) / 255\n  const b = parseInt(notation.substring(4, 6), 16) / 255\n  if (notation.length >= 8) {\n    const a = parseInt(notation.substring(6, 8), 16) / 255\n    return [r, g, b, a]\n  }\n  return [r, g, b]\n}\n\nmodule.exports = hexToRgb\n", "/**\n * Convert hue values to a color component (ie one of r, g, b)\n * @param  {Number} p\n * @param  {Number} q\n * @param  {Number} t\n * @return {Number} color component\n * @alias module:modeling/colors.hueToColorComponent\n */\nconst hueToColorComponent = (p, q, t) => {\n  if (t < 0) t += 1\n  if (t > 1) t -= 1\n  if (t < 1 / 6) return p + (q - p) * 6 * t\n  if (t < 1 / 2) return q\n  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6\n  return p\n}\n\nmodule.exports = hueToColorComponent\n", "const flatten = require('../utils/flatten')\n\nconst hueToColorComponent = require('./hueToColorComponent')\n\n/**\n * Converts HSL color values to RGB color values.\n *\n * @see http://en.wikipedia.org/wiki/HSL_color_space\n * @param {...Number|Array} values - HSL or HSLA color values\n * @return {Array} RGB or RGBA color values\n * @alias module:modeling/colors.hslToRgb\n *\n * @example\n * let mysphere = colorize(hslToRgb([0.9166666666666666, 1, 0.5]), sphere())\n */\nconst hslToRgb = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain H, S and L values')\n\n  const h = values[0]\n  const s = values[1]\n  const l = values[2]\n\n  let r = l // default is achromatic\n  let g = l\n  let b = l\n\n  if (s !== 0) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s\n    const p = 2 * l - q\n    r = hueToColorComponent(p, q, h + 1 / 3)\n    g = hueToColorComponent(p, q, h)\n    b = hueToColorComponent(p, q, h - 1 / 3)\n  }\n\n  if (values.length > 3) {\n    // add alpha value if provided\n    const a = values[3]\n    return [r, g, b, a]\n  }\n  return [r, g, b]\n}\n\nmodule.exports = hslToRgb\n", "const flatten = require('../utils/flatten')\n\n/**\n * Converts HSV color values to RGB color values.\n *\n * @see http://en.wikipedia.org/wiki/HSV_color_space.\n * @param {...Number|Array} values - HSV or HSVA color values\n * @return {Array} RGB or RGBA color values\n * @alias module:modeling/colors.hsvToRgb\n *\n * @example\n * let mysphere = colorize(hsvToRgb([0.9166666666666666, 1, 1]), sphere())\n */\nconst hsvToRgb = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain H, S and V values')\n\n  const h = values[0]\n  const s = values[1]\n  const v = values[2]\n\n  let r = 0\n  let g = 0\n  let b = 0\n\n  const i = Math.floor(h * 6)\n  const f = h * 6 - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n\n  switch (i % 6) {\n    case 0:\n      r = v\n      g = t\n      b = p\n      break\n    case 1:\n      r = q\n      g = v\n      b = p\n      break\n    case 2:\n      r = p\n      g = v\n      b = t\n      break\n    case 3:\n      r = p\n      g = q\n      b = v\n      break\n    case 4:\n      r = t\n      g = p\n      b = v\n      break\n    case 5:\n      r = v\n      g = p\n      b = q\n      break\n  }\n\n  if (values.length > 3) {\n    // add alpha value if provided\n    const a = values[3]\n    return [r, g, b, a]\n  }\n  return [r, g, b]\n}\n\nmodule.exports = hsvToRgb\n", "const flatten = require('../utils/flatten')\n\n/**\n * Convert the given RGB color values to CSS color notation (string)\n * @see https://www.w3.org/TR/css-color-3/\n * @param {...Number|Array} values - RGB or RGBA color values\n * @return {String} CSS color notation\n * @alias module:modeling/colors.rgbToHex\n */\nconst rgbToHex = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain R, G and B values')\n\n  const r = values[0] * 255\n  const g = values[1] * 255\n  const b = values[2] * 255\n\n  let s = `#${Number(0x1000000 + r * 0x10000 + g * 0x100 + b).toString(16).substring(1, 7)}`\n\n  if (values.length > 3) {\n    // convert alpha to opacity\n    s = s + Number(values[3] * 255).toString(16)\n  }\n  return s\n}\n\nmodule.exports = rgbToHex\n", "const flatten = require('../utils/flatten')\n\n/**\n * Converts an RGB color value to HSL.\n *\n * @see http://en.wikipedia.org/wiki/HSL_color_space.\n * @see http://axonflux.com/handy-rgb-to-hsl-and-rgb-to-hsv-color-model-c\n * @param {...Number|Array} values - RGB or RGBA color values\n * @return {Array} HSL or HSLA color values\n * @alias module:modeling/colors.rgbToHsl\n */\nconst rgbToHsl = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain R, G and B values')\n\n  const r = values[0]\n  const g = values[1]\n  const b = values[2]\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  let s\n  const l = (max + min) / 2\n\n  if (max === min) {\n    h = s = 0 // achromatic\n  } else {\n    const d = max - min\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min)\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n\n  if (values.length > 3) {\n    // add alpha value if provided\n    const a = values[3]\n    return [h, s, l, a]\n  }\n  return [h, s, l]\n}\n\nmodule.exports = rgbToHsl\n", "const flatten = require('../utils/flatten')\n\n/**\n * Converts an RGB color value to HSV.\n *\n * @see http://en.wikipedia.org/wiki/HSV_color_space.\n * @param {...Number|Array} values - RGB or RGBA color values\n * @return {Array} HSV or HSVA color values\n * @alias module:modeling/colors.rgbToHsv\n */\nconst rgbToHsv = (...values) => {\n  values = flatten(values)\n  if (values.length < 3) throw new Error('values must contain R, G and B values')\n\n  const r = values[0]\n  const g = values[1]\n  const b = values[2]\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n    }\n    h /= 6\n  }\n\n  if (values.length > 3) {\n    // add alpha if provided\n    const a = values[3]\n    return [h, s, v, a]\n  }\n  return [h, s, v]\n}\n\nmodule.exports = rgbToHsv\n", "/**\n * All shapes (primitives or the results of operations) can be assigned a color (RGBA).\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/colors\n * @example\n * const { colorize, hexToRgb } = require('@jscad/modeling').colors\n */\nmodule.exports = {\n  colorize: require('./colorize'),\n  colorNameToRgb: require('./colorNameToRgb'),\n  cssColors: require('./cssColors'),\n  hexToRgb: require('./hexToRgb'),\n  hslToRgb: require('./hslToRgb'),\n  hsvToRgb: require('./hsvToRgb'),\n  hueToColorComponent: require('./hueToColorComponent'),\n  rgbToHex: require('./rgbToHex'),\n  rgbToHsl: require('./rgbToHsl'),\n  rgbToHsv: require('./rgbToHsv')\n}\n", "/**\n * Represents a bezier easing function.\n * @typedef {Object} bezier\n * @property {Array} points - The control points for the bezier curve. The first and last point will also be the start and end of the curve\n * @property {string} pointType - A reference to the type and dimensionality of the points that the curve was created from\n * @property {number} dimensions - The dimensionality of the bezier\n * @property {Array} permutations - A pre-calculation of the bezier algorithm's co-efficients\n * @property {Array} tangentPermutations - A pre-calculation of the bezier algorithm's tangent co-efficients\n *\n */\n\n/**\n * Creates an object representing a bezier easing curve.\n * Curves can have both an arbitrary number of control points, and an arbitrary number of dimensions.\n *\n * @example\n * const b = bezier.create([0,10]) // a linear progression from 0 to 10\n * const b = bezier.create([0, 0, 10, 10]) // a symmetrical cubic easing curve that starts slowly and ends slowly from 0 to 10\n * const b = bezier.create([0,0,0], [0,5,10], [10,0,-5], [10,10,10]]) // a cubic 3 dimensional easing curve that can generate position arrays for modelling\n * // Usage\n * let position = bezier.valueAt(t,b) // where 0 < t < 1\n * let tangent = bezier.tangentAt(t,b) // where 0 < t < 1\n *\n * @param {Array} points An array with at least 2 elements of either all numbers, or all arrays of numbers that are the same size.\n * @returns {bezier} a new bezier data object\n * @alias module:modeling/curves/bezier.create\n */\nconst create = (points) => {\n  if (!Array.isArray(points)) throw new Error('Bezier points must be a valid array/')\n  if (points.length < 2) throw new Error('Bezier points must contain at least 2 values.')\n  const pointType = getPointType(points)\n\n  return {\n    points: points,\n    pointType: pointType,\n    dimensions: pointType === 'float_single' ? 0 : points[0].length,\n    permutations: getPermutations(points.length - 1),\n    tangentPermutations: getPermutations(points.length - 2)\n  }\n}\n\nconst getPointType = function (points) {\n  let firstPointType = null\n  points.forEach((point) => {\n    let pType = ''\n    if (Number.isFinite(point)) {\n      pType = 'float_single'\n    } else if (Array.isArray(point)) {\n      point.forEach((val) => {\n        if (!Number.isFinite(val)) throw new Error('Bezier point values must all be numbers.')\n      })\n      pType = 'float_' + point.length\n    } else throw new Error('Bezier points must all be numbers or arrays of number.')\n    if (firstPointType == null) {\n      firstPointType = pType\n    } else {\n      if (firstPointType !== pType) {\n        throw new Error('Bezier points must be either all numbers or all arrays of numbers of the same size.')\n      }\n    }\n  })\n  return firstPointType\n}\n\nconst getPermutations = function (c) {\n  const permutations = []\n  for (let i = 0; i <= c; i++) {\n    permutations.push(factorial(c) / (factorial(i) * factorial(c - i)))\n  }\n  return permutations\n}\n\nconst factorial = function (b) {\n  let out = 1\n  for (let i = 2; i <= b; i++) {\n    out *= i\n  }\n  return out\n}\n\nmodule.exports = create\n", "/**\n * Calculates the value at a specific position along a bezier easing curve.\n * For multidimensional curves, the tangent is the slope of each dimension at that point.\n * See the example called extrudeAlongPath.js to see this in use.\n * Math and explanation comes from {@link https://www.freecodecamp.org/news/nerding-out-with-bezier-curves-6e3c0bc48e2f/}\n *\n * @example\n * const b = bezier.create([0,0,0], [0,5,10], [10,0,-5], [10,10,10]]) // a cubic 3 dimensional easing curve that can generate position arrays for modelling\n * let position = bezier.valueAt(t,b) // where 0 < t < 1\n *\n * @param {number} t : the position of which to calculate the value; 0 < t < 1\n * @param {Object} bezier : a bezier curve created with bezier.create().\n * @returns {array | number} the value at the requested position.\n * @alias module:modeling/curves/bezier.valueAt\n */\nconst valueAt = (t, bezier) => {\n  if (t < 0 || t > 1) {\n    throw new Error('Bezier valueAt() input must be between 0 and 1')\n  }\n  if (bezier.pointType === 'float_single') {\n    return bezierFunction(bezier, bezier.points, t)\n  } else {\n    const result = []\n    for (let i = 0; i < bezier.dimensions; i++) {\n      const singleDimensionPoints = []\n      for (let j = 0; j < bezier.points.length; j++) {\n        singleDimensionPoints.push(bezier.points[j][i])\n      }\n      result.push(bezierFunction(bezier, singleDimensionPoints, t))\n    }\n    return result\n  }\n}\n\nconst bezierFunction = function (bezier, p, t) {\n  const n = p.length - 1\n  let result = 0\n  for (let i = 0; i <= n; i++) {\n    result += bezier.permutations[i] * Math.pow(1 - t, n - i) * Math.pow(t, i) * p[i]\n  }\n  return result\n}\n\nmodule.exports = valueAt\n", "/**\n * Calculates the tangent at a specific position along a bezier easing curve.\n * For multidimensional curves, the tangent is the slope of each dimension at that point.\n * See the example called extrudeAlongPath.js\n *\n * @example\n * const b = bezier.create([[0,0,0], [0,5,10], [10,0,-5], [10,10,10]]) // a cubic 3 dimensional easing curve that can generate position arrays for modelling\n * let tangent = bezier.tangentAt(t, b)\n *\n * @param {number} t : the position of which to calculate the bezier's tangent value; 0 < t < 1\n * @param {Object} bezier : an array with at least 2 elements of either all numbers, or all arrays of numbers that are the same size.\n * @return {array | number} the tangent at the requested position.\n * @alias module:modeling/curves/bezier.tangentAt\n */\nconst tangentAt = (t, bezier) => {\n  if (t < 0 || t > 1) {\n    throw new Error('Bezier tangentAt() input must be between 0 and 1')\n  }\n  if (bezier.pointType === 'float_single') {\n    return bezierTangent(bezier, bezier.points, t)\n  } else {\n    const result = []\n    for (let i = 0; i < bezier.dimensions; i++) {\n      const singleDimensionPoints = []\n      for (let j = 0; j < bezier.points.length; j++) {\n        singleDimensionPoints.push(bezier.points[j][i])\n      }\n      result.push(bezierTangent(bezier, singleDimensionPoints, t))\n    }\n    return result\n  }\n}\n\nconst bezierTangent = function (bezier, p, t) {\n  // from https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/Bezier/bezier-der.html\n  const n = p.length - 1\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    const q = n * (p[i + 1] - p[i])\n    result += bezier.tangentPermutations[i] * Math.pow(1 - t, n - 1 - i) * Math.pow(t, i) * q\n  }\n  return result\n}\n\nmodule.exports = tangentAt\n", "/**\n * Represents a bezier easing function.\n * @see {@link bezier} for data structure information.\n * @module modeling/curves/bezier\n */\nmodule.exports = {\n  create: require('./create'),\n  valueAt: require('./valueAt'),\n  tangentAt: require('./tangentAt')\n}\n", "/**\n * Curves are n-dimensional mathematical constructs that define a path from point 0 to point 1.\n * @module modeling/curves\n * @example\n * const { bezier } = require('@jscad/modeling').curves\n\n */\nmodule.exports = {\n  bezier: require('./bezier')\n}\n", "/**\n * Calculate the area under the given points.\n * @param {Array} points - list of 2D points\n * @return {Number} area under the given points\n * @alias module:modeling/maths/utils.area\n */\nconst area = (points) => {\n  let area = 0\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length\n    area += points[i][0] * points[j][1]\n    area -= points[j][0] * points[i][1]\n  }\n  return (area / 2.0)\n}\n\nmodule.exports = area\n", "/**\n * Measure the area under the given polygon.\n *\n * @param {poly2} polygon - the polygon to measure\n * @return {Number} the area of the polygon\n * @alias module:modeling/geometries/poly2.measureArea\n */\nconst area = require('../../maths/utils/area')\n\nconst measureArea = (polygon) => area(polygon.vertices)\n\nmodule.exports = measureArea\n", "/**\n * Represents a convex 2D polygon consisting of a list of ordered vertices.\n * @typedef {Object} poly2\n * @property {Array} vertices - list of ordered vertices (2D)\n */\n\n/**\n * Creates a new polygon with initial values.\n *\n * @param {Array} [vertices] - list of vertices (2D)\n * @returns {poly2} a new polygon\n * @alias module:modeling/geometries/poly2.create\n *\n * @example\n * let polygon = create()\n */\nconst create = (vertices) => {\n  if (vertices === undefined || vertices.length < 3) {\n    vertices = [] // empty contents\n  }\n  return { vertices: vertices }\n}\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Flip the give polygon, rotating the opposite direction.\n *\n * @param {poly2} polygon - the polygon to flip\n * @returns {poly2} a new polygon\n * @alias module:modeling/geometries/poly2.flip\n */\nconst flip = (polygon) => {\n  const vertices = polygon.vertices.slice().reverse()\n  return create(vertices)\n}\n\nmodule.exports = flip\n", "const measureArea = require('./measureArea')\nconst flip = require('./flip')\n\n/**\n * Determine if the given points are inside the given polygon.\n *\n * @param {Array} points - a list of points, where each point is an array with X and Y values\n * @param {poly2} polygon - a 2D polygon\n * @return {Integer} 1 if all points are inside, 0 if some or none are inside\n * @alias module:modeling/geometries/poly2.arePointsInside\n */\nconst arePointsInside = (points, polygon) => {\n  if (points.length === 0) return 0 // nothing to check\n\n  const vertices = polygon.vertices\n  if (vertices.length < 3) return 0 // nothing can be inside an empty polygon\n\n  if (measureArea(polygon) < 0) {\n    polygon = flip(polygon) // CCW is required\n  }\n\n  const sum = points.reduce((acc, point) => acc + isPointInside(point, vertices), 0)\n  return sum === points.length ? 1 : 0\n}\n\n/*\n * Determine if the given point is inside the polygon.\n *\n * @see http://erich.realtimerendering.com/ptinpoly/ (Crossings Test)\n * @param {Array} point - an array with X and Y values\n * @param {Array} polygon - a list of points, where each point is an array with X and Y values\n * @return {Integer} 1 if the point is inside, 0 if outside\n */\nconst isPointInside = (point, polygon) => {\n  const numverts = polygon.length\n\n  const tx = point[0]\n  const ty = point[1]\n\n  let vtx0 = polygon[numverts - 1]\n  let vtx1 = polygon[0]\n\n  let yflag0 = (vtx0[1] > ty)\n\n  let insideFlag = 0\n\n  let i = 0\n  for (let j = (numverts + 1); --j;) {\n    /*\n     * check if Y endpoints straddle (are on opposite sides) of point's Y\n     * if so, +X ray could intersect this edge.\n     */\n    const yflag1 = (vtx1[1] > ty)\n    if (yflag0 !== yflag1) {\n      /*\n       * check if X endpoints are on same side of the point's X\n       * if so, it's easy to test if edge hits or misses.\n       */\n      const xflag0 = (vtx0[0] > tx)\n      const xflag1 = (vtx1[0] > tx)\n      if (xflag0 && xflag1) {\n        /* if edge's X values are both right of the point, then the point must be inside */\n        insideFlag = !insideFlag\n      } else {\n        /*\n         * if X endpoints straddle the point, then\n         * the compute intersection of polygon edge with +X ray\n         * if intersection >= point's X then the +X ray hits it.\n         */\n        if ((vtx1[0] - (vtx1[1] - ty) * (vtx0[0] - vtx1[0]) / (vtx0[1] - vtx1[1])) >= tx) {\n          insideFlag = !insideFlag\n        }\n      }\n    }\n    /* move to next pair of vertices, retaining info as possible */\n    yflag0 = yflag1\n    vtx0 = vtx1\n    vtx1 = polygon[++i]\n  }\n  return insideFlag\n}\n\n/*\n * > 0 : p2 is left of the line p0 -> p1\n * = 0 : p2 is on the line p0 -> p1\n * < 0 : p2 is right of the line p0 -> p1\n */\nconst isLeft = (p0, p1, p2) => (p1[0] - p0[0]) * (p2[1] - p0[1]) - (p2[0] - p0[0]) * (p1[1] - p0[1])\n\nmodule.exports = arePointsInside\n", "/**\n * Represents a 2D polygon consisting of a list of ordered vertices.\n * @see {@link poly2} for data structure information.\n * @module modeling/geometries/poly2\n *\n * @example\n * poly2.create([[0,0], [4,0], [4,3]])\n *\n * @example\n * {\"vertices\": [[0,0], [4,0], [4,3]]}\n */\nmodule.exports = {\n  arePointsInside: require('./arePointsInside'),\n  create: require('./create'),\n  flip: require('./flip'),\n  measureArea: require('./measureArea')\n}\n", "/**\n * Geometries are objects that represent the contents of primitives or the results of operations.\n * Note: Geometries are considered immutable, so never change the contents directly.\n *\n * @see {@link geom2} - 2D geometry consisting of sides\n * @see {@link geom3} - 3D geometry consisting of polygons\n * @see {@link path2} - 2D geometry consisting of ordered points\n * @see {@link poly2} - 2D polygon consisting of ordered vertices\n * @see {@link poly3} - 3D polygon consisting of ordered vertices\n *\n * @module modeling/geometries\n * @example\n * const { geom2, geom3, path2, poly2, poly3 } = require('@jscad/modeling').geometries\n */\nmodule.exports = {\n  geom2: require('./geom2'),\n  geom3: require('./geom3'),\n  path2: require('./path2'),\n  poly2: require('./poly2'),\n  poly3: require('./poly3')\n}\n", "/**\n * Represents a unbounded line in 2D space, positioned at a point of origin.\n * A line is parametrized by a normal vector (perpendicular to the line, rotated 90 degrees counter clockwise) and\n * distance from the origin.\n *\n * Equation: A Point (P) is on Line (L) if dot(L.normal, P) == L.distance\n *\n * The contents of the array are a normal [0,1] and a distance [2].\n * @typedef {Array} line2\n */\n\n/**\n * Create a line, positioned at 0,0, and running along the X axis.\n *\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.create\n */\nconst create = () => [0, 1, 0] // normal and distance\n\nmodule.exports = create\n", "const create = require('./create')\n\n/**\n * Create a clone of the given line.\n *\n * @param {line2} line - line to clone\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.clone\n */\nconst clone = (line) => {\n  const out = create()\n  out[0] = line[0]\n  out[1] = line[1]\n  out[2] = line[2]\n  return out\n}\n\nmodule.exports = clone\n", "const vec2 = require('../vec2')\n\n/**\n * Return the direction of the given line.\n *\n * @param {line2} line - line of reference\n * @return {vec2} a vector in the direction of the line\n * @alias module:modeling/maths/line2.direction\n */\nconst direction = (line) => {\n  const vector = vec2.normal(vec2.create(), line)\n  vec2.negate(vector, vector)\n  return vector\n}\n\nmodule.exports = direction\n", "const vec2 = require('../vec2')\n\n/**\n * Return the origin of the given line.\n *\n * @param {line2} line - line of reference\n * @return {vec2} the origin of the line\n * @alias module:modeling/maths/line2.origin\n */\nconst origin = (line) => vec2.scale(vec2.create(), line, line[2])\n\nmodule.exports = origin\n", "const vec2 = require('../vec2')\n\nconst direction = require('./direction')\nconst origin = require('./origin')\n\n/**\n * Determine the closest point on the given line to the given point.\n *\n * @param {line2} line - line of reference\n * @param {vec2} point - point of reference\n * @returns {vec2} closest point\n * @alias module:modeling/maths/line2.closestPoint\n */\nconst closestPoint = (line, point) => {\n  // linear function of AB\n  const a = origin(line)\n  const b = direction(line)\n  const m1 = (b[1] - a[1]) / (b[0] - a[0])\n  const t1 = a[1] - m1 * a[0]\n  // linear function of PC\n  const m2 = -1 / m1 // perpendicular\n  const t2 = point[1] - m2 * point[0]\n  // c.x * m1 + t1 === c.x * m2 + t2\n  const x = (t2 - t1) / (m1 - m2)\n  const y = m1 * x + t1\n\n  const closest = vec2.fromValues(x, y)\n  return closest\n}\n\nmodule.exports = closestPoint\n", "/**\n * Copy the given line to the receiving line.\n *\n * @param {line2} out - receiving line\n * @param {line2} line - line to copy\n * @returns {line2} out\n * @alias module:modeling/maths/line2.copy\n */\nconst copy = (out, line) => {\n  out[0] = line[0]\n  out[1] = line[1]\n  out[2] = line[2]\n  return out\n}\n\nmodule.exports = copy\n", "const vec2 = require('../vec2')\n\n/**\n * Calculate the distance (positive) between the given point and line.\n *\n * @param {line2} line - line of reference\n * @param {vec2} point - point of reference\n * @return {Number} distance between line and point\n * @alias module:modeling/maths/line2.distanceToPoint\n */\nconst distanceToPoint = (line, point) => {\n  let distance = vec2.dot(point, line)\n  distance = Math.abs(distance - line[2])\n  return distance\n}\n\nmodule.exports = distanceToPoint\n", "/**\n * Compare the given lines for equality.\n *\n * @param {line2} line1 - first line to compare\n * @param {line2} line2 - second line to compare\n * @return {Boolean} true if lines are equal\n * @alias module:modeling/maths/line2.equals\n */\nconst equals = (line1, line2) => (line1[0] === line2[0]) && (line1[1] === line2[1] && (line1[2] === line2[2]))\n\nmodule.exports = equals\n", "const vec2 = require('../vec2')\n\n/**\n * Create a new line that passes through the given points.\n *\n * @param {line2} out - receiving line\n * @param {vec2} point1 - start point of the line\n * @param {vec2} point2 - end point of the line\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.fromPoints\n */\nconst fromPoints = (out, point1, point2) => {\n  const vector = vec2.subtract(vec2.create(), point2, point1) // directional vector\n\n  vec2.normal(vector, vector)\n  vec2.normalize(vector, vector) // normalized\n\n  const distance = vec2.dot(point1, vector)\n\n  out[0] = vector[0]\n  out[1] = vector[1]\n  out[2] = distance\n  return out\n}\n\nmodule.exports = fromPoints\n", "const create = require('./create')\n\n/**\n * Creates a new line initialized with the given values.\n *\n * @param {Number} x - X coordinate of the unit normal\n * @param {Number} y - Y coordinate of the unit normal\n * @param {Number} d - distance of the line from [0,0]\n * @returns {line2} a new unbounded line\n * @alias module:modeling/maths/line2.fromValues\n */\nconst fromValues = (x, y, d) => {\n  const out = create()\n  out[0] = x\n  out[1] = y\n  out[2] = d\n  return out\n}\n\nmodule.exports = fromValues\n", "const { NEPS } = require('../constants')\n\n/**\n * Compare two normals (unit vectors) for near equality.\n * @param {vec3} a - normal a\n * @param {vec3} b - normal b\n * @returns {Boolean} true if a and b are nearly equal\n * @alias module:modeling/maths/utils.aboutEqualNormals\n */\nconst aboutEqualNormals = (a, b) => (Math.abs(a[0] - b[0]) <= NEPS && Math.abs(a[1] - b[1]) <= NEPS && Math.abs(a[2] - b[2]) <= NEPS)\n\nmodule.exports = aboutEqualNormals\n", "/**\n * Get the X coordinate of a point with a certain Y coordinate, interpolated between two points.\n * Interpolation is robust even if the points have the same Y coordinate\n * @param {vec2} point1\n * @param {vec2} point2\n * @param {Number} y\n * @return {Array} X and Y of interpolated point\n * @alias module:modeling/maths/utils.interpolateBetween2DPointsForY\n */\nconst interpolateBetween2DPointsForY = (point1, point2, y) => {\n  let f1 = y - point1[1]\n  let f2 = point2[1] - point1[1]\n  if (f2 < 0) {\n    f1 = -f1\n    f2 = -f2\n  }\n  let t\n  if (f1 <= 0) {\n    t = 0.0\n  } else if (f1 >= f2) {\n    t = 1.0\n  } else if (f2 < 1e-10) { // FIXME Should this be EPS?\n    t = 0.5\n  } else {\n    t = f1 / f2\n  }\n  const result = point1[0] + t * (point2[0] - point1[0])\n  return result\n}\n\nmodule.exports = interpolateBetween2DPointsForY\n", "/**\n * Calculate the intersect point of the two line segments (p1-p2 and p3-p4), end points included.\n * Note: If the line segments do NOT intersect then undefined is returned.\n * @see http://paulbourke.net/geometry/pointlineplane/\n * @param {vec2} p1 - first point of first line segment\n * @param {vec2} p2 - second point of first line segment\n * @param {vec2} p3 - first point of second line segment\n * @param {vec2} p4 - second point of second line segment\n * @returns {vec2} intersection point of the two line segments, or undefined\n * @alias module:modeling/maths/utils.intersect\n */\nconst intersect = (p1, p2, p3, p4) => {\n  // Check if none of the lines are of length 0\n  if ((p1[0] === p2[0] && p1[1] === p2[1]) || (p3[0] === p4[0] && p3[1] === p4[1])) {\n    return undefined\n  }\n\n  const denominator = ((p4[1] - p3[1]) * (p2[0] - p1[0]) - (p4[0] - p3[0]) * (p2[1] - p1[1]))\n\n  // Lines are parallel\n  if (Math.abs(denominator) < Number.MIN_VALUE) {\n    return undefined\n  }\n\n  const ua = ((p4[0] - p3[0]) * (p1[1] - p3[1]) - (p4[1] - p3[1]) * (p1[0] - p3[0])) / denominator\n  const ub = ((p2[0] - p1[0]) * (p1[1] - p3[1]) - (p2[1] - p1[1]) * (p1[0] - p3[0])) / denominator\n\n  // is the intersection along the segments\n  if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n    return undefined\n  }\n\n  // Return the x and y coordinates of the intersection\n  const x = p1[0] + ua * (p2[0] - p1[0])\n  const y = p1[1] + ua * (p2[1] - p1[1])\n\n  return [x, y]\n}\n\nmodule.exports = intersect\n", "const solve2Linear = (a, b, c, d, u, v) => {\n  const det = a * d - b * c\n  const invdet = 1.0 / det\n  let x = u * d - b * v\n  let y = -u * c + a * v\n  x *= invdet\n  y *= invdet\n  return [x, y]\n}\n\nmodule.exports = solve2Linear\n", "/**\n * Utility functions for maths.\n * @module modeling/maths/utils\n * @example\n * const { area, solve2Linear } = require('@jscad/maths').utils\n */\nmodule.exports = {\n  aboutEqualNormals: require('./aboutEqualNormals'),\n  area: require('./area'),\n  cos: require('./trigonometry').cos,\n  interpolateBetween2DPointsForY: require('./interpolateBetween2DPointsForY'),\n  intersect: require('./intersect'),\n  sin: require('./trigonometry').sin,\n  solve2Linear: require('./solve2Linear')\n}\n", "const vec2 = require('../vec2')\nconst { solve2Linear } = require('../utils')\n\n/**\n * Return the point of intersection between the given lines.\n *\n * NOTES:\n * The point will have Infinity values if the lines are parallel.\n * The point will have NaN values if the lines are the same.\n *\n * @param {line2} line1 - line of reference\n * @param {line2} line2 - line of reference\n * @return {vec2} the point of intersection\n * @alias module:modeling/maths/line2.intersectPointOfLines\n */\nconst intersectToLine = (line1, line2) => {\n  const point = solve2Linear(line1[0], line1[1], line2[0], line2[1], line1[2], line2[2])\n  return vec2.clone(point)\n}\n\nmodule.exports = intersectToLine\n", "const vec2 = require('../vec2')\n\nconst copy = require('./copy')\nconst fromValues = require('./fromValues')\n\n/**\n * Create a new line in the opposite direction as the given.\n *\n * @param {line2} out - receiving line\n * @param {line2} line - line to reverse\n * @returns {line2} out\n * @alias module:modeling/maths/line2.reverse\n */\nconst reverse = (out, line) => {\n  const normal = vec2.negate(vec2.create(), line)\n  const distance = -line[2]\n  return copy(out, fromValues(normal[0], normal[1], distance))\n}\n\nmodule.exports = reverse\n", "/**\n * Return a string representing the given line.\n *\n * @param {line2} line - line of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/line2.toString\n */\nconst toString = (line) => `line2: (${line[0].toFixed(7)}, ${line[1].toFixed(7)}, ${line[2].toFixed(7)})`\n\nmodule.exports = toString\n", "const vec2 = require('../vec2')\n\nconst fromPoints = require('./fromPoints')\nconst origin = require('./origin')\nconst direction = require('./direction')\n\n/**\n * Transforms the given line using the given matrix.\n *\n * @param {line2} out - receiving line\n * @param {line2} line - line to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {line2} out\n * @alias module:modeling/maths/line2.transform\n */\nconst transform = (out, line, matrix) => {\n  const org = origin(line)\n  const dir = direction(line)\n\n  vec2.transform(org, org, matrix)\n  vec2.transform(dir, dir, matrix)\n\n  return fromPoints(out, org, dir)\n}\n\nmodule.exports = transform\n", "const origin = require('./origin')\n\n/**\n * Determine the X coordinate of the given line at the Y coordinate.\n *\n * The X coordinate will be Infinity if the line is parallel to the X axis.\n *\n * @param {line2} line - line of reference\n * @param {Number} y - Y coordinate on the line\n * @return {Number} the X coordinate on the line\n * @alias module:modeling/maths/line2.xAtY\n */\nconst xAtY = (line, y) => {\n  let x = (line[2] - (line[1] * y)) / line[0]\n  if (Number.isNaN(x)) {\n    const org = origin(line)\n    x = org[0]\n  }\n  return x\n}\n\nmodule.exports = xAtY\n", "/**\n * Represents a unbounded line in 2D space, positioned at a point of origin.\n * @see {@link line2} for data structure information.\n * @module modeling/maths/line2\n */\nmodule.exports = {\n  clone: require('./clone'),\n  closestPoint: require('./closestPoint'),\n  copy: require('./copy'),\n  create: require('./create'),\n  direction: require('./direction'),\n  distanceToPoint: require('./distanceToPoint'),\n  equals: require('./equals'),\n  fromPoints: require('./fromPoints'),\n  fromValues: require('./fromValues'),\n  intersectPointOfLines: require('./intersectPointOfLines'),\n  origin: require('./origin'),\n  reverse: require('./reverse'),\n  toString: require('./toString'),\n  transform: require('./transform'),\n  xAtY: require('./xAtY')\n}\n", "const vec3 = require('../vec3')\n\n/**\n * Represents a unbounded line in 3D space, positioned at a point of origin.\n * A line is parametrized by a point of origin and a directional vector.\n *\n * The array contents are two 3D vectors; origin [0,0,0] and directional vector [0,0,1].\n * @see https://en.wikipedia.org/wiki/Hesse_normal_form\n * @typedef {Array} line3\n */\n\n/**\n * Create a line, positioned at 0,0,0 and lying on the X axis.\n *\n * @returns {line3} a new unbounded line\n * @alias module:modeling/maths/line3.create\n */\nconst create = () => [\n  vec3.fromValues(0, 0, 0), // origin\n  vec3.fromValues(0, 0, 1) // direction\n]\n\nmodule.exports = create\n", "const vec3 = require('../vec3')\n\nconst create = require('./create')\n\n/**\n * Create a clone of the given line.\n *\n * @param {line3} line - line to clone\n * @returns {line3} a new unbounded line\n * @alias module:modeling/maths/line3.clone\n */\nconst clone = (line) => {\n  const out = create()\n  vec3.copy(out[0], line[0])\n  vec3.copy(out[1], line[1])\n  return out\n}\n\nmodule.exports = clone\n", "const vec3 = require('../vec3')\n\n/**\n * Determine the closest point on the given line to the given point.\n *\n * @param {line3} line - line of reference\n * @param {vec3} point - point of reference\n * @returns {vec3} a point\n * @alias module:modeling/maths/line3.closestPoint\n */\nconst closestPoint = (line, point) => {\n  const lpoint = line[0]\n  const ldirection = line[1]\n\n  const a = vec3.dot(vec3.subtract(vec3.create(), point, lpoint), ldirection)\n  const b = vec3.dot(ldirection, ldirection)\n  const t = a / b\n\n  const closestpoint = vec3.scale(vec3.create(), ldirection, t)\n  vec3.add(closestpoint, closestpoint, lpoint)\n  return closestpoint\n}\n\nmodule.exports = closestPoint\n", "const vec3 = require('../vec3')\n\n/**\n * Copy the given line into the receiving line.\n *\n * @param {line3} out - receiving line\n * @param {line3} line - line to copy\n * @returns {line3} out\n * @alias module:modeling/maths/line3.copy\n */\nconst copy = (out, line) => {\n  vec3.copy(out[0], line[0])\n  vec3.copy(out[1], line[1])\n  return out\n}\n\nmodule.exports = copy\n", "/**\n * Return the direction of the given line.\n *\n * @param {line3} line - line for reference\n * @return {vec3} the relative vector in the direction of the line\n * @alias module:modeling/maths/line3.direction\n */\nconst direction = (line) => line[1]\n\nmodule.exports = direction\n", "const vec3 = require('../vec3')\n\nconst closestPoint = require('./closestPoint')\n\n/**\n * Calculate the distance (positive) between the given point and line.\n *\n * @param {line3} line - line of reference\n * @param {vec3} point - point of reference\n * @return {Number} distance between line and point\n * @alias module:modeling/maths/line3.distanceToPoint\n */\nconst distanceToPoint = (line, point) => {\n  const closest = closestPoint(line, point)\n  const distancevector = vec3.subtract(vec3.create(), point, closest)\n  return vec3.length(distancevector)\n}\n\nmodule.exports = distanceToPoint\n", "const vec3 = require('../vec3')\n\n/**\n * Compare the given lines for equality.\n *\n * @param {line3} line1 - first line to compare\n * @param {line3} line2 - second line to compare\n * @return {Boolean} true if lines are equal\n * @alias module:modeling/maths/line3.equals\n */\nconst equals = (line1, line2) => {\n  // compare directions (unit vectors)\n  if (!vec3.equals(line1[1], line2[1])) return false\n\n  // compare points\n  if (!vec3.equals(line1[0], line2[0])) return false\n\n  // why would lines with the same slope (direction) and different points be equal?\n  // let distance = distanceToPoint(line1, line2[0])\n  // if (distance > EPS) return false\n\n  return true\n}\n\nmodule.exports = equals\n", "const vec3 = require('../vec3')\n\n/**\n * Create a line from the given point (origin) and direction.\n *\n * The point can be any random point on the line.\n * The direction must be a vector with positive or negative distance from the point.\n *\n * See the logic of fromPoints() for appropriate values.\n *\n * @param {line3} out - receiving line\n * @param {vec3} point - start point of the line segment\n * @param {vec3} direction - direction of the line segment\n * @returns {line3} out\n * @alias module:modeling/maths/line3.fromPointAndDirection\n */\nconst fromPointAndDirection = (out, point, direction) => {\n  const unit = vec3.normalize(vec3.create(), direction)\n\n  vec3.copy(out[0], point)\n  vec3.copy(out[1], unit)\n  return out\n}\n\nmodule.exports = fromPointAndDirection\n", "const vec3 = require('../vec3')\nconst { solve2Linear } = require('../utils')\n\nconst { EPS } = require('../constants')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Create a line the intersection of the given planes.\n *\n * @param {line3} out - receiving line\n * @param {plane} plane1 - first plane of reference\n * @param {plane} plane2 - second plane of reference\n * @returns {line3} out\n * @alias module:modeling/maths/line3.fromPlanes\n */\nconst fromPlanes = (out, plane1, plane2) => {\n  let direction = vec3.cross(vec3.create(), plane1, plane2)\n  let length = vec3.length(direction)\n  if (length < EPS) {\n    throw new Error('parallel planes do not intersect')\n  }\n  length = (1.0 / length)\n  direction = vec3.scale(direction, direction, length)\n\n  const absx = Math.abs(direction[0])\n  const absy = Math.abs(direction[1])\n  const absz = Math.abs(direction[2])\n  let origin\n  let r\n  if ((absx >= absy) && (absx >= absz)) {\n    // find a point p for which x is zero\n    r = solve2Linear(plane1[1], plane1[2], plane2[1], plane2[2], plane1[3], plane2[3])\n    origin = vec3.fromValues(0, r[0], r[1])\n  } else if ((absy >= absx) && (absy >= absz)) {\n    // find a point p for which y is zero\n    r = solve2Linear(plane1[0], plane1[2], plane2[0], plane2[2], plane1[3], plane2[3])\n    origin = vec3.fromValues(r[0], 0, r[1])\n  } else {\n    // find a point p for which z is zero\n    r = solve2Linear(plane1[0], plane1[1], plane2[0], plane2[1], plane1[3], plane2[3])\n    origin = vec3.fromValues(r[0], r[1], 0)\n  }\n  return fromPointAndDirection(out, origin, direction)\n}\n\nmodule.exports = fromPlanes\n", "const vec3 = require('../vec3')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Create a line that passes through the given points.\n *\n * @param {line3} out - receiving line\n * @param {vec3} point1 - start point of the line segment\n * @param {vec3} point2 - end point of the line segment\n * @returns {line3} out\n * @alias module:modeling/maths/line3.fromPoints\n */\nconst fromPoints = (out, point1, point2) => {\n  const direction = vec3.subtract(vec3.create(), point2, point1)\n  return fromPointAndDirection(out, point1, direction)\n}\n\nmodule.exports = fromPoints\n", "const vec3 = require('../vec3')\n\n/**\n * Determine the closest point on the given plane to the given line.\n *\n * NOTES:\n * The point of intersection will be invalid if the line is parallel to the plane, e.g. NaN.\n *\n * @param {line3} line - line of reference\n * @param {plane} plane - plane of reference\n * @returns {vec3} a point on the line\n * @alias module:modeling/maths/line3.intersectPointOfLineAndPlane\n */\nconst intersectToPlane = (line, plane) => {\n  // plane: plane.normal * p = plane.w\n  const pnormal = plane\n  const pw = plane[3]\n\n  const lpoint = line[0]\n  const ldirection = line[1]\n\n  // point: p = line.point + labda * line.direction\n  const labda = (pw - vec3.dot(pnormal, lpoint)) / vec3.dot(pnormal, ldirection)\n\n  const point = vec3.add(vec3.create(), lpoint, vec3.scale(vec3.create(), ldirection, labda))\n  return point\n}\n\nmodule.exports = intersectToPlane\n", "/**\n * Return the origin of the given line.\n *\n * @param {line3} line - line of reference\n * @return {vec3} the origin of the line\n * @alias module:modeling/maths/line3.origin\n */\nconst origin = (line) => line[0]\n\nmodule.exports = origin\n", "const vec3 = require('../vec3')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Create a line in the opposite direction as the given.\n *\n * @param {line3} out - receiving line\n * @param {line3} line - line to reverse\n * @returns {line3} out\n * @alias module:modeling/maths/line3.reverse\n */\nconst reverse = (out, line) => {\n  const point = vec3.clone(line[0])\n  const direction = vec3.negate(vec3.create(), line[1])\n  return fromPointAndDirection(out, point, direction)\n}\n\nmodule.exports = reverse\n", "/**\n * Return a string representing the given line.\n *\n * @param {line3} line - line of reference\n * @returns {String} string representation\n * @alias module:modeling/maths/line3.toString\n */\nconst toString = (line) => {\n  const point = line[0]\n  const direction = line[1]\n  return `line3: point: (${point[0].toFixed(7)}, ${point[1].toFixed(7)}, ${point[2].toFixed(7)}) direction: (${direction[0].toFixed(7)}, ${direction[1].toFixed(7)}, ${direction[2].toFixed(7)})`\n}\n\nmodule.exports = toString\n", "const vec3 = require('../vec3')\n\nconst fromPointAndDirection = require('./fromPointAndDirection')\n\n/**\n * Transforms the given line using the given matrix.\n *\n * @param {line3} out - line to update\n * @param {line3} line - line to transform\n * @param {mat4} matrix - matrix to transform with\n * @returns {line3} a new unbounded line\n * @alias module:modeling/maths/line3.transform\n */\nconst transform = (out, line, matrix) => {\n  const point = line[0]\n  const direction = line[1]\n  const pointPlusDirection = vec3.add(vec3.create(), point, direction)\n\n  const newpoint = vec3.transform(vec3.create(), point, matrix)\n  const newPointPlusDirection = vec3.transform(pointPlusDirection, pointPlusDirection, matrix)\n  const newdirection = vec3.subtract(newPointPlusDirection, newPointPlusDirection, newpoint)\n\n  return fromPointAndDirection(out, newpoint, newdirection)\n}\n\nmodule.exports = transform\n", "/**\n * Represents a unbounded line in 3D space, positioned at a point of origin.\n * @see {@link line3} for data structure information.\n * @module modeling/maths/line3\n */\nmodule.exports = {\n  clone: require('./clone'),\n  closestPoint: require('./closestPoint'),\n  copy: require('./copy'),\n  create: require('./create'),\n  direction: require('./direction'),\n  distanceToPoint: require('./distanceToPoint'),\n  equals: require('./equals'),\n  fromPlanes: require('./fromPlanes'),\n  fromPointAndDirection: require('./fromPointAndDirection'),\n  fromPoints: require('./fromPoints'),\n  intersectPointOfLineAndPlane: require('./intersectPointOfLineAndPlane'),\n  origin: require('./origin'),\n  reverse: require('./reverse'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "/**\n * Maths are computational units for fundamental Euclidean geometry. All maths operate upon array data structures.\n * Note: Maths data structures are considered immutable, so never change the contents directly.\n * @see Most computations are based upon the glMatrix library (glmatrix.net)\n * @module modeling/maths\n * @example\n * const { constants, line2, mat4, vec2, vec3 } = require('@jscad/modeling').maths\n\n */\nmodule.exports = {\n  constants: require('./constants'),\n  line2: require('./line2'),\n  line3: require('./line3'),\n  mat4: require('./mat4'),\n  plane: require('./plane'),\n  utils: require('./utils'),\n  vec2: require('./vec2'),\n  vec3: require('./vec3'),\n  vec4: require('./vec4')\n}\n", "const flatten = require('../utils/flatten')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cache = new WeakMap()\n\n/*\n * Measure the area of the given geometry.\n * NOTE: paths are infinitely narrow and do not have an area\n *\n * @param {path2} geometry - geometry to measure\n * @returns {Number} area of the geometry\n */\nconst measureAreaOfPath2 = () => 0\n\n/*\n * Measure the area of the given geometry.\n * For a counter clockwise rotating geometry (about Z) the area is positive, otherwise negative.\n *\n * @see http://paulbourke.net/geometry/polygonmesh/\n * @param {geom2} geometry - 2D geometry to measure\n * @returns {Number} area of the geometry\n */\nconst measureAreaOfGeom2 = (geometry) => {\n  let area = cache.get(geometry)\n  if (area) return area\n\n  const sides = geom2.toSides(geometry)\n  area = sides.reduce((area, side) => area + (side[0][0] * side[1][1] - side[0][1] * side[1][0]), 0)\n  area *= 0.5\n\n  cache.set(geometry, area)\n\n  return area\n}\n\n/*\n * Measure the area of the given geometry.\n *\n * @param {geom3} geometry - 3D geometry to measure\n * @returns {Number} area of the geometry\n */\nconst measureAreaOfGeom3 = (geometry) => {\n  let area = cache.get(geometry)\n  if (area) return area\n\n  const polygons = geom3.toPolygons(geometry)\n  area = polygons.reduce((area, polygon) => area + poly3.measureArea(polygon), 0)\n\n  cache.set(geometry, area)\n\n  return area\n}\n\n/**\n * Measure the area of the given geometries.\n * @param {...Objects} geometries - the geometries to measure\n * @return {Number|Array} the area, or a list of areas for each geometry\n * @alias module:modeling/measurements.measureArea\n *\n * @example\n * let area = measureArea(sphere())\n */\nconst measureArea = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureAreaOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureAreaOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureAreaOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureArea\n", "const flatten = require('../utils/flatten')\n\nconst measureArea = require('./measureArea')\n\n/**\n * Measure the total (aggregate) area for the given geometries.\n * Note: This measurement will not account for overlapping geometry\n * @param {...Object} geometries - the geometries to measure.\n * @return {Number} the total surface area for the group of geometry.\n * @alias module:modeling/measurements.measureAggregateArea\n *\n * @example\n * let totalArea = measureAggregateArea(sphere(),cube())\n */\nconst measureAggregateArea = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateArea: no geometries supplied')\n  const areas = measureArea(geometries)\n  if (geometries.length === 1) {\n    return areas\n  }\n  const result = 0\n  return areas.reduce((result, area) => result + area, result)\n}\n\nmodule.exports = measureAggregateArea\n", "const flatten = require('../utils/flatten')\n\nconst vec2 = require('../maths/vec2')\nconst vec3 = require('../maths/vec3')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cache = new WeakMap()\n\n/*\n * Measure the min and max bounds of the given (path2) geometry.\n * @return {Array[]} the min and max bounds for the geometry\n */\nconst measureBoundingBoxOfPath2 = (geometry) => {\n  let boundingBox = cache.get(geometry)\n  if (boundingBox) return boundingBox\n\n  const points = path2.toPoints(geometry)\n\n  let minpoint\n  if (points.length === 0) {\n    minpoint = vec2.create()\n  } else {\n    minpoint = vec2.clone(points[0])\n  }\n  let maxpoint = vec2.clone(minpoint)\n\n  points.forEach((point) => {\n    vec2.min(minpoint, minpoint, point)\n    vec2.max(maxpoint, maxpoint, point)\n  })\n  minpoint = [minpoint[0], minpoint[1], 0]\n  maxpoint = [maxpoint[0], maxpoint[1], 0]\n\n  boundingBox = [minpoint, maxpoint]\n\n  cache.set(geometry, boundingBox)\n\n  return boundingBox\n}\n\n/*\n * Measure the min and max bounds of the given (geom2) geometry.\n * @return {Array[]} the min and max bounds for the geometry\n */\nconst measureBoundingBoxOfGeom2 = (geometry) => {\n  let boundingBox = cache.get(geometry)\n  if (boundingBox) return boundingBox\n\n  const points = geom2.toPoints(geometry)\n\n  let minpoint\n  if (points.length === 0) {\n    minpoint = vec2.create()\n  } else {\n    minpoint = vec2.clone(points[0])\n  }\n  let maxpoint = vec2.clone(minpoint)\n\n  points.forEach((point) => {\n    vec2.min(minpoint, minpoint, point)\n    vec2.max(maxpoint, maxpoint, point)\n  })\n\n  minpoint = [minpoint[0], minpoint[1], 0]\n  maxpoint = [maxpoint[0], maxpoint[1], 0]\n\n  boundingBox = [minpoint, maxpoint]\n\n  cache.set(geometry, boundingBox)\n\n  return boundingBox\n}\n\n/*\n * Measure the min and max bounds of the given (geom3) geometry.\n * @return {Array[]} the min and max bounds for the geometry\n */\nconst measureBoundingBoxOfGeom3 = (geometry) => {\n  let boundingBox = cache.get(geometry)\n  if (boundingBox) return boundingBox\n\n  const polygons = geom3.toPolygons(geometry)\n\n  let minpoint = vec3.create()\n  if (polygons.length > 0) {\n    const points = poly3.toPoints(polygons[0])\n    vec3.copy(minpoint, points[0])\n  }\n  let maxpoint = vec3.clone(minpoint)\n\n  polygons.forEach((polygon) => {\n    poly3.toPoints(polygon).forEach((point) => {\n      vec3.min(minpoint, minpoint, point)\n      vec3.max(maxpoint, maxpoint, point)\n    })\n  })\n\n  minpoint = [minpoint[0], minpoint[1], minpoint[2]]\n  maxpoint = [maxpoint[0], maxpoint[1], maxpoint[2]]\n\n  boundingBox = [minpoint, maxpoint]\n\n  cache.set(geometry, boundingBox)\n\n  return boundingBox\n}\n\n/**\n * Measure the min and max bounds of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the min and max bounds, or a list of bounds for each geometry\n * @alias module:modeling/measurements.measureBoundingBox\n *\n * @example\n * let bounds = measureBoundingBox(sphere())\n */\nconst measureBoundingBox = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureBoundingBoxOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureBoundingBoxOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureBoundingBoxOfGeom3(geometry)\n    return [[0, 0, 0], [0, 0, 0]]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureBoundingBox\n", "const flatten = require('../utils/flatten')\nconst vec3min = require('../maths/vec3/min')\nconst vec3max = require('../maths/vec3/max')\n\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/**\n * Measure the aggregated minimum and maximum bounds for the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the min and max bounds for the group of geometry, i.e. [[x,y,z],[X,Y,Z]]\n * @alias module:modeling/measurements.measureAggregateBoundingBox\n *\n * @example\n * let bounds = measureAggregateBoundingBox(sphere(),cube())\n */\nconst measureAggregateBoundingBox = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateBoundingBox: no geometries supplied')\n  const bounds = measureBoundingBox(geometries)\n  if (geometries.length === 1) {\n    return bounds\n  }\n  const result = [[Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE], [-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE]]\n  return bounds.reduce((result, item) => {\n    result = [vec3min(result[0], result[0], item[0]), vec3max(result[1], result[1], item[1])]\n    return result\n  }, result)\n}\n\nmodule.exports = measureAggregateBoundingBox\n", "const { EPS } = require('../maths/constants')\n\nconst calculateEpsilonFromBounds = (bounds, dimensions) => {\n  let total = 0\n  for (let i = 0; i < dimensions; i++) {\n    total += bounds[1][i] - bounds[0][i]\n  }\n  return EPS * total / dimensions\n}\n\nmodule.exports = calculateEpsilonFromBounds\n", "const flatten = require('../utils/flatten')\nconst measureAggregateBoundingBox = require('./measureAggregateBoundingBox')\nconst calculateEpsilonFromBounds = require('./calculateEpsilonFromBounds')\nconst { geom2, geom3, path2 } = require('../geometries')\n\n/**\n * Measure the aggregated Epsilon for the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number} the aggregated Epsilon for the whole group of geometries\n * @alias module:modeling/measurements.measureAggregateEpsilon\n *\n * @example\n * let groupEpsilon = measureAggregateEpsilon(sphere(),cube())\n */\nconst measureAggregateEpsilon = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateEpsilon: no geometries supplied')\n  const bounds = measureAggregateBoundingBox(geometries)\n\n  let dimensions = 0\n  dimensions = geometries.reduce((dimensions, geometry) => {\n    if (path2.isA(geometry) || geom2.isA(geometry)) return Math.max(dimensions, 2)\n    if (geom3.isA(geometry)) return Math.max(dimensions, 3)\n    return 0\n  }, dimensions)\n  return calculateEpsilonFromBounds(bounds, dimensions)\n}\n\nmodule.exports = measureAggregateEpsilon\n", "const flatten = require('../utils/flatten')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cache = new WeakMap()\n\n/*\n * Measure the volume of the given geometry.\n * NOTE: paths are infinitely narrow and do not have an volume\n *\n * @param {Path2} geometry - geometry to measure\n * @returns {Number} volume of the geometry\n */\nconst measureVolumeOfPath2 = () => 0\n\n/*\n * Measure the volume of the given geometry.\n * NOTE: 2D geometry are infinitely thin and do not have an volume\n *\n * @param {Geom2} geometry - 2D geometry to measure\n * @returns {Number} volume of the geometry\n */\nconst measureVolumeOfGeom2 = () => 0\n\n/*\n * Measure the volume of the given geometry.\n *\n * @param {Geom3} geometry - 3D geometry to measure\n * @returns {Number} volume of the geometry\n */\nconst measureVolumeOfGeom3 = (geometry) => {\n  let volume = cache.get(geometry)\n  if (volume) return volume\n\n  const polygons = geom3.toPolygons(geometry)\n  volume = polygons.reduce((volume, polygon) => volume + poly3.measureSignedVolume(polygon), 0)\n\n  cache.set(geometry, volume)\n\n  return volume\n}\n\n/**\n * Measure the volume of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number|Array} the volume, or a list of volumes for each geometry\n * @alias module:modeling/measurements.measureVolume\n *\n * @example\n * let volume = measureVolume(sphere())\n */\nconst measureVolume = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureVolumeOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureVolumeOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureVolumeOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureVolume\n", "const flatten = require('../utils/flatten')\n\nconst measureVolume = require('./measureVolume')\n\n/**\n * Measure the total (aggregate) volume for the given geometries.\n * Note: This measurement will not account for overlapping geometry\n * @param {...Object} geometries - the geometries to measure.\n * @return {Number} the volume for the group of geometry.\n * @alias module:modeling/measurements.measureAggregateVolume\n *\n * @example\n * let totalVolume = measureAggregateVolume(sphere(),cube())\n */\nconst measureAggregateVolume = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('measureAggregateVolume: no geometries supplied')\n  const volumes = measureVolume(geometries)\n  if (geometries.length === 1) {\n    return volumes\n  }\n  const result = 0\n  return volumes.reduce((result, volume) => result + volume, result)\n}\n\nmodule.exports = measureAggregateVolume\n", "const flatten = require('../utils/flatten')\n\nconst vec2 = require('../maths/vec2')\nconst vec3 = require('../maths/vec3')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\nconst poly3 = require('../geometries/poly3')\n\nconst cacheOfBoundingSpheres = new WeakMap()\n\n/*\n * Measure the bounding sphere of the given (path2) geometry.\n * @return {[[x, y, z], radius]} the bounding sphere for the geometry\n */\nconst measureBoundingSphereOfPath2 = (geometry) => {\n  let boundingSphere = cacheOfBoundingSpheres.get(geometry)\n  if (boundingSphere !== undefined) return boundingSphere\n\n  const centroid = vec3.create()\n  let radius = 0\n\n  const points = path2.toPoints(geometry)\n\n  if (points.length > 0) {\n    // calculate the centroid of the geometry\n    let numPoints = 0\n    const temp = vec3.create()\n    points.forEach((point) => {\n      vec3.add(centroid, centroid, vec3.fromVec2(temp, point, 0))\n      numPoints++\n    })\n    vec3.scale(centroid, centroid, 1 / numPoints)\n\n    // find the farthest point from the centroid\n    points.forEach((point) => {\n      radius = Math.max(radius, vec2.squaredDistance(centroid, point))\n    })\n    radius = Math.sqrt(radius)\n  }\n\n  boundingSphere = [centroid, radius]\n  cacheOfBoundingSpheres.set(geometry, boundingSphere)\n\n  return boundingSphere\n}\n\n/*\n * Measure the bounding sphere of the given (geom2) geometry.\n * @return {[[x, y, z], radius]} the bounding sphere for the geometry\n */\nconst measureBoundingSphereOfGeom2 = (geometry) => {\n  let boundingSphere = cacheOfBoundingSpheres.get(geometry)\n  if (boundingSphere !== undefined) return boundingSphere\n\n  const centroid = vec3.create()\n  let radius = 0\n\n  const sides = geom2.toSides(geometry)\n\n  if (sides.length > 0) {\n    // calculate the centroid of the geometry\n    let numPoints = 0\n    const temp = vec3.create()\n    sides.forEach((side) => {\n      vec3.add(centroid, centroid, vec3.fromVec2(temp, side[0], 0))\n      numPoints++\n    })\n    vec3.scale(centroid, centroid, 1 / numPoints)\n\n    // find the farthest point from the centroid\n    sides.forEach((side) => {\n      radius = Math.max(radius, vec2.squaredDistance(centroid, side[0]))\n    })\n    radius = Math.sqrt(radius)\n  }\n\n  boundingSphere = [centroid, radius]\n  cacheOfBoundingSpheres.set(geometry, boundingSphere)\n\n  return boundingSphere\n}\n\n/*\n * Measure the bounding sphere of the given (geom3) geometry.\n * @return {[[x, y, z], radius]} the bounding sphere for the geometry\n */\nconst measureBoundingSphereOfGeom3 = (geometry) => {\n  let boundingSphere = cacheOfBoundingSpheres.get(geometry)\n  if (boundingSphere !== undefined) return boundingSphere\n\n  const centroid = vec3.create()\n  let radius = 0\n\n  const polygons = geom3.toPolygons(geometry)\n\n  if (polygons.length > 0) {\n    // calculate the centroid of the geometry\n    let numPoints = 0\n    polygons.forEach((polygon) => {\n      poly3.toPoints(polygon).forEach((point) => {\n        vec3.add(centroid, centroid, point)\n        numPoints++\n      })\n    })\n    vec3.scale(centroid, centroid, 1 / numPoints)\n\n    // find the farthest point from the centroid\n    polygons.forEach((polygon) => {\n      poly3.toPoints(polygon).forEach((point) => {\n        radius = Math.max(radius, vec3.squaredDistance(centroid, point))\n      })\n    })\n    radius = Math.sqrt(radius)\n  }\n\n  boundingSphere = [centroid, radius]\n  cacheOfBoundingSpheres.set(geometry, boundingSphere)\n\n  return boundingSphere\n}\n\n/**\n * Measure the (approximate) bounding sphere of the given geometries.\n * @see https://en.wikipedia.org/wiki/Bounding_sphere\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the bounding sphere for each geometry, i.e. [centroid, radius]\n * @alias module:modeling/measurements.measureBoundingSphere\n *\n * @example\n * let bounds = measureBoundingSphere(cube())\n */\nconst measureBoundingSphere = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureBoundingSphereOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureBoundingSphereOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureBoundingSphereOfGeom3(geometry)\n    return [[0, 0, 0], 0]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureBoundingSphere\n", "const flatten = require('../utils/flatten')\n\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/**\n * Measure the center of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the center point for each geometry, i.e. [X, Y, Z]\n * @alias module:modeling/measurements.measureCenter\n *\n * @example\n * let center = measureCenter(sphere())\n */\nconst measureCenter = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    const bounds = measureBoundingBox(geometry)\n    return [\n      (bounds[0][0] + ((bounds[1][0] - bounds[0][0]) / 2)),\n      (bounds[0][1] + ((bounds[1][1] - bounds[0][1]) / 2)),\n      (bounds[0][2] + ((bounds[1][2] - bounds[0][2]) / 2))\n    ]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureCenter\n", "const flatten = require('../utils/flatten')\n\nconst vec3 = require('../maths/vec3')\n\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\n\nconst cacheOfCenterOfMass = new WeakMap()\n\n/*\n * Measure the center of mass for the given geometry.\n *\n * @see http://paulbourke.net/geometry/polygonmesh/\n * @return {Array} the center of mass for the geometry\n */\nconst measureCenterOfMassGeom2 = (geometry) => {\n  let centerOfMass = cacheOfCenterOfMass.get(geometry)\n  if (centerOfMass !== undefined) return centerOfMass\n\n  const sides = geom2.toSides(geometry)\n\n  let area = 0\n  let x = 0\n  let y = 0\n  if (sides.length > 0) {\n    for (let i = 0; i < sides.length; i++) {\n      const p1 = sides[i][0]\n      const p2 = sides[i][1]\n\n      const a = p1[0] * p2[1] - p1[1] * p2[0]\n      area += a\n      x += (p1[0] + p2[0]) * a\n      y += (p1[1] + p2[1]) * a\n    }\n    area /= 2\n\n    const f = 1 / (area * 6)\n    x *= f\n    y *= f\n  }\n\n  centerOfMass = vec3.fromValues(x, y, 0)\n\n  cacheOfCenterOfMass.set(geometry, centerOfMass)\n  return centerOfMass\n}\n\n/*\n * Measure the center of mass for the given geometry.\n * @return {Array} the center of mass for the geometry\n */\nconst measureCenterOfMassGeom3 = (geometry) => {\n  let centerOfMass = cacheOfCenterOfMass.get(geometry)\n  if (centerOfMass !== undefined) return centerOfMass\n\n  centerOfMass = vec3.create() // 0, 0, 0\n\n  const polygons = geom3.toPolygons(geometry)\n  if (polygons.length === 0) return centerOfMass\n\n  let totalVolume = 0\n  const vector = vec3.create() // for speed\n  polygons.forEach((polygon) => {\n    // calculate volume and center of each tetrahedron\n    const vertices = polygon.vertices\n    for (let i = 0; i < vertices.length - 2; i++) {\n      vec3.cross(vector, vertices[i + 1], vertices[i + 2])\n      const volume = vec3.dot(vertices[0], vector) / 6\n\n      totalVolume += volume\n\n      vec3.add(vector, vertices[0], vertices[i + 1])\n      vec3.add(vector, vector, vertices[i + 2])\n      const weightedCenter = vec3.scale(vector, vector, 1 / 4 * volume)\n\n      vec3.add(centerOfMass, centerOfMass, weightedCenter)\n    }\n  })\n  vec3.scale(centerOfMass, centerOfMass, 1 / totalVolume)\n\n  cacheOfCenterOfMass.set(geometry, centerOfMass)\n  return centerOfMass\n}\n\n/**\n * Measure the center of mass for the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the center of mass for each geometry, i.e. [X, Y, Z]\n * @alias module:modeling/measurements.measureCenterOfMass\n *\n * @example\n * let center = measureCenterOfMass(sphere())\n */\nconst measureCenterOfMass = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    // NOTE: center of mass for geometry path2 is not possible\n    if (geom2.isA(geometry)) return measureCenterOfMassGeom2(geometry)\n    if (geom3.isA(geometry)) return measureCenterOfMassGeom3(geometry)\n    return [0, 0, 0]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureCenterOfMass\n", "const flatten = require('../utils/flatten')\n\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/**\n * Measure the dimensions of the given geometries.\n * @param {...Object} geometries - the geometries to measure\n * @return {Array} the dimensions for each geometry, i.e. [width, depth, height]\n * @alias module:modeling/measurements.measureDimensions\n *\n * @example\n * let dimensions = measureDimensions(sphere())\n */\nconst measureDimensions = (...geometries) => {\n  geometries = flatten(geometries)\n\n  const results = geometries.map((geometry) => {\n    const boundingBox = measureBoundingBox(geometry)\n    return [\n      boundingBox[1][0] - boundingBox[0][0],\n      boundingBox[1][1] - boundingBox[0][1],\n      boundingBox[1][2] - boundingBox[0][2]\n    ]\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureDimensions\n", "const flatten = require('../utils/flatten')\nconst { geom2, geom3, path2 } = require('../geometries')\n\nconst calculateEpsilonFromBounds = require('./calculateEpsilonFromBounds')\nconst measureBoundingBox = require('./measureBoundingBox')\n\n/*\n * Measure the epsilon of the given (path2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfPath2 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n\n/*\n * Measure the epsilon of the given (geom2) geometry.\n * @return {Number} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom2 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 2)\n\n/*\n * Measure the epsilon of the given (geom3) geometry.\n * @return {Float} the epsilon (precision) of the geometry\n */\nconst measureEpsilonOfGeom3 = (geometry) => calculateEpsilonFromBounds(measureBoundingBox(geometry), 3)\n\n/**\n * Measure the epsilon of the given geometries.\n * Epsilon values are used in various functions to determine minimum distances between points, planes, etc.\n * @param {...Object} geometries - the geometries to measure\n * @return {Number|Array} the epsilon, or a list of epsilons for each geometry\n * @alias module:modeling/measurements.measureEpsilon\n *\n * @example\n * let epsilon = measureEpsilon(sphere())\n */\nconst measureEpsilon = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return measureEpsilonOfPath2(geometry)\n    if (geom2.isA(geometry)) return measureEpsilonOfGeom2(geometry)\n    if (geom3.isA(geometry)) return measureEpsilonOfGeom3(geometry)\n    return 0\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = measureEpsilon\n", "/**\n * All shapes (primitives or the results of operations) can be measured, e.g. calculate volume, etc.\n * @module modeling/measurements\n * @example\n * const { measureArea, measureBoundingBox, measureVolume } = require('@jscad/modeling').measurements\n */\nmodule.exports = {\n  measureAggregateArea: require('./measureAggregateArea'),\n  measureAggregateBoundingBox: require('./measureAggregateBoundingBox'),\n  measureAggregateEpsilon: require('./measureAggregateEpsilon'),\n  measureAggregateVolume: require('./measureAggregateVolume'),\n  measureArea: require('./measureArea'),\n  measureBoundingBox: require('./measureBoundingBox'),\n  measureBoundingSphere: require('./measureBoundingSphere'),\n  measureCenter: require('./measureCenter'),\n  measureCenterOfMass: require('./measureCenterOfMass'),\n  measureDimensions: require('./measureDimensions'),\n  measureEpsilon: require('./measureEpsilon'),\n  measureVolume: require('./measureVolume')\n}\n", "// verify that the array has the given dimension, and contains Number values\nconst isNumberArray = (array, dimension) => {\n  if (Array.isArray(array) && array.length >= dimension) {\n    return array.every((n) => Number.isFinite(n))\n  }\n  return false\n}\n\n// verify that the value is a Number greater than the constant\nconst isGT = (value, constant) => (Number.isFinite(value) && value > constant)\n\n// verify that the value is a Number greater than or equal to the constant\nconst isGTE = (value, constant) => (Number.isFinite(value) && value >= constant)\n\nmodule.exports = {\n  isNumberArray,\n  isGT,\n  isGTE\n}\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\n\nconst path2 = require('../geometries/path2')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an arc in two dimensional space where all points are at the same distance from the center.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of arc\n * @param {Number} [options.radius=1] - radius of arc\n * @param {Number} [options.startAngle=0] - starting angle of the arc, in radians\n * @param {Number} [options.endAngle=TAU] - ending angle of the arc, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @param {Boolean} [options.makeTangent=false] - adds line segments at both ends of the arc to ensure that the gradients at the edges are tangent\n * @returns {path2} new 2D path\n * @alias module:modeling/primitives.arc\n */\nconst arc = (options) => {\n  const defaults = {\n    center: [0, 0],\n    radius: 1,\n    startAngle: 0,\n    endAngle: TAU,\n    makeTangent: false,\n    segments: 32\n  }\n  let { center, radius, startAngle, endAngle, makeTangent, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  startAngle = startAngle % TAU\n  endAngle = endAngle % TAU\n\n  let rotation = TAU\n  if (startAngle < endAngle) {\n    rotation = endAngle - startAngle\n  }\n  if (startAngle > endAngle) {\n    rotation = endAngle + (TAU - startAngle)\n  }\n\n  const minangle = Math.acos(((radius * radius) + (radius * radius) - (EPS * EPS)) / (2 * radius * radius))\n\n  const centerv = vec2.clone(center)\n  let point\n  const pointArray = []\n  if (rotation < minangle) {\n    // there is no rotation, just a single point\n    point = vec2.fromAngleRadians(vec2.create(), startAngle)\n    vec2.scale(point, point, radius)\n    vec2.add(point, point, centerv)\n    pointArray.push(point)\n  } else {\n    // note: add one additional step to acheive full rotation\n    const numsteps = Math.max(1, Math.floor(segments * (rotation / TAU))) + 1\n    let edgestepsize = numsteps * 0.5 / rotation // step size for half a degree\n    if (edgestepsize > 0.25) edgestepsize = 0.25\n\n    const totalsteps = makeTangent ? (numsteps + 2) : numsteps\n    for (let i = 0; i <= totalsteps; i++) {\n      let step = i\n      if (makeTangent) {\n        step = (i - 1) * (numsteps - 2 * edgestepsize) / numsteps + edgestepsize\n        if (step < 0) step = 0\n        if (step > numsteps) step = numsteps\n      }\n      const angle = startAngle + (step * (rotation / numsteps))\n      point = vec2.fromAngleRadians(vec2.create(), angle)\n      vec2.scale(point, point, radius)\n      vec2.add(point, point, centerv)\n      pointArray.push(point)\n    }\n  }\n  return path2.fromPoints({ closed: false }, pointArray)\n}\n\nmodule.exports = arc\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned ellipse in two dimensional space.\n * @see https://en.wikipedia.org/wiki/Ellipse\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of ellipse\n * @param {Array} [options.radius=[1,1]] - radius of ellipse, along X and Y\n * @param {Number} [options.startAngle=0] - start angle of ellipse, in radians\n * @param {Number} [options.endAngle=TAU] - end angle of ellipse, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.ellipse\n * @example\n * let myshape = ellipse({radius: [5,10]})\n */\nconst ellipse = (options) => {\n  const defaults = {\n    center: [0, 0],\n    radius: [1, 1],\n    startAngle: 0,\n    endAngle: TAU,\n    segments: 32\n  }\n  let { center, radius, startAngle, endAngle, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isNumberArray(radius, 2)) throw new Error('radius must be an array of X and Y values')\n  if (!radius.every((n) => n > 0)) throw new Error('radius values must be greater than zero')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')\n  if (!isGTE(segments, 3)) throw new Error('segments must be three or more')\n\n  startAngle = startAngle % TAU\n  endAngle = endAngle % TAU\n\n  let rotation = TAU\n  if (startAngle < endAngle) {\n    rotation = endAngle - startAngle\n  }\n  if (startAngle > endAngle) {\n    rotation = endAngle + (TAU - startAngle)\n  }\n\n  const minradius = Math.min(radius[0], radius[1])\n  const minangle = Math.acos(((minradius * minradius) + (minradius * minradius) - (EPS * EPS)) /\n                            (2 * minradius * minradius))\n  if (rotation < minangle) throw new Error('startAngle and endAngle do not define a significant rotation')\n\n  segments = Math.floor(segments * (rotation / TAU))\n\n  const centerv = vec2.clone(center)\n  const step = rotation / segments // radians per segment\n\n  const points = []\n  segments = (rotation < TAU) ? segments + 1 : segments\n  for (let i = 0; i < segments; i++) {\n    const angle = (step * i) + startAngle\n    const point = vec2.fromValues(radius[0] * cos(angle), radius[1] * sin(angle))\n    vec2.add(point, centerv, point)\n    points.push(point)\n  }\n  if (rotation < TAU) points.push(centerv)\n  return geom2.fromPoints(points)\n}\n\nmodule.exports = ellipse\n", "const { TAU } = require('../maths/constants')\n\nconst ellipse = require('./ellipse')\n\nconst { isGT } = require('./commonChecks')\n\n/**\n * Construct a circle in two dimensional space where all points are at the same distance from the center.\n * @see [ellipse]{@link module:modeling/primitives.ellipse} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of circle\n * @param {Number} [options.radius=1] - radius of circle\n * @param {Number} [options.startAngle=0] - start angle of circle, in radians\n * @param {Number} [options.endAngle=TAU] - end angle of circle, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.circle\n * @example\n * let myshape = circle({radius: 10})\n */\nconst circle = (options) => {\n  const defaults = {\n    center: [0, 0],\n    radius: 1,\n    startAngle: 0,\n    endAngle: TAU,\n    segments: 32\n  }\n  let { center, radius, startAngle, endAngle, segments } = Object.assign({}, defaults, options)\n\n  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')\n\n  radius = [radius, radius]\n\n  return ellipse({ center, radius, startAngle, endAngle, segments })\n}\n\nmodule.exports = circle\n", "const geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned solid cuboid in three dimensional space.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cuboid\n * @param {Array} [options.size=[2,2,2]] - dimensions of cuboid; width, depth, height\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.cuboid\n *\n * @example\n * let myshape = cuboid({size: [5, 10, 5]})\n */\nconst cuboid = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    size: [2, 2, 2]\n  }\n  const { center, size } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isNumberArray(size, 3)) throw new Error('size must be an array of width, depth and height values')\n  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')\n\n  const result = geom3.create(\n    // adjust a basic shape to size\n    [\n      [[0, 4, 6, 2], [-1, 0, 0]],\n      [[1, 3, 7, 5], [+1, 0, 0]],\n      [[0, 1, 5, 4], [0, -1, 0]],\n      [[2, 6, 7, 3], [0, +1, 0]],\n      [[0, 2, 3, 1], [0, 0, -1]],\n      [[4, 5, 7, 6], [0, 0, +1]]\n    ].map((info) => {\n      const points = info[0].map((i) => {\n        const pos = [\n          center[0] + (size[0] / 2) * (2 * !!(i & 1) - 1),\n          center[1] + (size[1] / 2) * (2 * !!(i & 2) - 1),\n          center[2] + (size[2] / 2) * (2 * !!(i & 4) - 1)\n        ]\n        return pos\n      })\n      return poly3.create(points)\n    })\n  )\n  return result\n}\n\nmodule.exports = cuboid\n", "const cuboid = require('./cuboid')\n\nconst { isGT } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned solid cube in three dimensional space with six square faces.\n * @see [cuboid]{@link module:modeling/primitives.cuboid} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cube\n * @param {Number} [options.size=2] - dimension of cube\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.cube\n * @example\n * let myshape = cube({size: 10})\n */\nconst cube = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    size: 2\n  }\n  let { center, size } = Object.assign({}, defaults, options)\n\n  if (!isGT(size, 0)) throw new Error('size must be greater than zero')\n\n  size = [size, size, size]\n\n  return cuboid({ center, size })\n}\n\nmodule.exports = cube\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct a Z axis-aligned elliptic cylinder in three dimensional space.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cylinder\n * @param {Number} [options.height=2] - height of cylinder\n * @param {Array} [options.startRadius=[1,1]] - radius of rounded start, must be two dimensional array\n * @param {Number} [options.startAngle=0] - start angle of cylinder, in radians\n * @param {Array} [options.endRadius=[1,1]] - radius of rounded end, must be two dimensional array\n * @param {Number} [options.endAngle=TAU] - end angle of cylinder, in radians\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new geometry\n * @alias module:modeling/primitives.cylinderElliptic\n *\n * @example\n * let myshape = cylinderElliptic({height: 2, startRadius: [10,5], endRadius: [8,3]})\n */\nconst cylinderElliptic = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    height: 2,\n    startRadius: [1, 1],\n    startAngle: 0,\n    endRadius: [1, 1],\n    endAngle: TAU,\n    segments: 32\n  }\n  let { center, height, startRadius, startAngle, endRadius, endAngle, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isGT(height, 0)) throw new Error('height must be greater then zero')\n  if (!isNumberArray(startRadius, 2)) throw new Error('startRadius must be an array of X and Y values')\n  if (!startRadius.every((n) => n >= 0)) throw new Error('startRadius values must be positive')\n  if (!isNumberArray(endRadius, 2)) throw new Error('endRadius must be an array of X and Y values')\n  if (!endRadius.every((n) => n >= 0)) throw new Error('endRadius values must be positive')\n  if (endRadius.every((n) => n === 0) && startRadius.every((n) => n === 0)) throw new Error('at least one radius must be positive')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGTE(endAngle, 0)) throw new Error('endAngle must be positive')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  startAngle = startAngle % TAU\n  endAngle = endAngle % TAU\n\n  let rotation = TAU\n  if (startAngle < endAngle) {\n    rotation = endAngle - startAngle\n  }\n  if (startAngle > endAngle) {\n    rotation = endAngle + (TAU - startAngle)\n  }\n\n  const minradius = Math.min(startRadius[0], startRadius[1], endRadius[0], endRadius[1])\n  const minangle = Math.acos(((minradius * minradius) + (minradius * minradius) - (EPS * EPS)) /\n                            (2 * minradius * minradius))\n  if (rotation < minangle) throw new Error('startAngle and endAngle do not define a significant rotation')\n\n  const slices = Math.floor(segments * (rotation / TAU))\n\n  const start = vec3.fromValues(0, 0, -(height / 2))\n  const end = vec3.fromValues(0, 0, height / 2)\n  const ray = vec3.subtract(vec3.create(), end, start)\n\n  const axisX = vec3.fromValues(1, 0, 0)\n  const axisY = vec3.fromValues(0, 1, 0)\n\n  const v1 = vec3.create()\n  const v2 = vec3.create()\n  const v3 = vec3.create()\n  const point = (stack, slice, radius) => {\n    const angle = slice * rotation + startAngle\n    vec3.scale(v1, axisX, radius[0] * cos(angle))\n    vec3.scale(v2, axisY, radius[1] * sin(angle))\n    vec3.add(v1, v1, v2)\n\n    vec3.scale(v3, ray, stack)\n    vec3.add(v3, v3, start)\n    return vec3.add(vec3.create(), v1, v3)\n  }\n\n  // adjust the points to center\n  const fromPoints = (...points) => {\n    const newpoints = points.map((point) => vec3.add(vec3.create(), point, center))\n    return poly3.create(newpoints)\n  }\n\n  const polygons = []\n  for (let i = 0; i < slices; i++) {\n    const t0 = i / slices\n    let t1 = (i + 1) / slices\n    // fix rounding error when rotating TAU radians\n    if (rotation === TAU && i === slices - 1) t1 = 0\n\n    if (endRadius[0] === startRadius[0] && endRadius[1] === startRadius[1]) {\n      polygons.push(fromPoints(start, point(0, t1, endRadius), point(0, t0, endRadius)))\n      polygons.push(fromPoints(point(0, t1, endRadius), point(1, t1, endRadius), point(1, t0, endRadius), point(0, t0, endRadius)))\n      polygons.push(fromPoints(end, point(1, t0, endRadius), point(1, t1, endRadius)))\n    } else {\n      if (startRadius[0] > 0 && startRadius[1] > 0) {\n        polygons.push(fromPoints(start, point(0, t1, startRadius), point(0, t0, startRadius)))\n      }\n      if (startRadius[0] > 0 || startRadius[1] > 0) {\n        polygons.push(fromPoints(point(0, t0, startRadius), point(0, t1, startRadius), point(1, t0, endRadius)))\n      }\n      if (endRadius[0] > 0 && endRadius[1] > 0) {\n        polygons.push(fromPoints(end, point(1, t0, endRadius), point(1, t1, endRadius)))\n      }\n      if (endRadius[0] > 0 || endRadius[1] > 0) {\n        polygons.push(fromPoints(point(1, t0, endRadius), point(0, t1, startRadius), point(1, t1, endRadius)))\n      }\n    }\n  }\n  if (rotation < TAU) {\n    polygons.push(fromPoints(start, point(0, 0, startRadius), end))\n    polygons.push(fromPoints(point(0, 0, startRadius), point(1, 0, endRadius), end))\n    polygons.push(fromPoints(start, end, point(0, 1, startRadius)))\n    polygons.push(fromPoints(point(0, 1, startRadius), end, point(1, 1, endRadius)))\n  }\n  const result = geom3.create(polygons)\n  return result\n}\n\nmodule.exports = cylinderElliptic\n", "const cylinderElliptic = require('./cylinderElliptic')\n\nconst { isGT } = require('./commonChecks')\n\n/**\n * Construct a Z axis-aligned cylinder in three dimensional space.\n * @see [cylinderElliptic]{@link module:modeling/primitives.cylinderElliptic} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cylinder\n * @param {Number} [options.height=2] - height of cylinder\n * @param {Number} [options.radius=1] - radius of cylinder (at both start and end)\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new geometry\n * @alias module:modeling/primitives.cylinder\n *\n * @example\n * let myshape = cylinder({height: 2, radius: 10})\n */\nconst cylinder = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    height: 2,\n    radius: 1,\n    segments: 32\n  }\n  const { center, height, radius, segments } = Object.assign({}, defaults, options)\n\n  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')\n\n  const newoptions = {\n    center,\n    height,\n    startRadius: [radius, radius],\n    endRadius: [radius, radius],\n    segments\n  }\n\n  return cylinderElliptic(newoptions)\n}\n\nmodule.exports = cylinder\n", "const { TAU } = require('../maths/constants')\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned ellipsoid in three dimensional space.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of ellipsoid\n * @param {Array} [options.radius=[1,1,1]] - radius of ellipsoid, along X, Y and Z\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @param {Array} [options.axes] -  an array with three vectors for the x, y and z base vectors\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.ellipsoid\n *\n * @example\n * let myshape = ellipsoid({radius: [5, 10, 20]})\n*/\nconst ellipsoid = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    radius: [1, 1, 1],\n    segments: 32,\n    axes: [[1, 0, 0], [0, -1, 0], [0, 0, 1]]\n  }\n  const { center, radius, segments, axes } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isNumberArray(radius, 3)) throw new Error('radius must be an array of X, Y and Z values')\n  if (!radius.every((n) => n > 0)) throw new Error('radius values must be greater than zero')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  const xvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[0]), radius[0])\n  const yvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[1]), radius[1])\n  const zvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), axes[2]), radius[2])\n\n  const qsegments = Math.round(segments / 4)\n  let prevcylinderpoint\n  const polygons = []\n  const p1 = vec3.create()\n  const p2 = vec3.create()\n  for (let slice1 = 0; slice1 <= segments; slice1++) {\n    const angle = TAU * slice1 / segments\n    const cylinderpoint = vec3.add(vec3.create(), vec3.scale(p1, xvector, cos(angle)), vec3.scale(p2, yvector, sin(angle)))\n    if (slice1 > 0) {\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qsegments; slice2++) {\n        const pitch = TAU / 4 * slice2 / qsegments\n        const cospitch = cos(pitch)\n        const sinpitch = sin(pitch)\n        if (slice2 > 0) {\n          let points = []\n          let point\n          point = vec3.subtract(vec3.create(), vec3.scale(p1, prevcylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(point, point, center))\n          point = vec3.subtract(vec3.create(), vec3.scale(p1, cylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(point, point, center))\n          if (slice2 < qsegments) {\n            point = vec3.subtract(vec3.create(), vec3.scale(p1, cylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n            points.push(vec3.add(point, point, center))\n          }\n          point = vec3.subtract(vec3.create(), vec3.scale(p1, prevcylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n          points.push(vec3.add(point, point, center))\n\n          polygons.push(poly3.create(points))\n\n          points = []\n          point = vec3.add(vec3.create(), vec3.scale(p1, prevcylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(vec3.create(), center, point))\n          point = vec3.add(point, vec3.scale(p1, cylinderpoint, prevcospitch), vec3.scale(p2, zvector, prevsinpitch))\n          points.push(vec3.add(vec3.create(), center, point))\n          if (slice2 < qsegments) {\n            point = vec3.add(point, vec3.scale(p1, cylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n            points.push(vec3.add(vec3.create(), center, point))\n          }\n          point = vec3.add(point, vec3.scale(p1, prevcylinderpoint, cospitch), vec3.scale(p2, zvector, sinpitch))\n          points.push(vec3.add(vec3.create(), center, point))\n          points.reverse()\n\n          polygons.push(poly3.create(points))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  return geom3.create(polygons)\n}\n\nmodule.exports = ellipsoid\n", "const geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { isNumberArray } = require('./commonChecks')\n\n/**\n * Construct a polyhedron in three dimensional space from the given set of 3D points and faces.\n * The faces can define outward or inward facing polygons (orientation).\n * However, each face must define a counter clockwise rotation of points which follows the right hand rule.\n * @param {Object} options - options for construction\n * @param {Array} options.points - list of points in 3D space\n * @param {Array} options.faces - list of faces, where each face is a set of indexes into the points\n * @param {Array} [options.colors=undefined] - list of RGBA colors to apply to each face\n * @param {String} [options.orientation='outward'] - orientation of faces\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.polyhedron\n *\n * @example\n * let mypoints = [ [10, 10, 0], [10, -10, 0], [-10, -10, 0], [-10, 10, 0], [0, 0, 10] ]\n * let myfaces = [ [0, 1, 4], [1, 2, 4], [2, 3, 4], [3, 0, 4], [1, 0, 3], [2, 1, 3] ]\n * let myshape = polyhedron({points: mypoint, faces: myfaces, orientation: 'inward'})\n */\nconst polyhedron = (options) => {\n  const defaults = {\n    points: [],\n    faces: [],\n    colors: undefined,\n    orientation: 'outward'\n  }\n  const { points, faces, colors, orientation } = Object.assign({}, defaults, options)\n\n  if (!(Array.isArray(points) && Array.isArray(faces))) {\n    throw new Error('points and faces must be arrays')\n  }\n  if (points.length < 3) {\n    throw new Error('three or more points are required')\n  }\n  if (faces.length < 1) {\n    throw new Error('one or more faces are required')\n  }\n  if (colors) {\n    if (!Array.isArray(colors)) {\n      throw new Error('colors must be an array')\n    }\n    if (colors.length !== faces.length) {\n      throw new Error('faces and colors must have the same length')\n    }\n  }\n  points.forEach((point, i) => {\n    if (!isNumberArray(point, 3)) throw new Error(`point ${i} must be an array of X, Y, Z values`)\n  })\n  faces.forEach((face, i) => {\n    if (face.length < 3) throw new Error(`face ${i} must contain 3 or more indexes`)\n    if (!isNumberArray(face, face.length)) throw new Error(`face ${i} must be an array of numbers`)\n  })\n\n  // invert the faces if orientation is inwards, as all internals expect outwarding facing polygons\n  if (orientation !== 'outward') {\n    faces.forEach((face) => face.reverse())\n  }\n\n  const polygons = faces.map((face, findex) => {\n    const polygon = poly3.create(face.map((pindex) => points[pindex]))\n    if (colors && colors[findex]) polygon.color = colors[findex]\n    return polygon\n  })\n\n  return geom3.create(polygons)\n}\n\nmodule.exports = polyhedron\n", "const mat4 = require('../maths/mat4')\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\n\nconst polyhedron = require('./polyhedron')\n\nconst { isGT, isGTE } = require('./commonChecks')\n\n/**\n * Construct a geodesic sphere based on icosahedron symmetry.\n * @param {Object} [options] - options for construction\n * @param {Number} [options.radius=1] - target radius of sphere\n * @param {Number} [options.frequency=6] - subdivision frequency per face, multiples of 6\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.geodesicSphere\n *\n * @example\n * let myshape = geodesicSphere({radius: 15, frequency: 18})\n */\nconst geodesicSphere = (options) => {\n  const defaults = {\n    radius: 1,\n    frequency: 6\n  }\n  let { radius, frequency } = Object.assign({}, defaults, options)\n\n  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')\n  if (!isGTE(frequency, 6)) throw new Error('frequency must be six or more')\n\n  // adjust the frequency to base 6\n  frequency = Math.floor(frequency / 6)\n\n  const ci = [ // hard-coded data of icosahedron (20 faces, all triangles)\n    [0.850651, 0.000000, -0.525731],\n    [0.850651, -0.000000, 0.525731],\n    [-0.850651, -0.000000, 0.525731],\n    [-0.850651, 0.000000, -0.525731],\n    [0.000000, -0.525731, 0.850651],\n    [0.000000, 0.525731, 0.850651],\n    [0.000000, 0.525731, -0.850651],\n    [0.000000, -0.525731, -0.850651],\n    [-0.525731, -0.850651, -0.000000],\n    [0.525731, -0.850651, -0.000000],\n    [0.525731, 0.850651, 0.000000],\n    [-0.525731, 0.850651, 0.000000]]\n\n  const ti = [[0, 9, 1], [1, 10, 0], [6, 7, 0], [10, 6, 0], [7, 9, 0], [5, 1, 4], [4, 1, 9], [5, 10, 1], [2, 8, 3], [3, 11, 2], [2, 5, 4],\n    [4, 8, 2], [2, 11, 5], [3, 7, 6], [6, 11, 3], [8, 7, 3], [9, 8, 4], [11, 10, 5], [10, 11, 6], [8, 9, 7]]\n\n  const geodesicSubDivide = (p, frequency, offset) => {\n    const p1 = p[0]\n    const p2 = p[1]\n    const p3 = p[2]\n    let n = offset\n    const c = []\n    const f = []\n\n    //           p3\n    //           /\\\n    //          /__\\     frequency = 3\n    //      i  /\\  /\\\n    //        /__\\/__\\       total triangles = 9 (frequency*frequency)\n    //       /\\  /\\  /\\\n    //     0/__\\/__\\/__\\\n    //    p1 0   j      p2\n\n    for (let i = 0; i < frequency; i++) {\n      for (let j = 0; j < frequency - i; j++) {\n        const t0 = i / frequency\n        const t1 = (i + 1) / frequency\n        const s0 = j / (frequency - i)\n        const s1 = (j + 1) / (frequency - i)\n        const s2 = frequency - i - 1 ? j / (frequency - i - 1) : 1\n        const q = []\n\n        q[0] = mix3(mix3(p1, p2, s0), p3, t0)\n        q[1] = mix3(mix3(p1, p2, s1), p3, t0)\n        q[2] = mix3(mix3(p1, p2, s2), p3, t1)\n\n        // -- normalize\n        for (let k = 0; k < 3; k++) {\n          const r = vec3.length(q[k])\n          for (let l = 0; l < 3; l++) {\n            q[k][l] /= r\n          }\n        }\n        c.push(q[0], q[1], q[2])\n        f.push([n, n + 1, n + 2]); n += 3\n\n        if (j < frequency - i - 1) {\n          const s3 = frequency - i - 1 ? (j + 1) / (frequency - i - 1) : 1\n          q[0] = mix3(mix3(p1, p2, s1), p3, t0)\n          q[1] = mix3(mix3(p1, p2, s3), p3, t1)\n          q[2] = mix3(mix3(p1, p2, s2), p3, t1)\n\n          // -- normalize\n          for (let k = 0; k < 3; k++) {\n            const r = vec3.length(q[k])\n            for (let l = 0; l < 3; l++) {\n              q[k][l] /= r\n            }\n          }\n          c.push(q[0], q[1], q[2])\n          f.push([n, n + 1, n + 2]); n += 3\n        }\n      }\n    }\n    return { points: c, triangles: f, offset: n }\n  }\n\n  const mix3 = (a, b, f) => {\n    const _f = 1 - f\n    const c = []\n    for (let i = 0; i < 3; i++) {\n      c[i] = a[i] * _f + b[i] * f\n    }\n    return c\n  }\n\n  let points = []\n  let faces = []\n  let offset = 0\n\n  for (let i = 0; i < ti.length; i++) {\n    const g = geodesicSubDivide([ci[ti[i][0]], ci[ti[i][1]], ci[ti[i][2]]], frequency, offset)\n    points = points.concat(g.points)\n    faces = faces.concat(g.triangles)\n    offset = g.offset\n  }\n\n  let geometry = polyhedron({ points: points, faces: faces, orientation: 'inward' })\n  if (radius !== 1) geometry = geom3.transform(mat4.fromScaling(mat4.create(), [radius, radius, radius]), geometry)\n  return geometry\n}\n\nmodule.exports = geodesicSphere\n", "const path2 = require('../geometries/path2')\n\n/**\n * Construct a new line in two dimensional space from the given points.\n * The points must be provided as an array, where each element is a 2D point.\n * @param {Array} points - array of points from which to create the path\n * @returns {path2} new 2D path\n * @alias module:modeling/primitives.line\n *\n * @example\n * let myshape = line([[10, 10], [-10, 10]])\n */\nconst line = (points) => {\n  if (!Array.isArray(points)) throw new Error('points must be an array')\n\n  return path2.fromPoints({}, points)\n}\n\nmodule.exports = line\n", "const geom2 = require('../geometries/geom2')\n\n/**\n * Construct a polygon in two dimensional space from a list of points, or a list of points and paths.\n * NOTE: The ordering of points is VERY IMPORTANT.\n * @param {Object} options - options for construction\n * @param {Array} options.points - points of the polygon : either flat or nested array of 2D points\n * @param {Array} [options.paths] - paths of the polygon : either flat or nested array of point indexes\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.polygon\n *\n * @example\n * let roof = [[10,11], [0,11], [5,20]]\n * let wall = [[0,0], [10,0], [10,10], [0,10]]\n *\n * let poly = polygon({ points: roof })\n * or\n * let poly = polygon({ points: [roof, wall] })\n * or\n * let poly = polygon({ points: roof, paths: [0, 1, 2] })\n * or\n * let poly = polygon({ points: [roof, wall], paths: [[0, 1, 2], [3, 4, 5, 6]] })\n */\nconst polygon = (options) => {\n  const defaults = {\n    points: [],\n    paths: []\n  }\n  const { points, paths } = Object.assign({}, defaults, options)\n\n  if (!(Array.isArray(points) && Array.isArray(paths))) throw new Error('points and paths must be arrays')\n\n  let listofpolys = points\n  if (Array.isArray(points[0])) {\n    if (!Array.isArray(points[0][0])) {\n      // points is an array of something... convert to list\n      listofpolys = [points]\n    }\n  }\n\n  listofpolys.forEach((list, i) => {\n    if (!Array.isArray(list)) throw new Error('list of points ' + i + ' must be an array')\n    if (list.length < 3) throw new Error('list of points ' + i + ' must contain three or more points')\n    list.forEach((point, j) => {\n      if (!Array.isArray(point)) throw new Error('list of points ' + i + ', point ' + j + ' must be an array')\n      if (point.length < 2) throw new Error('list of points ' + i + ', point ' + j + ' must contain by X and Y values')\n    })\n  })\n\n  let listofpaths = paths\n  if (paths.length === 0) {\n    // create a list of paths based on the points\n    let count = 0\n    listofpaths = listofpolys.map((list) => list.map((point) => count++))\n  }\n\n  // flatten the listofpoints for indexed access\n  const allpoints = []\n  listofpolys.forEach((list) => list.forEach((point) => allpoints.push(point)))\n\n  let sides = []\n  listofpaths.forEach((path) => {\n    const setofpoints = path.map((index) => allpoints[index])\n    const geometry = geom2.fromPoints(setofpoints)\n    sides = sides.concat(geom2.toSides(geometry))\n  })\n  return geom2.create(sides)\n}\n\nmodule.exports = polygon\n", "const vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned rectangle in two dimensional space with four sides at right angles.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of rectangle\n * @param {Array} [options.size=[2,2]] - dimension of rectangle, width and length\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.rectangle\n *\n * @example\n * let myshape = rectangle({size: [10, 20]})\n */\nconst rectangle = (options) => {\n  const defaults = {\n    center: [0, 0],\n    size: [2, 2]\n  }\n  const { center, size } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isNumberArray(size, 2)) throw new Error('size must be an array of X and Y values')\n  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')\n\n  const point = [size[0] / 2, size[1] / 2]\n  const pswap = [point[0], -point[1]]\n\n  const points = [\n    vec2.subtract(vec2.create(), center, point),\n    vec2.add(vec2.create(), center, pswap),\n    vec2.add(vec2.create(), center, point),\n    vec2.subtract(vec2.create(), center, pswap)\n  ]\n  return geom2.fromPoints(points)\n}\n\nmodule.exports = rectangle\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\nconst createCorners = (center, size, radius, segments, slice, positive) => {\n  const pitch = (TAU / 4) * slice / segments\n  const cospitch = cos(pitch)\n  const sinpitch = sin(pitch)\n\n  const layersegments = segments - slice\n  let layerradius = radius * cospitch\n  let layeroffset = size[2] - (radius - (radius * sinpitch))\n  if (!positive) layeroffset = (radius - (radius * sinpitch)) - size[2]\n\n  layerradius = layerradius > EPS ? layerradius : 0\n\n  const corner0 = vec3.add(vec3.create(), center, [size[0] - radius, size[1] - radius, layeroffset])\n  const corner1 = vec3.add(vec3.create(), center, [radius - size[0], size[1] - radius, layeroffset])\n  const corner2 = vec3.add(vec3.create(), center, [radius - size[0], radius - size[1], layeroffset])\n  const corner3 = vec3.add(vec3.create(), center, [size[0] - radius, radius - size[1], layeroffset])\n  const corner0Points = []\n  const corner1Points = []\n  const corner2Points = []\n  const corner3Points = []\n  for (let i = 0; i <= layersegments; i++) {\n    const radians = layersegments > 0 ? TAU / 4 * i / layersegments : 0\n    const point2d = vec2.fromAngleRadians(vec2.create(), radians)\n    vec2.scale(point2d, point2d, layerradius)\n    const point3d = vec3.fromVec2(vec3.create(), point2d)\n    corner0Points.push(vec3.add(vec3.create(), corner0, point3d))\n    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)\n    corner1Points.push(vec3.add(vec3.create(), corner1, point3d))\n    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)\n    corner2Points.push(vec3.add(vec3.create(), corner2, point3d))\n    vec3.rotateZ(point3d, point3d, [0, 0, 0], TAU / 4)\n    corner3Points.push(vec3.add(vec3.create(), corner3, point3d))\n  }\n  if (!positive) {\n    corner0Points.reverse()\n    corner1Points.reverse()\n    corner2Points.reverse()\n    corner3Points.reverse()\n    return [corner3Points, corner2Points, corner1Points, corner0Points]\n  }\n  return [corner0Points, corner1Points, corner2Points, corner3Points]\n}\n\nconst stitchCorners = (previousCorners, currentCorners) => {\n  const polygons = []\n  for (let i = 0; i < previousCorners.length; i++) {\n    const previous = previousCorners[i]\n    const current = currentCorners[i]\n    for (let j = 0; j < (previous.length - 1); j++) {\n      polygons.push(poly3.create([previous[j], previous[j + 1], current[j]]))\n\n      if (j < (current.length - 1)) {\n        polygons.push(poly3.create([current[j], previous[j + 1], current[j + 1]]))\n      }\n    }\n  }\n  return polygons\n}\n\nconst stitchWalls = (previousCorners, currentCorners) => {\n  const polygons = []\n  for (let i = 0; i < previousCorners.length; i++) {\n    let previous = previousCorners[i]\n    let current = currentCorners[i]\n    const p0 = previous[previous.length - 1]\n    const c0 = current[current.length - 1]\n\n    const j = (i + 1) % previousCorners.length\n    previous = previousCorners[j]\n    current = currentCorners[j]\n    const p1 = previous[0]\n    const c1 = current[0]\n\n    polygons.push(poly3.create([p0, p1, c1, c0]))\n  }\n  return polygons\n}\n\nconst stitchSides = (bottomCorners, topCorners) => {\n  // make a copy and reverse the bottom corners\n  bottomCorners = [bottomCorners[3], bottomCorners[2], bottomCorners[1], bottomCorners[0]]\n  bottomCorners = bottomCorners.map((corner) => corner.slice().reverse())\n\n  const bottomPoints = []\n  bottomCorners.forEach((corner) => {\n    corner.forEach((point) => bottomPoints.push(point))\n  })\n\n  const topPoints = []\n  topCorners.forEach((corner) => {\n    corner.forEach((point) => topPoints.push(point))\n  })\n\n  const polygons = []\n  for (let i = 0; i < topPoints.length; i++) {\n    const j = (i + 1) % topPoints.length\n    polygons.push(poly3.create([bottomPoints[i], bottomPoints[j], topPoints[j], topPoints[i]]))\n  }\n  return polygons\n}\n\n/**\n * Construct an axis-aligned solid cuboid in three dimensional space with rounded corners.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of rounded cube\n * @param {Array} [options.size=[2,2,2]] - dimension of rounded cube; width, depth, height\n * @param {Number} [options.roundRadius=0.2] - radius of rounded edges\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.roundedCuboid\n *\n * @example\n * let mycube = roundedCuboid({size: [10, 20, 10], roundRadius: 2, segments: 16})\n */\nconst roundedCuboid = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    size: [2, 2, 2],\n    roundRadius: 0.2,\n    segments: 32\n  }\n  let { center, size, roundRadius, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isNumberArray(size, 3)) throw new Error('size must be an array of X, Y and Z values')\n  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')\n  if (!isGT(roundRadius, 0)) throw new Error('roundRadius must be greater than zero')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  size = size.map((v) => v / 2) // convert to radius\n\n  if (roundRadius > (size[0] - EPS) ||\n      roundRadius > (size[1] - EPS) ||\n      roundRadius > (size[2] - EPS)) throw new Error('roundRadius must be smaller then the radius of all dimensions')\n\n  segments = Math.floor(segments / 4)\n\n  let prevCornersPos = null\n  let prevCornersNeg = null\n  let polygons = []\n  for (let slice = 0; slice <= segments; slice++) {\n    const cornersPos = createCorners(center, size, roundRadius, segments, slice, true)\n    const cornersNeg = createCorners(center, size, roundRadius, segments, slice, false)\n\n    if (slice === 0) {\n      polygons = polygons.concat(stitchSides(cornersNeg, cornersPos))\n    }\n\n    if (prevCornersPos) {\n      polygons = polygons.concat(stitchCorners(prevCornersPos, cornersPos),\n        stitchWalls(prevCornersPos, cornersPos))\n    }\n    if (prevCornersNeg) {\n      polygons = polygons.concat(stitchCorners(prevCornersNeg, cornersNeg),\n        stitchWalls(prevCornersNeg, cornersNeg))\n    }\n\n    if (slice === segments) {\n      // add the top\n      let points = cornersPos.map((corner) => corner[0])\n      polygons.push(poly3.create(points))\n      // add the bottom\n      points = cornersNeg.map((corner) => corner[0])\n      polygons.push(poly3.create(points))\n    }\n\n    prevCornersPos = cornersPos\n    prevCornersNeg = cornersNeg\n  }\n\n  return geom3.create(polygons)\n}\n\nmodule.exports = roundedCuboid\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec3 = require('../maths/vec3')\n\nconst geom3 = require('../geometries/geom3')\nconst poly3 = require('../geometries/poly3')\n\nconst { sin, cos } = require('../maths/utils/trigonometry')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct a Z axis-aligned solid cylinder in three dimensional space with rounded ends.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of cylinder\n * @param {Number} [options.height=2] - height of cylinder\n * @param {Number} [options.radius=1] - radius of cylinder\n * @param {Number} [options.roundRadius=0.2] - radius of rounded edges\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.roundedCylinder\n *\n * @example\n * let myshape = roundedCylinder({ height: 10, radius: 2, roundRadius: 0.5 })\n */\nconst roundedCylinder = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    height: 2,\n    radius: 1,\n    roundRadius: 0.2,\n    segments: 32\n  }\n  const { center, height, radius, roundRadius, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 3)) throw new Error('center must be an array of X, Y and Z values')\n  if (!isGT(height, 0)) throw new Error('height must be greater then zero')\n  if (!isGT(radius, 0)) throw new Error('radius must be greater then zero')\n  if (!isGT(roundRadius, 0)) throw new Error('roundRadius must be greater then zero')\n  if (roundRadius > (radius - EPS)) throw new Error('roundRadius must be smaller then the radius')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  const start = [0, 0, -(height / 2)]\n  const end = [0, 0, height / 2]\n  const direction = vec3.subtract(vec3.create(), end, start)\n  const length = vec3.length(direction)\n\n  if ((2 * roundRadius) > (length - EPS)) throw new Error('height must be larger than twice roundRadius')\n\n  let defaultnormal\n  if (Math.abs(direction[0]) > Math.abs(direction[1])) {\n    defaultnormal = vec3.fromValues(0, 1, 0)\n  } else {\n    defaultnormal = vec3.fromValues(1, 0, 0)\n  }\n\n  const zvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), direction), roundRadius)\n  const xvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), vec3.cross(vec3.create(), zvector, defaultnormal)), radius)\n  const yvector = vec3.scale(vec3.create(), vec3.normalize(vec3.create(), vec3.cross(vec3.create(), xvector, zvector)), radius)\n\n  vec3.add(start, start, zvector)\n  vec3.subtract(end, end, zvector)\n\n  const qsegments = Math.floor(0.25 * segments)\n\n  const fromPoints = (points) => {\n    // adjust the points to center\n    const newpoints = points.map((point) => vec3.add(point, point, center))\n    return poly3.create(newpoints)\n  }\n\n  const polygons = []\n  const v1 = vec3.create()\n  const v2 = vec3.create()\n  let prevcylinderpoint\n  for (let slice1 = 0; slice1 <= segments; slice1++) {\n    const angle = TAU * slice1 / segments\n    const cylinderpoint = vec3.add(vec3.create(), vec3.scale(v1, xvector, cos(angle)), vec3.scale(v2, yvector, sin(angle)))\n    if (slice1 > 0) {\n      // cylinder wall\n      let points = []\n      points.push(vec3.add(vec3.create(), start, cylinderpoint))\n      points.push(vec3.add(vec3.create(), start, prevcylinderpoint))\n      points.push(vec3.add(vec3.create(), end, prevcylinderpoint))\n      points.push(vec3.add(vec3.create(), end, cylinderpoint))\n      polygons.push(fromPoints(points))\n\n      let prevcospitch, prevsinpitch\n      for (let slice2 = 0; slice2 <= qsegments; slice2++) {\n        const pitch = TAU / 4 * slice2 / qsegments\n        const cospitch = cos(pitch)\n        const sinpitch = sin(pitch)\n        if (slice2 > 0) {\n          // cylinder rounding, start\n          points = []\n          let point\n          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, prevcylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch)))\n          points.push(point)\n          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, cylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch)))\n          points.push(point)\n          if (slice2 < qsegments) {\n            point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, cylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch)))\n            points.push(point)\n          }\n          point = vec3.add(vec3.create(), start, vec3.subtract(v1, vec3.scale(v1, prevcylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch)))\n          points.push(point)\n\n          polygons.push(fromPoints(points))\n\n          // cylinder rounding, end\n          points = []\n          point = vec3.add(vec3.create(), vec3.scale(v1, prevcylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch))\n          vec3.add(point, point, end)\n          points.push(point)\n          point = vec3.add(vec3.create(), vec3.scale(v1, cylinderpoint, prevcospitch), vec3.scale(v2, zvector, prevsinpitch))\n          vec3.add(point, point, end)\n          points.push(point)\n          if (slice2 < qsegments) {\n            point = vec3.add(vec3.create(), vec3.scale(v1, cylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch))\n            vec3.add(point, point, end)\n            points.push(point)\n          }\n          point = vec3.add(vec3.create(), vec3.scale(v1, prevcylinderpoint, cospitch), vec3.scale(v2, zvector, sinpitch))\n          vec3.add(point, point, end)\n          points.push(point)\n          points.reverse()\n\n          polygons.push(fromPoints(points))\n        }\n        prevcospitch = cospitch\n        prevsinpitch = sinpitch\n      }\n    }\n    prevcylinderpoint = cylinderpoint\n  }\n  const result = geom3.create(polygons)\n  return result\n}\n\nmodule.exports = roundedCylinder\n", "const { EPS, TAU } = require('../maths/constants')\n\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned rectangle in two dimensional space with rounded corners.\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of rounded rectangle\n * @param {Array} [options.size=[2,2]] - dimension of rounded rectangle; width and length\n * @param {Number} [options.roundRadius=0.2] - round radius of corners\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.roundedRectangle\n *\n * @example\n * let myshape = roundedRectangle({size: [10, 20], roundRadius: 2})\n */\nconst roundedRectangle = (options) => {\n  const defaults = {\n    center: [0, 0],\n    size: [2, 2],\n    roundRadius: 0.2,\n    segments: 32\n  }\n  let { center, size, roundRadius, segments } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isNumberArray(size, 2)) throw new Error('size must be an array of X and Y values')\n  if (!size.every((n) => n > 0)) throw new Error('size values must be greater than zero')\n  if (!isGT(roundRadius, 0)) throw new Error('roundRadius must be greater than zero')\n  if (!isGTE(segments, 4)) throw new Error('segments must be four or more')\n\n  size = size.map((v) => v / 2) // convert to radius\n\n  if (roundRadius > (size[0] - EPS) ||\n      roundRadius > (size[1] - EPS)) throw new Error('roundRadius must be smaller then the radius of all dimensions')\n\n  const cornersegments = Math.floor(segments / 4)\n\n  // create sets of points that define the corners\n  const corner0 = vec2.add(vec2.create(), center, [size[0] - roundRadius, size[1] - roundRadius])\n  const corner1 = vec2.add(vec2.create(), center, [roundRadius - size[0], size[1] - roundRadius])\n  const corner2 = vec2.add(vec2.create(), center, [roundRadius - size[0], roundRadius - size[1]])\n  const corner3 = vec2.add(vec2.create(), center, [size[0] - roundRadius, roundRadius - size[1]])\n  const corner0Points = []\n  const corner1Points = []\n  const corner2Points = []\n  const corner3Points = []\n  for (let i = 0; i <= cornersegments; i++) {\n    const radians = TAU / 4 * i / cornersegments\n    const point = vec2.fromAngleRadians(vec2.create(), radians)\n    vec2.scale(point, point, roundRadius)\n    corner0Points.push(vec2.add(vec2.create(), corner0, point))\n    vec2.rotate(point, point, vec2.create(), TAU / 4)\n    corner1Points.push(vec2.add(vec2.create(), corner1, point))\n    vec2.rotate(point, point, vec2.create(), TAU / 4)\n    corner2Points.push(vec2.add(vec2.create(), corner2, point))\n    vec2.rotate(point, point, vec2.create(), TAU / 4)\n    corner3Points.push(vec2.add(vec2.create(), corner3, point))\n  }\n\n  return geom2.fromPoints(corner0Points.concat(corner1Points, corner2Points, corner3Points))\n}\n\nmodule.exports = roundedRectangle\n", "const ellipsoid = require('./ellipsoid')\n\nconst { isGT } = require('./commonChecks')\n\n/**\n * Construct a sphere in three dimensional space where all points are at the same distance from the center.\n * @see [ellipsoid]{@link module:modeling/primitives.ellipsoid} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0,0]] - center of sphere\n * @param {Number} [options.radius=1] - radius of sphere\n * @param {Number} [options.segments=32] - number of segments to create per full rotation\n * @param {Array} [options.axes] -  an array with three vectors for the x, y and z base vectors\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.sphere\n *\n * @example\n * let myshape = sphere({radius: 5})\n */\nconst sphere = (options) => {\n  const defaults = {\n    center: [0, 0, 0],\n    radius: 1,\n    segments: 32,\n    axes: [[1, 0, 0], [0, -1, 0], [0, 0, 1]]\n  }\n  let { center, radius, segments, axes } = Object.assign({}, defaults, options)\n\n  if (!isGT(radius, 0)) throw new Error('radius must be greater than zero')\n\n  radius = [radius, radius, radius]\n\n  return ellipsoid({ center, radius, segments, axes })\n}\n\nmodule.exports = sphere\n", "const rectangle = require('./rectangle')\n\nconst { isGT } = require('./commonChecks')\n\n/**\n * Construct an axis-aligned square in two dimensional space with four equal sides at right angles.\n * @see [rectangle]{@link module:modeling/primitives.rectangle} for more options\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of square\n * @param {Number} [options.size=2] - dimension of square\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.square\n *\n * @example\n * let myshape = square({size: 10})\n */\nconst square = (options) => {\n  const defaults = {\n    center: [0, 0],\n    size: 2\n  }\n  let { center, size } = Object.assign({}, defaults, options)\n\n  if (!isGT(size, 0)) throw new Error('size must be greater than zero')\n\n  size = [size, size]\n\n  return rectangle({ center, size })\n}\n\nmodule.exports = square\n", "const { TAU } = require('../maths/constants')\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isGT, isGTE, isNumberArray } = require('./commonChecks')\n\n// @see http://www.jdawiseman.com/papers/easymath/surds_star_inner_radius.html\nconst getRadiusRatio = (vertices, density) => {\n  if (vertices > 0 && density > 1 && density < vertices / 2) {\n    return Math.cos(Math.PI * density / vertices) / Math.cos(Math.PI * (density - 1) / vertices)\n  }\n  return 0\n}\n\nconst getPoints = (vertices, radius, startAngle, center) => {\n  const a = TAU / vertices\n\n  const points = []\n  for (let i = 0; i < vertices; i++) {\n    const point = vec2.fromAngleRadians(vec2.create(), a * i + startAngle)\n    vec2.scale(point, point, radius)\n    vec2.add(point, center, point)\n    points.push(point)\n  }\n  return points\n}\n\n/**\n * Construct a star in two dimensional space.\n * @see https://en.wikipedia.org/wiki/Star_polygon\n * @param {Object} [options] - options for construction\n * @param {Array} [options.center=[0,0]] - center of star\n * @param {Number} [options.vertices=5] - number of vertices (P) on the star\n * @param {Number} [options.density=2] - density (Q) of star\n * @param {Number} [options.outerRadius=1] - outer radius of vertices\n * @param {Number} [options.innerRadius=0] - inner radius of vertices, or zero to calculate\n * @param {Number} [options.startAngle=0] - starting angle for first vertice, in radians\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.star\n *\n * @example\n * let star1 = star({vertices: 8, outerRadius: 10}) // star with 8/2 density\n * let star2 = star({vertices: 12, outerRadius: 40, innerRadius: 20}) // star with given radius\n */\nconst star = (options) => {\n  const defaults = {\n    center: [0, 0],\n    vertices: 5,\n    outerRadius: 1,\n    innerRadius: 0,\n    density: 2,\n    startAngle: 0\n  }\n  let { center, vertices, outerRadius, innerRadius, density, startAngle } = Object.assign({}, defaults, options)\n\n  if (!isNumberArray(center, 2)) throw new Error('center must be an array of X and Y values')\n  if (!isGTE(vertices, 2)) throw new Error('vertices must be two or more')\n  if (!isGT(outerRadius, 0)) throw new Error('outerRadius must be greater than zero')\n  if (!isGTE(innerRadius, 0)) throw new Error('innerRadius must be greater than zero')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be greater than zero')\n\n  // force integers\n  vertices = Math.floor(vertices)\n  density = Math.floor(density)\n\n  startAngle = startAngle % TAU\n\n  if (innerRadius === 0) {\n    if (!isGTE(density, 2)) throw new Error('density must be two or more')\n    innerRadius = outerRadius * getRadiusRatio(vertices, density)\n  }\n\n  const centerv = vec2.clone(center)\n\n  const outerPoints = getPoints(vertices, outerRadius, startAngle, centerv)\n  const innerPoints = getPoints(vertices, innerRadius, startAngle + Math.PI / vertices, centerv)\n\n  const allPoints = []\n  for (let i = 0; i < vertices; i++) {\n    allPoints.push(outerPoints[i])\n    allPoints.push(innerPoints[i])\n  }\n\n  return geom2.fromPoints(allPoints)\n}\n\nmodule.exports = star\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\nconst plane = require('../../maths/plane')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Mirror the given objects using the given options.\n * @param {Object} options - options for mirror\n * @param {Array} [options.origin=[0,0,0]] - the origin of the plane\n * @param {Array} [options.normal=[0,0,1]] - the normal vector of the plane\n * @param {...Object} objects - the objects to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirror\n *\n * @example\n * let myshape = mirror({normal: [0,0,10]}, cube({center: [0,0,15], radius: [20, 25, 5]}))\n */\nconst mirror = (options, ...objects) => {\n  const defaults = {\n    origin: [0, 0, 0],\n    normal: [0, 0, 1] // Z axis\n  }\n  const { origin, normal } = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const planeOfMirror = plane.fromNormalAndPoint(plane.create(), normal, origin)\n  // verify the plane, i.e. check that the given normal was valid\n  if (Number.isNaN(planeOfMirror[0])) {\n    throw new Error('the given origin and normal do not define a proper plane')\n  }\n\n  const matrix = mat4.mirrorByPlane(mat4.create(), planeOfMirror)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Mirror the given objects about the X axis.\n * @param {...Object} objects - the objects to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirrorX\n */\nconst mirrorX = (...objects) => mirror({ normal: [1, 0, 0] }, objects)\n\n/**\n * Mirror the given objects about the Y axis.\n * @param {...Object} objects - the geometries to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirrorY\n */\nconst mirrorY = (...objects) => mirror({ normal: [0, 1, 0] }, objects)\n\n/**\n * Mirror the given objects about the Z axis.\n * @param {...Object} objects - the geometries to mirror\n * @return {Object|Array} the mirrored object, or a list of mirrored objects\n * @alias module:modeling/transforms.mirrorZ\n */\nconst mirrorZ = (...objects) => mirror({ normal: [0, 0, 1] }, objects)\n\nmodule.exports = {\n  mirror,\n  mirrorX,\n  mirrorY,\n  mirrorZ\n}\n", "const plane = require('../../../maths/plane')\nconst vec3 = require('../../../maths/vec3')\n\n/**\n * Calculate the plane of the given slice.\n * NOTE: The slice (and all points) are assumed to be planar from the beginning.\n * @param {slice} slice - the slice\n * @returns {plane} the plane of the slice\n * @alias module:modeling/extrusions/slice.calculatePlane\n *\n * @example\n * let myplane = calculatePlane(slice)\n */\nconst calculatePlane = (slice) => {\n  const edges = slice.edges\n  if (edges.length < 3) throw new Error('slices must have 3 or more edges to calculate a plane')\n\n  // find the midpoint of the slice, which will lie on the plane by definition\n  const midpoint = edges.reduce((point, edge) => vec3.add(vec3.create(), point, edge[0]), vec3.create())\n  vec3.scale(midpoint, midpoint, 1 / edges.length)\n\n  // find the farthest edge from the midpoint, which will be on an outside edge\n  let farthestEdge\n  let distance = 0\n  edges.forEach((edge) => {\n    // Make sure that the farthest edge is not a self-edge\n    if (!vec3.equals(edge[0], edge[1])) {\n      const d = vec3.squaredDistance(midpoint, edge[0])\n      if (d > distance) {\n        farthestEdge = edge\n        distance = d\n      }\n    }\n  })\n  // find the before edge\n  const beforeEdge = edges.find((edge) => vec3.equals(edge[1], farthestEdge[0]))\n\n  return plane.fromPoints(plane.create(), beforeEdge[0], farthestEdge[0], farthestEdge[1])\n}\n\nmodule.exports = calculatePlane\n", "/**\n * Represents a 3D geometry consisting of a list of edges.\n * @typedef {Object} slice\n * @property {Array} edges - list of edges, each edge containing two points (3D)\n */\n\n/**\n * Creates a new empty slice.\n *\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.create\n */\nconst create = (edges) => {\n  if (!edges) {\n    edges = []\n  }\n  return { edges }\n}\n\nmodule.exports = create\n", "const create = require('./create')\n\nconst vec3 = require('../../../maths/vec3')\n\n/**\n * Create a deep clone of the given slice.\n *\n * @param {slice} [out] - receiving slice\n * @param {slice} slice - slice to clone\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.clone\n */\nconst clone = (...params) => {\n  let out\n  let slice\n  if (params.length === 1) {\n    out = create()\n    slice = params[0]\n  } else {\n    out = params[0]\n    slice = params[1]\n  }\n  // deep clone of edges\n  out.edges = slice.edges.map((edge) => [vec3.clone(edge[0]), vec3.clone(edge[1])])\n  return out\n}\n\nmodule.exports = clone\n", "const vec3 = require('../../../maths/vec3')\n\n/**\n * Determine if the given slices have the same edges.\n * @param {slice} a - the first slice to compare\n * @param {slice} b - the second slice to compare\n * @returns {Boolean} true if the slices are equal\n * @alias module:modeling/extrusions/slice.equals\n */\nconst equals = (a, b) => {\n  const aedges = a.edges\n  const bedges = b.edges\n\n  if (aedges.length !== bedges.length) {\n    return false\n  }\n\n  const isEqual = aedges.reduce((acc, aedge, i) => {\n    const bedge = bedges[i]\n    const d = vec3.squaredDistance(aedge[0], bedge[0])\n    return acc && (d < Number.EPSILON)\n  }, true)\n\n  return isEqual\n}\n\nmodule.exports = equals\n", "const vec3 = require('../../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Create a slice from the given points.\n *\n * @param {Array} points - list of points, where each point is either 2D or 3D\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.fromPoints\n *\n * @example\n * const points = [\n *   [0,  0],\n *   [0, 10],\n *   [0, 10]\n * ]\n * const slice = fromPoints(points)\n */\nconst fromPoints = (points) => {\n  if (!Array.isArray(points)) throw new Error('the given points must be an array')\n  if (points.length < 3) throw new Error('the given points must contain THREE or more points')\n\n  // create a list of edges from the points\n  const edges = []\n  let prevpoint = points[points.length - 1]\n  points.forEach((point) => {\n    if (point.length === 2) edges.push([vec3.fromVec2(vec3.create(), prevpoint), vec3.fromVec2(vec3.create(), point)])\n    if (point.length === 3) edges.push([prevpoint, point])\n    prevpoint = point\n  })\n  return create(edges)\n}\n\nmodule.exports = fromPoints\n", "const vec3 = require('../../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Create a slice from the given sides (see geom2).\n *\n * @param {Array} sides - list of sides from geom2\n * @returns {slice} a new slice\n * @alias module:modeling/extrusions/slice.fromSides\n *\n * @example\n * const myshape = circle({radius: 10})\n * const slice = fromSides(geom2.toSides(myshape))\n */\nconst fromSides = (sides) => {\n  if (!Array.isArray(sides)) throw new Error('the given sides must be an array')\n\n  // create a list of edges from the sides\n  const edges = []\n  sides.forEach((side) => {\n    edges.push([vec3.fromVec2(vec3.create(), side[0]), vec3.fromVec2(vec3.create(), side[1])])\n  })\n  return create(edges)\n}\n\nmodule.exports = fromSides\n", "/**\n * Determine if the given object is a slice.\n * @param {slice} object - the object to interrogate\n * @returns {Boolean} true if the object matches a slice\n * @alias module:modeling/extrusions/slice.isA\n */\nconst isA = (object) => {\n  if (object && typeof object === 'object') {\n    if ('edges' in object) {\n      if (Array.isArray(object.edges)) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nmodule.exports = isA\n", "const create = require('./create')\n\n/**\n * Reverse the edges of the given slice.\n *\n * @param {slice} [out] - receiving slice\n * @param {slice} slice - slice to reverse\n * @returns {slice} reverse of the slice\n * @alias module:modeling/extrusions/slice.reverse\n */\nconst reverse = (...params) => {\n  let out\n  let slice\n  if (params.length === 1) {\n    out = create()\n    slice = params[0]\n  } else {\n    out = params[0]\n    slice = params[1]\n  }\n  // reverse the edges\n  out.edges = slice.edges.map((edge) => [edge[1], edge[0]])\n  return out\n}\n\nmodule.exports = reverse\n", "/**\n * Produces an array of edges from the given slice.\n * The returned array should not be modified as the data is shared with the slice.\n * @param {slice} slice - the slice\n * @returns {Array} an array of edges, each edge contains an array of two points (3D)\n * @alias module:modeling/extrusions/slice.toEdges\n *\n * @example\n * let sharededges = toEdges(slice)\n */\nconst toEdges = (slice) => slice.edges\n\nmodule.exports = toEdges\n", "\n// Simon Tatham's linked list merge sort algorithm\n// https://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nconst sortLinked = (list, fn) => {\n  let i, p, q, e, numMerges\n  let inSize = 1\n\n  do {\n    p = list\n    list = null\n    let tail = null\n    numMerges = 0\n\n    while (p) {\n      numMerges++\n      q = p\n      let pSize = 0\n      for (i = 0; i < inSize; i++) {\n        pSize++\n        q = q.nextZ\n        if (!q) break\n      }\n\n      let qSize = inSize\n\n      while (pSize > 0 || (qSize > 0 && q)) {\n        if (pSize !== 0 && (qSize === 0 || !q || fn(p) <= fn(q))) {\n          e = p\n          p = p.nextZ\n          pSize--\n        } else {\n          e = q\n          q = q.nextZ\n          qSize--\n        }\n\n        if (tail) tail.nextZ = e\n        else list = e\n\n        e.prevZ = tail\n        tail = e\n      }\n\n      p = q\n    }\n\n    tail.nextZ = null\n    inSize *= 2\n  } while (numMerges > 1)\n\n  return list\n}\n\nmodule.exports = sortLinked\n", "const sortLinked = require('./linkedListSort')\n\nclass Node {\n  constructor (i, x, y) {\n    // vertex index in coordinates array\n    this.i = i\n\n    // vertex coordinates\n    this.x = x\n    this.y = y\n\n    // previous and next vertex nodes in a polygon ring\n    this.prev = null\n    this.next = null\n\n    // z-order curve value\n    this.z = null\n\n    // previous and next nodes in z-order\n    this.prevZ = null\n    this.nextZ = null\n\n    // indicates whether this is a steiner point\n    this.steiner = false\n  }\n}\n\n/*\n * create a node and optionally link it with previous one (in a circular doubly linked list)\n */\nconst insertNode = (i, x, y, last) => {\n  const p = new Node(i, x, y)\n\n  if (!last) {\n    p.prev = p\n    p.next = p\n  } else {\n    p.next = last.next\n    p.prev = last\n    last.next.prev = p\n    last.next = p\n  }\n\n  return p\n}\n\n/*\n * remove a node and join prev with next nodes\n */\nconst removeNode = (p) => {\n  p.next.prev = p.prev\n  p.prev.next = p.next\n\n  if (p.prevZ) p.prevZ.nextZ = p.nextZ\n  if (p.nextZ) p.nextZ.prevZ = p.prevZ\n}\n\nmodule.exports = { Node, insertNode, removeNode, sortLinked }\n", "\n/*\n * check if a point lies within a convex triangle\n */\nconst pointInTriangle = (ax, ay, bx, by, cx, cy, px, py) => (\n  (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\n      (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\n      (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0\n)\n\n/*\n * signed area of a triangle\n */\nconst area = (p, q, r) => (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y)\n\nmodule.exports = { area, pointInTriangle }\n", "const { Node, insertNode, removeNode } = require('./linkedList')\nconst { area } = require('./triangle')\n\n/*\n * create a circular doubly linked list from polygon points in the specified winding order\n */\nconst linkedPolygon = (data, start, end, dim, clockwise) => {\n  let last\n\n  if (clockwise === (signedArea(data, start, end, dim) > 0)) {\n    for (let i = start; i < end; i += dim) {\n      last = insertNode(i, data[i], data[i + 1], last)\n    }\n  } else {\n    for (let i = end - dim; i >= start; i -= dim) {\n      last = insertNode(i, data[i], data[i + 1], last)\n    }\n  }\n\n  if (last && equals(last, last.next)) {\n    removeNode(last)\n    last = last.next\n  }\n\n  return last\n}\n\n/*\n * eliminate colinear or duplicate points\n */\nconst filterPoints = (start, end) => {\n  if (!start) return start\n  if (!end) end = start\n\n  let p = start\n  let again\n  do {\n    again = false\n\n    if (!p.steiner && (equals(p, p.next) || area(p.prev, p, p.next) === 0)) {\n      removeNode(p)\n      p = end = p.prev\n      if (p === p.next) break\n      again = true\n    } else {\n      p = p.next\n    }\n  } while (again || p !== end)\n\n  return end\n}\n\n/*\n * go through all polygon nodes and cure small local self-intersections\n */\nconst cureLocalIntersections = (start, triangles, dim) => {\n  let p = start\n  do {\n    const a = p.prev\n    const b = p.next.next\n\n    if (!equals(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {\n      triangles.push(a.i / dim)\n      triangles.push(p.i / dim)\n      triangles.push(b.i / dim)\n\n      // remove two nodes involved\n      removeNode(p)\n      removeNode(p.next)\n\n      p = start = b\n    }\n\n    p = p.next\n  } while (p !== start)\n\n  return filterPoints(p)\n}\n\n/*\n * check if a polygon diagonal intersects any polygon segments\n */\nconst intersectsPolygon = (a, b) => {\n  let p = a\n  do {\n    if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n        intersects(p, p.next, a, b)) return true\n    p = p.next\n  } while (p !== a)\n\n  return false\n}\n\n/*\n * check if a polygon diagonal is locally inside the polygon\n */\nconst locallyInside = (a, b) => area(a.prev, a, a.next) < 0\n  ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0\n  : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0\n\n/*\n * check if the middle point of a polygon diagonal is inside the polygon\n */\nconst middleInside = (a, b) => {\n  let p = a\n  let inside = false\n  const px = (a.x + b.x) / 2\n  const py = (a.y + b.y) / 2\n  do {\n    if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\n        (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x)) { inside = !inside }\n    p = p.next\n  } while (p !== a)\n\n  return inside\n}\n\n/*\n * link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two\n * if one belongs to the outer ring and another to a hole, it merges it into a single ring\n */\nconst splitPolygon = (a, b) => {\n  const a2 = new Node(a.i, a.x, a.y)\n  const b2 = new Node(b.i, b.x, b.y)\n  const an = a.next\n  const bp = b.prev\n\n  a.next = b\n  b.prev = a\n\n  a2.next = an\n  an.prev = a2\n\n  b2.next = a2\n  a2.prev = b2\n\n  bp.next = b2\n  b2.prev = bp\n\n  return b2\n}\n\n/*\n * check if a diagonal between two polygon nodes is valid (lies in polygon interior)\n */\nconst isValidDiagonal = (a, b) => a.next.i !== b.i &&\n    a.prev.i !== b.i &&\n    !intersectsPolygon(a, b) && // doesn't intersect other edges\n    (\n      locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b) && // locally visible\n        (area(a.prev, a, b.prev) || area(a, b.prev, b)) || // does not create opposite-facing sectors\n        equals(a, b) && area(a.prev, a, a.next) > 0 && area(b.prev, b, b.next) > 0\n    )\n\n/*\n * check if two segments intersect\n */\nconst intersects = (p1, q1, p2, q2) => {\n  const o1 = Math.sign(area(p1, q1, p2))\n  const o2 = Math.sign(area(p1, q1, q2))\n  const o3 = Math.sign(area(p2, q2, p1))\n  const o4 = Math.sign(area(p2, q2, q1))\n\n  if (o1 !== o2 && o3 !== o4) return true // general case\n\n  if (o1 === 0 && onSegment(p1, p2, q1)) return true // p1, q1 and p2 are colinear and p2 lies on p1q1\n  if (o2 === 0 && onSegment(p1, q2, q1)) return true // p1, q1 and q2 are colinear and q2 lies on p1q1\n  if (o3 === 0 && onSegment(p2, p1, q2)) return true // p2, q2 and p1 are colinear and p1 lies on p2q2\n  if (o4 === 0 && onSegment(p2, q1, q2)) return true // p2, q2 and q1 are colinear and q1 lies on p2q2\n\n  return false\n}\n\n/*\n * for colinear points p, q, r, check if point q lies on segment pr\n */\nconst onSegment = (p, q, r) => q.x <= Math.max(p.x, r.x) &&\n    q.x >= Math.min(p.x, r.x) &&\n    q.y <= Math.max(p.y, r.y) &&\n    q.y >= Math.min(p.y, r.y)\n\nconst signedArea = (data, start, end, dim) => {\n  let sum = 0\n  for (let i = start, j = end - dim; i < end; i += dim) {\n    sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1])\n    j = i\n  }\n\n  return sum\n}\n\n/*\n * check if two points are equal\n */\nconst equals = (p1, p2) => p1.x === p2.x && p1.y === p2.y\n\nmodule.exports = { cureLocalIntersections, filterPoints, isValidDiagonal, linkedPolygon, locallyInside, splitPolygon }\n", "const { filterPoints, linkedPolygon, locallyInside, splitPolygon } = require('./linkedPolygon')\nconst { area, pointInTriangle } = require('./triangle')\n\n/*\n * link every hole into the outer loop, producing a single-ring polygon without holes\n *\n * Original source from https://github.com/mapbox/earcut\n * Copyright (c) 2016 Mapbox\n */\nconst eliminateHoles = (data, holeIndices, outerNode, dim) => {\n  const queue = []\n\n  for (let i = 0, len = holeIndices.length; i < len; i++) {\n    const start = holeIndices[i] * dim\n    const end = i < len - 1 ? holeIndices[i + 1] * dim : data.length\n    const list = linkedPolygon(data, start, end, dim, false)\n    if (list === list.next) list.steiner = true\n    queue.push(getLeftmost(list))\n  }\n\n  queue.sort((a, b) => a.x - b.x) // compare X\n\n  // process holes from left to right\n  for (let i = 0; i < queue.length; i++) {\n    outerNode = eliminateHole(queue[i], outerNode)\n    outerNode = filterPoints(outerNode, outerNode.next)\n  }\n\n  return outerNode\n}\n\n/*\n * find a bridge between vertices that connects hole with an outer ring and link it\n */\nconst eliminateHole = (hole, outerNode) => {\n  const bridge = findHoleBridge(hole, outerNode)\n  if (!bridge) {\n    return outerNode\n  }\n\n  const bridgeReverse = splitPolygon(bridge, hole)\n\n  // filter colinear points around the cuts\n  const filteredBridge = filterPoints(bridge, bridge.next)\n  filterPoints(bridgeReverse, bridgeReverse.next)\n\n  // Check if input node was removed by the filtering\n  return outerNode === bridge ? filteredBridge : outerNode\n}\n\n/*\n * David Eberly's algorithm for finding a bridge between hole and outer polygon\n */\nconst findHoleBridge = (hole, outerNode) => {\n  let p = outerNode\n  const hx = hole.x\n  const hy = hole.y\n  let qx = -Infinity\n  let m\n\n  // find a segment intersected by a ray from the hole's leftmost point to the left\n  // segment's endpoint with lesser x will be potential connection point\n  do {\n    if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\n      const x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y)\n      if (x <= hx && x > qx) {\n        qx = x\n        if (x === hx) {\n          if (hy === p.y) return p\n          if (hy === p.next.y) return p.next\n        }\n\n        m = p.x < p.next.x ? p : p.next\n      }\n    }\n\n    p = p.next\n  } while (p !== outerNode)\n\n  if (!m) return null\n\n  if (hx === qx) return m // hole touches outer segment; pick leftmost endpoint\n\n  // look for points inside the triangle of hole point, segment intersection and endpoint\n  // if there are no points found, we have a valid connection\n  // otherwise choose the point of the minimum angle with the ray as connection point\n\n  const stop = m\n  const mx = m.x\n  const my = m.y\n  let tanMin = Infinity\n\n  p = m\n\n  do {\n    if (hx >= p.x && p.x >= mx && hx !== p.x &&\n        pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\n      const tan = Math.abs(hy - p.y) / (hx - p.x) // tangential\n\n      if (locallyInside(p, hole) && (tan < tanMin || (tan === tanMin && (p.x > m.x || (p.x === m.x && sectorContainsSector(m, p)))))) {\n        m = p\n        tanMin = tan\n      }\n    }\n\n    p = p.next\n  } while (p !== stop)\n\n  return m\n}\n\n/*\n * whether sector in vertex m contains sector in vertex p in the same coordinates\n */\nconst sectorContainsSector = (m, p) => area(m.prev, m, p.prev) < 0 && area(p.next, m, m.next) < 0\n\n/*\n * find the leftmost node of a polygon ring\n */\nconst getLeftmost = (start) => {\n  let p = start\n  let leftmost = start\n  do {\n    if (p.x < leftmost.x || (p.x === leftmost.x && p.y < leftmost.y)) leftmost = p\n    p = p.next\n  } while (p !== start)\n\n  return leftmost\n}\n\nmodule.exports = eliminateHoles\n", "const eliminateHoles = require('./eliminateHoles')\nconst { removeNode, sortLinked } = require('./linkedList')\nconst { cureLocalIntersections, filterPoints, isValidDiagonal, linkedPolygon, splitPolygon } = require('./linkedPolygon')\nconst { area, pointInTriangle } = require('./triangle')\n\n/*\n * An implementation of the earcut polygon triangulation algorithm.\n *\n * Original source from https://github.com/mapbox/earcut\n * Copyright (c) 2016 Mapbox\n *\n * @param {data} A flat array of vertex coordinates.\n * @param {holeIndices} An array of hole indices if any.\n * @param {dim} The number of coordinates per vertex in the input array.\n */\nconst triangulate = (data, holeIndices, dim = 2) => {\n  const hasHoles = holeIndices && holeIndices.length\n  const outerLen = hasHoles ? holeIndices[0] * dim : data.length\n  let outerNode = linkedPolygon(data, 0, outerLen, dim, true)\n  const triangles = []\n\n  if (!outerNode || outerNode.next === outerNode.prev) return triangles\n\n  let minX, minY, maxX, maxY, invSize\n\n  if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim)\n\n  // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n  if (data.length > 80 * dim) {\n    minX = maxX = data[0]\n    minY = maxY = data[1]\n\n    for (let i = dim; i < outerLen; i += dim) {\n      const x = data[i]\n      const y = data[i + 1]\n      if (x < minX) minX = x\n      if (y < minY) minY = y\n      if (x > maxX) maxX = x\n      if (y > maxY) maxY = y\n    }\n\n    // minX, minY and invSize are later used to transform coords into integers for z-order calculation\n    invSize = Math.max(maxX - minX, maxY - minY)\n    invSize = invSize !== 0 ? 1 / invSize : 0\n  }\n\n  earcutLinked(outerNode, triangles, dim, minX, minY, invSize)\n\n  return triangles\n}\n\n/*\n * main ear slicing loop which triangulates a polygon (given as a linked list)\n */\nconst earcutLinked = (ear, triangles, dim, minX, minY, invSize, pass) => {\n  if (!ear) return\n\n  // interlink polygon nodes in z-order\n  if (!pass && invSize) indexCurve(ear, minX, minY, invSize)\n\n  let stop = ear\n  let prev\n  let next\n\n  // iterate through ears, slicing them one by one\n  while (ear.prev !== ear.next) {\n    prev = ear.prev\n    next = ear.next\n\n    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {\n      // cut off the triangle\n      triangles.push(prev.i / dim)\n      triangles.push(ear.i / dim)\n      triangles.push(next.i / dim)\n\n      removeNode(ear)\n\n      // skipping the next vertex leads to less sliver triangles\n      ear = next.next\n      stop = next.next\n\n      continue\n    }\n\n    ear = next\n\n    // if we looped through the whole remaining polygon and can't find any more ears\n    if (ear === stop) {\n      // try filtering points and slicing again\n      if (!pass) {\n        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1)\n\n        // if this didn't work, try curing all small self-intersections locally\n      } else if (pass === 1) {\n        ear = cureLocalIntersections(filterPoints(ear), triangles, dim)\n        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2)\n\n        // as a last resort, try splitting the remaining polygon into two\n      } else if (pass === 2) {\n        splitEarcut(ear, triangles, dim, minX, minY, invSize)\n      }\n\n      break\n    }\n  }\n}\n\n/*\n * check whether a polygon node forms a valid ear with adjacent nodes\n */\nconst isEar = (ear) => {\n  const a = ear.prev\n  const b = ear\n  const c = ear.next\n\n  if (area(a, b, c) >= 0) return false // reflex, can't be an ear\n\n  // now make sure we don't have other points inside the potential ear\n  let p = ear.next.next\n\n  while (p !== ear.prev) {\n    if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {\n      return false\n    }\n    p = p.next\n  }\n\n  return true\n}\n\nconst isEarHashed = (ear, minX, minY, invSize) => {\n  const a = ear.prev\n  const b = ear\n  const c = ear.next\n\n  if (area(a, b, c) >= 0) return false // reflex, can't be an ear\n\n  // triangle bbox; min & max are calculated like this for speed\n  const minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x)\n  const minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y)\n  const maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x)\n  const maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y)\n\n  // z-order range for the current triangle bbox\n  const minZ = zOrder(minTX, minTY, minX, minY, invSize)\n  const maxZ = zOrder(maxTX, maxTY, minX, minY, invSize)\n\n  let p = ear.prevZ\n  let n = ear.nextZ\n\n  // look for points inside the triangle in both directions\n  while (p && p.z >= minZ && n && n.z <= maxZ) {\n    if (p !== ear.prev && p !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n      area(p.prev, p, p.next) >= 0) return false\n    p = p.prevZ\n\n    if (n !== ear.prev && n !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n      area(n.prev, n, n.next) >= 0) return false\n    n = n.nextZ\n  }\n\n  // look for remaining points in decreasing z-order\n  while (p && p.z >= minZ) {\n    if (p !== ear.prev && p !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\n      area(p.prev, p, p.next) >= 0) return false\n    p = p.prevZ\n  }\n\n  // look for remaining points in increasing z-order\n  while (n && n.z <= maxZ) {\n    if (n !== ear.prev && n !== ear.next &&\n      pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, n.x, n.y) &&\n      area(n.prev, n, n.next) >= 0) return false\n    n = n.nextZ\n  }\n\n  return true\n}\n\n/*\n * try splitting polygon into two and triangulate them independently\n */\nconst splitEarcut = (start, triangles, dim, minX, minY, invSize) => {\n  // look for a valid diagonal that divides the polygon into two\n  let a = start\n  do {\n    let b = a.next.next\n    while (b !== a.prev) {\n      if (a.i !== b.i && isValidDiagonal(a, b)) {\n        // split the polygon in two by the diagonal\n        let c = splitPolygon(a, b)\n\n        // filter colinear points around the cuts\n        a = filterPoints(a, a.next)\n        c = filterPoints(c, c.next)\n\n        // run earcut on each half\n        earcutLinked(a, triangles, dim, minX, minY, invSize)\n        earcutLinked(c, triangles, dim, minX, minY, invSize)\n        return\n      }\n\n      b = b.next\n    }\n\n    a = a.next\n  } while (a !== start)\n}\n\n/*\n * interlink polygon nodes in z-order\n */\nconst indexCurve = (start, minX, minY, invSize) => {\n  let p = start\n  do {\n    if (p.z === null) p.z = zOrder(p.x, p.y, minX, minY, invSize)\n    p.prevZ = p.prev\n    p.nextZ = p.next\n    p = p.next\n  } while (p !== start)\n\n  p.prevZ.nextZ = null\n  p.prevZ = null\n\n  sortLinked(p, (p) => p.z)\n}\n\n/*\n * z-order of a point given coords and inverse of the longer side of data bbox\n */\nconst zOrder = (x, y, minX, minY, invSize) => {\n  // coords are transformed into non-negative 15-bit integer range\n  x = 32767 * (x - minX) * invSize\n  y = 32767 * (y - minY) * invSize\n\n  x = (x | (x << 8)) & 0x00FF00FF\n  x = (x | (x << 4)) & 0x0F0F0F0F\n  x = (x | (x << 2)) & 0x33333333\n  x = (x | (x << 1)) & 0x55555555\n\n  y = (y | (y << 8)) & 0x00FF00FF\n  y = (y | (y << 4)) & 0x0F0F0F0F\n  y = (y | (y << 2)) & 0x33333333\n  y = (y | (y << 1)) & 0x55555555\n\n  return x | (y << 1)\n}\n\nmodule.exports = triangulate\n", "const { area } = require('../../../maths/utils')\nconst { toOutlines } = require('../../../geometries/geom2')\nconst { arePointsInside } = require('../../../geometries/poly2')\n\n/*\n * Constructs a polygon hierarchy of solids and holes.\n * The hierarchy is represented as a forest of trees. All trees shall be depth at most 2.\n * If a solid exists inside the hole of another solid, it will be split out as its own root.\n *\n * @param {geom2} geometry\n * @returns {Array} an array of polygons with associated holes\n * @alias module:modeling/geometries/geom2.toTree\n *\n * @example\n * const geometry = subtract(rectangle({size: [5, 5]}), rectangle({size: [3, 3]}))\n * console.log(assignHoles(geometry))\n * [{\n *   \"solid\": [[-2.5,-2.5],[2.5,-2.5],[2.5,2.5],[-2.5,2.5]],\n *   \"holes\": [[[-1.5,1.5],[1.5,1.5],[1.5,-1.5],[-1.5,-1.5]]]\n * }]\n */\nconst assignHoles = (geometry) => {\n  const outlines = toOutlines(geometry)\n  const solids = [] // solid indices\n  const holes = [] // hole indices\n  outlines.forEach((outline, i) => {\n    const a = area(outline)\n    if (a < 0) {\n      holes.push(i)\n    } else if (a > 0) {\n      solids.push(i)\n    }\n  })\n\n  // for each hole, determine what solids it is inside of\n  const children = [] // child holes of solid[i]\n  const parents = [] // parent solids of hole[i]\n  solids.forEach((s, i) => {\n    const solid = outlines[s]\n    children[i] = []\n    holes.forEach((h, j) => {\n      const hole = outlines[h]\n      // check if a point of hole j is inside solid i\n      if (arePointsInside([hole[0]], { vertices: solid })) {\n        children[i].push(h)\n        if (!parents[j]) parents[j] = []\n        parents[j].push(i)\n      }\n    })\n  })\n\n  // check if holes have multiple parents and choose one with fewest children\n  holes.forEach((h, j) => {\n    // ensure at least one parent exists\n    if (parents[j] && parents[j].length > 1) {\n      // the solid directly containing this hole\n      const directParent = minIndex(parents[j], (p) => children[p].length)\n      parents[j].forEach((p, i) => {\n        if (i !== directParent) {\n          // Remove hole from skip level parents\n          children[p] = children[p].filter((c) => c !== h)\n        }\n      })\n    }\n  })\n\n  // map indices back to points\n  return children.map((holes, i) => ({\n    solid: outlines[solids[i]],\n    holes: holes.map((h) => outlines[h])\n  }))\n}\n\n/*\n * Find the item in the list with smallest score(item).\n * If the list is empty, return undefined.\n */\nconst minIndex = (list, score) => {\n  let bestIndex\n  let best\n  list.forEach((item, index) => {\n    const value = score(item)\n    if (best === undefined || value < best) {\n      bestIndex = index\n      best = value\n    }\n  })\n  return bestIndex\n}\n\nmodule.exports = assignHoles\n", "const geom2 = require('../../../geometries/geom2')\nconst plane = require('../../../maths/plane')\nconst vec2 = require('../../../maths/vec2')\nconst vec3 = require('../../../maths/vec3')\nconst calculatePlane = require('../slice/calculatePlane')\nconst assignHoles = require('./assignHoles')\n\n/*\n * Constructs a polygon hierarchy which associates holes with their outer solids.\n * This class maps a 3D polygon onto a 2D space using an orthonormal basis.\n * It tracks the mapping so that points can be reversed back to 3D losslessly.\n */\nclass PolygonHierarchy {\n  constructor (slice) {\n    this.plane = calculatePlane(slice)\n\n    // create an orthonormal basis\n    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal\n    const rightvector = vec3.orthogonal(vec3.create(), this.plane)\n    const perp = vec3.cross(vec3.create(), this.plane, rightvector)\n    this.v = vec3.normalize(perp, perp)\n    this.u = vec3.cross(vec3.create(), this.v, this.plane)\n\n    // map from 2D to original 3D points\n    this.basisMap = new Map()\n\n    // project slice onto 2D plane\n    const projected = slice.edges.map((e) => e.map((v) => this.to2D(v)))\n\n    // compute polygon hierarchies, assign holes to solids\n    const geometry = geom2.create(projected)\n    this.roots = assignHoles(geometry)\n  }\n\n  /*\n   * project a 3D point onto the 2D plane\n   */\n  to2D (vector3) {\n    const vector2 = vec2.fromValues(vec3.dot(vector3, this.u), vec3.dot(vector3, this.v))\n    this.basisMap.set(vector2, vector3)\n    return vector2\n  }\n\n  /*\n   * un-project a 2D point back into 3D\n   */\n  to3D (vector2) {\n    // use a map to get the original 3D, no floating point error\n    const original = this.basisMap.get(vector2)\n    if (original) {\n      return original\n    } else {\n      console.log('Warning: point not in original slice')\n      const v1 = vec3.scale(vec3.create(), this.u, vector2[0])\n      const v2 = vec3.scale(vec3.create(), this.v, vector2[1])\n\n      const planeOrigin = vec3.scale(vec3.create(), plane, plane[3])\n      const v3 = vec3.add(v1, v1, planeOrigin)\n      return vec3.add(v2, v2, v3)\n    }\n  }\n}\n\nmodule.exports = PolygonHierarchy\n", "const poly3 = require('../../../geometries/poly3')\nconst earcut = require('../earcut')\nconst PolygonHierarchy = require('../earcut/polygonHierarchy')\n\n/**\n * Return a list of polygons which are enclosed by the slice.\n * @param {slice} slice - the slice\n * @return {Array} a list of polygons (3D)\n * @alias module:modeling/extrusions/slice.toPolygons\n */\nconst toPolygons = (slice) => {\n  const hierarchy = new PolygonHierarchy(slice)\n\n  const polygons = []\n  hierarchy.roots.forEach(({ solid, holes }) => {\n    // hole indices\n    let index = solid.length\n    const holesIndex = []\n    holes.forEach((hole, i) => {\n      holesIndex.push(index)\n      index += hole.length\n    })\n\n    // compute earcut triangulation for each solid\n    const vertices = [solid, ...holes].flat()\n    const data = vertices.flat()\n    // Get original 3D vertex by index\n    const getVertex = (i) => hierarchy.to3D(vertices[i])\n    const indices = earcut(data, holesIndex)\n    for (let i = 0; i < indices.length; i += 3) {\n      // Map back to original vertices\n      const tri = indices.slice(i, i + 3).map(getVertex)\n      polygons.push(poly3.fromPointsAndPlane(tri, hierarchy.plane))\n    }\n  })\n\n  return polygons\n}\n\nmodule.exports = toPolygons\n", "const vec3 = require('../../../maths/vec3')\n\nconst edgesToString = (edges) =>\n  edges.reduce((result, edge) => (\n    result += `[${vec3.toString(edge[0])}, ${vec3.toString(edge[1])}], `\n  ), '')\n\n/**\n * @param {slice} slice - the slice\n * @return {String} the string representation\n * @alias module:modeling/extrusions/slice.toString\n */\nconst toString = (slice) => `[${edgesToString(slice.edges)}]`\n\nmodule.exports = toString\n", "const vec3 = require('../../../maths/vec3')\n\nconst create = require('./create')\n\n/**\n * Transform the given slice using the given matrix.\n * @param {mat4} matrix - transform matrix\n * @param {slice} slice - slice to transform\n * @returns {slice} the transformed slice\n * @alias module:modeling/extrusions/slice.transform\n *\n * @example\n * let matrix = mat4.fromTranslation([1, 2, 3])\n * let newslice = transform(matrix, oldslice)\n */\nconst transform = (matrix, slice) => {\n  const edges = slice.edges.map((edge) => [vec3.transform(vec3.create(), edge[0], matrix), vec3.transform(vec3.create(), edge[1], matrix)])\n  return create(edges)\n}\n\nmodule.exports = transform\n", "/**\n * Represents a 3D geometry consisting of a list of edges.\n * @see {@link slice} for data structure information.\n * @module modeling/extrusions/slice\n */\nmodule.exports = {\n  calculatePlane: require('./calculatePlane'),\n  clone: require('./clone'),\n  create: require('./create'),\n  equals: require('./equals'),\n  fromPoints: require('./fromPoints'),\n  fromSides: require('./fromSides'),\n  isA: require('./isA'),\n  reverse: require('./reverse'),\n  toEdges: require('./toEdges'),\n  toPolygons: require('./toPolygons'),\n  toString: require('./toString'),\n  transform: require('./transform')\n}\n", "const vec3 = require('../../../maths/vec3')\nconst create = require('./create')\n\n/*\n * Mend gaps in a 2D slice to make it a closed polygon\n */\nconst repair = (slice) => {\n  if (!slice.edges) return slice\n  let edges = slice.edges\n  const vertexMap = new Map() // string key to vertex map\n  const edgeCount = new Map() // count of (in - out) edges\n\n  // Remove self-edges\n  edges = edges.filter((e) => !vec3.equals(e[0], e[1]))\n\n  // build vertex and edge count maps\n  edges.forEach((edge) => {\n    const inKey = edge[0].toString()\n    const outKey = edge[1].toString()\n    vertexMap.set(inKey, edge[0])\n    vertexMap.set(outKey, edge[1])\n    edgeCount.set(inKey, (edgeCount.get(inKey) || 0) + 1) // in\n    edgeCount.set(outKey, (edgeCount.get(outKey) || 0) - 1) // out\n  })\n\n  // find vertices which are missing in or out edges\n  const missingIn = []\n  const missingOut = []\n  edgeCount.forEach((count, vertex) => {\n    if (count < 0) missingIn.push(vertex)\n    if (count > 0) missingOut.push(vertex)\n  })\n\n  // pairwise distance of bad vertices\n  missingIn.forEach((key1) => {\n    const v1 = vertexMap.get(key1)\n\n    // find the closest vertex that is missing an out edge\n    let bestDistance = Infinity\n    let bestReplacement\n    missingOut.forEach((key2) => {\n      const v2 = vertexMap.get(key2)\n      const distance = vec3.distance(v1, v2)\n      if (distance < bestDistance) {\n        bestDistance = distance\n        bestReplacement = v2\n      }\n    })\n    console.warn(`slice.repair: repairing vertex gap ${v1} to ${bestReplacement} distance ${bestDistance}`)\n\n    // merge broken vertices\n    edges = edges.map((edge) => {\n      if (edge[0].toString() === key1) return [bestReplacement, edge[1]]\n      if (edge[1].toString() === key1) return [edge[0], bestReplacement]\n      return edge\n    })\n  })\n\n  return create(edges)\n}\n\nmodule.exports = repair\n", "const { EPS } = require('../../maths/constants')\nconst vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\nconst slice = require('./slice')\n\n// https://en.wikipedia.org/wiki/Greatest_common_divisor#Using_Euclid's_algorithm\nconst gcd = (a, b) => {\n  if (a === b) { return a }\n  if (a < b) { return gcd(b, a) }\n  if (b === 1) { return 1 }\n  if (b === 0) { return a }\n  return gcd(b, a % b)\n}\n\nconst lcm = (a, b) => (a * b) / gcd(a, b)\n\n// Return a set of edges that encloses the same area by splitting\n// the given edges to have newlength total edges.\nconst repartitionEdges = (newlength, edges) => {\n  // NOTE: This implementation splits each edge evenly.\n  const multiple = newlength / edges.length\n  if (multiple === 1) {\n    return edges\n  }\n\n  const divisor = vec3.fromValues(multiple, multiple, multiple)\n\n  const newEdges = []\n  edges.forEach((edge) => {\n    const increment = vec3.subtract(vec3.create(), edge[1], edge[0])\n    vec3.divide(increment, increment, divisor)\n\n    // repartition the edge\n    let prev = edge[0]\n    for (let i = 1; i <= multiple; ++i) {\n      const next = vec3.add(vec3.create(), prev, increment)\n      newEdges.push([prev, next])\n      prev = next\n    }\n  })\n  return newEdges\n}\n\nconst EPSAREA = (EPS * EPS / 2) * Math.sin(Math.PI / 3)\n\n/*\n * Extrude (build) walls between the given slices.\n * Each wall consists of two triangles, which may be invalid if slices are overlapping.\n */\nconst extrudeWalls = (slice0, slice1) => {\n  let edges0 = slice.toEdges(slice0)\n  let edges1 = slice.toEdges(slice1)\n\n  if (edges0.length !== edges1.length) {\n    // different shapes, so adjust one or both to the same number of edges\n    const newlength = lcm(edges0.length, edges1.length)\n    if (newlength !== edges0.length) edges0 = repartitionEdges(newlength, edges0)\n    if (newlength !== edges1.length) edges1 = repartitionEdges(newlength, edges1)\n  }\n\n  const walls = []\n  edges0.forEach((edge0, i) => {\n    const edge1 = edges1[i]\n\n    const poly0 = poly3.create([edge0[0], edge0[1], edge1[1]])\n    const poly0area = poly3.measureArea(poly0)\n    if (Number.isFinite(poly0area) && poly0area > EPSAREA) walls.push(poly0)\n\n    const poly1 = poly3.create([edge0[0], edge1[1], edge1[0]])\n    const poly1area = poly3.measureArea(poly1)\n    if (Number.isFinite(poly1area) && poly1area > EPSAREA) walls.push(poly1)\n  })\n  return walls\n}\n\nmodule.exports = extrudeWalls\n", "const mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst slice = require('./slice')\nconst repairSlice = require('./slice/repair')\n\nconst extrudeWalls = require('./extrudeWalls')\n\nconst defaultCallback = (progress, index, base) => {\n  let baseSlice = null\n  if (geom2.isA(base)) baseSlice = slice.fromSides(geom2.toSides(base))\n  if (poly3.isA(base)) baseSlice = slice.fromPoints(poly3.toPoints(base))\n\n  return progress === 0 || progress === 1 ? slice.transform(mat4.fromTranslation(mat4.create(), [0, 0, progress]), baseSlice) : null\n}\n\n/**\n * Extrude a solid from the slices as returned by the callback function.\n * @see slice\n *\n * @param {Object} options - options for extrude\n * @param {Integer} [options.numberOfSlices=2] the number of slices to be generated by the callback\n * @param {Boolean} [options.capStart=true] the solid should have a cap at the start\n * @param {Boolean} [options.capEnd=true] the solid should have a cap at the end\n * @param {Boolean} [options.close=false] the solid should have a closing section between start and end\n * @param {Boolean} [options.repair=true] - repair gaps in the geometry\n * @param {Function} [options.callback] the callback function that generates each slice\n * @param {Object} base - the base object which is used to create slices (see the example for callback information)\n * @return {geom3} the extruded shape\n * @alias module:modeling/extrusions.extrudeFromSlices\n *\n * @example\n * // Parameters:\n * //   progress : the percent complete [0..1]\n * //   index : the index of the current slice [0..numberOfSlices - 1]\n * //   base : the base object as given\n * // Return Value:\n * //   slice or null (to skip)\n * const callback = (progress, index, base) => {\n *   ...\n *   return slice\n * }\n */\nconst extrudeFromSlices = (options, base) => {\n  const defaults = {\n    numberOfSlices: 2,\n    capStart: true,\n    capEnd: true,\n    close: false,\n    repair: true,\n    callback: defaultCallback\n  }\n  const { numberOfSlices, capStart, capEnd, close, repair, callback: generate } = Object.assign({ }, defaults, options)\n\n  if (numberOfSlices < 2) throw new Error('numberOfSlices must be 2 or more')\n\n  // Repair gaps in the base slice\n  if (repair) {\n    // note: base must be a slice, if base is geom2 this doesn't repair\n    base = repairSlice(base)\n  }\n\n  const sMax = numberOfSlices - 1\n\n  let startSlice = null\n  let endSlice = null\n  let prevSlice = null\n  let polygons = []\n  for (let s = 0; s < numberOfSlices; s++) {\n    // invoke the callback function to get the next slice\n    // NOTE: callback can return null to skip the slice\n    const currentSlice = generate(s / sMax, s, base)\n\n    if (currentSlice) {\n      if (!slice.isA(currentSlice)) throw new Error('the callback function must return slice objects')\n\n      const edges = slice.toEdges(currentSlice)\n      if (edges.length === 0) throw new Error('the callback function must return slices with one or more edges')\n\n      if (prevSlice) {\n        polygons = polygons.concat(extrudeWalls(prevSlice, currentSlice))\n      }\n\n      // save start and end slices for caps if necessary\n      if (s === 0) startSlice = currentSlice\n      if (s === (numberOfSlices - 1)) endSlice = currentSlice\n\n      prevSlice = currentSlice\n    }\n  }\n\n  if (capEnd) {\n    // create a cap at the end\n    const endPolygons = slice.toPolygons(endSlice)\n    polygons = polygons.concat(endPolygons)\n  }\n  if (capStart) {\n    // create a cap at the start\n    const startPolygons = slice.toPolygons(startSlice).map(poly3.invert)\n    polygons = polygons.concat(startPolygons)\n  }\n  if (!capStart && !capEnd) {\n    // create walls between end and start slices\n    if (close && !slice.equals(endSlice, startSlice)) {\n      polygons = polygons.concat(extrudeWalls(endSlice, startSlice))\n    }\n  }\n  return geom3.create(polygons)\n}\n\nmodule.exports = extrudeFromSlices\n", "const { TAU } = require('../../maths/constants')\nconst mat4 = require('../../maths/mat4')\n\nconst { mirrorX } = require('../transforms/mirror')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst slice = require('./slice')\n\nconst extrudeFromSlices = require('./extrudeFromSlices')\n\n/**\n * Rotate extrude the given geometry using the given options.\n *\n * @param {Object} options - options for extrusion\n * @param {Number} [options.angle=TAU] - angle of the extrusion (RADIANS)\n * @param {Number} [options.startAngle=0] - start angle of the extrusion (RADIANS)\n * @param {String} [options.overflow='cap'] - what to do with points outside of bounds (+ / - x) :\n * defaults to capping those points to 0 (only supported behaviour for now)\n * @param {Number} [options.segments=12] - number of segments of the extrusion\n * @param {geom2} geometry - the geometry to extrude\n * @returns {geom3} the extruded geometry\n * @alias module:modeling/extrusions.extrudeRotate\n *\n * @example\n * const myshape = extrudeRotate({segments: 8, angle: TAU / 2}, circle({size: 3, center: [4, 0]}))\n */\nconst extrudeRotate = (options, geometry) => {\n  const defaults = {\n    segments: 12,\n    startAngle: 0,\n    angle: TAU,\n    overflow: 'cap'\n  }\n  let { segments, startAngle, angle, overflow } = Object.assign({}, defaults, options)\n\n  if (segments < 3) throw new Error('segments must be greater then 3')\n\n  startAngle = Math.abs(startAngle) > TAU ? startAngle % TAU : startAngle\n  angle = Math.abs(angle) > TAU ? angle % TAU : angle\n\n  let endAngle = startAngle + angle\n  endAngle = Math.abs(endAngle) > TAU ? endAngle % TAU : endAngle\n\n  if (endAngle < startAngle) {\n    const x = startAngle\n    startAngle = endAngle\n    endAngle = x\n  }\n  let totalRotation = endAngle - startAngle\n  if (totalRotation <= 0.0) totalRotation = TAU\n\n  if (Math.abs(totalRotation) < TAU) {\n    // adjust the segments to achieve the total rotation requested\n    const anglePerSegment = TAU / segments\n    segments = Math.floor(Math.abs(totalRotation) / anglePerSegment)\n    if (Math.abs(totalRotation) > (segments * anglePerSegment)) segments++\n  }\n\n  // console.log('startAngle: '+startAngle)\n  // console.log('endAngle: '+endAngle)\n  // console.log(totalRotation)\n  // console.log(segments)\n\n  // convert geometry to an array of sides, easier to deal with\n  let shapeSides = geom2.toSides(geometry)\n  if (shapeSides.length === 0) throw new Error('the given geometry cannot be empty')\n\n  // determine if the rotate extrude can be computed in the first place\n  // ie all the points have to be either x > 0 or x < 0\n\n  // generic solution to always have a valid solid, even if points go beyond x/ -x\n  // 1. split points up between all those on the 'left' side of the axis (x<0) & those on the 'righ' (x>0)\n  // 2. for each set of points do the extrusion operation IN OPOSITE DIRECTIONS\n  // 3. union the two resulting solids\n\n  // 1. alt : OR : just cap of points at the axis ?\n\n  const pointsWithNegativeX = shapeSides.filter((s) => (s[0][0] < 0))\n  const pointsWithPositiveX = shapeSides.filter((s) => (s[0][0] >= 0))\n  const arePointsWithNegAndPosX = pointsWithNegativeX.length > 0 && pointsWithPositiveX.length > 0\n\n  // FIXME actually there are cases where setting X=0 will change the basic shape\n  // - Alternative #1 : don't allow shapes with both negative and positive X values\n  // - Alternative #2 : remove one half of the shape (costly)\n  if (arePointsWithNegAndPosX && overflow === 'cap') {\n    if (pointsWithNegativeX.length > pointsWithPositiveX.length) {\n      shapeSides = shapeSides.map((side) => {\n        let point0 = side[0]\n        let point1 = side[1]\n        point0 = [Math.min(point0[0], 0), point0[1]]\n        point1 = [Math.min(point1[0], 0), point1[1]]\n        return [point0, point1]\n      })\n      // recreate the geometry from the (-) capped points\n      geometry = geom2.reverse(geom2.create(shapeSides))\n      geometry = mirrorX(geometry)\n    } else if (pointsWithPositiveX.length >= pointsWithNegativeX.length) {\n      shapeSides = shapeSides.map((side) => {\n        let point0 = side[0]\n        let point1 = side[1]\n        point0 = [Math.max(point0[0], 0), point0[1]]\n        point1 = [Math.max(point1[0], 0), point1[1]]\n        return [point0, point1]\n      })\n      // recreate the geometry from the (+) capped points\n      geometry = geom2.create(shapeSides)\n    }\n  }\n\n  const rotationPerSlice = totalRotation / segments\n  const isCapped = Math.abs(totalRotation) < TAU\n  const baseSlice = slice.fromSides(geom2.toSides(geometry))\n  slice.reverse(baseSlice, baseSlice)\n\n  const matrix = mat4.create()\n  const createSlice = (progress, index, base) => {\n    let Zrotation = rotationPerSlice * index + startAngle\n    // fix rounding error when rotating TAU radians\n    if (totalRotation === TAU && index === segments) {\n      Zrotation = startAngle\n    }\n    mat4.multiply(matrix, mat4.fromZRotation(matrix, Zrotation), mat4.fromXRotation(mat4.create(), TAU / 4))\n\n    return slice.transform(matrix, base)\n  }\n\n  options = {\n    numberOfSlices: segments + 1,\n    capStart: isCapped,\n    capEnd: isCapped,\n    close: !isCapped,\n    callback: createSlice\n  }\n  return extrudeFromSlices(options, baseSlice)\n}\n\nmodule.exports = extrudeRotate\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Rotate the given objects using the given options.\n * @param {Array} angles - angle (RADIANS) of rotations about X, Y, and Z axis\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotate\n *\n * @example\n * const newsphere = rotate([TAU / 8, 0, 0], sphere())\n */\nconst rotate = (angles, ...objects) => {\n  if (!Array.isArray(angles)) throw new Error('angles must be an array')\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  // adjust the angles if necessary\n  angles = angles.slice() // don't modify the original\n  while (angles.length < 3) angles.push(0)\n\n  const yaw = angles[2]\n  const pitch = angles[1]\n  const roll = angles[0]\n\n  const matrix = mat4.fromTaitBryanRotation(mat4.create(), yaw, pitch, roll)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Rotate the given objects about the X axis, using the given options.\n * @param {Number} angle - angle (RADIANS) of rotations about X\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotateX\n */\nconst rotateX = (angle, ...objects) => rotate([angle, 0, 0], objects)\n\n/**\n * Rotate the given objects about the Y axis, using the given options.\n * @param {Number} angle - angle (RADIANS) of rotations about Y\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotateY\n */\nconst rotateY = (angle, ...objects) => rotate([0, angle, 0], objects)\n\n/**\n * Rotate the given objects about the Z axis, using the given options.\n * @param {Number} angle - angle (RADIANS) of rotations about Z\n * @param {...Object} objects - the objects to rotate\n * @return {Object|Array} the rotated object, or a list of rotated objects\n * @alias module:modeling/transforms.rotateZ\n */\nconst rotateZ = (angle, ...objects) => rotate([0, 0, angle], objects)\n\nmodule.exports = {\n  rotate,\n  rotateX,\n  rotateY,\n  rotateZ\n}\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Translate the given objects using the given options.\n * @param {Array} offset - offset (vector) of which to translate the objects\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translate\n *\n * @example\n * const newsphere = translate([5, 0, 10], sphere())\n */\nconst translate = (offset, ...objects) => {\n  if (!Array.isArray(offset)) throw new Error('offset must be an array')\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  // adjust the offset if necessary\n  offset = offset.slice() // don't modify the original\n  while (offset.length < 3) offset.push(0)\n\n  const matrix = mat4.fromTranslation(mat4.create(), offset)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Translate the given objects along the X axis using the given options.\n * @param {Number} offset - X offset of which to translate the objects\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translateX\n */\nconst translateX = (offset, ...objects) => translate([offset, 0, 0], objects)\n\n/**\n * Translate the given objects along the Y axis using the given options.\n * @param {Number} offset - Y offset of which to translate the geometries\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translateY\n */\nconst translateY = (offset, ...objects) => translate([0, offset, 0], objects)\n\n/**\n * Translate the given objects along the Z axis using the given options.\n * @param {Number} offset - Z offset of which to translate the geometries\n * @param {...Object} objects - the objects to translate\n * @return {Object|Array} the translated object, or a list of translated objects\n * @alias module:modeling/transforms.translateZ\n */\nconst translateZ = (offset, ...objects) => translate([0, 0, offset], objects)\n\nmodule.exports = {\n  translate,\n  translateX,\n  translateY,\n  translateZ\n}\n", "const { TAU } = require('../maths/constants')\n\nconst extrudeRotate = require('../operations/extrusions/extrudeRotate')\nconst { rotate } = require('../operations/transforms/rotate')\nconst { translate } = require('../operations/transforms/translate')\n\nconst circle = require('./circle')\n\nconst { isGT, isGTE } = require('./commonChecks')\n\n/**\n * Construct a torus by revolving a small circle (inner) about the circumference of a large (outer) circle.\n * @param {Object} [options] - options for construction\n * @param {Number} [options.innerRadius=1] - radius of small (inner) circle\n * @param {Number} [options.outerRadius=4] - radius of large (outer) circle\n * @param {Integer} [options.innerSegments=32] - number of segments to create per rotation\n * @param {Integer} [options.outerSegments=32] - number of segments to create per rotation\n * @param {Integer} [options.innerRotation=0] - rotation of small (inner) circle in radians\n * @param {Number} [options.outerRotation=TAU] - rotation (outer) of the torus (RADIANS)\n * @param {Number} [options.startAngle=0] - start angle of the torus (RADIANS)\n * @returns {geom3} new 3D geometry\n * @alias module:modeling/primitives.torus\n *\n * @example\n * let myshape = torus({ innerRadius: 10, outerRadius: 100 })\n */\nconst torus = (options) => {\n  const defaults = {\n    innerRadius: 1,\n    innerSegments: 32,\n    outerRadius: 4,\n    outerSegments: 32,\n    innerRotation: 0,\n    startAngle: 0,\n    outerRotation: TAU\n  }\n  const { innerRadius, innerSegments, outerRadius, outerSegments, innerRotation, startAngle, outerRotation } = Object.assign({}, defaults, options)\n\n  if (!isGT(innerRadius, 0)) throw new Error('innerRadius must be greater than zero')\n  if (!isGTE(innerSegments, 3)) throw new Error('innerSegments must be three or more')\n  if (!isGT(outerRadius, 0)) throw new Error('outerRadius must be greater than zero')\n  if (!isGTE(outerSegments, 3)) throw new Error('outerSegments must be three or more')\n  if (!isGTE(startAngle, 0)) throw new Error('startAngle must be positive')\n  if (!isGT(outerRotation, 0)) throw new Error('outerRotation must be greater than zero')\n\n  if (innerRadius >= outerRadius) throw new Error('inner circle is two large to rotate about the outer circle')\n\n  let innerCircle = circle({ radius: innerRadius, segments: innerSegments })\n\n  if (innerRotation !== 0) {\n    innerCircle = rotate([0, 0, innerRotation], innerCircle)\n  }\n\n  innerCircle = translate([outerRadius, 0], innerCircle)\n\n  const extrudeOptions = {\n    startAngle: startAngle,\n    angle: outerRotation,\n    segments: outerSegments\n  }\n  return extrudeRotate(extrudeOptions, innerCircle)\n}\n\nmodule.exports = torus\n", "const { NEPS } = require('../maths/constants')\nconst vec2 = require('../maths/vec2')\n\nconst geom2 = require('../geometries/geom2')\n\nconst { isNumberArray } = require('./commonChecks')\n\n// returns angle C\nconst solveAngleFromSSS = (a, b, c) => Math.acos(((a * a) + (b * b) - (c * c)) / (2 * a * b))\n\n// returns side c\nconst solveSideFromSAS = (a, C, b) => {\n  if (C > NEPS) {\n    return Math.sqrt(a * a + b * b - 2 * a * b * Math.cos(C))\n  }\n\n  // Explained in https://www.nayuki.io/page/numerically-stable-law-of-cosines\n  return Math.sqrt((a - b) * (a - b) + a * b * C * C * (1 - C * C / 12))\n}\n\n// AAA is when three angles of a triangle, but no sides\nconst solveAAA = (angles) => {\n  const eps = Math.abs(angles[0] + angles[1] + angles[2] - Math.PI)\n  if (eps > NEPS) throw new Error('AAA triangles require angles that sum to PI')\n\n  const A = angles[0]\n  const B = angles[1]\n  const C = Math.PI - A - B\n\n  // Note: This is not 100% proper but...\n  // default the side c length to 1\n  // solve the other lengths\n  const c = 1\n  const a = (c / Math.sin(C)) * Math.sin(A)\n  const b = (c / Math.sin(C)) * Math.sin(B)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// AAS is when two angles and one side are known, and the side is not between the angles\nconst solveAAS = (values) => {\n  const A = values[0]\n  const B = values[1]\n  const C = Math.PI + NEPS - A - B\n\n  if (C < NEPS) throw new Error('AAS triangles require angles that sum to PI')\n\n  const a = values[2]\n  const b = (a / Math.sin(A)) * Math.sin(B)\n  const c = (a / Math.sin(A)) * Math.sin(C)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// ASA is when two angles and the side between the angles are known\nconst solveASA = (values) => {\n  const A = values[0]\n  const B = values[2]\n  const C = Math.PI + NEPS - A - B\n\n  if (C < NEPS) throw new Error('ASA triangles require angles that sum to PI')\n\n  const c = values[1]\n  const a = (c / Math.sin(C)) * Math.sin(A)\n  const b = (c / Math.sin(C)) * Math.sin(B)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// SAS is when two sides and the angle between them are known\nconst solveSAS = (values) => {\n  const c = values[0]\n  const B = values[1]\n  const a = values[2]\n\n  const b = solveSideFromSAS(c, B, a)\n\n  const A = solveAngleFromSSS(b, c, a) // solve for A\n  const C = Math.PI - A - B\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// SSA is when two sides and an angle that is not the angle between the sides are known\nconst solveSSA = (values) => {\n  const c = values[0]\n  const a = values[1]\n  const C = values[2]\n\n  const A = Math.asin(a * Math.sin(C) / c)\n  const B = Math.PI - A - C\n\n  const b = (c / Math.sin(C)) * Math.sin(B)\n  return createTriangle(A, B, C, a, b, c)\n}\n\n// SSS is when we know three sides of the triangle\nconst solveSSS = (lengths) => {\n  const a = lengths[1]\n  const b = lengths[2]\n  const c = lengths[0]\n  if (((a + b) <= c) || ((b + c) <= a) || ((c + a) <= b)) {\n    throw new Error('SSS triangle is incorrect, as the longest side is longer than the sum of the other sides')\n  }\n\n  const A = solveAngleFromSSS(b, c, a) // solve for A\n  const B = solveAngleFromSSS(c, a, b) // solve for B\n  const C = Math.PI - A - B\n  return createTriangle(A, B, C, a, b, c)\n}\n\nconst createTriangle = (A, B, C, a, b, c) => {\n  const p0 = vec2.fromValues(0, 0) // everything starts from 0, 0\n  const p1 = vec2.fromValues(c, 0)\n  const p2 = vec2.fromValues(a, 0)\n  vec2.add(p2, vec2.rotate(p2, p2, [0, 0], Math.PI - B), p1)\n  return geom2.fromPoints([p0, p1, p2])\n}\n\n/**\n * Construct a triangle in two dimensional space from the given options.\n * The triangle is always constructed CCW from the origin, [0, 0, 0].\n * @see https://www.mathsisfun.com/algebra/trig-solving-triangles.html\n * @param {Object} [options] - options for construction\n * @param {String} [options.type='SSS'] - type of triangle to construct; A ~ angle, S ~ side\n * @param {Array} [options.values=[1,1,1]] - angle (radians) of corners or length of sides\n * @returns {geom2} new 2D geometry\n * @alias module:modeling/primitives.triangle\n *\n * @example\n * let myshape = triangle({type: 'AAS', values: [degToRad(62), degToRad(35), 7]})\n */\nconst triangle = (options) => {\n  const defaults = {\n    type: 'SSS',\n    values: [1, 1, 1]\n  }\n  let { type, values } = Object.assign({}, defaults, options)\n\n  if (typeof (type) !== 'string') throw new Error('triangle type must be a string')\n  type = type.toUpperCase()\n  if (!((type[0] === 'A' || type[0] === 'S') &&\n        (type[1] === 'A' || type[1] === 'S') &&\n        (type[2] === 'A' || type[2] === 'S'))) throw new Error('triangle type must contain three letters; A or S')\n\n  if (!isNumberArray(values, 3)) throw new Error('triangle values must contain three values')\n  if (!values.every((n) => n > 0)) throw new Error('triangle values must be greater than zero')\n\n  switch (type) {\n    case 'AAA':\n      return solveAAA(values)\n    case 'AAS':\n      return solveAAS(values)\n    case 'ASA':\n      return solveASA(values)\n    case 'SAS':\n      return solveSAS(values)\n    case 'SSA':\n      return solveSSA(values)\n    case 'SSS':\n      return solveSSS(values)\n    default:\n      throw new Error('invalid triangle type, try again')\n  }\n}\n\nmodule.exports = triangle\n", "/**\n * Primitives provide the building blocks for complex parts.\n * Each primitive is a geometrical object that can be described mathematically, and therefore precise.\n * Primitives can be logically combined, transformed, extruded, etc.\n * @module modeling/primitives\n * @example\n * const { cube, ellipse, star } = require('@jscad/modeling').primitives\n */\nmodule.exports = {\n  arc: require('./arc'),\n  circle: require('./circle'),\n  cube: require('./cube'),\n  cuboid: require('./cuboid'),\n  cylinder: require('./cylinder'),\n  cylinderElliptic: require('./cylinderElliptic'),\n  ellipse: require('./ellipse'),\n  ellipsoid: require('./ellipsoid'),\n  geodesicSphere: require('./geodesicSphere'),\n  line: require('./line'),\n  polygon: require('./polygon'),\n  polyhedron: require('./polyhedron'),\n  rectangle: require('./rectangle'),\n  roundedCuboid: require('./roundedCuboid'),\n  roundedCylinder: require('./roundedCylinder'),\n  roundedRectangle: require('./roundedRectangle'),\n  sphere: require('./sphere'),\n  square: require('./square'),\n  star: require('./star'),\n  torus: require('./torus'),\n  triangle: require('./triangle')\n}\n", "// -- data source from from http://paulbourke.net/dataformats/hershey/\n// -- reduced to save some bytes...\n// { [ascii code]: [width, x, y, ...] } - undefined value as path separator\nmodule.exports = {\n  height: 14,\n  32: [16],\n  33: [10, 5, 21, 5, 7, undefined, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  34: [16, 4, 21, 4, 14, undefined, 12, 21, 12, 14],\n  35: [21, 11, 25, 4, -7, undefined, 17, 25, 10, -7, undefined, 4, 12, 18, 12, undefined, 3, 6, 17, 6],\n  36: [20, 8, 25, 8, -4, undefined, 12, 25, 12, -4, undefined, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],\n  37: [24, 21, 21, 3, 0, undefined, 8, 21, 10, 19, 10, 17, 9, 15, 7, 14, 5, 14, 3, 16, 3, 18, 4, 20, 6, 21, 8, 21, 10, 20, 13, 19, 16, 19, 19, 20, 21, 21, undefined, 17, 7, 15, 6, 14, 4, 14, 2, 16, 0, 18, 0, 20, 1, 21, 3, 21, 5, 19, 7, 17, 7],\n  38: [26, 23, 12, 23, 13, 22, 14, 21, 14, 20, 13, 19, 11, 17, 6, 15, 3, 13, 1, 11, 0, 7, 0, 5, 1, 4, 2, 3, 4, 3, 6, 4, 8, 5, 9, 12, 13, 13, 14, 14, 16, 14, 18, 13, 20, 11, 21, 9, 20, 8, 18, 8, 16, 9, 13, 11, 10, 16, 3, 18, 1, 20, 0, 22, 0, 23, 1, 23, 2],\n  39: [10, 5, 19, 4, 20, 5, 21, 6, 20, 6, 18, 5, 16, 4, 15],\n  40: [14, 11, 25, 9, 23, 7, 20, 5, 16, 4, 11, 4, 7, 5, 2, 7, -2, 9, -5, 11, -7],\n  41: [14, 3, 25, 5, 23, 7, 20, 9, 16, 10, 11, 10, 7, 9, 2, 7, -2, 5, -5, 3, -7],\n  42: [16, 8, 21, 8, 9, undefined, 3, 18, 13, 12, undefined, 13, 18, 3, 12],\n  43: [26, 13, 18, 13, 0, undefined, 4, 9, 22, 9],\n  44: [10, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],\n  45: [26, 4, 9, 22, 9],\n  46: [10, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  47: [22, 20, 25, 2, -7],\n  48: [20, 9, 21, 6, 20, 4, 17, 3, 12, 3, 9, 4, 4, 6, 1, 9, 0, 11, 0, 14, 1, 16, 4, 17, 9, 17, 12, 16, 17, 14, 20, 11, 21, 9, 21],\n  49: [20, 6, 17, 8, 18, 11, 21, 11, 0],\n  50: [20, 4, 16, 4, 17, 5, 19, 6, 20, 8, 21, 12, 21, 14, 20, 15, 19, 16, 17, 16, 15, 15, 13, 13, 10, 3, 0, 17, 0],\n  51: [20, 5, 21, 16, 21, 10, 13, 13, 13, 15, 12, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],\n  52: [20, 13, 21, 3, 7, 18, 7, undefined, 13, 21, 13, 0],\n  53: [20, 15, 21, 5, 21, 4, 12, 5, 13, 8, 14, 11, 14, 14, 13, 16, 11, 17, 8, 17, 6, 16, 3, 14, 1, 11, 0, 8, 0, 5, 1, 4, 2, 3, 4],\n  54: [20, 16, 18, 15, 20, 12, 21, 10, 21, 7, 20, 5, 17, 4, 12, 4, 7, 5, 3, 7, 1, 10, 0, 11, 0, 14, 1, 16, 3, 17, 6, 17, 7, 16, 10, 14, 12, 11, 13, 10, 13, 7, 12, 5, 10, 4, 7],\n  55: [20, 17, 21, 7, 0, undefined, 3, 21, 17, 21],\n  56: [20, 8, 21, 5, 20, 4, 18, 4, 16, 5, 14, 7, 13, 11, 12, 14, 11, 16, 9, 17, 7, 17, 4, 16, 2, 15, 1, 12, 0, 8, 0, 5, 1, 4, 2, 3, 4, 3, 7, 4, 9, 6, 11, 9, 12, 13, 13, 15, 14, 16, 16, 16, 18, 15, 20, 12, 21, 8, 21],\n  57: [20, 16, 14, 15, 11, 13, 9, 10, 8, 9, 8, 6, 9, 4, 11, 3, 14, 3, 15, 4, 18, 6, 20, 9, 21, 10, 21, 13, 20, 15, 18, 16, 14, 16, 9, 15, 4, 13, 1, 10, 0, 8, 0, 5, 1, 4, 3],\n  58: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, undefined, 5, 2, 4, 1, 5, 0, 6, 1, 5, 2],\n  59: [10, 5, 14, 4, 13, 5, 12, 6, 13, 5, 14, undefined, 6, 1, 5, 0, 4, 1, 5, 2, 6, 1, 6, -1, 5, -3, 4, -4],\n  60: [24, 20, 18, 4, 9, 20, 0],\n  61: [26, 4, 12, 22, 12, undefined, 4, 6, 22, 6],\n  62: [24, 4, 18, 20, 9, 4, 0],\n  63: [18, 3, 16, 3, 17, 4, 19, 5, 20, 7, 21, 11, 21, 13, 20, 14, 19, 15, 17, 15, 15, 14, 13, 13, 12, 9, 10, 9, 7, undefined, 9, 2, 8, 1, 9, 0, 10, 1, 9, 2],\n  64: [27, 18, 13, 17, 15, 15, 16, 12, 16, 10, 15, 9, 14, 8, 11, 8, 8, 9, 6, 11, 5, 14, 5, 16, 6, 17, 8, undefined, 12, 16, 10, 14, 9, 11, 9, 8, 10, 6, 11, 5, undefined, 18, 16, 17, 8, 17, 6, 19, 5, 21, 5, 23, 7, 24, 10, 24, 12, 23, 15, 22, 17, 20, 19, 18, 20, 15, 21, 12, 21, 9, 20, 7, 19, 5, 17, 4, 15, 3, 12, 3, 9, 4, 6, 5, 4, 7, 2, 9, 1, 12, 0, 15, 0, 18, 1, 20, 2, 21, 3, undefined, 19, 16, 18, 8, 18, 6, 19, 5],\n  65: [18, 9, 21, 1, 0, undefined, 9, 21, 17, 0, undefined, 4, 7, 14, 7],\n  66: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, undefined, 4, 11, 13, 11, 16, 10, 17, 9, 18, 7, 18, 4, 17, 2, 16, 1, 13, 0, 4, 0],\n  67: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5],\n  68: [21, 4, 21, 4, 0, undefined, 4, 21, 11, 21, 14, 20, 16, 18, 17, 16, 18, 13, 18, 8, 17, 5, 16, 3, 14, 1, 11, 0, 4, 0],\n  69: [19, 4, 21, 4, 0, undefined, 4, 21, 17, 21, undefined, 4, 11, 12, 11, undefined, 4, 0, 17, 0],\n  70: [18, 4, 21, 4, 0, undefined, 4, 21, 17, 21, undefined, 4, 11, 12, 11],\n  71: [21, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 18, 8, undefined, 13, 8, 18, 8],\n  72: [22, 4, 21, 4, 0, undefined, 18, 21, 18, 0, undefined, 4, 11, 18, 11],\n  73: [8, 4, 21, 4, 0],\n  74: [16, 12, 21, 12, 5, 11, 2, 10, 1, 8, 0, 6, 0, 4, 1, 3, 2, 2, 5, 2, 7],\n  75: [21, 4, 21, 4, 0, undefined, 18, 21, 4, 7, undefined, 9, 12, 18, 0],\n  76: [17, 4, 21, 4, 0, undefined, 4, 0, 16, 0],\n  77: [24, 4, 21, 4, 0, undefined, 4, 21, 12, 0, undefined, 20, 21, 12, 0, undefined, 20, 21, 20, 0],\n  78: [22, 4, 21, 4, 0, undefined, 4, 21, 18, 0, undefined, 18, 21, 18, 0],\n  79: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21],\n  80: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 14, 17, 12, 16, 11, 13, 10, 4, 10],\n  81: [22, 9, 21, 7, 20, 5, 18, 4, 16, 3, 13, 3, 8, 4, 5, 5, 3, 7, 1, 9, 0, 13, 0, 15, 1, 17, 3, 18, 5, 19, 8, 19, 13, 18, 16, 17, 18, 15, 20, 13, 21, 9, 21, undefined, 12, 4, 18, -2],\n  82: [21, 4, 21, 4, 0, undefined, 4, 21, 13, 21, 16, 20, 17, 19, 18, 17, 18, 15, 17, 13, 16, 12, 13, 11, 4, 11, undefined, 11, 11, 18, 0],\n  83: [20, 17, 18, 15, 20, 12, 21, 8, 21, 5, 20, 3, 18, 3, 16, 4, 14, 5, 13, 7, 12, 13, 10, 15, 9, 16, 8, 17, 6, 17, 3, 15, 1, 12, 0, 8, 0, 5, 1, 3, 3],\n  84: [16, 8, 21, 8, 0, undefined, 1, 21, 15, 21],\n  85: [22, 4, 21, 4, 6, 5, 3, 7, 1, 10, 0, 12, 0, 15, 1, 17, 3, 18, 6, 18, 21],\n  86: [18, 1, 21, 9, 0, undefined, 17, 21, 9, 0],\n  87: [24, 2, 21, 7, 0, undefined, 12, 21, 7, 0, undefined, 12, 21, 17, 0, undefined, 22, 21, 17, 0],\n  88: [20, 3, 21, 17, 0, undefined, 17, 21, 3, 0],\n  89: [18, 1, 21, 9, 11, 9, 0, undefined, 17, 21, 9, 11],\n  90: [20, 17, 21, 3, 0, undefined, 3, 21, 17, 21, undefined, 3, 0, 17, 0],\n  91: [14, 4, 25, 4, -7, undefined, 5, 25, 5, -7, undefined, 4, 25, 11, 25, undefined, 4, -7, 11, -7],\n  92: [14, 0, 21, 14, -3],\n  93: [14, 9, 25, 9, -7, undefined, 10, 25, 10, -7, undefined, 3, 25, 10, 25, undefined, 3, -7, 10, -7],\n  94: [16, 6, 15, 8, 18, 10, 15, undefined, 3, 12, 8, 17, 13, 12, undefined, 8, 17, 8, 0],\n  95: [16, 0, -2, 16, -2],\n  96: [10, 6, 21, 5, 20, 4, 18, 4, 16, 5, 15, 6, 16, 5, 17],\n  97: [19, 15, 14, 15, 0, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  98: [19, 4, 21, 4, 0, undefined, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],\n  99: [18, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  100: [19, 15, 21, 15, 0, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  101: [18, 3, 8, 15, 8, 15, 10, 14, 12, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  102: [12, 10, 21, 8, 21, 6, 20, 5, 17, 5, 0, undefined, 2, 14, 9, 14],\n  103: [19, 15, 14, 15, -2, 14, -5, 13, -6, 11, -7, 8, -7, 6, -6, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  104: [19, 4, 21, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],\n  105: [8, 3, 21, 4, 20, 5, 21, 4, 22, 3, 21, undefined, 4, 14, 4, 0],\n  106: [10, 5, 21, 6, 20, 7, 21, 6, 22, 5, 21, undefined, 6, 14, 6, -3, 5, -6, 3, -7, 1, -7],\n  107: [17, 4, 21, 4, 0, undefined, 14, 14, 4, 4, undefined, 8, 8, 15, 0],\n  108: [8, 4, 21, 4, 0],\n  109: [30, 4, 14, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0, undefined, 15, 10, 18, 13, 20, 14, 23, 14, 25, 13, 26, 10, 26, 0],\n  110: [19, 4, 14, 4, 0, undefined, 4, 10, 7, 13, 9, 14, 12, 14, 14, 13, 15, 10, 15, 0],\n  111: [19, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3, 16, 6, 16, 8, 15, 11, 13, 13, 11, 14, 8, 14],\n  112: [19, 4, 14, 4, -7, undefined, 4, 11, 6, 13, 8, 14, 11, 14, 13, 13, 15, 11, 16, 8, 16, 6, 15, 3, 13, 1, 11, 0, 8, 0, 6, 1, 4, 3],\n  113: [19, 15, 14, 15, -7, undefined, 15, 11, 13, 13, 11, 14, 8, 14, 6, 13, 4, 11, 3, 8, 3, 6, 4, 3, 6, 1, 8, 0, 11, 0, 13, 1, 15, 3],\n  114: [13, 4, 14, 4, 0, undefined, 4, 8, 5, 11, 7, 13, 9, 14, 12, 14],\n  115: [17, 14, 11, 13, 13, 10, 14, 7, 14, 4, 13, 3, 11, 4, 9, 6, 8, 11, 7, 13, 6, 14, 4, 14, 3, 13, 1, 10, 0, 7, 0, 4, 1, 3, 3],\n  116: [12, 5, 21, 5, 4, 6, 1, 8, 0, 10, 0, undefined, 2, 14, 9, 14],\n  117: [19, 4, 14, 4, 4, 5, 1, 7, 0, 10, 0, 12, 1, 15, 4, undefined, 15, 14, 15, 0],\n  118: [16, 2, 14, 8, 0, undefined, 14, 14, 8, 0],\n  119: [22, 3, 14, 7, 0, undefined, 11, 14, 7, 0, undefined, 11, 14, 15, 0, undefined, 19, 14, 15, 0],\n  120: [17, 3, 14, 14, 0, undefined, 14, 14, 3, 0],\n  121: [16, 2, 14, 8, 0, undefined, 14, 14, 8, 0, 6, -4, 4, -6, 2, -7, 1, -7],\n  122: [17, 14, 14, 3, 0, undefined, 3, 14, 14, 14, undefined, 3, 0, 14, 0],\n  123: [14, 9, 25, 7, 24, 6, 23, 5, 21, 5, 19, 6, 17, 7, 16, 8, 14, 8, 12, 6, 10, undefined, 7, 24, 6, 22, 6, 20, 7, 18, 8, 17, 9, 15, 9, 13, 8, 11, 4, 9, 8, 7, 9, 5, 9, 3, 8, 1, 7, 0, 6, -2, 6, -4, 7, -6, undefined, 6, 8, 8, 6, 8, 4, 7, 2, 6, 1, 5, -1, 5, -3, 6, -5, 7, -6, 9, -7],\n  124: [8, 4, 25, 4, -7],\n  125: [14, 5, 25, 7, 24, 8, 23, 9, 21, 9, 19, 8, 17, 7, 16, 6, 14, 6, 12, 8, 10, undefined, 7, 24, 8, 22, 8, 20, 7, 18, 6, 17, 5, 15, 5, 13, 6, 11, 10, 9, 6, 7, 5, 5, 5, 3, 6, 1, 7, 0, 8, -2, 8, -4, 7, -6, undefined, 8, 8, 6, 6, 6, 4, 7, 2, 8, 1, 9, -1, 9, -3, 8, -5, 7, -6, 5, -7],\n  126: [24, 3, 6, 3, 8, 4, 11, 6, 12, 8, 12, 10, 11, 14, 8, 16, 7, 18, 7, 20, 8, 21, 10, undefined, 3, 8, 4, 10, 6, 11, 8, 11, 10, 10, 14, 7, 16, 6, 18, 6, 20, 7, 21, 10, 21, 12]\n}\n", "const defaultFont = require('./fonts/single-line/hershey/simplex.js')\n\nconst defaultsVectorParams = {\n  xOffset: 0,\n  yOffset: 0,\n  input: '?',\n  align: 'left',\n  font: defaultFont,\n  height: 14, // == old vector_xxx simplex font height\n  lineSpacing: 2.142857142857143, // == 30/14 == old vector_xxx ratio\n  letterSpacing: 1,\n  extrudeOffset: 0\n}\n\n// vectorsXXX parameters handler\nconst vectorParams = (options, input) => {\n  if (!input && typeof options === 'string') {\n    options = { input: options }\n  }\n  options = options || {}\n  const params = Object.assign({}, defaultsVectorParams, options)\n  params.input = input || params.input\n  return params\n}\n\nmodule.exports = vectorParams\n", "const vectorParams = require('./vectorParams')\n\n/**\n * Represents a character as a list of segments\n * @typedef {Object} VectorCharObject\n * @property {Float} width - character width\n * @property {Float} height - character height (uppercase)\n * @property {Array} segments - character segments [[[x, y], ...], ...]\n */\n\n/** Construct a {@link VectorCharObject} from a ascii character whose code is between 31 and 127,\n* if the character is not supported it is replaced by a question mark.\n* @param {Object|String} [options] - options for construction or ascii character\n* @param {Float} [options.xOffset=0] - x offset\n* @param {Float} [options.yOffset=0] - y offset\n* @param {Float} [options.height=21] - font size (uppercase height)\n* @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\n* @param {String} [options.input='?'] - ascii character (ignored/overwrited if provided as seconds parameter)\n* @param {String} [char='?'] - ascii character\n* @returns {VectorCharObject}\n* @alias module:modeling/text.vectorChar\n*\n* @example\n* let vectorCharObject = vectorChar()\n* or\n* let vectorCharObject = vectorChar('A')\n* or\n* let vectorCharObject = vectorChar({ xOffset: 57 }, 'C')\n* or\n* let vectorCharObject = vectorChar({ xOffset: 78, input: '!' })\n*/\nconst vectorChar = (options, char) => {\n  const {\n    xOffset, yOffset, input, font, height, extrudeOffset\n  } = vectorParams(options, char)\n  let code = input.charCodeAt(0)\n  if (!code || !font[code]) {\n    code = 63 // 63 => ?\n  }\n  const glyph = [].concat(font[code])\n  const ratio = (height - extrudeOffset) / font.height\n  const extrudeYOffset = (extrudeOffset / 2)\n  const width = glyph.shift() * ratio\n  const segments = []\n  let polyline = []\n  for (let i = 0, il = glyph.length; i < il; i += 2) {\n    const gx = ratio * glyph[i] + xOffset\n    const gy = ratio * glyph[i + 1] + yOffset + extrudeYOffset\n    if (glyph[i] !== undefined) {\n      polyline.push([gx, gy])\n      continue\n    }\n    segments.push(polyline)\n    polyline = []\n    i--\n  }\n  if (polyline.length) {\n    segments.push(polyline)\n  }\n  return { width, height, segments }\n}\n\nmodule.exports = vectorChar\n", "const vectorChar = require('./vectorChar')\nconst vectorParams = require('./vectorParams')\n\n// translate text line\nconst translateLine = (options, line) => {\n  const { x, y } = Object.assign({ x: 0, y: 0 }, options || {})\n  const segments = line.segments\n  let segment = null\n  let point = null\n  for (let i = 0, il = segments.length; i < il; i++) {\n    segment = segments[i]\n    for (let j = 0, jl = segment.length; j < jl; j++) {\n      point = segment[j]\n      segment[j] = [point[0] + x, point[1] + y]\n    }\n  }\n  return line\n}\n\n/**\n * Construct an array of character segments from a ascii string whose characters code is between 31 and 127,\n * if one character is not supported it is replaced by a question mark.\n * @param {Object|String} [options] - options for construction or ascii string\n * @param {Float} [options.xOffset=0] - x offset\n * @param {Float} [options.yOffset=0] - y offset\n * @param {Float} [options.height=21] - font size (uppercase height)\n * @param {Float} [options.lineSpacing=1.4] - line spacing expressed as a percentage of font size\n * @param {Float} [options.letterSpacing=1] - extra letter spacing expressed as a percentage of font size\n * @param {String} [options.align='left'] - multi-line text alignment: left, center, right\n * @param {Float} [options.extrudeOffset=0] - width of the extrusion that will be applied (manually) after the creation of the character\n * @param {String} [options.input='?'] - ascii string (ignored/overwrited if provided as seconds parameter)\n * @param {String} [text='?'] - ascii string\n * @returns {Array} characters segments [[[x, y], ...], ...]\n * @alias module:modeling/text.vectorText\n *\n * @example\n * let textSegments = vectorText()\n * or\n * let textSegments = vectorText('OpenJSCAD')\n * or\n * let textSegments = vectorText({ yOffset: -50 }, 'OpenJSCAD')\n * or\n * let textSegments = vectorText({ yOffset: -80, input: 'OpenJSCAD' })\n */\nconst vectorText = (options, text) => {\n  const {\n    xOffset, yOffset, input, font, height, align, extrudeOffset, lineSpacing, letterSpacing\n  } = vectorParams(options, text)\n  let [x, y] = [xOffset, yOffset]\n  let i, il, char, vect, width, diff\n  let line = { width: 0, segments: [] }\n  const lines = []\n  let output = []\n  let maxWidth = 0\n  const lineStart = x\n  const pushLine = () => {\n    lines.push(line)\n    maxWidth = Math.max(maxWidth, line.width)\n    line = { width: 0, segments: [] }\n  }\n  for (i = 0, il = input.length; i < il; i++) {\n    char = input[i]\n    vect = vectorChar({ xOffset: x, yOffset: y, font, height, extrudeOffset }, char)\n    if (char === '\\n') {\n      x = lineStart\n      y -= vect.height * lineSpacing\n      pushLine()\n      continue\n    }\n    width = vect.width * letterSpacing\n    line.width += width\n    x += width\n    if (char !== ' ') {\n      line.segments = line.segments.concat(vect.segments)\n    }\n  }\n  if (line.segments.length) {\n    pushLine()\n  }\n  for (i = 0, il = lines.length; i < il; i++) {\n    line = lines[i]\n    if (maxWidth > line.width) {\n      diff = maxWidth - line.width\n      if (align === 'right') {\n        line = translateLine({ x: diff }, line)\n      } else if (align === 'center') {\n        line = translateLine({ x: diff / 2 }, line)\n      }\n    }\n    output = output.concat(line.segments)\n  }\n  return output\n}\n\nmodule.exports = vectorText\n", "/**\n * Texts provide sets of segments for each character or text strings.\n * The segments can be used to create outlines for both 2D and 3D geometry.\n * Note: Only ASCII characters are supported.\n * @module modeling/text\n * @example\n * const { vectorChar, vectorText } = require('@jscad/modeling').text\n */\nmodule.exports = {\n  vectorChar: require('./vectorChar'),\n  vectorText: require('./vectorText')\n}\n", "// list of supported geometries\nconst geom2 = require('../geometries/geom2')\nconst geom3 = require('../geometries/geom3')\nconst path2 = require('../geometries/path2')\n\n/**\n * @param {Array} shapes - list of shapes to compare\n * @returns {Boolean} true if the given shapes are of the same type\n * @alias module:modeling/utils.areAllShapesTheSameType\n */\nconst areAllShapesTheSameType = (shapes) => {\n  let previousType\n  for (const shape of shapes) {\n    let currentType = 0\n    if (geom2.isA(shape)) currentType = 1\n    if (geom3.isA(shape)) currentType = 2\n    if (path2.isA(shape)) currentType = 3\n\n    if (previousType && currentType !== previousType) return false\n    previousType = currentType\n  }\n  return true\n}\n\nmodule.exports = areAllShapesTheSameType\n", "/**\n * Convert the given angle (degrees) to radians.\n * @param {Number} degrees - angle in degrees\n * @returns {Number} angle in radians\n * @alias module:modeling/utils.degToRad\n */\nconst degToRad = (degrees) => degrees * 0.017453292519943295\n\nmodule.exports = degToRad\n", "/**\n * @alias module:modeling/utils.fnNumberSort\n */\nconst fnNumberSort = (a, b) => a - b\n\nmodule.exports = fnNumberSort\n", "/**\n * Insert the given element into the given array using the compareFunction.\n * @alias module:modeling/utils.insertSorted\n */\nconst insertSorted = (array, element, comparefunc) => {\n  let leftbound = 0\n  let rightbound = array.length\n  while (rightbound > leftbound) {\n    const testindex = Math.floor((leftbound + rightbound) / 2)\n    const testelement = array[testindex]\n    const compareresult = comparefunc(element, testelement)\n    if (compareresult > 0) { // element > testelement\n      leftbound = testindex + 1\n    } else {\n      rightbound = testindex\n    }\n  }\n  array.splice(leftbound, 0, element)\n}\n\nmodule.exports = insertSorted\n", "const { TAU } = require('../maths/constants')\n\n/**\n * Calculate the number of segments from the given radius based on minimum length or angle.\n * @param {Number} radius - radius of the requested shape\n * @param {Number} minimumLength - minimum length of segments; length > 0\n * @param {Number} minimumAngle - minimum angle (radians) between segments; 0 > angle < TAU\n * @returns {Number} number of segments to complete the radius\n * @alias module:modeling/utils.radiusToSegments\n */\nconst radiusToSegments = (radius, minimumLength, minimumAngle) => {\n  const ss = minimumLength > 0 ? radius * TAU / minimumLength : 0\n  const as = minimumAngle > 0 ? TAU / minimumAngle : 0\n  // minimum segments is four(4) for round primitives\n  return Math.ceil(Math.max(ss, as, 4))\n}\n\nmodule.exports = radiusToSegments\n", "/**\n * Convert the given angle (radians) to degrees.\n * @param {Number} radians - angle in radians\n * @returns {Number} angle in degrees\n * @alias module:modeling/utils.radToDeg\n */\nconst radToDeg = (radians) => radians * 57.29577951308232\n\nmodule.exports = radToDeg\n", "/**\n * Utility functions of various sorts.\n * @module modeling/utils\n * @example\n * const { flatten, insertSorted } = require('@jscad/modeling').utils\n */\nmodule.exports = {\n  areAllShapesTheSameType: require('./areAllShapesTheSameType'),\n  degToRad: require('./degToRad'),\n  flatten: require('./flatten'),\n  fnNumberSort: require('./fnNumberSort'),\n  insertSorted: require('./insertSorted'),\n  radiusToSegments: require('./radiusToSegments'),\n  radToDeg: require('./radToDeg')\n}\n", "const vec2 = require('../../maths/vec2')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst fromFakePolygon = (epsilon, polygon) => {\n  // this can happen based on union, seems to be residuals -\n  // return null and handle in caller\n  if (polygon.vertices.length < 4) {\n    return null\n  }\n  const vert1Indices = []\n  const points3D = polygon.vertices.filter((vertex, i) => {\n    if (vertex[2] > 0) {\n      vert1Indices.push(i)\n      return true\n    }\n    return false\n  })\n\n  if (points3D.length !== 2) {\n    throw new Error('Assertion failed: fromFakePolygon: not enough points found') // TBD remove later\n  }\n\n  const points2D = points3D.map((v3) => {\n    const x = Math.round(v3[0] / epsilon) * epsilon + 0 // no more -0\n    const y = Math.round(v3[1] / epsilon) * epsilon + 0 // no more -0\n    return vec2.fromValues(x, y)\n  })\n\n  if (vec2.equals(points2D[0], points2D[1])) return null\n\n  const d = vert1Indices[1] - vert1Indices[0]\n  if (d === 1 || d === 3) {\n    if (d === 1) {\n      points2D.reverse()\n    }\n  } else {\n    throw new Error('Assertion failed: fromFakePolygon: unknown index ordering')\n  }\n  return points2D\n}\n\n/*\n * Convert the given polygons to a list of sides.\n * The polygons must have only z coordinates +1 and -1, as constructed by to3DWalls().\n */\nconst fromFakePolygons = (epsilon, polygons) => {\n  const sides = polygons.map((polygon) => fromFakePolygon(epsilon, polygon)).filter((polygon) => (polygon !== null))\n  return geom2.create(sides)\n}\n\nmodule.exports = fromFakePolygons\n", "const vec3 = require('../../maths/vec3')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\n/*\n * Create a polygon (wall) from the given Z values and side.\n */\nconst to3DWall = (z0, z1, side) => {\n  const points = [\n    vec3.fromVec2(vec3.create(), side[0], z0),\n    vec3.fromVec2(vec3.create(), side[1], z0),\n    vec3.fromVec2(vec3.create(), side[1], z1),\n    vec3.fromVec2(vec3.create(), side[0], z1)\n  ]\n  return poly3.create(points)\n}\n\n/*\n * Create a 3D geometry with walls, as constructed from the given options and geometry.\n *\n * @param {Object} options - options with Z offsets\n * @param {geom2} geometry - geometry used as base of walls\n * @return {geom3} the new geometry\n */\nconst to3DWalls = (options, geometry) => {\n  const sides = geom2.toSides(geometry)\n\n  const polygons = sides.map((side) => to3DWall(options.z0, options.z1, side))\n\n  const result = geom3.create(polygons)\n  return result\n}\n\nmodule.exports = to3DWalls\n", "const mat4 = require('./mat4')\n\nconst vec2 = require('./vec2')\nconst vec3 = require('./vec3')\n\n/*\n * Class OrthoNormalBasis\n * Reprojects points on a 3D plane onto a 2D plane\n * or from a 2D plane back onto the 3D plane\n * @param  {plane} plane\n * @param  {vec3} rightvector\n */\nconst OrthoNormalBasis = function (plane, rightvector) {\n  if (arguments.length < 2) {\n    // choose an arbitrary right hand vector, making sure it is somewhat orthogonal to the plane normal:\n    rightvector = vec3.orthogonal(vec3.create(), plane)\n  }\n  this.v = vec3.normalize(vec3.create(), vec3.cross(vec3.create(), plane, rightvector))\n  this.u = vec3.cross(vec3.create(), this.v, plane)\n  this.plane = plane\n  this.planeorigin = vec3.scale(vec3.create(), plane, plane[3])\n}\n\n// Get an orthonormal basis for the standard XYZ planes.\n// Parameters: the names of two 3D axes. The 2d x axis will map to the first given 3D axis, the 2d y\n// axis will map to the second.\n// Prepend the axis with a \"-\" to invert the direction of this axis.\n// For example: OrthoNormalBasis.GetCartesian(\"-Y\",\"Z\")\n//   will return an orthonormal basis where the 2d X axis maps to the 3D inverted Y axis, and\n//   the 2d Y axis maps to the 3D Z axis.\nOrthoNormalBasis.GetCartesian = function (xaxisid, yaxisid) {\n  const axisid = xaxisid + '/' + yaxisid\n  let planenormal, rightvector\n  if (axisid === 'X/Y') {\n    planenormal = [0, 0, 1]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Y/-X') {\n    planenormal = [0, 0, 1]\n    rightvector = [0, 1, 0]\n  } else if (axisid === '-X/-Y') {\n    planenormal = [0, 0, 1]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Y/X') {\n    planenormal = [0, 0, 1]\n    rightvector = [0, -1, 0]\n  } else if (axisid === '-X/Y') {\n    planenormal = [0, 0, -1]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Y/-X') {\n    planenormal = [0, 0, -1]\n    rightvector = [0, -1, 0]\n  } else if (axisid === 'X/-Y') {\n    planenormal = [0, 0, -1]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Y/X') {\n    planenormal = [0, 0, -1]\n    rightvector = [0, 1, 0]\n  } else if (axisid === 'X/Z') {\n    planenormal = [0, -1, 0]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Z/-X') {\n    planenormal = [0, -1, 0]\n    rightvector = [0, 0, 1]\n  } else if (axisid === '-X/-Z') {\n    planenormal = [0, -1, 0]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Z/X') {\n    planenormal = [0, -1, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === '-X/Z') {\n    planenormal = [0, 1, 0]\n    rightvector = [-1, 0, 0]\n  } else if (axisid === '-Z/-X') {\n    planenormal = [0, 1, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === 'X/-Z') {\n    planenormal = [0, 1, 0]\n    rightvector = [1, 0, 0]\n  } else if (axisid === 'Z/X') {\n    planenormal = [0, 1, 0]\n    rightvector = [0, 0, 1]\n  } else if (axisid === 'Y/Z') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, 1, 0]\n  } else if (axisid === 'Z/-Y') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, 0, 1]\n  } else if (axisid === '-Y/-Z') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, -1, 0]\n  } else if (axisid === '-Z/Y') {\n    planenormal = [1, 0, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === '-Y/Z') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, -1, 0]\n  } else if (axisid === '-Z/-Y') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, 0, -1]\n  } else if (axisid === 'Y/-Z') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, 1, 0]\n  } else if (axisid === 'Z/Y') {\n    planenormal = [-1, 0, 0]\n    rightvector = [0, 0, 1]\n  } else {\n    throw new Error('OrthoNormalBasis.GetCartesian: invalid combination of axis identifiers. Should pass two string arguments from [X,Y,Z,-X,-Y,-Z], being two different axes.')\n  }\n  return new OrthoNormalBasis(new Plane(new Vector3D(planenormal), 0), new Vector3D(rightvector))\n}\n\n/*\n// test code for OrthoNormalBasis.GetCartesian()\nOrthoNormalBasis.GetCartesian_Test=function() {\n  let axisnames=[\"X\",\"Y\",\"Z\",\"-X\",\"-Y\",\"-Z\"];\n  let axisvectors=[[1,0,0], [0,1,0], [0,0,1], [-1,0,0], [0,-1,0], [0,0,-1]];\n  for(let axis1=0; axis1 < 3; axis1++) {\n    for(let axis1inverted=0; axis1inverted < 2; axis1inverted++) {\n      let axis1name=axisnames[axis1+3*axis1inverted];\n      let axis1vector=axisvectors[axis1+3*axis1inverted];\n      for(let axis2=0; axis2 < 3; axis2++) {\n        if(axis2 != axis1) {\n          for(let axis2inverted=0; axis2inverted < 2; axis2inverted++) {\n            let axis2name=axisnames[axis2+3*axis2inverted];\n            let axis2vector=axisvectors[axis2+3*axis2inverted];\n            let orthobasis=OrthoNormalBasis.GetCartesian(axis1name, axis2name);\n            let test1=orthobasis.to3D(new Vector2D([1,0]));\n            let test2=orthobasis.to3D(new Vector2D([0,1]));\n            let expected1=new Vector3D(axis1vector);\n            let expected2=new Vector3D(axis2vector);\n            let d1=test1.distanceTo(expected1);\n            let d2=test2.distanceTo(expected2);\n            if( (d1 > 0.01) || (d2 > 0.01) ) {\n              throw new Error(\"Wrong!\");\n  }}}}}}\n  throw new Error(\"OK\");\n};\n*/\n\n// The z=0 plane, with the 3D x and y vectors mapped to the 2D x and y vector\nOrthoNormalBasis.Z0Plane = function () {\n  const plane = new Plane(new Vector3D([0, 0, 1]), 0)\n  return new OrthoNormalBasis(plane, new Vector3D([1, 0, 0]))\n}\n\nOrthoNormalBasis.prototype = {\n\n  getProjectionMatrix: function () {\n    return mat4.fromValues(\n      this.u[0], this.v[0], this.plane[0], 0,\n      this.u[1], this.v[1], this.plane[1], 0,\n      this.u[2], this.v[2], this.plane[2], 0,\n      0, 0, -this.plane[3], 1\n    )\n  },\n\n  getInverseProjectionMatrix: function () {\n    const p = vec3.scale(vec3.create(), this.plane, this.plane[3])\n    return mat4.fromValues(\n      this.u[0], this.u[1], this.u[2], 0,\n      this.v[0], this.v[1], this.v[2], 0,\n      this.plane[0], this.plane[1], this.plane[2], 0,\n      p[0], p[1], p[2], 1\n    )\n  },\n\n  to2D: function (point) {\n    return vec2.fromValues(vec3.dot(point, this.u), vec3.dot(point, this.v))\n  },\n\n  to3D: function (point) {\n    const v1 = vec3.scale(vec3.create(), this.u, point[0])\n    const v2 = vec3.scale(vec3.create(), this.v, point[1])\n\n    const v3 = vec3.add(v1, v1, this.planeorigin)\n    const v4 = vec3.add(v2, v2, v3)\n    return v4\n  },\n\n  line3Dto2D: function (line3d) {\n    const a = line3d.point\n    const b = line3d.direction.plus(a)\n    const a2d = this.to2D(a)\n    const b2d = this.to2D(b)\n    return Line2D.fromPoints(a2d, b2d)\n  },\n\n  line2Dto3D: function (line2d) {\n    const a = line2d.origin()\n    const b = line2d.direction().plus(a)\n    const a3d = this.to3D(a)\n    const b3d = this.to3D(b)\n    return Line3D.fromPoints(a3d, b3d)\n  },\n\n  transform: function (matrix4x4) {\n    // todo: this may not work properly in case of mirroring\n    const newplane = this.plane.transform(matrix4x4)\n    const rightpointTransformed = this.u.transform(matrix4x4)\n    const originTransformed = new Vector3D(0, 0, 0).transform(matrix4x4)\n    const newrighthandvector = rightpointTransformed.minus(originTransformed)\n    const newbasis = new OrthoNormalBasis(newplane, newrighthandvector)\n    return newbasis\n  }\n}\n\nmodule.exports = OrthoNormalBasis\n", "const { EPS } = require('../../maths/constants')\n\nconst line2 = require('../../maths/line2')\nconst vec2 = require('../../maths/vec2')\nconst OrthoNormalBasis = require('../../maths/OrthoNormalBasis')\nconst interpolateBetween2DPointsForY = require('../../maths/utils/interpolateBetween2DPointsForY')\n\nconst { insertSorted, fnNumberSort } = require('../../utils')\n\nconst poly3 = require('../../geometries/poly3')\n\n/*\n * Retesselation for a set of COPLANAR polygons.\n * @param {poly3[]} sourcepolygons - list of polygons\n * @returns {poly3[]} new set of polygons\n */\nconst reTesselateCoplanarPolygons = (sourcepolygons) => {\n  if (sourcepolygons.length < 2) return sourcepolygons\n\n  const destpolygons = []\n  const numpolygons = sourcepolygons.length\n  const plane = poly3.plane(sourcepolygons[0])\n  const orthobasis = new OrthoNormalBasis(plane)\n  const polygonvertices2d = [] // array of array of Vector2D\n  const polygontopvertexindexes = [] // array of indexes of topmost vertex per polygon\n  const topy2polygonindexes = new Map()\n  const ycoordinatetopolygonindexes = new Map()\n\n  // convert all polygon vertices to 2D\n  // Make a list of all encountered y coordinates\n  // And build a map of all polygons that have a vertex at a certain y coordinate:\n  const ycoordinatebins = new Map()\n  const ycoordinateBinningFactor = 10 / EPS\n  for (let polygonindex = 0; polygonindex < numpolygons; polygonindex++) {\n    const poly3d = sourcepolygons[polygonindex]\n    let vertices2d = []\n    let numvertices = poly3d.vertices.length\n    let minindex = -1\n    if (numvertices > 0) {\n      let miny\n      let maxy\n      for (let i = 0; i < numvertices; i++) {\n        let pos2d = orthobasis.to2D(poly3d.vertices[i])\n        // perform binning of y coordinates: If we have multiple vertices very\n        // close to each other, give them the same y coordinate:\n        const ycoordinatebin = Math.floor(pos2d[1] * ycoordinateBinningFactor)\n        let newy\n        if (ycoordinatebins.has(ycoordinatebin)) {\n          newy = ycoordinatebins.get(ycoordinatebin)\n        } else if (ycoordinatebins.has(ycoordinatebin + 1)) {\n          newy = ycoordinatebins.get(ycoordinatebin + 1)\n        } else if (ycoordinatebins.has(ycoordinatebin - 1)) {\n          newy = ycoordinatebins.get(ycoordinatebin - 1)\n        } else {\n          newy = pos2d[1]\n          ycoordinatebins.set(ycoordinatebin, pos2d[1])\n        }\n        pos2d = vec2.fromValues(pos2d[0], newy)\n        vertices2d.push(pos2d)\n        const y = pos2d[1]\n        if ((i === 0) || (y < miny)) {\n          miny = y\n          minindex = i\n        }\n        if ((i === 0) || (y > maxy)) {\n          maxy = y\n        }\n        let polygonindexes = ycoordinatetopolygonindexes.get(y)\n        if (!polygonindexes) {\n          polygonindexes = {} // PERF\n          ycoordinatetopolygonindexes.set(y, polygonindexes)\n        }\n        polygonindexes[polygonindex] = true\n      }\n      if (miny >= maxy) {\n        // degenerate polygon, all vertices have same y coordinate. Just ignore it from now:\n        vertices2d = []\n        numvertices = 0\n        minindex = -1\n      } else {\n        let polygonindexes = topy2polygonindexes.get(miny)\n        if (!polygonindexes) {\n          polygonindexes = []\n          topy2polygonindexes.set(miny, polygonindexes)\n        }\n        polygonindexes.push(polygonindex)\n      }\n    } // if(numvertices > 0)\n    // reverse the vertex order:\n    vertices2d.reverse()\n    minindex = numvertices - minindex - 1\n    polygonvertices2d.push(vertices2d)\n    polygontopvertexindexes.push(minindex)\n  }\n\n  const ycoordinates = []\n  ycoordinatetopolygonindexes.forEach((polylist, y) => ycoordinates.push(y))\n  ycoordinates.sort(fnNumberSort)\n\n  // Now we will iterate over all y coordinates, from lowest to highest y coordinate\n  // activepolygons: source polygons that are 'active', i.e. intersect with our y coordinate\n  //   Is sorted so the polygons are in left to right order\n  // Each element in activepolygons has these properties:\n  //        polygonindex: the index of the source polygon (i.e. an index into the sourcepolygons\n  //                      and polygonvertices2d arrays)\n  //        leftvertexindex: the index of the vertex at the left side of the polygon (lowest x)\n  //                         that is at or just above the current y coordinate\n  //        rightvertexindex: dito at right hand side of polygon\n  //        topleft, bottomleft: coordinates of the left side of the polygon crossing the current y coordinate\n  //        topright, bottomright: coordinates of the right hand side of the polygon crossing the current y coordinate\n  let activepolygons = []\n  let prevoutpolygonrow = []\n  for (let yindex = 0; yindex < ycoordinates.length; yindex++) {\n    const newoutpolygonrow = []\n    const ycoordinate = ycoordinates[yindex]\n\n    // update activepolygons for this y coordinate:\n    // - Remove any polygons that end at this y coordinate\n    // - update leftvertexindex and rightvertexindex (which point to the current vertex index\n    //   at the the left and right side of the polygon\n    // Iterate over all polygons that have a corner at this y coordinate:\n    const polygonindexeswithcorner = ycoordinatetopolygonindexes.get(ycoordinate)\n    for (let activepolygonindex = 0; activepolygonindex < activepolygons.length; ++activepolygonindex) {\n      const activepolygon = activepolygons[activepolygonindex]\n      const polygonindex = activepolygon.polygonindex\n      if (polygonindexeswithcorner[polygonindex]) {\n        // this active polygon has a corner at this y coordinate:\n        const vertices2d = polygonvertices2d[polygonindex]\n        const numvertices = vertices2d.length\n        let newleftvertexindex = activepolygon.leftvertexindex\n        let newrightvertexindex = activepolygon.rightvertexindex\n        // See if we need to increase leftvertexindex or decrease rightvertexindex:\n        while (true) {\n          let nextleftvertexindex = newleftvertexindex + 1\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n          if (vertices2d[nextleftvertexindex][1] !== ycoordinate) break\n          newleftvertexindex = nextleftvertexindex\n        }\n        let nextrightvertexindex = newrightvertexindex - 1\n        if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n        if (vertices2d[nextrightvertexindex][1] === ycoordinate) {\n          newrightvertexindex = nextrightvertexindex\n        }\n        if ((newleftvertexindex !== activepolygon.leftvertexindex) && (newleftvertexindex === newrightvertexindex)) {\n          // We have increased leftvertexindex or decreased rightvertexindex, and now they point to the same vertex\n          // This means that this is the bottom point of the polygon. We'll remove it:\n          activepolygons.splice(activepolygonindex, 1)\n          --activepolygonindex\n        } else {\n          activepolygon.leftvertexindex = newleftvertexindex\n          activepolygon.rightvertexindex = newrightvertexindex\n          activepolygon.topleft = vertices2d[newleftvertexindex]\n          activepolygon.topright = vertices2d[newrightvertexindex]\n          let nextleftvertexindex = newleftvertexindex + 1\n          if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n          activepolygon.bottomleft = vertices2d[nextleftvertexindex]\n          let nextrightvertexindex = newrightvertexindex - 1\n          if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n          activepolygon.bottomright = vertices2d[nextrightvertexindex]\n        }\n      } // if polygon has corner here\n    } // for activepolygonindex\n    let nextycoordinate\n    if (yindex >= ycoordinates.length - 1) {\n      // last row, all polygons must be finished here:\n      activepolygons = []\n      nextycoordinate = null\n    } else { // yindex < ycoordinates.length-1\n      nextycoordinate = Number(ycoordinates[yindex + 1])\n      const middleycoordinate = 0.5 * (ycoordinate + nextycoordinate)\n      // update activepolygons by adding any polygons that start here:\n      const startingpolygonindexes = topy2polygonindexes.get(ycoordinate)\n      for (const polygonindexKey in startingpolygonindexes) {\n        const polygonindex = startingpolygonindexes[polygonindexKey]\n        const vertices2d = polygonvertices2d[polygonindex]\n        const numvertices = vertices2d.length\n        const topvertexindex = polygontopvertexindexes[polygonindex]\n        // the top of the polygon may be a horizontal line. In that case topvertexindex can point to any point on this line.\n        // Find the left and right topmost vertices which have the current y coordinate:\n        let topleftvertexindex = topvertexindex\n        while (true) {\n          let i = topleftvertexindex + 1\n          if (i >= numvertices) i = 0\n          if (vertices2d[i][1] !== ycoordinate) break\n          if (i === topvertexindex) break // should not happen, but just to prevent endless loops\n          topleftvertexindex = i\n        }\n        let toprightvertexindex = topvertexindex\n        while (true) {\n          let i = toprightvertexindex - 1\n          if (i < 0) i = numvertices - 1\n          if (vertices2d[i][1] !== ycoordinate) break\n          if (i === topleftvertexindex) break // should not happen, but just to prevent endless loops\n          toprightvertexindex = i\n        }\n        let nextleftvertexindex = topleftvertexindex + 1\n        if (nextleftvertexindex >= numvertices) nextleftvertexindex = 0\n        let nextrightvertexindex = toprightvertexindex - 1\n        if (nextrightvertexindex < 0) nextrightvertexindex = numvertices - 1\n        const newactivepolygon = {\n          polygonindex: polygonindex,\n          leftvertexindex: topleftvertexindex,\n          rightvertexindex: toprightvertexindex,\n          topleft: vertices2d[topleftvertexindex],\n          topright: vertices2d[toprightvertexindex],\n          bottomleft: vertices2d[nextleftvertexindex],\n          bottomright: vertices2d[nextrightvertexindex]\n        }\n        insertSorted(activepolygons, newactivepolygon, (el1, el2) => {\n          const x1 = interpolateBetween2DPointsForY(el1.topleft, el1.bottomleft, middleycoordinate)\n          const x2 = interpolateBetween2DPointsForY(el2.topleft, el2.bottomleft, middleycoordinate)\n          if (x1 > x2) return 1\n          if (x1 < x2) return -1\n          return 0\n        })\n      } // for(let polygonindex in startingpolygonindexes)\n    } //  yindex < ycoordinates.length-1\n\n    // Now activepolygons is up to date\n    // Build the output polygons for the next row in newoutpolygonrow:\n    for (const activepolygonKey in activepolygons) {\n      const activepolygon = activepolygons[activepolygonKey]\n\n      let x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, ycoordinate)\n      const topleft = vec2.fromValues(x, ycoordinate)\n      x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, ycoordinate)\n      const topright = vec2.fromValues(x, ycoordinate)\n      x = interpolateBetween2DPointsForY(activepolygon.topleft, activepolygon.bottomleft, nextycoordinate)\n      const bottomleft = vec2.fromValues(x, nextycoordinate)\n      x = interpolateBetween2DPointsForY(activepolygon.topright, activepolygon.bottomright, nextycoordinate)\n      const bottomright = vec2.fromValues(x, nextycoordinate)\n      const outpolygon = {\n        topleft: topleft,\n        topright: topright,\n        bottomleft: bottomleft,\n        bottomright: bottomright,\n        leftline: line2.fromPoints(line2.create(), topleft, bottomleft),\n        rightline: line2.fromPoints(line2.create(), bottomright, topright)\n      }\n      if (newoutpolygonrow.length > 0) {\n        const prevoutpolygon = newoutpolygonrow[newoutpolygonrow.length - 1]\n        const d1 = vec2.distance(outpolygon.topleft, prevoutpolygon.topright)\n        const d2 = vec2.distance(outpolygon.bottomleft, prevoutpolygon.bottomright)\n        if ((d1 < EPS) && (d2 < EPS)) {\n          // we can join this polygon with the one to the left:\n          outpolygon.topleft = prevoutpolygon.topleft\n          outpolygon.leftline = prevoutpolygon.leftline\n          outpolygon.bottomleft = prevoutpolygon.bottomleft\n          newoutpolygonrow.splice(newoutpolygonrow.length - 1, 1)\n        }\n      }\n      newoutpolygonrow.push(outpolygon)\n    } // for(activepolygon in activepolygons)\n    if (yindex > 0) {\n      // try to match the new polygons against the previous row:\n      const prevcontinuedindexes = new Set()\n      const matchedindexes = new Set()\n      for (let i = 0; i < newoutpolygonrow.length; i++) {\n        const thispolygon = newoutpolygonrow[i]\n        for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n          if (!matchedindexes.has(ii)) { // not already processed?\n            // We have a match if the sidelines are equal or if the top coordinates\n            // are on the sidelines of the previous polygon\n            const prevpolygon = prevoutpolygonrow[ii]\n            if (vec2.distance(prevpolygon.bottomleft, thispolygon.topleft) < EPS) {\n              if (vec2.distance(prevpolygon.bottomright, thispolygon.topright) < EPS) {\n                // Yes, the top of this polygon matches the bottom of the previous:\n                matchedindexes.add(ii)\n                // Now check if the joined polygon would remain convex:\n                const v1 = line2.direction(thispolygon.leftline)\n                const v2 = line2.direction(prevpolygon.leftline)\n                const d1 = v1[0] - v2[0]\n\n                const v3 = line2.direction(thispolygon.rightline)\n                const v4 = line2.direction(prevpolygon.rightline)\n                const d2 = v3[0] - v4[0]\n\n                const leftlinecontinues = Math.abs(d1) < EPS\n                const rightlinecontinues = Math.abs(d2) < EPS\n                const leftlineisconvex = leftlinecontinues || (d1 >= 0)\n                const rightlineisconvex = rightlinecontinues || (d2 >= 0)\n                if (leftlineisconvex && rightlineisconvex) {\n                  // yes, both sides have convex corners:\n                  // This polygon will continue the previous polygon\n                  thispolygon.outpolygon = prevpolygon.outpolygon\n                  thispolygon.leftlinecontinues = leftlinecontinues\n                  thispolygon.rightlinecontinues = rightlinecontinues\n                  prevcontinuedindexes.add(ii)\n                }\n                break\n              }\n            }\n          } // if(!prevcontinuedindexes.has(ii))\n        } // for ii\n      } // for i\n      for (let ii = 0; ii < prevoutpolygonrow.length; ii++) {\n        if (!prevcontinuedindexes.has(ii)) {\n          // polygon ends here\n          // Finish the polygon with the last point(s):\n          const prevpolygon = prevoutpolygonrow[ii]\n          prevpolygon.outpolygon.rightpoints.push(prevpolygon.bottomright)\n          if (vec2.distance(prevpolygon.bottomright, prevpolygon.bottomleft) > EPS) {\n            // polygon ends with a horizontal line:\n            prevpolygon.outpolygon.leftpoints.push(prevpolygon.bottomleft)\n          }\n          // reverse the left half so we get a counterclockwise circle:\n          prevpolygon.outpolygon.leftpoints.reverse()\n          const points2d = prevpolygon.outpolygon.rightpoints.concat(prevpolygon.outpolygon.leftpoints)\n          const vertices3d = points2d.map((point2d) => orthobasis.to3D(point2d))\n          const polygon = poly3.fromPointsAndPlane(vertices3d, plane) // TODO support shared\n\n          // if we let empty polygon out, next retesselate will crash\n          if (polygon.vertices.length) destpolygons.push(polygon)\n        }\n      }\n    } // if(yindex > 0)\n    for (let i = 0; i < newoutpolygonrow.length; i++) {\n      const thispolygon = newoutpolygonrow[i]\n      if (!thispolygon.outpolygon) {\n        // polygon starts here:\n        thispolygon.outpolygon = {\n          leftpoints: [],\n          rightpoints: []\n        }\n        thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n        if (vec2.distance(thispolygon.topleft, thispolygon.topright) > EPS) {\n          // we have a horizontal line at the top:\n          thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n        }\n      } else {\n        // continuation of a previous row\n        if (!thispolygon.leftlinecontinues) {\n          thispolygon.outpolygon.leftpoints.push(thispolygon.topleft)\n        }\n        if (!thispolygon.rightlinecontinues) {\n          thispolygon.outpolygon.rightpoints.push(thispolygon.topright)\n        }\n      }\n    }\n    prevoutpolygonrow = newoutpolygonrow\n  } // for yindex\n  return destpolygons\n}\n\nmodule.exports = reTesselateCoplanarPolygons\n", "const geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst aboutEqualNormals = require('../../maths/utils/aboutEqualNormals')\n\nconst reTesselateCoplanarPolygons = require('./reTesselateCoplanarPolygons')\n\nconst coplanar = (plane1, plane2) => {\n  // expect the same distance from the origin, within tolerance\n  if (Math.abs(plane1[3] - plane2[3]) < 0.00000015) {\n    return aboutEqualNormals(plane1, plane2)\n  }\n  return false\n}\n\n/*\n  After boolean operations all coplanar polygon fragments are joined by a retesselating\n  operation. geom3.reTesselate(geom).\n  Retesselation is done through a linear sweep over the polygon surface.\n  The sweep line passes over the y coordinates of all vertices in the polygon.\n  Polygons are split at each sweep line, and the fragments are joined horizontally and vertically into larger polygons\n  (making sure that we will end up with convex polygons).\n*/\nconst retessellate = (geometry) => {\n  if (geometry.isRetesselated) {\n    return geometry\n  }\n\n  const polygons = geom3.toPolygons(geometry)\n  const polygonsPerPlane = [] // elements: [plane, [poly3...]]\n  polygons.forEach((polygon) => {\n    const mapping = polygonsPerPlane.find((element) => coplanar(element[0], poly3.plane(polygon)))\n    if (mapping) {\n      const polygons = mapping[1]\n      polygons.push(polygon)\n    } else {\n      polygonsPerPlane.push([poly3.plane(polygon), [polygon]])\n    }\n  })\n\n  let destpolygons = []\n  polygonsPerPlane.forEach((mapping) => {\n    const sourcepolygons = mapping[1]\n    const retesselayedpolygons = reTesselateCoplanarPolygons(sourcepolygons)\n    destpolygons = destpolygons.concat(retesselayedpolygons)\n  })\n\n  const result = geom3.create(destpolygons)\n  result.isRetesselated = true\n\n  return result\n}\n\nmodule.exports = retessellate\n", "const { EPS } = require('../../maths/constants')\n\nconst measureBoundingBox = require('../../measurements/measureBoundingBox')\n\n/*\n * Determine if the given geometries overlap by comparing min and max bounds.\n * NOTE: This is used in union for performance gains.\n * @param {geom3} geometry1 - geometry for comparison\n * @param {geom3} geometry2 - geometry for comparison\n * @returns {boolean} true if the geometries overlap\n */\nconst mayOverlap = (geometry1, geometry2) => {\n  // FIXME accessing the data structure of the geometry should not be allowed\n  if ((geometry1.polygons.length === 0) || (geometry2.polygons.length === 0)) {\n    return false\n  }\n\n  const bounds1 = measureBoundingBox(geometry1)\n  const min1 = bounds1[0]\n  const max1 = bounds1[1]\n\n  const bounds2 = measureBoundingBox(geometry2)\n  const min2 = bounds2[0]\n  const max2 = bounds2[1]\n\n  if ((min2[0] - max1[0]) > EPS) return false\n  if ((min1[0] - max2[0]) > EPS) return false\n  if ((min2[1] - max1[1]) > EPS) return false\n  if ((min1[1] - max2[1]) > EPS) return false\n  if ((min2[2] - max1[2]) > EPS) return false\n  if ((min1[2] - max2[2]) > EPS) return false\n  return true\n}\n\nmodule.exports = mayOverlap\n", "const plane = require('../../../maths/plane')\nconst poly3 = require('../../../geometries/poly3')\n\n// # class Node\n// Holds a node in a BSP tree.\n// A BSP tree is built from a collection of polygons by picking a polygon to split along.\n// Polygons are not stored directly in the tree, but in PolygonTreeNodes, stored in this.polygontreenodes.\n// Those PolygonTreeNodes are children of the owning Tree.polygonTree.\n// This is not a leafy BSP tree since there is no distinction between internal and leaf nodes.\nclass Node {\n  constructor (parent) {\n    this.plane = null\n    this.front = null\n    this.back = null\n    this.polygontreenodes = []\n    this.parent = parent\n  }\n\n  // Convert solid space to empty space and empty space to solid space.\n  invert () {\n    const queue = [this]\n    let node\n    for (let i = 0; i < queue.length; i++) {\n      node = queue[i]\n      if (node.plane) node.plane = plane.flip(plane.create(), node.plane)\n      if (node.front) queue.push(node.front)\n      if (node.back) queue.push(node.back)\n      const temp = node.front\n      node.front = node.back\n      node.back = temp\n    }\n  }\n\n  // clip polygontreenodes to our plane\n  // calls remove() for all clipped PolygonTreeNodes\n  clipPolygons (polygontreenodes, alsoRemovecoplanarFront) {\n    let current = { node: this, polygontreenodes: polygontreenodes }\n    let node\n    const stack = []\n\n    do {\n      node = current.node\n      polygontreenodes = current.polygontreenodes\n\n      if (node.plane) {\n        const plane = node.plane\n\n        const backnodes = []\n        const frontnodes = []\n        const coplanarfrontnodes = alsoRemovecoplanarFront ? backnodes : frontnodes\n        const numpolygontreenodes = polygontreenodes.length\n        for (let i = 0; i < numpolygontreenodes; i++) {\n          const treenode = polygontreenodes[i]\n          if (!treenode.isRemoved()) {\n            // split this polygon tree node using the plane\n            // NOTE: children are added to the tree if there are spanning polygons\n            treenode.splitByPlane(plane, coplanarfrontnodes, backnodes, frontnodes, backnodes)\n          }\n        }\n\n        if (node.front && (frontnodes.length > 0)) {\n          // add front node for further splitting\n          stack.push({ node: node.front, polygontreenodes: frontnodes })\n        }\n        const numbacknodes = backnodes.length\n        if (node.back && (numbacknodes > 0)) {\n          // add back node for further splitting\n          stack.push({ node: node.back, polygontreenodes: backnodes })\n        } else {\n          // remove all back nodes from processing\n          for (let i = 0; i < numbacknodes; i++) {\n            backnodes[i].remove()\n          }\n        }\n      }\n      current = stack.pop()\n    } while (current !== undefined)\n  }\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `tree`.\n  clipTo (tree, alsoRemovecoplanarFront) {\n    let node = this\n    const stack = []\n    do {\n      if (node.polygontreenodes.length > 0) {\n        tree.rootnode.clipPolygons(node.polygontreenodes, alsoRemovecoplanarFront)\n      }\n      if (node.front) stack.push(node.front)\n      if (node.back) stack.push(node.back)\n      node = stack.pop()\n    } while (node !== undefined)\n  }\n\n  addPolygonTreeNodes (newpolygontreenodes) {\n    let current = { node: this, polygontreenodes: newpolygontreenodes }\n    const stack = []\n    do {\n      const node = current.node\n      const polygontreenodes = current.polygontreenodes\n\n      if (polygontreenodes.length === 0) {\n        current = stack.pop()\n        continue\n      }\n      if (!node.plane) {\n        let index = 0 // default\n        index = Math.floor(polygontreenodes.length / 2)\n        // index = polygontreenodes.length >> 1\n        // index = Math.floor(Math.random()*polygontreenodes.length)\n        const bestpoly = polygontreenodes[index].getPolygon()\n        node.plane = poly3.plane(bestpoly)\n      }\n      const frontnodes = []\n      const backnodes = []\n      const n = polygontreenodes.length\n      for (let i = 0; i < n; ++i) {\n        polygontreenodes[i].splitByPlane(node.plane, node.polygontreenodes, backnodes, frontnodes, backnodes)\n      }\n\n      if (frontnodes.length > 0) {\n        if (!node.front) node.front = new Node(node)\n\n        // unable to split by any of the current nodes\n        const stopCondition = n === frontnodes.length && backnodes.length === 0\n        if (stopCondition) node.front.polygontreenodes = frontnodes\n        else stack.push({ node: node.front, polygontreenodes: frontnodes })\n      }\n      if (backnodes.length > 0) {\n        if (!node.back) node.back = new Node(node)\n\n        // unable to split by any of the current nodes\n        const stopCondition = n === backnodes.length && frontnodes.length === 0\n\n        if (stopCondition) node.back.polygontreenodes = backnodes\n        else stack.push({ node: node.back, polygontreenodes: backnodes })\n      }\n\n      current = stack.pop()\n    } while (current !== undefined)\n  }\n}\n\nmodule.exports = Node\n", "const vec3 = require('../../../maths/vec3')\n\nconst splitLineSegmentByPlane = (plane, p1, p2) => {\n  const direction = vec3.subtract(vec3.create(), p2, p1)\n  let lambda = (plane[3] - vec3.dot(plane, p1)) / vec3.dot(plane, direction)\n  if (Number.isNaN(lambda)) lambda = 0\n  if (lambda > 1) lambda = 1\n  if (lambda < 0) lambda = 0\n\n  vec3.scale(direction, direction, lambda)\n  vec3.add(direction, p1, direction)\n  return direction\n}\n\nmodule.exports = splitLineSegmentByPlane\n", "const { EPS } = require('../../../maths/constants')\n\nconst plane = require('../../../maths/plane')\nconst vec3 = require('../../../maths/vec3')\n\nconst poly3 = require('../../../geometries/poly3')\n\nconst splitLineSegmentByPlane = require('./splitLineSegmentByPlane')\n\n// Returns object:\n// .type:\n//   0: coplanar-front\n//   1: coplanar-back\n//   2: front\n//   3: back\n//   4: spanning\n// In case the polygon is spanning, returns:\n// .front: a Polygon3 of the front part\n// .back: a Polygon3 of the back part\nconst splitPolygonByPlane = (splane, polygon) => {\n  const result = {\n    type: null,\n    front: null,\n    back: null\n  }\n  // cache in local lets (speedup):\n  const vertices = polygon.vertices\n  const numvertices = vertices.length\n  const pplane = poly3.plane(polygon)\n  if (plane.equals(pplane, splane)) {\n    result.type = 0\n  } else {\n    let hasfront = false\n    let hasback = false\n    const vertexIsBack = []\n    const MINEPS = -EPS\n    for (let i = 0; i < numvertices; i++) {\n      const t = vec3.dot(splane, vertices[i]) - splane[3]\n      const isback = (t < MINEPS)\n      vertexIsBack.push(isback)\n      if (t > EPS) hasfront = true\n      if (t < MINEPS) hasback = true\n    }\n    if ((!hasfront) && (!hasback)) {\n      // all points coplanar\n      const t = vec3.dot(splane, pplane)\n      result.type = (t >= 0) ? 0 : 1\n    } else if (!hasback) {\n      result.type = 2\n    } else if (!hasfront) {\n      result.type = 3\n    } else {\n      // spanning\n      result.type = 4\n      const frontvertices = []\n      const backvertices = []\n      let isback = vertexIsBack[0]\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        const vertex = vertices[vertexindex]\n        let nextvertexindex = vertexindex + 1\n        if (nextvertexindex >= numvertices) nextvertexindex = 0\n        const nextisback = vertexIsBack[nextvertexindex]\n        if (isback === nextisback) {\n          // line segment is on one side of the plane:\n          if (isback) {\n            backvertices.push(vertex)\n          } else {\n            frontvertices.push(vertex)\n          }\n        } else {\n          // line segment intersects plane:\n          const nextpoint = vertices[nextvertexindex]\n          const intersectionpoint = splitLineSegmentByPlane(splane, vertex, nextpoint)\n          if (isback) {\n            backvertices.push(vertex)\n            backvertices.push(intersectionpoint)\n            frontvertices.push(intersectionpoint)\n          } else {\n            frontvertices.push(vertex)\n            frontvertices.push(intersectionpoint)\n            backvertices.push(intersectionpoint)\n          }\n        }\n        isback = nextisback\n      } // for vertexindex\n      // remove duplicate vertices:\n      const EPS_SQUARED = EPS * EPS\n      if (backvertices.length >= 3) {\n        let prevvertex = backvertices[backvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < backvertices.length; vertexindex++) {\n          const vertex = backvertices[vertexindex]\n          if (vec3.squaredDistance(vertex, prevvertex) < EPS_SQUARED) {\n            backvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        let prevvertex = frontvertices[frontvertices.length - 1]\n        for (let vertexindex = 0; vertexindex < frontvertices.length; vertexindex++) {\n          const vertex = frontvertices[vertexindex]\n          if (vec3.squaredDistance(vertex, prevvertex) < EPS_SQUARED) {\n            frontvertices.splice(vertexindex, 1)\n            vertexindex--\n          }\n          prevvertex = vertex\n        }\n      }\n      if (frontvertices.length >= 3) {\n        result.front = poly3.fromPointsAndPlane(frontvertices, pplane)\n      }\n      if (backvertices.length >= 3) {\n        result.back = poly3.fromPointsAndPlane(backvertices, pplane)\n      }\n    }\n  }\n  return result\n}\n\nmodule.exports = splitPolygonByPlane\n", "const { EPS } = require('../../../maths/constants')\n\nconst vec3 = require('../../../maths/vec3')\n\nconst poly3 = require('../../../geometries/poly3')\n\nconst splitPolygonByPlane = require('./splitPolygonByPlane')\n\n// # class PolygonTreeNode\n// This class manages hierarchical splits of polygons.\n// At the top is a root node which does not hold a polygon, only child PolygonTreeNodes.\n// Below that are zero or more 'top' nodes; each holds a polygon.\n// The polygons can be in different planes.\n// splitByPlane() splits a node by a plane. If the plane intersects the polygon, two new child nodes\n// are created holding the splitted polygon.\n// getPolygons() retrieves the polygons from the tree. If for PolygonTreeNode the polygon is split but\n// the two split parts (child nodes) are still intact, then the unsplit polygon is returned.\n// This ensures that we can safely split a polygon into many fragments. If the fragments are untouched,\n// getPolygons() will return the original unsplit polygon instead of the fragments.\n// remove() removes a polygon from the tree. Once a polygon is removed, the parent polygons are invalidated\n// since they are no longer intact.\nclass PolygonTreeNode {\n  // constructor creates the root node\n  constructor (parent, polygon) {\n    this.parent = parent\n    this.children = []\n    this.polygon = polygon\n    this.removed = false  // state of branch or leaf\n  }\n\n  // fill the tree with polygons. Should be called on the root node only; child nodes must\n  // always be a derivate (split) of the parent node.\n  addPolygons (polygons) {\n    // new polygons can only be added to root node; children can only be splitted polygons\n    if (!this.isRootNode()) {\n      throw new Error('Assertion failed')\n    }\n    const _this = this\n    polygons.forEach((polygon) => {\n      _this.addChild(polygon)\n    })\n  }\n\n  // remove a node\n  // - the siblings become toplevel nodes\n  // - the parent is removed recursively\n  remove () {\n    if (!this.removed) {\n      this.removed = true\n      this.polygon = null\n\n      // remove ourselves from the parent's children list:\n      const parentschildren = this.parent.children\n      const i = parentschildren.indexOf(this)\n      if (i < 0) throw new Error('Assertion failed')\n      parentschildren.splice(i, 1)\n\n      // invalidate the parent's polygon, and of all parents above it:\n      this.parent.recursivelyInvalidatePolygon()\n    }\n  }\n\n  isRemoved () {\n    return this.removed\n  }\n\n  isRootNode () {\n    return !this.parent\n  }\n\n  // invert all polygons in the tree. Call on the root node\n  invert () {\n    if (!this.isRootNode()) throw new Error('Assertion failed') // can only call this on the root node\n    this.invertSub()\n  }\n\n  getPolygon () {\n    if (!this.polygon) throw new Error('Assertion failed') // doesn't have a polygon, which means that it has been broken down\n    return this.polygon\n  }\n\n  getPolygons (result) {\n    let children = [this]\n    const queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\n        node = children[j]\n        if (node.polygon) {\n          // the polygon hasn't been broken yet. We can ignore the children and return our polygon:\n          result.push(node.polygon)\n        } else {\n          // our polygon has been split up and broken, so gather all subpolygons from the children\n          if (node.children.length > 0) queue.push(node.children)\n        }\n      }\n    }\n  }\n\n  // split the node by a plane; add the resulting nodes to the frontnodes and backnodes array\n  // If the plane doesn't intersect the polygon, the 'this' object is added to one of the arrays\n  // If the plane does intersect the polygon, two new child nodes are created for the front and back fragments,\n  //  and added to both arrays.\n  splitByPlane (plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    if (this.children.length) {\n      const queue = [this.children]\n      let i\n      let j\n      let l\n      let node\n      let nodes\n      for (i = 0; i < queue.length; i++) { // queue.length can increase, do not cache\n        nodes = queue[i]\n        for (j = 0, l = nodes.length; j < l; j++) { // ok to cache length\n          node = nodes[j]\n          if (node.children.length > 0) {\n            queue.push(node.children)\n          } else {\n            // no children. Split the polygon:\n            node._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n          }\n        }\n      }\n    } else {\n      this._splitByPlane(plane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes)\n    }\n  }\n\n  // only to be called for nodes with no children\n  _splitByPlane (splane, coplanarfrontnodes, coplanarbacknodes, frontnodes, backnodes) {\n    const polygon = this.polygon\n    if (polygon) {\n      const bound = poly3.measureBoundingSphere(polygon)\n      const sphereradius = bound[3] + EPS // ensure radius is LARGER then polygon\n      const spherecenter = bound\n      const d = vec3.dot(splane, spherecenter) - splane[3]\n      if (d > sphereradius) {\n        frontnodes.push(this)\n      } else if (d < -sphereradius) {\n        backnodes.push(this)\n      } else {\n        const splitresult = splitPolygonByPlane(splane, polygon)\n        switch (splitresult.type) {\n          case 0:\n            // coplanar front:\n            coplanarfrontnodes.push(this)\n            break\n\n          case 1:\n            // coplanar back:\n            coplanarbacknodes.push(this)\n            break\n\n          case 2:\n            // front:\n            frontnodes.push(this)\n            break\n\n          case 3:\n            // back:\n            backnodes.push(this)\n            break\n\n          case 4:\n            // spanning:\n            if (splitresult.front) {\n              const frontnode = this.addChild(splitresult.front)\n              frontnodes.push(frontnode)\n            }\n            if (splitresult.back) {\n              const backnode = this.addChild(splitresult.back)\n              backnodes.push(backnode)\n            }\n            break\n        }\n      }\n    }\n  }\n\n  // PRIVATE methods from here:\n  // add child to a node\n  // this should be called whenever the polygon is split\n  // a child should be created for every fragment of the split polygon\n  // returns the newly created child\n  addChild (polygon) {\n    const newchild = new PolygonTreeNode(this, polygon)\n    this.children.push(newchild)\n    return newchild\n  }\n\n  invertSub () {\n    let children = [this]\n    const queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; i++) {\n      children = queue[i]\n      for (j = 0, l = children.length; j < l; j++) {\n        node = children[j]\n        if (node.polygon) {\n          node.polygon = poly3.invert(node.polygon)\n        }\n        if (node.children.length > 0) queue.push(node.children)\n      }\n    }\n  }\n\n  // private method\n  // remove the polygon from the node, and all parent nodes above it\n  // called to invalidate parents of removed nodes\n  recursivelyInvalidatePolygon () {\n    this.polygon = null\n    if (this.parent) {\n      this.parent.recursivelyInvalidatePolygon()\n    }\n  }\n\n  clear () {\n    let children = [this]\n    const queue = [children]\n    for (let i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      const l = children.length\n      for (let j = 0; j < l; j++) {\n        const node = children[j]\n        if (node.polygon) {\n          node.polygon = null\n        }\n        if (node.parent) {\n          node.parent = null\n        }\n        if (node.children.length > 0) queue.push(node.children)\n        node.children = []\n      }\n    }\n  }\n\n  toString () {\n    let result = ''\n    let children = [this]\n    const queue = [children]\n    let i, j, l, node\n    for (i = 0; i < queue.length; ++i) { // queue size can change in loop, don't cache length\n      children = queue[i]\n      const prefix = ' '.repeat(i)\n      for (j = 0, l = children.length; j < l; j++) { // ok to cache length\n        node = children[j]\n        result += `${prefix}PolygonTreeNode (${node.isRootNode()}): ${node.children.length}`\n        if (node.polygon) {\n          result += `\\n ${prefix}polygon: ${node.polygon.vertices}\\n`\n        } else {\n          result += '\\n'\n        }\n        if (node.children.length > 0) queue.push(node.children)\n      }\n    }\n    return result\n  }\n}\n\nmodule.exports = PolygonTreeNode\n", "const Node = require('./Node')\nconst PolygonTreeNode = require('./PolygonTreeNode')\n\n// # class Tree\n// This is the root of a BSP tree.\n// This separate class for the root of the tree in order to hold the PolygonTreeNode root.\n// The actual tree is kept in this.rootnode\nclass Tree {\n  constructor (polygons) {\n    this.polygonTree = new PolygonTreeNode()\n    this.rootnode = new Node(null)\n    if (polygons) this.addPolygons(polygons)\n  }\n\n  invert () {\n    this.polygonTree.invert()\n    this.rootnode.invert()\n  }\n\n  // Remove all polygons in this BSP tree that are inside the other BSP tree\n  // `tree`.\n  clipTo (tree, alsoRemovecoplanarFront = false) {\n    this.rootnode.clipTo(tree, alsoRemovecoplanarFront)\n  }\n\n  allPolygons () {\n    const result = []\n    this.polygonTree.getPolygons(result)\n    return result\n  }\n\n  addPolygons (polygons) {\n    const polygontreenodes = new Array(polygons.length)\n    for (let i = 0; i < polygons.length; i++) {\n      polygontreenodes[i] = this.polygonTree.addChild(polygons[i])\n    }\n    this.rootnode.addPolygonTreeNodes(polygontreenodes)\n  }\n\n  clear () {\n    this.polygonTree.clear()\n  }\n\n  toString () {\n    const result = 'Tree: ' + this.polygonTree.toString('')\n    return result\n  }\n}\n\nmodule.exports = Tree\n", "module.exports = {\n  Tree: require('./Tree')\n}\n", "const geom3 = require('../../geometries/geom3')\n\nconst mayOverlap = require('./mayOverlap')\nconst { Tree } = require('./trees')\n\n/*\n * Return a new 3D geometry representing the space in both the first geometry and\n * the second geometry. None of the given geometries are modified.\n * @param {geom3} geometry1 - a geometry\n * @param {geom3} geometry2 - a geometry\n * @returns {geom3} new 3D geometry\n */\nconst intersectGeom3Sub = (geometry1, geometry2) => {\n  if (!mayOverlap(geometry1, geometry2)) {\n    return geom3.create() // empty geometry\n  }\n\n  const a = new Tree(geom3.toPolygons(geometry1))\n  const b = new Tree(geom3.toPolygons(geometry2))\n\n  a.invert()\n  b.clipTo(a)\n  b.invert()\n  a.clipTo(b)\n  b.clipTo(a)\n  a.addPolygons(b.allPolygons())\n  a.invert()\n\n  const newpolygons = a.allPolygons()\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = intersectGeom3Sub\n", "const flatten = require('../../utils/flatten')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst intersectSub = require('./intersectGeom3Sub')\n\n/*\n * Return a new 3D geometry representing space in both the first geometry and\n * in the subsequent geometries. None of the given geometries are modified.\n * @param {...geom3} geometries - list of 3D geometries\n * @returns {geom3} new 3D geometry\n */\nconst intersect = (...geometries) => {\n  geometries = flatten(geometries)\n\n  let newgeometry = geometries.shift()\n  geometries.forEach((geometry) => {\n    newgeometry = intersectSub(newgeometry, geometry)\n  })\n\n  newgeometry = retessellate(newgeometry)\n  return newgeometry\n}\n\nmodule.exports = intersect\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst fromFakePolygons = require('./fromFakePolygons')\nconst to3DWalls = require('./to3DWalls')\nconst intersectGeom3 = require('./intersectGeom3')\n\n/*\n * Return a new 2D geometry representing space in both the first geometry and\n * in the subsequent geometries. None of the given geometries are modified.\n * @param {...geom2} geometries - list of 2D geometries\n * @returns {geom2} new 2D geometry\n */\nconst intersect = (...geometries) => {\n  geometries = flatten(geometries)\n  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))\n\n  const newgeom3 = intersectGeom3(newgeometries)\n  const epsilon = measureEpsilon(newgeom3)\n\n  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))\n}\n\nmodule.exports = intersect\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\nconst intersectGeom2 = require('./intersectGeom2')\nconst intersectGeom3 = require('./intersectGeom3')\n\n/**\n * Return a new geometry representing space in both the first geometry and\n * all subsequent geometries.\n * The given geometries should be of the same type, either geom2 or geom3.\n *\n * @param {...Object} geometries - list of geometries\n * @returns {geom2|geom3} a new geometry\n * @alias module:modeling/booleans.intersect\n *\n * @example\n * let myshape = intersect(cube({size: [5,5,5]}), cube({size: [5,5,5], center: [5,5,5]}))\n *\n * @example\n * +-------+\n * |       |\n * |   A   |\n * |    +--+----+   =   +--+\n * +----+--+    |       +--+\n *      |   B   |\n *      |       |\n *      +-------+\n */\nconst intersect = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only intersect of the types are supported')\n  }\n\n  const geometry = geometries[0]\n  // if (path.isA(geometry)) return pathintersect(matrix, geometries)\n  if (geom2.isA(geometry)) return intersectGeom2(geometries)\n  if (geom3.isA(geometry)) return intersectGeom3(geometries)\n  return geometry\n}\n\nmodule.exports = intersect\n", "const vec3 = require('../../maths/vec3')\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst geom3 = require('../../geometries/geom3')\n\n// returns array numerically sorted and duplicates removed\nconst sortNb = (array) => array.sort((a, b) => a - b).filter((item, pos, ary) => !pos || item !== ary[pos - 1])\n\nconst insertMapping = (map, point, index) => {\n  const key = `${point}`\n  const mapping = map.get(key)\n  if (mapping === undefined) {\n    map.set(key, [index])\n  } else {\n    mapping.push(index)\n  }\n}\n\nconst findMapping = (map, point) => {\n  const key = `${point}`\n  return map.get(key)\n}\n\nconst scissionGeom3 = (geometry) => {\n  // construit table de correspondance entre polygones\n  // build polygons lookup table\n  const eps = measureEpsilon(geometry)\n  const polygons = geom3.toPolygons(geometry)\n  const pl = polygons.length\n\n  const indexesPerPoint = new Map()\n  const temp = vec3.create()\n  polygons.forEach((polygon, index) => {\n    polygon.vertices.forEach((point) => {\n      insertMapping(indexesPerPoint, vec3.snap(temp, point, eps), index)\n    })\n  })\n\n  const indexesPerPolygon = polygons.map((polygon) => {\n    let indexes = []\n    polygon.vertices.forEach((point) => {\n      indexes = indexes.concat(findMapping(indexesPerPoint, vec3.snap(temp, point, eps)))\n    })\n    return { e: 1, d: sortNb(indexes) } // for each polygon, push the list of indexes\n  })\n\n  indexesPerPoint.clear()\n\n  // regroupe les correspondances des polygones se touchant\n  // boucle ne s'arrêtant que quand deux passages retournent le même nb de polygones\n  // merge lookup data from linked polygons as long as possible\n  let merges = 0\n  const ippl = indexesPerPolygon.length\n  for (let i = 0; i < ippl; i++) {\n    const mapi = indexesPerPolygon[i]\n    // merge mappings if necessary\n    if (mapi.e > 0) {\n      const indexes = new Array(pl)\n      indexes[i] = true // include ourself\n      do {\n        merges = 0\n        // loop through the known indexes\n        indexes.forEach((e, j) => {\n          const mapj = indexesPerPolygon[j]\n          // merge this mapping if necessary\n          if (mapj.e > 0) {\n            mapj.e = -1 // merged\n            for (let d = 0; d < mapj.d.length; d++) {\n              indexes[mapj.d[d]] = true\n            }\n            merges++\n          }\n        })\n      } while (merges > 0)\n      mapi.indexes = indexes\n    }\n  }\n\n  // construit le tableau des geometry à retourner\n  // build array of geometry to return\n  const newgeometries = []\n  for (let i = 0; i < ippl; i++) {\n    if (indexesPerPolygon[i].indexes) {\n      const newpolygons = []\n      indexesPerPolygon[i].indexes.forEach((e, p) => newpolygons.push(polygons[p]))\n      newgeometries.push(geom3.create(newpolygons))\n    }\n  }\n\n  return newgeometries\n}\n\nmodule.exports = scissionGeom3\n", "const flatten = require('../../utils/flatten')\n\n// const geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\n// const scissionGeom2 = require('./scissionGeom2')\nconst scissionGeom3 = require('./scissionGeom3')\n\n/**\n * Scission (divide) the given geometry into the component pieces.\n *\n * @param {...Object} objects - list of geometries\n * @returns {Array} list of pieces from each geometry\n * @alias module:modeling/booleans.scission\n *\n * @example\n * let figure = require('./my.stl')\n * let pieces = scission(figure)\n *\n * @example\n * +-------+            +-------+\n * |       |            |       |\n * |   +---+            | A +---+\n * |   |    +---+   =   |   |    +---+\n * +---+    |   |       +---+    |   |\n *      +---+   |            +---+   |\n *      |       |            |    B  |\n *      +-------+            +-------+\n */\nconst scission = (...objects) => {\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    // if (path2.isA(object)) return path2.transform(matrix, object)\n    // if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return scissionGeom3(object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = scission\n", "const geom3 = require('../../geometries/geom3')\n\nconst mayOverlap = require('./mayOverlap')\nconst { Tree } = require('./trees')\n\n/*\n * Return a new 3D geometry representing the space in the first geometry but not\n * in the second geometry. None of the given geometries are modified.\n * @param {geom3} geometry1 - a geometry\n * @param {geom3} geometry2 - a geometry\n * @returns {geom3} new 3D geometry\n */\nconst subtractGeom3Sub = (geometry1, geometry2) => {\n  if (!mayOverlap(geometry1, geometry2)) {\n    return geom3.clone(geometry1)\n  }\n\n  const a = new Tree(geom3.toPolygons(geometry1))\n  const b = new Tree(geom3.toPolygons(geometry2))\n\n  a.invert()\n  a.clipTo(b)\n  b.clipTo(a, true)\n  a.addPolygons(b.allPolygons())\n  a.invert()\n\n  const newpolygons = a.allPolygons()\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = subtractGeom3Sub\n", "const flatten = require('../../utils/flatten')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst subtractSub = require('./subtractGeom3Sub')\n\n/*\n * Return a new 3D geometry representing space in this geometry but not in the given geometries.\n * Neither this geometry nor the given geometries are modified.\n * @param {...geom3} geometries - list of geometries\n * @returns {geom3} new 3D geometry\n */\nconst subtract = (...geometries) => {\n  geometries = flatten(geometries)\n\n  let newgeometry = geometries.shift()\n  geometries.forEach((geometry) => {\n    newgeometry = subtractSub(newgeometry, geometry)\n  })\n\n  newgeometry = retessellate(newgeometry)\n  return newgeometry\n}\n\nmodule.exports = subtract\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst fromFakePolygons = require('./fromFakePolygons')\nconst to3DWalls = require('./to3DWalls')\nconst subtractGeom3 = require('./subtractGeom3')\n\n/*\n * Return a new 2D geometry representing space in the first geometry but\n * not in the subsequent geometries. None of the given geometries are modified.\n * @param {...geom2} geometries - list of geometries\n * @returns {geom2} new 2D geometry\n */\nconst subtract = (...geometries) => {\n  geometries = flatten(geometries)\n  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))\n\n  const newgeom3 = subtractGeom3(newgeometries)\n  const epsilon = measureEpsilon(newgeom3)\n\n  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))\n}\n\nmodule.exports = subtract\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\nconst subtractGeom2 = require('./subtractGeom2')\nconst subtractGeom3 = require('./subtractGeom3')\n\n/**\n * Return a new geometry representing space in the first geometry but\n * not in all subsequent geometries.\n * The given geometries should be of the same type, either geom2 or geom3.\n *\n * @param {...Object} geometries - list of geometries\n * @returns {geom2|geom3} a new geometry\n * @alias module:modeling/booleans.subtract\n *\n * @example\n * let myshape = subtract(cuboid({size: [5,5,5]}), cuboid({size: [5,5,5], center: [5,5,5]}))\n *\n * @example\n * +-------+            +-------+\n * |       |            |       |\n * |   A   |            |       |\n * |    +--+----+   =   |    +--+\n * +----+--+    |       +----+\n *      |   B   |\n *      |       |\n *      +-------+\n */\nconst subtract = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only subtract of the types are supported')\n  }\n\n  const geometry = geometries[0]\n  // if (path.isA(geometry)) return pathsubtract(matrix, geometries)\n  if (geom2.isA(geometry)) return subtractGeom2(geometries)\n  if (geom3.isA(geometry)) return subtractGeom3(geometries)\n  return geometry\n}\n\nmodule.exports = subtract\n", "const geom3 = require('../../geometries/geom3')\n\nconst mayOverlap = require('./mayOverlap')\nconst { Tree } = require('./trees')\n\n/*\n * Return a new 3D geometry representing the space in the given geometries.\n * @param {geom3} geometry1 - geometry to union\n * @param {geom3} geometry2 - geometry to union\n * @returns {geom3} new 3D geometry\n */\nconst unionSub = (geometry1, geometry2) => {\n  if (!mayOverlap(geometry1, geometry2)) {\n    return unionForNonIntersecting(geometry1, geometry2)\n  }\n\n  const a = new Tree(geom3.toPolygons(geometry1))\n  const b = new Tree(geom3.toPolygons(geometry2))\n\n  a.clipTo(b, false)\n  // b.clipTo(a, true); // ERROR: doesn't work\n  b.clipTo(a)\n  b.invert()\n  b.clipTo(a)\n  b.invert()\n\n  const newpolygons = a.allPolygons().concat(b.allPolygons())\n  const result = geom3.create(newpolygons)\n  return result\n}\n\n// Like union, but when we know that the two solids are not intersecting\n// Do not use if you are not completely sure that the solids do not intersect!\nconst unionForNonIntersecting = (geometry1, geometry2) => {\n  let newpolygons = geom3.toPolygons(geometry1)\n  newpolygons = newpolygons.concat(geom3.toPolygons(geometry2))\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = unionSub\n", "const flatten = require('../../utils/flatten')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst unionSub = require('./unionGeom3Sub')\n\n/*\n * Return a new 3D geometry representing the space in the given 3D geometries.\n * @param {...objects} geometries - list of geometries to union\n * @returns {geom3} new 3D geometry\n */\nconst union = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // combine geometries in a way that forms a balanced binary tree pattern\n  let i\n  for (i = 1; i < geometries.length; i += 2) {\n    geometries.push(unionSub(geometries[i - 1], geometries[i]))\n  }\n  let newgeometry = geometries[i - 1]\n  newgeometry = retessellate(newgeometry)\n  return newgeometry\n}\n\nmodule.exports = union\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst fromFakePolygons = require('./fromFakePolygons')\nconst to3DWalls = require('./to3DWalls')\nconst unionGeom3 = require('./unionGeom3')\n\n/*\n * Return a new 2D geometry representing the total space in the given 2D geometries.\n * @param {...geom2} geometries - list of 2D geometries to union\n * @returns {geom2} new 2D geometry\n */\nconst union = (...geometries) => {\n  geometries = flatten(geometries)\n  const newgeometries = geometries.map((geometry) => to3DWalls({ z0: -1, z1: 1 }, geometry))\n\n  const newgeom3 = unionGeom3(newgeometries)\n  const epsilon = measureEpsilon(newgeom3)\n\n  return fromFakePolygons(epsilon, geom3.toPolygons(newgeom3))\n}\n\nmodule.exports = union\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\n\nconst unionGeom2 = require('./unionGeom2')\nconst unionGeom3 = require('./unionGeom3')\n\n/**\n * Return a new geometry representing the total space in the given geometries.\n * The given geometries should be of the same type, either geom2 or geom3.\n *\n * @param {...Object} geometries - list of geometries\n * @returns {geom2|geom3} a new geometry\n * @alias module:modeling/booleans.union\n *\n * @example\n * let myshape = union(cube({size: [5,5,5]}), cube({size: [5,5,5], center: [5,5,5]}))\n *\n * @example\n * +-------+            +-------+\n * |       |            |       |\n * |   A   |            |       |\n * |    +--+----+   =   |       +----+\n * +----+--+    |       +----+       |\n *      |   B   |            |       |\n *      |       |            |       |\n *      +-------+            +-------+\n */\nconst union = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only unions of the same type are supported')\n  }\n\n  const geometry = geometries[0]\n  // if (path.isA(geometry)) return pathunion(matrix, geometries)\n  if (geom2.isA(geometry)) return unionGeom2(geometries)\n  if (geom3.isA(geometry)) return unionGeom3(geometries)\n  return geometry\n}\n\nmodule.exports = union\n", "/**\n * All shapes (primitives or the results of operations) can be passed to boolean functions\n * to perform logical operations, e.g. remove a hole from a board.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/booleans\n * @example\n * const { intersect, subtract, union } = require('@jscad/modeling').booleans\n */\nmodule.exports = {\n  intersect: require('./intersect'),\n  scission: require('./scission'),\n  subtract: require('./subtract'),\n  union: require('./union')\n}\n", "const { EPS, TAU } = require('../../maths/constants')\n\nconst intersect = require('../../maths/utils/intersect')\nconst line2 = require('../../maths/line2')\nconst vec2 = require('../../maths/vec2')\nconst area = require('../../maths/utils/area')\n\n/*\n * Create a set of offset points from the given points using the given options (if any).\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {Integer} [options.closed=false] - is the last point connected back to the first point?\n * @param {Array} points - array of 2D points\n * @returns {Array} new set of offset points, plus points for each rounded corner\n */\nconst offsetFromPoints = (options, points) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    closed: false,\n    segments: 16\n  }\n  let { delta, corners, closed, segments } = Object.assign({ }, defaults, options)\n\n  if (Math.abs(delta) < EPS) return points\n\n  let rotation = options.closed ? area(points) : 1.0 // + counter clockwise, - clockwise\n  if (rotation === 0) rotation = 1.0\n\n  // use right hand normal?\n  const orientation = ((rotation > 0) && (delta >= 0)) || ((rotation < 0) && (delta < 0))\n  delta = Math.abs(delta) // sign is no longer required\n\n  let previousSegment = null\n  let newPoints = []\n  const newCorners = []\n  const of = vec2.create()\n  const n = points.length\n  for (let i = 0; i < n; i++) {\n    const j = (i + 1) % n\n    const p0 = points[i]\n    const p1 = points[j]\n    // calculate the unit normal\n    orientation ? vec2.subtract(of, p0, p1) : vec2.subtract(of, p1, p0)\n    vec2.normal(of, of)\n    vec2.normalize(of, of)\n    // calculate the offset vector\n    vec2.scale(of, of, delta)\n    // calculate the new points (edge)\n    const n0 = vec2.add(vec2.create(), p0, of)\n    const n1 = vec2.add(vec2.create(), p1, of)\n\n    const currentSegment = [n0, n1]\n    if (previousSegment != null) {\n      if (closed || (!closed && j !== 0)) {\n        // check for intersection of new line segments\n        const ip = intersect(previousSegment[0], previousSegment[1], currentSegment[0], currentSegment[1])\n        if (ip) {\n          // adjust the previous points\n          newPoints.pop()\n          // adjust current points\n          currentSegment[0] = ip\n        } else {\n          newCorners.push({ c: p0, s0: previousSegment, s1: currentSegment })\n        }\n      }\n    }\n    previousSegment = [n0, n1]\n\n    if (j === 0 && !closed) continue\n\n    newPoints.push(currentSegment[0])\n    newPoints.push(currentSegment[1])\n  }\n  // complete the closure if required\n  if (closed && previousSegment != null) {\n    // check for intersection of closing line segments\n    const n0 = newPoints[0]\n    const n1 = newPoints[1]\n    const ip = intersect(previousSegment[0], previousSegment[1], n0, n1)\n    if (ip) {\n      // adjust the previous points\n      newPoints[0] = ip\n      newPoints.pop()\n    } else {\n      const p0 = points[0]\n      const cursegment = [n0, n1]\n      newCorners.push({ c: p0, s0: previousSegment, s1: cursegment })\n    }\n  }\n\n  // generate corners if necessary\n\n  if (corners === 'edge') {\n    // map for fast point index lookup\n    const pointIndex = new Map() // {point: index}\n    newPoints.forEach((point, index) => pointIndex.set(point, index))\n\n    // create edge corners\n    const line0 = line2.create()\n    const line1 = line2.create()\n    newCorners.forEach((corner) => {\n      line2.fromPoints(line0, corner.s0[0], corner.s0[1])\n      line2.fromPoints(line1, corner.s1[0], corner.s1[1])\n      const ip = line2.intersectPointOfLines(line0, line1)\n      if (Number.isFinite(ip[0]) && Number.isFinite(ip[1])) {\n        const p0 = corner.s0[1]\n        const i = pointIndex.get(p0)\n        newPoints[i] = ip\n        newPoints[(i + 1) % newPoints.length] = undefined\n      } else {\n        // paralell segments, drop one\n        const p0 = corner.s1[0]\n        const i = pointIndex.get(p0)\n        newPoints[i] = undefined\n      }\n    })\n    newPoints = newPoints.filter((p) => p !== undefined)\n  }\n\n  if (corners === 'round') {\n    // create rounded corners\n    let cornersegments = Math.floor(segments / 4)\n    const v0 = vec2.create()\n    newCorners.forEach((corner) => {\n      // calculate angle of rotation\n      let rotation = vec2.angle(vec2.subtract(v0, corner.s1[0], corner.c))\n      rotation -= vec2.angle(vec2.subtract(v0, corner.s0[1], corner.c))\n      if (orientation && rotation < 0) {\n        rotation = rotation + Math.PI\n        if (rotation < 0) rotation = rotation + Math.PI\n      }\n      if ((!orientation) && rotation > 0) {\n        rotation = rotation - Math.PI\n        if (rotation > 0) rotation = rotation - Math.PI\n      }\n\n      if (rotation !== 0.0) {\n        // generate the segments\n        cornersegments = Math.floor(segments * (Math.abs(rotation) / TAU))\n        const step = rotation / cornersegments\n        const start = vec2.angle(vec2.subtract(v0, corner.s0[1], corner.c))\n        const cornerpoints = []\n        for (let i = 1; i < cornersegments; i++) {\n          const radians = start + (step * i)\n          const point = vec2.fromAngleRadians(vec2.create(), radians)\n          vec2.scale(point, point, delta)\n          vec2.add(point, point, corner.c)\n          cornerpoints.push(point)\n        }\n        if (cornerpoints.length > 0) {\n          const p0 = corner.s0[1]\n          let i = newPoints.findIndex((point) => vec2.equals(p0, point))\n          i = (i + 1) % newPoints.length\n          newPoints.splice(i, 0, ...cornerpoints)\n        }\n      } else {\n        // paralell segments, drop one\n        const p0 = corner.s1[0]\n        const i = newPoints.findIndex((point) => vec2.equals(p0, point))\n        newPoints.splice(i, 1)\n      }\n    })\n  }\n  return newPoints\n}\n\nmodule.exports = offsetFromPoints\n", "const geom2 = require('../../geometries/geom2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\n/*\n * Expand the given geometry (geom2) using the given options (if any).\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+/-) of expansion\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {geom2} geometry - the geometry to expand\n * @returns {geom2} expanded geometry\n */\nconst expandGeom2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    segments: 16\n  }\n  const { delta, corners, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  // convert the geometry to outlines, and generate offsets from each\n  const outlines = geom2.toOutlines(geometry)\n  const newoutlines = outlines.map((outline) => {\n    options = {\n      delta,\n      corners,\n      closed: true,\n      segments\n    }\n    return offsetFromPoints(options, outline)\n  })\n\n  // create a composite geometry from the new outlines\n  const allsides = newoutlines.reduce((sides, newoutline) => sides.concat(geom2.toSides(geom2.fromPoints(newoutline))), [])\n  return geom2.create(allsides)\n}\n\nmodule.exports = expandGeom2\n", "const mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\n// Extrude a polygon in the direction of the offsetvector.\n// Returns (geom3) a new geometry\nconst extrudePolygon = (offsetvector, polygon1) => {\n  const direction = vec3.dot(poly3.plane(polygon1), offsetvector)\n  if (direction > 0) {\n    polygon1 = poly3.invert(polygon1)\n  }\n\n  const newpolygons = [polygon1]\n\n  const polygon2 = poly3.transform(mat4.fromTranslation(mat4.create(), offsetvector), polygon1)\n  const numvertices = polygon1.vertices.length\n  for (let i = 0; i < numvertices; i++) {\n    const nexti = (i < (numvertices - 1)) ? i + 1 : 0\n    const sideFacePolygon = poly3.create([\n      polygon1.vertices[i],\n      polygon2.vertices[i],\n      polygon2.vertices[nexti],\n      polygon1.vertices[nexti]\n    ])\n    newpolygons.push(sideFacePolygon)\n  }\n  newpolygons.push(poly3.invert(polygon2))\n\n  return geom3.create(newpolygons)\n}\n\nmodule.exports = extrudePolygon\n", "const { EPS, TAU } = require('../../maths/constants')\n\nconst mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst fnNumberSort = require('../../utils/fnNumberSort')\n\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst sphere = require('../../primitives/sphere')\n\nconst retessellate = require('../modifiers/retessellate')\n\nconst unionGeom3Sub = require('../booleans/unionGeom3Sub')\n\nconst extrudePolygon = require('./extrudePolygon')\n\n/*\n * Collect all planes adjacent to each vertex\n */\nconst mapPlaneToVertex = (map, vertex, plane) => {\n  const key = vertex.toString()\n  if (!map.has(key)) {\n    const entry = [vertex, [plane]]\n    map.set(key, entry)\n  } else {\n    const planes = map.get(key)[1]\n    planes.push(plane)\n  }\n}\n\n/*\n * Collect all planes adjacent to each edge.\n * Combine undirected edges, no need for duplicate cylinders.\n */\nconst mapPlaneToEdge = (map, edge, plane) => {\n  const key0 = edge[0].toString()\n  const key1 = edge[1].toString()\n  // Sort keys to make edges undirected\n  const key = key0 < key1 ? `${key0},${key1}` : `${key1},${key0}`\n  if (!map.has(key)) {\n    const entry = [edge, [plane]]\n    map.set(key, entry)\n  } else {\n    const planes = map.get(key)[1]\n    planes.push(plane)\n  }\n}\n\nconst addUniqueAngle = (map, angle) => {\n  const i = map.findIndex((item) => item === angle)\n  if (i < 0) {\n    map.push(angle)\n  }\n}\n\n/*\n * Create the expanded shell of the solid:\n * All faces are extruded to 2 times delta\n * Cylinders are constructed around every side\n * Spheres are placed on every vertex\n * the result is a true expansion of the solid\n * @param  {Number} delta\n * @param  {Integer} segments\n */\nconst expandShell = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    segments: 12\n  }\n  const { delta, segments } = Object.assign({ }, defaults, options)\n\n  let result = geom3.create()\n  const vertices2planes = new Map() // {vertex: [vertex, [plane, ...]]}\n  const edges2planes = new Map() // {edge: [[vertex, vertex], [plane, ...]]}\n\n  const v1 = vec3.create()\n  const v2 = vec3.create()\n\n  // loop through the polygons\n  // - extruded the polygon, and add to the composite result\n  // - add the plane to the unique vertice map\n  // - add the plane to the unique edge map\n  const polygons = geom3.toPolygons(geometry)\n  polygons.forEach((polygon, index) => {\n    const extrudevector = vec3.scale(vec3.create(), poly3.plane(polygon), 2 * delta)\n    const translatedpolygon = poly3.transform(mat4.fromTranslation(mat4.create(), vec3.scale(vec3.create(), extrudevector, -0.5)), polygon)\n    const extrudedface = extrudePolygon(extrudevector, translatedpolygon)\n    result = unionGeom3Sub(result, extrudedface)\n\n    const vertices = polygon.vertices\n    for (let i = 0; i < vertices.length; i++) {\n      mapPlaneToVertex(vertices2planes, vertices[i], poly3.plane(polygon))\n      const j = (i + 1) % vertices.length\n      const edge = [vertices[i], vertices[j]]\n      mapPlaneToEdge(edges2planes, edge, poly3.plane(polygon))\n    }\n  })\n\n  // now construct a cylinder on every side\n  // The cylinder is always an approximation of a true cylinder, having polygons\n  // around the sides. We will make sure though that the cylinder will have an edge at every\n  // face that touches this side. This ensures that we will get a smooth fill even\n  // if two edges are at, say, 10 degrees and the segments is low.\n  edges2planes.forEach((item) => {\n    const edge = item[0]\n    const planes = item[1]\n    const startpoint = edge[0]\n    const endpoint = edge[1]\n\n    // our x,y and z vectors:\n    const zbase = vec3.subtract(vec3.create(), endpoint, startpoint)\n    vec3.normalize(zbase, zbase)\n    const xbase = planes[0]\n    const ybase = vec3.cross(vec3.create(), xbase, zbase)\n\n    // make a list of angles that the cylinder should traverse:\n    let angles = []\n\n    // first of all equally spaced around the cylinder:\n    for (let i = 0; i < segments; i++) {\n      addUniqueAngle(angles, (i * TAU / segments))\n    }\n\n    // and also at every normal of all touching planes:\n    for (let i = 0, iMax = planes.length; i < iMax; i++) {\n      const planenormal = planes[i]\n      const si = vec3.dot(ybase, planenormal)\n      const co = vec3.dot(xbase, planenormal)\n      let angle = Math.atan2(si, co)\n\n      if (angle < 0) angle += TAU\n      addUniqueAngle(angles, angle)\n      angle = Math.atan2(-si, -co)\n      if (angle < 0) angle += TAU\n      addUniqueAngle(angles, angle)\n    }\n\n    // this will result in some duplicate angles but we will get rid of those later.\n    angles = angles.sort(fnNumberSort)\n\n    // Now construct the cylinder by traversing all angles:\n    const numangles = angles.length\n    let prevp1\n    let prevp2\n    const startfacevertices = []\n    const endfacevertices = []\n    const polygons = []\n    for (let i = -1; i < numangles; i++) {\n      const angle = angles[(i < 0) ? (i + numangles) : i]\n      const si = Math.sin(angle)\n      const co = Math.cos(angle)\n      vec3.scale(v1, xbase, co * delta)\n      vec3.scale(v2, ybase, si * delta)\n      vec3.add(v1, v1, v2)\n      const p1 = vec3.add(vec3.create(), startpoint, v1)\n      const p2 = vec3.add(vec3.create(), endpoint, v1)\n      let skip = false\n      if (i >= 0) {\n        if (vec3.distance(p1, prevp1) < EPS) {\n          skip = true\n        }\n      }\n      if (!skip) {\n        if (i >= 0) {\n          startfacevertices.push(p1)\n          endfacevertices.push(p2)\n          const points = [prevp2, p2, p1, prevp1]\n          const polygon = poly3.create(points)\n          polygons.push(polygon)\n        }\n        prevp1 = p1\n        prevp2 = p2\n      }\n    }\n    endfacevertices.reverse()\n    polygons.push(poly3.create(startfacevertices))\n    polygons.push(poly3.create(endfacevertices))\n\n    const cylinder = geom3.create(polygons)\n    result = unionGeom3Sub(result, cylinder)\n  })\n\n  // build spheres at each unique vertex\n  // We will try to set the x and z axis to the normals of 2 planes\n  // This will ensure that our sphere tesselation somewhat matches 2 planes\n  vertices2planes.forEach((item) => {\n    const vertex = item[0]\n    const planes = item[1]\n    // use the first normal to be the x axis of our sphere:\n    const xaxis = planes[0]\n    // and find a suitable z axis. We will use the normal which is most perpendicular to the x axis:\n    let bestzaxis = null\n    let bestzaxisorthogonality = 0\n    for (let i = 1; i < planes.length; i++) {\n      const normal = planes[i]\n      const cross = vec3.cross(v1, xaxis, normal)\n      const crosslength = vec3.length(cross)\n      if (crosslength > 0.05) { // FIXME why 0.05?\n        if (crosslength > bestzaxisorthogonality) {\n          bestzaxisorthogonality = crosslength\n          bestzaxis = normal\n        }\n      }\n    }\n    if (!bestzaxis) {\n      bestzaxis = vec3.orthogonal(v1, xaxis)\n    }\n    const yaxis = vec3.cross(v1, xaxis, bestzaxis)\n    vec3.normalize(yaxis, yaxis)\n    const zaxis = vec3.cross(v2, yaxis, xaxis)\n    const corner = sphere({\n      center: [vertex[0], vertex[1], vertex[2]],\n      radius: delta,\n      segments: segments,\n      axes: [xaxis, yaxis, zaxis]\n    })\n    result = unionGeom3Sub(result, corner)\n  })\n  return retessellate(result)\n}\n\nmodule.exports = expandShell\n", "const geom3 = require('../../geometries/geom3')\n\nconst union = require('../booleans/union')\n\nconst expandShell = require('./expandShell')\n\n/*\n * Expand the given geometry (geom3) using the given options (if any).\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+/-) of expansion\n * @param {String} [options.corners='round'] - type corner to create during of expansion; round\n * @param {Integer} [options.segments=12] - number of segments when creating round corners\n * @param {geom3} geometry - the geometry to expand\n * @returns {geom3} expanded geometry\n */\nconst expandGeom3 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'round',\n    segments: 12\n  }\n  const { delta, corners, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'round')) {\n    throw new Error('corners must be \"round\" for 3D geometries')\n  }\n\n  const polygons = geom3.toPolygons(geometry)\n  if (polygons.length === 0) throw new Error('the given geometry cannot be empty')\n\n  options = { delta, corners, segments }\n  const expanded = expandShell(options, geometry)\n  return union(geometry, expanded)\n}\n\nmodule.exports = expandGeom3\n", "const area = require('../../maths/utils/area')\n\nconst vec2 = require('../../maths/vec2')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\nconst createGeometryFromClosedOffsets = (paths) => {\n  let { external, internal } = paths\n  if (area(external) < 0) {\n    external = external.reverse()\n  } else {\n    internal = internal.reverse()\n  }\n  // NOTE: creating path2 from the points ensures proper closure\n  const externalPath = path2.fromPoints({ closed: true }, external)\n  const internalPath = path2.fromPoints({ closed: true }, internal)\n  const externalSides = geom2.toSides(geom2.fromPoints(path2.toPoints(externalPath)))\n  const internalSides = geom2.toSides(geom2.fromPoints(path2.toPoints(internalPath)))\n  externalSides.push(...internalSides)\n  return geom2.create(externalSides)\n}\n\nconst createGeometryFromExpandedOpenPath = (paths, segments, corners, delta) => {\n  const { points, external, internal } = paths\n  const capSegments = Math.floor(segments / 2) // rotation is 180 degrees\n  const e2iCap = []\n  const i2eCap = []\n  if (corners === 'round' && capSegments > 0) {\n    // added round caps to the geometry\n    const step = Math.PI / capSegments\n    const eCorner = points[points.length - 1]\n    const e2iStart = vec2.angle(vec2.subtract(vec2.create(), external[external.length - 1], eCorner))\n    const iCorner = points[0]\n    const i2eStart = vec2.angle(vec2.subtract(vec2.create(), internal[0], iCorner))\n    for (let i = 1; i < capSegments; i++) {\n      let radians = e2iStart + (step * i)\n      let point = vec2.fromAngleRadians(vec2.create(), radians)\n      vec2.scale(point, point, delta)\n      vec2.add(point, point, eCorner)\n      e2iCap.push(point)\n\n      radians = i2eStart + (step * i)\n      point = vec2.fromAngleRadians(vec2.create(), radians)\n      vec2.scale(point, point, delta)\n      vec2.add(point, point, iCorner)\n      i2eCap.push(point)\n    }\n  }\n  const allPoints = []\n  allPoints.push(...external, ...e2iCap, ...internal.reverse(), ...i2eCap)\n  return geom2.fromPoints(allPoints)\n}\n\n/*\n * Expand the given geometry (path2) using the given options (if any).\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+) of expansion\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {path2} geometry - the geometry to expand\n * @returns {geom2} expanded geometry\n */\nconst expandPath2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    segments: 16\n  }\n\n  options = Object.assign({ }, defaults, options)\n  const { delta, corners, segments } = options\n\n  if (delta <= 0) throw new Error('the given delta must be positive for paths')\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  const closed = geometry.isClosed\n  const points = path2.toPoints(geometry)\n  if (points.length === 0) throw new Error('the given geometry cannot be empty')\n\n  const paths = {\n    points: points,\n    external: offsetFromPoints({ delta, corners, segments, closed }, points),\n    internal: offsetFromPoints({ delta: -delta, corners, segments, closed }, points)\n  }\n\n  if (geometry.isClosed) {\n    return createGeometryFromClosedOffsets(paths)\n  } else {\n    return createGeometryFromExpandedOpenPath(paths, segments, corners, delta)\n  }\n}\n\nmodule.exports = expandPath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst expandGeom2 = require('./expandGeom2')\nconst expandGeom3 = require('./expandGeom3')\nconst expandPath2 = require('./expandPath2')\n\n/**\n * Expand the given geometry using the given options.\n * Both internal and external space is expanded for 2D and 3D shapes.\n *\n * Note: Contract is expand using a negative delta.\n * @param {Object} options - options for expand\n * @param {Number} [options.delta=1] - delta (+/-) of expansion\n * @param {String} [options.corners='edge'] - type of corner to create after expanding; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {...Objects} objects - the geometries to expand\n * @return {Object|Array} new geometry, or list of new geometries\n * @alias module:modeling/expansions.expand\n *\n * @example\n * let newarc = expand({delta: 5, corners: 'edge'}, arc({}))\n * let newsquare = expand({delta: 5, corners: 'chamfer'}, square({size: 30}))\n * let newsphere = expand({delta: 2, corners: 'round'}, cuboid({size: [20, 25, 5]}))\n */\nconst expand = (options, ...objects) => {\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return expandPath2(options, object)\n    if (geom2.isA(object)) return expandGeom2(options, object)\n    if (geom3.isA(object)) return expandGeom3(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = expand\n", "const geom2 = require('../../geometries/geom2')\nconst poly2 = require('../../geometries/poly2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\n/*\n * Create a offset geometry from the given geom2 using the given options (if any).\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {geom2} geometry - geometry from which to create the offset\n * @returns {geom2} offset geometry, plus rounded corners\n */\nconst offsetGeom2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    segments: 0\n  }\n  const { delta, corners, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  // convert the geometry to outlines, and generate offsets from each\n  const outlines = geom2.toOutlines(geometry)\n  const newoutlines = outlines.map((outline) => {\n    const level = outlines.reduce((acc, polygon) => acc + poly2.arePointsInside(outline, poly2.create(polygon)), 0)\n    const outside = (level % 2) === 0\n\n    options = {\n      delta: outside ? delta : -delta,\n      corners,\n      closed: true,\n      segments\n    }\n    return offsetFromPoints(options, outline)\n  })\n\n  // create a composite geometry from the new outlines\n  const allsides = newoutlines.reduce((sides, newoutline) => sides.concat(geom2.toSides(geom2.fromPoints(newoutline))), [])\n  return geom2.create(allsides)\n}\n\nmodule.exports = offsetGeom2\n", "const path2 = require('../../geometries/path2')\n\nconst offsetFromPoints = require('./offsetFromPoints')\n\n/*\n * Create a offset geometry from the given path using the given options (if any).\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type corner to create during of expansion; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {path2} geometry - geometry from which to create the offset\n * @returns {path2} offset geometry, plus rounded corners\n */\nconst offsetPath2 = (options, geometry) => {\n  const defaults = {\n    delta: 1,\n    corners: 'edge',\n    closed: geometry.isClosed,\n    segments: 16\n  }\n  const { delta, corners, closed, segments } = Object.assign({ }, defaults, options)\n\n  if (!(corners === 'edge' || corners === 'chamfer' || corners === 'round')) {\n    throw new Error('corners must be \"edge\", \"chamfer\", or \"round\"')\n  }\n\n  options = { delta, corners, closed, segments }\n  const newpoints = offsetFromPoints(options, path2.toPoints(geometry))\n  return path2.fromPoints({ closed: closed }, newpoints)\n}\n\nmodule.exports = offsetPath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst offsetGeom2 = require('./offsetGeom2')\nconst offsetPath2 = require('./offsetPath2')\n\n/**\n * Create offset geometry from the given geometry using the given options.\n * Offsets from internal and external space are created.\n * @param {Object} options - options for offset\n * @param {Float} [options.delta=1] - delta of offset (+ to exterior, - from interior)\n * @param {String} [options.corners='edge'] - type of corner to create after offseting; edge, chamfer, round\n * @param {Integer} [options.segments=16] - number of segments when creating round corners\n * @param {...Object} objects - the geometries to offset\n * @return {Object|Array} new geometry, or list of new geometries\n * @alias module:modeling/expansions.offset\n *\n * @example\n * let small = offset({ delta: -4, corners: 'chamfer' }, square({size: 40})) // contract\n */\nconst offset = (options, ...objects) => {\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return offsetPath2(options, object)\n    if (geom2.isA(object)) return offsetGeom2(options, object)\n    // if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = offset\n", "/**\n * All shapes (primitives or the results of operations) can be expanded (or contracted.)\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/expansions\n * @example\n * const { expand, offset } = require('@jscad/modeling').expansions\n */\nmodule.exports = {\n  expand: require('./expand'),\n  offset: require('./offset')\n}\n", "const mat4 = require('../../maths/mat4')\nconst vec3 = require('../../maths/vec3')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst slice = require('./slice')\n\nconst extrudeFromSlices = require('./extrudeFromSlices')\n\n/*\n * Extrude the given geometry using the given options.\n *\n * @param {Object} [options] - options for extrude\n * @param {Array} [options.offset] - the direction of the extrusion as a 3D vector\n * @param {Number} [options.twistAngle] - the final rotation (RADIANS) about the origin\n * @param {Integer} [options.twistSteps] - the number of steps created to produce the twist (if any)\n * @param {Boolean} [options.repair] - repair gaps in the geometry\n * @param {geom2} geometry - the geometry to extrude\n * @returns {geom3} the extruded 3D geometry\n*/\nconst extrudeGeom2 = (options, geometry) => {\n  const defaults = {\n    offset: [0, 0, 1],\n    twistAngle: 0,\n    twistSteps: 12,\n    repair: true\n  }\n  let { offset, twistAngle, twistSteps, repair } = Object.assign({ }, defaults, options)\n\n  if (twistSteps < 1) throw new Error('twistSteps must be 1 or more')\n\n  if (twistAngle === 0) {\n    twistSteps = 1\n  }\n\n  // convert to vector in order to perform transforms\n  const offsetv = vec3.clone(offset)\n\n  const baseSides = geom2.toSides(geometry)\n  if (baseSides.length === 0) throw new Error('the given geometry cannot be empty')\n\n  const baseSlice = slice.fromSides(baseSides)\n  if (offsetv[2] < 0) slice.reverse(baseSlice, baseSlice)\n\n  const matrix = mat4.create()\n  const createTwist = (progress, index, base) => {\n    const Zrotation = index / twistSteps * twistAngle\n    const Zoffset = vec3.scale(vec3.create(), offsetv, index / twistSteps)\n    mat4.multiply(matrix, mat4.fromZRotation(matrix, Zrotation), mat4.fromTranslation(mat4.create(), Zoffset))\n\n    return slice.transform(matrix, base)\n  }\n\n  options = {\n    numberOfSlices: twistSteps + 1,\n    capStart: true,\n    capEnd: true,\n    repair,\n    callback: createTwist\n  }\n  return extrudeFromSlices(options, baseSlice)\n}\n\nmodule.exports = extrudeGeom2\n", "const geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\n\n/*\n * Extrude the given geometry using the given options.\n *\n * @param {Object} [options] - options for extrude\n * @param {Array} [options.offset] - the direction of the extrusion as a 3D vector\n * @param {Number} [options.twistAngle] - the final rotation (RADIANS) about the origin\n * @param {Integer} [options.twistSteps] - the number of steps created to produce the twist (if any)\n * @param {path2} geometry - the geometry to extrude\n * @returns {geom3} the extruded 3D geometry\n*/\nconst extrudePath2 = (options, geometry) => {\n  if (!geometry.isClosed) throw new Error('extruded path must be closed')\n  // Convert path2 to geom2\n  const points = path2.toPoints(geometry)\n  const geometry2 = geom2.fromPoints(points)\n  return extrudeLinearGeom2(options, geometry2)\n}\n\nmodule.exports = extrudePath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\nconst extrudeLinearPath2 = require('./extrudeLinearPath2')\n\n/**\n * Extrude the given geometry in an upward linear direction using the given options.\n * Accepts path2 or geom2 objects as input. Paths must be closed.\n *\n * @param {Object} options - options for extrude\n * @param {Number} [options.height=1] the height of the extrusion\n * @param {Number} [options.twistAngle=0] the final rotation (RADIANS) about the origin of the shape (if any)\n * @param {Integer} [options.twistSteps=1] the resolution of the twist about the axis (if any)\n * @param {...Object} objects - the geometries to extrude\n * @return {Object|Array} the extruded geometry, or a list of extruded geometry\n * @alias module:modeling/extrusions.extrudeLinear\n *\n * @example\n * let myshape = extrudeLinear({height: 10}, rectangle({size: [20, 25]}))\n */\nconst extrudeLinear = (options, ...objects) => {\n  const defaults = {\n    height: 1,\n    twistAngle: 0,\n    twistSteps: 1,\n    repair: true\n  }\n  const { height, twistAngle, twistSteps, repair } = Object.assign({ }, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  options = { offset: [0, 0, height], twistAngle, twistSteps, repair }\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return extrudeLinearPath2(options, object)\n    if (geom2.isA(object)) return extrudeLinearGeom2(options, object)\n    // if (geom3.isA(object)) return geom3.extrude(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = extrudeLinear\n", "const path2 = require('../../geometries/path2')\n\nconst expand = require('../expansions/expand')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\n\n/*\n * Expand and extrude the given geometry (path2).\n * @See expand for addition options\n * @param {Object} options - options for extrusion, if any\n * @param {Number} [options.size=1] - size of the rectangle\n * @param {Number} [options.height=1] - height of the extrusion\n * @param {path2} geometry - the geometry to extrude\n * @return {geom3} the extruded geometry\n */\nconst extrudeRectangularPath2 = (options, geometry) => {\n  const defaults = {\n    size: 1,\n    height: 1\n  }\n  const { size, height } = Object.assign({ }, defaults, options)\n\n  options.delta = size\n  options.offset = [0, 0, height]\n\n  const points = path2.toPoints(geometry)\n  if (points.length === 0) throw new Error('the given geometry cannot be empty')\n\n  const newgeometry = expand(options, geometry)\n  return extrudeLinearGeom2(options, newgeometry)\n}\n\nmodule.exports = extrudeRectangularPath2\n", "const { area } = require('../../maths/utils')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst expand = require('../expansions/expand')\n\nconst extrudeLinearGeom2 = require('./extrudeLinearGeom2')\n\n/*\n * Expand and extrude the given geometry (geom2).\n * @see expand for additional options\n * @param {Object} options - options for extrusion, if any\n * @param {Number} [options.size=1] - size of the rectangle\n * @param {Number} [options.height=1] - height of the extrusion\n * @param {geom2} geometry - the geometry to extrude\n * @return {geom3} the extruded geometry\n */\nconst extrudeRectangularGeom2 = (options, geometry) => {\n  const defaults = {\n    size: 1,\n    height: 1\n  }\n  const { size, height } = Object.assign({ }, defaults, options)\n\n  options.delta = size\n  options.offset = [0, 0, height]\n\n  // convert the geometry to outlines\n  const outlines = geom2.toOutlines(geometry)\n  if (outlines.length === 0) throw new Error('the given geometry cannot be empty')\n\n  // expand the outlines\n  const newparts = outlines.map((outline) => {\n    if (area(outline) < 0) outline.reverse() // all outlines must wind counter clockwise\n    return expand(options, path2.fromPoints({ closed: true }, outline))\n  })\n\n  // create a composite geometry\n  const allsides = newparts.reduce((sides, part) => sides.concat(geom2.toSides(part)), [])\n  const newgeometry = geom2.create(allsides)\n\n  return extrudeLinearGeom2(options, newgeometry)\n}\n\nmodule.exports = extrudeRectangularGeom2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst path2 = require('../../geometries/path2')\n\nconst extrudeRectangularPath2 = require('./extrudeRectangularPath2')\nconst extrudeRectangularGeom2 = require('./extrudeRectangularGeom2')\n\n/**\n * Extrude the given geometry by following the outline(s) with a rectangle.\n * @See expand for addition options\n * @param {Object} options - options for extrusion, if any\n * @param {Number} [options.size=1] - size of the rectangle\n * @param {Number} [options.height=1] - height of the extrusion\n * @param {...Object} objects - the geometries to extrude\n * @return {Object|Array} the extruded object, or a list of extruded objects\n * @alias module:modeling/extrusions.extrudeRectangular\n *\n * @example\n * let mywalls = extrudeRectangular({size: 1, height: 3}, square({size: 20}))\n * let mywalls = extrudeRectangular({size: 1, height: 300, twistAngle: TAU / 2}, square({size: 20}))\n */\nconst extrudeRectangular = (options, ...objects) => {\n  const defaults = {\n    size: 1,\n    height: 1\n  }\n  const { size, height } = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  if (size <= 0) throw new Error('size must be positive')\n  if (height <= 0) throw new Error('height must be positive')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return extrudeRectangularPath2(options, object)\n    if (geom2.isA(object)) return extrudeRectangularGeom2(options, object)\n    // if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = extrudeRectangular\n", "const { TAU } = require('../../maths/constants')\nconst slice = require('./slice')\nconst mat4 = require('../../maths/mat4')\nconst extrudeFromSlices = require('./extrudeFromSlices')\nconst geom2 = require('../../geometries/geom2')\n\n/**\n * Perform a helical extrude of the geometry, using the given options.\n *\n * @param {Object} options - options for extrusion\n * @param {Number} [options.angle=TAU] - angle of the extrusion (RADIANS) positive for right-hand rotation, negative for left-hand\n * @param {Number} [options.startAngle=0] - start angle of the extrusion (RADIANS)\n * @param {Number} [options.pitch=10] - elevation gain for each turn\n * @param {Number} [options.height] - total height of the helix path. Ignored if pitch is set.\n * @param {Number} [options.endOffset=0] - offset the final radius of the extrusion, allowing for tapered helix, and or spiral\n * @param {Number} [options.segmentsPerRotation=32] - number of segments per full rotation of the extrusion\n * @param {geom2} geometry - the geometry to extrude\n * @returns {geom3} the extruded geometry\n * @alias module:modeling/extrusions.extrudeHelical\n *\n * @example\n * const myshape = extrudeHelical(\n *  {\n *      angle: Math.PI * 4,\n *      pitch: 10,\n *      segmentsPerRotation: 64\n *  },\n *  circle({size: 3, center: [10, 0]})\n * )\n */\nconst extrudeHelical = (options, geometry) => {\n  const defaults = {\n    angle: TAU,\n    startAngle: 0,\n    pitch: 10,\n    endOffset: 0,\n    segmentsPerRotation: 32\n  }\n  const { angle, endOffset, segmentsPerRotation, startAngle } = Object.assign({}, defaults, options)\n\n  let pitch\n  // ignore height if pitch is set\n  if(!options.pitch && options.height) {\n    pitch = options.height / (angle / TAU)\n  } else {\n    pitch = options.pitch ? options.pitch : defaults.pitch\n  }\n\n  // needs at least 3 segments for each revolution\n  const minNumberOfSegments = 3\n\n  if (segmentsPerRotation < minNumberOfSegments)\n    throw new Error(`The number of segments per rotation needs to be at least 3.`)\n\n  let shapeSides = geom2.toSides(geometry)\n  if (shapeSides.length === 0) throw new Error('the given geometry cannot be empty')\n\n  // const pointsWithNegativeX = shapeSides.filter((s) => (s[0][0] < 0))\n  const pointsWithPositiveX = shapeSides.filter((s) => (s[0][0] >= 0))\n  \n  let baseSlice = slice.fromSides(shapeSides)\n  \n  if(pointsWithPositiveX.length === 0) {\n    // only points in negative x plane, reverse\n    baseSlice = slice.reverse(baseSlice)\n  }\n\n  const calculatedSegments = Math.round(segmentsPerRotation / TAU * Math.abs(angle))\n  const segments = calculatedSegments >= 2 ? calculatedSegments : 2\n  // define transform matrix variables for performance increase\n  const step1 = mat4.create()\n  let matrix\n  const sliceCallback = (progress, index, base) => {\n    const zRotation = startAngle + angle / segments * index\n    const xOffset = endOffset / segments * index\n    const zOffset = (zRotation - startAngle) / TAU * pitch\n\n    // TODO: check for valid geometry after translations\n    // ie all the points have to be either x > -xOffset or x < -xOffset\n    // this would have to be checked for every transform, and handled\n    //\n    // not implementing, as this currently doesn't break anything,\n    // only creates inside-out polygons\n\n    // create transformation matrix\n    mat4.multiply(\n      step1,\n      // then apply offsets\n      mat4.fromTranslation(mat4.create(), [xOffset, 0, zOffset * Math.sign(angle)]),\n      // first rotate \"flat\" 2D shape from XY to XZ plane\n      mat4.fromXRotation(mat4.create(), -TAU / 4 * Math.sign(angle)) // rotate the slice correctly to not create inside-out polygon\n    )\n\n    matrix = mat4.create()\n    mat4.multiply(\n      matrix,\n      // finally rotate around Z axis\n      mat4.fromZRotation(mat4.create(), zRotation),\n      step1\n    )\n    return slice.transform(matrix, base)\n  }\n\n  return extrudeFromSlices(\n    {\n      // \"base\" slice is counted as segment, so add one for complete final rotation\n      numberOfSlices: segments + 1,\n      callback: sliceCallback\n    },\n    baseSlice\n  )\n}\n\nmodule.exports = extrudeHelical\n", "const flatten = require('../../utils/flatten')\n\nconst aboutEqualNormals = require('../../maths/utils/aboutEqualNormals')\nconst plane = require('../../maths/plane')\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst unionGeom2 = require('../booleans/unionGeom2')\n\nconst projectGeom3 = (options, geometry) => {\n  // create a plane from the options, and verify\n  const projplane = plane.fromNormalAndPoint(plane.create(), options.axis, options.origin)\n  if (Number.isNaN(projplane[0]) || Number.isNaN(projplane[1]) || Number.isNaN(projplane[2]) || Number.isNaN(projplane[3])) {\n    throw new Error('project: invalid axis or origin')\n  }\n\n  const epsilon = measureEpsilon(geometry)\n  const epsilonArea = (epsilon * epsilon * Math.sqrt(3) / 4)\n\n  if (epsilon === 0) return geom2.create()\n\n  // project the polygons to the plane\n  const polygons = geom3.toPolygons(geometry)\n  let projpolys = []\n  for (let i = 0; i < polygons.length; i++) {\n    const newpoints = polygons[i].vertices.map((v) => plane.projectionOfPoint(projplane, v))\n    const newpoly = poly3.create(newpoints)\n    // only keep projections that face the same direction as the plane\n    const newplane = poly3.plane(newpoly)\n    if (!aboutEqualNormals(projplane, newplane)) continue\n    // only keep projections that have a measurable area\n    if (poly3.measureArea(newpoly) < epsilonArea) continue\n    projpolys.push(newpoly)\n  }\n\n  // rotate the polygons to lay on X/Y axes if necessary\n  if (!aboutEqualNormals(projplane, [0, 0, 1])) {\n    const rotation = mat4.fromVectorRotation(mat4.create(), projplane, [0, 0, 1])\n    projpolys = projpolys.map((p) => poly3.transform(rotation, p))\n  }\n\n  // sort the polygons to allow the union to ignore small pieces efficiently\n  projpolys = projpolys.sort((a, b) => poly3.measureArea(b) - poly3.measureArea(a))\n\n  // convert polygons to geometry, and union all pieces into a single geometry\n  const projgeoms = projpolys.map((p) => geom2.fromPoints(p.vertices))\n  return unionGeom2(projgeoms)\n}\n\n/**\n * Project the given 3D geometry on to the given plane.\n * @param {Object} options - options for project\n * @param {Array} [options.axis=[0,0,1]] the axis of the plane (default is Z axis)\n * @param {Array} [options.origin=[0,0,0]] the origin of the plane\n * @param {...Object} objects - the list of 3D geometry to project\n * @return {geom2|Array} the projected 2D geometry, or a list of 2D projected geometry\n * @alias module:modeling/extrusions.project\n *\n * @example\n * let myshape = project({}, sphere({radius: 20, segments: 5}))\n */\nconst project = (options, ...objects) => {\n  const defaults = {\n    axis: [0, 0, 1], // Z axis\n    origin: [0, 0, 0]\n  }\n  const { axis, origin } = Object.assign({ }, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  options = { axis, origin }\n\n  const results = objects.map((object) => {\n    // if (path.isA(object)) return project(options, object)\n    // if (geom2.isA(object)) return project(options, object)\n    if (geom3.isA(object)) return projectGeom3(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = project\n", "/**\n * All 2D shapes (primitives or the results of operations) can be extruded in various ways.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/extrusions\n * @example\n * const { extrudeLinear, extrudeRectangular, extrudeRotate } = require('@jscad/modeling').extrusions\n */\nmodule.exports = {\n  extrudeFromSlices: require('./extrudeFromSlices'),\n  extrudeLinear: require('./extrudeLinear'),\n  extrudeRectangular: require('./extrudeRectangular'),\n  extrudeRotate: require('./extrudeRotate'),\n  extrudeHelical: require('./extrudeHelical'),\n  project: require('./project'),\n  slice: require('./slice')\n}\n", "const vec2 = require('../../maths/vec2')\n\n/*\n * Create a convex hull of the given set of points, where each point is an array of [x,y].\n * Uses https://en.wikipedia.org/wiki/Graham_scan\n * @param {Array} uniquePoints - list of UNIQUE points from which to create a hull\n * @returns {Array} a list of points that form the hull\n */\nconst hullPoints2 = (uniquePoints) => {\n  // find min point\n  let min = vec2.fromValues(Infinity, Infinity)\n  uniquePoints.forEach((point) => {\n    if (point[1] < min[1] || (point[1] === min[1] && point[0] < min[0])) {\n      min = point\n    }\n  })\n\n  // gather information for sorting by polar coordinates (point, angle, distSq)\n  const points = []\n  uniquePoints.forEach((point) => {\n    // use faster fakeAtan2 instead of Math.atan2\n    const angle = fakeAtan2(point[1] - min[1], point[0] - min[0])\n    const distSq = vec2.squaredDistance(point, min)\n    points.push({ point, angle, distSq })\n  })\n\n  // sort by polar coordinates\n  points.sort((pt1, pt2) => pt1.angle < pt2.angle ? -1 : pt1.angle > pt2.angle ? 1 :\n    pt1.distSq < pt2.distSq ? -1 : pt1.distSq > pt2.distSq ? 1 : 0)\n\n  const stack = [] // start with empty stack\n  points.forEach((point) => {\n    let cnt = stack.length\n    while (cnt > 1 && ccw(stack[cnt - 2], stack[cnt - 1], point.point) <= Number.EPSILON) {\n      stack.pop() // get rid of colinear and interior (clockwise) points\n      cnt = stack.length\n    }\n    stack.push(point.point)\n  })\n\n  return stack\n}\n\n// returns: < 0 clockwise, 0 colinear, > 0 counter-clockwise\nconst ccw = (v1, v2, v3) => (v2[0] - v1[0]) * (v3[1] - v1[1]) - (v2[1] - v1[1]) * (v3[0] - v1[0])\n\n// Returned \"angle\" is really 1/tan (inverse of slope) made negative to increase with angle.\n// This function is strictly for sorting in this algorithm.\nconst fakeAtan2 = (y, x) => {\n  // The \"if\" is a special case for when the minimum vector found in loop above is present.\n  // We need to ensure that it sorts as the minimum point. Otherwise, this becomes NaN.\n  if (y === 0 && x === 0) {\n    return -Infinity\n  } else {\n    return -x / y\n  }\n}\n\nmodule.exports = hullPoints2\n", "const geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/*\n * Return the unique vertices of a geometry\n */\nconst toUniquePoints = (geometries) => {\n  const found = new Set()\n  const uniquePoints = []\n\n  const addPoint = (point) => {\n    const key = point.toString()\n    if (!found.has(key)) {\n      uniquePoints.push(point)\n      found.add(key)\n    }\n  }\n\n  geometries.forEach((geometry) => {\n    if (geom2.isA(geometry)) {\n      geom2.toPoints(geometry).forEach(addPoint)\n    } else if (geom3.isA(geometry)) {\n      // points are grouped by polygon\n      geom3.toPoints(geometry).forEach((points) => points.forEach(addPoint))\n    } else if (path2.isA(geometry)) {\n      path2.toPoints(geometry).forEach(addPoint)\n    }\n  })\n\n  return uniquePoints\n}\n\nmodule.exports = toUniquePoints\n", "const flatten = require('../../utils/flatten')\n\nconst path2 = require('../../geometries/path2')\n\nconst hullPoints2 = require('./hullPoints2')\nconst toUniquePoints = require('./toUniquePoints')\n\n/*\n * Create a convex hull of the given geometries (path2).\n * @param {...geometries} geometries - list of path2 geometries\n * @returns {path2} new geometry\n */\nconst hullPath2 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // extract the unique points from the geometries\n  const unique = toUniquePoints(geometries)\n\n  const hullPoints = hullPoints2(unique)\n\n  // assemble a new geometry from the list of points\n  return path2.fromPoints({ closed: true }, hullPoints)\n}\n\nmodule.exports = hullPath2\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\n\nconst hullPoints2 = require('./hullPoints2')\nconst toUniquePoints = require('./toUniquePoints')\n\n/*\n * Create a convex hull of the given geom2 geometries.\n * @param {...geometries} geometries - list of geom2 geometries\n * @returns {geom2} new geometry\n */\nconst hullGeom2 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  // extract the unique points from the geometries\n  const unique = toUniquePoints(geometries)\n\n  const hullPoints = hullPoints2(unique)\n\n  // NOTE: more than three points are required to create a new geometry\n  if (hullPoints.length < 3) return geom2.create()\n\n  // assemble a new geometry from the list of points\n  return geom2.fromPoints(hullPoints)\n}\n\nmodule.exports = hullGeom2\n", "const cross = require('../../../maths/vec3/cross')\nconst subtract = require('../../../maths/vec3/subtract')\nconst squaredLength = require('../../../maths/vec3/squaredLength')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst distanceSquared = (p, a, b) => {\n  // == parallelogram solution\n  //\n  //            s\n  //      __a________b__\n  //       /   |    /\n  //      /   h|   /\n  //     /_____|__/\n  //    p\n  //\n  //  s = b - a\n  //  area = s * h\n  //  |ap x s| = s * h\n  //  h = |ap x s| / s\n  //\n  const ab = []\n  const ap = []\n  const cr = []\n  subtract(ab, b, a)\n  subtract(ap, p, a)\n  const area = squaredLength(cross(cr, ap, ab))\n  const s = squaredLength(ab)\n  if (s === 0) {\n    throw Error('a and b are the same point')\n  }\n  return area / s\n}\n\nconst pointLineDistance = (point, a, b) => Math.sqrt(distanceSquared(point, a, b))\n\nmodule.exports = pointLineDistance\n", "const cross = require('../../../maths/vec3/cross')\nconst normalize = require('../../../maths/vec3/normalize')\nconst subtract = require('../../../maths/vec3/subtract')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst planeNormal = (out, point1, point2, point3) => {\n  const tmp = [0, 0, 0]\n  subtract(out, point1, point2)\n  subtract(tmp, point2, point3)\n  cross(out, out, tmp)\n  return normalize(out, out)\n}\n\nmodule.exports = planeNormal\n", "/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nclass VertexList {\n  constructor () {\n    this.head = null\n    this.tail = null\n  }\n\n  clear () {\n    this.head = this.tail = null\n  }\n\n  /**\n   * Inserts a `node` before `target`, it's assumed that\n   * `target` belongs to this doubly linked list\n   *\n   * @param {*} target\n   * @param {*} node\n   */\n  insertBefore (target, node) {\n    node.prev = target.prev\n    node.next = target\n    if (!node.prev) {\n      this.head = node\n    } else {\n      node.prev.next = node\n    }\n    target.prev = node\n  }\n\n  /**\n   * Inserts a `node` after `target`, it's assumed that\n   * `target` belongs to this doubly linked list\n   *\n   * @param {Vertex} target\n   * @param {Vertex} node\n   */\n  insertAfter (target, node) {\n    node.prev = target\n    node.next = target.next\n    if (!node.next) {\n      this.tail = node\n    } else {\n      node.next.prev = node\n    }\n    target.next = node\n  }\n\n  /**\n   * Appends a `node` to the end of this doubly linked list\n   * Note: `node.next` will be unlinked from `node`\n   * Note: if `node` is part of another linked list call `addAll` instead\n   *\n   * @param {*} node\n   */\n  add (node) {\n    if (!this.head) {\n      this.head = node\n    } else {\n      this.tail.next = node\n    }\n    node.prev = this.tail\n    // since node is the new end it doesn't have a next node\n    node.next = null\n    this.tail = node\n  }\n\n  /**\n   * Appends a chain of nodes where `node` is the head,\n   * the difference with `add` is that it correctly sets the position\n   * of the node list `tail` property\n   *\n   * @param {*} node\n   */\n  addAll (node) {\n    if (!this.head) {\n      this.head = node\n    } else {\n      this.tail.next = node\n    }\n    node.prev = this.tail\n\n    // find the end of the list\n    while (node.next) {\n      node = node.next\n    }\n    this.tail = node\n  }\n\n  /**\n   * Deletes a `node` from this linked list, it's assumed that `node` is a\n   * member of this linked list\n   *\n   * @param {*} node\n   */\n  remove (node) {\n    if (!node.prev) {\n      this.head = node.next\n    } else {\n      node.prev.next = node.next\n    }\n\n    if (!node.next) {\n      this.tail = node.prev\n    } else {\n      node.next.prev = node.prev\n    }\n  }\n\n  /**\n   * Removes a chain of nodes whose head is `a` and whose tail is `b`,\n   * it's assumed that `a` and `b` belong to this list and also that `a`\n   * comes before `b` in the linked list\n   *\n   * @param {*} a\n   * @param {*} b\n   */\n  removeChain (a, b) {\n    if (!a.prev) {\n      this.head = b.next\n    } else {\n      a.prev.next = b.next\n    }\n\n    if (!b.next) {\n      this.tail = a.prev\n    } else {\n      b.next.prev = a.prev\n    }\n  }\n\n  first () {\n    return this.head\n  }\n\n  isEmpty () {\n    return !this.head\n  }\n}\n\nmodule.exports = VertexList\n", "/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nclass Vertex {\n  constructor (point, index) {\n    this.point = point\n    // index in the input array\n    this.index = index\n    // vertex is a double linked list node\n    this.next = null\n    this.prev = null\n    // the face that is able to see this point\n    this.face = null\n  }\n}\n\nmodule.exports = Vertex\n", "const distance = require('../../../maths/vec3/distance')\nconst squaredDistance = require('../../../maths/vec3/squaredDistance')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nclass HalfEdge {\n  constructor (vertex, face) {\n    this.vertex = vertex\n    this.face = face\n    this.next = null\n    this.prev = null\n    this.opposite = null\n  }\n\n  head () {\n    return this.vertex\n  }\n\n  tail () {\n    return this.prev\n      ? this.prev.vertex\n      : null\n  }\n\n  length () {\n    if (this.tail()) {\n      return distance(\n        this.tail().point,\n        this.head().point\n      )\n    }\n    return -1\n  }\n\n  lengthSquared () {\n    if (this.tail()) {\n      return squaredDistance(\n        this.tail().point,\n        this.head().point\n      )\n    }\n    return -1\n  }\n\n  setOpposite (edge) {\n    this.opposite = edge\n    edge.opposite = this\n  }\n}\n\nmodule.exports = HalfEdge\n", "const add = require('../../../maths/vec3/add')\nconst copy = require('../../../maths/vec3/copy')\nconst cross = require('../../../maths/vec3/cross')\nconst dot = require('../../../maths/vec3/dot')\nconst length = require('../../../maths/vec3/length')\nconst normalize = require('../../../maths/vec3/normalize')\nconst scale = require('../../../maths/vec3/scale')\nconst subtract = require('../../../maths/vec3/subtract')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst HalfEdge = require('./HalfEdge')\n\nconst VISIBLE = 0\nconst NON_CONVEX = 1\nconst DELETED = 2\n\nclass Face {\n  constructor () {\n    this.normal = []\n    this.centroid = []\n    // signed distance from face to the origin\n    this.offset = 0\n    // pointer to the a vertex in a double linked list this face can see\n    this.outside = null\n    this.mark = VISIBLE\n    this.edge = null\n    this.nVertices = 0\n  }\n\n  getEdge (i) {\n    if (typeof i !== 'number') {\n      throw Error('requires a number')\n    }\n    let it = this.edge\n    while (i > 0) {\n      it = it.next\n      i -= 1\n    }\n    while (i < 0) {\n      it = it.prev\n      i += 1\n    }\n    return it\n  }\n\n  computeNormal () {\n    const e0 = this.edge\n    const e1 = e0.next\n    let e2 = e1.next\n    const v2 = subtract([], e1.head().point, e0.head().point)\n    const t = []\n    const v1 = []\n\n    this.nVertices = 2\n    this.normal = [0, 0, 0]\n    while (e2 !== e0) {\n      copy(v1, v2)\n      subtract(v2, e2.head().point, e0.head().point)\n      add(this.normal, this.normal, cross(t, v1, v2))\n      e2 = e2.next\n      this.nVertices += 1\n    }\n    this.area = length(this.normal)\n    // normalize the vector, since we've already calculated the area\n    // it's cheaper to scale the vector using this quantity instead of\n    // doing the same operation again\n    this.normal = scale(this.normal, this.normal, 1 / this.area)\n  }\n\n  computeNormalMinArea (minArea) {\n    this.computeNormal()\n    if (this.area < minArea) {\n      // compute the normal without the longest edge\n      let maxEdge\n      let maxSquaredLength = 0\n      let edge = this.edge\n\n      // find the longest edge (in length) in the chain of edges\n      do {\n        const lengthSquared = edge.lengthSquared()\n        if (lengthSquared > maxSquaredLength) {\n          maxEdge = edge\n          maxSquaredLength = lengthSquared\n        }\n        edge = edge.next\n      } while (edge !== this.edge)\n\n      const p1 = maxEdge.tail().point\n      const p2 = maxEdge.head().point\n      const maxVector = subtract([], p2, p1)\n      const maxLength = Math.sqrt(maxSquaredLength)\n      // maxVector is normalized after this operation\n      scale(maxVector, maxVector, 1 / maxLength)\n      // compute the projection of maxVector over this face normal\n      const maxProjection = dot(this.normal, maxVector)\n      // subtract the quantity maxEdge adds on the normal\n      scale(maxVector, maxVector, -maxProjection)\n      add(this.normal, this.normal, maxVector)\n      // renormalize `this.normal`\n      normalize(this.normal, this.normal)\n    }\n  }\n\n  computeCentroid () {\n    this.centroid = [0, 0, 0]\n    let edge = this.edge\n    do {\n      add(this.centroid, this.centroid, edge.head().point)\n      edge = edge.next\n    } while (edge !== this.edge)\n    scale(this.centroid, this.centroid, 1 / this.nVertices)\n  }\n\n  computeNormalAndCentroid (minArea) {\n    if (typeof minArea !== 'undefined') {\n      this.computeNormalMinArea(minArea)\n    } else {\n      this.computeNormal()\n    }\n    this.computeCentroid()\n    this.offset = dot(this.normal, this.centroid)\n  }\n\n  distanceToPlane (point) {\n    return dot(this.normal, point) - this.offset\n  }\n\n  /**\n   * @private\n   *\n   * Connects two edges assuming that prev.head().point === next.tail().point\n   *\n   * @param {HalfEdge} prev\n   * @param {HalfEdge} next\n   */\n  connectHalfEdges (prev, next) {\n    let discardedFace\n    if (prev.opposite.face === next.opposite.face) {\n      // `prev` is remove a redundant edge\n      const oppositeFace = next.opposite.face\n      let oppositeEdge\n      if (prev === this.edge) {\n        this.edge = next\n      }\n      if (oppositeFace.nVertices === 3) {\n        // case:\n        // remove the face on the right\n        //\n        //       /|\\\n        //      / | \\ the face on the right\n        //     /  |  \\ --> opposite edge\n        //    / a |   \\\n        //   *----*----*\n        //  /     b  |  \\\n        //           ▾\n        //      redundant edge\n        //\n        // Note: the opposite edge is actually in the face to the right\n        // of the face to be destroyed\n        oppositeEdge = next.opposite.prev.opposite\n        oppositeFace.mark = DELETED\n        discardedFace = oppositeFace\n      } else {\n        // case:\n        //          t\n        //        *----\n        //       /| <- right face's redundant edge\n        //      / | opposite edge\n        //     /  |  ▴   /\n        //    / a |  |  /\n        //   *----*----*\n        //  /     b  |  \\\n        //           ▾\n        //      redundant edge\n        oppositeEdge = next.opposite.next\n        // make sure that the link `oppositeFace.edge` points correctly even\n        // after the right face redundant edge is removed\n        if (oppositeFace.edge === oppositeEdge.prev) {\n          oppositeFace.edge = oppositeEdge\n        }\n\n        //       /|   /\n        //      / | t/opposite edge\n        //     /  | / ▴  /\n        //    / a |/  | /\n        //   *----*----*\n        //  /     b     \\\n        oppositeEdge.prev = oppositeEdge.prev.prev\n        oppositeEdge.prev.next = oppositeEdge\n      }\n      //       /|\n      //      / |\n      //     /  |\n      //    / a |\n      //   *----*----*\n      //  /     b  ▴  \\\n      //           |\n      //     redundant edge\n      next.prev = prev.prev\n      next.prev.next = next\n\n      //       / \\  \\\n      //      /   \\->\\\n      //     /     \\<-\\ opposite edge\n      //    / a     \\  \\\n      //   *----*----*\n      //  /     b  ^  \\\n      next.setOpposite(oppositeEdge)\n\n      oppositeFace.computeNormalAndCentroid()\n    } else {\n      // trivial case\n      //        *\n      //       /|\\\n      //      / | \\\n      //     /  |--> next\n      //    / a |   \\\n      //   *----*----*\n      //    \\ b |   /\n      //     \\  |--> prev\n      //      \\ | /\n      //       \\|/\n      //        *\n      prev.next = next\n      next.prev = prev\n    }\n    return discardedFace\n  }\n\n  mergeAdjacentFaces (adjacentEdge, discardedFaces) {\n    const oppositeEdge = adjacentEdge.opposite\n    const oppositeFace = oppositeEdge.face\n\n    discardedFaces.push(oppositeFace)\n    oppositeFace.mark = DELETED\n\n    // find the chain of edges whose opposite face is `oppositeFace`\n    //\n    //                ===>\n    //      \\         face         /\n    //       * ---- * ---- * ---- *\n    //      /     opposite face    \\\n    //                <===\n    //\n    let adjacentEdgePrev = adjacentEdge.prev\n    let adjacentEdgeNext = adjacentEdge.next\n    let oppositeEdgePrev = oppositeEdge.prev\n    let oppositeEdgeNext = oppositeEdge.next\n\n    // left edge\n    while (adjacentEdgePrev.opposite.face === oppositeFace) {\n      adjacentEdgePrev = adjacentEdgePrev.prev\n      oppositeEdgeNext = oppositeEdgeNext.next\n    }\n    // right edge\n    while (adjacentEdgeNext.opposite.face === oppositeFace) {\n      adjacentEdgeNext = adjacentEdgeNext.next\n      oppositeEdgePrev = oppositeEdgePrev.prev\n    }\n    // adjacentEdgePrev  \\         face         / adjacentEdgeNext\n    //                    * ---- * ---- * ---- *\n    // oppositeEdgeNext  /     opposite face    \\ oppositeEdgePrev\n\n    // fix the face reference of all the opposite edges that are not part of\n    // the edges whose opposite face is not `face` i.e. all the edges that\n    // `face` and `oppositeFace` do not have in common\n    let edge\n    for (edge = oppositeEdgeNext; edge !== oppositeEdgePrev.next; edge = edge.next) {\n      edge.face = this\n    }\n\n    // make sure that `face.edge` is not one of the edges to be destroyed\n    // Note: it's important for it to be a `next` edge since `prev` edges\n    // might be destroyed on `connectHalfEdges`\n    this.edge = adjacentEdgeNext\n\n    // connect the extremes\n    // Note: it might be possible that after connecting the edges a triangular\n    // face might be redundant\n    let discardedFace\n    discardedFace = this.connectHalfEdges(oppositeEdgePrev, adjacentEdgeNext)\n    if (discardedFace) {\n      discardedFaces.push(discardedFace)\n    }\n    discardedFace = this.connectHalfEdges(adjacentEdgePrev, oppositeEdgeNext)\n    if (discardedFace) {\n      discardedFaces.push(discardedFace)\n    }\n\n    this.computeNormalAndCentroid()\n    // TODO: additional consistency checks\n    return discardedFaces\n  }\n\n  collectIndices () {\n    const indices = []\n    let edge = this.edge\n    do {\n      indices.push(edge.head().index)\n      edge = edge.next\n    } while (edge !== this.edge)\n    return indices\n  }\n\n  static createTriangle (v0, v1, v2, minArea = 0) {\n    const face = new Face()\n    const e0 = new HalfEdge(v0, face)\n    const e1 = new HalfEdge(v1, face)\n    const e2 = new HalfEdge(v2, face)\n\n    // join edges\n    e0.next = e2.prev = e1\n    e1.next = e0.prev = e2\n    e2.next = e1.prev = e0\n\n    // main half edge reference\n    face.edge = e0\n    face.computeNormalAndCentroid(minArea)\n    return face\n  }\n}\n\nmodule.exports = {\n  VISIBLE,\n  NON_CONVEX,\n  DELETED,\n  Face\n}\n", "const dot = require('../../../maths/vec3/dot')\n\nconst pointLineDistance = require('./point-line-distance')\nconst getPlaneNormal = require('./get-plane-normal')\n\nconst VertexList = require('./VertexList')\nconst Vertex = require('./Vertex')\nconst { Face, VISIBLE, NON_CONVEX, DELETED } = require('./Face')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\n// merge types\n// non convex with respect to the large face\nconst MERGE_NON_CONVEX_WRT_LARGER_FACE = 1\nconst MERGE_NON_CONVEX = 2\n\nclass QuickHull {\n  constructor (points) {\n    if (!Array.isArray(points)) {\n      throw TypeError('input is not a valid array')\n    }\n    if (points.length < 4) {\n      throw Error('cannot build a simplex out of <4 points')\n    }\n\n    this.tolerance = -1\n\n    // buffers\n    this.nFaces = 0\n    this.nPoints = points.length\n\n    this.faces = []\n    this.newFaces = []\n    // helpers\n    //\n    // let `a`, `b` be `Face` instances\n    // let `v` be points wrapped as instance of `Vertex`\n    //\n    //     [v, v, ..., v, v, v, ...]\n    //      ^             ^\n    //      |             |\n    //  a.outside     b.outside\n    //\n    this.claimed = new VertexList()\n    this.unclaimed = new VertexList()\n\n    // vertices of the hull(internal representation of points)\n    this.vertices = []\n    for (let i = 0; i < points.length; i += 1) {\n      this.vertices.push(new Vertex(points[i], i))\n    }\n    this.discardedFaces = []\n    this.vertexPointIndices = []\n  }\n\n  addVertexToFace (vertex, face) {\n    vertex.face = face\n    if (!face.outside) {\n      this.claimed.add(vertex)\n    } else {\n      this.claimed.insertBefore(face.outside, vertex)\n    }\n    face.outside = vertex\n  }\n\n  /**\n   * Removes `vertex` for the `claimed` list of vertices, it also makes sure\n   * that the link from `face` to the first vertex it sees in `claimed` is\n   * linked correctly after the removal\n   *\n   * @param {Vertex} vertex\n   * @param {Face} face\n   */\n  removeVertexFromFace (vertex, face) {\n    if (vertex === face.outside) {\n      // fix face.outside link\n      if (vertex.next && vertex.next.face === face) {\n        // face has at least 2 outside vertices, move the `outside` reference\n        face.outside = vertex.next\n      } else {\n        // vertex was the only outside vertex that face had\n        face.outside = null\n      }\n    }\n    this.claimed.remove(vertex)\n  }\n\n  /**\n   * Removes all the visible vertices that `face` is able to see which are\n   * stored in the `claimed` vertext list\n   *\n   * @param {Face} face\n   * @return {Vertex|undefined} If face had visible vertices returns\n   * `face.outside`, otherwise undefined\n   */\n  removeAllVerticesFromFace (face) {\n    if (face.outside) {\n      // pointer to the last vertex of this face\n      // [..., outside, ..., end, outside, ...]\n      //          |           |      |\n      //          a           a      b\n      let end = face.outside\n      while (end.next && end.next.face === face) {\n        end = end.next\n      }\n      this.claimed.removeChain(face.outside, end)\n      //                            b\n      //                       [ outside, ...]\n      //                            |  removes this link\n      //     [ outside, ..., end ] -┘\n      //          |           |\n      //          a           a\n      end.next = null\n      return face.outside\n    }\n  }\n\n  /**\n   * Removes all the visible vertices that `face` is able to see, additionally\n   * checking the following:\n   *\n   * If `absorbingFace` doesn't exist then all the removed vertices will be\n   * added to the `unclaimed` vertex list\n   *\n   * If `absorbingFace` exists then this method will assign all the vertices of\n   * `face` that can see `absorbingFace`, if a vertex cannot see `absorbingFace`\n   * it's added to the `unclaimed` vertex list\n   *\n   * @param {Face} face\n   * @param {Face} [absorbingFace]\n   */\n  deleteFaceVertices (face, absorbingFace) {\n    const faceVertices = this.removeAllVerticesFromFace(face)\n    if (faceVertices) {\n      if (!absorbingFace) {\n        // mark the vertices to be reassigned to some other face\n        this.unclaimed.addAll(faceVertices)\n      } else {\n        // if there's an absorbing face try to assign as many vertices\n        // as possible to it\n\n        // the reference `vertex.next` might be destroyed on\n        // `this.addVertexToFace` (see VertexList#add), nextVertex is a\n        // reference to it\n        let nextVertex\n        for (let vertex = faceVertices; vertex; vertex = nextVertex) {\n          nextVertex = vertex.next\n          const distance = absorbingFace.distanceToPlane(vertex.point)\n\n          // check if `vertex` is able to see `absorbingFace`\n          if (distance > this.tolerance) {\n            this.addVertexToFace(vertex, absorbingFace)\n          } else {\n            this.unclaimed.add(vertex)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Reassigns as many vertices as possible from the unclaimed list to the new\n   * faces\n   *\n   * @param {Faces[]} newFaces\n   */\n  resolveUnclaimedPoints (newFaces) {\n    // cache next vertex so that if `vertex.next` is destroyed it's still\n    // recoverable\n    let vertexNext = this.unclaimed.first()\n    for (let vertex = vertexNext; vertex; vertex = vertexNext) {\n      vertexNext = vertex.next\n      let maxDistance = this.tolerance\n      let maxFace\n      for (let i = 0; i < newFaces.length; i += 1) {\n        const face = newFaces[i]\n        if (face.mark === VISIBLE) {\n          const dist = face.distanceToPlane(vertex.point)\n          if (dist > maxDistance) {\n            maxDistance = dist\n            maxFace = face\n          }\n          if (maxDistance > 1000 * this.tolerance) {\n            break\n          }\n        }\n      }\n\n      if (maxFace) {\n        this.addVertexToFace(vertex, maxFace)\n      }\n    }\n  }\n\n  /**\n   * Computes the extremes of a tetrahedron which will be the initial hull\n   *\n   * @return {number[]} The min/max vertices in the x,y,z directions\n   */\n  computeExtremes () {\n    const min = []\n    const max = []\n\n    // min vertex on the x,y,z directions\n    const minVertices = []\n    // max vertex on the x,y,z directions\n    const maxVertices = []\n\n    let i, j\n\n    // initially assume that the first vertex is the min/max\n    for (i = 0; i < 3; i += 1) {\n      minVertices[i] = maxVertices[i] = this.vertices[0]\n    }\n    // copy the coordinates of the first vertex to min/max\n    for (i = 0; i < 3; i += 1) {\n      min[i] = max[i] = this.vertices[0].point[i]\n    }\n\n    // compute the min/max vertex on all 6 directions\n    for (i = 1; i < this.vertices.length; i += 1) {\n      const vertex = this.vertices[i]\n      const point = vertex.point\n      // update the min coordinates\n      for (j = 0; j < 3; j += 1) {\n        if (point[j] < min[j]) {\n          min[j] = point[j]\n          minVertices[j] = vertex\n        }\n      }\n      // update the max coordinates\n      for (j = 0; j < 3; j += 1) {\n        if (point[j] > max[j]) {\n          max[j] = point[j]\n          maxVertices[j] = vertex\n        }\n      }\n    }\n\n    // compute epsilon\n    this.tolerance = 3 * Number.EPSILON * (\n      Math.max(Math.abs(min[0]), Math.abs(max[0])) +\n      Math.max(Math.abs(min[1]), Math.abs(max[1])) +\n      Math.max(Math.abs(min[2]), Math.abs(max[2]))\n    )\n    return [minVertices, maxVertices]\n  }\n\n  /**\n   * Compues the initial tetrahedron assigning to its faces all the points that\n   * are candidates to form part of the hull\n   */\n  createInitialSimplex () {\n    const vertices = this.vertices\n    const [min, max] = this.computeExtremes()\n    let v2, v3\n    let i, j\n\n    // Find the two vertices with the greatest 1d separation\n    // (max.x - min.x)\n    // (max.y - min.y)\n    // (max.z - min.z)\n    let maxDistance = 0\n    let indexMax = 0\n    for (i = 0; i < 3; i += 1) {\n      const distance = max[i].point[i] - min[i].point[i]\n      if (distance > maxDistance) {\n        maxDistance = distance\n        indexMax = i\n      }\n    }\n    const v0 = min[indexMax]\n    const v1 = max[indexMax]\n\n    // the next vertex is the one farthest to the line formed by `v0` and `v1`\n    maxDistance = 0\n    for (i = 0; i < this.vertices.length; i += 1) {\n      const vertex = this.vertices[i]\n      if (vertex !== v0 && vertex !== v1) {\n        const distance = pointLineDistance(\n          vertex.point, v0.point, v1.point\n        )\n        if (distance > maxDistance) {\n          maxDistance = distance\n          v2 = vertex\n        }\n      }\n    }\n\n    // the next vertes is the one farthest to the plane `v0`, `v1`, `v2`\n    // normalize((v2 - v1) x (v0 - v1))\n    const normal = getPlaneNormal([], v0.point, v1.point, v2.point)\n    // distance from the origin to the plane\n    const distPO = dot(v0.point, normal)\n    maxDistance = -1\n    for (i = 0; i < this.vertices.length; i += 1) {\n      const vertex = this.vertices[i]\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2) {\n        const distance = Math.abs(dot(normal, vertex.point) - distPO)\n        if (distance > maxDistance) {\n          maxDistance = distance\n          v3 = vertex\n        }\n      }\n    }\n\n    // initial simplex\n    // Taken from http://everything2.com/title/How+to+paint+a+tetrahedron\n    //\n    //                              v2\n    //                             ,|,\n    //                           ,7``\\'VA,\n    //                         ,7`   |, `'VA,\n    //                       ,7`     `\\    `'VA,\n    //                     ,7`        |,      `'VA,\n    //                   ,7`          `\\         `'VA,\n    //                 ,7`             |,           `'VA,\n    //               ,7`               `\\       ,..ooOOTK` v3\n    //             ,7`                  |,.ooOOT''`    AV\n    //           ,7`            ,..ooOOT`\\`           /7\n    //         ,7`      ,..ooOOT''`      |,          AV\n    //        ,T,..ooOOT''`              `\\         /7\n    //     v0 `'TTs.,                     |,       AV\n    //            `'TTs.,                 `\\      /7\n    //                 `'TTs.,             |,    AV\n    //                      `'TTs.,        `\\   /7\n    //                           `'TTs.,    |, AV\n    //                                `'TTs.,\\/7\n    //                                     `'T`\n    //                                       v1\n    //\n    const faces = []\n    if (dot(v3.point, normal) - distPO < 0) {\n      // the face is not able to see the point so `planeNormal`\n      // is pointing outside the tetrahedron\n      faces.push(\n        Face.createTriangle(v0, v1, v2),\n        Face.createTriangle(v3, v1, v0),\n        Face.createTriangle(v3, v2, v1),\n        Face.createTriangle(v3, v0, v2)\n      )\n\n      // set the opposite edge\n      for (i = 0; i < 3; i += 1) {\n        const j = (i + 1) % 3\n        // join face[i] i > 0, with the first face\n        faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge(j))\n        // join face[i] with face[i + 1], 1 <= i <= 3\n        faces[i + 1].getEdge(1).setOpposite(faces[j + 1].getEdge(0))\n      }\n    } else {\n      // the face is able to see the point so `planeNormal`\n      // is pointing inside the tetrahedron\n      faces.push(\n        Face.createTriangle(v0, v2, v1),\n        Face.createTriangle(v3, v0, v1),\n        Face.createTriangle(v3, v1, v2),\n        Face.createTriangle(v3, v2, v0)\n      )\n\n      // set the opposite edge\n      for (i = 0; i < 3; i += 1) {\n        const j = (i + 1) % 3\n        // join face[i] i > 0, with the first face\n        faces[i + 1].getEdge(2).setOpposite(faces[0].getEdge((3 - i) % 3))\n        // join face[i] with face[i + 1]\n        faces[i + 1].getEdge(0).setOpposite(faces[j + 1].getEdge(1))\n      }\n    }\n\n    // the initial hull is the tetrahedron\n    for (i = 0; i < 4; i += 1) {\n      this.faces.push(faces[i])\n    }\n\n    // initial assignment of vertices to the faces of the tetrahedron\n    for (i = 0; i < vertices.length; i += 1) {\n      const vertex = vertices[i]\n      if (vertex !== v0 && vertex !== v1 && vertex !== v2 && vertex !== v3) {\n        maxDistance = this.tolerance\n        let maxFace\n        for (j = 0; j < 4; j += 1) {\n          const distance = faces[j].distanceToPlane(vertex.point)\n          if (distance > maxDistance) {\n            maxDistance = distance\n            maxFace = faces[j]\n          }\n        }\n\n        if (maxFace) {\n          this.addVertexToFace(vertex, maxFace)\n        }\n      }\n    }\n  }\n\n  reindexFaceAndVertices () {\n    // remove inactive faces\n    const activeFaces = []\n    for (let i = 0; i < this.faces.length; i += 1) {\n      const face = this.faces[i]\n      if (face.mark === VISIBLE) {\n        activeFaces.push(face)\n      }\n    }\n    this.faces = activeFaces\n  }\n\n  collectFaces (skipTriangulation) {\n    const faceIndices = []\n    for (let i = 0; i < this.faces.length; i += 1) {\n      if (this.faces[i].mark !== VISIBLE) {\n        throw Error('attempt to include a destroyed face in the hull')\n      }\n      const indices = this.faces[i].collectIndices()\n      if (skipTriangulation) {\n        faceIndices.push(indices)\n      } else {\n        for (let j = 0; j < indices.length - 2; j += 1) {\n          faceIndices.push(\n            [indices[0], indices[j + 1], indices[j + 2]]\n          )\n        }\n      }\n    }\n    return faceIndices\n  }\n\n  /**\n   * Finds the next vertex to make faces with the current hull\n   *\n   * - let `face` be the first face existing in the `claimed` vertex list\n   *  - if `face` doesn't exist then return since there're no vertices left\n   *  - otherwise for each `vertex` that face sees find the one furthest away\n   *  from `face`\n   *\n   * @return {Vertex|undefined} Returns undefined when there're no more\n   * visible vertices\n   */\n  nextVertexToAdd () {\n    if (!this.claimed.isEmpty()) {\n      let eyeVertex, vertex\n      let maxDistance = 0\n      const eyeFace = this.claimed.first().face\n      for (vertex = eyeFace.outside; vertex && vertex.face === eyeFace; vertex = vertex.next) {\n        const distance = eyeFace.distanceToPlane(vertex.point)\n        if (distance > maxDistance) {\n          maxDistance = distance\n          eyeVertex = vertex\n        }\n      }\n      return eyeVertex\n    }\n  }\n\n  /**\n   * Computes a chain of half edges in ccw order called the `horizon`, for an\n   * edge to be part of the horizon it must join a face that can see\n   * `eyePoint` and a face that cannot see `eyePoint`\n   *\n   * @param {number[]} eyePoint - The coordinates of a point\n   * @param {HalfEdge} crossEdge - The edge used to jump to the current `face`\n   * @param {Face} face - The current face being tested\n   * @param {HalfEdge[]} horizon - The edges that form part of the horizon in\n   * ccw order\n   */\n  computeHorizon (eyePoint, crossEdge, face, horizon) {\n    // moves face's vertices to the `unclaimed` vertex list\n    this.deleteFaceVertices(face)\n\n    face.mark = DELETED\n\n    let edge\n    if (!crossEdge) {\n      edge = crossEdge = face.getEdge(0)\n    } else {\n      // start from the next edge since `crossEdge` was already analyzed\n      // (actually `crossEdge.opposite` was the face who called this method\n      // recursively)\n      edge = crossEdge.next\n    }\n\n    // All the faces that are able to see `eyeVertex` are defined as follows\n    //\n    //       v    /\n    //           / <== visible face\n    //          /\n    //         |\n    //         | <== not visible face\n    //\n    //  dot(v, visible face normal) - visible face offset > this.tolerance\n    //\n    do {\n      const oppositeEdge = edge.opposite\n      const oppositeFace = oppositeEdge.face\n      if (oppositeFace.mark === VISIBLE) {\n        if (oppositeFace.distanceToPlane(eyePoint) > this.tolerance) {\n          this.computeHorizon(eyePoint, oppositeEdge, oppositeFace, horizon)\n        } else {\n          horizon.push(edge)\n        }\n      }\n      edge = edge.next\n    } while (edge !== crossEdge)\n  }\n\n  /**\n   * Creates a face with the points `eyeVertex.point`, `horizonEdge.tail` and\n   * `horizonEdge.tail` in ccw order\n   *\n   * @param {Vertex} eyeVertex\n   * @param {HalfEdge} horizonEdge\n   * @return {HalfEdge} The half edge whose vertex is the eyeVertex\n   */\n  addAdjoiningFace (eyeVertex, horizonEdge) {\n    // all the half edges are created in ccw order thus the face is always\n    // pointing outside the hull\n    // edges:\n    //\n    //                  eyeVertex.point\n    //                       / \\\n    //                      /   \\\n    //                  1  /     \\  0\n    //                    /       \\\n    //                   /         \\\n    //                  /           \\\n    //          horizon.tail --- horizon.head\n    //                        2\n    //\n    const face = Face.createTriangle(\n      eyeVertex,\n      horizonEdge.tail(),\n      horizonEdge.head()\n    )\n    this.faces.push(face)\n    // join face.getEdge(-1) with the horizon's opposite edge\n    // face.getEdge(-1) = face.getEdge(2)\n    face.getEdge(-1).setOpposite(horizonEdge.opposite)\n    return face.getEdge(0)\n  }\n\n  /**\n   * Adds horizon.length faces to the hull, each face will be 'linked' with the\n   * horizon opposite face and the face on the left/right\n   *\n   * @param {Vertex} eyeVertex\n   * @param {HalfEdge[]} horizon - A chain of half edges in ccw order\n   */\n  addNewFaces (eyeVertex, horizon) {\n    this.newFaces = []\n    let firstSideEdge, previousSideEdge\n    for (let i = 0; i < horizon.length; i += 1) {\n      const horizonEdge = horizon[i]\n      // returns the right side edge\n      const sideEdge = this.addAdjoiningFace(eyeVertex, horizonEdge)\n      if (!firstSideEdge) {\n        firstSideEdge = sideEdge\n      } else {\n        // joins face.getEdge(1) with previousFace.getEdge(0)\n        sideEdge.next.setOpposite(previousSideEdge)\n      }\n      this.newFaces.push(sideEdge.face)\n      previousSideEdge = sideEdge\n    }\n    firstSideEdge.next.setOpposite(previousSideEdge)\n  }\n\n  /**\n   * Computes the distance from `edge` opposite face's centroid to\n   * `edge.face`\n   *\n   * @param {HalfEdge} edge\n   * @return {number}\n   * - A positive number when the centroid of the opposite face is above the\n   *   face i.e. when the faces are concave\n   * - A negative number when the centroid of the opposite face is below the\n   *   face i.e. when the faces are convex\n   */\n  oppositeFaceDistance (edge) {\n    return edge.face.distanceToPlane(edge.opposite.face.centroid)\n  }\n\n  /**\n   * Merges a face with none/any/all its neighbors according to the strategy\n   * used\n   *\n   * if `mergeType` is MERGE_NON_CONVEX_WRT_LARGER_FACE then the merge will be\n   * decided based on the face with the larger area, the centroid of the face\n   * with the smaller area will be checked against the one with the larger area\n   * to see if it's in the merge range [tolerance, -tolerance] i.e.\n   *\n   *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n   *\n   * Note that the first check (with +tolerance) was done on `computeHorizon`\n   *\n   * If the above is not true then the check is done with respect to the smaller\n   * face i.e.\n   *\n   *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n   *\n   * If true then it means that two faces are non convex (concave), even if the\n   * dot(...) - offset value is > 0 (that's the point of doing the merge in the\n   * first place)\n   *\n   * If two faces are concave then the check must also be done on the other face\n   * but this is done in another merge pass, for this to happen the face is\n   * marked in a temporal NON_CONVEX state\n   *\n   * if `mergeType` is MERGE_NON_CONVEX then two faces will be merged only if\n   * they pass the following conditions\n   *\n   *    dot(centroid smaller face, larger face normal) - larger face offset > -tolerance\n   *    dot(centroid larger face, smaller face normal) - smaller face offset > -tolerance\n   *\n   * @param {Face} face\n   * @param {number} mergeType - Either MERGE_NON_CONVEX_WRT_LARGER_FACE or\n   * MERGE_NON_CONVEX\n   */\n  doAdjacentMerge (face, mergeType) {\n    let edge = face.edge\n    let convex = true\n    let it = 0\n    do {\n      if (it >= face.nVertices) {\n        throw Error('merge recursion limit exceeded')\n      }\n      const oppositeFace = edge.opposite.face\n      let merge = false\n\n      // Important notes about the algorithm to merge faces\n      //\n      // - Given a vertex `eyeVertex` that will be added to the hull\n      //   all the faces that cannot see `eyeVertex` are defined as follows\n      //\n      //      dot(v, not visible face normal) - not visible offset < tolerance\n      //\n      // - Two faces can be merged when the centroid of one of these faces\n      // projected to the normal of the other face minus the other face offset\n      // is in the range [tolerance, -tolerance]\n      // - Since `face` (given in the input for this method) has passed the\n      // check above we only have to check the lower bound e.g.\n      //\n      //      dot(v, not visible face normal) - not visible offset > -tolerance\n      //\n      if (mergeType === MERGE_NON_CONVEX) {\n        if (this.oppositeFaceDistance(edge) > -this.tolerance ||\n            this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n          merge = true\n        }\n      } else {\n        if (face.area > oppositeFace.area) {\n          if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n            merge = true\n          } else if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n            convex = false\n          }\n        } else {\n          if (this.oppositeFaceDistance(edge.opposite) > -this.tolerance) {\n            merge = true\n          } else if (this.oppositeFaceDistance(edge) > -this.tolerance) {\n            convex = false\n          }\n        }\n      }\n\n      if (merge) {\n        // when two faces are merged it might be possible that redundant faces\n        // are destroyed, in that case move all the visible vertices from the\n        // destroyed faces to the `unclaimed` vertex list\n        const discardedFaces = face.mergeAdjacentFaces(edge, [])\n        for (let i = 0; i < discardedFaces.length; i += 1) {\n          this.deleteFaceVertices(discardedFaces[i], face)\n        }\n        return true\n      }\n\n      edge = edge.next\n      it += 1\n    } while (edge !== face.edge)\n    if (!convex) {\n      face.mark = NON_CONVEX\n    }\n    return false\n  }\n\n  /**\n   * Adds a vertex to the hull with the following algorithm\n   *\n   * - Compute the `horizon` which is a chain of half edges, for an edge to\n   *   belong to this group it must be the edge connecting a face that can\n   *   see `eyeVertex` and a face which cannot see `eyeVertex`\n   * - All the faces that can see `eyeVertex` have its visible vertices removed\n   *   from the claimed VertexList\n   * - A new set of faces is created with each edge of the `horizon` and\n   *   `eyeVertex`, each face is connected with the opposite horizon face and\n   *   the face on the left/right\n   * - The new faces are merged if possible with the opposite horizon face first\n   *   and then the faces on the right/left\n   * - The vertices removed from all the visible faces are assigned to the new\n   *   faces if possible\n   *\n   * @param {Vertex} eyeVertex\n   */\n  addVertexToHull (eyeVertex) {\n    const horizon = []\n\n    this.unclaimed.clear()\n\n    // remove `eyeVertex` from `eyeVertex.face` so that it can't be added to the\n    // `unclaimed` vertex list\n    this.removeVertexFromFace(eyeVertex, eyeVertex.face)\n    this.computeHorizon(eyeVertex.point, null, eyeVertex.face, horizon)\n    this.addNewFaces(eyeVertex, horizon)\n\n    // first merge pass\n    // Do the merge with respect to the larger face\n    for (let i = 0; i < this.newFaces.length; i += 1) {\n      const face = this.newFaces[i]\n      if (face.mark === VISIBLE) {\n        while (this.doAdjacentMerge(face, MERGE_NON_CONVEX_WRT_LARGER_FACE)) {} // eslint-disable-line no-empty\n      }\n    }\n\n    // second merge pass\n    // Do the merge on non convex faces (a face is marked as non convex in the\n    // first pass)\n    for (let i = 0; i < this.newFaces.length; i += 1) {\n      const face = this.newFaces[i]\n      if (face.mark === NON_CONVEX) {\n        face.mark = VISIBLE\n        while (this.doAdjacentMerge(face, MERGE_NON_CONVEX)) {} // eslint-disable-line no-empty\n      }\n    }\n\n    // reassign `unclaimed` vertices to the new faces\n    this.resolveUnclaimedPoints(this.newFaces)\n  }\n\n  build () {\n    let eyeVertex\n    this.createInitialSimplex()\n    while ((eyeVertex = this.nextVertexToAdd())) {\n      this.addVertexToHull(eyeVertex)\n    }\n    this.reindexFaceAndVertices()\n  }\n}\n\nmodule.exports = QuickHull\n", "const QuickHull = require('./QuickHull')\n\n/*\n * Original source from quickhull3d (https://github.com/mauriciopoppe/quickhull3d)\n * Copyright (c) 2015 Mauricio Poppe\n *\n * Adapted to JSCAD by Jeff Gay\n */\n\nconst runner = (points, options = {}) => {\n  const instance = new QuickHull(points)\n  instance.build()\n  return instance.collectFaces(options.skipTriangulation)\n}\n\nmodule.exports = runner\n", "const flatten = require('../../utils/flatten')\n\nconst geom3 = require('../../geometries/geom3')\nconst poly3 = require('../../geometries/poly3')\n\nconst quickhull = require('./quickhull')\nconst toUniquePoints = require('./toUniquePoints')\n\n/*\n * Create a convex hull of the given geometries (geom3).\n * @param {...geometries} geometries - list of geom3 geometries\n * @returns {geom3} new geometry\n */\nconst hullGeom3 = (...geometries) => {\n  geometries = flatten(geometries)\n\n  if (geometries.length === 1) return geometries[0]\n\n  // extract the unique vertices from the geometries\n  const unique = toUniquePoints(geometries)\n\n  const faces = quickhull(unique, { skipTriangulation: true })\n\n  const polygons = faces.map((face) => {\n    const vertices = face.map((index) => unique[index])\n    return poly3.create(vertices)\n  })\n\n  return geom3.create(polygons)\n}\n\nmodule.exports = hullGeom3\n", "const flatten = require('../../utils/flatten')\nconst areAllShapesTheSameType = require('../../utils/areAllShapesTheSameType')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst hullPath2 = require('./hullPath2')\nconst hullGeom2 = require('./hullGeom2')\nconst hullGeom3 = require('./hullGeom3')\n\n/**\n * Create a convex hull of the given geometries.\n * The given geometries should be of the same type, either geom2 or geom3 or path2.\n * @param {...Objects} geometries - list of geometries from which to create a hull\n * @returns {geom2|geom3} new geometry\n * @alias module:modeling/hulls.hull\n *\n * @example\n * let myshape = hull(rectangle({center: [-5,-5]}), ellipse({center: [5,5]}))\n *\n * @example\n * +-------+           +-------+\n * |       |           |        \\\n * |   A   |           |         \\\n * |       |           |          \\\n * +-------+           +           \\\n *                  =   \\           \\\n *       +-------+       \\           +\n *       |       |        \\          |\n *       |   B   |         \\         |\n *       |       |          \\        |\n *       +-------+           +-------+\n */\nconst hull = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  if (!areAllShapesTheSameType(geometries)) {\n    throw new Error('only hulls of the same type are supported')\n  }\n\n  const geometry = geometries[0]\n  if (path2.isA(geometry)) return hullPath2(geometries)\n  if (geom2.isA(geometry)) return hullGeom2(geometries)\n  if (geom3.isA(geometry)) return hullGeom3(geometries)\n\n  // FIXME should this throw an error for unknown geometries?\n  return geometry\n}\n\nmodule.exports = hull\n", "const flatten = require('../../utils/flatten')\n\nconst union = require('../booleans/union')\n\nconst hull = require('./hull')\n\n/**\n * Create a chain of hulled geometries from the given geometries.\n * Essentially hull A+B, B+C, C+D, etc., then union the results.\n * The given geometries should be of the same type, either geom2 or geom3 or path2.\n *\n * @param {...Objects} geometries - list of geometries from which to create a hull\n * @returns {geom2|geom3} new geometry\n * @alias module:modeling/hulls.hullChain\n *\n * @example\n * let newshape = hullChain(rectangle({center: [-5,-5]}), circle({center: [0,0]}), rectangle({center: [5,5]}))\n *\n * @example\n * +-------+   +-------+     +-------+   +------+\n * |       |   |       |     |        \\ /       |\n * |   A   |   |   C   |     |         |        |\n * |       |   |       |     |                  |\n * +-------+   +-------+     +                  +\n *                       =   \\                 /\n *       +-------+            \\               /\n *       |       |             \\             /\n *       |   B   |              \\           /\n *       |       |               \\         /\n *       +-------+                +-------+\n */\nconst hullChain = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length < 2) throw new Error('wrong number of arguments')\n\n  const hulls = []\n  for (let i = 1; i < geometries.length; i++) {\n    hulls.push(hull(geometries[i - 1], geometries[i]))\n  }\n  return union(hulls)\n}\n\nmodule.exports = hullChain\n", "/**\n * All shapes (primitives or the results of operations) can be passed to hull functions\n * to determine the convex hull of all points.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/hulls\n * @example\n * const { hull, hullChain } = require('@jscad/modeling').hulls\n */\nmodule.exports = {\n  hull: require('./hull'),\n  hullChain: require('./hullChain')\n}\n", "const vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\nconst isValidPoly3 = (epsilon, polygon) => {\n  const area = Math.abs(poly3.measureArea(polygon))\n  return (Number.isFinite(area) && area > epsilon)\n}\n\n/*\n * Snap the given list of polygons to the epsilon.\n */\nconst snapPolygons = (epsilon, polygons) => {\n  let newpolygons = polygons.map((polygon) => {\n    const snapvertices = polygon.vertices.map((vertice) => vec3.snap(vec3.create(), vertice, epsilon))\n    // only retain unique vertices\n    const newvertices = []\n    for (let i = 0; i < snapvertices.length; i++) {\n      const j = (i + 1) % snapvertices.length\n      if (!vec3.equals(snapvertices[i], snapvertices[j])) newvertices.push(snapvertices[i])\n    }\n    const newpolygon = poly3.create(newvertices)\n    if (polygon.color) newpolygon.color = polygon.color\n    return newpolygon\n  })\n  // snap can produce polygons with zero (0) area, remove those\n  const epsilonArea = (epsilon * epsilon * Math.sqrt(3) / 4)\n  newpolygons = newpolygons.filter((polygon) => isValidPoly3(epsilonArea, polygon))\n  return newpolygons\n}\n\nmodule.exports = snapPolygons\n", "const aboutEqualNormals = require('../../maths/utils/aboutEqualNormals')\nconst vec3 = require('../../maths/vec3')\n\nconst poly3 = require('../../geometries/poly3')\n\n// create a set of edges from the given polygon, and link the edges as well\nconst createEdges = (polygon) => {\n  const points = poly3.toPoints(polygon)\n  const edges = []\n  for (let i = 0; i < points.length; i++) {\n    const j = (i + 1) % points.length\n    const edge = {\n      v1: points[i],\n      v2: points[j]\n    }\n    edges.push(edge)\n  }\n  // link the edges together\n  for (let i = 0; i < edges.length; i++) {\n    const j = (i + 1) % points.length\n    edges[i].next = edges[j]\n    edges[j].prev = edges[i]\n  }\n  return edges\n}\n\nconst insertEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.set(key, edge)\n}\n\nconst deleteEdge = (edges, edge) => {\n  const key = `${edge.v1}:${edge.v2}`\n  edges.delete(key)\n}\n\nconst findOppositeEdge = (edges, edge) => {\n  const key = `${edge.v2}:${edge.v1}` // NOTE: OPPOSITE OF INSERT KEY\n  return edges.get(key)\n}\n\n// calculate the two adjoining angles between the opposing edges\nconst calculateAnglesBetween = (current, opposite, normal) => {\n  let v0 = current.prev.v1\n  let v1 = current.prev.v2\n  let v2 = opposite.next.v2\n  const angle1 = calculateAngle(v0, v1, v2, normal)\n\n  v0 = opposite.prev.v1\n  v1 = opposite.prev.v2\n  v2 = current.next.v2\n  const angle2 = calculateAngle(v0, v1, v2, normal)\n\n  return [angle1, angle2]\n}\n\nconst v1 = vec3.create()\nconst v2 = vec3.create()\n\nconst calculateAngle = (prevpoint, point, nextpoint, normal) => {\n  const d0 = vec3.subtract(v1, point, prevpoint)\n  const d1 = vec3.subtract(v2, nextpoint, point)\n  vec3.cross(d0, d0, d1)\n  return vec3.dot(d0, normal)\n}\n\n// create a polygon starting from the given edge (if possible)\nconst createPolygonAnd = (edge) => {\n  let polygon\n  const points = []\n  while (edge.next) {\n    const next = edge.next\n\n    points.push(edge.v1)\n\n    edge.v1 = null\n    edge.v2 = null\n    edge.next = null\n    edge.prev = null\n\n    edge = next\n  }\n  if (points.length > 0) polygon = poly3.create(points)\n  return polygon\n}\n\n/*\n * Merge COPLANAR polygons that share common edges.\n * @param {poly3[]} sourcepolygons - list of polygons\n * @returns {poly3[]} new set of polygons\n */\nconst mergeCoplanarPolygons = (sourcepolygons) => {\n  if (sourcepolygons.length < 2) return sourcepolygons\n\n  const normal = sourcepolygons[0].plane\n  const polygons = sourcepolygons.slice()\n  const edgeList = new Map()\n\n  while (polygons.length > 0) { // NOTE: the length of polygons WILL change\n    const polygon = polygons.shift()\n    const edges = createEdges(polygon)\n    for (let i = 0; i < edges.length; i++) {\n      const current = edges[i]\n      const opposite = findOppositeEdge(edgeList, current)\n      if (opposite) {\n        const angles = calculateAnglesBetween(current, opposite, normal)\n        if (angles[0] >= 0 && angles[1] >= 0) {\n          const edge1 = opposite.next\n          const edge2 = current.next\n          // adjust the edges, linking together opposing polygons\n          current.prev.next = opposite.next\n          current.next.prev = opposite.prev\n\n          opposite.prev.next = current.next\n          opposite.next.prev = current.prev\n\n          // remove the opposing edges\n          current.v1 = null\n          current.v2 = null\n          current.next = null\n          current.prev = null\n\n          deleteEdge(edgeList, opposite)\n\n          opposite.v1 = null\n          opposite.v2 = null\n          opposite.next = null\n          opposite.prev = null\n\n          const mergeEdges = (list, e1, e2) => {\n            const newedge = {\n              v1: e2.v1,\n              v2: e1.v2,\n              next: e1.next,\n              prev: e2.prev\n            }\n            // link in newedge\n            e2.prev.next = newedge\n            e1.next.prev = newedge\n            // remove old edges\n            deleteEdge(list, e1)\n            e1.v1 = null\n            e1.v2 = null\n            e1.next = null\n            e1.prev = null\n\n            deleteEdge(list, e2)\n            e2.v1 = null\n            e2.v2 = null\n            e2.next = null\n            e2.prev = null\n          }\n\n          if (angles[0] === 0.0) {\n            mergeEdges(edgeList, edge1, edge1.prev)\n          }\n          if (angles[1] === 0.0) {\n            mergeEdges(edgeList, edge2, edge2.prev)\n          }\n        }\n      } else {\n        if (current.next) insertEdge(edgeList, current)\n      }\n    }\n  }\n\n  // build a set of polygons from the remaining edges\n  const destpolygons = []\n  edgeList.forEach((edge) => {\n    const polygon = createPolygonAnd(edge)\n    if (polygon) destpolygons.push(polygon)\n  })\n\n  edgeList.clear()\n\n  return destpolygons\n}\n\nconst coplanar = (plane1, plane2) => {\n  // expect the same distance from the origin, within tolerance\n  if (Math.abs(plane1[3] - plane2[3]) < 0.00000015) {\n    return aboutEqualNormals(plane1, plane2)\n  }\n  return false\n}\n\nconst mergePolygons = (epsilon, polygons) => {\n  const polygonsPerPlane = [] // elements: [plane, [poly3...]]\n  polygons.forEach((polygon) => {\n    const mapping = polygonsPerPlane.find((element) => coplanar(element[0], poly3.plane(polygon)))\n    if (mapping) {\n      const polygons = mapping[1]\n      polygons.push(polygon)\n    } else {\n      polygonsPerPlane.push([poly3.plane(polygon), [polygon]])\n    }\n  })\n\n  let destpolygons = []\n  polygonsPerPlane.forEach((mapping) => {\n    const sourcepolygons = mapping[1]\n    const retesselayedpolygons = mergeCoplanarPolygons(sourcepolygons)\n    destpolygons = destpolygons.concat(retesselayedpolygons)\n  })\n  return destpolygons\n}\n\nmodule.exports = mergePolygons\n", "const constants = require('../../maths/constants')\nconst vec3 = require('../../maths/vec3')\nconst poly3 = require('../../geometries/poly3')\n\nconst assert = false\n\nconst getTag = (vertex) => `${vertex}`\n\nconst addSide = (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) => {\n  const starttag = getTag(vertex0)\n  const endtag = getTag(vertex1)\n  if (assert && starttag === endtag) throw new Error('assert failed')\n  const newsidetag = `${starttag}/${endtag}`\n  const reversesidetag = `${endtag}/${starttag}`\n  if (sidemap.has(reversesidetag)) {\n    // remove the opposing side from mappings\n    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, vertex1, vertex0, null)\n    return null\n  }\n  // add the side to the mappings\n  const newsideobj = {\n    vertex0: vertex0,\n    vertex1: vertex1,\n    polygonindex: polygonindex\n  }\n  if (!(sidemap.has(newsidetag))) {\n    sidemap.set(newsidetag, [newsideobj])\n  } else {\n    sidemap.get(newsidetag).push(newsideobj)\n  }\n  if (vertextag2sidestart.has(starttag)) {\n    vertextag2sidestart.get(starttag).push(newsidetag)\n  } else {\n    vertextag2sidestart.set(starttag, [newsidetag])\n  }\n  if (vertextag2sideend.has(endtag)) {\n    vertextag2sideend.get(endtag).push(newsidetag)\n  } else {\n    vertextag2sideend.set(endtag, [newsidetag])\n  }\n  return newsidetag\n}\n\nconst deleteSide = (sidemap, vertextag2sidestart, vertextag2sideend, vertex0, vertex1, polygonindex) => {\n  const starttag = getTag(vertex0)\n  const endtag = getTag(vertex1)\n  const sidetag = `${starttag}/${endtag}`\n  if (assert && !(sidemap.has(sidetag))) throw new Error('assert failed')\n  let idx = -1\n  const sideobjs = sidemap.get(sidetag)\n  for (let i = 0; i < sideobjs.length; i++) {\n    const sideobj = sideobjs[i]\n    let sidetag = getTag(sideobj.vertex0)\n    if (sidetag !== starttag) continue\n    sidetag = getTag(sideobj.vertex1)\n    if (sidetag !== endtag) continue\n    if (polygonindex !== null) {\n      if (sideobj.polygonindex !== polygonindex) continue\n    }\n    idx = i\n    break\n  }\n  if (assert && idx < 0) throw new Error('assert failed')\n  sideobjs.splice(idx, 1)\n  if (sideobjs.length === 0) {\n    sidemap.delete(sidetag)\n  }\n\n  // adjust start and end lists\n  idx = vertextag2sidestart.get(starttag).indexOf(sidetag)\n  if (assert && idx < 0) throw new Error('assert failed')\n  vertextag2sidestart.get(starttag).splice(idx, 1)\n  if (vertextag2sidestart.get(starttag).length === 0) {\n    vertextag2sidestart.delete(starttag)\n  }\n\n  idx = vertextag2sideend.get(endtag).indexOf(sidetag)\n  if (assert && idx < 0) throw new Error('assert failed')\n  vertextag2sideend.get(endtag).splice(idx, 1)\n  if (vertextag2sideend.get(endtag).length === 0) {\n    vertextag2sideend.delete(endtag)\n  }\n}\n\n/*\n  Suppose we have two polygons ACDB and EDGF:\n\n   A-----B\n   |     |\n   |     E--F\n   |     |  |\n   C-----D--G\n\n  Note that vertex E forms a T-junction on the side BD. In this case some STL slicers will complain\n  that the solid is not watertight. This is because the watertightness check is done by checking if\n  each side DE is matched by another side ED.\n\n  This function will return a new solid with ACDB replaced by ACDEB\n\n  Note that this can create polygons that are slightly non-convex (due to rounding errors). Therefore the result should\n  not be used for further CSG operations!\n\n  Note this function is meant to be used to preprocess geometries when triangulation is required, i.e. AMF, STL, etc.\n  Do not use the results in other operations.\n*/\n\n/*\n * Insert missing vertices for T junctions, which creates polygons that can be triangulated.\n * @param {Array} polygons - the original polygons which may or may not have T junctions\n * @return original polygons (if no T junctions found) or new polygons with updated vertices\n */\nconst insertTjunctions = (polygons) => {\n  // STEP 1 : build a map of 'unmatched' sides from the polygons\n  // i.e. side AB in one polygon does not have a matching side BA in another polygon\n  const sidemap = new Map()\n  for (let polygonindex = 0; polygonindex < polygons.length; polygonindex++) {\n    const polygon = polygons[polygonindex]\n    const numvertices = polygon.vertices.length\n    if (numvertices >= 3) {\n      let vertex = polygon.vertices[0]\n      let vertextag = getTag(vertex)\n      for (let vertexindex = 0; vertexindex < numvertices; vertexindex++) {\n        let nextvertexindex = vertexindex + 1\n        if (nextvertexindex === numvertices) nextvertexindex = 0\n\n        const nextvertex = polygon.vertices[nextvertexindex]\n        const nextvertextag = getTag(nextvertex)\n\n        const sidetag = `${vertextag}/${nextvertextag}`\n        const reversesidetag = `${nextvertextag}/${vertextag}`\n        if (sidemap.has(reversesidetag)) {\n          // this side matches the same side in another polygon. Remove from sidemap\n          // FIXME is this check necessary? there should only be ONE(1) opposing side\n          // FIXME assert ?\n          const ar = sidemap.get(reversesidetag)\n          ar.splice(-1, 1)\n          if (ar.length === 0) {\n            sidemap.delete(reversesidetag)\n          }\n        } else {\n          const sideobj = {\n            vertex0: vertex,\n            vertex1: nextvertex,\n            polygonindex: polygonindex\n          }\n          if (!(sidemap.has(sidetag))) {\n            sidemap.set(sidetag, [sideobj])\n          } else {\n            sidemap.get(sidetag).push(sideobj)\n          }\n        }\n        vertex = nextvertex\n        vertextag = nextvertextag\n      }\n    } else {\n      console.warn('warning: invalid polygon found during insertTjunctions')\n    }\n  }\n\n  if (sidemap.size > 0) {\n    // STEP 2 : create a list of starting sides and ending sides\n    const vertextag2sidestart = new Map()\n    const vertextag2sideend = new Map()\n    const sidesToCheck = new Map()\n    for (const [sidetag, sideobjs] of sidemap) {\n      sidesToCheck.set(sidetag, true)\n      sideobjs.forEach((sideobj) => {\n        const starttag = getTag(sideobj.vertex0)\n        const endtag = getTag(sideobj.vertex1)\n        if (vertextag2sidestart.has(starttag)) {\n          vertextag2sidestart.get(starttag).push(sidetag)\n        } else {\n          vertextag2sidestart.set(starttag, [sidetag])\n        }\n        if (vertextag2sideend.has(endtag)) {\n          vertextag2sideend.get(endtag).push(sidetag)\n        } else {\n          vertextag2sideend.set(endtag, [sidetag])\n        }\n      })\n    }\n\n    // STEP 3 : if sidemap is not empty\n    const newpolygons = polygons.slice(0) // make a copy in order to replace polygons inline\n    while (true) {\n      if (sidemap.size === 0) break\n\n      for (const sidetag of sidemap.keys()) {\n        sidesToCheck.set(sidetag, true)\n      }\n\n      let donesomething = false\n      while (true) {\n        const sidetags = Array.from(sidesToCheck.keys())\n        if (sidetags.length === 0) break // sidesToCheck is empty, we're done!\n        const sidetagtocheck = sidetags[0]\n        let donewithside = true\n        if (sidemap.has(sidetagtocheck)) {\n          const sideobjs = sidemap.get(sidetagtocheck)\n          if (assert && sideobjs.length === 0) throw new Error('assert failed')\n          const sideobj = sideobjs[0]\n          for (let directionindex = 0; directionindex < 2; directionindex++) {\n            const startvertex = (directionindex === 0) ? sideobj.vertex0 : sideobj.vertex1\n            const endvertex = (directionindex === 0) ? sideobj.vertex1 : sideobj.vertex0\n            const startvertextag = getTag(startvertex)\n            const endvertextag = getTag(endvertex)\n            let matchingsides = []\n            if (directionindex === 0) {\n              if (vertextag2sideend.has(startvertextag)) {\n                matchingsides = vertextag2sideend.get(startvertextag)\n              }\n            } else {\n              if (vertextag2sidestart.has(startvertextag)) {\n                matchingsides = vertextag2sidestart.get(startvertextag)\n              }\n            }\n            for (let matchingsideindex = 0; matchingsideindex < matchingsides.length; matchingsideindex++) {\n              const matchingsidetag = matchingsides[matchingsideindex]\n              const matchingside = sidemap.get(matchingsidetag)[0]\n              const matchingsidestartvertex = (directionindex === 0) ? matchingside.vertex0 : matchingside.vertex1\n              const matchingsideendvertex = (directionindex === 0) ? matchingside.vertex1 : matchingside.vertex0\n              const matchingsidestartvertextag = getTag(matchingsidestartvertex)\n              const matchingsideendvertextag = getTag(matchingsideendvertex)\n              if (assert && matchingsideendvertextag !== startvertextag) throw new Error('assert failed')\n              if (matchingsidestartvertextag === endvertextag) {\n                // matchingside cancels sidetagtocheck\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, startvertex, endvertex, null)\n                deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, startvertex, null)\n                donewithside = false\n                directionindex = 2 // skip reverse direction check\n                donesomething = true\n                break\n              } else {\n                const startpos = startvertex\n                const endpos = endvertex\n                const checkpos = matchingsidestartvertex\n                const direction = vec3.subtract(vec3.create(), checkpos, startpos)\n                // Now we need to check if endpos is on the line startpos-checkpos:\n                const t = vec3.dot(vec3.subtract(vec3.create(), endpos, startpos), direction) / vec3.dot(direction, direction)\n                if ((t > 0) && (t < 1)) {\n                  const closestpoint = vec3.scale(vec3.create(), direction, t)\n                  vec3.add(closestpoint, closestpoint, startpos)\n                  const distancesquared = vec3.squaredDistance(closestpoint, endpos)\n                  if (distancesquared < (constants.EPS * constants.EPS)) {\n                    // Yes it's a t-junction! We need to split matchingside in two:\n                    const polygonindex = matchingside.polygonindex\n                    const polygon = newpolygons[polygonindex]\n                    // find the index of startvertextag in polygon:\n                    const insertionvertextag = getTag(matchingside.vertex1)\n                    let insertionvertextagindex = -1\n                    for (let i = 0; i < polygon.vertices.length; i++) {\n                      if (getTag(polygon.vertices[i]) === insertionvertextag) {\n                        insertionvertextagindex = i\n                        break\n                      }\n                    }\n                    if (assert && insertionvertextagindex < 0) throw new Error('assert failed')\n                    // split the side by inserting the vertex:\n                    const newvertices = polygon.vertices.slice(0)\n                    newvertices.splice(insertionvertextagindex, 0, endvertex)\n                    const newpolygon = poly3.create(newvertices)\n\n                    newpolygons[polygonindex] = newpolygon\n\n                    // remove the original sides from our maps\n                    deleteSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, matchingside.vertex1, polygonindex)\n                    const newsidetag1 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, matchingside.vertex0, endvertex, polygonindex)\n                    const newsidetag2 = addSide(sidemap, vertextag2sidestart, vertextag2sideend, endvertex, matchingside.vertex1, polygonindex)\n                    if (newsidetag1 !== null) sidesToCheck.set(newsidetag1, true)\n                    if (newsidetag2 !== null) sidesToCheck.set(newsidetag2, true)\n                    donewithside = false\n                    directionindex = 2 // skip reverse direction check\n                    donesomething = true\n                    break\n                  } // if(distancesquared < 1e-10)\n                } // if( (t > 0) && (t < 1) )\n              } // if(endingstidestartvertextag === endvertextag)\n            } // for matchingsideindex\n          } // for directionindex\n        } // if(sidetagtocheck in sidemap)\n        if (donewithside) {\n          sidesToCheck.delete(sidetagtocheck)\n        }\n      }\n      if (!donesomething) break\n    }\n    polygons = newpolygons\n  }\n  sidemap.clear()\n\n  return polygons\n}\n\nmodule.exports = insertTjunctions\n", "const vec3 = require('../../maths/vec3')\nconst poly3 = require('../../geometries/poly3')\n\nconst triangulatePolygon = (epsilon, polygon, triangles) => {\n  const nv = polygon.vertices.length\n  if (nv > 3) {\n    if (nv > 4) {\n      // split the polygon using a midpoint\n      const midpoint = [0, 0, 0]\n      polygon.vertices.forEach((vertice) => vec3.add(midpoint, midpoint, vertice))\n      vec3.snap(midpoint, vec3.divide(midpoint, midpoint, [nv, nv, nv]), epsilon)\n      for (let i = 0; i < nv; i++) {\n        const poly = poly3.create([midpoint, polygon.vertices[i], polygon.vertices[(i + 1) % nv]])\n        if (polygon.color) poly.color = polygon.color\n        triangles.push(poly)\n      }\n      return\n    }\n    // exactly 4 vertices, use simple triangulation\n    const poly0 = poly3.create([polygon.vertices[0], polygon.vertices[1], polygon.vertices[2]])\n    const poly1 = poly3.create([polygon.vertices[0], polygon.vertices[2], polygon.vertices[3]])\n    if (polygon.color) {\n      poly0.color = polygon.color\n      poly1.color = polygon.color\n    }\n    triangles.push(poly0, poly1)\n    return\n  }\n  // exactly 3 vertices, so return the original\n  triangles.push(polygon)\n}\n\n/*\n * Convert the given polygons into a list of triangles (polygons with 3 vertices).\n * NOTE: this is possible because poly3 is CONVEX by definition\n */\nconst triangulatePolygons = (epsilon, polygons) => {\n  const triangles = []\n  polygons.forEach((polygon) => {\n    triangulatePolygon(epsilon, polygon, triangles)\n  })\n  return triangles\n}\n\nmodule.exports = triangulatePolygons\n", "const flatten = require('../../utils/flatten')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst snapPolygons = require('./snapPolygons')\nconst mergePolygons = require('./mergePolygons')\nconst insertTjunctions = require('./insertTjunctions')\nconst triangulatePolygons = require('./triangulatePolygons')\n\n/*\n */\nconst generalizePath2 = (options, geometry) => geometry\n\n/*\n */\nconst generalizeGeom2 = (options, geometry) => geometry\n\n/*\n */\nconst generalizeGeom3 = (options, geometry) => {\n  const defaults = {\n    snap: false,\n    simplify: false,\n    triangulate: false\n  }\n  const { snap, simplify, triangulate } = Object.assign({}, defaults, options)\n\n  const epsilon = measureEpsilon(geometry)\n  let polygons = geom3.toPolygons(geometry)\n\n  // snap the given geometry if requested\n  if (snap) {\n    polygons = snapPolygons(epsilon, polygons)\n  }\n\n  // simplify the polygons if requested\n  if (simplify) {\n    // TODO implement some mesh decimations\n    polygons = mergePolygons(epsilon, polygons)\n  }\n\n  // triangulate the polygons if requested\n  if (triangulate) {\n    polygons = insertTjunctions(polygons)\n    polygons = triangulatePolygons(epsilon, polygons)\n  }\n\n  // FIXME replace with geom3.cloneShallow() when available\n  const clone = Object.assign({}, geometry)\n  clone.polygons = polygons\n\n  return clone\n}\n\n/**\n * Apply various modifications in proper order to produce a generalized geometry.\n * @param {Object} options - options for modifications\n * @param {Boolean} [options.snap=false] the geometries should be snapped to epsilons\n * @param {Boolean} [options.simplify=false] the geometries should be simplified\n * @param {Boolean} [options.triangulate=false] the geometries should be triangulated\n * @param {...Object} geometries - the geometries to generalize\n * @return {Object|Array} the modified geometry, or a list of modified geometries\n * @alias module:modeling/modifiers.generalize\n */\nconst generalize = (options, ...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return generalizePath2(options, geometry)\n    if (geom2.isA(geometry)) return generalizeGeom2(options, geometry)\n    if (geom3.isA(geometry)) return generalizeGeom3(options, geometry)\n    throw new Error('invalid geometry')\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = generalize\n", "const flatten = require('../../utils/flatten')\n\nconst vec2 = require('../../maths/vec2')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst measureEpsilon = require('../../measurements/measureEpsilon')\n\nconst snapPolygons = require('./snapPolygons')\n\nconst snapPath2 = (geometry) => {\n  const epsilon = measureEpsilon(geometry)\n  const points = path2.toPoints(geometry)\n  const newpoints = points.map((point) => vec2.snap(vec2.create(), point, epsilon))\n  // snap can produce duplicate points, remove those\n  return path2.create(newpoints)\n}\n\nconst snapGeom2 = (geometry) => {\n  const epsilon = measureEpsilon(geometry)\n  const sides = geom2.toSides(geometry)\n  let newsides = sides.map((side) => [vec2.snap(vec2.create(), side[0], epsilon), vec2.snap(vec2.create(), side[1], epsilon)])\n  // snap can produce sides with zero (0) length, remove those\n  newsides = newsides.filter((side) => !vec2.equals(side[0], side[1]))\n  return geom2.create(newsides)\n}\n\nconst snapGeom3 = (geometry) => {\n  const epsilon = measureEpsilon(geometry)\n  const polygons = geom3.toPolygons(geometry)\n  const newpolygons = snapPolygons(epsilon, polygons)\n  return geom3.create(newpolygons)\n}\n\n/**\n * Snap the given geometries to the overall precision (epsilon) of the geometry.\n * @see measurements.measureEpsilon()\n * @param {...Object} geometries - the geometries to snap\n * @return {Object|Array} the snapped geometry, or a list of snapped geometries\n * @alias module:modeling/modifiers.snap\n */\nconst snap = (...geometries) => {\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('wrong number of arguments')\n\n  const results = geometries.map((geometry) => {\n    if (path2.isA(geometry)) return snapPath2(geometry)\n    if (geom2.isA(geometry)) return snapGeom2(geometry)\n    if (geom3.isA(geometry)) return snapGeom3(geometry)\n    return geometry\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = snap\n", "/**\n * All shapes (primitives or the results of operations) can be modified to correct issues, etc.\n * In all cases, these functions returns the results, and never changes the original geometry.\n * @module modeling/modifiers\n * @example\n * const { snap } = require('@jscad/modeling').modifiers\n */\nmodule.exports = {\n  generalize: require('./generalize'),\n  snap: require('./snap')\n}\n", "/**\n * Build an array of at minimum a specified length from an existing array and a padding value. IF the array is already larger than the target length, it will not be shortened.\n * @param {Array} anArray - the source array to copy into the result.\n * @param {*} padding - the value to add to the new array to reach the desired length.\n * @param {Number} targetLength - The desired length of the return array.\n * @returns {Array} an array of at least 'targetLength' length\n * @alias module:modeling/utils.padArrayToLength\n */\nconst padArrayToLength = (anArray, padding, targetLength) => {\n  anArray = anArray.slice()\n  while (anArray.length < targetLength) {\n    anArray.push(padding)\n  }\n  return anArray\n}\n\nmodule.exports = padArrayToLength\n", "const flatten = require('../../utils/flatten')\nconst padArrayToLength = require('../../utils/padArrayToLength')\nconst measureAggregateBoundingBox = require('../../measurements/measureAggregateBoundingBox')\nconst { translate } = require('./translate')\n\nconst validateOptions = (options) => {\n  if (!Array.isArray(options.modes) || options.modes.length > 3) throw new Error('align(): modes must be an array of length <= 3')\n  options.modes = padArrayToLength(options.modes, 'none', 3)\n  if (options.modes.filter((mode) => ['center', 'max', 'min', 'none'].includes(mode)).length !== 3) throw new Error('align(): all modes must be one of \"center\", \"max\" or \"min\"')\n\n  if (!Array.isArray(options.relativeTo) || options.relativeTo.length > 3) throw new Error('align(): relativeTo must be an array of length <= 3')\n  options.relativeTo = padArrayToLength(options.relativeTo, 0, 3)\n  if (options.relativeTo.filter((alignVal) => (Number.isFinite(alignVal) || alignVal == null)).length !== 3) throw new Error('align(): all relativeTo values must be a number, or null.')\n\n  if (typeof options.grouped !== 'boolean') throw new Error('align(): grouped must be a boolean value.')\n\n  return options\n}\n\nconst populateRelativeToFromBounds = (relativeTo, modes, bounds) => {\n  for (let i = 0; i < 3; i++) {\n    if (relativeTo[i] == null) {\n      if (modes[i] === 'center') {\n        relativeTo[i] = (bounds[0][i] + bounds[1][i]) / 2\n      } else if (modes[i] === 'max') {\n        relativeTo[i] = bounds[1][i]\n      } else if (modes[i] === 'min') {\n        relativeTo[i] = bounds[0][i]\n      }\n    }\n  }\n  return relativeTo\n}\n\nconst alignGeometries = (geometry, modes, relativeTo) => {\n  const bounds = measureAggregateBoundingBox(geometry)\n  const translation = [0, 0, 0]\n  for (let i = 0; i < 3; i++) {\n    if (modes[i] === 'center') {\n      translation[i] = relativeTo[i] - (bounds[0][i] + bounds[1][i]) / 2\n    } else if (modes[i] === 'max') {\n      translation[i] = relativeTo[i] - bounds[1][i]\n    } else if (modes[i] === 'min') {\n      translation[i] = relativeTo[i] - bounds[0][i]\n    }\n  }\n\n  return translate(translation, geometry)\n}\n\n/**\n * Align the boundaries of the given geometries using the given options.\n * @param {Object} options - options for aligning\n * @param {Array} [options.modes = ['center', 'center', 'min']] - the point on the geometries to align to for each axis. Valid options are \"center\", \"max\", \"min\", and \"none\".\n * @param {Array} [options.relativeTo = [0,0,0]] - The point one each axis on which to align the geometries upon.  If the value is null, then the corresponding value from the group's bounding box is used.\n * @param {Boolean} [options.grouped = false] - if true, transform all geometries by the same amount, maintaining the relative positions to each other.\n * @param {...Object} geometries - the geometries to align\n * @return {Object|Array} the aligned geometry, or a list of aligned geometries\n * @alias module:modeling/transforms.align\n *\n * @example\n * let alignedGeometries = align({modes: ['min', 'center', 'none'], relativeTo: [10, null, 10], grouped: true }, geometries)\n */\nconst align = (options, ...geometries) => {\n  const defaults = {\n    modes: ['center', 'center', 'min'],\n    relativeTo: [0, 0, 0],\n    grouped: false\n  }\n  options = Object.assign({}, defaults, options)\n\n  options = validateOptions(options)\n  let { modes, relativeTo, grouped } = options\n  geometries = flatten(geometries)\n  if (geometries.length === 0) throw new Error('align(): No geometries were provided to act upon')\n\n  if (relativeTo.filter((val) => val == null).length) {\n    const bounds = measureAggregateBoundingBox(geometries)\n    relativeTo = populateRelativeToFromBounds(relativeTo, modes, bounds)\n  }\n  if (grouped) {\n    geometries = alignGeometries(geometries, modes, relativeTo)\n  } else {\n    geometries = geometries.map((geometry) => alignGeometries(geometry, modes, relativeTo))\n  }\n  return geometries.length === 1 ? geometries[0] : geometries\n}\n\nmodule.exports = align\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\nconst measureBoundingBox = require('../../measurements/measureBoundingBox')\n\nconst { translate } = require('./translate')\n\nconst centerGeometry = (options, object) => {\n  const defaults = {\n    axes: [true, true, true],\n    relativeTo: [0, 0, 0]\n  }\n  const { axes, relativeTo } = Object.assign({}, defaults, options)\n\n  const bounds = measureBoundingBox(object)\n  const offset = [0, 0, 0]\n  if (axes[0]) offset[0] = relativeTo[0] - (bounds[0][0] + ((bounds[1][0] - bounds[0][0]) / 2))\n  if (axes[1]) offset[1] = relativeTo[1] - (bounds[0][1] + ((bounds[1][1] - bounds[0][1]) / 2))\n  if (axes[2]) offset[2] = relativeTo[2] - (bounds[0][2] + ((bounds[1][2] - bounds[0][2]) / 2))\n  return translate(offset, object)\n}\n\n/**\n * Center the given objects using the given options.\n * @param {Object} options - options for centering\n * @param {Array} [options.axes=[true,true,true]] - axis of which to center, true or false\n * @param {Array} [options.relativeTo=[0,0,0]] - relative point of which to center the objects\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.center\n *\n * @example\n * let myshape = center({axes: [true,false,false]}, sphere()) // center about the X axis\n */\nconst center = (options, ...objects) => {\n  const defaults = {\n    axes: [true, true, true],\n    relativeTo: [0, 0, 0]\n  // TODO: Add additional 'methods' of centering: midpoint, centroid\n  }\n  const { axes, relativeTo } = Object.assign({}, defaults, options)\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n  if (relativeTo.length !== 3) throw new Error('relativeTo must be an array of length 3')\n\n  options = { axes, relativeTo }\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return centerGeometry(options, object)\n    if (geom2.isA(object)) return centerGeometry(options, object)\n    if (geom3.isA(object)) return centerGeometry(options, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Center the given objects about the X axis.\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.centerX\n */\nconst centerX = (...objects) => center({ axes: [true, false, false] }, objects)\n\n/**\n * Center the given objects about the Y axis.\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.centerY\n */\nconst centerY = (...objects) => center({ axes: [false, true, false] }, objects)\n\n/**\n * Center the given objects about the Z axis.\n * @param {...Object} objects - the objects to center\n * @return {Object|Array} the centered object, or a list of centered objects\n * @alias module:modeling/transforms.centerZ\n */\nconst centerZ = (...objects) => center({ axes: [false, false, true] }, objects)\n\nmodule.exports = {\n  center,\n  centerX,\n  centerY,\n  centerZ\n}\n", "const flatten = require('../../utils/flatten')\n\nconst mat4 = require('../../maths/mat4')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Scale the given objects using the given options.\n * @param {Array} factors - X, Y, Z factors by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scale\n *\n * @example\n * let myshape = scale([5, 0, 10], sphere())\n */\nconst scale = (factors, ...objects) => {\n  if (!Array.isArray(factors)) throw new Error('factors must be an array')\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  // adjust the factors if necessary\n  factors = factors.slice() // don't modify the original\n  while (factors.length < 3) factors.push(1)\n\n  if (factors[0] <= 0 || factors[1] <= 0 || factors[2] <= 0) throw new Error('factors must be positive')\n\n  const matrix = mat4.fromScaling(mat4.create(), factors)\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\n/**\n * Scale the given objects about the X axis using the given options.\n * @param {Number} factor - X factor by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scaleX\n */\nconst scaleX = (factor, ...objects) => scale([factor, 1, 1], objects)\n\n/**\n * Scale the given objects about the Y axis using the given options.\n * @param {Number} factor - Y factor by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scaleY\n */\nconst scaleY = (factor, ...objects) => scale([1, factor, 1], objects)\n\n/**\n * Scale the given objects about the Z axis using the given options.\n * @param {Number} factor - Z factor by which to scale the objects\n * @param {...Object} objects - the objects to scale\n * @return {Object|Array} the scaled object, or a list of scaled objects\n * @alias module:modeling/transforms.scaleZ\n */\nconst scaleZ = (factor, ...objects) => scale([1, 1, factor], objects)\n\nmodule.exports = {\n  scale,\n  scaleX,\n  scaleY,\n  scaleZ\n}\n", "const flatten = require('../../utils/flatten')\n\nconst geom2 = require('../../geometries/geom2')\nconst geom3 = require('../../geometries/geom3')\nconst path2 = require('../../geometries/path2')\n\n/**\n * Transform the given objects using the given matrix.\n * @param {mat4} matrix - a transformation matrix\n * @param {...Object} objects - the objects to transform\n * @return {Object|Array} the transformed object, or a list of transformed objects\n * @alias module:modeling/transforms.transform\n *\n * @example\n * const newsphere = transform(mat4.rotateX(TAU / 8), sphere())\n */\nconst transform = (matrix, ...objects) => {\n  // TODO how to check that the matrix is REAL?\n\n  objects = flatten(objects)\n  if (objects.length === 0) throw new Error('wrong number of arguments')\n\n  const results = objects.map((object) => {\n    if (path2.isA(object)) return path2.transform(matrix, object)\n    if (geom2.isA(object)) return geom2.transform(matrix, object)\n    if (geom3.isA(object)) return geom3.transform(matrix, object)\n    return object\n  })\n  return results.length === 1 ? results[0] : results\n}\n\nmodule.exports = transform\n", "/**\n * All shapes (primitives or the results of operations) can be transformed, such as scaled or rotated.\n * In all cases, the function returns the results, and never changes the original shapes.\n * @module modeling/transforms\n * @example\n * const { center, rotateX, translate } = require('@jscad/modeling').transforms\n */\nmodule.exports = {\n  align: require('./align'),\n\n  center: require('./center').center,\n  centerX: require('./center').centerX,\n  centerY: require('./center').centerY,\n  centerZ: require('./center').centerZ,\n\n  mirror: require('./mirror').mirror,\n  mirrorX: require('./mirror').mirrorX,\n  mirrorY: require('./mirror').mirrorY,\n  mirrorZ: require('./mirror').mirrorZ,\n\n  rotate: require('./rotate').rotate,\n  rotateX: require('./rotate').rotateX,\n  rotateY: require('./rotate').rotateY,\n  rotateZ: require('./rotate').rotateZ,\n\n  scale: require('./scale').scale,\n  scaleX: require('./scale').scaleX,\n  scaleY: require('./scale').scaleY,\n  scaleZ: require('./scale').scaleZ,\n\n  transform: require('./transform'),\n\n  translate: require('./translate').translate,\n  translateX: require('./translate').translateX,\n  translateY: require('./translate').translateY,\n  translateZ: require('./translate').translateZ\n}\n", "module.exports = {\n  colors: require('./colors'),\n  curves: require('./curves'),\n  geometries: require('./geometries'),\n  maths: require('./maths'),\n  measurements: require('./measurements'),\n  primitives: require('./primitives'),\n  text: require('./text'),\n  utils: require('./utils'),\n\n  booleans: require('./operations/booleans'),\n  expansions: require('./operations/expansions'),\n  extrusions: require('./operations/extrusions'),\n  hulls: require('./operations/hulls'),\n  modifiers: require('./operations/modifiers'),\n  transforms: require('./operations/transforms')\n}\n", "\"use strict\";\nexport var ParamType = /* @__PURE__ */ ((ParamType2) => {\n  ParamType2[\"BOOLEAN\"] = \"boolean\";\n  ParamType2[\"BUTTON\"] = \"button\";\n  ParamType2[\"COLOR\"] = \"color\";\n  ParamType2[\"FLOAT\"] = \"float\";\n  ParamType2[\"FOLDER\"] = \"folder\";\n  ParamType2[\"INTEGER\"] = \"integer\";\n  ParamType2[\"PARAM_PATH\"] = \"param_path\";\n  ParamType2[\"NODE_PATH\"] = \"node_path\";\n  ParamType2[\"RAMP\"] = \"ramp\";\n  ParamType2[\"STRING\"] = \"string\";\n  ParamType2[\"VECTOR2\"] = \"vector2\";\n  ParamType2[\"VECTOR3\"] = \"vector3\";\n  ParamType2[\"VECTOR4\"] = \"vector4\";\n  return ParamType2;\n})(ParamType || {});\n", "\"use strict\";\nexport var ParamEvent = /* @__PURE__ */ ((ParamEvent2) => {\n  ParamEvent2[\"VISIBLE_UPDATED\"] = \"param_visible_updated\";\n  ParamEvent2[\"EDITABLE_UPDATED\"] = \"param_editable_updated\";\n  ParamEvent2[\"RAW_INPUT_UPDATED\"] = \"raw_input_updated\";\n  ParamEvent2[\"VALUE_UPDATED\"] = \"param_value_updated\";\n  ParamEvent2[\"EXPRESSION_UPDATED\"] = \"param_expression_update\";\n  ParamEvent2[\"ERROR_UPDATED\"] = \"param_error_updated\";\n  ParamEvent2[\"DELETED\"] = \"param_deleted\";\n  ParamEvent2[\"ASSET_RELOAD_REQUEST\"] = \"param_asset_reload_request\";\n  return ParamEvent2;\n})(ParamEvent || {});\n", "\"use strict\";\nimport { MathUtils } from \"three\";\nexport var ColorConversion = /* @__PURE__ */ ((ColorConversion2) => {\n  ColorConversion2[\"NONE\"] = \"no conversion\";\n  ColorConversion2[\"SRGB_TO_LINEAR\"] = \"sRGB -> linear\";\n  ColorConversion2[\"LINEAR_TO_SRGB\"] = \"linear -> sRGB\";\n  return ColorConversion2;\n})(ColorConversion || {});\nexport const COLOR_CONVERSIONS = [\n  \"no conversion\" /* NONE */,\n  \"sRGB -> linear\" /* SRGB_TO_LINEAR */,\n  \"linear -> sRGB\" /* LINEAR_TO_SRGB */\n];\nexport class CoreColor {\n  // use color.toStyle() if needed\n  // static to_css(color: Color): string {\n  // \tconst color_elements = color.toArray().map((e) => e * 255)\n  // \treturn `rgb(${color_elements.join(', ')})`\n  // }\n  // from THREE.js examples ColorConverter.js\n  static setHSV(h, s, v, target) {\n    h = MathUtils.euclideanModulo(h, 1);\n    s = MathUtils.clamp(s, 0, 1);\n    v = MathUtils.clamp(v, 0, 1);\n    target.setHSL(h, s * v / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n  }\n}\n", "\"use strict\";\nimport { ParamType } from \"../../poly/ParamType\";\nimport { ParamEvent } from \"../../poly/ParamEvent\";\nimport { CoreGraphNode } from \"../../../core/graph/CoreGraphNode\";\nimport { ColorConversion } from \"../../../core/Color\";\nimport { CoreType, isFunction } from \"../../../core/Type\";\nimport { arrayDifference, arrayCompact, arrayUniq } from \"../../../core/ArrayUtils\";\nimport { objectCloneDeep, objectIsEqual } from \"../../../core/ObjectUtils\";\nconst CALLBACK_OPTION = \"callback\";\nconst CALLBACK_STRING_OPTION = \"callbackString\";\nconst COMPUTE_ON_DIRTY = \"computeOnDirty\";\nconst COOK_OPTION = \"cook\";\nconst FILE_BROWSE_OPTION = \"fileBrowse\";\nconst FILE_BROWSE_EXTENSIONS = \"extensions\";\nconst EXPRESSION = \"expression\";\nconst FOR_ENTITIES = \"forEntities\";\nconst LABEL = \"label\";\nconst HIDE_LABEL = \"hideLabel\";\nconst LEVEL = \"level\";\nconst MENU = \"menu\";\nconst MENU_STRING = \"menuString\";\nconst ENTRIES = \"entries\";\nconst MULTILINE_OPTION = \"multiline\";\nconst LANGUAGE_OPTION = \"language\";\nconst NODE_SELECTION = \"nodeSelection\";\nconst NODE_SELECTION_CONTEXT = \"context\";\nconst NODE_SELECTION_TYPES = \"types\";\nconst OBJECT_MASK = \"objectMask\";\nconst OBJECT_MASK_INPUT_INDEX = \"inputIndex\";\nconst DEPENDENT_ON_FOUND_NODE = \"dependentOnFoundNode\";\nconst DEPENDENT_ON_FOUND_PARAM = \"dependentOnFoundParam\";\nconst RANGE_OPTION = \"range\";\nconst RANGE_LOCKED_OPTION = \"rangeLocked\";\nconst STEP_OPTION = \"step\";\nconst SPARE_OPTION = \"spare\";\nconst TEXTURE_OPTION = \"texture\";\nconst ENV_OPTION = \"env\";\nconst HIDDEN_OPTION = \"hidden\";\nconst FIELD_OPTION = \"field\";\nconst VISIBLE_IF_OPTION = \"visibleIf\";\nconst COLOR_CONVERSION = \"conversion\";\nconst SEPARATOR_BEFORE_OPTION = \"separatorBefore\";\nconst SEPARATOR_AFTER_OPTION = \"separatorAfter\";\nconst JOIN_TO_PREVIOUS_PARAM = \"joinToPreviousParam\";\nconst AS_QUATERNION = \"asQuaternion\";\nexport const PARAM_OPTION_NAMES = {\n  CALLBACK_OPTION\n};\nconst EDITABLE = \"editable\";\nexport var StringParamLanguage = /* @__PURE__ */ ((StringParamLanguage2) => {\n  StringParamLanguage2[\"CSS\"] = \"css\";\n  StringParamLanguage2[\"GLSL\"] = \"glsl\";\n  StringParamLanguage2[\"HTML\"] = \"html\";\n  StringParamLanguage2[\"TYPESCRIPT\"] = \"typescript\";\n  StringParamLanguage2[\"JSON\"] = \"json\";\n  return StringParamLanguage2;\n})(StringParamLanguage || {});\nexport var FileType = /* @__PURE__ */ ((FileType2) => {\n  FileType2[\"AUDIO\"] = \"audio\";\n  FileType2[\"TEXTURE_IMAGE\"] = \"texture_image\";\n  FileType2[\"TEXTURE_VIDEO\"] = \"texture_video\";\n  FileType2[\"GEOMETRY\"] = \"geometry\";\n  FileType2[\"FONT\"] = \"font\";\n  FileType2[\"SVG\"] = \"svg\";\n  FileType2[\"JSON\"] = \"json\";\n  return FileType2;\n})(FileType || {});\nconst NON_OVERRIDABLE_OPTIONS = [EDITABLE];\nexport class OptionsController {\n  constructor(_param) {\n    this._param = _param;\n    this._programaticVisibleState = true;\n    this._callbackAllowed = false;\n    this._updateVisibilityAndRemoveDirtyBound = this.updateVisibilityAndRemoveDirty.bind(this);\n    this._ui_data_dependency_set = false;\n  }\n  dispose() {\n    var _a;\n    try {\n      this._options[CALLBACK_OPTION] = void 0;\n      this._options[CALLBACK_STRING_OPTION] = void 0;\n    } catch (err) {\n    }\n    (_a = this._visibility_graph_node) == null ? void 0 : _a.dispose();\n  }\n  set(options) {\n    if (CoreType.isString(options)) {\n      console.warn(\"options input invalid\", options, typeof options);\n    }\n    this._default_options = options;\n    this._options = objectCloneDeep(this._default_options);\n    this.postSetOptions();\n  }\n  copy(options_controller) {\n    this._default_options = objectCloneDeep(options_controller.default());\n    this._options = objectCloneDeep(options_controller.current());\n    this.postSetOptions();\n  }\n  setOption(optionName, value) {\n    if (!this._validateOption(optionName, value)) {\n      return;\n    }\n    this._options[optionName] = value;\n    if (this._param.components) {\n      for (const component of this._param.components) {\n        component.options.setOption(optionName, value);\n      }\n    }\n  }\n  _validateOption(optionName, value) {\n    if (optionName == CALLBACK_OPTION) {\n      return isFunction(value);\n    }\n    return true;\n  }\n  postSetOptions() {\n    this._handleComputeOnDirty();\n  }\n  param() {\n    return this._param;\n  }\n  node() {\n    return this._param.node;\n  }\n  default() {\n    return this._default_options;\n  }\n  current() {\n    return this._options;\n  }\n  // utils\n  hasOptionsOverridden() {\n    return !objectIsEqual(this._options, this._default_options);\n  }\n  overriddenOptions() {\n    const overriden = {};\n    const optionNames = Object.keys(this._options);\n    const optionNamesToCheck = [];\n    arrayDifference(optionNames, NON_OVERRIDABLE_OPTIONS, optionNamesToCheck);\n    for (const optionName of optionNamesToCheck) {\n      if (!objectIsEqual(this._options[optionName], this._default_options[optionName])) {\n        const cloned_option = objectCloneDeep(this._options[optionName]);\n        Object.assign(overriden, { [optionName]: cloned_option });\n      }\n    }\n    return overriden;\n  }\n  overriddenOptionNames() {\n    return Object.keys(this.overriddenOptions());\n  }\n  // compute on dirty\n  computeOnDirty() {\n    return this._options[COMPUTE_ON_DIRTY] || false;\n  }\n  _handleComputeOnDirty() {\n    if (this.computeOnDirty()) {\n      if (!this._computeOnDirtyCallbackAdded) {\n        this.param().addPostDirtyHook(\"computeOnDirty\", this._computeParam.bind(this));\n        this._computeOnDirtyCallbackAdded = true;\n      }\n    }\n  }\n  async _computeParam() {\n    await this.param().compute();\n  }\n  // callback\n  hasCallback() {\n    return this._options[CALLBACK_OPTION] != null || this._options[CALLBACK_STRING_OPTION] != null;\n  }\n  allowCallback() {\n    this._callbackAllowed = true;\n  }\n  async executeCallback() {\n    if (!this._callbackAllowed) {\n      return;\n    }\n    const node = this.node();\n    if (!node) {\n      return;\n    }\n    const scene = node.scene();\n    if (!scene) {\n      return;\n    }\n    const callback = this.getCallback(node, scene);\n    if (!callback) {\n      return;\n    }\n    if (!scene.loadingController.loaded()) {\n      return;\n    }\n    const parentParam = this.param().parentParam();\n    if (parentParam) {\n      parentParam.options.executeCallback();\n    } else {\n      await callback(node, this.param());\n    }\n  }\n  getCallback(node, scene) {\n    if (this.hasCallback()) {\n      return this._options[CALLBACK_OPTION] = this._options[CALLBACK_OPTION] || this.createCallbackFromString(node, scene);\n    }\n  }\n  createCallbackFromString(node, scene) {\n    const callbackString = this._options[CALLBACK_STRING_OPTION];\n    if (callbackString) {\n      const callbackFunction = new Function(\"node\", \"scene\", \"window\", \"location\", callbackString);\n      return () => {\n        callbackFunction(node, scene, null, null);\n      };\n    }\n  }\n  // color\n  colorConversion() {\n    return this._options[COLOR_CONVERSION] || ColorConversion.NONE;\n  }\n  // cook\n  makesNodeDirtyWhenDirty() {\n    if (this.param().parentParam() != null) {\n      return false;\n    }\n    const cookOptions = this._options[COOK_OPTION];\n    if (cookOptions != null) {\n      return cookOptions;\n    }\n    return true;\n  }\n  // desktop\n  fileBrowseOption() {\n    return this._options[FILE_BROWSE_OPTION];\n  }\n  fileBrowseAllowed() {\n    return this.fileBrowseOption() != null;\n  }\n  fileBrowseExtensions() {\n    const option = this.fileBrowseOption();\n    if (option) {\n      return option[FILE_BROWSE_EXTENSIONS];\n    } else {\n      return null;\n    }\n  }\n  // separator\n  separatorBefore() {\n    return this._options[SEPARATOR_BEFORE_OPTION];\n  }\n  separatorAfter() {\n    return this._options[SEPARATOR_AFTER_OPTION];\n  }\n  joinToPreviousParam() {\n    return this._options[JOIN_TO_PREVIOUS_PARAM];\n  }\n  // editable\n  setEditableState(state) {\n    const currentState = this._options[EDITABLE];\n    const param = this.param();\n    if (currentState != state) {\n      this._options[EDITABLE] = state;\n      param.emit(ParamEvent.EDITABLE_UPDATED);\n    }\n    if (param.components) {\n      for (const component of param.components) {\n        component.options.setEditableState(state);\n      }\n    }\n  }\n  editable() {\n    const state = this._options[EDITABLE];\n    if (state != null) {\n      return state;\n    }\n    return true;\n  }\n  // expression\n  // get displays_expression_only() {\n  // \treturn this._options[EXPRESSION_ONLY_OPTION] === true;\n  // }\n  isExpressionForEntities() {\n    const expr_option = this._options[EXPRESSION];\n    if (expr_option) {\n      return expr_option[FOR_ENTITIES] || false;\n    }\n    return false;\n  }\n  // folder\n  level() {\n    return this._options[LEVEL] || 0;\n  }\n  // menu\n  hasMenu() {\n    return this.menuOptions() != null || this.menuStringOptions() != null;\n  }\n  menuOptions() {\n    return this._options[MENU];\n  }\n  menuStringOptions() {\n    return this._options[MENU_STRING];\n  }\n  menuEntries() {\n    const options = this.menuOptions() || this.menuStringOptions();\n    if (options) {\n      return options[ENTRIES];\n    } else {\n      return [];\n    }\n  }\n  ensureValueInMenuEntries(value) {\n    const options = this.menuOptions();\n    if (!options) {\n      return value;\n    }\n    const entries = options[ENTRIES];\n    if (entries.length == 0) {\n      return value;\n    }\n    for (const entry of entries) {\n      if (value == entry.value) {\n        return value;\n      }\n    }\n    return entries[0].value;\n  }\n  // multiline\n  isMultiline() {\n    return this._options[MULTILINE_OPTION] === true;\n  }\n  language() {\n    return this._options[LANGUAGE_OPTION];\n  }\n  isCode() {\n    return this.language() != null;\n  }\n  // node selection\n  nodeSelectionOptions() {\n    return this._options[NODE_SELECTION];\n  }\n  nodeSelectionContext() {\n    const options = this.nodeSelectionOptions();\n    if (options) {\n      return options[NODE_SELECTION_CONTEXT];\n    }\n  }\n  nodeSelectionTypes() {\n    const options = this.nodeSelectionOptions();\n    if (options) {\n      return options[NODE_SELECTION_TYPES];\n    }\n  }\n  displayObjectMaskSelection() {\n    const value = this._options[OBJECT_MASK];\n    return value != null && value != false;\n  }\n  objectMaskInputIndex() {\n    const value = this._options[OBJECT_MASK];\n    const input = value != null ? value[OBJECT_MASK_INPUT_INDEX] : 0;\n    return input || 0;\n  }\n  objectMaskFromInputOnly() {\n    const value = this._options[OBJECT_MASK];\n    const fromInputOnly = value.fromInputOnly;\n    return fromInputOnly != false;\n  }\n  dependentOnFoundNode() {\n    if (DEPENDENT_ON_FOUND_NODE in this._options) {\n      return this._options[DEPENDENT_ON_FOUND_NODE];\n    } else {\n      return true;\n    }\n  }\n  dependentOnFoundParam() {\n    if (DEPENDENT_ON_FOUND_PARAM in this._options) {\n      return this._options[DEPENDENT_ON_FOUND_PARAM];\n    } else {\n      return true;\n    }\n  }\n  // param selection\n  isSelectingParam() {\n    return this.param().type() == ParamType.PARAM_PATH;\n  }\n  // paramSelectionOptions() {\n  // \treturn this._options[PARAM_SELECTION];\n  // }\n  // paramSelectionType() {\n  // \tconst options = this.paramSelectionOptions();\n  // \tif (options) {\n  // \t\tconst type_or_boolean = options;\n  // \t\tif (!CoreType.isBoolean(type_or_boolean)) {\n  // \t\t\treturn type_or_boolean;\n  // \t\t}\n  // \t}\n  // }\n  // range\n  range() {\n    return this._options[RANGE_OPTION] || [0, 1];\n  }\n  step() {\n    return this._options[STEP_OPTION];\n  }\n  asQuaternion() {\n    return this._options[AS_QUATERNION] == true;\n  }\n  rangeLocked() {\n    return this._options[RANGE_LOCKED_OPTION] || [false, false];\n  }\n  ensureInRange(value) {\n    const range = this.range();\n    if (value >= range[0] && value <= range[1]) {\n      return value;\n    } else {\n      if (value < range[0]) {\n        return this.rangeLocked()[0] === true ? range[0] : value;\n      } else {\n        return this.rangeLocked()[1] === true ? range[1] : value;\n      }\n    }\n  }\n  // spare\n  isSpare() {\n    return this._options[SPARE_OPTION] || false;\n  }\n  // texture\n  textureOptions() {\n    return this._options[TEXTURE_OPTION];\n  }\n  textureAsEnv() {\n    const texture_options = this.textureOptions();\n    if (texture_options != null) {\n      return texture_options[ENV_OPTION] === true;\n    }\n    return false;\n  }\n  // visible\n  isHidden() {\n    return this._options[HIDDEN_OPTION] === true || this._programaticVisibleState === false;\n  }\n  isVisible() {\n    return !this.isHidden();\n  }\n  setVisibleState(state) {\n    this._options[HIDDEN_OPTION] = !state;\n    this.param().emit(ParamEvent.VISIBLE_UPDATED);\n  }\n  // label\n  label() {\n    return this._options[LABEL];\n  }\n  isLabelHidden() {\n    const type = this.param().type();\n    switch (type) {\n      case ParamType.BUTTON: {\n        return true;\n      }\n      case ParamType.BOOLEAN: {\n        return this.isFieldHidden();\n      }\n      case ParamType.RAMP: {\n        return this._options[HIDE_LABEL] || false;\n      }\n      case ParamType.STRING: {\n        return this.isCode() && this._options[HIDE_LABEL] || false;\n      }\n    }\n    return false;\n  }\n  isFieldHidden() {\n    return this._options[FIELD_OPTION] === false;\n  }\n  // programatic visibility\n  uiDataDependsOnOtherParams() {\n    return VISIBLE_IF_OPTION in this._options;\n  }\n  visibilityPredecessors() {\n    const visibilityOptions = this._options[VISIBLE_IF_OPTION];\n    if (!visibilityOptions) {\n      return [];\n    }\n    let predecessorNames = [];\n    if (CoreType.isArray(visibilityOptions)) {\n      arrayUniq(visibilityOptions.map((options) => Object.keys(options)).flat(), predecessorNames);\n    } else {\n      predecessorNames = Object.keys(visibilityOptions);\n    }\n    const node = this.param().node;\n    const params = [];\n    arrayCompact(\n      predecessorNames.map((name) => {\n        const param = node.params.get(name);\n        if (param) {\n          return param;\n        } else {\n          console.error(\n            `param ${name} not found as visibility condition for ${this.param().name()} in node ${this.param().node.type()}`\n          );\n        }\n      }),\n      params\n    );\n    return params;\n  }\n  setUiDataDependency() {\n    if (this._ui_data_dependency_set) {\n      return;\n    }\n    this._ui_data_dependency_set = true;\n    const predecessors = this.visibilityPredecessors();\n    if (predecessors.length > 0) {\n      this._visibility_graph_node = new CoreGraphNode(this.param().scene(), \"param_visibility\");\n      for (const predecessor of predecessors) {\n        this._visibility_graph_node.addGraphInput(predecessor);\n      }\n      this._visibility_graph_node.addPostDirtyHook(\n        \"_update_visibility_and_remove_dirty\",\n        this._updateVisibilityAndRemoveDirtyBound\n      );\n    }\n  }\n  updateVisibilityAndRemoveDirty() {\n    this.updateVisibility();\n    this.param().removeDirtyState();\n  }\n  async updateVisibility() {\n    const options = this._options[VISIBLE_IF_OPTION];\n    if (options) {\n      const node = this.param().node;\n      const params = this.visibilityPredecessors();\n      const promises = params.map((p) => {\n        if (p.isDirty()) {\n          return p.compute();\n        }\n      });\n      this._programaticVisibleState = false;\n      await Promise.all(promises);\n      if (CoreType.isArray(options)) {\n        for (const optionsSet of options) {\n          const optionSetParamNames = Object.keys(optionsSet);\n          const optionSetParams = [];\n          arrayCompact(\n            optionSetParamNames.map((paramName) => node.params.get(paramName)),\n            optionSetParams\n          );\n          const satisfiedValues = optionSetParams.filter((param) => param.value == optionsSet[param.name()]);\n          if (satisfiedValues.length == optionSetParams.length) {\n            this._programaticVisibleState = true;\n          }\n        }\n      } else {\n        const satisfiedValues = params.filter((param) => param.value == options[param.name()]);\n        this._programaticVisibleState = satisfiedValues.length == params.length;\n      }\n      this.param().emit(ParamEvent.VISIBLE_UPDATED);\n    }\n  }\n  /*\n   *\n   *\n   *\n   */\n  // private _callbacksByOptionName: Map<keyof ParamOptions, OptionChangeCallback> | undefined;\n  // onOptionChange<K extends keyof ParamOptions>(optionName: K, callback: OptionChangeCallback) {\n  // \tthis._callbacksByOptionName = this._callbacksByOptionName || new Map();\n  // \tthis._callbacksByOptionName.set(optionName, callback);\n  // }\n  // private _runOptionCallback(optionName: keyof ParamOptions) {\n  // \tif (!this._callbacksByOptionName) {\n  // \t\treturn;\n  // \t}\n  // \tconst callback = this._callbacksByOptionName.get(optionName);\n  // \tif (!callback) {\n  // \t\treturn;\n  // \t}\n  // \tcallback();\n  // }\n}\n", "\"use strict\";\nexport class EmitController {\n  constructor(param) {\n    this.param = param;\n    this._blockedEmit = false;\n    this._blockedParentEmit = false;\n    this._countByEventName = /* @__PURE__ */ new Map();\n  }\n  emitAllowed() {\n    if (this._blockedEmit === true) {\n      return false;\n    }\n    if (this.param.scene().loadingController.isLoading()) {\n      return false;\n    }\n    return this.param.scene().dispatchController.emitAllowed();\n  }\n  blockEmit() {\n    this._blockedEmit = true;\n    if (this.param.isMultiple() && this.param.components) {\n      for (const component of this.param.components) {\n        component.emitController.blockEmit();\n      }\n    }\n    return true;\n  }\n  unblockEmit() {\n    this._blockedEmit = false;\n    if (this.param.isMultiple() && this.param.components) {\n      for (const component of this.param.components) {\n        component.emitController.unblockEmit();\n      }\n    }\n    return true;\n  }\n  blockParentEmit() {\n    this._blockedParentEmit = true;\n    return true;\n  }\n  unblockParentEmit() {\n    this._blockedParentEmit = false;\n    return true;\n  }\n  incrementCount(eventName) {\n    const count = (this._countByEventName.get(eventName) || 0) + 1;\n    this._countByEventName.set(eventName, count);\n  }\n  eventsCount(eventName) {\n    return this._countByEventName.get(eventName) || 0;\n  }\n  emit(event) {\n    if (this.emitAllowed()) {\n      this.param.emit(event);\n      const parentParam = this.param.parentParam();\n      if (parentParam != null && this._blockedParentEmit !== true) {\n        parentParam.emit(event);\n      }\n    }\n  }\n}\n", "\"use strict\";\nexport class ParamTimeDependentState {\n  constructor(param) {\n    this.param = param;\n  }\n  active() {\n    var _a;\n    const frameGraphNodeId = this.param.scene().timeController.graphNode.graphNodeId();\n    return ((_a = this.param.graphPredecessorIds()) == null ? void 0 : _a.includes(frameGraphNodeId)) || false;\n  }\n}\n", "\"use strict\";\nimport { ParamEvent } from \"../../../poly/ParamEvent\";\nimport { Poly } from \"../../../Poly\";\nexport class ParamErrorState {\n  constructor(param) {\n    this.param = param;\n  }\n  set(message) {\n    if (this._message != message) {\n      if (message) {\n        Poly.error(`[${this.param.path()}] error: '${message}'`);\n      } else {\n        Poly.warn(`[${this.param.path()}] clear error`);\n      }\n      this._message = message;\n      this.param.emitController.emit(ParamEvent.ERROR_UPDATED);\n    }\n  }\n  message() {\n    return this._message;\n  }\n  clear() {\n    this.set(void 0);\n  }\n  active() {\n    return this._message != null;\n  }\n}\n", "\"use strict\";\nimport { ParamTimeDependentState } from \"./states/TimeDependent\";\nimport { ParamErrorState } from \"./states/Error\";\nexport class ParamStatesController {\n  constructor(param) {\n    this.param = param;\n    this.timeDependent = new ParamTimeDependentState(this.param);\n    this.error = new ParamErrorState(this.param);\n  }\n}\n", "\"use strict\";\nimport { CoreWalker } from \"../../core/Walker\";\nimport { CoreGraphNode } from \"../../core/graph/CoreGraphNode\";\nimport { OptionsController } from \"./utils/OptionsController\";\nimport { EmitController } from \"./utils/EmitController\";\nimport { ParamStatesController } from \"./utils/StatesController\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { ParamEvent } from \"../poly/ParamEvent\";\nimport { MethodDependency } from \"../expressions/MethodDependency\";\nimport { Poly } from \"../Poly\";\nimport { arrayCopy } from \"../../core/ArrayUtils\";\nconst TYPED_PARAM_DEFAULT_COMPONENT_NAMES = [];\nexport class TypedParam extends CoreGraphNode {\n  // private _ui_data: UIData | undefined;\n  // get ui_data(): UIData {\n  // \treturn (this._ui_data = this._ui_data || new UIData(this.scene, this));\n  // }\n  constructor(scene, node, options) {\n    super(scene, \"BaseParam\");\n    this._options = new OptionsController(this);\n    this._emitController = new EmitController(this);\n    this._isComputing = false;\n    if (options.serializerClass) {\n      this._serializer = new options.serializerClass(this);\n    }\n    this._node = node;\n    this._initializeParam();\n  }\n  get options() {\n    return this._options = this._options || new OptionsController(this);\n  }\n  get emitController() {\n    return this._emitController = this._emitController || new EmitController(this);\n  }\n  get expressionController() {\n    return this._expression_controller;\n  }\n  expressionParsedAsString() {\n    return false;\n  }\n  get serializer() {\n    return this._serializer;\n  }\n  get states() {\n    return this._states = this._states || new ParamStatesController(this);\n  }\n  dispose() {\n    var _a, _b;\n    if (this.expressionController && this.hasExpression()) {\n      this.set(this.rawInputSerialized());\n    }\n    const _tmpCoreGraphNodes = [];\n    const predecessors = this.graphPredecessors();\n    if (predecessors) {\n      arrayCopy(predecessors, _tmpCoreGraphNodes);\n      for (const predecessor of _tmpCoreGraphNodes) {\n        if (predecessor instanceof MethodDependency) {\n          predecessor.dispose();\n        }\n      }\n    }\n    const successors = this.graphSuccessors();\n    if (successors) {\n      arrayCopy(successors, _tmpCoreGraphNodes);\n      for (const successor of _tmpCoreGraphNodes) {\n        if (successor instanceof TypedParam) {\n          const input = successor.rawInputSerialized();\n          successor.set(successor.defaultValue());\n          successor.set(input);\n        } else {\n          successor.setDirty();\n        }\n      }\n    }\n    this.scene().missingExpressionReferencesController.deregisterParam(this);\n    (_a = this._expression_controller) == null ? void 0 : _a.dispose();\n    super.dispose();\n    (_b = this._options) == null ? void 0 : _b.dispose();\n    this._node = void 0;\n    this._parent_param = void 0;\n    this._runOnDisposeCallbacks();\n  }\n  _initializeParam() {\n  }\n  postOptionsInitialize() {\n  }\n  // \t// this.addPostDirtyHook(this._remove_node_param_cache.bind(this))\n  // }\n  // initialize() {\n  // \tthis.initComponents();\n  // \t// this.init_expression()\n  // \t// this._init_ui_data()\n  // }\n  // accepts_visitor<T extends ParamVisitor>(visitor: T): ReturnType<T['visit_param']> {\n  // \treturn visitor.visit_param(this);\n  // }\n  //\n  // init_expression() {}\n  // type\n  static type() {\n    return ParamType.FLOAT;\n  }\n  type() {\n    return this.constructor.type();\n  }\n  isNumeric() {\n    return false;\n  }\n  // name\n  setName(name) {\n    super.setName(name);\n  }\n  get value() {\n    return this._value;\n  }\n  copyValue(param) {\n    if (param.type() == this.type()) {\n      this._copyValue(param);\n    } else {\n      console.warn(`cannot copy value from ${param.type()} to ${this.type()}`);\n    }\n  }\n  _copyValue(param) {\n    throw \"abstract method param._copy_value\";\n  }\n  valuePreConversionSerialized() {\n    return void 0;\n  }\n  convert(rawVal) {\n    return null;\n  }\n  static areRawInputEqual(val1, val2) {\n    return false;\n  }\n  isRawInputEqual(other_raw_input) {\n    return this.constructor.areRawInputEqual(this._raw_input, other_raw_input);\n  }\n  isDefaultValueEqual(other_default_value) {\n    return this.constructor.areRawInputEqual(this._default_value, other_default_value);\n  }\n  static areValuesEqual(val1, val2) {\n    return false;\n  }\n  isValueEqual(other_val) {\n    return this.constructor.areValuesEqual(this.value, other_val);\n  }\n  _cloneRawInput(raw_input) {\n    return raw_input;\n  }\n  set(raw_input) {\n    this._raw_input = this._cloneRawInput(this._prefilterInvalidRawInput(raw_input));\n    this.emitController.emit(ParamEvent.RAW_INPUT_UPDATED);\n    this.processRawInput();\n  }\n  _prefilterInvalidRawInput(raw_input) {\n    return raw_input;\n  }\n  defaultValue() {\n    return this._default_value;\n  }\n  isDefault() {\n    return this._raw_input == this._default_value;\n  }\n  rawInput() {\n    return this._raw_input;\n  }\n  processRawInput() {\n  }\n  isComputing() {\n    return this._isComputing;\n  }\n  async compute() {\n    if (this.scene().loadingController.isLoading()) {\n      Poly.warn(`param attempt to compute ${this.path()} while scene is loading`);\n    }\n    if (this.isDirty()) {\n      if (!this._isComputing) {\n        this._isComputing = true;\n        await this.processComputation();\n        this._isComputing = false;\n        if (this._computeResolves) {\n          const resolves = [...this._computeResolves];\n          this._computeResolves = void 0;\n          for (const resolve of resolves) {\n            resolve();\n          }\n        }\n      } else {\n        return new Promise((resolve, reject) => {\n          this._computeResolves = this._computeResolves || [];\n          this._computeResolves.push(resolve);\n        });\n      }\n    }\n  }\n  async processComputation() {\n  }\n  // set_default_value(default_value: ParamValuesTypeMap[T]) {\n  // \tthis._default_value = default_value;\n  // }\n  setInitValue(init_value) {\n    this._default_value = this._cloneRawInput(this._prefilterInvalidRawInput(init_value));\n  }\n  // eval_p(): Promise<ParamValuesTypeMap[T]> {\n  // \treturn new Promise((resolve, reject) => {\n  // \t\tresolve();\n  // \t});\n  // }\n  // node\n  _setupNodeDependencies(node) {\n    var _a, _b;\n    if (!node) {\n      if (this._node) {\n        (_a = this._node.params.params_node) == null ? void 0 : _a.removeGraphInput(this);\n      }\n    } else {\n      this.options.allowCallback();\n      if (!this.parentParam()) {\n        if (this.options.makesNodeDirtyWhenDirty()) {\n          (_b = node.params.params_node) == null ? void 0 : _b.addGraphInput(this, false);\n        } else {\n          this.dirtyController.addPostDirtyHook(\"run callback\", async () => {\n            await this.compute();\n            await this.options.executeCallback();\n          });\n        }\n      }\n    }\n    if (this.components) {\n      for (const c of this.components) {\n        c._setupNodeDependencies(node);\n      }\n    }\n  }\n  get node() {\n    return this._node;\n  }\n  parent() {\n    return this.node;\n  }\n  // hierarchy\n  set_parent_param(param) {\n    param.addGraphInput(this, false);\n    this._parent_param = param;\n  }\n  parentParam() {\n    return this._parent_param;\n  }\n  has_parent_param() {\n    return this._parent_param != null;\n  }\n  path() {\n    var _a;\n    return ((_a = this.node) == null ? void 0 : _a.path()) + \"/\" + this.name();\n  }\n  pathRelativeTo(node) {\n    if (!this._node) {\n      return this.name();\n    }\n    const nodeRelativePath = CoreWalker.relativePath(node, this._node);\n    if (nodeRelativePath.length > 0) {\n      return CoreWalker.sanitizePath(`${nodeRelativePath}${CoreWalker.SEPARATOR}${this.name()}`);\n    } else {\n      return this.name();\n    }\n  }\n  // emit\n  emit(eventName) {\n    if (this.emitController.emitAllowed()) {\n      this.emitController.incrementCount(eventName);\n      this.scene().dispatchController.dispatch(this, eventName);\n    }\n  }\n  // multiple\n  get components() {\n    return this._components;\n  }\n  componentNames() {\n    return TYPED_PARAM_DEFAULT_COMPONENT_NAMES;\n  }\n  isMultiple() {\n    return this.componentNames().length > 0;\n  }\n  initComponents() {\n  }\n  hasExpression() {\n    return this.expressionController != null && this.expressionController.active();\n  }\n  // serialize\n  toJSON() {\n    if (!this._serializer) {\n      return;\n    }\n    return this._serializer.toJSON();\n  }\n  onDispose(callback) {\n    this._onDisposeCallbacks = this._onDisposeCallbacks || /* @__PURE__ */ new Set();\n    this._onDisposeCallbacks.add(callback);\n  }\n  deregisterOnDispose(callback) {\n    if (this._onDisposeCallbacks) {\n      this._onDisposeCallbacks.delete(callback);\n    }\n  }\n  _runOnDisposeCallbacks() {\n    if (this._onDisposeCallbacks) {\n      this._onDisposeCallbacks.forEach((callback) => {\n        callback();\n      });\n      this._onDisposeCallbacks.clear();\n      this._onDisposeCallbacks = void 0;\n    }\n  }\n}\nexport class BaseParamClass extends TypedParam {\n  defaultValueSerialized() {\n    return \"BaseParamClass.defaultValueSerialized overriden\";\n  }\n  rawInputSerialized() {\n    return \"BaseParamClass.rawInputSerialized overriden\";\n  }\n  valueSerialized() {\n    return \"BaseParamClass.valueSerialized overriden\";\n  }\n}\n", "\"use strict\";\nimport { CubicInterpolant } from \"three\";\nimport { MathUtils } from \"three\";\nimport { arraySortBy } from \"../../../core/ArrayUtils\";\nexport class RampPoint {\n  constructor(_position = 0, _value = 0) {\n    this._position = _position;\n    this._value = _value;\n  }\n  toJSON() {\n    return {\n      position: this._position,\n      value: this._value\n    };\n  }\n  position() {\n    return this._position;\n  }\n  value() {\n    return this._value;\n  }\n  copy(point) {\n    this._position = point.position();\n    this._value = point.value();\n  }\n  clone() {\n    const point = new RampPoint();\n    point.copy(this);\n    return point;\n  }\n  isEqual(other_point) {\n    return this._position == other_point.position() && this._value == other_point.value();\n  }\n  isEqualJSON(json) {\n    return this._position == json.position && this._value == json.value;\n  }\n  fromJSON(json) {\n    this._position = json.position;\n    this._value = json.value;\n  }\n  static areEqualJSON(json1, json2) {\n    return json1.position == json2.position && json1.value == json2.value;\n  }\n  static fromJSON(json) {\n    return new RampPoint(json.position, json.value);\n  }\n}\nexport var RampInterpolation = /* @__PURE__ */ ((RampInterpolation2) => {\n  RampInterpolation2[\"CUBIC\"] = \"cubic\";\n  return RampInterpolation2;\n})(RampInterpolation || {});\nexport const RAMP_INTERPOLATIONS = [\"cubic\" /* CUBIC */];\nexport class RampValue {\n  constructor(_interpolation = \"cubic\" /* CUBIC */, _points = []) {\n    this._interpolation = _interpolation;\n    this._points = _points;\n    this._uuid = MathUtils.generateUUID();\n  }\n  uuid() {\n    return this._uuid;\n  }\n  interpolation() {\n    return this._interpolation;\n  }\n  points() {\n    return this._points;\n  }\n  static createInterpolantFromValues(positions, values) {\n    const valuesCount = 1;\n    const interpolatedValues = new Float32Array(valuesCount);\n    return new CubicInterpolant(positions, values, valuesCount, interpolatedValues);\n  }\n  createInterpolant() {\n    return RampValue.createInterpolant(this);\n  }\n  static createInterpolant(rampValue) {\n    const points = rampValue.points();\n    const sortedPoints = arraySortBy(points, (point) => point.position());\n    const positions = new Float32Array(sortedPoints.length);\n    const values = new Float32Array(sortedPoints.length);\n    let i = 0;\n    for (const sortedPoint of sortedPoints) {\n      positions[i] = sortedPoint.position();\n      values[i] = sortedPoint.value();\n      i++;\n    }\n    return this.createInterpolantFromValues(positions, values);\n  }\n  static fromJSON(json) {\n    const points = [];\n    for (const jsonPoint of json.points) {\n      points.push(RampPoint.fromJSON(jsonPoint));\n    }\n    let interpolation = json.interpolation;\n    if (interpolation == null || interpolation == \"\") {\n      interpolation = \"cubic\" /* CUBIC */;\n    }\n    return new RampValue(interpolation, points);\n  }\n  toJSON() {\n    return {\n      interpolation: this._interpolation,\n      points: this._points.map((p) => p.toJSON())\n    };\n  }\n  clone() {\n    const ramp = new RampValue();\n    ramp.copy(this);\n    return ramp;\n  }\n  copy(ramp) {\n    this._interpolation = ramp.interpolation();\n    const newPointsCount = ramp.points().length;\n    const currentPointsCount = this._points.length;\n    if (currentPointsCount > newPointsCount) {\n      const pointsCountToRemove = currentPointsCount - newPointsCount;\n      const spliceStart = currentPointsCount - pointsCountToRemove;\n      this._points.splice(spliceStart, pointsCountToRemove);\n    }\n    let index = 0;\n    for (const point of ramp.points()) {\n      const currentPoint = this._points[index];\n      if (currentPoint) {\n        currentPoint.copy(point);\n      } else {\n        this._points.push(point.clone());\n      }\n      index += 1;\n    }\n  }\n  isEqual(other_ramp_value) {\n    if (this._interpolation != other_ramp_value.interpolation()) {\n      return false;\n    }\n    const other_points = other_ramp_value.points();\n    if (this._points.length != other_points.length) {\n      return false;\n    }\n    let index = 0;\n    for (const point of this._points) {\n      const other_point = other_points[index];\n      if (!point.isEqual(other_point)) {\n        return false;\n      }\n      index += 1;\n    }\n    return true;\n  }\n  isEqualJSON(json) {\n    if (this._interpolation != json.interpolation) {\n      return false;\n    }\n    if (this._points.length != json.points.length) {\n      return false;\n    }\n    let index = 0;\n    for (const point of this._points) {\n      const other_point = json.points[index];\n      if (!point.isEqualJSON(other_point)) {\n        return false;\n      }\n      index += 1;\n    }\n    return true;\n  }\n  static are_json_equal(json1, json2) {\n    if (json1.interpolation != json2.interpolation) {\n      return false;\n    }\n    if (json1.points.length != json2.points.length) {\n      return false;\n    }\n    let index = 0;\n    for (const point1 of json1.points) {\n      const point2 = json2.points[index];\n      if (!RampPoint.areEqualJSON(point1, point2)) {\n        return false;\n      }\n      index += 1;\n    }\n    return true;\n  }\n  fromJSON(json) {\n    this._interpolation = json.interpolation;\n    const newPointsCount = json.points.length;\n    const currentPointsCount = this._points.length;\n    if (currentPointsCount > newPointsCount) {\n      const pointsCountToRemove = currentPointsCount - newPointsCount;\n      const spliceStart = currentPointsCount - pointsCountToRemove;\n      this._points.splice(spliceStart, pointsCountToRemove);\n    }\n    let index = 0;\n    for (const json_point of json.points) {\n      const currentPoint = this._points[index];\n      if (currentPoint) {\n        currentPoint.fromJSON(json_point);\n      } else {\n        this._points.push(RampPoint.fromJSON(json_point));\n      }\n      index += 1;\n    }\n  }\n}\n", "\"use strict\";\nimport { RGBAFormat, FloatType } from \"three\";\nimport { DataTexture } from \"three\";\nimport { TypedParam } from \"./_Base\";\nimport { RampValue, RampPoint, RampInterpolation } from \"./ramp/RampValue\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { ParamEvent } from \"../poly/ParamEvent\";\nconst STRIDE = 4;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 1;\nconst TEXTURE_SIZE = TEXTURE_WIDTH * TEXTURE_HEIGHT;\nconst TEXTURE_BYTES_MULT = 1;\nconst _RampParam = class extends TypedParam {\n  constructor() {\n    super(...arguments);\n    this._textureData = new Float32Array(STRIDE * TEXTURE_SIZE);\n    this._rampTexture = new DataTexture(this._textureData, TEXTURE_WIDTH, TEXTURE_HEIGHT, RGBAFormat, FloatType);\n  }\n  static type() {\n    return ParamType.RAMP;\n  }\n  defaultValueSerialized() {\n    if (this._default_value instanceof RampValue) {\n      return this._default_value.toJSON();\n    } else {\n      return this._default_value;\n    }\n  }\n  _cloneRawInput(raw_input) {\n    if (raw_input instanceof RampValue) {\n      return raw_input.clone();\n    } else {\n      return RampValue.fromJSON(raw_input).toJSON();\n    }\n  }\n  rawInputSerialized() {\n    if (this._raw_input instanceof RampValue) {\n      return this._raw_input.toJSON();\n    } else {\n      return RampValue.fromJSON(this._raw_input).toJSON();\n    }\n  }\n  valueSerialized() {\n    return this.value.toJSON();\n  }\n  _copyValue(param) {\n    this.set(param.valueSerialized());\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    if (raw_input1 instanceof RampValue) {\n      if (raw_input2 instanceof RampValue) {\n        return raw_input1.isEqual(raw_input2);\n      } else {\n        return raw_input1.isEqualJSON(raw_input2);\n      }\n    } else {\n      if (raw_input2 instanceof RampValue) {\n        return raw_input2.isEqualJSON(raw_input1);\n      } else {\n        return RampValue.are_json_equal(raw_input1, raw_input2);\n      }\n    }\n  }\n  static areValuesEqual(val1, val2) {\n    return val1.isEqual(val2);\n  }\n  // initialize_param() {\n  // \tthis.addPostDirtyHook(\n  // \t\t'_reset_ramp_interpolant_and_texture',\n  // \t\tthis.reset_ramp_interpolant.bind(this)\n  // \t);\n  // }\n  // accepts_visitor(visitor: RampParamVisitor) {\n  // \treturn visitor.visit_ramp_param(this);\n  // }\n  isDefault() {\n    if (this._default_value instanceof RampValue) {\n      return this.value.isEqual(this._default_value);\n    } else {\n      return this.value.isEqualJSON(this._default_value);\n    }\n  }\n  processRawInput() {\n    if (this._raw_input instanceof RampValue) {\n      if (!this._value) {\n        this._value = this._raw_input;\n      } else {\n        this._value.copy(this._raw_input);\n      }\n    } else {\n      if (!this._value) {\n        this._value = RampValue.fromJSON(this._raw_input);\n      } else {\n        this._value.fromJSON(this._raw_input);\n      }\n    }\n    this._resetRampInterpolant();\n    this._updateRampTexture();\n    this.options.executeCallback();\n    this.emitController.emit(ParamEvent.VALUE_UPDATED);\n    this.setSuccessorsDirty(this);\n  }\n  // convert_value(v) {\n  // \tlet is_json = false\n  // \tif (CoreType.isString(v)) {\n  // \t\tv = JSON.parse(v)\n  // \t\tis_json = true\n  // \t}\n  // \tif (!is_json) {\n  // \t\tif (v.interpolation && v.points) {\n  // \t\t\tif (CoreType.isArray(v.points)) {\n  // \t\t\t\tis_json = true\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // \tif (is_json) {\n  // \t\tv = RampValue.from_json(v)\n  // \t}\n  // \treturn v\n  // }\n  // convert_default_value(v) {\n  // \treturn this.convert_value(v)\n  // }\n  hasExpression() {\n    return false;\n  }\n  _resetRampInterpolant() {\n    this._rampInterpolant = void 0;\n  }\n  rampTexture() {\n    return this._rampTexture;\n  }\n  _updateRampTexture() {\n    this._updateRampTextureData();\n    this.rampTexture().needsUpdate = true;\n  }\n  _updateRampTextureData() {\n    let stride = 0;\n    let position = 0;\n    let value = 0;\n    for (var i = 0; i < TEXTURE_SIZE; i++) {\n      stride = i * STRIDE;\n      position = i / TEXTURE_WIDTH;\n      value = this.valueAtPosition(position);\n      this._textureData[stride + 0] = value * TEXTURE_BYTES_MULT;\n      this._textureData[stride + 1] = 0;\n      this._textureData[stride + 2] = 0;\n    }\n  }\n  interpolant() {\n    return this._rampInterpolant = this._rampInterpolant || this._createInterpolant();\n  }\n  _createInterpolant() {\n    return this.value.createInterpolant();\n  }\n  valueAtPosition(position) {\n    return this.interpolant().evaluate(position)[0];\n  }\n};\nexport let RampParam = _RampParam;\nRampParam.DEFAULT_VALUE = new RampValue(RampInterpolation.CUBIC, [new RampPoint(0, 0), new RampPoint(1, 1)]);\nRampParam.DEFAULT_VALUE_JSON = _RampParam.DEFAULT_VALUE.toJSON();\n", "\"use strict\";\nimport { ParamType } from \"../../../poly/ParamType\";\nimport { RampParam } from \"../../../params/Ramp\";\nimport { Color } from \"three\";\nimport { Vector2 } from \"three\";\nimport { Vector3 } from \"three\";\nimport { Vector4 } from \"three\";\nexport class ParamTemplate {\n  constructor(type, init_value, options) {\n    this.type = type;\n    this.init_value = init_value;\n    this.options = options;\n  }\n}\nexport class ParamConfig {\n  static BUTTON(init_value, options) {\n    return new ParamTemplate(ParamType.BUTTON, init_value, options);\n  }\n  static BOOLEAN(init_value, options) {\n    return new ParamTemplate(ParamType.BOOLEAN, init_value, options);\n  }\n  static COLOR(init_value, options) {\n    if (init_value instanceof Color) {\n      init_value = init_value.toArray();\n    }\n    return new ParamTemplate(ParamType.COLOR, init_value, options);\n  }\n  static FLOAT(init_value, options) {\n    return new ParamTemplate(ParamType.FLOAT, init_value, options);\n  }\n  static FOLDER(init_value = null, options) {\n    return new ParamTemplate(ParamType.FOLDER, init_value, options);\n  }\n  static INTEGER(init_value, options) {\n    return new ParamTemplate(ParamType.INTEGER, init_value, options);\n  }\n  static RAMP(init_value = RampParam.DEFAULT_VALUE, options) {\n    return new ParamTemplate(ParamType.RAMP, init_value, options);\n  }\n  static STRING(init_value = \"\", options) {\n    return new ParamTemplate(ParamType.STRING, init_value, options);\n  }\n  static VECTOR2(init_value, options) {\n    if (init_value instanceof Vector2) {\n      init_value = init_value.toArray();\n    }\n    return new ParamTemplate(ParamType.VECTOR2, init_value, options);\n  }\n  static VECTOR3(init_value, options) {\n    if (init_value instanceof Vector3) {\n      init_value = init_value.toArray();\n    }\n    return new ParamTemplate(ParamType.VECTOR3, init_value, options);\n  }\n  static VECTOR4(init_value, options) {\n    if (init_value instanceof Vector4) {\n      init_value = init_value.toArray();\n    }\n    return new ParamTemplate(ParamType.VECTOR4, init_value, options);\n  }\n  //\n  //\n  // PATH PARAMS\n  //\n  //\n  // static OPERATOR_PATH(\n  // \tinit_value: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n  // \toptions?: ParamOptionsByTypeMap[ParamType.OPERATOR_PATH]\n  // ) {\n  // \treturn new ParamTemplate<ParamType.OPERATOR_PATH>(ParamType.OPERATOR_PATH, init_value, options);\n  // }\n  static NODE_PATH(init_value, options) {\n    return new ParamTemplate(ParamType.NODE_PATH, init_value, options);\n  }\n  static PARAM_PATH(init_value, options) {\n    return new ParamTemplate(ParamType.PARAM_PATH, init_value, options);\n  }\n}\nexport class NodeParamsConfig {\n}\nexport class HierarchyParamConfig extends NodeParamsConfig {\n  constructor() {\n    super(...arguments);\n    /** @param group to apply this node to */\n    this.group = ParamConfig.STRING(\"\", {\n      objectMask: true\n    });\n  }\n}\nexport class HierarchyParamConfigAll extends NodeParamsConfig {\n  constructor() {\n    super(...arguments);\n    /** @param group to apply this node to */\n    this.group = ParamConfig.STRING(\"*\", {\n      objectMask: true\n    });\n  }\n}\n", "\"use strict\";\nexport var NodeEvent = /* @__PURE__ */ ((NodeEvent2) => {\n  NodeEvent2[\"CREATED\"] = \"node_created\";\n  NodeEvent2[\"DELETED\"] = \"node_deleted\";\n  NodeEvent2[\"NAME_UPDATED\"] = \"node_name_update\";\n  NodeEvent2[\"OVERRIDE_CLONABLE_STATE_UPDATE\"] = \"node_override_clonable_state_update\";\n  NodeEvent2[\"NAMED_OUTPUTS_UPDATED\"] = \"node_named_outputs_updated\";\n  NodeEvent2[\"NAMED_INPUTS_UPDATED\"] = \"node_named_inputs_updated\";\n  NodeEvent2[\"INPUTS_UPDATED\"] = \"node_inputs_updated\";\n  NodeEvent2[\"PARAMS_UPDATED\"] = \"node_params_updated\";\n  NodeEvent2[\"UI_DATA_POSITION_UPDATED\"] = \"node_ui_data_position_updated\";\n  NodeEvent2[\"UI_DATA_COMMENT_UPDATED\"] = \"node_ui_data_comment_updated\";\n  NodeEvent2[\"ERROR_UPDATED\"] = \"node_error_updated\";\n  NodeEvent2[\"FLAG_BYPASS_UPDATED\"] = \"bypass_flag_updated\";\n  NodeEvent2[\"FLAG_DISPLAY_UPDATED\"] = \"display_flag_updated\";\n  NodeEvent2[\"FLAG_OPTIMIZE_UPDATED\"] = \"optimize_flag_updated\";\n  NodeEvent2[\"SELECTION_UPDATED\"] = \"selection_updated\";\n  NodeEvent2[\"POLY_NODE_LOCK_STATE_UPDATED\"] = \"lock_state_updated\";\n  return NodeEvent2;\n})(NodeEvent || {});\n", "\"use strict\";\nimport {\n  Object3D,\n  LineSegments,\n  InstancedMesh,\n  Mesh,\n  Points,\n  Group,\n  Scene,\n  MeshStandardMaterial,\n  PointsMaterial,\n  LineBasicMaterial,\n  FrontSide\n} from \"three\";\nexport var ObjectType = /* @__PURE__ */ ((ObjectType2) => {\n  ObjectType2[\"AMBIENT_LIGHT\"] = \"AmbientLight\";\n  ObjectType2[\"AREA_LIGHT\"] = \"AreaLight\";\n  ObjectType2[\"CUBE_CAMERA\"] = \"CubeCamera\";\n  ObjectType2[\"DIRECTIONAL_LIGHT\"] = \"DirectionalLight\";\n  ObjectType2[\"GROUP\"] = \"Group\";\n  ObjectType2[\"HEMISPHERE_LIGHT\"] = \"HemisphereLight\";\n  ObjectType2[\"INSTANCED_MESH\"] = \"InstancedMesh\";\n  ObjectType2[\"LIGHT_PROBE\"] = \"LightProbe\";\n  ObjectType2[\"LINE_SEGMENTS\"] = \"LineSegments\";\n  ObjectType2[\"LOD\"] = \"LOD\";\n  ObjectType2[\"MESH\"] = \"Mesh\";\n  ObjectType2[\"OBJECT3D\"] = \"Object3D\";\n  ObjectType2[\"ORTHOGRAPHIC_CAMERA\"] = \"OrthographicCamera\";\n  ObjectType2[\"PERSPECTIVE_CAMERA\"] = \"PerspectiveCamera\";\n  ObjectType2[\"PHYSICAL_CAMERA\"] = \"PhysicalCamera\";\n  ObjectType2[\"PHYSICAL_SPOT_LIGHT\"] = \"PhysicalSpotLight\";\n  ObjectType2[\"POINT_LIGHT\"] = \"PointLight\";\n  ObjectType2[\"POINTS\"] = \"Points\";\n  ObjectType2[\"SCENE\"] = \"Scene\";\n  ObjectType2[\"SHAPED_AREA_LIGHT\"] = \"ShapedAreaLight\";\n  ObjectType2[\"SPOT_LIGHT\"] = \"SpotLight\";\n  ObjectType2[\"UNKNOWN\"] = \"Unknown\";\n  ObjectType2[\"QUAD\"] = \"Quad\";\n  return ObjectType2;\n})(ObjectType || {});\nexport const OBJECT_TYPES = [\n  \"Group\" /* GROUP */,\n  \"LineSegments\" /* LINE_SEGMENTS */,\n  \"Mesh\" /* MESH */,\n  \"Object3D\" /* OBJECT3D */,\n  \"Points\" /* POINTS */,\n  \"Scene\" /* SCENE */\n];\nconst UNKNOWN_OBJECT_TYPE = {\n  type: \"Unknown\" /* UNKNOWN */,\n  checkFunc: (o) => \"Unknown\" /* UNKNOWN */,\n  humanName: \"Unknown\",\n  ctor: null\n};\nfunction _initializeObjectTypeFromConstructor() {\n  const objectTypeCheckFunctions2 = [];\n  const dataByObjectType2 = /* @__PURE__ */ new Map();\n  const maps = { objectTypeCheckFunctions: objectTypeCheckFunctions2, dataByObjectType: dataByObjectType2 };\n  function _register(type, checkFunc, ctor, humanName) {\n    _registerObjectType_(maps, {\n      type,\n      checkFunc,\n      ctor,\n      humanName: humanName || type\n    });\n  }\n  _register(\n    \"Object3D\" /* OBJECT3D */,\n    (o) => o.isObject3D ? \"Object3D\" /* OBJECT3D */ : void 0,\n    Object3D,\n    \"Object3D\"\n  );\n  _register(\"Mesh\" /* MESH */, (o) => o.isMesh ? \"Mesh\" /* MESH */ : void 0, Mesh, \"Mesh\");\n  _register(\"Group\" /* GROUP */, (o) => o.isGroup ? \"Group\" /* GROUP */ : void 0, Group, \"Group\");\n  _register(\n    \"LineSegments\" /* LINE_SEGMENTS */,\n    (o) => o.isLineSegments ? \"LineSegments\" /* LINE_SEGMENTS */ : void 0,\n    LineSegments,\n    \"LineSegments\"\n  );\n  _register(\n    \"InstancedMesh\" /* INSTANCED_MESH */,\n    (o) => o.isInstancedMesh ? \"InstancedMesh\" /* INSTANCED_MESH */ : void 0,\n    InstancedMesh,\n    \"InstancedMesh\"\n  );\n  _register(\"Points\" /* POINTS */, (o) => o.isPoints ? \"Points\" /* POINTS */ : void 0, Points, \"Points\");\n  _register(\"Scene\" /* SCENE */, (o) => o.isScene ? \"Scene\" /* SCENE */ : void 0, Scene, \"Scene\");\n  return maps;\n}\nconst { objectTypeCheckFunctions, dataByObjectType } = _initializeObjectTypeFromConstructor();\nfunction _registerObjectType_(maps, data) {\n  maps.objectTypeCheckFunctions.unshift(data.checkFunc);\n  maps.dataByObjectType.set(data.type, data);\n}\nexport function registerObjectType(data) {\n  _registerObjectType_({ objectTypeCheckFunctions, dataByObjectType }, data);\n}\nexport function objectTypeFromObject(object) {\n  return dataFromObject(object).type;\n}\nexport function dataFromObject(object) {\n  for (const checkFunc of objectTypeCheckFunctions) {\n    const objectType = checkFunc(object);\n    if (objectType) {\n      return dataByObjectType.get(objectType);\n    }\n  }\n  return UNKNOWN_OBJECT_TYPE;\n}\nexport function objectConstructorByObjectType(objectType) {\n  const data = dataByObjectType.get(objectType);\n  if (data) {\n    return data.ctor;\n  } else {\n    console.warn(`no constructor found for type '${objectType}'`);\n    return dataByObjectType.get(\"Mesh\" /* MESH */);\n  }\n}\nexport const DEFAULT_MATERIALS = {\n  MeshStandard: new MeshStandardMaterial({\n    color: 16777215,\n    side: FrontSide,\n    metalness: 0.5,\n    roughness: 0.9\n  }),\n  // [ObjectType.MESH]: new MeshLambertMaterial({\n  // \tcolor: new Color(1, 1, 1),\n  // \tside: FrontSide,\n  // \tvertexColors: false,\n  // \ttransparent: true,\n  // \tdepthTest: true,\n  // }),\n  [\"Mesh\" /* MESH */]: new MeshStandardMaterial({\n    color: 16777215,\n    side: FrontSide,\n    metalness: 0,\n    roughness: 0.9\n  }),\n  [\"Points\" /* POINTS */]: new PointsMaterial({\n    color: 16777215,\n    size: 0.1,\n    //blending: AdditiveBlending\n    depthTest: true\n  }),\n  [\"LineSegments\" /* LINE_SEGMENTS */]: new LineBasicMaterial({\n    color: 16777215,\n    linewidth: 1\n  })\n};\nexport var AttribClass = /* @__PURE__ */ ((AttribClass2) => {\n  AttribClass2[\"POINT\"] = \"point\";\n  AttribClass2[\"VERTEX\"] = \"vertex\";\n  AttribClass2[\"PRIMITIVE\"] = \"primitive\";\n  AttribClass2[\"OBJECT\"] = \"object\";\n  AttribClass2[\"CORE_GROUP\"] = \"coreGroup\";\n  return AttribClass2;\n})(AttribClass || {});\nexport const ATTRIBUTE_CLASSES = [\n  \"point\" /* POINT */,\n  \"vertex\" /* VERTEX */,\n  \"primitive\" /* PRIMITIVE */,\n  \"object\" /* OBJECT */,\n  \"coreGroup\" /* CORE_GROUP */\n];\nexport const ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP = [\n  \"point\" /* POINT */,\n  \"vertex\" /* VERTEX */,\n  \"primitive\" /* PRIMITIVE */,\n  \"object\" /* OBJECT */\n];\nexport const AttribClassMenuEntries = ATTRIBUTE_CLASSES.map((name, value) => ({ name, value }));\nexport const AttribClassMenuEntriesWithoutCoreGroup = ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP.map((name, value) => ({\n  name,\n  value\n}));\nexport var AttribType = /* @__PURE__ */ ((AttribType2) => {\n  AttribType2[\"NUMERIC\"] = \"numeric\";\n  AttribType2[\"STRING\"] = \"string\";\n  return AttribType2;\n})(AttribType || {});\nexport const ATTRIBUTE_TYPES = [\"numeric\" /* NUMERIC */, \"string\" /* STRING */];\nexport const AttribTypeMenuEntries = ATTRIBUTE_TYPES.map((name, value) => ({ name, value }));\nexport var AttribSize = /* @__PURE__ */ ((AttribSize2) => {\n  AttribSize2[AttribSize2[\"FLOAT\"] = 1] = \"FLOAT\";\n  AttribSize2[AttribSize2[\"VECTOR2\"] = 2] = \"VECTOR2\";\n  AttribSize2[AttribSize2[\"VECTOR3\"] = 3] = \"VECTOR3\";\n  AttribSize2[AttribSize2[\"VECTOR4\"] = 4] = \"VECTOR4\";\n  return AttribSize2;\n})(AttribSize || {});\nexport const ATTRIBUTE_SIZES = [\n  1 /* FLOAT */,\n  2 /* VECTOR2 */,\n  3 /* VECTOR3 */,\n  4 /* VECTOR4 */\n];\nexport const ATTRIBUTE_SIZE_RANGE = [1 /* FLOAT */, 4 /* VECTOR4 */];\nexport var ComponentName = /* @__PURE__ */ ((ComponentName2) => {\n  ComponentName2[\"x\"] = \"x\";\n  ComponentName2[\"y\"] = \"y\";\n  ComponentName2[\"z\"] = \"z\";\n  ComponentName2[\"w\"] = \"w\";\n  ComponentName2[\"r\"] = \"r\";\n  ComponentName2[\"g\"] = \"g\";\n  ComponentName2[\"b\"] = \"b\";\n  return ComponentName2;\n})(ComponentName || {});\nexport const COMPONENT_INDICES = {\n  x: 0,\n  y: 1,\n  z: 2,\n  w: 3,\n  r: 0,\n  g: 1,\n  b: 2\n};\nexport const DOT = \".\";\n", "\"use strict\";\nimport {\n  Color,\n  Vector2,\n  Vector3,\n  Vector4,\n  BufferAttribute,\n  InstancedBufferAttribute\n} from \"three\";\nimport { arrayUniq } from \"../ArrayUtils\";\nimport { stringToAttribNames, stringMatchMask } from \"../String\";\nimport { CoreType } from \"../Type\";\nimport { AttribSize } from \"./Constant\";\nexport var Attribute = /* @__PURE__ */ ((Attribute2) => {\n  Attribute2[\"POINT_INDEX\"] = \"ptnum\";\n  Attribute2[\"VERTEX_INDEX\"] = \"vtxnum\";\n  Attribute2[\"PRIMITIVE_INDEX\"] = \"primnum\";\n  Attribute2[\"OBJECT_INDEX\"] = \"objnum\";\n  Attribute2[\"OBJECT_NAME\"] = \"objname\";\n  Attribute2[\"COLOR\"] = \"color\";\n  Attribute2[\"NORMAL\"] = \"normal\";\n  Attribute2[\"POSITION\"] = \"position\";\n  Attribute2[\"PSCALE\"] = \"pscale\";\n  Attribute2[\"UP\"] = \"up\";\n  Attribute2[\"UV\"] = \"uv\";\n  Attribute2[\"SCALE\"] = \"scale\";\n  Attribute2[\"TANGENT\"] = \"tangent\";\n  Attribute2[\"ID\"] = \"id\";\n  return Attribute2;\n})(Attribute || {});\nexport var ObjectAttribute = /* @__PURE__ */ ((ObjectAttribute2) => {\n  ObjectAttribute2[\"HOVERED\"] = \"hovered\";\n  return ObjectAttribute2;\n})(ObjectAttribute || {});\nconst ATTRIB_NAME_MAP = {\n  P: \"position\" /* POSITION */,\n  N: \"normal\" /* NORMAL */,\n  Cd: \"color\" /* COLOR */\n};\nconst _matchingAttribNames = [];\nconst _masks = [];\nexport class CoreAttribute {\n  static remapName(name) {\n    return ATTRIB_NAME_MAP[name] || name;\n  }\n  static arrayToIndexedArrays(array) {\n    const index_by_value = {};\n    let current_index = 0;\n    const indices = [];\n    const values = [];\n    let i = 0;\n    while (i < array.length) {\n      const value = array[i];\n      const index = index_by_value[value];\n      if (index != null) {\n        indices.push(index);\n      } else {\n        values.push(value);\n        indices.push(current_index);\n        index_by_value[value] = current_index;\n        current_index += 1;\n      }\n      i++;\n    }\n    return {\n      indices,\n      values\n    };\n  }\n  static defaultValue(size) {\n    switch (size) {\n      case 1:\n        return 0;\n      case 2:\n        return new Vector2(0, 0);\n      case 3:\n        return new Vector3(0, 0, 0);\n      default:\n        throw `size ${size} not yet implemented`;\n    }\n  }\n  static copy(src, dest, markAsNeedsUpdate = true) {\n    const srcArray = src == null ? void 0 : src.array;\n    const destArray = dest == null ? void 0 : dest.array;\n    if (srcArray && destArray) {\n      const min_length = Math.min(srcArray.length, destArray.length);\n      for (let i = 0; i < min_length; i++) {\n        destArray[i] = srcArray[i];\n      }\n      if (markAsNeedsUpdate) {\n        dest.needsUpdate = true;\n      }\n    }\n  }\n  static attribSizeFromValue(val) {\n    if (CoreType.isString(val) || CoreType.isNumber(val)) {\n      return AttribSize.FLOAT;\n    }\n    if (CoreType.isArray(val)) {\n      return val.length;\n    }\n    switch (val.constructor) {\n      case Color:\n        return AttribSize.VECTOR3;\n      case Vector2:\n        return AttribSize.VECTOR2;\n      case Vector3:\n        return AttribSize.VECTOR3;\n      case Vector4:\n        return AttribSize.VECTOR4;\n    }\n    return null;\n  }\n  static attribNamesMatchingMask(masksString, existingAttribNames) {\n    stringToAttribNames(masksString, _masks);\n    _matchingAttribNames.length = 0;\n    for (const mask of _masks) {\n      for (const attribName of existingAttribNames) {\n        if (stringMatchMask(attribName, mask)) {\n          _matchingAttribNames.push(attribName);\n        } else {\n          const remapped = CoreAttribute.remapName(mask);\n          if (attribName == remapped) {\n            _matchingAttribNames.push(attribName);\n          }\n        }\n      }\n    }\n    const uniqAttributeNames = [];\n    return arrayUniq(_matchingAttribNames, uniqAttributeNames);\n  }\n}\nexport function markAttributeAsNeedsUpdateForFrame(attribute, frame) {\n  if (attribute instanceof BufferAttribute || attribute instanceof InstancedBufferAttribute) {\n    attribute.version = frame;\n  } else {\n    if (attribute.data) {\n      attribute.data.version = frame;\n    }\n  }\n}\n", "\"use strict\";\nimport {\n  InstancedBufferAttribute,\n  InstancedBufferGeometry,\n  Matrix4,\n  Quaternion,\n  Vector2,\n  Vector3\n} from \"three\";\nimport { CoreType } from \"../Type\";\nimport { Attribute } from \"./Attribute\";\nconst DEFAULT = {\n  SCALE: new Vector3(1, 1, 1),\n  PSCALE: 1,\n  EYE: new Vector3(0, 0, 0),\n  UP: new Vector3(0, 1, 0)\n};\nconst DEFAULT_COLOR = new Vector3(1, 1, 1);\nconst DEFAULT_UV = new Vector2(0, 0);\nconst _position = new Vector3();\nconst _instancePts = [];\nexport var InstanceAttrib = /* @__PURE__ */ ((InstanceAttrib2) => {\n  InstanceAttrib2[\"POSITION\"] = \"instancePosition\";\n  InstanceAttrib2[\"SCALE\"] = \"instanceScale\";\n  InstanceAttrib2[\"QUATERNION\"] = \"instanceQuaternion\";\n  InstanceAttrib2[\"COLOR\"] = \"instanceColor\";\n  InstanceAttrib2[\"UV\"] = \"instanceUv\";\n  return InstanceAttrib2;\n})(InstanceAttrib || {});\nconst ATTRIB_NAME_MAP = {\n  P: \"instancePosition\" /* POSITION */,\n  N: \"instanceQuaternion\" /* QUATERNION */,\n  up: \"instanceQuaternion\" /* QUATERNION */,\n  Cd: \"instanceColor\" /* COLOR */,\n  [Attribute.COLOR]: \"instanceColor\" /* COLOR */,\n  [Attribute.NORMAL]: \"instanceQuaternion\" /* QUATERNION */,\n  [Attribute.POSITION]: \"instancePosition\" /* POSITION */,\n  [Attribute.PSCALE]: \"instanceScale\" /* SCALE */,\n  [Attribute.SCALE]: \"instanceScale\" /* SCALE */\n};\nconst _CoreInstancer = class {\n  constructor(_coreGroup) {\n    this._coreGroup = _coreGroup;\n    this._is_pscale_present = false;\n    this._is_scale_present = false;\n    this._is_normal_present = false;\n    this._is_up_present = false;\n    this._do_rotate_matrices = false;\n    // private _matrices: PolyDictionary<Matrix4> = {};\n    this._matrixT = new Matrix4();\n    this._matrixR = new Matrix4();\n    this._matrixS = new Matrix4();\n    this._pointScale = new Vector3();\n    this._pointNormal = new Vector3();\n    this._pointUp = new Vector3();\n    if (_coreGroup) {\n      this.setCoreGroup(_coreGroup);\n    }\n  }\n  static remapName(name) {\n    return ATTRIB_NAME_MAP[name] || name;\n  }\n  setCoreGroup(coreGroup) {\n    this._coreGroup = coreGroup;\n    this._is_pscale_present = this._coreGroup.hasPointAttrib(Attribute.PSCALE);\n    this._is_scale_present = this._coreGroup.hasPointAttrib(Attribute.SCALE);\n    this._is_normal_present = this._coreGroup.hasPointAttrib(Attribute.NORMAL);\n    this._is_up_present = this._coreGroup.hasPointAttrib(Attribute.UP);\n    this._do_rotate_matrices = this._is_normal_present;\n  }\n  // private _point_m = new Matrix4()\n  matrixFromPoint(point, targetMatrix) {\n    targetMatrix.identity();\n    point.position(_position);\n    if (this._is_scale_present) {\n      point.attribValue(Attribute.SCALE, this._pointScale);\n    } else {\n      this._pointScale.copy(DEFAULT.SCALE);\n    }\n    const pscale = this._is_pscale_present ? point.attribValue(Attribute.PSCALE) : DEFAULT.PSCALE;\n    this._pointScale.multiplyScalar(pscale);\n    const scale_matrix = this._matrixS;\n    scale_matrix.makeScale(this._pointScale.x, this._pointScale.y, this._pointScale.z);\n    const translate_matrix = this._matrixT;\n    translate_matrix.makeTranslation(_position.x, _position.y, _position.z);\n    targetMatrix.multiply(translate_matrix);\n    if (this._do_rotate_matrices) {\n      const rotate_matrix = this._matrixR;\n      const eye = DEFAULT.EYE;\n      point.attribValue(Attribute.NORMAL, this._pointNormal);\n      this._pointNormal.multiplyScalar(-1);\n      if (this._is_up_present) {\n        point.attribValue(Attribute.UP, this._pointUp);\n      } else {\n        this._pointUp.copy(DEFAULT.UP);\n      }\n      this._pointUp.normalize();\n      rotate_matrix.lookAt(eye, this._pointNormal, this._pointUp);\n      targetMatrix.multiply(rotate_matrix);\n    }\n    targetMatrix.multiply(scale_matrix);\n  }\n  static updateTransformInstanceAttributes(instancePts, templateCoreGroup, geometry) {\n    const instancesCount = instancePts.length;\n    const positions = new Float32Array(instancesCount * 3);\n    const scales = new Float32Array(instancesCount * 3);\n    const quaternions = new Float32Array(instancesCount * 4);\n    const instancer = new _CoreInstancer(templateCoreGroup);\n    let i = 0;\n    for (const instancePt of instancePts) {\n      instancer.matrixFromPoint(instancePt, this._tmpMatrix);\n      const index3 = i * 3;\n      const index4 = i * 4;\n      this._tmpMatrix.decompose(this._position, this._quaternion, this._scale);\n      this._position.toArray(positions, index3);\n      this._quaternion.toArray(quaternions, index4);\n      this._scale.toArray(scales, index3);\n      i++;\n    }\n    const instancePosition = new InstancedBufferAttribute(positions, 3);\n    const instanceQuaternion = new InstancedBufferAttribute(quaternions, 4);\n    const instanceScale = new InstancedBufferAttribute(scales, 3);\n    geometry.setAttribute(\"instancePosition\" /* POSITION */, instancePosition);\n    geometry.setAttribute(\"instanceQuaternion\" /* QUATERNION */, instanceQuaternion);\n    geometry.setAttribute(\"instanceScale\" /* SCALE */, instanceScale);\n  }\n  static updateColorInstanceAttribute(instancePts, templateCoreGroup, geometry) {\n    const instancesCount = instancePts.length;\n    const colors = new Float32Array(instancesCount * 3);\n    const hasColor = templateCoreGroup.hasPointAttrib(Attribute.COLOR);\n    let i = 0;\n    for (const instancePt of instancePts) {\n      const color = hasColor ? instancePt.attribValue(Attribute.COLOR, this._point_color) : DEFAULT_COLOR;\n      color.toArray(colors, i * 3);\n      i++;\n    }\n    geometry.setAttribute(\"instanceColor\" /* COLOR */, new InstancedBufferAttribute(colors, 3));\n  }\n  static createInstanceBufferGeometry(geometryToInstance, templateCoreGroup, attributesToCopy) {\n    templateCoreGroup.points(_instancePts);\n    const geometry = new InstancedBufferGeometry();\n    geometry.copy(geometryToInstance);\n    geometry.instanceCount = Infinity;\n    const instancesCount = _instancePts.length;\n    const hasUV = templateCoreGroup.hasPointAttrib(Attribute.UV);\n    if (hasUV) {\n      const uvs = new Float32Array(instancesCount * 2);\n      let i = 0;\n      for (const instancePt of _instancePts) {\n        const index2 = i * 2;\n        const uv = hasUV ? instancePt.attribValue(Attribute.UV, this._point_uv) : DEFAULT_UV;\n        uv.toArray(uvs, index2);\n        i++;\n      }\n      geometry.setAttribute(\"instanceUv\" /* UV */, new InstancedBufferAttribute(uvs, 2));\n    }\n    this.updateTransformInstanceAttributes(_instancePts, templateCoreGroup, geometry);\n    this.updateColorInstanceAttribute(_instancePts, templateCoreGroup, geometry);\n    const attribNames = templateCoreGroup.pointAttribNamesMatchingMask(attributesToCopy);\n    for (const attribName of attribNames) {\n      const attribSize = templateCoreGroup.pointAttribSize(attribName);\n      const values = new Float32Array(instancesCount * attribSize);\n      let i = 0;\n      for (const pt of _instancePts) {\n        const value = pt.attribValue(attribName);\n        if (CoreType.isNumber(value)) {\n          values[i] = value;\n        } else {\n          value.toArray(values, i * attribSize);\n        }\n        i++;\n      }\n      geometry.setAttribute(attribName, new InstancedBufferAttribute(values, attribSize));\n    }\n    return geometry;\n  }\n};\nexport let CoreInstancer = _CoreInstancer;\nCoreInstancer.transformAttributeNames = [\n  \"instancePosition\" /* POSITION */,\n  \"instanceQuaternion\" /* QUATERNION */,\n  \"instanceScale\" /* SCALE */\n];\nCoreInstancer._point_color = new Vector3();\nCoreInstancer._point_uv = new Vector2();\nCoreInstancer._position = new Vector3(0, 0, 0);\nCoreInstancer._quaternion = new Quaternion();\nCoreInstancer._scale = new Vector3(1, 1, 1);\nCoreInstancer._tmpMatrix = new Matrix4();\n", "\"use strict\";\nexport class TypeAssert {\n  static unreachable(_) {\n    throw new Error(\"Didn't expect to get here\");\n  }\n}\n", "\"use strict\";\nimport { AttribClass } from \"./Constant\";\nimport { TypeAssert } from \"../../engine/poly/Assert\";\nconst _relatedPointIds = [];\nconst _relatedVertexIds = [];\nconst _relatedPrimitiveIds = [];\nexport class CoreEntity {\n  constructor(content, index) {\n    this._index = 0;\n    if (index != null) {\n      this._index = index;\n    }\n  }\n  index() {\n    return this._index;\n  }\n  setIndex(index) {\n    this._index = index;\n    return this;\n  }\n}\nexport class CoreEntityWithObject extends CoreEntity {\n  constructor(object, index) {\n    super(object, index);\n    this._object = object;\n  }\n  object() {\n    return this._object;\n  }\n  static relatedPrimitiveIds(object, index, target, traversedRelatedEntityData) {\n    target.length = 0;\n  }\n  static relatedVertexIds(object, index, target, traversedRelatedEntityData) {\n    target.length = 0;\n  }\n  static relatedPointIds(object, index, target, traversedRelatedEntityData) {\n    target.length = 0;\n  }\n  relatedPrimitiveIds(target, traversedRelatedEntityData) {\n    this.constructor.relatedPrimitiveIds(\n      this._object,\n      this._index,\n      target,\n      traversedRelatedEntityData\n    );\n  }\n  relatedVertexIds(target, traversedRelatedEntityData) {\n    this.constructor.relatedVertexIds(\n      this._object,\n      this._index,\n      target,\n      traversedRelatedEntityData\n    );\n  }\n  relatedPointIds(target, traversedRelatedEntityData) {\n    this.constructor.relatedPointIds(\n      this._object,\n      this._index,\n      target,\n      traversedRelatedEntityData\n    );\n  }\n  static relatedPointClass(object) {\n    return this.constructor;\n  }\n  static relatedVertexClass(object) {\n    return this.constructor;\n  }\n  static relatedPrimitiveClass(object) {\n    return this.constructor;\n  }\n  static relatedObjectClass(object) {\n    return this.constructor;\n  }\n  static relatedEntityClass(object, entityClass) {\n    switch (entityClass) {\n      case AttribClass.POINT: {\n        return this.relatedPointClass(object);\n      }\n      case AttribClass.VERTEX: {\n        return this.relatedVertexClass(object);\n      }\n      case AttribClass.PRIMITIVE: {\n        return this.relatedPrimitiveClass(object);\n      }\n      case AttribClass.OBJECT: {\n        return this.relatedObjectClass(object);\n      }\n    }\n    TypeAssert.unreachable(entityClass);\n  }\n  //\n  static relatedPoints(object, entityIndex, target, traversedRelatedEntityData) {\n    this.relatedPointIds(object, entityIndex, _relatedPointIds, traversedRelatedEntityData);\n    target.length = _relatedPointIds.length;\n    let i = 0;\n    const entityClass = this.relatedPointClass(object);\n    for (const id of _relatedPointIds) {\n      target[i] = new entityClass(object, id);\n      i++;\n    }\n  }\n  static relatedVertices(object, entityIndex, target, traversedRelatedEntityData) {\n    this.relatedVertexIds(object, entityIndex, _relatedVertexIds, traversedRelatedEntityData);\n    target.length = _relatedVertexIds.length;\n    let i = 0;\n    const entityClass = this.relatedVertexClass(object);\n    for (const id of _relatedVertexIds) {\n      target[i] = new entityClass(object, id);\n      i++;\n    }\n  }\n  static relatedPrimitives(object, entityIndex, target, traversedRelatedEntityData) {\n    this.relatedPrimitiveIds(object, entityIndex, _relatedPrimitiveIds, traversedRelatedEntityData);\n    target.length = _relatedPrimitiveIds.length;\n    let i = 0;\n    const entityClass = this.relatedPrimitiveClass(object);\n    for (const id of _relatedPrimitiveIds) {\n      target[i] = new entityClass(object, id);\n      i++;\n    }\n  }\n  static relatedObjects(object, entityIndex, target, traversedRelatedEntityData) {\n    target.length = 1;\n    const entityClass = this.relatedObjectClass(object);\n    target[0] = new entityClass(object);\n  }\n  relatedPoints(target, traversedRelatedEntityData) {\n    this.constructor.relatedPoints(\n      this._object,\n      this._index,\n      target,\n      traversedRelatedEntityData\n    );\n  }\n  relatedVertices(target, traversedRelatedEntityData) {\n    this.constructor.relatedVertices(\n      this._object,\n      this._index,\n      target,\n      traversedRelatedEntityData\n    );\n  }\n  relatedPrimitives(target, traversedRelatedEntityData) {\n    this.constructor.relatedPrimitives(\n      this._object,\n      this._index,\n      target,\n      traversedRelatedEntityData\n    );\n  }\n  relatedObjects(target, traversedRelatedEntityData) {\n    this.constructor.relatedObjects(\n      this._object,\n      this._index,\n      target,\n      traversedRelatedEntityData\n    );\n  }\n}\n", "\"use strict\";\nexport function updateSelectionState(selectionStates, entity, state) {\n  const currentState = selectionStates.get(entity);\n  if (!currentState) {\n    selectionStates.set(entity, state);\n  }\n}\nexport function selectedIndicesFromSelectionStates(selectionStates, selectedIndices, invert) {\n  selectionStates.forEach((state, entity) => {\n    const selected = !invert && state || invert && !state;\n    if (selected) {\n      selectedIndices.add(entity.index());\n    }\n  });\n}\n", "\"use strict\";\nimport {\n  selectedIndicesFromSelectionStates\n} from \"../../engine/nodes/sop/utils/group/GroupCommon\";\nimport { TypeAssert } from \"../../engine/poly/Assert\";\nimport { arrayToSet } from \"../ArrayUtils\";\nimport { setToArray, setDifference, setIntersection, setUnion } from \"../SetUtils\";\nconst _currentIndicesSet = /* @__PURE__ */ new Set();\nconst _newIndicesSet = /* @__PURE__ */ new Set();\nexport var GroupOperation = /* @__PURE__ */ ((GroupOperation2) => {\n  GroupOperation2[\"SET\"] = \"replace existing\";\n  GroupOperation2[\"UNION\"] = \"add to existing\";\n  GroupOperation2[\"SUBTRACT\"] = \"subtract from existing\";\n  GroupOperation2[\"INTERSECT\"] = \"intersect with existing\";\n  return GroupOperation2;\n})(GroupOperation || {});\nexport const GROUP_OPERATIONS = [\n  \"replace existing\" /* SET */,\n  \"add to existing\" /* UNION */,\n  \"subtract from existing\" /* SUBTRACT */,\n  \"intersect with existing\" /* INTERSECT */\n];\nexport var EntityGroupType = /* @__PURE__ */ ((EntityGroupType2) => {\n  EntityGroupType2[\"POINT\"] = \"point\";\n  EntityGroupType2[\"OBJECT\"] = \"object\";\n  EntityGroupType2[\"EDGE\"] = \"edge\";\n  EntityGroupType2[\"FACE\"] = \"face\";\n  return EntityGroupType2;\n})(EntityGroupType || {});\nconst USER_DATA_KEY_GROUPS = \"groups\";\nexport class EntityGroupCollection {\n  // private _groupsByNameByType: Map<GroupType, Map<string, EntityGroup>> = new Map();\n  constructor(_object) {\n    this._object = _object;\n    this.selectedIndices = /* @__PURE__ */ new Set();\n  }\n  attributesDictionary() {\n    return EntityGroupCollection.attributesDictionary(this._object);\n  }\n  static attributesDictionary(object) {\n    return object.userData[USER_DATA_KEY_GROUPS] || this._createAttributesDictionaryIfNone(object);\n  }\n  static _createAttributesDictionaryIfNone(object) {\n    if (!object.userData[USER_DATA_KEY_GROUPS]) {\n      return object.userData[USER_DATA_KEY_GROUPS] = {};\n    }\n  }\n  findOrCreateGroup(type, groupName) {\n    const dict = this.attributesDictionary();\n    let groupsByName = dict[type];\n    if (!groupsByName) {\n      groupsByName = {};\n      dict[type] = groupsByName;\n    }\n    let group = groupsByName[groupName];\n    if (!group) {\n      group = [];\n      groupsByName[groupName] = group;\n    }\n    return group;\n  }\n  deleteGroup(type, groupName) {\n    const dict = this.attributesDictionary();\n    const groupsByName = dict[type];\n    if (groupsByName) {\n      delete groupsByName[groupName];\n      if (Object.keys(groupsByName).length == 0) {\n        delete dict[type];\n      }\n    }\n  }\n  static data(object) {\n    const dict = this.attributesDictionary(object);\n    const types = Object.keys(dict);\n    const data = {};\n    for (const type of types) {\n      const dataForType = [];\n      data[type] = dataForType;\n      const groupsForType = dict[type];\n      const groupNames = Object.keys(groupsForType);\n      for (const groupName of groupNames) {\n        const indices = groupsForType[groupName];\n        const groupData = {\n          name: groupName,\n          entitiesCount: indices.length\n        };\n        dataForType.push(groupData);\n      }\n    }\n    return data;\n  }\n  indicesSet(type, groupName, target) {\n    const dict = this.attributesDictionary();\n    const groupsByName = dict[type];\n    target.clear();\n    if (groupsByName) {\n      const indices = groupsByName[groupName];\n      if (indices) {\n        arrayToSet(indices, target);\n      }\n    }\n  }\n  updateGroup(options, selectionStates) {\n    const { type, groupName, operation, invert } = options;\n    const currentIndices = this.findOrCreateGroup(type, groupName);\n    const _updateGroup = (newIndicesSet) => {\n      const dict = this.attributesDictionary();\n      let groupsByName = dict[type];\n      if (!groupsByName) {\n        groupsByName = {};\n        dict[type] = groupsByName;\n      }\n      const newIndices = [];\n      groupsByName[groupName] = setToArray(newIndicesSet, newIndices);\n    };\n    this.selectedIndices.clear();\n    selectedIndicesFromSelectionStates(selectionStates, this.selectedIndices, invert);\n    switch (operation) {\n      case \"replace existing\" /* SET */: {\n        _updateGroup(this.selectedIndices);\n        return;\n      }\n      case \"add to existing\" /* UNION */: {\n        arrayToSet(currentIndices, _currentIndicesSet);\n        setUnion(_currentIndicesSet, this.selectedIndices, _newIndicesSet);\n        _updateGroup(_newIndicesSet);\n        return;\n      }\n      case \"subtract from existing\" /* SUBTRACT */: {\n        arrayToSet(currentIndices, _currentIndicesSet);\n        setDifference(_currentIndicesSet, this.selectedIndices, _newIndicesSet);\n        _updateGroup(_newIndicesSet);\n        return;\n      }\n      case \"intersect with existing\" /* INTERSECT */: {\n        arrayToSet(currentIndices, _currentIndicesSet);\n        setIntersection(_currentIndicesSet, this.selectedIndices, _newIndicesSet);\n        _updateGroup(_newIndicesSet);\n        return;\n      }\n    }\n    TypeAssert.unreachable(operation);\n  }\n}\n", "\"use strict\";\nimport { Color, Vector2, Vector3, Vector4 } from \"three\";\nimport { isNumber, isArray } from \"../../../Type\";\nexport function uniqRelatedEntities(entities, callback, target) {\n  target.length = 0;\n  const entityByIndex = /* @__PURE__ */ new Map();\n  for (const entity of entities) {\n    const relatedEntities = callback(entity);\n    for (const relatedEntity of relatedEntities) {\n      let newEntity = entityByIndex.get(relatedEntity.index());\n      if (!newEntity) {\n        newEntity = relatedEntity;\n        entityByIndex.set(newEntity.index(), newEntity);\n      }\n    }\n  }\n  entityByIndex.forEach((entity) => {\n    target.push(entity);\n  });\n}\nconst _relatedEntityIds = [];\nconst _entityIndices = /* @__PURE__ */ new Set();\nexport function uniqRelatedEntityIds(entityIds, callback, target) {\n  target.length = 0;\n  _entityIndices.clear();\n  for (const entityId of entityIds) {\n    callback(entityId, _relatedEntityIds);\n    for (const _relatedEntityId of _relatedEntityIds) {\n      _entityIndices.add(_relatedEntityId);\n    }\n  }\n  _entityIndices.forEach((entityId) => {\n    target.push(entityId);\n  });\n}\nexport function attribValueNonPrimitive(src) {\n  return src instanceof Color || src instanceof Vector2 || src instanceof Vector3 || src instanceof Vector4;\n}\nexport function copyAttribValue(src, target) {\n  if (target instanceof Color && src instanceof Color) {\n    target.copy(src);\n  }\n  if (target instanceof Vector2 && src instanceof Vector2) {\n    target.copy(src);\n  }\n  if (target instanceof Vector3 && src instanceof Vector3) {\n    target.copy(src);\n  }\n  if (target instanceof Vector4 && src instanceof Vector4) {\n    target.copy(src);\n  }\n}\nexport function cloneAttribValue(src) {\n  if (src instanceof Color) {\n    return src.clone();\n  }\n  if (src instanceof Vector2) {\n    return src.clone();\n  }\n  if (src instanceof Vector3) {\n    return src.clone();\n  }\n  if (src instanceof Vector4) {\n    return src.clone();\n  }\n}\nexport function attributeNumericValues(object, entitiesCountFunction, attribSize = 1, defaultValue = 0, target) {\n  target.values.length = 0;\n  const values = target.values;\n  const entitiesCount = entitiesCountFunction(object);\n  if (isNumber(defaultValue)) {\n    for (let i = 0; i < entitiesCount; i++) {\n      for (let j = 0; j < attribSize; j++) {\n        values.push(defaultValue);\n      }\n    }\n    target.attributeAdded = true;\n  } else {\n    if (attribSize > 1) {\n      if (isArray(defaultValue)) {\n        for (let i = 0; i < entitiesCount; i++) {\n          for (let j = 0; j < attribSize; j++) {\n            values.push(defaultValue[j]);\n          }\n        }\n        target.attributeAdded = true;\n      } else {\n        const vec2 = defaultValue;\n        if (attribSize == 2 && vec2.x != null && vec2.y != null) {\n          for (let i = 0; i < entitiesCount; i++) {\n            values.push(vec2.x);\n            values.push(vec2.y);\n          }\n          target.attributeAdded = true;\n        }\n        const vec3 = defaultValue;\n        if (attribSize == 3 && vec3.x != null && vec3.y != null && vec3.z != null) {\n          for (let i = 0; i < entitiesCount; i++) {\n            values.push(vec3.x);\n            values.push(vec3.y);\n            values.push(vec3.z);\n          }\n          target.attributeAdded = true;\n        }\n        const col = defaultValue;\n        if (attribSize == 3 && col.r != null && col.g != null && col.b != null) {\n          for (let i = 0; i < entitiesCount; i++) {\n            values.push(col.r);\n            values.push(col.g);\n            values.push(col.b);\n          }\n          target.attributeAdded = true;\n        }\n        const vec4 = defaultValue;\n        if (attribSize == 4 && vec4.x != null && vec4.y != null && vec4.z != null && vec4.w != null) {\n          for (let i = 0; i < entitiesCount; i++) {\n            values.push(vec4.x);\n            values.push(vec4.y);\n            values.push(vec4.z);\n            values.push(vec4.w);\n          }\n          target.attributeAdded = true;\n        }\n      }\n    }\n  }\n}\n", "\"use strict\";\nexport const refByObjectUuidByAttribName = /* @__PURE__ */ new WeakMap();\nexport function _getObjectAttributeRef_(object3D, attribName) {\n  var _a;\n  return (_a = refByObjectUuidByAttribName.get(object3D)) == null ? void 0 : _a.get(attribName);\n}\nexport function _dummyReadAttributeRefVal(value) {\n}\n", "\"use strict\";\nimport { attribValueNonPrimitive, copyAttribValue } from \"../geometry/entities/utils/Common\";\nimport { _getObjectAttributeRef_ } from \"./ObjectAttributeReactivity\";\nfunction _copyObjectAttribToRef(attribValue, targetRef) {\n  if (attribValueNonPrimitive(attribValue) && attribValueNonPrimitive(targetRef.value)) {\n    copyAttribValue(attribValue, targetRef.value);\n  } else {\n    targetRef.value = attribValue;\n  }\n}\nexport function _updateObjectAttribRef(object3D, attribName, newValue) {\n  const _ref = _getObjectAttributeRef_(object3D, attribName);\n  if (!_ref) {\n    return;\n  }\n  _copyObjectAttribToRef(_ref.current.value, _ref.previous);\n  _copyObjectAttribToRef(newValue, _ref.current);\n}\n", "\"use strict\";\nexport class BaseConnectionPoint {\n  constructor(_name, _type, _init_value) {\n    this._name = _name;\n    this._type = _type;\n    this._init_value = _init_value;\n    // protected _init_value: any;\n    this._inNodeDefinition = false;\n  }\n  get init_value() {\n    return this._init_value;\n  }\n  name() {\n    return this._name;\n  }\n  type() {\n    return this._type;\n  }\n  are_types_matched(src_type, dest_type) {\n    return true;\n  }\n  inNodeDefinition() {\n    return this._inNodeDefinition;\n  }\n  // get param_type(): IConnectionPointTypeToParamTypeMap[T] {\n  // \treturn ConnectionPointTypeToParamTypeMap[this._type];\n  // }\n  // get init_value() {\n  // \treturn this._init_value;\n  // }\n  toJSON() {\n    return this._json = this._json || this._createJSON();\n  }\n  _createJSON() {\n    return {\n      name: this._name,\n      type: this._type\n      // isArray: false,\n    };\n  }\n}\n", "\"use strict\";\nimport { ParamType } from \"../../../../poly/ParamType\";\nimport { BaseConnectionPoint } from \"./_Base\";\nexport var JsConnectionPointType = /* @__PURE__ */ ((JsConnectionPointType2) => {\n  JsConnectionPointType2[\"ANIMATION_MIXER\"] = \"AnimationMixer\";\n  JsConnectionPointType2[\"ANIMATION_ACTION\"] = \"AnimationAction\";\n  JsConnectionPointType2[\"BOOLEAN\"] = \"boolean\";\n  JsConnectionPointType2[\"BOOLEAN_ARRAY\"] = \"boolean[]\";\n  JsConnectionPointType2[\"BOX3\"] = \"Box3\";\n  JsConnectionPointType2[\"CAMERA\"] = \"Camera\";\n  JsConnectionPointType2[\"CATMULL_ROM_CURVE3\"] = \"CatmullRomCurve3\";\n  JsConnectionPointType2[\"COLOR\"] = \"Color\";\n  JsConnectionPointType2[\"COLOR_ARRAY\"] = \"Color[]\";\n  JsConnectionPointType2[\"EULER\"] = \"Euler\";\n  JsConnectionPointType2[\"EULER_ARRAY\"] = \"Euler[]\";\n  JsConnectionPointType2[\"FLOAT\"] = \"float\";\n  JsConnectionPointType2[\"FLOAT_ARRAY\"] = \"float[]\";\n  JsConnectionPointType2[\"INT\"] = \"int\";\n  JsConnectionPointType2[\"INT_ARRAY\"] = \"int[]\";\n  JsConnectionPointType2[\"INTERSECTION\"] = \"Intersection\";\n  JsConnectionPointType2[\"INTERSECTION_ARRAY\"] = \"Intersection[]\";\n  JsConnectionPointType2[\"MATERIAL\"] = \"Material\";\n  JsConnectionPointType2[\"MATRIX4\"] = \"Matrix4\";\n  JsConnectionPointType2[\"MATRIX4_ARRAY\"] = \"Matrix4[]\";\n  JsConnectionPointType2[\"NODE\"] = \"Node\";\n  JsConnectionPointType2[\"OBJECT_3D\"] = \"Object3D\";\n  JsConnectionPointType2[\"OBJECT_3D_ARRAY\"] = \"Object3D[]\";\n  JsConnectionPointType2[\"PARAM\"] = \"Param\";\n  JsConnectionPointType2[\"PLANE\"] = \"Plane\";\n  JsConnectionPointType2[\"QUATERNION\"] = \"Quaternion\";\n  JsConnectionPointType2[\"QUATERNION_ARRAY\"] = \"Quaternion[]\";\n  JsConnectionPointType2[\"RAY\"] = \"Ray\";\n  JsConnectionPointType2[\"SPHERE\"] = \"Sphere\";\n  JsConnectionPointType2[\"STRING\"] = \"string\";\n  JsConnectionPointType2[\"STRING_ARRAY\"] = \"string[]\";\n  JsConnectionPointType2[\"TEXTURE\"] = \"Texture\";\n  JsConnectionPointType2[\"TEXTURE_ARRAY\"] = \"Texture[]\";\n  JsConnectionPointType2[\"TRIGGER\"] = \"trigger\";\n  JsConnectionPointType2[\"VECTOR2\"] = \"Vector2\";\n  JsConnectionPointType2[\"VECTOR2_ARRAY\"] = \"Vector2[]\";\n  JsConnectionPointType2[\"VECTOR3\"] = \"Vector3\";\n  JsConnectionPointType2[\"VECTOR3_ARRAY\"] = \"Vector3[]\";\n  JsConnectionPointType2[\"VECTOR4\"] = \"Vector4\";\n  JsConnectionPointType2[\"VECTOR4_ARRAY\"] = \"Vector4[]\";\n  return JsConnectionPointType2;\n})(JsConnectionPointType || {});\nconst NUMBER_JS_CONNECTION_TYPES = /* @__PURE__ */ new Set([\"float\" /* FLOAT */, \"int\" /* INT */]);\nconst PRIMITIVE_JS_CONNECTION_TYPES = /* @__PURE__ */ new Set([\n  \"boolean\" /* BOOLEAN */,\n  \"float\" /* FLOAT */,\n  \"int\" /* INT */,\n  \"string\" /* STRING */\n]);\nconst VECTOR_JS_CONNECTION_TYPES = /* @__PURE__ */ new Set([\n  \"Vector2\" /* VECTOR2 */,\n  \"Vector3\" /* VECTOR3 */,\n  \"Vector4\" /* VECTOR4 */\n]);\nexport const JS_CONNECTION_TYPES_FOR_CONSTANT = [\n  \"boolean\" /* BOOLEAN */,\n  \"Color\" /* COLOR */,\n  \"float\" /* FLOAT */,\n  \"int\" /* INT */,\n  \"string\" /* STRING */,\n  \"Vector2\" /* VECTOR2 */,\n  \"Vector3\" /* VECTOR3 */,\n  \"Vector4\" /* VECTOR4 */\n];\nexport function isJsConnectionPointNumber(type) {\n  return NUMBER_JS_CONNECTION_TYPES.has(type);\n}\nexport function isJsConnectionPointPrimitive(type) {\n  return PRIMITIVE_JS_CONNECTION_TYPES.has(type);\n}\nexport function isJsConnectionPointVector(type) {\n  return VECTOR_JS_CONNECTION_TYPES.has(type);\n}\nexport function isJsConnectionPointArray(type) {\n  return ARRAY_JS_CONNECTION_TYPES_SET.has(type);\n}\nexport const JS_CONNECTION_POINT_TYPES = [\n  \"AnimationMixer\" /* ANIMATION_MIXER */,\n  \"AnimationAction\" /* ANIMATION_ACTION */,\n  \"Box3\" /* BOX3 */,\n  \"boolean\" /* BOOLEAN */,\n  \"boolean[]\" /* BOOLEAN_ARRAY */,\n  \"Camera\" /* CAMERA */,\n  \"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */,\n  \"Color\" /* COLOR */,\n  \"Color[]\" /* COLOR_ARRAY */,\n  \"Euler\" /* EULER */,\n  \"Euler[]\" /* EULER_ARRAY */,\n  \"float\" /* FLOAT */,\n  \"float[]\" /* FLOAT_ARRAY */,\n  \"int\" /* INT */,\n  \"int[]\" /* INT_ARRAY */,\n  \"Intersection\" /* INTERSECTION */,\n  \"Intersection[]\" /* INTERSECTION_ARRAY */,\n  \"Material\" /* MATERIAL */,\n  \"Matrix4\" /* MATRIX4 */,\n  \"Matrix4[]\" /* MATRIX4_ARRAY */,\n  \"Node\" /* NODE */,\n  \"Object3D\" /* OBJECT_3D */,\n  \"Object3D[]\" /* OBJECT_3D_ARRAY */,\n  \"Param\" /* PARAM */,\n  \"Plane\" /* PLANE */,\n  \"Quaternion\" /* QUATERNION */,\n  \"Quaternion[]\" /* QUATERNION_ARRAY */,\n  \"Ray\" /* RAY */,\n  \"Sphere\" /* SPHERE */,\n  \"string\" /* STRING */,\n  \"string[]\" /* STRING_ARRAY */,\n  \"Texture\" /* TEXTURE */,\n  \"Texture[]\" /* TEXTURE_ARRAY */,\n  \"trigger\" /* TRIGGER */,\n  \"Vector2\" /* VECTOR2 */,\n  \"Vector2[]\" /* VECTOR2_ARRAY */,\n  \"Vector3\" /* VECTOR3 */,\n  \"Vector3[]\" /* VECTOR3_ARRAY */,\n  \"Vector4\" /* VECTOR4 */,\n  \"Vector4[]\" /* VECTOR4_ARRAY */\n  // JsConnectionPointType.MAT3,\n  // JsConnectionPointType.MAT4,\n];\nexport const JsConnectionPointTypeToArrayTypeMap = {\n  [\"AnimationMixer\" /* ANIMATION_MIXER */]: \"AnimationMixer\" /* ANIMATION_MIXER */,\n  [\"AnimationAction\" /* ANIMATION_ACTION */]: \"AnimationAction\" /* ANIMATION_ACTION */,\n  [\"boolean\" /* BOOLEAN */]: \"boolean[]\" /* BOOLEAN_ARRAY */,\n  [\"boolean[]\" /* BOOLEAN_ARRAY */]: \"boolean[]\" /* BOOLEAN_ARRAY */,\n  [\"Box3\" /* BOX3 */]: \"Box3\" /* BOX3 */,\n  [\"Camera\" /* CAMERA */]: \"Camera\" /* CAMERA */,\n  [\"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */]: \"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */,\n  [\"Color\" /* COLOR */]: \"Color[]\" /* COLOR_ARRAY */,\n  [\"Color[]\" /* COLOR_ARRAY */]: \"Color[]\" /* COLOR_ARRAY */,\n  [\"Euler\" /* EULER */]: \"Euler[]\" /* EULER_ARRAY */,\n  [\"Euler[]\" /* EULER_ARRAY */]: \"Euler[]\" /* EULER_ARRAY */,\n  [\"float\" /* FLOAT */]: \"float[]\" /* FLOAT_ARRAY */,\n  [\"float[]\" /* FLOAT_ARRAY */]: \"float[]\" /* FLOAT_ARRAY */,\n  [\"int\" /* INT */]: \"int[]\" /* INT_ARRAY */,\n  [\"int[]\" /* INT_ARRAY */]: \"int[]\" /* INT_ARRAY */,\n  [\"Intersection\" /* INTERSECTION */]: \"Intersection[]\" /* INTERSECTION_ARRAY */,\n  [\"Intersection[]\" /* INTERSECTION_ARRAY */]: \"Intersection[]\" /* INTERSECTION_ARRAY */,\n  [\"Material\" /* MATERIAL */]: \"Material\" /* MATERIAL */,\n  [\"Matrix4\" /* MATRIX4 */]: \"Matrix4[]\" /* MATRIX4_ARRAY */,\n  [\"Matrix4[]\" /* MATRIX4_ARRAY */]: \"Matrix4[]\" /* MATRIX4_ARRAY */,\n  [\"Node\" /* NODE */]: \"Node\" /* NODE */,\n  [\"Object3D\" /* OBJECT_3D */]: \"Object3D[]\" /* OBJECT_3D_ARRAY */,\n  [\"Object3D[]\" /* OBJECT_3D_ARRAY */]: \"Object3D[]\" /* OBJECT_3D_ARRAY */,\n  [\"Param\" /* PARAM */]: \"Param\" /* PARAM */,\n  [\"Plane\" /* PLANE */]: \"Plane\" /* PLANE */,\n  [\"Quaternion\" /* QUATERNION */]: \"Quaternion[]\" /* QUATERNION_ARRAY */,\n  [\"Quaternion[]\" /* QUATERNION_ARRAY */]: \"Quaternion[]\" /* QUATERNION_ARRAY */,\n  [\"Ray\" /* RAY */]: \"Ray\" /* RAY */,\n  [\"Sphere\" /* SPHERE */]: \"Sphere\" /* SPHERE */,\n  //\n  [\"string\" /* STRING */]: \"string[]\" /* STRING_ARRAY */,\n  [\"string[]\" /* STRING_ARRAY */]: \"string[]\" /* STRING_ARRAY */,\n  [\"Texture\" /* TEXTURE */]: \"Texture[]\" /* TEXTURE_ARRAY */,\n  [\"Texture[]\" /* TEXTURE_ARRAY */]: \"Texture[]\" /* TEXTURE_ARRAY */,\n  // [ActorConnectionPointType.TRACKING_RESULT_HAND]: ActorConnectionPointType.TRACKING_RESULT_HAND,\n  [\"trigger\" /* TRIGGER */]: \"trigger\" /* TRIGGER */,\n  [\"Vector2\" /* VECTOR2 */]: \"Vector2[]\" /* VECTOR2_ARRAY */,\n  [\"Vector2[]\" /* VECTOR2_ARRAY */]: \"Vector2[]\" /* VECTOR2_ARRAY */,\n  [\"Vector3\" /* VECTOR3 */]: \"Vector3[]\" /* VECTOR3_ARRAY */,\n  [\"Vector3[]\" /* VECTOR3_ARRAY */]: \"Vector3[]\" /* VECTOR3_ARRAY */,\n  [\"Vector4\" /* VECTOR4 */]: \"Vector4[]\" /* VECTOR4_ARRAY */,\n  [\"Vector4[]\" /* VECTOR4_ARRAY */]: \"Vector4[]\" /* VECTOR4_ARRAY */\n};\nexport const JsConnectionPointTypeFromArrayTypeMap = {\n  [\"AnimationMixer\" /* ANIMATION_MIXER */]: \"AnimationMixer\" /* ANIMATION_MIXER */,\n  [\"AnimationAction\" /* ANIMATION_ACTION */]: \"AnimationAction\" /* ANIMATION_ACTION */,\n  [\"boolean\" /* BOOLEAN */]: \"boolean\" /* BOOLEAN */,\n  [\"boolean[]\" /* BOOLEAN_ARRAY */]: \"boolean\" /* BOOLEAN */,\n  [\"Box3\" /* BOX3 */]: \"Box3\" /* BOX3 */,\n  [\"Camera\" /* CAMERA */]: \"Camera\" /* CAMERA */,\n  [\"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */]: \"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */,\n  [\"Color\" /* COLOR */]: \"Color\" /* COLOR */,\n  [\"Color[]\" /* COLOR_ARRAY */]: \"Color\" /* COLOR */,\n  [\"Euler\" /* EULER */]: \"Euler\" /* EULER */,\n  [\"Euler[]\" /* EULER_ARRAY */]: \"Euler\" /* EULER */,\n  [\"float\" /* FLOAT */]: \"float\" /* FLOAT */,\n  [\"float[]\" /* FLOAT_ARRAY */]: \"float\" /* FLOAT */,\n  [\"int\" /* INT */]: \"int\" /* INT */,\n  [\"int[]\" /* INT_ARRAY */]: \"int\" /* INT */,\n  [\"Intersection\" /* INTERSECTION */]: \"Intersection\" /* INTERSECTION */,\n  [\"Intersection[]\" /* INTERSECTION_ARRAY */]: \"Intersection\" /* INTERSECTION */,\n  [\"Material\" /* MATERIAL */]: \"Material\" /* MATERIAL */,\n  [\"Matrix4\" /* MATRIX4 */]: \"Matrix4\" /* MATRIX4 */,\n  [\"Matrix4[]\" /* MATRIX4_ARRAY */]: \"Matrix4\" /* MATRIX4 */,\n  [\"Node\" /* NODE */]: \"Node\" /* NODE */,\n  [\"Object3D\" /* OBJECT_3D */]: \"Object3D\" /* OBJECT_3D */,\n  [\"Object3D[]\" /* OBJECT_3D_ARRAY */]: \"Object3D\" /* OBJECT_3D */,\n  [\"Param\" /* PARAM */]: \"Param\" /* PARAM */,\n  [\"Plane\" /* PLANE */]: \"Plane\" /* PLANE */,\n  [\"Quaternion\" /* QUATERNION */]: \"Quaternion\" /* QUATERNION */,\n  [\"Quaternion[]\" /* QUATERNION_ARRAY */]: \"Quaternion\" /* QUATERNION */,\n  [\"Ray\" /* RAY */]: \"Ray\" /* RAY */,\n  [\"Sphere\" /* SPHERE */]: \"Sphere\" /* SPHERE */,\n  //\n  [\"string\" /* STRING */]: \"string\" /* STRING */,\n  [\"string[]\" /* STRING_ARRAY */]: \"string\" /* STRING */,\n  [\"Texture\" /* TEXTURE */]: \"Texture\" /* TEXTURE */,\n  [\"Texture[]\" /* TEXTURE_ARRAY */]: \"Texture\" /* TEXTURE */,\n  // [ActorConnectionPointType.TRACKING_RESULT_HAND]: ActorConnectionPointType.TRACKING_RESULT_HAND,\n  [\"trigger\" /* TRIGGER */]: \"trigger\" /* TRIGGER */,\n  [\"Vector2\" /* VECTOR2 */]: \"Vector2\" /* VECTOR2 */,\n  [\"Vector2[]\" /* VECTOR2_ARRAY */]: \"Vector2\" /* VECTOR2 */,\n  [\"Vector3\" /* VECTOR3 */]: \"Vector3\" /* VECTOR3 */,\n  [\"Vector3[]\" /* VECTOR3_ARRAY */]: \"Vector3\" /* VECTOR3 */,\n  [\"Vector4\" /* VECTOR4 */]: \"Vector4\" /* VECTOR4 */,\n  [\"Vector4[]\" /* VECTOR4_ARRAY */]: \"Vector4\" /* VECTOR4 */\n};\nexport const ARRAYABLE_CONNECTION_TYPES = /* @__PURE__ */ new Set([\n  \"boolean\" /* BOOLEAN */,\n  \"Color\" /* COLOR */,\n  \"float\" /* FLOAT */,\n  \"int\" /* INT */,\n  \"Intersection\" /* INTERSECTION */,\n  \"Matrix4\" /* MATRIX4 */,\n  \"Quaternion\" /* QUATERNION */,\n  \"string\" /* STRING */,\n  \"Texture\" /* TEXTURE */,\n  \"Vector2\" /* VECTOR2 */,\n  \"Vector3\" /* VECTOR3 */,\n  \"Vector4\" /* VECTOR4 */\n]);\nexport const ARRAY_JS_CONNECTION_TYPES = [\n  \"boolean[]\" /* BOOLEAN_ARRAY */,\n  \"Color[]\" /* COLOR_ARRAY */,\n  \"float[]\" /* FLOAT_ARRAY */,\n  \"int[]\" /* INT_ARRAY */,\n  \"Intersection[]\" /* INTERSECTION_ARRAY */,\n  \"Matrix4[]\" /* MATRIX4_ARRAY */,\n  \"Object3D[]\" /* OBJECT_3D_ARRAY */,\n  \"Quaternion[]\" /* QUATERNION_ARRAY */,\n  \"string[]\" /* STRING_ARRAY */,\n  \"Texture[]\" /* TEXTURE_ARRAY */,\n  \"Vector2[]\" /* VECTOR2_ARRAY */,\n  \"Vector3[]\" /* VECTOR3_ARRAY */,\n  \"Vector4[]\" /* VECTOR4_ARRAY */\n];\nexport const ARRAY_JS_CONNECTION_TYPES_SET = new Set(ARRAY_JS_CONNECTION_TYPES);\nexport const PARAM_CONVERTIBLE_JS_CONNECTION_POINT_TYPES = [\n  \"boolean\" /* BOOLEAN */,\n  \"Color\" /* COLOR */,\n  \"float\" /* FLOAT */,\n  \"int\" /* INT */,\n  \"string\" /* STRING */,\n  \"Vector2\" /* VECTOR2 */,\n  \"Vector3\" /* VECTOR3 */,\n  \"Vector4\" /* VECTOR4 */\n];\nexport const POINT_ATTRIBUTE_JS_CONNECTION_POINT_TYPES = [\n  \"Color\" /* COLOR */,\n  \"float\" /* FLOAT */,\n  \"int\" /* INT */,\n  \"Vector2\" /* VECTOR2 */,\n  \"Vector3\" /* VECTOR3 */,\n  \"Vector4\" /* VECTOR4 */\n];\nexport const JsConnectionPointTypeToParamTypeMap = {\n  [\"AnimationMixer\" /* ANIMATION_MIXER */]: ParamType.BUTTON,\n  [\"AnimationAction\" /* ANIMATION_ACTION */]: ParamType.BUTTON,\n  [\"boolean\" /* BOOLEAN */]: ParamType.BOOLEAN,\n  [\"boolean[]\" /* BOOLEAN_ARRAY */]: ParamType.BUTTON,\n  [\"Box3\" /* BOX3 */]: ParamType.BUTTON,\n  [\"Camera\" /* CAMERA */]: ParamType.BUTTON,\n  [\"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */]: ParamType.BUTTON,\n  [\"Color\" /* COLOR */]: ParamType.COLOR,\n  [\"Color[]\" /* COLOR_ARRAY */]: ParamType.BUTTON,\n  [\"Euler\" /* EULER */]: ParamType.BUTTON,\n  [\"Euler[]\" /* EULER_ARRAY */]: ParamType.BUTTON,\n  [\"float\" /* FLOAT */]: ParamType.FLOAT,\n  [\"float[]\" /* FLOAT_ARRAY */]: ParamType.BUTTON,\n  [\"int\" /* INT */]: ParamType.INTEGER,\n  [\"int[]\" /* INT_ARRAY */]: ParamType.BUTTON,\n  [\"Intersection\" /* INTERSECTION */]: ParamType.BUTTON,\n  [\"Intersection[]\" /* INTERSECTION_ARRAY */]: ParamType.BUTTON,\n  [\"Material\" /* MATERIAL */]: ParamType.BUTTON,\n  [\"Matrix4\" /* MATRIX4 */]: ParamType.BUTTON,\n  [\"Matrix4[]\" /* MATRIX4_ARRAY */]: ParamType.BUTTON,\n  [\"Node\" /* NODE */]: ParamType.NODE_PATH,\n  [\"Object3D\" /* OBJECT_3D */]: ParamType.BUTTON,\n  [\"Object3D[]\" /* OBJECT_3D_ARRAY */]: ParamType.BUTTON,\n  [\"Param\" /* PARAM */]: ParamType.PARAM_PATH,\n  [\"Plane\" /* PLANE */]: ParamType.BUTTON,\n  [\"Quaternion\" /* QUATERNION */]: ParamType.BUTTON,\n  [\"Quaternion[]\" /* QUATERNION_ARRAY */]: ParamType.BUTTON,\n  [\"Ray\" /* RAY */]: ParamType.BUTTON,\n  [\"Sphere\" /* SPHERE */]: ParamType.BUTTON,\n  [\"string\" /* STRING */]: ParamType.STRING,\n  [\"string[]\" /* STRING_ARRAY */]: ParamType.BUTTON,\n  [\"Texture\" /* TEXTURE */]: ParamType.BUTTON,\n  [\"Texture[]\" /* TEXTURE_ARRAY */]: ParamType.BUTTON,\n  [\"trigger\" /* TRIGGER */]: ParamType.BUTTON,\n  [\"Vector2\" /* VECTOR2 */]: ParamType.VECTOR2,\n  [\"Vector2[]\" /* VECTOR2_ARRAY */]: ParamType.BUTTON,\n  [\"Vector3\" /* VECTOR3 */]: ParamType.VECTOR3,\n  [\"Vector3[]\" /* VECTOR3_ARRAY */]: ParamType.BUTTON,\n  [\"Vector4\" /* VECTOR4 */]: ParamType.VECTOR4,\n  [\"Vector4[]\" /* VECTOR4_ARRAY */]: ParamType.BUTTON\n  // [JsConnectionPointType.MAT3]: undefined,\n  // [JsConnectionPointType.MAT4]: undefined,\n};\nexport const JsParamTypeToConnectionPointTypeMap = {\n  [ParamType.BOOLEAN]: \"boolean\" /* BOOLEAN */,\n  [ParamType.COLOR]: \"Color\" /* COLOR */,\n  [ParamType.FLOAT]: \"float\" /* FLOAT */,\n  [ParamType.INTEGER]: \"int\" /* INT */,\n  [ParamType.FOLDER]: void 0,\n  [ParamType.VECTOR2]: \"Vector2\" /* VECTOR2 */,\n  [ParamType.VECTOR3]: \"Vector3\" /* VECTOR3 */,\n  [ParamType.VECTOR4]: \"Vector4\" /* VECTOR4 */,\n  [ParamType.BUTTON]: void 0,\n  [ParamType.NODE_PATH]: \"Node\" /* NODE */,\n  [ParamType.PARAM_PATH]: \"Param\" /* PARAM */,\n  [ParamType.RAMP]: void 0,\n  [ParamType.STRING]: \"string\" /* STRING */\n};\nexport const JsConnectionPointInitValueMap = {\n  [\"AnimationAction\" /* ANIMATION_ACTION */]: null,\n  [\"AnimationMixer\" /* ANIMATION_MIXER */]: null,\n  [\"boolean\" /* BOOLEAN */]: false,\n  [\"boolean[]\" /* BOOLEAN_ARRAY */]: null,\n  [\"Box3\" /* BOX3 */]: null,\n  [\"Camera\" /* CAMERA */]: null,\n  [\"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */]: null,\n  [\"Color\" /* COLOR */]: [1, 1, 1],\n  [\"Color[]\" /* COLOR_ARRAY */]: null,\n  [\"Euler\" /* EULER */]: null,\n  [\"Euler[]\" /* EULER_ARRAY */]: null,\n  [\"float\" /* FLOAT */]: 0,\n  [\"float[]\" /* FLOAT_ARRAY */]: null,\n  [\"int\" /* INT */]: 0,\n  [\"int[]\" /* INT_ARRAY */]: null,\n  [\"Intersection\" /* INTERSECTION */]: null,\n  [\"Intersection[]\" /* INTERSECTION_ARRAY */]: null,\n  [\"Material\" /* MATERIAL */]: null,\n  [\"Matrix4\" /* MATRIX4 */]: null,\n  [\"Matrix4[]\" /* MATRIX4_ARRAY */]: null,\n  [\"Node\" /* NODE */]: \"\",\n  [\"Object3D\" /* OBJECT_3D */]: null,\n  [\"Object3D[]\" /* OBJECT_3D_ARRAY */]: null,\n  [\"Param\" /* PARAM */]: \"\",\n  [\"Plane\" /* PLANE */]: null,\n  [\"Quaternion\" /* QUATERNION */]: null,\n  [\"Quaternion[]\" /* QUATERNION_ARRAY */]: null,\n  [\"Ray\" /* RAY */]: null,\n  [\"Sphere\" /* SPHERE */]: null,\n  [\"string\" /* STRING */]: \"\",\n  [\"string[]\" /* STRING_ARRAY */]: null,\n  [\"Texture\" /* TEXTURE */]: null,\n  [\"Texture[]\" /* TEXTURE_ARRAY */]: null,\n  [\"trigger\" /* TRIGGER */]: null,\n  [\"Vector2\" /* VECTOR2 */]: [0, 0],\n  [\"Vector2[]\" /* VECTOR2_ARRAY */]: null,\n  [\"Vector3\" /* VECTOR3 */]: [0, 0, 0],\n  [\"Vector3[]\" /* VECTOR3_ARRAY */]: null,\n  [\"Vector4\" /* VECTOR4 */]: [0, 0, 0, 0],\n  [\"Vector4[]\" /* VECTOR4_ARRAY */]: null\n  // [JsConnectionPointType.MAT3]: [0],\n  // [JsConnectionPointType.MAT4]: [0],\n};\nexport const JsConnectionPointComponentsCountMap = {\n  [\"AnimationAction\" /* ANIMATION_ACTION */]: 1,\n  [\"AnimationMixer\" /* ANIMATION_MIXER */]: 1,\n  [\"boolean\" /* BOOLEAN */]: 1,\n  [\"boolean[]\" /* BOOLEAN_ARRAY */]: 1,\n  [\"Box3\" /* BOX3 */]: 1,\n  [\"Camera\" /* CAMERA */]: 1,\n  [\"CatmullRomCurve3\" /* CATMULL_ROM_CURVE3 */]: 1,\n  [\"Color\" /* COLOR */]: 3,\n  [\"Color[]\" /* COLOR_ARRAY */]: 1,\n  [\"Euler\" /* EULER */]: 3,\n  [\"Euler[]\" /* EULER_ARRAY */]: 1,\n  [\"float\" /* FLOAT */]: 1,\n  [\"float[]\" /* FLOAT_ARRAY */]: 1,\n  [\"int\" /* INT */]: 1,\n  [\"int[]\" /* INT_ARRAY */]: 1,\n  [\"Intersection\" /* INTERSECTION */]: 1,\n  [\"Intersection[]\" /* INTERSECTION_ARRAY */]: 1,\n  [\"Material\" /* MATERIAL */]: 1,\n  [\"Matrix4\" /* MATRIX4 */]: 1,\n  [\"Matrix4[]\" /* MATRIX4_ARRAY */]: 1,\n  [\"Node\" /* NODE */]: 1,\n  [\"Object3D\" /* OBJECT_3D */]: 1,\n  [\"Object3D[]\" /* OBJECT_3D_ARRAY */]: 1,\n  [\"Param\" /* PARAM */]: 1,\n  [\"Plane\" /* PLANE */]: 1,\n  [\"Quaternion\" /* QUATERNION */]: 1,\n  [\"Quaternion[]\" /* QUATERNION_ARRAY */]: 1,\n  [\"Ray\" /* RAY */]: 1,\n  [\"Sphere\" /* SPHERE */]: 1,\n  [\"string\" /* STRING */]: 1,\n  [\"string[]\" /* STRING_ARRAY */]: 1,\n  [\"Texture\" /* TEXTURE */]: 1,\n  [\"Texture[]\" /* TEXTURE_ARRAY */]: 1,\n  [\"trigger\" /* TRIGGER */]: 1,\n  [\"Vector2\" /* VECTOR2 */]: 2,\n  [\"Vector2[]\" /* VECTOR2_ARRAY */]: 1,\n  [\"Vector3\" /* VECTOR3 */]: 3,\n  [\"Vector3[]\" /* VECTOR3_ARRAY */]: 1,\n  [\"Vector4\" /* VECTOR4 */]: 4,\n  [\"Vector4[]\" /* VECTOR4_ARRAY */]: 1\n};\nexport const JS_CONNECTION_POINT_IN_NODE_DEF = {\n  inNodeDefinition: true\n};\nexport class JsConnectionPoint extends BaseConnectionPoint {\n  constructor(_name, _type, _options) {\n    super(_name, _type);\n    this._type = _type;\n    this._options = _options;\n    this._isArray = ARRAY_JS_CONNECTION_TYPES_SET.has(_type);\n    this._init_value = JsConnectionPointInitValueMap[this._type];\n    if (_options) {\n      this._inNodeDefinition = _options.inNodeDefinition == true;\n      if (_options.init_value != null) {\n        this._init_value = _options.init_value;\n      }\n    }\n  }\n  type() {\n    return this._type;\n  }\n  are_types_matched(src_type, dest_type) {\n    return src_type == dest_type;\n  }\n  get param_type() {\n    return JsConnectionPointTypeToParamTypeMap[this._type];\n  }\n  get init_value() {\n    return this._init_value;\n  }\n  toJSON() {\n    return this._json = this._json || this._createJSON();\n  }\n  _createJSON() {\n    return {\n      name: this._name,\n      type: this._type,\n      isArray: this._isArray\n    };\n  }\n}\n", "\"use strict\";\nimport { refByObjectUuidByAttribName } from \"./ObjectAttributeReactivity\";\nimport { Color, Vector2, Vector3, Vector4 } from \"three\";\nimport {\n  JsConnectionPointType\n} from \"../../engine/nodes/utils/io/connections/Js\";\nimport { TypeAssert } from \"../../engine/poly/Assert\";\nimport { BaseCoreObject } from \"../geometry/entities/object/BaseCoreObject\";\nimport { ref } from \"./CoreReactivity\";\nfunction defaultValue(type) {\n  switch (type) {\n    case JsConnectionPointType.BOOLEAN: {\n      return false;\n    }\n    case JsConnectionPointType.COLOR: {\n      return new Color();\n    }\n    case JsConnectionPointType.FLOAT: {\n      return 0;\n    }\n    case JsConnectionPointType.INT: {\n      return 0;\n    }\n    case JsConnectionPointType.STRING: {\n      return \"\";\n    }\n    case JsConnectionPointType.VECTOR2: {\n      return new Vector2();\n    }\n    case JsConnectionPointType.VECTOR3: {\n      return new Vector3();\n    }\n    case JsConnectionPointType.VECTOR4: {\n      return new Vector4();\n    }\n  }\n  TypeAssert.unreachable(type);\n}\nfunction cloneDefaultValue(value, type) {\n  switch (type) {\n    case JsConnectionPointType.BOOLEAN: {\n      return value;\n    }\n    case JsConnectionPointType.COLOR: {\n      return value.clone();\n    }\n    case JsConnectionPointType.FLOAT: {\n      return value;\n    }\n    case JsConnectionPointType.INT: {\n      return value;\n    }\n    case JsConnectionPointType.STRING: {\n      return value;\n    }\n    case JsConnectionPointType.VECTOR2: {\n      return value.clone();\n    }\n    case JsConnectionPointType.VECTOR3: {\n      return value.clone();\n    }\n    case JsConnectionPointType.VECTOR4: {\n      return value.clone();\n    }\n  }\n  TypeAssert.unreachable(type);\n}\nexport function getOrCreateObjectAttributeRef(object3D, attribName, type, defaultAttribValue) {\n  let mapForObject = refByObjectUuidByAttribName.get(object3D);\n  if (!mapForObject) {\n    mapForObject = /* @__PURE__ */ new Map();\n    refByObjectUuidByAttribName.set(object3D, mapForObject);\n  }\n  let refForAttribName = mapForObject.get(attribName);\n  if (!refForAttribName) {\n    let _defaultValue = defaultAttribValue != null ? defaultAttribValue : defaultValue(type);\n    let _previousValue = cloneDefaultValue(_defaultValue, type);\n    const currentValue = BaseCoreObject.attribValue(\n      object3D,\n      attribName,\n      0,\n      _defaultValue\n    );\n    const previousValue = BaseCoreObject.attribValue(object3D, attribName, 0, _previousValue);\n    if (currentValue == null || previousValue == null) {\n      refForAttribName = {\n        current: ref(_defaultValue),\n        previous: ref(_previousValue)\n      };\n    } else {\n      refForAttribName = {\n        current: ref(currentValue),\n        previous: ref(previousValue)\n      };\n    }\n    mapForObject.set(attribName, refForAttribName);\n  }\n  return refForAttribName;\n}\nexport function _dummyReadAttributeRefVal(value) {\n}\n", "\"use strict\";\nimport { Object3D } from \"three\";\nimport { objectCloneDeep } from \"../ObjectUtils\";\nexport var CoreObjectType = /* @__PURE__ */ ((CoreObjectType2) => {\n  CoreObjectType2[\"THREEJS\"] = \"Object3D\";\n  CoreObjectType2[\"CAD\"] = \"CADObject\";\n  CoreObjectType2[\"CSG\"] = \"CSGObject\";\n  CoreObjectType2[\"QUAD\"] = \"QUADObject\";\n  CoreObjectType2[\"SDF\"] = \"SDFObject\";\n  CoreObjectType2[\"TET\"] = \"TetObject\";\n  return CoreObjectType2;\n})(CoreObjectType || {});\nexport function isObject3D(o) {\n  return o instanceof Object3D || o.isObject3D == true;\n}\nexport function objectContentCopyProperties(src, target, options) {\n  target.visible = src.visible;\n  target.name = src.name;\n  if (options == null || options.castShadow == null || options.castShadow == true) {\n    target.castShadow = src.castShadow;\n  }\n  if (options == null || options.receiveShadow == null || options.receiveShadow == true) {\n    target.receiveShadow = src.receiveShadow;\n  }\n  target.renderOrder = src.renderOrder;\n  target.frustumCulled = src.frustumCulled;\n  target.matrixAutoUpdate = src.matrixAutoUpdate;\n  if (src.material) {\n    target.material = src.material;\n  }\n  target.userData = objectCloneDeep(src.userData);\n}\n", "\"use strict\";\nimport { isObject3D } from \"../../ObjectContent\";\nimport { objectTypeFromObject } from \"../../Constant\";\nimport { EntityGroupCollection } from \"../../EntityGroupCollection\";\nimport { addToSetAtEntry } from \"../../../MapUtils\";\nimport { setToArray } from \"../../../SetUtils\";\nexport function objectData(object) {\n  const childrenCount = isObject3D(object) ? object.children.length : 0;\n  const objectType = isObject3D(object) ? objectTypeFromObject(object) : object.type;\n  const groupData = EntityGroupCollection.data(object);\n  return {\n    type: objectType,\n    name: object.name,\n    childrenCount,\n    groupData,\n    verticesCount: 0,\n    pointsCount: 0,\n    primitivesCount: 0,\n    primitiveName: \"no name\"\n  };\n}\nexport function coreObjectsAttribSizesByName(coreObjects) {\n  const _sizesByName = /* @__PURE__ */ new Map();\n  for (const coreObject of coreObjects) {\n    const objectAttriNames = coreObject.attribNames();\n    for (const attribName of objectAttriNames) {\n      const attribSize = coreObject.attribSize(attribName);\n      addToSetAtEntry(_sizesByName, attribName, attribSize);\n    }\n  }\n  const sizesByName = {};\n  _sizesByName.forEach((attribSizes, attribName) => {\n    sizesByName[attribName] = setToArray(attribSizes, []);\n  });\n  return sizesByName;\n}\nexport function coreObjectAttributeTypesByName(coreObjects) {\n  const _typesByName = /* @__PURE__ */ new Map();\n  for (const coreObject of coreObjects) {\n    const objectAttriNames = coreObject.attribNames();\n    for (const attribName of objectAttriNames) {\n      const attribType = coreObject.attribType(attribName);\n      addToSetAtEntry(_typesByName, attribName, attribType);\n    }\n  }\n  const typesByName = {};\n  _typesByName.forEach((attribTypes, attribName) => {\n    typesByName[attribName] = setToArray(attribTypes, []);\n  });\n  return typesByName;\n}\nexport function coreObjectsAttribNames(coreObjects) {\n  const names = /* @__PURE__ */ new Set();\n  for (const coreObject of coreObjects) {\n    const objectAttriNames = coreObject.attribNames();\n    for (const attribName of objectAttriNames) {\n      names.add(attribName);\n    }\n  }\n  return setToArray(names, []);\n}\n", "\"use strict\";\nimport { Color, Vector2, Vector3, Vector4 } from \"three\";\nimport { Attribute, CoreAttribute } from \"../../Attribute\";\nimport { AttribType, AttribClass } from \"../../Constant\";\nimport { CoreEntityWithObject } from \"../../CoreEntity\";\nimport { CoreType } from \"../../../Type\";\nimport { EntityGroupCollection } from \"../../EntityGroupCollection\";\nimport { _updateObjectAttribRef } from \"../../../reactivity/ObjectAttributeReactivityUpdateRef\";\nimport { attribValueNonPrimitive, copyAttribValue, cloneAttribValue, uniqRelatedEntityIds } from \"../utils/Common\";\nimport { getOrCreateObjectAttributeRef } from \"../../../reactivity/ObjectAttributeReactivityCreateRef\";\nimport { watch } from \"../../../reactivity/CoreReactivity\";\nimport { objectData } from \"./BaseCoreObjectUtils\";\nimport { TypeAssert } from \"../../../../engine/poly/Assert\";\nvar PropertyName = /* @__PURE__ */ ((PropertyName2) => {\n  PropertyName2[\"NAME\"] = \"name\";\n  PropertyName2[\"POSITION\"] = \"position\";\n  return PropertyName2;\n})(PropertyName || {});\nconst ATTRIBUTES = \"attributes\";\nconst ORIGIN = new Vector3(0, 0, 0);\nfunction _convertArrayToVector(value) {\n  switch (value.length) {\n    case 1:\n      return value[0];\n    case 2:\n      return new Vector2(value[0], value[1]);\n    case 3:\n      return new Vector3(value[0], value[1], value[2]);\n    case 4:\n      return new Vector4(value[0], value[1], value[2], value[3]);\n  }\n}\nconst tmpVec3 = new Vector3();\nconst tmpN3 = [0, 0, 0];\nconst _relatedPrimitiveIds = [];\nconst _relatedVertexIds = [];\nexport class BaseCoreObject extends CoreEntityWithObject {\n  dispose() {\n  }\n  // set_index(i: number) {\n  // \tthis._index = i;\n  // }\n  geometry() {\n    var _a;\n    return ((_a = this._object) == null ? void 0 : _a.geometry) || null;\n  }\n  builder() {\n    return void 0;\n  }\n  static attributeRef(object, attribName, type, defaultValue) {\n    return getOrCreateObjectAttributeRef(object, attribName, type, defaultValue);\n  }\n  attributeRef(attribName, type, defaultValue) {\n    if (!this._object) {\n      return;\n    }\n    return this.constructor.attributeRef(\n      this._object,\n      attribName,\n      type,\n      defaultValue\n    );\n  }\n  static onAttribChange(object, attribName, type, defaultValue, callback) {\n    const ref = this.attributeRef(object, attribName, type, defaultValue);\n    return watch(ref.current, callback);\n  }\n  onAttribChange(attribName, type, defaultValue, callback) {\n    if (!this._object) {\n      return;\n    }\n    return this.constructor.onAttribChange(\n      this._object,\n      attribName,\n      type,\n      defaultValue,\n      callback\n    );\n  }\n  static setAttribute(object, attribName, value) {\n    this.addAttribute(object, attribName, value);\n  }\n  static addAttribute(object, attribName, value) {\n    if (CoreType.isArray(value)) {\n      const convertedValue = _convertArrayToVector(value);\n      if (!convertedValue) {\n        const message = `value invalid`;\n        console.error(message, value);\n        throw new Error(message);\n      }\n    }\n    const dict = this._attributesDictionary(object);\n    const currentValue = dict[attribName];\n    if (attribValueNonPrimitive(value)) {\n      if (currentValue == null) {\n        const cloned = cloneAttribValue(value);\n        if (cloned) {\n          dict[attribName] = cloned;\n        }\n      } else {\n        if (attribValueNonPrimitive(currentValue)) {\n          copyAttribValue(value, currentValue);\n        }\n      }\n    } else {\n      dict[attribName] = value;\n    }\n    _updateObjectAttribRef(object, attribName, value);\n  }\n  static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {\n    this.addAttribute(object, attribName, defaultValue);\n  }\n  addAttribute(name, value) {\n    if (!this._object) {\n      return;\n    }\n    this.constructor.addAttribute(this._object, name, value);\n  }\n  addNumericAttrib(name, value) {\n    if (!this._object) {\n      return;\n    }\n    this.constructor.addNumericAttribute(\n      this._object,\n      name,\n      1,\n      value\n    );\n  }\n  setAttribValue(name, value) {\n    this.addAttribute(name, value);\n  }\n  // addNumericVertexAttrib(name: string, size: number, defaultValue: NumericAttribValue) {\n  // \t// if (defaultValue == null) {\n  // \t// \tdefaultValue = CoreAttribute.default_value(size);\n  // \t// }\n  // \t// this.coreGeometry()?.addNumericAttrib(name, size, defaultValue);\n  // }\n  static _attributesDictionary(object) {\n    return object.userData[ATTRIBUTES] || this._createAttributesDictionaryIfNone(object);\n  }\n  static attributesDictionaryEntry(object, attribName, defaultValue) {\n    const dict = object.userData[ATTRIBUTES] || this._createAttributesDictionaryIfNone(object);\n    let entry = dict[attribName];\n    if (entry == null && defaultValue != null) {\n      entry = defaultValue;\n      dict[attribName] = entry;\n    }\n    return entry;\n  }\n  // static attributesPreviousValuesDictionary<T extends CoreObjectType>(object: ObjectContent<T>) {\n  // \treturn (\n  // \t\t(object.userData[ATTRIBUTES_PREVIOUS_VALUES] as AttributeDictionary) ||\n  // \t\tthis._createAttributesPreviousValuesDictionaryIfNone(object)\n  // \t);\n  // }\n  static _createAttributesDictionaryIfNone(object) {\n    if (!object.userData[ATTRIBUTES]) {\n      return object.userData[ATTRIBUTES] = {};\n    }\n  }\n  // private static _createAttributesPreviousValuesDictionaryIfNone<T extends CoreObjectType>(object: ObjectContent<T>) {\n  // \tif (!object.userData[ATTRIBUTES_PREVIOUS_VALUES]) {\n  // \t\treturn (object.userData[ATTRIBUTES_PREVIOUS_VALUES] = {});\n  // \t}\n  // }\n  _attributesDictionary() {\n    return this.constructor._attributesDictionary(this._object);\n  }\n  static attributes(object) {\n    return this._attributesDictionary(object);\n  }\n  attributes() {\n    if (!this._object) {\n      return;\n    }\n    return this.constructor.attributes(this._object);\n  }\n  attributeNames() {\n    return this.attribNames();\n  }\n  static attribNames(object) {\n    return Object.keys(this._attributesDictionary(object));\n  }\n  attribNames() {\n    return this.constructor.attribNames(this._object);\n  }\n  // static objectsAttribNames<T extends CoreObjectType>(objects: ObjectContent<T>[]) {\n  // \tconst names: Set<string> = new Set();\n  // \tfor (let object of objects) {\n  // \t\tconst objectAttriNames = this.attribNames(object);\n  // \t\tfor (let attribName of objectAttriNames) {\n  // \t\t\tnames.add(attribName);\n  // \t\t}\n  // \t}\n  // \treturn SetUtils.toArray(names);\n  // }\n  static hasAttribute(object, attribName) {\n    return attribName in this._attributesDictionary(object);\n  }\n  hasAttribute(attribName) {\n    return this.constructor.hasAttribute(\n      this._object,\n      attribName\n    );\n  }\n  static attributeNames(object) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return [];\n    }\n    return Object.keys(attributes);\n  }\n  static attributeNamesMatchingMask(object, masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.attributeNames(object));\n  }\n  renameAttribute(oldName, newName) {\n    return this.constructor.renameAttribute(\n      this._object,\n      oldName,\n      newName\n    );\n  }\n  static renameAttribute(object, oldName, newName) {\n    const currentValue = this.attribValue(object, oldName);\n    if (currentValue != null) {\n      this.addAttribute(object, newName, currentValue);\n      this.deleteAttribute(object, oldName);\n    } else {\n      console.warn(`attribute ${oldName} not found`);\n    }\n  }\n  deleteAttribute(name) {\n    delete this._attributesDictionary()[name];\n  }\n  static deleteAttribute(object, attribName) {\n    delete this._attributesDictionary(object)[attribName];\n  }\n  // static position:PositionStaticMethod<CoreObjectType> = DEFAULT_POSITION_STATIC_METHOD\n  static position(object, target) {\n    target.copy(ORIGIN);\n  }\n  position(target) {\n    this.constructor.position(this._object, target);\n    return target;\n  }\n  static boundingBox(object, target) {\n    target.makeEmpty();\n  }\n  boundingBox(target) {\n    this.constructor.boundingBox(this._object, target);\n  }\n  static geometryBoundingBox(object, target) {\n    this.boundingBox(object, target);\n  }\n  geometryBoundingBox(target) {\n    this.constructor.geometryBoundingBox(this._object, target);\n  }\n  static boundingSphere(object, target) {\n    target.makeEmpty();\n  }\n  boundingSphere(target) {\n    this.constructor.boundingSphere(this._object, target);\n  }\n  static geometryBoundingSphere(object, target) {\n    target.makeEmpty();\n  }\n  geometryBoundingSphere(target) {\n    this.constructor.geometryBoundingSphere(this._object, target);\n  }\n  static attribValue(object, attribName, index = 0, target) {\n    const _attribFromProperty = () => {\n      if (attribName == \"name\" /* NAME */) {\n        return object.name;\n      }\n      if (attribName == \"position\" /* POSITION */) {\n        const _target = target instanceof Vector3 ? target : tmpVec3;\n        this.position(object, _target);\n        _target.toArray(tmpN3);\n        return tmpN3;\n      }\n    };\n    if (attribName === Attribute.OBJECT_INDEX) {\n      return index;\n    }\n    if (attribName === Attribute.OBJECT_NAME) {\n      return object.name;\n    }\n    if (object.userData) {\n      const val = this.attributesDictionaryEntry(object, attribName);\n      if (val == null) {\n        return _attribFromProperty();\n      } else {\n        if (CoreType.isVector(val) && target) {\n          if (val instanceof Vector2 && target instanceof Vector2) {\n            return target.copy(val);\n          }\n          if (val instanceof Vector3 && target instanceof Vector3) {\n            return target.copy(val);\n          }\n          if (val instanceof Vector4 && target instanceof Vector4) {\n            return target.copy(val);\n          }\n        }\n        if (CoreType.isColor(val) && target) {\n          if (val instanceof Color && target instanceof Color) {\n            return target.copy(val);\n          }\n        }\n        if (CoreType.isArray(val) && target) {\n          target.fromArray(val);\n          return target;\n        }\n      }\n      return val;\n    }\n    return _attribFromProperty();\n  }\n  // static previousAttribValue<T extends CoreObjectType>(\n  // \tobject: ObjectContent<T>,\n  // \tattribName: string\n  // ): AttribValue | undefined {\n  // \tconst dict = this.attributesPreviousValuesDictionary(object);\n  // \treturn dict[attribName];\n  // }\n  static stringAttribValue(object, attribName, index = 0) {\n    const str = this.attribValue(object, attribName, index);\n    if (str != null) {\n      if (CoreType.isString(str)) {\n        return str;\n      } else {\n        return `${str}`;\n      }\n    }\n    return null;\n  }\n  // static makeAttribReactive<V extends AttribValue, T extends CoreObjectType>(\n  // \tobject: ObjectContent<T>,\n  // \tattribName: string,\n  // \tcallback: AttributeReactiveCallback<V>\n  // ) {\n  // \tconst attributesDict = this.attributesDictionary(object);\n  // \t// const attributesPreviousValuesDict = this.attributesPreviousValuesDictionary(object);\n  // \tconst currentValue = attributesDict[attribName];\n  // \tif (currentValue instanceof Vector4) {\n  // \t\treturn makeAttribReactiveVector4(\n  // \t\t\tobject,\n  // \t\t\tattribName,\n  // \t\t\t(<unknown>callback) as AttributeReactiveCallback<Vector4>\n  // \t\t);\n  // \t}\n  // \tif (currentValue instanceof Vector3) {\n  // \t\treturn makeAttribReactiveVector3(\n  // \t\t\tobject,\n  // \t\t\tattribName,\n  // \t\t\t(<unknown>callback) as AttributeReactiveCallback<Vector3>\n  // \t\t);\n  // \t}\n  // \tif (currentValue instanceof Vector2) {\n  // \t\treturn makeAttribReactiveVector2(\n  // \t\t\tobject,\n  // \t\t\tattribName,\n  // \t\t\t(<unknown>callback) as AttributeReactiveCallback<Vector2>\n  // \t\t);\n  // \t}\n  // \treturn makeAttribReactiveSimple(\n  // \t\tobject,\n  // \t\tattribName,\n  // \t\t(<unknown>callback) as AttributeReactiveCallback<string | number>\n  // \t);\n  // \t// // create a dummy val in case there is no attribute yet\n  // \t// if (attributesDict[attribName] == null) {\n  // \t// \tattributesDict[attribName] = 0;\n  // \t// }\n  // \t// const proxy: AttributeProxy<V> = {\n  // \t// \tvalue: attributesDict[attribName] as V,\n  // \t// \tpreviousValue: attributesDict[attribName] as V,\n  // \t// };\n  // \t// Object.defineProperties(attributesDict, {\n  // \t// \t[attribName]: {\n  // \t// \t\tget: function () {\n  // \t// \t\t\treturn proxy.value;\n  // \t// \t\t},\n  // \t// \t\tset: function (x) {\n  // \t// \t\t\tif (x != proxy.value) {\n  // \t// \t\t\t\tproxy.previousValue = proxy.value;\n  // \t// \t\t\t\tproxy.value = x;\n  // \t// \t\t\t\tcallback(proxy.value, proxy.previousValue);\n  // \t// \t\t\t}\n  // \t// \t\t\treturn proxy.value;\n  // \t// \t\t},\n  // \t// \t\tconfigurable: true,\n  // \t// \t},\n  // \t// });\n  // \t// Object.defineProperties(attributesPreviousValuesDict, {\n  // \t// \t[attribName]: {\n  // \t// \t\tget: function () {\n  // \t// \t\t\treturn proxy.previousValue;\n  // \t// \t\t},\n  // \t// \t\tconfigurable: true,\n  // \t// \t},\n  // \t// });\n  // }\n  attribValue(attribName, target) {\n    return this.constructor.attribValue(\n      this._object,\n      attribName,\n      this._index,\n      target\n    );\n  }\n  stringAttribValue(name) {\n    return this.constructor.stringAttribValue(\n      this._object,\n      name,\n      this._index\n    );\n  }\n  name() {\n    return this.attribValue(\"name\" /* NAME */);\n  }\n  humanType() {\n    return this._object.type;\n  }\n  attribTypes() {\n    const h = {};\n    for (const attrib_name of this.attribNames()) {\n      const type = this.attribType(attrib_name);\n      if (type != null) {\n        h[attrib_name] = type;\n      }\n    }\n    return h;\n  }\n  static attribType(object, attribName) {\n    const val = this.attribValue(object, attribName);\n    if (CoreType.isString(val)) {\n      return AttribType.STRING;\n    } else {\n      return AttribType.NUMERIC;\n    }\n  }\n  attribType(attribName) {\n    return this.constructor.attribType(this._object, attribName);\n  }\n  attribSizes() {\n    const h = {};\n    const attribNames = this.attribNames();\n    for (const attribName of attribNames) {\n      const size = this.attribSize(attribName);\n      if (size != null) {\n        h[attribName] = size;\n      }\n    }\n    return h;\n  }\n  static attribSize(object, attribName) {\n    const val = this.attribValue(object, attribName);\n    if (val == null) {\n      return null;\n    }\n    return CoreAttribute.attribSizeFromValue(val);\n  }\n  attribSize(attribName) {\n    return this.constructor.attribSize(this._object, attribName);\n  }\n  static objectData(object) {\n    return objectData(object);\n  }\n  clone() {\n    const clonedObject = this.constructor.clone(this._object);\n    const cloned = new this.constructor(clonedObject, this._index);\n    return cloned;\n  }\n  static clone(srcObject) {\n    return srcObject.clone();\n  }\n  static applyMatrix(object, matrix, transformTargetType, transformSpace, transformMode) {\n    console.warn(\"applyMatrix.override required\", this);\n  }\n  static mergeCompact(options) {\n    console.warn(\"mergeCompact.override required\", this);\n  }\n  //\n  //\n  // ENTITY GROUPS\n  //\n  //\n  groupCollection() {\n    return new EntityGroupCollection(this._object);\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static relatedVertexIds(object, objectIndex, target, traversedRelatedEntityData) {\n    const ids = traversedRelatedEntityData ? traversedRelatedEntityData[AttribClass.PRIMITIVE].ids : _relatedPrimitiveIds;\n    this.relatedPrimitiveIds(object, objectIndex, ids, traversedRelatedEntityData);\n    uniqRelatedEntityIds(\n      ids,\n      (primitiveId, relatedEntityIds) => {\n        this.relatedPrimitiveClass(object).relatedVertexIds(object, primitiveId, relatedEntityIds);\n      },\n      target\n    );\n  }\n  static relatedPointIds(object, objectIndex, target, traversedRelatedEntityData) {\n    const ids = traversedRelatedEntityData ? traversedRelatedEntityData[AttribClass.VERTEX].ids : _relatedVertexIds;\n    this.relatedVertexIds(object, objectIndex, ids, traversedRelatedEntityData);\n    uniqRelatedEntityIds(\n      ids,\n      (vertexId, relatedEntityIds) => {\n        this.relatedVertexClass(object).relatedPointIds(object, vertexId, relatedEntityIds);\n      },\n      target\n    );\n  }\n  relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {\n    switch (attribClass) {\n      case AttribClass.POINT: {\n        this.relatedPoints(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.VERTEX: {\n        this.relatedVertices(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.PRIMITIVE: {\n        this.relatedPrimitives(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.OBJECT: {\n        target.length = 1;\n        target[0] = this;\n        return;\n      }\n      case AttribClass.CORE_GROUP: {\n        target.length = 1;\n        target[0] = coreGroup;\n        return;\n      }\n    }\n    TypeAssert.unreachable(attribClass);\n  }\n  static relatedPointClass(object) {\n    return this.relatedVertexClass(object).relatedPointClass(object);\n  }\n  static relatedVertexClass(object) {\n    return this.relatedPrimitiveClass(object).relatedVertexClass(object);\n  }\n}\n", "\"use strict\";\nimport { MathUtils, Euler, Matrix4, Vector3, Quaternion } from \"three\";\nexport var TransformTargetType = /* @__PURE__ */ ((TransformTargetType2) => {\n  TransformTargetType2[\"OBJECT\"] = \"object\";\n  TransformTargetType2[\"GEOMETRY\"] = \"geometry\";\n  return TransformTargetType2;\n})(TransformTargetType || {});\nexport const TRANSFORM_TARGET_TYPES = [\"geometry\" /* GEOMETRY */, \"object\" /* OBJECT */];\nexport var RotationOrder = /* @__PURE__ */ ((RotationOrder2) => {\n  RotationOrder2[\"XYZ\"] = \"XYZ\";\n  RotationOrder2[\"XZY\"] = \"XZY\";\n  RotationOrder2[\"YXZ\"] = \"YXZ\";\n  RotationOrder2[\"YZX\"] = \"YZX\";\n  RotationOrder2[\"ZYX\"] = \"ZYX\";\n  RotationOrder2[\"ZXY\"] = \"ZXY\";\n  return RotationOrder2;\n})(RotationOrder || {});\nexport const ROTATION_ORDERS = [\n  \"XYZ\" /* XYZ */,\n  \"XZY\" /* XZY */,\n  \"YXZ\" /* YXZ */,\n  \"YZX\" /* YZX */,\n  \"ZXY\" /* ZXY */,\n  \"ZYX\" /* ZYX */\n];\nexport const DEFAULT_ROTATION_ORDER = \"XYZ\" /* XYZ */;\nconst eulerArray = [0, 0, 0];\nconst _m = new Matrix4();\nconst _q = new Quaternion();\nconst _rotateDirOrigin = new Vector3();\nconst _rotateDirDest = new Vector3();\nexport function rotationMatrix(dirOrigin, dirDest, target) {\n  _rotateDirDest.copy(dirDest).normalize();\n  _rotateDirOrigin.copy(dirOrigin).normalize();\n  _q.setFromUnitVectors(_rotateDirOrigin, _rotateDirDest);\n  target.makeRotationFromQuaternion(_q);\n}\nexport function rotateGeometry(geometry, dirOrigin, dirDest) {\n  _rotateDirDest.copy(dirDest).normalize();\n  _rotateDirOrigin.copy(dirOrigin).normalize();\n  _q.setFromUnitVectors(_rotateDirOrigin, _rotateDirDest);\n  _m.makeRotationFromQuaternion(_q);\n  geometry.applyMatrix4(_m);\n}\nexport class CoreTransform {\n  constructor() {\n    this._translation_matrix = new Matrix4();\n    this._translation_matrix_q = new Quaternion();\n    this._translation_matrix_s = new Vector3(1, 1, 1);\n    this._matrix = new Matrix4().identity();\n    this._matrixQ = new Quaternion();\n    this._matrixEuler = new Euler();\n    this._matrixS = new Vector3();\n  }\n  static setParamsFromMatrix(matrix, node, options = {}) {\n    let update_scale = options[\"scale\"];\n    if (update_scale == null) {\n      update_scale = true;\n    }\n    matrix.decompose(\n      this.set_params_from_matrix_position,\n      this.set_params_from_matrix_quaternion,\n      this.set_params_from_matrix_scale\n    );\n    this.set_params_from_matrix_euler.setFromQuaternion(this.set_params_from_matrix_quaternion);\n    this.set_params_from_matrix_euler.toArray(eulerArray);\n    this.set_params_from_matrix_rotation.fromArray(eulerArray);\n    this.set_params_from_matrix_rotation.divideScalar(Math.PI / 180);\n    this.set_params_from_matrix_position.toArray(this.set_params_from_matrix_t);\n    this.set_params_from_matrix_rotation.toArray(this.set_params_from_matrix_r);\n    this.set_params_from_matrix_scale.toArray(this.set_params_from_matrix_s);\n    node.scene().batchUpdates(() => {\n      node.params.set_vector3(\"t\", this.set_params_from_matrix_t);\n      node.params.set_vector3(\"r\", this.set_params_from_matrix_r);\n      node.params.set_vector3(\"s\", this.set_params_from_matrix_s);\n      if (update_scale) {\n        node.params.set_float(\"scale\", 1);\n      }\n    });\n  }\n  static setParamsFromObject(object, node) {\n    object.position.toArray(this.set_params_from_object_position_array);\n    object.rotation.toArray(this.set_params_from_object_rotation_array);\n    this.set_params_from_object_rotation_deg.fromArray(this.set_params_from_object_rotation_array);\n    this.set_params_from_object_rotation_deg.multiplyScalar(180 / Math.PI);\n    this.set_params_from_object_rotation_deg.toArray(this.set_params_from_object_rotation_array);\n    node.scene().batchUpdates(() => {\n      node.params.set_vector3(\"t\", this.set_params_from_object_position_array);\n      node.params.set_vector3(\"r\", this.set_params_from_object_rotation_array);\n    });\n  }\n  translationMatrix(t) {\n    this._translation_matrix.compose(t, this._translation_matrix_q, this._translation_matrix_s);\n    return this._translation_matrix;\n  }\n  matrix(t, r, s, scale, rotationOrder) {\n    this._matrixEuler.set(MathUtils.degToRad(r.x), MathUtils.degToRad(r.y), MathUtils.degToRad(r.z), rotationOrder);\n    this._matrixQ.setFromEuler(this._matrixEuler);\n    this._matrixS.copy(s).multiplyScalar(scale);\n    this._matrix.compose(t, this._matrixQ, this._matrixS);\n    return this._matrix;\n  }\n  static rotateObject(object, dirOrigin, dirDest) {\n    _rotateDirDest.copy(dirDest).normalize();\n    _rotateDirOrigin.copy(dirOrigin).normalize();\n    _q.setFromUnitVectors(_rotateDirOrigin, _rotateDirDest);\n    _m.makeRotationFromQuaternion(_q);\n    object.matrix.multiply(_m);\n    object.matrix.decompose(object.position, object.quaternion, object.scale);\n  }\n  static decomposeMatrix(object) {\n    object.matrix.decompose(object.position, object.quaternion, object.scale);\n  }\n}\nCoreTransform.set_params_from_matrix_position = new Vector3();\nCoreTransform.set_params_from_matrix_quaternion = new Quaternion();\nCoreTransform.set_params_from_matrix_scale = new Vector3();\nCoreTransform.set_params_from_matrix_euler = new Euler();\nCoreTransform.set_params_from_matrix_rotation = new Vector3();\nCoreTransform.set_params_from_matrix_t = [0, 0, 0];\nCoreTransform.set_params_from_matrix_r = [0, 0, 0];\nCoreTransform.set_params_from_matrix_s = [0, 0, 0];\nCoreTransform.set_params_from_object_position_array = [0, 0, 0];\nCoreTransform.set_params_from_object_rotation_deg = new Vector3();\nCoreTransform.set_params_from_object_rotation_array = [0, 0, 0];\n", "\"use strict\";\nimport { TypeAssert } from \"../engine/poly/Assert\";\nimport { isObject3D } from \"./geometry/ObjectContent\";\nexport var ObjectTransformSpace = /* @__PURE__ */ ((ObjectTransformSpace2) => {\n  ObjectTransformSpace2[\"PARENT\"] = \"parent\";\n  ObjectTransformSpace2[\"LOCAL\"] = \"local\";\n  return ObjectTransformSpace2;\n})(ObjectTransformSpace || {});\nexport var ObjectTransformMode = /* @__PURE__ */ ((ObjectTransformMode2) => {\n  ObjectTransformMode2[\"SET\"] = \"set matrix\";\n  ObjectTransformMode2[\"MULT\"] = \"multiply matrix\";\n  return ObjectTransformMode2;\n})(ObjectTransformMode || {});\nexport const OBJECT_TRANSFORM_SPACES = [\n  \"parent\" /* PARENT */,\n  \"local\" /* LOCAL */\n];\nexport const OBJECT_TRANSFORM_MODES = [\"set matrix\" /* SET */, \"multiply matrix\" /* MULT */];\nexport const OBJECT_TRANSFORM_SPACE_MENU_ENTRIES = [\n  { name: \"parent\", value: OBJECT_TRANSFORM_SPACES.indexOf(\"parent\" /* PARENT */) },\n  { name: \"local\", value: OBJECT_TRANSFORM_SPACES.indexOf(\"local\" /* LOCAL */) }\n];\nexport function applyTransformWithSpaceToObject(object, matrix, transformSpace, transformMode) {\n  switch (transformSpace) {\n    case \"parent\" /* PARENT */: {\n      if (isObject3D(object)) {\n        object.updateMatrix();\n        object.applyMatrix4(matrix);\n        object.matrix.decompose(object.position, object.quaternion, object.scale);\n      } else {\n        object.applyMatrix4(matrix);\n      }\n      return;\n    }\n    case \"local\" /* LOCAL */: {\n      if (isObject3D(object)) {\n        object.updateMatrix();\n        if (transformMode == \"set matrix\" /* SET */) {\n          object.matrix.copy(matrix);\n        } else {\n          object.matrix.multiply(matrix);\n        }\n        object.matrix.decompose(object.position, object.quaternion, object.scale);\n      } else {\n        object.applyMatrix4(matrix);\n      }\n      return;\n    }\n  }\n  TypeAssert.unreachable(transformSpace);\n}\n", "\"use strict\";\nimport { Vector4, Vector3, Vector2 } from \"three\";\nimport { Attribute, CoreAttribute } from \"../../Attribute\";\nimport { isArray } from \"../../../Type\";\nimport { CoreEntityWithObject } from \"../../CoreEntity\";\nimport { DOT, COMPONENT_INDICES, AttribType, AttribClass } from \"../../Constant\";\nimport { coreObjectInstanceFactory } from \"../../CoreObjectFactory\";\nimport { TypeAssert } from \"../../../../engine/poly/Assert\";\nimport { uniqRelatedEntityIds } from \"../utils/Common\";\nconst _relatedPrimitiveIds = [];\nfunction _warnOverloadRequired(functionName) {\n  console.warn(`CorePoint.${functionName} needs to be overloaded`);\n}\nexport class CorePoint extends CoreEntityWithObject {\n  // protected _object?: ObjectContent<T>;\n  // constructor(object?: ObjectContent<T>, index?: number) {\n  // \tsuper(object, index);\n  // \tthis._object = object;\n  // }\n  builder() {\n    return void 0;\n  }\n  static addAttribute(object, attribName, attribute) {\n    _warnOverloadRequired(\"addAttribute\");\n  }\n  static entitiesCount(object) {\n    return 0;\n  }\n  static attributes(object) {\n    _warnOverloadRequired(\"attributes\");\n    return;\n  }\n  attributes() {\n    return this.constructor.attributes(this._object);\n  }\n  static attribute(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    return attributes[attribName];\n  }\n  attribute(attribName) {\n    return this.constructor.attribute(this._object, attribName);\n  }\n  static attribSize(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return -1;\n    }\n    attribName = CoreAttribute.remapName(attribName);\n    return attributes[attribName].itemSize || 0;\n  }\n  attribSize(attribName) {\n    return this.constructor.attribSize(this._object, attribName);\n  }\n  static hasAttribute(object, attribName) {\n    const remappedName = CoreAttribute.remapName(attribName);\n    return this.attributes(object) ? this.attributes(object)[remappedName] != null : false;\n  }\n  hasAttribute(attribName) {\n    return this.constructor.hasAttribute(this._object, attribName);\n  }\n  //\n  //\n  // INDEXED ATTRIBUTES\n  //\n  //\n  static userDataAttribs(object) {\n    _warnOverloadRequired(\"userDataAttribs\");\n    return {};\n  }\n  userDataAttribs() {\n    return this._object ? this.constructor.userDataAttribs(this._object) : {};\n  }\n  static userDataAttrib(object, attribName) {\n    attribName = CoreAttribute.remapName(attribName);\n    return this.userDataAttribs(object)[attribName];\n  }\n  userDataAttrib(name) {\n    name = CoreAttribute.remapName(name);\n    return this.userDataAttribs()[name];\n  }\n  static attributeNames(object) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return [];\n    }\n    return Object.keys(attributes);\n  }\n  static attributeNamesMatchingMask(object, masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.attributeNames(object));\n  }\n  static indexedAttributeNames(object) {\n    return object ? Object.keys(this.userDataAttribs(object) || {}) : [];\n  }\n  indexedAttributeNames() {\n    return this._object ? this.constructor.indexedAttributeNames(this._object) : [];\n  }\n  static isAttribIndexed(object, attribName) {\n    attribName = CoreAttribute.remapName(attribName);\n    return this.userDataAttrib(object, attribName) != null;\n  }\n  isAttribIndexed(name) {\n    name = CoreAttribute.remapName(name);\n    return this.userDataAttrib(name) != null;\n  }\n  static setIndexedAttributeValues(object, attribName, values) {\n    this.userDataAttribs(object)[attribName] = values;\n  }\n  setIndexedAttributeValues(attribName, values) {\n    return this.constructor.setIndexedAttributeValues(this._object, attribName, values);\n  }\n  static setIndexedAttribute(object, attribName, values, indices) {\n    _warnOverloadRequired(\"setIndexedAttribute\");\n  }\n  setIndexedAttribute(attribName, values, indices) {\n    return this.constructor.setIndexedAttribute(this._object, attribName, values, indices);\n  }\n  //\n  static indexedAttribValue(object, index, attribName) {\n    const valueIndex = this.attribValueIndex(object, index, attribName);\n    const values = this.userDataAttrib(object, attribName);\n    return values ? values[valueIndex] : null;\n  }\n  indexedAttribValue(attribName) {\n    return this.constructor.indexedAttribValue(this._object, this._index, attribName);\n  }\n  static stringAttribValue(object, index, attribName) {\n    return this.indexedAttribValue(object, index, attribName);\n  }\n  stringAttribValue(attribName) {\n    return this.indexedAttribValue(attribName);\n  }\n  static attribValueIndex(object, index, attribName) {\n    _warnOverloadRequired(\"attribValueIndex\");\n    return 0;\n  }\n  attribValueIndex(attribName) {\n    return this.constructor.attribValueIndex(this._object, this._index, attribName);\n  }\n  static attribType(object, attribName) {\n    if (this.isAttribIndexed(object, attribName)) {\n      return AttribType.STRING;\n    } else {\n      return AttribType.NUMERIC;\n    }\n  }\n  attribType(attribName) {\n    return this.constructor.attribType(this._object, attribName);\n  }\n  isStringAttribute(attribName) {\n    return this.attribType(attribName) == AttribType.STRING;\n  }\n  setAttribIndex(attribName, newValueIndex) {\n    const attribute = this.attribute(attribName);\n    if (!attribute) {\n      return;\n    }\n    const array = attribute.array;\n    return array[this._index] = newValueIndex;\n  }\n  //\n  //\n  //\n  //\n  //\n  static renameAttribute(object, oldName, newName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    const attribute = this.attribute(object, oldName);\n    if (!attribute) {\n      return;\n    }\n    attributes[newName] = attribute;\n    delete attributes[oldName];\n  }\n  static deleteAttribute(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    delete attributes[attribName];\n  }\n  //\n  //\n  //\n  //\n  //\n  static attribValue(object, index, attribName, target) {\n    if (attribName === Attribute.POINT_INDEX) {\n      return index;\n    } else {\n      let componentName = null;\n      let componentIndex = null;\n      if (attribName[attribName.length - 2] === DOT) {\n        componentName = attribName[attribName.length - 1];\n        componentIndex = COMPONENT_INDICES[componentName];\n        attribName = attribName.substring(0, attribName.length - 2);\n      }\n      const remapedName = CoreAttribute.remapName(attribName);\n      const attrib = this.attribute(object, remapedName);\n      if (attrib) {\n        const { array } = attrib;\n        if (this.isAttribIndexed(object, remapedName)) {\n          return this.indexedAttribValue(object, index, remapedName);\n        } else {\n          const itemSize = attrib.itemSize;\n          const startIndex = index * itemSize;\n          if (componentIndex == null) {\n            switch (itemSize) {\n              case 1:\n                return array[startIndex];\n                break;\n              case 2:\n                target = target || new Vector2();\n                target.fromArray(array, startIndex);\n                return target;\n                break;\n              case 3:\n                target = target || new Vector3();\n                target.fromArray(array, startIndex);\n                return target;\n                break;\n              case 4:\n                target = target || new Vector4();\n                target.fromArray(array, startIndex);\n                return target;\n                break;\n              default:\n                throw `size not valid (${itemSize})`;\n            }\n          } else {\n            switch (itemSize) {\n              case 1:\n                return array[startIndex];\n                break;\n              default:\n                return array[startIndex + componentIndex];\n            }\n          }\n        }\n      } else {\n        const attributesDict = this.attributes() || {};\n        const attribNames = Object.keys(attributesDict);\n        const message = `attrib ${attribName} not found. availables are: ${attribNames.join(\",\")}`;\n        console.warn(message);\n        throw message;\n      }\n    }\n  }\n  attribValue(attribName, target) {\n    return this.constructor.attribValue(this._object, this._index, attribName, target);\n  }\n  attribValueNumber(attribName) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return 0;\n    }\n    return attrib.array[this._index];\n  }\n  attribValueVector2(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 2);\n    return target;\n  }\n  attribValueVector3(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 3);\n    return target;\n  }\n  attribValueVector4(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 4);\n    return target;\n  }\n  position(target) {\n    _warnOverloadRequired(\"position\");\n    return target;\n  }\n  setPosition(newPosition) {\n    this.setAttribValueFromVector3(Attribute.POSITION, newPosition);\n  }\n  normal(target) {\n    _warnOverloadRequired(\"normal\");\n    return target;\n  }\n  setNormal(newNormal) {\n    return this.setAttribValueFromVector3(Attribute.NORMAL, newNormal);\n  }\n  static computeNormals(object) {\n    _warnOverloadRequired(\"computeNormals\");\n  }\n  setAttribValue(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    const array = attrib.array;\n    const attribSize = attrib.itemSize;\n    if (isArray(value)) {\n      for (let i = 0; i < attribSize; i++) {\n        array[this._index * attribSize + i] = value[i];\n      }\n      return;\n    }\n    switch (attribSize) {\n      case 1:\n        array[this._index] = value;\n        break;\n      case 2:\n        const v2 = value;\n        const i2 = this._index * 2;\n        array[i2 + 0] = v2.x;\n        array[i2 + 1] = v2.y;\n        break;\n      case 3:\n        const isColor = value.r != null;\n        const i3 = this._index * 3;\n        if (isColor) {\n          const col = value;\n          array[i3 + 0] = col.r;\n          array[i3 + 1] = col.g;\n          array[i3 + 2] = col.b;\n        } else {\n          const v3 = value;\n          array[i3 + 0] = v3.x;\n          array[i3 + 1] = v3.y;\n          array[i3 + 2] = v3.z;\n        }\n        break;\n      case 4:\n        const v4 = value;\n        const i4 = this._index * 4;\n        array[i4 + 0] = v4.x;\n        array[i4 + 1] = v4.y;\n        array[i4 + 2] = v4.z;\n        array[i4 + 3] = v4.w;\n        break;\n      default:\n        console.warn(`CorePoint.setAttribValue does not yet allow attrib size ${attribSize}`);\n        throw `attrib size ${attribSize} not implemented`;\n    }\n  }\n  setAttribValueFromNumber(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    const array = attrib.array;\n    array[this._index] = value;\n  }\n  setAttribValueFromVector2(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || this.isStringAttribute(attribName)) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 2);\n  }\n  setAttribValueFromVector3(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || this.isStringAttribute(attribName)) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 3);\n  }\n  setAttribValueFromVector4(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || this.isStringAttribute(attribName)) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 4);\n  }\n  //\n  static addAttributeFromAttribData(object, attribName, attribData) {\n    switch (attribData.type()) {\n      case AttribType.STRING:\n        return console.log(\"TODO: to implement\");\n      case AttribType.NUMERIC:\n        return this.addNumericAttribute(object, attribName, attribData.size());\n    }\n  }\n  static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {\n    _warnOverloadRequired(\"addNumericAttribute\");\n  }\n  //\n  static markAttribAsNeedsUpdate(object, attribName) {\n    _warnOverloadRequired(\"markAttribAsNeedsUpdate\");\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static relatedPrimitiveIds(object, pointIndex, target, traversedRelatedEntityData) {\n    const ids = traversedRelatedEntityData ? traversedRelatedEntityData[AttribClass.VERTEX].ids : _relatedPrimitiveIds;\n    this.relatedVertexIds(object, pointIndex, ids);\n    uniqRelatedEntityIds(\n      ids,\n      (vertexId, relatedEntityIds) => {\n        this.relatedVertexClass(object).relatedPrimitiveIds(object, vertexId, relatedEntityIds);\n      },\n      target\n    );\n  }\n  static relatedPrimitiveClass(object) {\n    return this.relatedVertexClass(object).relatedPrimitiveClass(object);\n  }\n  static relatedObjectClass(object) {\n    return this.relatedPrimitiveClass(object).relatedObjectClass(object);\n  }\n  relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {\n    switch (attribClass) {\n      case AttribClass.POINT: {\n        target.length = 1;\n        target[0] = this;\n        return;\n      }\n      case AttribClass.VERTEX: {\n        return this.relatedVertices(target, traversedRelatedEntityData);\n      }\n      case AttribClass.PRIMITIVE: {\n        return this.relatedPrimitives(target, traversedRelatedEntityData);\n      }\n      case AttribClass.OBJECT: {\n        if (this._object) {\n          target.length = 1;\n          target[0] = coreObjectInstanceFactory(this._object);\n        } else {\n          target.length = 0;\n        }\n        return;\n      }\n      case AttribClass.CORE_GROUP: {\n        target.length = 1;\n        target[0] = coreGroup;\n        return;\n      }\n    }\n    TypeAssert.unreachable(attribClass);\n  }\n}\n", "\"use strict\";\nexport var QUADObjectType = /* @__PURE__ */ ((QUADObjectType2) => {\n  QUADObjectType2[\"DEFAULT\"] = \"Quad\";\n  return QUADObjectType2;\n})(QUADObjectType || {});\nconst QUAD_OBJECT_TYPES = [\"Quad\" /* DEFAULT */];\nexport const QUAD_OBJECT_TYPES_SET = new Set(QUAD_OBJECT_TYPES);\nexport var QuadTriangulationAttribute = /* @__PURE__ */ ((QuadTriangulationAttribute2) => {\n  QuadTriangulationAttribute2[\"INNER_RADIUS\"] = \"innerRadius\";\n  QuadTriangulationAttribute2[\"OUTER_RADIUS\"] = \"outerRadius\";\n  return QuadTriangulationAttribute2;\n})(QuadTriangulationAttribute || {});\n", "\"use strict\";\nimport { isObject3D } from \"../../ObjectContent\";\nimport { QUAD_OBJECT_TYPES_SET } from \"./QuadCommon\";\nexport function isQuadObject(o) {\n  return QUAD_OBJECT_TYPES_SET.has(o.type);\n}\nexport function isQuadOrThreejsObject(o) {\n  return isQuadObject(o) || isObject3D(o);\n}\n", "\"use strict\";\nimport { BufferAttribute } from \"three\";\nimport { isObject3D } from \"./ObjectContent\";\nimport { isQuadObject } from \"./modules/quad/QuadCoreType\";\nimport { InstanceAttrib } from \"./Instancer\";\nexport function bufferGeometryMaxGroupEnd(geometry) {\n  const groups = geometry.groups;\n  let max = -1;\n  for (const group of groups) {\n    const groupEnd = group.start + group.count;\n    if (groupEnd > max) {\n      max = groupEnd;\n    }\n  }\n  return max;\n}\nexport function truncateBufferGeometry(geometry, maxCount) {\n  const attributeNames = Object.keys(geometry.attributes);\n  for (const attributeName of attributeNames) {\n    const attribute = geometry.getAttribute(attributeName);\n    const originalArray = attribute.array;\n    const itemSize = attribute.itemSize;\n    const expectedArraySize = maxCount * itemSize;\n    const newArray = originalArray.slice(0, expectedArraySize);\n    geometry.setAttribute(attributeName, new BufferAttribute(new Float32Array(newArray), itemSize));\n  }\n}\nexport function object3DHasGeometry(o) {\n  return o.geometry != null;\n}\nexport function objectContentHasGeometry(o) {\n  if (isQuadObject(o)) {\n    return true;\n  }\n  if (isObject3D(o)) {\n    return o.geometry != null;\n  }\n  return false;\n}\nexport function markedAsInstance(geometry) {\n  return geometry.getAttribute(InstanceAttrib.POSITION) != null;\n}\n", "\"use strict\";\nimport { Mesh } from \"three\";\nimport { markedAsInstance } from \"../../GeometryUtils\";\nimport { InstanceAttrib } from \"../../Instancer\";\nimport { Attribute } from \"../../Attribute\";\nimport { ThreejsPoint } from \"./ThreejsPoint\";\nconst dummyMesh = new Mesh();\nexport function positionAttributeNameFromBufferGeometry(geometry) {\n  return markedAsInstance(geometry) ? InstanceAttrib.POSITION : Attribute.POSITION;\n}\nexport function pointsCountFromBufferGeometry(geometry) {\n  const attribName = positionAttributeNameFromBufferGeometry(geometry);\n  if (!attribName) {\n    return 0;\n  }\n  const positionAttribute = geometry.getAttribute(attribName);\n  if (!positionAttribute) {\n    return 0;\n  }\n  return positionAttribute.count;\n}\nexport function pointsFromBufferGeometry(geometry) {\n  dummyMesh.geometry = geometry;\n  const pointsCount = pointsCountFromBufferGeometry(geometry);\n  const points = new Array(pointsCount);\n  for (let i = 0; i < pointsCount; i++) {\n    points[i] = new ThreejsPoint(dummyMesh, i);\n  }\n  return points;\n}\n", "\"use strict\";\nimport { Vector4, Vector3, Vector2 } from \"three\";\nimport { Attribute, CoreAttribute } from \"../../Attribute\";\nimport { CoreEntityWithObject } from \"../../CoreEntity\";\nimport { CoreType } from \"../../../Type\";\nimport { DOT, COMPONENT_INDICES, AttribClass, AttribType } from \"../../Constant\";\nimport { TypeAssert } from \"../../../../engine/poly/Assert\";\nfunction _warnOverloadRequired(functionName) {\n  console.warn(`CoreVertex.${functionName} needs to be overloaded`);\n}\nexport class CoreVertex extends CoreEntityWithObject {\n  builder() {\n    return void 0;\n  }\n  static addAttribute(object, attribName, attribute) {\n    _warnOverloadRequired(\"addAttribute\");\n  }\n  static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {\n    _warnOverloadRequired(\"addNumericAttribute\");\n  }\n  static entitiesCount(object) {\n    return 0;\n  }\n  static attributes(object) {\n    _warnOverloadRequired(\"attributes\");\n    return;\n  }\n  attributes() {\n    return this.constructor.attributes(this._object);\n  }\n  static attribute(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    return attributes[attribName];\n  }\n  attribute(attribName) {\n    return this.constructor.attribute(this._object, attribName);\n  }\n  static indexAttribute(object) {\n    _warnOverloadRequired(\"indexAttribute\");\n    return;\n  }\n  static setIndexAttribute(object, index) {\n    console.warn(\"CoreVertex.setIndexAttribute needs to be overloaded\");\n    return;\n  }\n  static renameAttribute(object, oldName, newName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    const attribute = this.attribute(object, oldName);\n    if (!attribute) {\n      return;\n    }\n    attributes[newName] = attribute;\n    delete attributes[oldName];\n  }\n  static deleteAttribute(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    delete attributes[attribName];\n  }\n  static attribSize(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return -1;\n    }\n    attribName = CoreAttribute.remapName(attribName);\n    return attributes[attribName].itemSize || 0;\n  }\n  attribSize(attribName) {\n    return this.constructor.attribSize(this._object, attribName);\n  }\n  static hasAttribute(object, attribName) {\n    return this.attribute(object, attribName) != null;\n  }\n  hasAttribute(attribName) {\n    return this.constructor.hasAttribute(this._object, attribName);\n  }\n  static attributeNames(object) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return [];\n    }\n    return Object.keys(attributes);\n  }\n  static attributeNamesMatchingMask(object, masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.attributeNames(object));\n  }\n  static attribValue(object, index, attribName, target) {\n    if (attribName === Attribute.VERTEX_INDEX) {\n      return index;\n    } else {\n      let componentName = null;\n      let componentIndex = null;\n      if (attribName[attribName.length - 2] === DOT) {\n        componentName = attribName[attribName.length - 1];\n        componentIndex = COMPONENT_INDICES[componentName];\n        attribName = attribName.substring(0, attribName.length - 2);\n      }\n      const remapedName = CoreAttribute.remapName(attribName);\n      const attrib = this.attribute(object, remapedName);\n      if (attrib) {\n        const { array } = attrib;\n        const itemSize = attrib.itemSize;\n        const startIndex = index * itemSize;\n        if (componentIndex == null) {\n          switch (itemSize) {\n            case 1:\n              return array[startIndex];\n              break;\n            case 2:\n              target = target || new Vector2();\n              target.fromArray(array, startIndex);\n              return target;\n              break;\n            case 3:\n              target = target || new Vector3();\n              target.fromArray(array, startIndex);\n              return target;\n              break;\n            case 4:\n              target = target || new Vector4();\n              target.fromArray(array, startIndex);\n              return target;\n              break;\n            default:\n              throw `size not valid (${itemSize})`;\n          }\n        } else {\n          switch (itemSize) {\n            case 1:\n              return array[startIndex];\n              break;\n            default:\n              return array[startIndex + componentIndex];\n          }\n        }\n      } else {\n        const attributesDict = this.attributes() || {};\n        const attribNames = Object.keys(attributesDict);\n        const message = `attrib ${attribName} not found. availables are: ${attribNames.join(\",\")}`;\n        console.warn(message);\n        throw message;\n      }\n    }\n  }\n  attribValue(attribName, target) {\n    return this.constructor.attribValue(this._object, this._index, attribName, target);\n  }\n  attribValueNumber(attribName) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return 0;\n    }\n    return attrib.array[this._index];\n  }\n  attribValueVector2(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 2);\n    return target;\n  }\n  attribValueVector3(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 3);\n    return target;\n  }\n  attribValueVector4(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 4);\n    return target;\n  }\n  static attribType(object, attribName) {\n    const attribute = object ? this.attribute(object, attribName) : null;\n    if (attribute && (attribute == null ? void 0 : attribute.isString) == true) {\n      return AttribType.STRING;\n    } else {\n      return AttribType.NUMERIC;\n    }\n  }\n  attribType(attribName) {\n    return this.constructor.attribType(this._object, attribName);\n  }\n  static stringAttribValue(object, index, attribName) {\n    return this.attribValue(object, index, attribName);\n  }\n  stringAttribValue(attribName) {\n    return this.attribValue(attribName);\n  }\n  position(target) {\n    _warnOverloadRequired(\"position\");\n    return target;\n  }\n  setPosition(newPosition) {\n    this.setAttribValueFromVector3(Attribute.POSITION, newPosition);\n  }\n  normal(target) {\n    _warnOverloadRequired(\"normal\");\n    return target;\n  }\n  setNormal(newNormal) {\n    return this.setAttribValueFromVector3(Attribute.NORMAL, newNormal);\n  }\n  setAttribValue(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      console.warn(`no attribute ${attribName}`);\n      return;\n    }\n    const array = attrib.array;\n    const attribSize = attrib.itemSize;\n    if (CoreType.isArray(value)) {\n      for (let i = 0; i < attribSize; i++) {\n        array[this._index * attribSize + i] = value[i];\n      }\n      return;\n    }\n    switch (attribSize) {\n      case 1:\n        array[this._index] = value;\n        break;\n      case 2:\n        const v2 = value;\n        const i2 = this._index * 2;\n        array[i2 + 0] = v2.x;\n        array[i2 + 1] = v2.y;\n        break;\n      case 3:\n        const isColor = value.r != null;\n        const i3 = this._index * 3;\n        if (isColor) {\n          const col = value;\n          array[i3 + 0] = col.r;\n          array[i3 + 1] = col.g;\n          array[i3 + 2] = col.b;\n        } else {\n          const v3 = value;\n          array[i3 + 0] = v3.x;\n          array[i3 + 1] = v3.y;\n          array[i3 + 2] = v3.z;\n        }\n        break;\n      case 4:\n        const v4 = value;\n        const i4 = this._index * 4;\n        array[i4 + 0] = v4.x;\n        array[i4 + 1] = v4.y;\n        array[i4 + 2] = v4.z;\n        array[i4 + 3] = v4.w;\n        break;\n      default:\n        console.warn(`CoreVertex.setAttribValue does not yet allow attrib size ${attribSize}`);\n        throw `attrib size ${attribSize} not implemented`;\n    }\n  }\n  setAttribValueFromNumber(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    const array = attrib.array;\n    array[this._index] = value;\n  }\n  setAttribValueFromVector2(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || attrib.isString == true) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 2);\n  }\n  setAttribValueFromVector3(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || attrib.isString == true) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 3);\n  }\n  setAttribValueFromVector4(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || attrib.isString == true) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 4);\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static relatedObjectClass(object) {\n    return this.relatedPrimitiveClass(object).relatedObjectClass(object);\n  }\n  relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {\n    switch (attribClass) {\n      case AttribClass.POINT: {\n        this.relatedPoints(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.VERTEX: {\n        target.length = 1;\n        target[0] = this;\n        return;\n      }\n      case AttribClass.PRIMITIVE: {\n        this.relatedPrimitives(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.OBJECT: {\n        this.relatedObjects(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.CORE_GROUP: {\n        target.length = 1;\n        target[0] = coreGroup;\n        return;\n      }\n    }\n    TypeAssert.unreachable(attribClass);\n  }\n}\n", "\"use strict\";\nimport { arrayPushItems } from \"../../../ArrayUtils\";\nimport { stringToIndices } from \"../../../String\";\nimport { AttribType } from \"../../Constant\";\nimport { coreVertexClassFactory, coreVertexInstanceFactory } from \"../../CoreObjectFactory\";\nconst _indices = [];\nconst _tmpVertices = [];\nexport function vertices(coreGroup, target) {\n  const allObjects = coreGroup.allObjects();\n  target.length = 0;\n  for (const object of allObjects) {\n    verticesFromObject(object, _tmpVertices);\n    arrayPushItems(_tmpVertices, target);\n  }\n  return target;\n}\nexport function vertexAttribNamesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return vertexAttributeNames(firstObject);\n  } else {\n    return [];\n  }\n}\nexport function vertexAttribSizesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return vertexAttributeSizes(firstObject);\n  } else {\n    return {};\n  }\n}\nexport function vertexAttribTypesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return vertexAttributeTypes(firstObject);\n  } else {\n    return {};\n  }\n}\nexport function verticesCountFromObject(object) {\n  const vertexClass = coreVertexClassFactory(object);\n  return vertexClass.entitiesCount(object);\n}\nexport function verticesFromObject(object, target) {\n  const vertexClass = coreVertexClassFactory(object);\n  const verticesCount = vertexClass.entitiesCount(object);\n  target.length = verticesCount;\n  for (let i = 0; i < verticesCount; i++) {\n    target[i] = coreVertexInstanceFactory(object, i);\n  }\n  return target;\n}\nexport function verticesFromObjectFromGroup(object, group, target) {\n  if (group) {\n    target.length = 0;\n    stringToIndices(group, _indices);\n    verticesFromObject(object, _tmpVertices);\n    for (const index of _indices) {\n      const vertex = _tmpVertices[index];\n      if (vertex) {\n        target.push(vertex);\n      }\n    }\n    return target;\n  } else {\n    return verticesFromObject(object, target);\n  }\n}\nexport function vertexAttributeNames(object) {\n  const vertexClass = coreVertexClassFactory(object);\n  const attributes = vertexClass.attributes(object);\n  if (!attributes) {\n    return [];\n  }\n  return Object.keys(attributes);\n}\nexport function vertexAttributeSizes(object) {\n  const vertexClass = coreVertexClassFactory(object);\n  const attributes = vertexClass.attributes(object);\n  if (!attributes) {\n    return {};\n  }\n  const attribNames = Object.keys(attributes);\n  const h = {};\n  for (const attribName of attribNames) {\n    h[attribName] = attributes[attribName].itemSize;\n  }\n  return h;\n}\nexport function vertexAttributeTypes(object) {\n  const vertexClass = coreVertexClassFactory(object);\n  const attributes = vertexClass.attributes(object);\n  if (!attributes) {\n    return {};\n  }\n  const attribNames = Object.keys(attributes);\n  const h = {};\n  for (const attribName of attribNames) {\n    h[attribName] = attributes[attribName].isString == true ? AttribType.STRING : AttribType.NUMERIC;\n  }\n  return h;\n}\n", "\"use strict\";\nimport { CoreVertex } from \"../../entities/vertex/CoreVertex\";\nimport { verticesCountFromObject } from \"../../entities/vertex/CoreVertexUtils\";\nimport { primitiveClassFactoryNonAbstract, primitiveVerticesCountFactory } from \"./ThreeModule\";\nimport { ThreejsPoint } from \"./ThreejsPoint\";\nimport { attributeNumericValues } from \"../../entities/utils/Common\";\nconst target = {\n  attributeAdded: false,\n  values: []\n};\nexport class ThreejsVertex extends CoreVertex {\n  constructor(object, index) {\n    super(object, index);\n    this._updateGeometry();\n  }\n  setIndex(index, object) {\n    this._index = index;\n    if (object) {\n      this._object = object;\n      this._updateGeometry();\n    }\n    return this;\n  }\n  _updateGeometry() {\n    const geometry = this._object.geometry;\n    if (geometry) {\n      this._geometry = geometry;\n    }\n  }\n  geometry() {\n    return this._geometry;\n  }\n  static addAttribute(object, attribName, attribute) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    attributes[attribName] = attribute;\n  }\n  static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {\n    const verticesCount = this.entitiesCount(object);\n    target.values = new Array(verticesCount * size);\n    attributeNumericValues(object, verticesCountFromObject, size, defaultValue, target);\n    const attribute = {\n      isString: false,\n      array: target.values,\n      itemSize: size\n    };\n    this.addAttribute(object, attribName, attribute);\n  }\n  static attributes(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    if (!geometry.userData.vertexAttributes) {\n      geometry.userData.vertexAttributes = {};\n    }\n    return geometry.userData.vertexAttributes;\n  }\n  static indexAttribute(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    return geometry.getIndex();\n  }\n  static setIndexAttribute(object, index) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    geometry.setIndex(index);\n  }\n  static entitiesCount(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return 0;\n    }\n    const index = geometry.getIndex();\n    if (!index) {\n      return 0;\n    }\n    return index.count;\n  }\n  position(target2) {\n    console.warn(\"CoreThreejsVertex.position not implemented\");\n    return target2;\n  }\n  normal(target2) {\n    console.warn(\"CoreThreejsVertex.normal not implemented\");\n    return target2;\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static relatedPrimitiveIds(object, pointIndex, target2) {\n    target2.length = 1;\n    const index = Math.floor(pointIndex / primitiveVerticesCountFactory(object));\n    target2[0] = index;\n  }\n  // static override  relatedPrimitives<T extends CoreObjectType>(object:BaseCoreObject<T>,vertexIndex:number,target: CorePrimitive<T>[]): void {\n  // \tthis.relatedPrimitiveIds(object,vertexIndex,_ids)\n  // \ttarget.length = _ids.length;\n  // \tlet i=0\n  // \tfor(const id of _ids){\n  // \t\ttarget[i]=(primitiveInstanceFactory(object as any as Mesh,id)) as CorePrimitive<T>\n  // \t\ti++\n  // \t}\n  // }\n  // override relatedPrimitives<T extends CoreObjectType>(target: CorePrimitive<T>[]): void {\n  // \ttarget.length = 0;\n  // \tif (!this._object) {\n  // \t\treturn;\n  // \t}\n  // \tconst index = Math.floor(this._index / primitiveVerticesCountFactory(this._object));\n  // \tconst primitive = primitiveInstanceFactory(this._object, index) as CorePrimitive<T> | undefined;\n  // \tif (!primitive) {\n  // \t\treturn;\n  // \t}\n  // \ttarget.push(primitive);\n  // }\n  static relatedPointIds(object, pointIndex, target2) {\n    target2.length = 0;\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    const index = geometry.getIndex();\n    if (!index) {\n      return;\n    }\n    const indexArray = index.array;\n    const indexValue = indexArray[pointIndex];\n    target2[0] = indexValue;\n  }\n  static relatedPointClass(object) {\n    return ThreejsPoint;\n  }\n  static relatedPrimitiveClass(object) {\n    return primitiveClassFactoryNonAbstract(object);\n  }\n}\n", "\"use strict\";\nimport {\n  Float32BufferAttribute,\n  Int32BufferAttribute,\n  InstancedBufferAttribute\n} from \"three\";\nimport { CorePoint } from \"../../entities/point/CorePoint\";\nimport { Attribute } from \"../../Attribute\";\nimport { objectCloneDeep } from \"../../../ObjectUtils\";\nimport { markedAsInstance } from \"../../GeometryUtils\";\nimport { pointsCountFromBufferGeometry, positionAttributeNameFromBufferGeometry } from \"./CoreThreejsPointUtils\";\nimport { attributeNumericValues } from \"../../entities/utils/Common\";\nimport { ThreejsVertex } from \"./ThreejsVertex\";\nimport { pointsCountFromObject } from \"../../entities/point/CorePointUtils\";\nconst INDEX_ATTRIB_VALUES = \"indexedAttribValues\";\nconst target = {\n  attributeAdded: false,\n  values: []\n};\nexport class ThreejsPoint extends CorePoint {\n  constructor(object, index) {\n    super(object, index);\n    this._updateGeometry();\n  }\n  setIndex(index, object) {\n    this._index = index;\n    if (object) {\n      this._object = object;\n      this._updateGeometry();\n    }\n    return this;\n  }\n  _updateGeometry() {\n    const geometry = this._object.geometry;\n    if (geometry) {\n      this._geometry = geometry;\n    }\n  }\n  geometry() {\n    return this._geometry;\n  }\n  static addAttribute(object, attribName, attribute) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    geometry.setAttribute(attribName, attribute);\n  }\n  static attributes(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    return geometry.attributes;\n  }\n  static entitiesCount(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return 0;\n    }\n    return pointsCountFromBufferGeometry(geometry);\n  }\n  static positionAttributeName(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return null;\n    }\n    return positionAttributeNameFromBufferGeometry(geometry);\n  }\n  static position(object, index, target2) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return null;\n    }\n    const { array } = geometry.getAttribute(Attribute.POSITION);\n    return target2.fromArray(array, index * 3);\n  }\n  position(target2) {\n    if (!this._geometry) {\n      return target2;\n    }\n    const { array } = this._geometry.getAttribute(Attribute.POSITION);\n    return target2.fromArray(array, this._index * 3);\n  }\n  normal(target2) {\n    if (!this._geometry) {\n      return target2;\n    }\n    const { array } = this._geometry.getAttribute(Attribute.NORMAL);\n    return target2.fromArray(array, this._index * 3);\n  }\n  static computeNormals(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return null;\n    }\n    geometry.computeVertexNormals();\n  }\n  static markAttribAsNeedsUpdate(object, attribName) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return null;\n    }\n    const attribute = geometry.getAttribute(attribName);\n    if (!attribute) {\n      return;\n    }\n    attribute.needsUpdate = true;\n  }\n  //\n  //\n  //\n  //\n  //\n  static userDataAttribs(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return {};\n    }\n    return geometry.userData[INDEX_ATTRIB_VALUES] = geometry.userData[INDEX_ATTRIB_VALUES] || {};\n  }\n  static setIndexedAttribute(object, attribName, values, indices) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    this.setIndexedAttributeValues(object, attribName, values);\n    geometry.setAttribute(attribName, new Int32BufferAttribute(indices, 1));\n    geometry.getAttribute(attribName).needsUpdate = true;\n  }\n  static attribValueIndex(object, index, attribName) {\n    if (this.isAttribIndexed(object, attribName)) {\n      const geometry = object.geometry;\n      if (geometry) {\n        return geometry.getAttribute(attribName).array[index];\n      }\n    }\n    return -1;\n  }\n  //\n  //\n  //\n  //\n  //\n  static renameAttribute(object, oldName, newName) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    if (this.isAttribIndexed(object, oldName)) {\n      this.userDataAttribs(object)[newName] = objectCloneDeep(this.userDataAttribs(object)[oldName]);\n      delete this.userDataAttribs(object)[oldName];\n    }\n    const oldAttrib = geometry.getAttribute(oldName);\n    geometry.setAttribute(newName, new Float32BufferAttribute(oldAttrib.array, oldAttrib.itemSize));\n    return geometry.deleteAttribute(oldName);\n  }\n  static deleteAttribute(object, attribName) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    if (this.isAttribIndexed(object, attribName)) {\n      delete this.userDataAttribs(object)[attribName];\n    }\n    return geometry.deleteAttribute(attribName);\n  }\n  static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    attributeNumericValues(object, pointsCountFromObject, size, defaultValue, target);\n    if (target.attributeAdded) {\n      if (markedAsInstance(geometry)) {\n        const valuesAsTypedArray = new Float32Array(target.values);\n        geometry.setAttribute(attribName.trim(), new InstancedBufferAttribute(valuesAsTypedArray, size));\n      } else {\n        geometry.setAttribute(attribName.trim(), new Float32BufferAttribute(target.values, size));\n      }\n    } else {\n      console.warn(defaultValue);\n      throw `CoreThreejsPoint.addNumericAttrib error: no other default value allowed for now (default given: ${defaultValue})`;\n    }\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static relatedVertexIds(object, pointIndex, target2, traversedRelatedEntityData) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    const index = geometry.getIndex();\n    if (!index) {\n      return;\n    }\n    const indexArray = index.array;\n    let i = 0;\n    for (const indexValue of indexArray) {\n      if (indexValue == pointIndex) {\n        target2.push(i);\n      }\n      i++;\n    }\n  }\n  static relatedVertexClass(object) {\n    return ThreejsVertex;\n  }\n}\n", "\"use strict\";\nimport { objectCloneDeep } from \"../ObjectUtils\";\nexport function cloneBufferGeometry(srcGeometry) {\n  const clonedGeometry = srcGeometry.clone();\n  if (srcGeometry.userData) {\n    clonedGeometry.userData = objectCloneDeep(srcGeometry.userData);\n  }\n  return clonedGeometry;\n}\n", "\"use strict\";\nimport { ParamType } from \"../../../../poly/ParamType\";\nimport { NodeContext } from \"../../../../poly/NodeContext\";\nexport class BaseParamConfig {\n  // private _texture_loader: CoreTextureLoader\n  constructor(_type, _name, _defaultValue) {\n    this._type = _type;\n    this._name = _name;\n    this._defaultValue = _defaultValue;\n    if (_name == \"\" || _name == null) {\n      throw new Error(`name must not be an empty string`);\n    }\n  }\n  static fromParam(param) {\n    return new BaseParamConfig(param.type(), param.name(), param.defaultValue());\n  }\n  type() {\n    return this._type;\n  }\n  name() {\n    return this._name;\n  }\n  defaultValue() {\n    return this._defaultValue;\n  }\n  paramOptions() {\n    const callbackBound = this._callback.bind(this);\n    switch (this._type) {\n      case ParamType.NODE_PATH:\n        return { callback: callbackBound, nodeSelection: { context: NodeContext.COP } };\n      default:\n        return { callback: callbackBound };\n    }\n  }\n  applyToNode(node) {\n    if (!node.params.has(this._name)) {\n      return;\n    }\n    const param = node.params.get(this._name);\n    if (!param) {\n      return;\n    }\n    const additionalOptions = this.paramOptions();\n    const additionalOptionNames = Object.keys(additionalOptions);\n    for (const optionName of additionalOptionNames) {\n      param.options.setOption(optionName, additionalOptions[optionName]);\n    }\n    this.executeCallback(node, param);\n    if (param.type() == ParamType.NODE_PATH) {\n      setTimeout(async () => {\n        if (param.isDirty()) {\n          await param.compute();\n        }\n        param.options.executeCallback();\n      }, 200);\n    }\n  }\n  executeCallback(node, param) {\n    this._callback(node, param);\n  }\n  _callback(node, param) {\n  }\n}\n", "\"use strict\";\nimport { Color, Vector2, Vector3, Vector4 } from \"three\";\nimport { ParamType } from \"../../../../poly/ParamType\";\nimport { TypeAssert } from \"../../../../poly/Assert\";\nimport { BaseParamConfig } from \"../../../utils/code/configs/BaseParamConfig\";\nimport { NodeContext } from \"../../../../poly/NodeContext\";\nexport class GlParamConfig extends BaseParamConfig {\n  constructor(_type, _name, _defaultValue, _uniformName) {\n    super(_type, _name, _defaultValue);\n    this._uniformName = _uniformName;\n  }\n  toJSON() {\n    return {\n      type: this._type,\n      name: this._name,\n      defaultValue: this._defaultValue,\n      uniformName: this._uniformName\n    };\n  }\n  static fromJSON(json) {\n    return new GlParamConfig(json.type, json.name, json.defaultValue, json.uniformName);\n  }\n  uniformName() {\n    return this._uniformName;\n  }\n  uniform() {\n    return this._uniform = this._uniform || this._createUniform();\n  }\n  _createUniform() {\n    return GlParamConfig.uniformByType(this._type);\n  }\n  _callback(node, param) {\n    GlParamConfig.callback(param, this.uniform());\n  }\n  static callback(param, uniform) {\n    switch (param.type()) {\n      case ParamType.RAMP:\n        uniform.value = param.rampTexture();\n        return;\n      case ParamType.NODE_PATH:\n        GlParamConfig.setUniformValueFromTextureFromNodePathParam(param, uniform);\n        return;\n      default:\n        uniform.value = param.value;\n    }\n  }\n  // TODO: refactor that to use the default values map?\n  static uniformByType(type) {\n    switch (type) {\n      case ParamType.BOOLEAN:\n        return { value: 0 };\n      case ParamType.BUTTON:\n        return { value: 0 };\n      case ParamType.COLOR:\n        return { value: new Color(0, 0, 0) };\n      case ParamType.FLOAT:\n        return { value: 0 };\n      case ParamType.FOLDER:\n        return { value: 0 };\n      case ParamType.INTEGER:\n        return { value: 0 };\n      case ParamType.NODE_PATH:\n        return { value: 0 };\n      case ParamType.PARAM_PATH:\n        return { value: 0 };\n      case ParamType.RAMP:\n        return { value: null };\n      case ParamType.STRING:\n        return { value: null };\n      case ParamType.VECTOR2:\n        return { value: new Vector2(0, 0) };\n      case ParamType.VECTOR3:\n        return { value: new Vector3(0, 0, 0) };\n      case ParamType.VECTOR4:\n        return { value: new Vector4(0, 0, 0, 0) };\n    }\n    TypeAssert.unreachable(type);\n  }\n  // private static set_uniform_value_from_texture(param: OperatorPathParam, uniform: IUniform) {\n  // \tconst found_node = param.found_node();\n  // \tif (found_node) {\n  // \t\tif (found_node.isDirty()) {\n  // \t\t\tfound_node.compute().then((container) => {\n  // \t\t\t\tconst texture = container.texture();\n  // \t\t\t\tuniform.value = texture;\n  // \t\t\t});\n  // \t\t} else {\n  // \t\t\tconst container = found_node.containerController.container();\n  // \t\t\tconst texture = container.texture();\n  // \t\t\tuniform.value = texture;\n  // \t\t}\n  // \t} else {\n  // \t\tuniform.value = null;\n  // \t}\n  // }\n  static async setUniformValueFromTextureFromNodePathParam(param, uniform) {\n    if (param.isDirty()) {\n      await param.compute();\n    }\n    const node = param.value.nodeWithContext(NodeContext.COP);\n    if (node) {\n      if (node.isDirty()) {\n        await node.compute();\n      }\n      const container = node.containerController.container();\n      const texture = container.texture();\n      uniform.value = texture;\n    } else {\n      uniform.value = null;\n    }\n  }\n}\n", "\"use strict\";\nimport { GlParamConfig } from \"../../utils/GLParamConfig\";\nexport function cloneOnBeforeCompileData(data, options) {\n  const { clonedParamConfigName } = options;\n  let { clonedParamConfig } = options;\n  const json = OnBeforeCompileDataConverter.toJSON(data);\n  const clonedData = OnBeforeCompileDataConverter.fromJSON(json);\n  const preservedParamConfigs = data.paramConfigs.filter((p) => p.name() != clonedParamConfigName);\n  if (!clonedParamConfig) {\n    clonedParamConfig = clonedData.paramConfigs.find((p) => p.name() == clonedParamConfigName);\n  }\n  const paramConfigs = preservedParamConfigs;\n  if (clonedParamConfig) {\n    paramConfigs.push(clonedParamConfig);\n  }\n  return {\n    ...clonedData,\n    paramConfigs\n  };\n}\nexport function assignUniformViaUserData(material, uniformName, newUniform) {\n  const uniforms = MaterialUserDataUniforms.getUniforms(material);\n  if (uniforms) {\n    const currentUniform = uniforms[uniformName];\n    if (currentUniform) {\n      currentUniform.value = newUniform.value;\n    } else {\n      uniforms[uniformName] = newUniform;\n    }\n  } else {\n    OnBeforeCompileDataHandler.addAdditionalTexture(material, uniformName, newUniform);\n  }\n}\nexport class MaterialUserDataUniforms {\n  static getUniforms(material) {\n    var _a;\n    return ((_a = material.userData) == null ? void 0 : _a.uniforms) || material.uniforms;\n  }\n  static setUniforms(material, uniforms) {\n    material.userData.uniforms = uniforms;\n  }\n  static removeUniforms(material) {\n    const uniforms = this.getUniforms(material);\n    if (uniforms) {\n      const userData = material.userData;\n      delete userData[\"uniforms\"];\n    }\n    return uniforms;\n  }\n}\nexport function assignOnBeforeCompileDataAndFunction(scene, material, data) {\n  OnBeforeCompileDataHandler.setData(material, data);\n  material.onBeforeCompile = _createOnBeforeCompile(scene, material);\n  const key = `${material.uuid}:${performance.now()}`;\n  material.customProgramCacheKey = () => key;\n}\nexport function copyOnBeforeCompileData(scene, params) {\n  const { src, dest, shareCustomUniforms } = params;\n  const data = OnBeforeCompileDataHandler.getData(src);\n  if (data) {\n    let cloneData2 = function(data2) {\n      const json = OnBeforeCompileDataConverter.toJSON(data2);\n      return OnBeforeCompileDataConverter.fromJSON(json);\n    };\n    var cloneData = cloneData2;\n    const newData = shareCustomUniforms ? data : cloneData2(data);\n    assignOnBeforeCompileDataAndFunction(scene, dest, newData);\n  }\n}\nfunction _createOnBeforeCompile(scene, material) {\n  const onBeforeCompile = (shader) => {\n    const data = OnBeforeCompileDataHandler.getData(material);\n    if (!data) {\n      return;\n    }\n    const {\n      vertexShader,\n      fragmentShader,\n      paramConfigs,\n      additionalTextureUniforms,\n      timeDependent,\n      resolutionDependent,\n      raymarchingLightsWorldCoordsDependent\n    } = data;\n    shader.vertexShader = vertexShader;\n    shader.fragmentShader = fragmentShader;\n    scene.uniformsController.addUniforms(shader.uniforms, {\n      paramConfigs,\n      additionalTextureUniforms,\n      timeDependent,\n      resolutionDependent,\n      raymarchingLightsWorldCoordsDependent\n    });\n    const shaderMaterial = material;\n    shaderMaterial.vertexShader = shader.vertexShader;\n    shaderMaterial.fragmentShader = shader.fragmentShader;\n    MaterialUserDataUniforms.setUniforms(material, shader.uniforms);\n  };\n  return onBeforeCompile;\n}\nexport class OnBeforeCompileDataHandler {\n  static setData(material, data) {\n    material.userData.onBeforeCompileData = data;\n  }\n  static addAdditionalTexture(material, uniformName, newUniform) {\n    const data = this.getData(material);\n    if (data) {\n      const currentUniform = data.additionalTextureUniforms[uniformName];\n      if (currentUniform == null) {\n        data.additionalTextureUniforms[uniformName] = newUniform;\n      }\n    } else {\n      console.warn(\"no data found on material\", material);\n    }\n  }\n  static getData(material) {\n    return material.userData.onBeforeCompileData;\n  }\n  static removeData(material) {\n    const data = this.getData(material);\n    if (data) {\n      const userData = material.userData;\n      delete userData[\"onBeforeCompileData\"];\n    }\n    return data;\n  }\n}\nexport class OnBeforeCompileDataConverter {\n  static toJSON(onBeforeCompileData) {\n    const onBeforeCompileDataJSON = {\n      vertexShader: onBeforeCompileData.vertexShader,\n      fragmentShader: onBeforeCompileData.fragmentShader,\n      timeDependent: onBeforeCompileData.timeDependent,\n      resolutionDependent: onBeforeCompileData.resolutionDependent,\n      raymarchingLightsWorldCoordsDependent: onBeforeCompileData.raymarchingLightsWorldCoordsDependent,\n      paramConfigs: onBeforeCompileData.paramConfigs.map((pc) => pc.toJSON())\n    };\n    return onBeforeCompileDataJSON;\n  }\n  static fromJSON(json) {\n    const onBeforeCompileData = {\n      ...json,\n      additionalTextureUniforms: {},\n      paramConfigs: json.paramConfigs.map((json2) => GlParamConfig.fromJSON(json2))\n    };\n    return onBeforeCompileData;\n  }\n}\n", "\"use strict\";\nimport { UniformsUtils } from \"three\";\nexport var CustomMaterialName = /* @__PURE__ */ ((CustomMaterialName2) => {\n  CustomMaterialName2[\"DISTANCE\"] = \"customDistanceMaterial\";\n  CustomMaterialName2[\"DEPTH\"] = \"customDepthMaterial\";\n  CustomMaterialName2[\"DEPTH_DOF\"] = \"customDepthDOFMaterial\";\n  return CustomMaterialName2;\n})(CustomMaterialName || {});\nimport {\n  assignUniformViaUserData,\n  copyOnBeforeCompileData\n} from \"../../engine/nodes/gl/code/assemblers/materials/OnBeforeCompile\";\nconst RENDER_HOOK_USER_DATA_KEY = \"POLY_render_hook\";\nconst EMPTY_RENDER_HOOK = (renderer, scene, camera, geometry, material, group) => {\n};\nexport function cloneMaterial(scene, srcMaterial, options) {\n  const clonedMaterial = srcMaterial.clone();\n  const srcUniforms = srcMaterial.uniforms;\n  if (srcUniforms) {\n    clonedMaterial.uniforms = UniformsUtils.clone(srcUniforms);\n  }\n  copyOnBeforeCompileData(scene, {\n    src: srcMaterial,\n    dest: clonedMaterial,\n    shareCustomUniforms: options.shareCustomUniforms\n  });\n  if (srcMaterial.customMaterials && options.addCustomMaterials) {\n    const customNames = Object.keys(srcMaterial.customMaterials);\n    if (customNames.length > 0) {\n      clonedMaterial.customMaterials = {};\n    }\n    for (const customName of customNames) {\n      const matName = customName;\n      const customMaterial = srcMaterial.customMaterials[matName];\n      if (customMaterial) {\n        const clonedCustomMaterial = cloneMaterial(scene, customMaterial, {\n          ...options,\n          addCustomMaterials: false\n        });\n        clonedMaterial.customMaterials[matName] = clonedCustomMaterial;\n      }\n    }\n  }\n  return clonedMaterial;\n}\nexport function applyCustomMaterials(object, material) {\n  const materialWithCustom = material;\n  if (materialWithCustom.customMaterials) {\n    for (const customName of Object.keys(materialWithCustom.customMaterials)) {\n      const matName = customName;\n      const customMaterial = materialWithCustom.customMaterials[matName];\n      if (customMaterial) {\n        object[matName] = customMaterial;\n        customMaterial.needsUpdate = true;\n      }\n    }\n  }\n}\nexport function addUserDataRenderHook(material, renderHook) {\n  material.userData[RENDER_HOOK_USER_DATA_KEY] = renderHook;\n}\nexport function applyRenderHook(object, material) {\n  if (material.userData) {\n    const renderHook = material.userData[RENDER_HOOK_USER_DATA_KEY];\n    if (renderHook) {\n      object.onBeforeRender = (renderer, scene, camera, geometry, material2, group) => {\n        renderHook(renderer, scene, camera, geometry, material2, group, object);\n      };\n      return;\n    }\n  }\n  object.onBeforeRender = EMPTY_RENDER_HOOK;\n}\nexport function assignUniforms(mat, uniformName, uniform, assembler) {\n  assignUniformViaUserData(mat, uniformName, uniform);\n  if (assembler) {\n    assignUniformForOnBeforeCompile(mat, uniformName, uniform, assembler);\n  }\n}\nexport function assignUniformForOnBeforeCompile(mat, uniformName, uniform, assembler) {\n  assembler.addAdditionalTextureUniforms(uniformName, uniform);\n}\nexport class CoreMaterial {\n  static node(scene, material) {\n    return scene.node(material.name);\n  }\n}\nCoreMaterial.clone = cloneMaterial;\nCoreMaterial.applyCustomMaterials = applyCustomMaterials;\nCoreMaterial.assignUniforms = assignUniforms;\nCoreMaterial.assignUniformForOnBeforeCompile = assignUniformForOnBeforeCompile;\n", "/**\n * @license\n * Copyright 2010-2023 Three.js Authors\n * SPDX-License-Identifier: MIT\n */\nconst REVISION = '158';\n\nconst MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\nconst TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\nconst CullFaceNone = 0;\nconst CullFaceBack = 1;\nconst CullFaceFront = 2;\nconst CullFaceFrontBack = 3;\nconst BasicShadowMap = 0;\nconst PCFShadowMap = 1;\nconst PCFSoftShadowMap = 2;\nconst VSMShadowMap = 3;\nconst FrontSide = 0;\nconst BackSide = 1;\nconst DoubleSide = 2;\nconst TwoPassDoubleSide = 2; // r149\nconst NoBlending = 0;\nconst NormalBlending = 1;\nconst AdditiveBlending = 2;\nconst SubtractiveBlending = 3;\nconst MultiplyBlending = 4;\nconst CustomBlending = 5;\nconst AddEquation = 100;\nconst SubtractEquation = 101;\nconst ReverseSubtractEquation = 102;\nconst MinEquation = 103;\nconst MaxEquation = 104;\nconst ZeroFactor = 200;\nconst OneFactor = 201;\nconst SrcColorFactor = 202;\nconst OneMinusSrcColorFactor = 203;\nconst SrcAlphaFactor = 204;\nconst OneMinusSrcAlphaFactor = 205;\nconst DstAlphaFactor = 206;\nconst OneMinusDstAlphaFactor = 207;\nconst DstColorFactor = 208;\nconst OneMinusDstColorFactor = 209;\nconst SrcAlphaSaturateFactor = 210;\nconst ConstantColorFactor = 211;\nconst OneMinusConstantColorFactor = 212;\nconst ConstantAlphaFactor = 213;\nconst OneMinusConstantAlphaFactor = 214;\nconst NeverDepth = 0;\nconst AlwaysDepth = 1;\nconst LessDepth = 2;\nconst LessEqualDepth = 3;\nconst EqualDepth = 4;\nconst GreaterEqualDepth = 5;\nconst GreaterDepth = 6;\nconst NotEqualDepth = 7;\nconst MultiplyOperation = 0;\nconst MixOperation = 1;\nconst AddOperation = 2;\nconst NoToneMapping = 0;\nconst LinearToneMapping = 1;\nconst ReinhardToneMapping = 2;\nconst CineonToneMapping = 3;\nconst ACESFilmicToneMapping = 4;\nconst CustomToneMapping = 5;\nconst AttachedBindMode = 'attached';\nconst DetachedBindMode = 'detached';\n\nconst UVMapping = 300;\nconst CubeReflectionMapping = 301;\nconst CubeRefractionMapping = 302;\nconst EquirectangularReflectionMapping = 303;\nconst EquirectangularRefractionMapping = 304;\nconst CubeUVReflectionMapping = 306;\nconst RepeatWrapping = 1000;\nconst ClampToEdgeWrapping = 1001;\nconst MirroredRepeatWrapping = 1002;\nconst NearestFilter = 1003;\nconst NearestMipmapNearestFilter = 1004;\nconst NearestMipMapNearestFilter = 1004;\nconst NearestMipmapLinearFilter = 1005;\nconst NearestMipMapLinearFilter = 1005;\nconst LinearFilter = 1006;\nconst LinearMipmapNearestFilter = 1007;\nconst LinearMipMapNearestFilter = 1007;\nconst LinearMipmapLinearFilter = 1008;\nconst LinearMipMapLinearFilter = 1008;\nconst UnsignedByteType = 1009;\nconst ByteType = 1010;\nconst ShortType = 1011;\nconst UnsignedShortType = 1012;\nconst IntType = 1013;\nconst UnsignedIntType = 1014;\nconst FloatType = 1015;\nconst HalfFloatType = 1016;\nconst UnsignedShort4444Type = 1017;\nconst UnsignedShort5551Type = 1018;\nconst UnsignedInt248Type = 1020;\nconst AlphaFormat = 1021;\nconst RGBAFormat = 1023;\nconst LuminanceFormat = 1024;\nconst LuminanceAlphaFormat = 1025;\nconst DepthFormat = 1026;\nconst DepthStencilFormat = 1027;\nconst RedFormat = 1028;\nconst RedIntegerFormat = 1029;\nconst RGFormat = 1030;\nconst RGIntegerFormat = 1031;\nconst RGBAIntegerFormat = 1033;\n\nconst RGB_S3TC_DXT1_Format = 33776;\nconst RGBA_S3TC_DXT1_Format = 33777;\nconst RGBA_S3TC_DXT3_Format = 33778;\nconst RGBA_S3TC_DXT5_Format = 33779;\nconst RGB_PVRTC_4BPPV1_Format = 35840;\nconst RGB_PVRTC_2BPPV1_Format = 35841;\nconst RGBA_PVRTC_4BPPV1_Format = 35842;\nconst RGBA_PVRTC_2BPPV1_Format = 35843;\nconst RGB_ETC1_Format = 36196;\nconst RGB_ETC2_Format = 37492;\nconst RGBA_ETC2_EAC_Format = 37496;\nconst RGBA_ASTC_4x4_Format = 37808;\nconst RGBA_ASTC_5x4_Format = 37809;\nconst RGBA_ASTC_5x5_Format = 37810;\nconst RGBA_ASTC_6x5_Format = 37811;\nconst RGBA_ASTC_6x6_Format = 37812;\nconst RGBA_ASTC_8x5_Format = 37813;\nconst RGBA_ASTC_8x6_Format = 37814;\nconst RGBA_ASTC_8x8_Format = 37815;\nconst RGBA_ASTC_10x5_Format = 37816;\nconst RGBA_ASTC_10x6_Format = 37817;\nconst RGBA_ASTC_10x8_Format = 37818;\nconst RGBA_ASTC_10x10_Format = 37819;\nconst RGBA_ASTC_12x10_Format = 37820;\nconst RGBA_ASTC_12x12_Format = 37821;\nconst RGBA_BPTC_Format = 36492;\nconst RGB_BPTC_SIGNED_Format = 36494;\nconst RGB_BPTC_UNSIGNED_Format = 36495;\nconst RED_RGTC1_Format = 36283;\nconst SIGNED_RED_RGTC1_Format = 36284;\nconst RED_GREEN_RGTC2_Format = 36285;\nconst SIGNED_RED_GREEN_RGTC2_Format = 36286;\nconst LoopOnce = 2200;\nconst LoopRepeat = 2201;\nconst LoopPingPong = 2202;\nconst InterpolateDiscrete = 2300;\nconst InterpolateLinear = 2301;\nconst InterpolateSmooth = 2302;\nconst ZeroCurvatureEnding = 2400;\nconst ZeroSlopeEnding = 2401;\nconst WrapAroundEnding = 2402;\nconst NormalAnimationBlendMode = 2500;\nconst AdditiveAnimationBlendMode = 2501;\nconst TrianglesDrawMode = 0;\nconst TriangleStripDrawMode = 1;\nconst TriangleFanDrawMode = 2;\n/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */\nconst LinearEncoding = 3000;\n/** @deprecated Use SRGBColorSpace in three.js r152+. */\nconst sRGBEncoding = 3001;\nconst BasicDepthPacking = 3200;\nconst RGBADepthPacking = 3201;\nconst TangentSpaceNormalMap = 0;\nconst ObjectSpaceNormalMap = 1;\n\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\nconst NoColorSpace = '';\nconst SRGBColorSpace = 'srgb';\nconst LinearSRGBColorSpace = 'srgb-linear';\nconst DisplayP3ColorSpace = 'display-p3';\nconst LinearDisplayP3ColorSpace = 'display-p3-linear';\n\nconst LinearTransfer = 'linear';\nconst SRGBTransfer = 'srgb';\n\nconst Rec709Primaries = 'rec709';\nconst P3Primaries = 'p3';\n\nconst ZeroStencilOp = 0;\nconst KeepStencilOp = 7680;\nconst ReplaceStencilOp = 7681;\nconst IncrementStencilOp = 7682;\nconst DecrementStencilOp = 7683;\nconst IncrementWrapStencilOp = 34055;\nconst DecrementWrapStencilOp = 34056;\nconst InvertStencilOp = 5386;\n\nconst NeverStencilFunc = 512;\nconst LessStencilFunc = 513;\nconst EqualStencilFunc = 514;\nconst LessEqualStencilFunc = 515;\nconst GreaterStencilFunc = 516;\nconst NotEqualStencilFunc = 517;\nconst GreaterEqualStencilFunc = 518;\nconst AlwaysStencilFunc = 519;\n\nconst NeverCompare = 512;\nconst LessCompare = 513;\nconst EqualCompare = 514;\nconst LessEqualCompare = 515;\nconst GreaterCompare = 516;\nconst NotEqualCompare = 517;\nconst GreaterEqualCompare = 518;\nconst AlwaysCompare = 519;\n\nconst StaticDrawUsage = 35044;\nconst DynamicDrawUsage = 35048;\nconst StreamDrawUsage = 35040;\nconst StaticReadUsage = 35045;\nconst DynamicReadUsage = 35049;\nconst StreamReadUsage = 35041;\nconst StaticCopyUsage = 35046;\nconst DynamicCopyUsage = 35050;\nconst StreamCopyUsage = 35042;\n\nconst GLSL1 = '100';\nconst GLSL3 = '300 es';\n\nconst _SRGBAFormat = 1035; // fallback for WebGL 1\n\nconst WebGLCoordinateSystem = 2000;\nconst WebGPUCoordinateSystem = 2001;\n\n/**\n * https://github.com/mrdoob/eventdispatcher.js/\n */\n\nclass EventDispatcher {\n\n\taddEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) this._listeners = {};\n\n\t\tconst listeners = this._listeners;\n\n\t\tif ( listeners[ type ] === undefined ) {\n\n\t\t\tlisteners[ type ] = [];\n\n\t\t}\n\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\n\n\t\t\tlisteners[ type ].push( listener );\n\n\t\t}\n\n\t}\n\n\thasEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return false;\n\n\t\tconst listeners = this._listeners;\n\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\n\n\t}\n\n\tremoveEventListener( type, listener ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tconst index = listenerArray.indexOf( listener );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\tlistenerArray.splice( index, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._listeners === undefined ) return;\n\n\t\tconst listeners = this._listeners;\n\t\tconst listenerArray = listeners[ event.type ];\n\n\t\tif ( listenerArray !== undefined ) {\n\n\t\t\tevent.target = this;\n\n\t\t\t// Make a copy, in case listeners are removed while iterating.\n\t\t\tconst array = listenerArray.slice( 0 );\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ].call( this, event );\n\n\t\t\t}\n\n\t\t\tevent.target = null;\n\n\t\t}\n\n\t}\n\n}\n\nconst _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\n\nlet _seed = 1234567;\n\n\nconst DEG2RAD = Math.PI / 180;\nconst RAD2DEG = 180 / Math.PI;\n\n// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\nfunction generateUUID() {\n\n\tconst d0 = Math.random() * 0xffffffff | 0;\n\tconst d1 = Math.random() * 0xffffffff | 0;\n\tconst d2 = Math.random() * 0xffffffff | 0;\n\tconst d3 = Math.random() * 0xffffffff | 0;\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\n\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\n\treturn uuid.toLowerCase();\n\n}\n\nfunction clamp( value, min, max ) {\n\n\treturn Math.max( min, Math.min( max, value ) );\n\n}\n\n// compute euclidean modulo of m % n\n// https://en.wikipedia.org/wiki/Modulo_operation\nfunction euclideanModulo( n, m ) {\n\n\treturn ( ( n % m ) + m ) % m;\n\n}\n\n// Linear mapping from range <a1, a2> to range <b1, b2>\nfunction mapLinear( x, a1, a2, b1, b2 ) {\n\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\n\n}\n\n// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\nfunction inverseLerp( x, y, value ) {\n\n\tif ( x !== y ) {\n\n\t\treturn ( value - x ) / ( y - x );\n\n\t} else {\n\n\t\treturn 0;\n\n\t}\n\n}\n\n// https://en.wikipedia.org/wiki/Linear_interpolation\nfunction lerp( x, y, t ) {\n\n\treturn ( 1 - t ) * x + t * y;\n\n}\n\n// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/\nfunction damp( x, y, lambda, dt ) {\n\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\n\n}\n\n// https://www.desmos.com/calculator/vcsjnyz7x4\nfunction pingpong( x, length = 1 ) {\n\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\n\n}\n\n// http://en.wikipedia.org/wiki/Smoothstep\nfunction smoothstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * ( 3 - 2 * x );\n\n}\n\nfunction smootherstep( x, min, max ) {\n\n\tif ( x <= min ) return 0;\n\tif ( x >= max ) return 1;\n\n\tx = ( x - min ) / ( max - min );\n\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n\n}\n\n// Random integer from <low, high> interval\nfunction randInt( low, high ) {\n\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\n\n}\n\n// Random float from <low, high> interval\nfunction randFloat( low, high ) {\n\n\treturn low + Math.random() * ( high - low );\n\n}\n\n// Random float from <-range/2, range/2> interval\nfunction randFloatSpread( range ) {\n\n\treturn range * ( 0.5 - Math.random() );\n\n}\n\n// Deterministic pseudo-random float in the interval [ 0, 1 ]\nfunction seededRandom( s ) {\n\n\tif ( s !== undefined ) _seed = s;\n\n\t// Mulberry32 generator\n\n\tlet t = _seed += 0x6D2B79F5;\n\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\n\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\n\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\n\n}\n\nfunction degToRad( degrees ) {\n\n\treturn degrees * DEG2RAD;\n\n}\n\nfunction radToDeg( radians ) {\n\n\treturn radians * RAD2DEG;\n\n}\n\nfunction isPowerOfTwo( value ) {\n\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\n\n}\n\nfunction ceilPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction floorPowerOfTwo( value ) {\n\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\n\n}\n\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\n\n\t// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles\n\n\t// rotations are applied to the axes in the order specified by 'order'\n\t// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'\n\t// angles are in radians\n\n\tconst cos = Math.cos;\n\tconst sin = Math.sin;\n\n\tconst c2 = cos( b / 2 );\n\tconst s2 = sin( b / 2 );\n\n\tconst c13 = cos( ( a + c ) / 2 );\n\tconst s13 = sin( ( a + c ) / 2 );\n\n\tconst c1_3 = cos( ( a - c ) / 2 );\n\tconst s1_3 = sin( ( a - c ) / 2 );\n\n\tconst c3_1 = cos( ( c - a ) / 2 );\n\tconst s3_1 = sin( ( c - a ) / 2 );\n\n\tswitch ( order ) {\n\n\t\tcase 'XYX':\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YZY':\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZXZ':\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'XZX':\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'YXY':\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\n\t\t\tbreak;\n\n\t\tcase 'ZYZ':\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\n\n\t}\n\n}\n\nfunction denormalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn value / 4294967295.0;\n\n\t\tcase Uint16Array:\n\n\t\t\treturn value / 65535.0;\n\n\t\tcase Uint8Array:\n\n\t\t\treturn value / 255.0;\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.max( value / 2147483647.0, - 1.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nfunction normalize( value, array ) {\n\n\tswitch ( array.constructor ) {\n\n\t\tcase Float32Array:\n\n\t\t\treturn value;\n\n\t\tcase Uint32Array:\n\n\t\t\treturn Math.round( value * 4294967295.0 );\n\n\t\tcase Uint16Array:\n\n\t\t\treturn Math.round( value * 65535.0 );\n\n\t\tcase Uint8Array:\n\n\t\t\treturn Math.round( value * 255.0 );\n\n\t\tcase Int32Array:\n\n\t\t\treturn Math.round( value * 2147483647.0 );\n\n\t\tcase Int16Array:\n\n\t\t\treturn Math.round( value * 32767.0 );\n\n\t\tcase Int8Array:\n\n\t\t\treturn Math.round( value * 127.0 );\n\n\t\tdefault:\n\n\t\t\tthrow new Error( 'Invalid component type.' );\n\n\t}\n\n}\n\nconst MathUtils = {\n\tDEG2RAD: DEG2RAD,\n\tRAD2DEG: RAD2DEG,\n\tgenerateUUID: generateUUID,\n\tclamp: clamp,\n\teuclideanModulo: euclideanModulo,\n\tmapLinear: mapLinear,\n\tinverseLerp: inverseLerp,\n\tlerp: lerp,\n\tdamp: damp,\n\tpingpong: pingpong,\n\tsmoothstep: smoothstep,\n\tsmootherstep: smootherstep,\n\trandInt: randInt,\n\trandFloat: randFloat,\n\trandFloatSpread: randFloatSpread,\n\tseededRandom: seededRandom,\n\tdegToRad: degToRad,\n\tradToDeg: radToDeg,\n\tisPowerOfTwo: isPowerOfTwo,\n\tceilPowerOfTwo: ceilPowerOfTwo,\n\tfloorPowerOfTwo: floorPowerOfTwo,\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\n\tnormalize: normalize,\n\tdenormalize: denormalize\n};\n\nclass Vector2 {\n\n\tconstructor( x = 0, y = 0 ) {\n\n\t\tVector2.prototype.isVector2 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.x;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.x = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.y;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.y = value;\n\n\t}\n\n\tset( x, y ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.x * v.y - this.y * v.x;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tangle() {\n\n\t\t// computes the angle in radians with respect to the positive x-axis\n\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\n\n\t\treturn angle;\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\n\t\treturn dx * dx + dy * dy;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\n\t\treturn this;\n\n\t}\n\n\trotateAround( center, angle ) {\n\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\n\n\t\tconst x = this.x - center.x;\n\t\tconst y = this.y - center.y;\n\n\t\tthis.x = x * c - y * s + center.x;\n\t\tthis.y = x * s + y * c + center.y;\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\n\t}\n\n}\n\nclass Matrix3 {\n\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tMatrix3.prototype.isMatrix3 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0,\n\t\t\t0, 1, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrix3Column( this, 0 );\n\t\tyAxis.setFromMatrix3Column( this, 1 );\n\t\tzAxis.setFromMatrix3Column( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix4( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\n\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\n\n\t}\n\n\tinvert() {\n\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\n\n\t\t\tt11 = n33 * n22 - n32 * n23,\n\t\t\tt12 = n32 * n13 - n33 * n12,\n\t\t\tt13 = n23 * n12 - n22 * n13,\n\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\n\n\t\tte[ 3 ] = t12 * detInv;\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\n\n\t\tte[ 6 ] = t13 * detInv;\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\ttranspose() {\n\n\t\tlet tmp;\n\t\tconst m = this.elements;\n\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tgetNormalMatrix( matrix4 ) {\n\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\n\n\t}\n\n\ttransposeIntoArray( r ) {\n\n\t\tconst m = this.elements;\n\n\t\tr[ 0 ] = m[ 0 ];\n\t\tr[ 1 ] = m[ 3 ];\n\t\tr[ 2 ] = m[ 6 ];\n\t\tr[ 3 ] = m[ 1 ];\n\t\tr[ 4 ] = m[ 4 ];\n\t\tr[ 5 ] = m[ 7 ];\n\t\tr[ 6 ] = m[ 2 ];\n\t\tr[ 7 ] = m[ 5 ];\n\t\tr[ 8 ] = m[ 8 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\n\n\t\tconst c = Math.cos( rotation );\n\t\tconst s = Math.sin( rotation );\n\n\t\tthis.set(\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\n\t\t\t0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t//\n\n\tscale( sx, sy ) {\n\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\n\n\t\treturn this;\n\n\t}\n\n\trotate( theta ) {\n\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( tx, ty ) {\n\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\n\n\t\treturn this;\n\n\t}\n\n\t// for 2D Transforms\n\n\tmakeTranslation( x, y ) {\n\n\t\tif ( x.isVector2 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x.x,\n\t\t\t\t0, 1, x.y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, x,\n\t\t\t\t0, 1, y,\n\t\t\t\t0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotation( theta ) {\n\n\t\t// counterclockwise\n\n\t\tconst c = Math.cos( theta );\n\t\tconst s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0,\n\t\t\ts, c, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0,\n\t\t\t0, y, 0,\n\t\t\t0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\t//\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\n\t\treturn array;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().fromArray( this.elements );\n\n\t}\n\n}\n\nconst _m3 = /*@__PURE__*/ new Matrix3();\n\nfunction arrayNeedsUint32( array ) {\n\n\t// assumes larger values usually on last\n\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\n\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\n\n\t}\n\n\treturn false;\n\n}\n\nconst TYPED_ARRAYS = {\n\tInt8Array: Int8Array,\n\tUint8Array: Uint8Array,\n\tUint8ClampedArray: Uint8ClampedArray,\n\tInt16Array: Int16Array,\n\tUint16Array: Uint16Array,\n\tInt32Array: Int32Array,\n\tUint32Array: Uint32Array,\n\tFloat32Array: Float32Array,\n\tFloat64Array: Float64Array\n};\n\nfunction getTypedArray( type, buffer ) {\n\n\treturn new TYPED_ARRAYS[ type ]( buffer );\n\n}\n\nfunction createElementNS( name ) {\n\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\n\n}\n\nfunction createCanvasElement() {\n\n\tconst canvas = createElementNS( 'canvas' );\n\tcanvas.style.display = 'block';\n\treturn canvas;\n\n}\n\nconst _cache = {};\n\nfunction warnOnce( message ) {\n\n\tif ( message in _cache ) return;\n\n\t_cache[ message ] = true;\n\n\tconsole.warn( message );\n\n}\n\n/**\n * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping\n * or clipping. Based on W3C specifications for sRGB and Display P3,\n * and ICC specifications for the D50 connection space. Values in/out\n * are _linear_ sRGB and _linear_ Display P3.\n *\n * Note that both sRGB and Display P3 use the sRGB transfer functions.\n *\n * Reference:\n * - http://www.russellcottrell.com/photo/matrixCalculator.htm\n */\n\nconst LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().set(\n\t0.8224621, 0.177538, 0.0,\n\t0.0331941, 0.9668058, 0.0,\n\t0.0170827, 0.0723974, 0.9105199,\n);\n\nconst LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().set(\n\t1.2249401, - 0.2249404, 0.0,\n\t- 0.0420569, 1.0420571, 0.0,\n\t- 0.0196376, - 0.0786361, 1.0982735\n);\n\n/**\n * Defines supported color spaces by transfer function and primaries,\n * and provides conversions to/from the Linear-sRGB reference space.\n */\nconst COLOR_SPACES = {\n\t[ LinearSRGBColorSpace ]: {\n\t\ttransfer: LinearTransfer,\n\t\tprimaries: Rec709Primaries,\n\t\ttoReference: ( color ) => color,\n\t\tfromReference: ( color ) => color,\n\t},\n\t[ SRGBColorSpace ]: {\n\t\ttransfer: SRGBTransfer,\n\t\tprimaries: Rec709Primaries,\n\t\ttoReference: ( color ) => color.convertSRGBToLinear(),\n\t\tfromReference: ( color ) => color.convertLinearToSRGB(),\n\t},\n\t[ LinearDisplayP3ColorSpace ]: {\n\t\ttransfer: LinearTransfer,\n\t\tprimaries: P3Primaries,\n\t\ttoReference: ( color ) => color.applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),\n\t\tfromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ),\n\t},\n\t[ DisplayP3ColorSpace ]: {\n\t\ttransfer: SRGBTransfer,\n\t\tprimaries: P3Primaries,\n\t\ttoReference: ( color ) => color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB ),\n\t\tfromReference: ( color ) => color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB(),\n\t},\n};\n\nconst SUPPORTED_WORKING_COLOR_SPACES = new Set( [ LinearSRGBColorSpace, LinearDisplayP3ColorSpace ] );\n\nconst ColorManagement = {\n\n\tenabled: true,\n\n\t_workingColorSpace: LinearSRGBColorSpace,\n\n\tget legacyMode() {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\treturn ! this.enabled;\n\n\t},\n\n\tset legacyMode( legacyMode ) {\n\n\t\tconsole.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );\n\n\t\tthis.enabled = ! legacyMode;\n\n\t},\n\n\tget workingColorSpace() {\n\n\t\treturn this._workingColorSpace;\n\n\t},\n\n\tset workingColorSpace( colorSpace ) {\n\n\t\tif ( ! SUPPORTED_WORKING_COLOR_SPACES.has( colorSpace ) ) {\n\n\t\t\tthrow new Error( `Unsupported working color space, \"${ colorSpace }\".` );\n\n\t\t}\n\n\t\tthis._workingColorSpace = colorSpace;\n\n\t},\n\n\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\n\n\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\n\n\t\t\treturn color;\n\n\t\t}\n\n\t\tconst sourceToReference = COLOR_SPACES[ sourceColorSpace ].toReference;\n\t\tconst targetFromReference = COLOR_SPACES[ targetColorSpace ].fromReference;\n\n\t\treturn targetFromReference( sourceToReference( color ) );\n\n\t},\n\n\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\n\n\t\treturn this.convert( color, this._workingColorSpace, targetColorSpace );\n\n\t},\n\n\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\n\n\t\treturn this.convert( color, sourceColorSpace, this._workingColorSpace );\n\n\t},\n\n\tgetPrimaries: function ( colorSpace ) {\n\n\t\treturn COLOR_SPACES[ colorSpace ].primaries;\n\n\t},\n\n\tgetTransfer: function ( colorSpace ) {\n\n\t\tif ( colorSpace === NoColorSpace ) return LinearTransfer;\n\n\t\treturn COLOR_SPACES[ colorSpace ].transfer;\n\n\t},\n\n};\n\n\nfunction SRGBToLinear( c ) {\n\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\n\n}\n\nfunction LinearToSRGB( c ) {\n\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\n\n}\n\nlet _canvas;\n\nclass ImageUtils {\n\n\tstatic getDataURL( image ) {\n\n\t\tif ( /^data:/i.test( image.src ) ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\n\n\t\t\treturn image.src;\n\n\t\t}\n\n\t\tlet canvas;\n\n\t\tif ( image instanceof HTMLCanvasElement ) {\n\n\t\t\tcanvas = image;\n\n\t\t} else {\n\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\n\n\t\t\t_canvas.width = image.width;\n\t\t\t_canvas.height = image.height;\n\n\t\t\tconst context = _canvas.getContext( '2d' );\n\n\t\t\tif ( image instanceof ImageData ) {\n\n\t\t\t\tcontext.putImageData( image, 0, 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\t}\n\n\t\t\tcanvas = _canvas;\n\n\t\t}\n\n\t\tif ( canvas.width > 2048 || canvas.height > 2048 ) {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );\n\n\t\t\treturn canvas.toDataURL( 'image/jpeg', 0.6 );\n\n\t\t} else {\n\n\t\t\treturn canvas.toDataURL( 'image/png' );\n\n\t\t}\n\n\t}\n\n\tstatic sRGBToLinear( image ) {\n\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\tconst canvas = createElementNS( 'canvas' );\n\n\t\t\tcanvas.width = image.width;\n\t\t\tcanvas.height = image.height;\n\n\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\n\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\n\t\t\tconst data = imageData.data;\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\n\n\t\t\t}\n\n\t\t\tcontext.putImageData( imageData, 0, 0 );\n\n\t\t\treturn canvas;\n\n\t\t} else if ( image.data ) {\n\n\t\t\tconst data = image.data.slice( 0 );\n\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\n\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// assuming float\n\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdata: data,\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\n\t\t\treturn image;\n\n\t\t}\n\n\t}\n\n}\n\nlet _sourceId = 0;\n\nclass Source {\n\n\tconstructor( data = null ) {\n\n\t\tthis.isSource = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.data = data;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.images[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\t\t\tuuid: this.uuid,\n\t\t\turl: ''\n\t\t};\n\n\t\tconst data = this.data;\n\n\t\tif ( data !== null ) {\n\n\t\t\tlet url;\n\n\t\t\tif ( Array.isArray( data ) ) {\n\n\t\t\t\t// cube texture\n\n\t\t\t\turl = [];\n\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// texture\n\n\t\t\t\turl = serializeImage( data );\n\n\t\t\t}\n\n\t\t\toutput.url = url;\n\n\t\t}\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.images[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n}\n\nfunction serializeImage( image ) {\n\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t// default images\n\n\t\treturn ImageUtils.getDataURL( image );\n\n\t} else {\n\n\t\tif ( image.data ) {\n\n\t\t\t// images of DataTexture\n\n\t\t\treturn {\n\t\t\t\tdata: Array.from( image.data ),\n\t\t\t\twidth: image.width,\n\t\t\t\theight: image.height,\n\t\t\t\ttype: image.data.constructor.name\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\n\t\t\treturn {};\n\n\t\t}\n\n\t}\n\n}\n\nlet _textureId = 0;\n\nclass Texture extends EventDispatcher {\n\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\n\n\t\tsuper();\n\n\t\tthis.isTexture = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _textureId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\n\t\tthis.source = new Source( image );\n\t\tthis.mipmaps = [];\n\n\t\tthis.mapping = mapping;\n\t\tthis.channel = 0;\n\n\t\tthis.wrapS = wrapS;\n\t\tthis.wrapT = wrapT;\n\n\t\tthis.magFilter = magFilter;\n\t\tthis.minFilter = minFilter;\n\n\t\tthis.anisotropy = anisotropy;\n\n\t\tthis.format = format;\n\t\tthis.internalFormat = null;\n\t\tthis.type = type;\n\n\t\tthis.offset = new Vector2( 0, 0 );\n\t\tthis.repeat = new Vector2( 1, 1 );\n\t\tthis.center = new Vector2( 0, 0 );\n\t\tthis.rotation = 0;\n\n\t\tthis.matrixAutoUpdate = true;\n\t\tthis.matrix = new Matrix3();\n\n\t\tthis.generateMipmaps = true;\n\t\tthis.premultiplyAlpha = false;\n\t\tthis.flipY = true;\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\n\n\t\tif ( typeof colorSpace === 'string' ) {\n\n\t\t\tthis.colorSpace = colorSpace;\n\n\t\t} else { // @deprecated, r152\n\n\t\t\twarnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );\n\t\t\tthis.colorSpace = colorSpace === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t\t}\n\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\t\tthis.onUpdate = null;\n\n\t\tthis.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not\n\t\tthis.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)\n\n\t}\n\n\tget image() {\n\n\t\treturn this.source.data;\n\n\t}\n\n\tset image( value = null ) {\n\n\t\tthis.source.data = value;\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.source = source.source;\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\n\n\t\tthis.mapping = source.mapping;\n\t\tthis.channel = source.channel;\n\n\t\tthis.wrapS = source.wrapS;\n\t\tthis.wrapT = source.wrapT;\n\n\t\tthis.magFilter = source.magFilter;\n\t\tthis.minFilter = source.minFilter;\n\n\t\tthis.anisotropy = source.anisotropy;\n\n\t\tthis.format = source.format;\n\t\tthis.internalFormat = source.internalFormat;\n\t\tthis.type = source.type;\n\n\t\tthis.offset.copy( source.offset );\n\t\tthis.repeat.copy( source.repeat );\n\t\tthis.center.copy( source.center );\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrix.copy( source.matrix );\n\n\t\tthis.generateMipmaps = source.generateMipmaps;\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\n\t\tthis.flipY = source.flipY;\n\t\tthis.unpackAlignment = source.unpackAlignment;\n\t\tthis.colorSpace = source.colorSpace;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tthis.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\n\n\t\t\treturn meta.textures[ this.uuid ];\n\n\t\t}\n\n\t\tconst output = {\n\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Texture',\n\t\t\t\tgenerator: 'Texture.toJSON'\n\t\t\t},\n\n\t\t\tuuid: this.uuid,\n\t\t\tname: this.name,\n\n\t\t\timage: this.source.toJSON( meta ).uuid,\n\n\t\t\tmapping: this.mapping,\n\t\t\tchannel: this.channel,\n\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\n\t\t\toffset: [ this.offset.x, this.offset.y ],\n\t\t\tcenter: [ this.center.x, this.center.y ],\n\t\t\trotation: this.rotation,\n\n\t\t\twrap: [ this.wrapS, this.wrapT ],\n\n\t\t\tformat: this.format,\n\t\t\tinternalFormat: this.internalFormat,\n\t\t\ttype: this.type,\n\t\t\tcolorSpace: this.colorSpace,\n\n\t\t\tminFilter: this.minFilter,\n\t\t\tmagFilter: this.magFilter,\n\t\t\tanisotropy: this.anisotropy,\n\n\t\t\tflipY: this.flipY,\n\n\t\t\tgenerateMipmaps: this.generateMipmaps,\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\n\t\t\tunpackAlignment: this.unpackAlignment\n\n\t\t};\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\n\n\t\tif ( ! isRootObject ) {\n\n\t\t\tmeta.textures[ this.uuid ] = output;\n\n\t\t}\n\n\t\treturn output;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\ttransformUv( uv ) {\n\n\t\tif ( this.mapping !== UVMapping ) return uv;\n\n\t\tuv.applyMatrix3( this.matrix );\n\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\n\n\t\t\tswitch ( this.wrapS ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\n\n\t\t\tswitch ( this.wrapT ) {\n\n\t\t\t\tcase RepeatWrapping:\n\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ClampToEdgeWrapping:\n\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase MirroredRepeatWrapping:\n\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\n\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.flipY ) {\n\n\t\t\tuv.y = 1 - uv.y;\n\n\t\t}\n\n\t\treturn uv;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) {\n\n\t\t\tthis.version ++;\n\t\t\tthis.source.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tget encoding() { // @deprecated, r152\n\n\t\twarnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );\n\t\treturn this.colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n\n\t}\n\n\tset encoding( encoding ) { // @deprecated, r152\n\n\t\twarnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );\n\t\tthis.colorSpace = encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t}\n\n}\n\nTexture.DEFAULT_IMAGE = null;\nTexture.DEFAULT_MAPPING = UVMapping;\nTexture.DEFAULT_ANISOTROPY = 1;\n\nclass Vector4 {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tVector4.prototype.isVector4 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t}\n\n\tget width() {\n\n\t\treturn this.z;\n\n\t}\n\n\tset width( value ) {\n\n\t\tthis.z = value;\n\n\t}\n\n\tget height() {\n\n\t\treturn this.w;\n\n\t}\n\n\tset height( value ) {\n\n\t\tthis.w = value;\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\t\tthis.w = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( w ) {\n\n\t\tthis.w = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tcase 3: this.w = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tcase 3: return this.w;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\t\tthis.w += v.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\t\tthis.w += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\t\tthis.w = a.w + b.w;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\t\tthis.w += v.w * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\t\tthis.w -= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\t\tthis.w -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\t\tthis.w = a.w - b.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\t\tthis.w *= v.w;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\t\tthis.w *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tsetAxisAngleFromQuaternion( q ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\n\n\t\t// q is assumed to be normalized\n\n\t\tthis.w = 2 * Math.acos( q.w );\n\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\n\n\t\tif ( s < 0.0001 ) {\n\n\t\t\tthis.x = 1;\n\t\t\tthis.y = 0;\n\t\t\tthis.z = 0;\n\n\t\t} else {\n\n\t\t\tthis.x = q.x / s;\n\t\t\tthis.y = q.y / s;\n\t\t\tthis.z = q.z / s;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetAxisAngleFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tlet angle, x, y, z; // variables for result\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\n\n\t\t\tte = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\n\n\t\t\t// singularity found\n\t\t\t// first check for identity matrix which must have +1 for all terms\n\t\t\t// in leading diagonal and zero in other terms\n\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\n\n\t\t\t\t// this singularity is identity matrix so angle = 0\n\n\t\t\t\tthis.set( 1, 0, 0, 0 );\n\n\t\t\t\treturn this; // zero angle, arbitrary axis\n\n\t\t\t}\n\n\t\t\t// otherwise this singularity is angle = 180\n\n\t\t\tangle = Math.PI;\n\n\t\t\tconst xx = ( m11 + 1 ) / 2;\n\t\t\tconst yy = ( m22 + 1 ) / 2;\n\t\t\tconst zz = ( m33 + 1 ) / 2;\n\t\t\tconst xy = ( m12 + m21 ) / 4;\n\t\t\tconst xz = ( m13 + m31 ) / 4;\n\t\t\tconst yz = ( m23 + m32 ) / 4;\n\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\n\n\t\t\t\t// m11 is the largest diagonal term\n\n\t\t\t\tif ( xx < epsilon ) {\n\n\t\t\t\t\tx = 0;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tx = Math.sqrt( xx );\n\t\t\t\t\ty = xy / x;\n\t\t\t\t\tz = xz / x;\n\n\t\t\t\t}\n\n\t\t\t} else if ( yy > zz ) {\n\n\t\t\t\t// m22 is the largest diagonal term\n\n\t\t\t\tif ( yy < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0;\n\t\t\t\t\tz = 0.707106781;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ty = Math.sqrt( yy );\n\t\t\t\t\tx = xy / y;\n\t\t\t\t\tz = yz / y;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// m33 is the largest diagonal term so base result on this\n\n\t\t\t\tif ( zz < epsilon ) {\n\n\t\t\t\t\tx = 0.707106781;\n\t\t\t\t\ty = 0.707106781;\n\t\t\t\t\tz = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tz = Math.sqrt( zz );\n\t\t\t\t\tx = xz / z;\n\t\t\t\t\ty = yz / z;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.set( x, y, z, angle );\n\n\t\t\treturn this; // return 180 deg rotation\n\n\t\t}\n\n\t\t// as we have reached here there are no singularities so we can handle normally\n\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\n\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\n\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\n\t\t// caught by singularity test above, but I've left it in just in case\n\n\t\tthis.x = ( m32 - m23 ) / s;\n\t\tthis.y = ( m13 - m31 ) / s;\n\t\tthis.z = ( m21 - m12 ) / s;\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\t\tthis.w = Math.min( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\t\tthis.w = Math.max( this.w, v.w );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\t\tthis.w = Math.max( min.w, Math.min( max.w, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\t\tthis.w = Math.max( minVal, Math.min( maxVal, this.w ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\t\tthis.w = Math.floor( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\t\tthis.w = Math.ceil( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\t\tthis.w = Math.round( this.w );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\t\tthis.w = Math.trunc( this.w );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\t\tthis.w = - this.w;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\t\tthis.w += ( v.w - this.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\t\tthis.w = array[ offset + 3 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\t\tarray[ offset + 3 ] = this.w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\t\tthis.w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\t\tthis.w = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\t\tyield this.w;\n\n\t}\n\n}\n\n/*\n In options, we can specify:\n * Texture parameters for an auto-generated target texture\n * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers\n*/\nclass RenderTarget extends EventDispatcher {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.isRenderTarget = true;\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.depth = 1;\n\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\n\t\tthis.scissorTest = false;\n\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\n\n\t\tconst image = { width: width, height: height, depth: 1 };\n\n\t\tif ( options.encoding !== undefined ) {\n\n\t\t\t// @deprecated, r152\n\t\t\twarnOnce( 'THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.' );\n\t\t\toptions.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t\t}\n\n\t\toptions = Object.assign( {\n\t\t\tgenerateMipmaps: false,\n\t\t\tinternalFormat: null,\n\t\t\tminFilter: LinearFilter,\n\t\t\tdepthBuffer: true,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthTexture: null,\n\t\t\tsamples: 0\n\t\t}, options );\n\n\t\tthis.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.flipY = false;\n\t\tthis.texture.generateMipmaps = options.generateMipmaps;\n\t\tthis.texture.internalFormat = options.internalFormat;\n\n\t\tthis.depthBuffer = options.depthBuffer;\n\t\tthis.stencilBuffer = options.stencilBuffer;\n\n\t\tthis.depthTexture = options.depthTexture;\n\n\t\tthis.samples = options.samples;\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tthis.texture.image.width = width;\n\t\t\tthis.texture.image.height = height;\n\t\t\tthis.texture.image.depth = depth;\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.texture = source.texture.clone();\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\t// ensure image object is not shared, see #20328\n\n\t\tconst image = Object.assign( {}, source.texture.image );\n\t\tthis.texture.source = new Source( image );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.samples = source.samples;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass WebGLRenderTarget extends RenderTarget {\n\n\tconstructor( width = 1, height = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLRenderTarget = true;\n\n\t}\n\n}\n\nclass DataArrayTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( null );\n\n\t\tthis.isDataArrayTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGLArrayRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGLArrayRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new DataArrayTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass Data3DTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\n\n\t\t// We're going to add .setXXX() methods for setting properties later.\n\t\t// Users can still set in DataTexture3D directly.\n\t\t//\n\t\t//\tconst texture = new THREE.DataTexture3D( data, width, height, depth );\n\t\t// \ttexture.anisotropy = 16;\n\t\t//\n\t\t// See #14839\n\n\t\tsuper( null );\n\n\t\tthis.isData3DTexture = true;\n\n\t\tthis.image = { data, width, height, depth };\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nclass WebGL3DRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, depth = 1 ) {\n\n\t\tsuper( width, height );\n\n\t\tthis.isWebGL3DRenderTarget = true;\n\n\t\tthis.depth = depth;\n\n\t\tthis.texture = new Data3DTexture( null, width, height, depth );\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t}\n\n}\n\nclass WebGLMultipleRenderTargets extends WebGLRenderTarget {\n\n\tconstructor( width = 1, height = 1, count = 1, options = {} ) {\n\n\t\tsuper( width, height, options );\n\n\t\tthis.isWebGLMultipleRenderTargets = true;\n\n\t\tconst texture = this.texture;\n\n\t\tthis.texture = [];\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.texture[ i ] = texture.clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t}\n\n\tsetSize( width, height, depth = 1 ) {\n\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\n\n\t\t\tthis.width = width;\n\t\t\tthis.height = height;\n\t\t\tthis.depth = depth;\n\n\t\t\tfor ( let i = 0, il = this.texture.length; i < il; i ++ ) {\n\n\t\t\t\tthis.texture[ i ].image.width = width;\n\t\t\t\tthis.texture[ i ].image.height = height;\n\t\t\t\tthis.texture[ i ].image.depth = depth;\n\n\t\t\t}\n\n\t\t\tthis.dispose();\n\n\t\t}\n\n\t\tthis.viewport.set( 0, 0, width, height );\n\t\tthis.scissor.set( 0, 0, width, height );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.dispose();\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\t\tthis.depth = source.depth;\n\n\t\tthis.scissor.copy( source.scissor );\n\t\tthis.scissorTest = source.scissorTest;\n\n\t\tthis.viewport.copy( source.viewport );\n\n\t\tthis.depthBuffer = source.depthBuffer;\n\t\tthis.stencilBuffer = source.stencilBuffer;\n\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\n\n\t\tthis.texture.length = 0;\n\n\t\tfor ( let i = 0, il = source.texture.length; i < il; i ++ ) {\n\n\t\t\tthis.texture[ i ] = source.texture[ i ].clone();\n\t\t\tthis.texture[ i ].isRenderTargetTexture = true;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Quaternion {\n\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\n\n\t\tthis.isQuaternion = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t}\n\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\n\n\t\t// fuzz-free, array-based Quaternion SLERP operation\n\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\n\n\t\tif ( t === 0 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x0;\n\t\t\tdst[ dstOffset + 1 ] = y0;\n\t\t\tdst[ dstOffset + 2 ] = z0;\n\t\t\tdst[ dstOffset + 3 ] = w0;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( t === 1 ) {\n\n\t\t\tdst[ dstOffset + 0 ] = x1;\n\t\t\tdst[ dstOffset + 1 ] = y1;\n\t\t\tdst[ dstOffset + 2 ] = z1;\n\t\t\tdst[ dstOffset + 3 ] = w1;\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\n\n\t\t\tlet s = 1 - t;\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\n\t\t\t\tsqrSin = 1 - cos * cos;\n\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\n\t\t\tif ( sqrSin > Number.EPSILON ) {\n\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\n\n\t\t\t\ts = Math.sin( s * len ) / sin;\n\t\t\t\tt = Math.sin( t * len ) / sin;\n\n\t\t\t}\n\n\t\t\tconst tDir = t * dir;\n\n\t\t\tx0 = x0 * s + x1 * tDir;\n\t\t\ty0 = y0 * s + y1 * tDir;\n\t\t\tz0 = z0 * s + z1 * tDir;\n\t\t\tw0 = w0 * s + w1 * tDir;\n\n\t\t\t// Normalize in case we just did a lerp:\n\t\t\tif ( s === 1 - t ) {\n\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\n\n\t\t\t\tx0 *= f;\n\t\t\t\ty0 *= f;\n\t\t\t\tz0 *= f;\n\t\t\t\tw0 *= f;\n\n\t\t\t}\n\n\t\t}\n\n\t\tdst[ dstOffset ] = x0;\n\t\tdst[ dstOffset + 1 ] = y0;\n\t\tdst[ dstOffset + 2 ] = z0;\n\t\tdst[ dstOffset + 3 ] = w0;\n\n\t}\n\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\n\n\t\tconst x0 = src0[ srcOffset0 ];\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\n\n\t\tconst x1 = src1[ srcOffset1 ];\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\n\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\n\n\t\treturn dst;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget w() {\n\n\t\treturn this._w;\n\n\t}\n\n\tset w( value ) {\n\n\t\tthis._w = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, w ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._w = w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\n\n\t}\n\n\tcopy( quaternion ) {\n\n\t\tthis._x = quaternion.x;\n\t\tthis._y = quaternion.y;\n\t\tthis._z = quaternion.z;\n\t\tthis._w = quaternion.w;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromEuler( euler, update ) {\n\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\n\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n\t\t//\tcontent/SpinCalc.m\n\n\t\tconst cos = Math.cos;\n\t\tconst sin = Math.sin;\n\n\t\tconst c1 = cos( x / 2 );\n\t\tconst c2 = cos( y / 2 );\n\t\tconst c3 = cos( z / 2 );\n\n\t\tconst s1 = sin( x / 2 );\n\t\tconst s2 = sin( y / 2 );\n\t\tconst s3 = sin( z / 2 );\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tif ( update !== false ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAxisAngle( axis, angle ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n\t\t// assumes axis is normalized\n\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\n\n\t\tthis._x = axis.x * s;\n\t\tthis._y = axis.y * s;\n\t\tthis._z = axis.z * s;\n\t\tthis._w = Math.cos( halfAngle );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m ) {\n\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements,\n\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\n\n\t\t\ttrace = m11 + m22 + m33;\n\n\t\tif ( trace > 0 ) {\n\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\n\n\t\t\tthis._w = 0.25 / s;\n\t\t\tthis._x = ( m32 - m23 ) * s;\n\t\t\tthis._y = ( m13 - m31 ) * s;\n\t\t\tthis._z = ( m21 - m12 ) * s;\n\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\n\n\t\t\tthis._w = ( m32 - m23 ) / s;\n\t\t\tthis._x = 0.25 * s;\n\t\t\tthis._y = ( m12 + m21 ) / s;\n\t\t\tthis._z = ( m13 + m31 ) / s;\n\n\t\t} else if ( m22 > m33 ) {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\n\n\t\t\tthis._w = ( m13 - m31 ) / s;\n\t\t\tthis._x = ( m12 + m21 ) / s;\n\t\t\tthis._y = 0.25 * s;\n\t\t\tthis._z = ( m23 + m32 ) / s;\n\n\t\t} else {\n\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\n\n\t\t\tthis._w = ( m21 - m12 ) / s;\n\t\t\tthis._x = ( m13 + m31 ) / s;\n\t\t\tthis._y = ( m23 + m32 ) / s;\n\t\t\tthis._z = 0.25 * s;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromUnitVectors( vFrom, vTo ) {\n\n\t\t// assumes direction vectors vFrom and vTo are normalized\n\n\t\tlet r = vFrom.dot( vTo ) + 1;\n\n\t\tif ( r < Number.EPSILON ) {\n\n\t\t\t// vFrom and vTo point in opposite directions\n\n\t\t\tr = 0;\n\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\n\n\t\t\t\tthis._x = - vFrom.y;\n\t\t\t\tthis._y = vFrom.x;\n\t\t\t\tthis._z = 0;\n\t\t\t\tthis._w = r;\n\n\t\t\t} else {\n\n\t\t\t\tthis._x = 0;\n\t\t\t\tthis._y = - vFrom.z;\n\t\t\t\tthis._z = vFrom.y;\n\t\t\t\tthis._w = r;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\n\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\n\t\t\tthis._w = r;\n\n\t\t}\n\n\t\treturn this.normalize();\n\n\t}\n\n\tangleTo( q ) {\n\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\n\n\t}\n\n\trotateTowards( q, step ) {\n\n\t\tconst angle = this.angleTo( q );\n\n\t\tif ( angle === 0 ) return this;\n\n\t\tconst t = Math.min( 1, step / angle );\n\n\t\tthis.slerp( q, t );\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\treturn this.set( 0, 0, 0, 1 );\n\n\t}\n\n\tinvert() {\n\n\t\t// quaternion is assumed to have unit length\n\n\t\treturn this.conjugate();\n\n\t}\n\n\tconjugate() {\n\n\t\tthis._x *= - 1;\n\t\tthis._y *= - 1;\n\t\tthis._z *= - 1;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\n\n\t}\n\n\tlengthSq() {\n\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\n\n\t}\n\n\tnormalize() {\n\n\t\tlet l = this.length();\n\n\t\tif ( l === 0 ) {\n\n\t\t\tthis._x = 0;\n\t\t\tthis._y = 0;\n\t\t\tthis._z = 0;\n\t\t\tthis._w = 1;\n\n\t\t} else {\n\n\t\t\tl = 1 / l;\n\n\t\t\tthis._x = this._x * l;\n\t\t\tthis._y = this._y * l;\n\t\t\tthis._z = this._z * l;\n\t\t\tthis._w = this._w * l;\n\n\t\t}\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( this, q );\n\n\t}\n\n\tpremultiply( q ) {\n\n\t\treturn this.multiplyQuaternions( q, this );\n\n\t}\n\n\tmultiplyQuaternions( a, b ) {\n\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\n\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\n\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerp( qb, t ) {\n\n\t\tif ( t === 0 ) return this;\n\t\tif ( t === 1 ) return this.copy( qb );\n\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\n\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\n\n\t\tif ( cosHalfTheta < 0 ) {\n\n\t\t\tthis._w = - qb._w;\n\t\t\tthis._x = - qb._x;\n\t\t\tthis._y = - qb._y;\n\t\t\tthis._z = - qb._z;\n\n\t\t\tcosHalfTheta = - cosHalfTheta;\n\n\t\t} else {\n\n\t\t\tthis.copy( qb );\n\n\t\t}\n\n\t\tif ( cosHalfTheta >= 1.0 ) {\n\n\t\t\tthis._w = w;\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t\tthis._z = z;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\n\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\n\n\t\t\tconst s = 1 - t;\n\t\t\tthis._w = s * w + t * this._w;\n\t\t\tthis._x = s * x + t * this._x;\n\t\t\tthis._y = s * y + t * this._y;\n\t\t\tthis._z = s * z + t * this._z;\n\n\t\t\tthis.normalize();\n\t\t\tthis._onChangeCallback();\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\n\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tslerpQuaternions( qa, qb, t ) {\n\n\t\treturn this.copy( qa ).slerp( qb, t );\n\n\t}\n\n\trandom() {\n\n\t\t// Derived from http://planning.cs.uiuc.edu/node198.html\n\t\t// Note, this source uses w, x, y, z ordering,\n\t\t// so we swap the order below.\n\n\t\tconst u1 = Math.random();\n\t\tconst sqrt1u1 = Math.sqrt( 1 - u1 );\n\t\tconst sqrtu1 = Math.sqrt( u1 );\n\n\t\tconst u2 = 2 * Math.PI * Math.random();\n\n\t\tconst u3 = 2 * Math.PI * Math.random();\n\n\t\treturn this.set(\n\t\t\tsqrt1u1 * Math.cos( u2 ),\n\t\t\tsqrtu1 * Math.sin( u3 ),\n\t\t\tsqrtu1 * Math.cos( u3 ),\n\t\t\tsqrt1u1 * Math.sin( u2 ),\n\t\t);\n\n\t}\n\n\tequals( quaternion ) {\n\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis._x = array[ offset ];\n\t\tthis._y = array[ offset + 1 ];\n\t\tthis._z = array[ offset + 2 ];\n\t\tthis._w = array[ offset + 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._w;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis._x = attribute.getX( index );\n\t\tthis._y = attribute.getY( index );\n\t\tthis._z = attribute.getZ( index );\n\t\tthis._w = attribute.getW( index );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.toArray();\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._w;\n\n\t}\n\n}\n\nclass Vector3 {\n\n\tconstructor( x = 0, y = 0, z = 0 ) {\n\n\t\tVector3.prototype.isVector3 = true;\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t}\n\n\tset( x, y, z ) {\n\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\n\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.x = scalar;\n\t\tthis.y = scalar;\n\t\tthis.z = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetX( x ) {\n\n\t\tthis.x = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( y ) {\n\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( z ) {\n\n\t\tthis.z = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponent( index, value ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: this.x = value; break;\n\t\t\tcase 1: this.y = value; break;\n\t\t\tcase 2: this.z = value; break;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index ) {\n\n\t\tswitch ( index ) {\n\n\t\t\tcase 0: return this.x;\n\t\t\tcase 1: return this.y;\n\t\t\tcase 2: return this.z;\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.x, this.y, this.z );\n\n\t}\n\n\tcopy( v ) {\n\n\t\tthis.x = v.x;\n\t\tthis.y = v.y;\n\t\tthis.z = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tadd( v ) {\n\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\t\tthis.z += v.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.x += s;\n\t\tthis.y += s;\n\t\tthis.z += s;\n\n\t\treturn this;\n\n\t}\n\n\taddVectors( a, b ) {\n\n\t\tthis.x = a.x + b.x;\n\t\tthis.y = a.y + b.y;\n\t\tthis.z = a.z + b.z;\n\n\t\treturn this;\n\n\t}\n\n\taddScaledVector( v, s ) {\n\n\t\tthis.x += v.x * s;\n\t\tthis.y += v.y * s;\n\t\tthis.z += v.z * s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( v ) {\n\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\t\tthis.z -= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tsubScalar( s ) {\n\n\t\tthis.x -= s;\n\t\tthis.y -= s;\n\t\tthis.z -= s;\n\n\t\treturn this;\n\n\t}\n\n\tsubVectors( a, b ) {\n\n\t\tthis.x = a.x - b.x;\n\t\tthis.y = a.y - b.y;\n\t\tthis.z = a.z - b.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( v ) {\n\n\t\tthis.x *= v.x;\n\t\tthis.y *= v.y;\n\t\tthis.z *= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( scalar ) {\n\n\t\tthis.x *= scalar;\n\t\tthis.y *= scalar;\n\t\tthis.z *= scalar;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyVectors( a, b ) {\n\n\t\tthis.x = a.x * b.x;\n\t\tthis.y = a.y * b.y;\n\t\tthis.z = a.z * b.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyEuler( euler ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );\n\n\t}\n\n\tapplyAxisAngle( axis, angle ) {\n\n\t\treturn this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\treturn this.applyMatrix3( m ).normalize();\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\n\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t// quaternion q is assumed to have unit length\n\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\n\n\t\t// t = 2 * cross( q.xyz, v );\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\n\n\t\t// v + q.w * t + cross( q.xyz, t );\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\n\n\t\treturn this;\n\n\t}\n\n\tproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\n\n\t}\n\n\tunproject( camera ) {\n\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\t// input: THREE.Matrix4 affine matrix\n\t\t// vector interpreted as a direction\n\n\t\tconst x = this.x, y = this.y, z = this.z;\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\n\n\t\treturn this.normalize();\n\n\t}\n\n\tdivide( v ) {\n\n\t\tthis.x /= v.x;\n\t\tthis.y /= v.y;\n\t\tthis.z /= v.z;\n\n\t\treturn this;\n\n\t}\n\n\tdivideScalar( scalar ) {\n\n\t\treturn this.multiplyScalar( 1 / scalar );\n\n\t}\n\n\tmin( v ) {\n\n\t\tthis.x = Math.min( this.x, v.x );\n\t\tthis.y = Math.min( this.y, v.y );\n\t\tthis.z = Math.min( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tmax( v ) {\n\n\t\tthis.x = Math.max( this.x, v.x );\n\t\tthis.y = Math.max( this.y, v.y );\n\t\tthis.z = Math.max( this.z, v.z );\n\n\t\treturn this;\n\n\t}\n\n\tclamp( min, max ) {\n\n\t\t// assumes min < max, componentwise\n\n\t\tthis.x = Math.max( min.x, Math.min( max.x, this.x ) );\n\t\tthis.y = Math.max( min.y, Math.min( max.y, this.y ) );\n\t\tthis.z = Math.max( min.z, Math.min( max.z, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampScalar( minVal, maxVal ) {\n\n\t\tthis.x = Math.max( minVal, Math.min( maxVal, this.x ) );\n\t\tthis.y = Math.max( minVal, Math.min( maxVal, this.y ) );\n\t\tthis.z = Math.max( minVal, Math.min( maxVal, this.z ) );\n\n\t\treturn this;\n\n\t}\n\n\tclampLength( min, max ) {\n\n\t\tconst length = this.length();\n\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );\n\n\t}\n\n\tfloor() {\n\n\t\tthis.x = Math.floor( this.x );\n\t\tthis.y = Math.floor( this.y );\n\t\tthis.z = Math.floor( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tceil() {\n\n\t\tthis.x = Math.ceil( this.x );\n\t\tthis.y = Math.ceil( this.y );\n\t\tthis.z = Math.ceil( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tround() {\n\n\t\tthis.x = Math.round( this.x );\n\t\tthis.y = Math.round( this.y );\n\t\tthis.z = Math.round( this.z );\n\n\t\treturn this;\n\n\t}\n\n\troundToZero() {\n\n\t\tthis.x = Math.trunc( this.x );\n\t\tthis.y = Math.trunc( this.y );\n\t\tthis.z = Math.trunc( this.z );\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.x = - this.x;\n\t\tthis.y = - this.y;\n\t\tthis.z = - this.z;\n\n\t\treturn this;\n\n\t}\n\n\tdot( v ) {\n\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\n\n\t}\n\n\t// TODO lengthSquared?\n\n\tlengthSq() {\n\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\n\n\t}\n\n\tlength() {\n\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\n\n\t}\n\n\tmanhattanLength() {\n\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\n\n\t}\n\n\tnormalize() {\n\n\t\treturn this.divideScalar( this.length() || 1 );\n\n\t}\n\n\tsetLength( length ) {\n\n\t\treturn this.normalize().multiplyScalar( length );\n\n\t}\n\n\tlerp( v, alpha ) {\n\n\t\tthis.x += ( v.x - this.x ) * alpha;\n\t\tthis.y += ( v.y - this.y ) * alpha;\n\t\tthis.z += ( v.z - this.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpVectors( v1, v2, alpha ) {\n\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tcross( v ) {\n\n\t\treturn this.crossVectors( this, v );\n\n\t}\n\n\tcrossVectors( a, b ) {\n\n\t\tconst ax = a.x, ay = a.y, az = a.z;\n\t\tconst bx = b.x, by = b.y, bz = b.z;\n\n\t\tthis.x = ay * bz - az * by;\n\t\tthis.y = az * bx - ax * bz;\n\t\tthis.z = ax * by - ay * bx;\n\n\t\treturn this;\n\n\t}\n\n\tprojectOnVector( v ) {\n\n\t\tconst denominator = v.lengthSq();\n\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\n\n\t\tconst scalar = v.dot( this ) / denominator;\n\n\t\treturn this.copy( v ).multiplyScalar( scalar );\n\n\t}\n\n\tprojectOnPlane( planeNormal ) {\n\n\t\t_vector$b.copy( this ).projectOnVector( planeNormal );\n\n\t\treturn this.sub( _vector$b );\n\n\t}\n\n\treflect( normal ) {\n\n\t\t// reflect incident vector off plane orthogonal to normal\n\t\t// normal is assumed to have unit length\n\n\t\treturn this.sub( _vector$b.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\n\n\t}\n\n\tangleTo( v ) {\n\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\n\n\t\tif ( denominator === 0 ) return Math.PI / 2;\n\n\t\tconst theta = this.dot( v ) / denominator;\n\n\t\t// clamp, to handle numerical problems\n\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\n\n\t}\n\n\tdistanceTo( v ) {\n\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\n\n\t}\n\n\tdistanceToSquared( v ) {\n\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\n\n\t\treturn dx * dx + dy * dy + dz * dz;\n\n\t}\n\n\tmanhattanDistanceTo( v ) {\n\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\n\n\t}\n\n\tsetFromSpherical( s ) {\n\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\n\n\t}\n\n\tsetFromSphericalCoords( radius, phi, theta ) {\n\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\n\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\n\t\tthis.y = Math.cos( phi ) * radius;\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCylindrical( c ) {\n\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\n\n\t}\n\n\tsetFromCylindricalCoords( radius, theta, y ) {\n\n\t\tthis.x = radius * Math.sin( theta );\n\t\tthis.y = y;\n\t\tthis.z = radius * Math.cos( theta );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixPosition( m ) {\n\n\t\tconst e = m.elements;\n\n\t\tthis.x = e[ 12 ];\n\t\tthis.y = e[ 13 ];\n\t\tthis.z = e[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixScale( m ) {\n\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\n\n\t\tthis.x = sx;\n\t\tthis.y = sy;\n\t\tthis.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrixColumn( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 4 );\n\n\t}\n\n\tsetFromMatrix3Column( m, index ) {\n\n\t\treturn this.fromArray( m.elements, index * 3 );\n\n\t}\n\n\tsetFromEuler( e ) {\n\n\t\tthis.x = e._x;\n\t\tthis.y = e._y;\n\t\tthis.z = e._z;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromColor( c ) {\n\n\t\tthis.x = c.r;\n\t\tthis.y = c.g;\n\t\tthis.z = c.b;\n\n\t\treturn this;\n\n\t}\n\n\tequals( v ) {\n\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.x = array[ offset ];\n\t\tthis.y = array[ offset + 1 ];\n\t\tthis.z = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.x;\n\t\tarray[ offset + 1 ] = this.y;\n\t\tarray[ offset + 2 ] = this.z;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.x = attribute.getX( index );\n\t\tthis.y = attribute.getY( index );\n\t\tthis.z = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\trandom() {\n\n\t\tthis.x = Math.random();\n\t\tthis.y = Math.random();\n\t\tthis.z = Math.random();\n\n\t\treturn this;\n\n\t}\n\n\trandomDirection() {\n\n\t\t// Derived from https://mathworld.wolfram.com/SpherePointPicking.html\n\n\t\tconst u = ( Math.random() - 0.5 ) * 2;\n\t\tconst t = Math.random() * Math.PI * 2;\n\t\tconst f = Math.sqrt( 1 - u ** 2 );\n\n\t\tthis.x = f * Math.cos( t );\n\t\tthis.y = f * Math.sin( t );\n\t\tthis.z = u;\n\n\t\treturn this;\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.x;\n\t\tyield this.y;\n\t\tyield this.z;\n\n\t}\n\n}\n\nconst _vector$b = /*@__PURE__*/ new Vector3();\nconst _quaternion$4 = /*@__PURE__*/ new Quaternion();\n\nclass Box3 {\n\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox3 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromArray( array ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\n\n\t\t\tthis.expandByPoint( _vector$a.fromArray( array, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromBufferAttribute( attribute ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( _vector$a.fromBufferAttribute( attribute, i ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$a.copy( size ).multiplyScalar( 0.5 );\n\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromObject( object, precise = false ) {\n\n\t\tthis.makeEmpty();\n\n\t\treturn this.expandByObject( object, precise );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\texpandByObject( object, precise = false ) {\n\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\n\t\t// accounting for both the object's, and children's, world transforms\n\n\t\tobject.updateWorldMatrix( false, false );\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( geometry !== undefined ) {\n\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\n\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\n\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t\tif ( object.isMesh === true ) {\n\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector$a );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_vector$a.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_vector$a.applyMatrix4( object.matrixWorld );\n\t\t\t\t\tthis.expandByPoint( _vector$a );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( object.boundingBox !== undefined ) {\n\n\t\t\t\t\t// object-level bounding box\n\n\t\t\t\t\tif ( object.boundingBox === null ) {\n\n\t\t\t\t\t\tobject.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$3.copy( object.boundingBox );\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// geometry-level bounding box\n\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\t\t\t\tgeometry.computeBoundingBox();\n\n\t\t\t\t\t}\n\n\t\t\t\t\t_box$3.copy( geometry.boundingBox );\n\n\t\t\t\t}\n\n\t\t\t\t_box$3.applyMatrix4( object.matrixWorld );\n\n\t\t\t\tthis.union( _box$3 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tthis.expandByObject( children[ i ], precise );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ||\n\t\t\tpoint.z < this.min.z || point.z > this.max.z ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 6 splitting planes to rule out intersections.\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ||\n\t\t\tbox.max.z < this.min.z || box.min.z > this.max.z ? false : true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\t// Find the point on the AABB closest to the sphere center.\n\t\tthis.clampPoint( sphere.center, _vector$a );\n\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\n\t\treturn _vector$a.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// We compute the minimum and maximum dot product values. If those values\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\n\n\t\tlet min, max;\n\n\t\tif ( plane.normal.x > 0 ) {\n\n\t\t\tmin = plane.normal.x * this.min.x;\n\t\t\tmax = plane.normal.x * this.max.x;\n\n\t\t} else {\n\n\t\t\tmin = plane.normal.x * this.max.x;\n\t\t\tmax = plane.normal.x * this.min.x;\n\n\t\t}\n\n\t\tif ( plane.normal.y > 0 ) {\n\n\t\t\tmin += plane.normal.y * this.min.y;\n\t\t\tmax += plane.normal.y * this.max.y;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.y * this.max.y;\n\t\t\tmax += plane.normal.y * this.min.y;\n\n\t\t}\n\n\t\tif ( plane.normal.z > 0 ) {\n\n\t\t\tmin += plane.normal.z * this.min.z;\n\t\t\tmax += plane.normal.z * this.max.z;\n\n\t\t} else {\n\n\t\t\tmin += plane.normal.z * this.max.z;\n\t\t\tmax += plane.normal.z * this.min.z;\n\n\t\t}\n\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\n\n\t}\n\n\tintersectsTriangle( triangle ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// compute box center and extents\n\t\tthis.getCenter( _center );\n\t\t_extents.subVectors( this.max, _center );\n\n\t\t// translate triangle to aabb origin\n\t\t_v0$2.subVectors( triangle.a, _center );\n\t\t_v1$7.subVectors( triangle.b, _center );\n\t\t_v2$4.subVectors( triangle.c, _center );\n\n\t\t// compute edge vectors for triangle\n\t\t_f0.subVectors( _v1$7, _v0$2 );\n\t\t_f1.subVectors( _v2$4, _v1$7 );\n\t\t_f2.subVectors( _v0$2, _v2$4 );\n\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\n\t\tlet axes = [\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\n\t\t];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// test 3 face normals from the aabb\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\n\t\tif ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\t// finally testing the face normal of the triangle\n\t\t// use already existing triangle edge vectors here\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\n\n\t\treturn satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$a ).distanceTo( point );\n\n\t}\n\n\tgetBoundingSphere( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\ttarget.makeEmpty();\n\n\t\t} else {\n\n\t\t\tthis.getCenter( target.center );\n\n\t\t\ttarget.radius = this.getSize( _vector$a ).length() * 0.5;\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\t// transform of empty box is an empty box.\n\t\tif ( this.isEmpty() ) return this;\n\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\n\n\t\tthis.setFromPoints( _points );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _points = [\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3(),\n\t/*@__PURE__*/ new Vector3()\n];\n\nconst _vector$a = /*@__PURE__*/ new Vector3();\n\nconst _box$3 = /*@__PURE__*/ new Box3();\n\n// triangle centered vertices\n\nconst _v0$2 = /*@__PURE__*/ new Vector3();\nconst _v1$7 = /*@__PURE__*/ new Vector3();\nconst _v2$4 = /*@__PURE__*/ new Vector3();\n\n// triangle edge vectors\n\nconst _f0 = /*@__PURE__*/ new Vector3();\nconst _f1 = /*@__PURE__*/ new Vector3();\nconst _f2 = /*@__PURE__*/ new Vector3();\n\nconst _center = /*@__PURE__*/ new Vector3();\nconst _extents = /*@__PURE__*/ new Vector3();\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\nconst _testAxis = /*@__PURE__*/ new Vector3();\n\nfunction satForAxes( axes, v0, v1, v2, extents ) {\n\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\n\n\t\t_testAxis.fromArray( axes, i );\n\t\t// project the aabb onto the separating axis\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\n\t\t// project all 3 vertices of the triangle onto the separating axis\n\t\tconst p0 = v0.dot( _testAxis );\n\t\tconst p1 = v1.dot( _testAxis );\n\t\tconst p2 = v2.dot( _testAxis );\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\n\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\n\t\t\t// the axis is separating and we can exit\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\nconst _box$2 = /*@__PURE__*/ new Box3();\nconst _v1$6 = /*@__PURE__*/ new Vector3();\nconst _v2$3 = /*@__PURE__*/ new Vector3();\n\nclass Sphere {\n\n\tconstructor( center = new Vector3(), radius = - 1 ) {\n\n\t\tthis.center = center;\n\t\tthis.radius = radius;\n\n\t}\n\n\tset( center, radius ) {\n\n\t\tthis.center.copy( center );\n\t\tthis.radius = radius;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points, optionalCenter ) {\n\n\t\tconst center = this.center;\n\n\t\tif ( optionalCenter !== undefined ) {\n\n\t\t\tcenter.copy( optionalCenter );\n\n\t\t} else {\n\n\t\t\t_box$2.setFromPoints( points ).getCenter( center );\n\n\t\t}\n\n\t\tlet maxRadiusSq = 0;\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\n\n\t\t}\n\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( sphere ) {\n\n\t\tthis.center.copy( sphere.center );\n\t\tthis.radius = sphere.radius;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\treturn ( this.radius < 0 );\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.center.set( 0, 0, 0 );\n\t\tthis.radius = - 1;\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst radiusSum = this.radius + sphere.radius;\n\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsSphere( this );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\n\n\t\ttarget.copy( point );\n\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\ttarget.sub( this.center ).normalize();\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\t// Empty sphere produces empty bounding box\n\t\t\ttarget.makeEmpty();\n\t\t\treturn target;\n\n\t\t}\n\n\t\ttarget.set( this.center, this.center );\n\t\ttarget.expandByScalar( this.radius );\n\n\t\treturn target;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.center.applyMatrix4( matrix );\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.center.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.center.copy( point );\n\n\t\t\tthis.radius = 0;\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\t_v1$6.subVectors( point, this.center );\n\n\t\tconst lengthSq = _v1$6.lengthSq();\n\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\n\n\t\t\t// calculate the minimal sphere\n\n\t\t\tconst length = Math.sqrt( lengthSq );\n\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\n\n\t\t\tthis.center.addScaledVector( _v1$6, delta / length );\n\n\t\t\tthis.radius += delta;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tunion( sphere ) {\n\n\t\tif ( sphere.isEmpty() ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.isEmpty() ) {\n\n\t\t\tthis.copy( sphere );\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( this.center.equals( sphere.center ) === true ) {\n\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\n\n\t\t} else {\n\n\t\t\t_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );\n\n\t\t\tthis.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sphere ) {\n\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$9 = /*@__PURE__*/ new Vector3();\nconst _segCenter = /*@__PURE__*/ new Vector3();\nconst _segDir = /*@__PURE__*/ new Vector3();\nconst _diff = /*@__PURE__*/ new Vector3();\n\nconst _edge1 = /*@__PURE__*/ new Vector3();\nconst _edge2 = /*@__PURE__*/ new Vector3();\nconst _normal$1 = /*@__PURE__*/ new Vector3();\n\nclass Ray {\n\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\n\n\t\tthis.origin = origin;\n\t\tthis.direction = direction;\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\tthis.origin.copy( origin );\n\t\tthis.direction.copy( direction );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( ray ) {\n\n\t\tthis.origin.copy( ray.origin );\n\t\tthis.direction.copy( ray.direction );\n\n\t\treturn this;\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\n\n\t}\n\n\tlookAt( v ) {\n\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\n\n\t\treturn this;\n\n\t}\n\n\trecast( t ) {\n\n\t\tthis.origin.copy( this.at( t, _vector$9 ) );\n\n\t\treturn this;\n\n\t}\n\n\tclosestPointToPoint( point, target ) {\n\n\t\ttarget.subVectors( point, this.origin );\n\n\t\tconst directionDistance = target.dot( this.direction );\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn target.copy( this.origin );\n\n\t\t}\n\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\n\n\t}\n\n\tdistanceSqToPoint( point ) {\n\n\t\tconst directionDistance = _vector$9.subVectors( point, this.origin ).dot( this.direction );\n\n\t\t// point behind the ray\n\n\t\tif ( directionDistance < 0 ) {\n\n\t\t\treturn this.origin.distanceToSquared( point );\n\n\t\t}\n\n\t\t_vector$9.copy( this.origin ).addScaledVector( this.direction, directionDistance );\n\n\t\treturn _vector$9.distanceToSquared( point );\n\n\t}\n\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\n\t\t// It returns the min distance between the ray and the segment\n\t\t// defined by v0 and v1\n\t\t// It can also set two optional targets :\n\t\t// - The closest point on the ray\n\t\t// - The closest point on the segment\n\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\n\t\t_diff.copy( this.origin ).sub( _segCenter );\n\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\n\t\tconst a01 = - this.direction.dot( _segDir );\n\t\tconst b0 = _diff.dot( this.direction );\n\t\tconst b1 = - _diff.dot( _segDir );\n\t\tconst c = _diff.lengthSq();\n\t\tconst det = Math.abs( 1 - a01 * a01 );\n\t\tlet s0, s1, sqrDist, extDet;\n\n\t\tif ( det > 0 ) {\n\n\t\t\t// The ray and segment are not parallel.\n\n\t\t\ts0 = a01 * b1 - b0;\n\t\t\ts1 = a01 * b0 - b1;\n\t\t\textDet = segExtent * det;\n\n\t\t\tif ( s0 >= 0 ) {\n\n\t\t\t\tif ( s1 >= - extDet ) {\n\n\t\t\t\t\tif ( s1 <= extDet ) {\n\n\t\t\t\t\t\t// region 0\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\n\n\t\t\t\t\t\tconst invDet = 1 / det;\n\t\t\t\t\t\ts0 *= invDet;\n\t\t\t\t\t\ts1 *= invDet;\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// region 1\n\n\t\t\t\t\t\ts1 = segExtent;\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 5\n\n\t\t\t\t\ts1 = - segExtent;\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( s1 <= - extDet ) {\n\n\t\t\t\t\t// region 4\n\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else if ( s1 <= extDet ) {\n\n\t\t\t\t\t// region 3\n\n\t\t\t\t\ts0 = 0;\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// region 2\n\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Ray and segment are parallel.\n\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\n\n\t\t}\n\n\t\tif ( optionalPointOnRay ) {\n\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\n\n\t\t}\n\n\t\tif ( optionalPointOnSegment ) {\n\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\n\n\t\t}\n\n\t\treturn sqrDist;\n\n\t}\n\n\tintersectSphere( sphere, target ) {\n\n\t\t_vector$9.subVectors( sphere.center, this.origin );\n\t\tconst tca = _vector$9.dot( this.direction );\n\t\tconst d2 = _vector$9.dot( _vector$9 ) - tca * tca;\n\t\tconst radius2 = sphere.radius * sphere.radius;\n\n\t\tif ( d2 > radius2 ) return null;\n\n\t\tconst thc = Math.sqrt( radius2 - d2 );\n\n\t\t// t0 = first intersect point - entrance on front of sphere\n\t\tconst t0 = tca - thc;\n\n\t\t// t1 = second intersect point - exit point on back of sphere\n\t\tconst t1 = tca + thc;\n\n\t\t// test to see if t1 is behind the ray - if so, return null\n\t\tif ( t1 < 0 ) return null;\n\n\t\t// test to see if t0 is behind the ray:\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\n\t\t// in order to always return an intersect point that is in front of the ray.\n\t\tif ( t0 < 0 ) return this.at( t1, target );\n\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\n\t\treturn this.at( t0, target );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\n\n\t}\n\n\tdistanceToPlane( plane ) {\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\n\n\t\t\t\treturn 0;\n\n\t\t\t}\n\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\n\n\t\t// Return if the ray never intersects the plane\n\n\t\treturn t >= 0 ? t : null;\n\n\t}\n\n\tintersectPlane( plane, target ) {\n\n\t\tconst t = this.distanceToPlane( plane );\n\n\t\tif ( t === null ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn this.at( t, target );\n\n\t}\n\n\tintersectsPlane( plane ) {\n\n\t\t// check if the ray lies on the plane first\n\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\n\n\t\tif ( distToPoint === 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst denominator = plane.normal.dot( this.direction );\n\n\t\tif ( denominator * distToPoint < 0 ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\t// ray origin is behind the plane (and is pointing behind it)\n\n\t\treturn false;\n\n\t}\n\n\tintersectBox( box, target ) {\n\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\n\n\t\tconst invdirx = 1 / this.direction.x,\n\t\t\tinvdiry = 1 / this.direction.y,\n\t\t\tinvdirz = 1 / this.direction.z;\n\n\t\tconst origin = this.origin;\n\n\t\tif ( invdirx >= 0 ) {\n\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\n\n\t\t} else {\n\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\n\n\t\t}\n\n\t\tif ( invdiry >= 0 ) {\n\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\n\n\t\t} else {\n\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\n\n\t\t}\n\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\n\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\n\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\n\n\t\tif ( invdirz >= 0 ) {\n\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\n\n\t\t} else {\n\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\n\n\t\t}\n\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\n\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\n\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\n\n\t\t//return point closest to the ray (positive side)\n\n\t\tif ( tmax < 0 ) return null;\n\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn this.intersectBox( box, _vector$9 ) !== null;\n\n\t}\n\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\n\n\t\t// Compute the offset origin, edges, and normal.\n\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\n\n\t\t_edge1.subVectors( b, a );\n\t\t_edge2.subVectors( c, a );\n\t\t_normal$1.crossVectors( _edge1, _edge2 );\n\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\n\t\tlet DdN = this.direction.dot( _normal$1 );\n\t\tlet sign;\n\n\t\tif ( DdN > 0 ) {\n\n\t\t\tif ( backfaceCulling ) return null;\n\t\t\tsign = 1;\n\n\t\t} else if ( DdN < 0 ) {\n\n\t\t\tsign = - 1;\n\t\t\tDdN = - DdN;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t_diff.subVectors( this.origin, a );\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\n\n\t\t// b1 < 0, no intersection\n\t\tif ( DdQxE2 < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\n\n\t\t// b2 < 0, no intersection\n\t\tif ( DdE1xQ < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// b1+b2 > 1, no intersection\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Line intersects triangle, check if ray does.\n\t\tconst QdN = - sign * _diff.dot( _normal$1 );\n\n\t\t// t < 0, no intersection\n\t\tif ( QdN < 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// Ray intersects triangle.\n\t\treturn this.at( QdN / DdN, target );\n\n\t}\n\n\tapplyMatrix4( matrix4 ) {\n\n\t\tthis.origin.applyMatrix4( matrix4 );\n\t\tthis.direction.transformDirection( matrix4 );\n\n\t\treturn this;\n\n\t}\n\n\tequals( ray ) {\n\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass Matrix4 {\n\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tMatrix4.prototype.isMatrix4 = true;\n\n\t\tthis.elements = [\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t];\n\n\t\tif ( n11 !== undefined ) {\n\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\n\n\t\t}\n\n\t}\n\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\n\n\t\treturn this;\n\n\t}\n\n\tidentity() {\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Matrix4().fromArray( this.elements );\n\n\t}\n\n\tcopy( m ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\n\n\t\treturn this;\n\n\t}\n\n\tcopyPosition( m ) {\n\n\t\tconst te = this.elements, me = m.elements;\n\n\t\tte[ 12 ] = me[ 12 ];\n\t\tte[ 13 ] = me[ 13 ];\n\t\tte[ 14 ] = me[ 14 ];\n\n\t\treturn this;\n\n\t}\n\n\tsetFromMatrix3( m ) {\n\n\t\tconst me = m.elements;\n\n\t\tthis.set(\n\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractBasis( xAxis, yAxis, zAxis ) {\n\n\t\txAxis.setFromMatrixColumn( this, 0 );\n\t\tyAxis.setFromMatrixColumn( this, 1 );\n\t\tzAxis.setFromMatrixColumn( this, 2 );\n\n\t\treturn this;\n\n\t}\n\n\tmakeBasis( xAxis, yAxis, zAxis ) {\n\n\t\tthis.set(\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\textractRotation( m ) {\n\n\t\t// this method does not support reflection matrices\n\n\t\tconst te = this.elements;\n\t\tconst me = m.elements;\n\n\t\tconst scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();\n\t\tconst scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();\n\t\tconst scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();\n\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromEuler( euler ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\n\n\t\tif ( euler.order === 'XYZ' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - c * f;\n\t\t\tte[ 8 ] = d;\n\n\t\t\tte[ 1 ] = af + be * d;\n\t\t\tte[ 5 ] = ae - bf * d;\n\t\t\tte[ 9 ] = - b * c;\n\n\t\t\tte[ 2 ] = bf - ae * d;\n\t\t\tte[ 6 ] = be + af * d;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YXZ' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce + df * b;\n\t\t\tte[ 4 ] = de * b - cf;\n\t\t\tte[ 8 ] = a * d;\n\n\t\t\tte[ 1 ] = a * f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b;\n\n\t\t\tte[ 2 ] = cf * b - de;\n\t\t\tte[ 6 ] = df + ce * b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZXY' ) {\n\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\n\n\t\t\tte[ 0 ] = ce - df * b;\n\t\t\tte[ 4 ] = - a * f;\n\t\t\tte[ 8 ] = de + cf * b;\n\n\t\t\tte[ 1 ] = cf + de * b;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = df - ce * b;\n\n\t\t\tte[ 2 ] = - a * d;\n\t\t\tte[ 6 ] = b;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'ZYX' ) {\n\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = be * d - af;\n\t\t\tte[ 8 ] = ae * d + bf;\n\n\t\t\tte[ 1 ] = c * f;\n\t\t\tte[ 5 ] = bf * d + ae;\n\t\t\tte[ 9 ] = af * d - be;\n\n\t\t\tte[ 2 ] = - d;\n\t\t\tte[ 6 ] = b * c;\n\t\t\tte[ 10 ] = a * c;\n\n\t\t} else if ( euler.order === 'YZX' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = bd - ac * f;\n\t\t\tte[ 8 ] = bc * f + ad;\n\n\t\t\tte[ 1 ] = f;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = - b * e;\n\n\t\t\tte[ 2 ] = - d * e;\n\t\t\tte[ 6 ] = ad * f + bc;\n\t\t\tte[ 10 ] = ac - bd * f;\n\n\t\t} else if ( euler.order === 'XZY' ) {\n\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\n\n\t\t\tte[ 0 ] = c * e;\n\t\t\tte[ 4 ] = - f;\n\t\t\tte[ 8 ] = d * e;\n\n\t\t\tte[ 1 ] = ac * f + bd;\n\t\t\tte[ 5 ] = a * e;\n\t\t\tte[ 9 ] = ad * f - bc;\n\n\t\t\tte[ 2 ] = bc * f - ad;\n\t\t\tte[ 6 ] = b * e;\n\t\t\tte[ 10 ] = bd * f + ac;\n\n\t\t}\n\n\t\t// bottom row\n\t\tte[ 3 ] = 0;\n\t\tte[ 7 ] = 0;\n\t\tte[ 11 ] = 0;\n\n\t\t// last column\n\t\tte[ 12 ] = 0;\n\t\tte[ 13 ] = 0;\n\t\tte[ 14 ] = 0;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationFromQuaternion( q ) {\n\n\t\treturn this.compose( _zero, q, _one );\n\n\t}\n\n\tlookAt( eye, target, up ) {\n\n\t\tconst te = this.elements;\n\n\t\t_z.subVectors( eye, target );\n\n\t\tif ( _z.lengthSq() === 0 ) {\n\n\t\t\t// eye and target are in the same position\n\n\t\t\t_z.z = 1;\n\n\t\t}\n\n\t\t_z.normalize();\n\t\t_x.crossVectors( up, _z );\n\n\t\tif ( _x.lengthSq() === 0 ) {\n\n\t\t\t// up and z are parallel\n\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\n\n\t\t\t\t_z.x += 0.0001;\n\n\t\t\t} else {\n\n\t\t\t\t_z.z += 0.0001;\n\n\t\t\t}\n\n\t\t\t_z.normalize();\n\t\t\t_x.crossVectors( up, _z );\n\n\t\t}\n\n\t\t_x.normalize();\n\t\t_y.crossVectors( _z, _x );\n\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( m ) {\n\n\t\treturn this.multiplyMatrices( this, m );\n\n\t}\n\n\tpremultiply( m ) {\n\n\t\treturn this.multiplyMatrices( m, this );\n\n\t}\n\n\tmultiplyMatrices( a, b ) {\n\n\t\tconst ae = a.elements;\n\t\tconst be = b.elements;\n\t\tconst te = this.elements;\n\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\n\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\n\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tconst te = this.elements;\n\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\n\n\t\treturn this;\n\n\t}\n\n\tdeterminant() {\n\n\t\tconst te = this.elements;\n\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\n\n\t\t//TODO: make this more efficient\n\t\t//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n\t\treturn (\n\t\t\tn41 * (\n\t\t\t\t+ n14 * n23 * n32\n\t\t\t\t - n13 * n24 * n32\n\t\t\t\t - n14 * n22 * n33\n\t\t\t\t + n12 * n24 * n33\n\t\t\t\t + n13 * n22 * n34\n\t\t\t\t - n12 * n23 * n34\n\t\t\t) +\n\t\t\tn42 * (\n\t\t\t\t+ n11 * n23 * n34\n\t\t\t\t - n11 * n24 * n33\n\t\t\t\t + n14 * n21 * n33\n\t\t\t\t - n13 * n21 * n34\n\t\t\t\t + n13 * n24 * n31\n\t\t\t\t - n14 * n23 * n31\n\t\t\t) +\n\t\t\tn43 * (\n\t\t\t\t+ n11 * n24 * n32\n\t\t\t\t - n11 * n22 * n34\n\t\t\t\t - n14 * n21 * n32\n\t\t\t\t + n12 * n21 * n34\n\t\t\t\t + n14 * n22 * n31\n\t\t\t\t - n12 * n24 * n31\n\t\t\t) +\n\t\t\tn44 * (\n\t\t\t\t- n13 * n22 * n31\n\t\t\t\t - n11 * n23 * n32\n\t\t\t\t + n11 * n22 * n33\n\t\t\t\t + n13 * n21 * n32\n\t\t\t\t - n12 * n21 * n33\n\t\t\t\t + n12 * n23 * n31\n\t\t\t)\n\n\t\t);\n\n\t}\n\n\ttranspose() {\n\n\t\tconst te = this.elements;\n\t\tlet tmp;\n\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\n\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\n\n\t\treturn this;\n\n\t}\n\n\tsetPosition( x, y, z ) {\n\n\t\tconst te = this.elements;\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tte[ 12 ] = x.x;\n\t\t\tte[ 13 ] = x.y;\n\t\t\tte[ 14 ] = x.z;\n\n\t\t} else {\n\n\t\t\tte[ 12 ] = x;\n\t\t\tte[ 13 ] = y;\n\t\t\tte[ 14 ] = z;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tinvert() {\n\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n\t\tconst te = this.elements,\n\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\n\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\n\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\n\n\t\tconst detInv = 1 / det;\n\n\t\tte[ 0 ] = t11 * detInv;\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\n\n\t\tte[ 4 ] = t12 * detInv;\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\n\n\t\tte[ 8 ] = t13 * detInv;\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\n\n\t\tte[ 12 ] = t14 * detInv;\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\n\n\t\treturn this;\n\n\t}\n\n\tscale( v ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = v.x, y = v.y, z = v.z;\n\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxScaleOnAxis() {\n\n\t\tconst te = this.elements;\n\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\n\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\n\n\t}\n\n\tmakeTranslation( x, y, z ) {\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x.x,\n\t\t\t\t0, 1, 0, x.y,\n\t\t\t\t0, 0, 1, x.z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tthis.set(\n\n\t\t\t\t1, 0, 0, x,\n\t\t\t\t0, 1, 0, y,\n\t\t\t\t0, 0, 1, z,\n\t\t\t\t0, 0, 0, 1\n\n\t\t\t);\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationX( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t1, 0, 0, 0,\n\t\t\t0, c, - s, 0,\n\t\t\t0, s, c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationY( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\t c, 0, s, 0,\n\t\t\t 0, 1, 0, 0,\n\t\t\t- s, 0, c, 0,\n\t\t\t 0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationZ( theta ) {\n\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\n\n\t\tthis.set(\n\n\t\t\tc, - s, 0, 0,\n\t\t\ts, c, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeRotationAxis( axis, angle ) {\n\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n\t\tconst c = Math.cos( angle );\n\t\tconst s = Math.sin( angle );\n\t\tconst t = 1 - c;\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\n\t\tconst tx = t * x, ty = t * y;\n\n\t\tthis.set(\n\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeScale( x, y, z ) {\n\n\t\tthis.set(\n\n\t\t\tx, 0, 0, 0,\n\t\t\t0, y, 0, 0,\n\t\t\t0, 0, z, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\n\n\t\tthis.set(\n\n\t\t\t1, yx, zx, 0,\n\t\t\txy, 1, zy, 0,\n\t\t\txz, yz, 1, 0,\n\t\t\t0, 0, 0, 1\n\n\t\t);\n\n\t\treturn this;\n\n\t}\n\n\tcompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\n\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\n\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\n\t\tte[ 1 ] = ( xy + wz ) * sx;\n\t\tte[ 2 ] = ( xz - wy ) * sx;\n\t\tte[ 3 ] = 0;\n\n\t\tte[ 4 ] = ( xy - wz ) * sy;\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\n\t\tte[ 6 ] = ( yz + wx ) * sy;\n\t\tte[ 7 ] = 0;\n\n\t\tte[ 8 ] = ( xz + wy ) * sz;\n\t\tte[ 9 ] = ( yz - wx ) * sz;\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\n\t\tte[ 11 ] = 0;\n\n\t\tte[ 12 ] = position.x;\n\t\tte[ 13 ] = position.y;\n\t\tte[ 14 ] = position.z;\n\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tdecompose( position, quaternion, scale ) {\n\n\t\tconst te = this.elements;\n\n\t\tlet sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\n\t\tconst sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\n\t\tconst sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\n\n\t\t// if determine is negative, we need to invert one scale\n\t\tconst det = this.determinant();\n\t\tif ( det < 0 ) sx = - sx;\n\n\t\tposition.x = te[ 12 ];\n\t\tposition.y = te[ 13 ];\n\t\tposition.z = te[ 14 ];\n\n\t\t// scale the rotation part\n\t\t_m1$2.copy( this );\n\n\t\tconst invSX = 1 / sx;\n\t\tconst invSY = 1 / sy;\n\t\tconst invSZ = 1 / sz;\n\n\t\t_m1$2.elements[ 0 ] *= invSX;\n\t\t_m1$2.elements[ 1 ] *= invSX;\n\t\t_m1$2.elements[ 2 ] *= invSX;\n\n\t\t_m1$2.elements[ 4 ] *= invSY;\n\t\t_m1$2.elements[ 5 ] *= invSY;\n\t\t_m1$2.elements[ 6 ] *= invSY;\n\n\t\t_m1$2.elements[ 8 ] *= invSZ;\n\t\t_m1$2.elements[ 9 ] *= invSZ;\n\t\t_m1$2.elements[ 10 ] *= invSZ;\n\n\t\tquaternion.setFromRotationMatrix( _m1$2 );\n\n\t\tscale.x = sx;\n\t\tscale.y = sy;\n\t\tscale.z = sz;\n\n\t\treturn this;\n\n\t}\n\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst x = 2 * near / ( right - left );\n\t\tconst y = 2 * near / ( top - bottom );\n\n\t\tconst a = ( right + left ) / ( right - left );\n\t\tconst b = ( top + bottom ) / ( top - bottom );\n\n\t\tlet c, d;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tc = - ( far + near ) / ( far - near );\n\t\t\td = ( - 2 * far * near ) / ( far - near );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tc = - far / ( far - near );\n\t\t\td = ( - far * near ) / ( far - near );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\n\n\t\treturn this;\n\n\t}\n\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst te = this.elements;\n\t\tconst w = 1.0 / ( right - left );\n\t\tconst h = 1.0 / ( top - bottom );\n\t\tconst p = 1.0 / ( far - near );\n\n\t\tconst x = ( right + left ) * w;\n\t\tconst y = ( top + bottom ) * h;\n\n\t\tlet z, zInv;\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tz = ( far + near ) * p;\n\t\t\tzInv = - 2 * p;\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tz = near * p;\n\t\t\tzInv = - 1 * p;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\n\n\t\treturn this;\n\n\t}\n\n\tequals( matrix ) {\n\n\t\tconst te = this.elements;\n\t\tconst me = matrix.elements;\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tfor ( let i = 0; i < 16; i ++ ) {\n\n\t\t\tthis.elements[ i ] = array[ i + offset ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst te = this.elements;\n\n\t\tarray[ offset ] = te[ 0 ];\n\t\tarray[ offset + 1 ] = te[ 1 ];\n\t\tarray[ offset + 2 ] = te[ 2 ];\n\t\tarray[ offset + 3 ] = te[ 3 ];\n\n\t\tarray[ offset + 4 ] = te[ 4 ];\n\t\tarray[ offset + 5 ] = te[ 5 ];\n\t\tarray[ offset + 6 ] = te[ 6 ];\n\t\tarray[ offset + 7 ] = te[ 7 ];\n\n\t\tarray[ offset + 8 ] = te[ 8 ];\n\t\tarray[ offset + 9 ] = te[ 9 ];\n\t\tarray[ offset + 10 ] = te[ 10 ];\n\t\tarray[ offset + 11 ] = te[ 11 ];\n\n\t\tarray[ offset + 12 ] = te[ 12 ];\n\t\tarray[ offset + 13 ] = te[ 13 ];\n\t\tarray[ offset + 14 ] = te[ 14 ];\n\t\tarray[ offset + 15 ] = te[ 15 ];\n\n\t\treturn array;\n\n\t}\n\n}\n\nconst _v1$5 = /*@__PURE__*/ new Vector3();\nconst _m1$2 = /*@__PURE__*/ new Matrix4();\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\nconst _x = /*@__PURE__*/ new Vector3();\nconst _y = /*@__PURE__*/ new Vector3();\nconst _z = /*@__PURE__*/ new Vector3();\n\nconst _matrix = /*@__PURE__*/ new Matrix4();\nconst _quaternion$3 = /*@__PURE__*/ new Quaternion();\n\nclass Euler {\n\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\n\n\t\tthis.isEuler = true;\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t}\n\n\tget x() {\n\n\t\treturn this._x;\n\n\t}\n\n\tset x( value ) {\n\n\t\tthis._x = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget y() {\n\n\t\treturn this._y;\n\n\t}\n\n\tset y( value ) {\n\n\t\tthis._y = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget z() {\n\n\t\treturn this._z;\n\n\t}\n\n\tset z( value ) {\n\n\t\tthis._z = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tget order() {\n\n\t\treturn this._order;\n\n\t}\n\n\tset order( value ) {\n\n\t\tthis._order = value;\n\t\tthis._onChangeCallback();\n\n\t}\n\n\tset( x, y, z, order = this._order ) {\n\n\t\tthis._x = x;\n\t\tthis._y = y;\n\t\tthis._z = z;\n\t\tthis._order = order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\n\n\t}\n\n\tcopy( euler ) {\n\n\t\tthis._x = euler._x;\n\t\tthis._y = euler._y;\n\t\tthis._z = euler._z;\n\t\tthis._order = euler._order;\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tconst te = m.elements;\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\n\n\t\tswitch ( order ) {\n\n\t\t\tcase 'XYZ':\n\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YXZ':\n\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\t\t\t\t\tthis._z = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZXY':\n\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._y = 0;\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZYX':\n\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'YZX':\n\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = 0;\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'XZY':\n\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\n\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\n\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\n\t\t\t\t\tthis._y = 0;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\n\n\t\t}\n\n\t\tthis._order = order;\n\n\t\tif ( update === true ) this._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\tsetFromQuaternion( q, order, update ) {\n\n\t\t_matrix.makeRotationFromQuaternion( q );\n\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\n\n\t}\n\n\tsetFromVector3( v, order = this._order ) {\n\n\t\treturn this.set( v.x, v.y, v.z, order );\n\n\t}\n\n\treorder( newOrder ) {\n\n\t\t// WARNING: this discards revolution information -bhouston\n\n\t\t_quaternion$3.setFromEuler( this );\n\n\t\treturn this.setFromQuaternion( _quaternion$3, newOrder );\n\n\t}\n\n\tequals( euler ) {\n\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\n\n\t}\n\n\tfromArray( array ) {\n\n\t\tthis._x = array[ 0 ];\n\t\tthis._y = array[ 1 ];\n\t\tthis._z = array[ 2 ];\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\n\n\t\tthis._onChangeCallback();\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this._x;\n\t\tarray[ offset + 1 ] = this._y;\n\t\tarray[ offset + 2 ] = this._z;\n\t\tarray[ offset + 3 ] = this._order;\n\n\t\treturn array;\n\n\t}\n\n\t_onChange( callback ) {\n\n\t\tthis._onChangeCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\t_onChangeCallback() {}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this._x;\n\t\tyield this._y;\n\t\tyield this._z;\n\t\tyield this._order;\n\n\t}\n\n}\n\nEuler.DEFAULT_ORDER = 'XYZ';\n\nclass Layers {\n\n\tconstructor() {\n\n\t\tthis.mask = 1 | 0;\n\n\t}\n\n\tset( channel ) {\n\n\t\tthis.mask = ( 1 << channel | 0 ) >>> 0;\n\n\t}\n\n\tenable( channel ) {\n\n\t\tthis.mask |= 1 << channel | 0;\n\n\t}\n\n\tenableAll() {\n\n\t\tthis.mask = 0xffffffff | 0;\n\n\t}\n\n\ttoggle( channel ) {\n\n\t\tthis.mask ^= 1 << channel | 0;\n\n\t}\n\n\tdisable( channel ) {\n\n\t\tthis.mask &= ~ ( 1 << channel | 0 );\n\n\t}\n\n\tdisableAll() {\n\n\t\tthis.mask = 0;\n\n\t}\n\n\ttest( layers ) {\n\n\t\treturn ( this.mask & layers.mask ) !== 0;\n\n\t}\n\n\tisEnabled( channel ) {\n\n\t\treturn ( this.mask & ( 1 << channel | 0 ) ) !== 0;\n\n\t}\n\n}\n\nlet _object3DId = 0;\n\nconst _v1$4 = /*@__PURE__*/ new Vector3();\nconst _q1 = /*@__PURE__*/ new Quaternion();\nconst _m1$1 = /*@__PURE__*/ new Matrix4();\nconst _target = /*@__PURE__*/ new Vector3();\n\nconst _position$3 = /*@__PURE__*/ new Vector3();\nconst _scale$2 = /*@__PURE__*/ new Vector3();\nconst _quaternion$2 = /*@__PURE__*/ new Quaternion();\n\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\n\nconst _addedEvent = { type: 'added' };\nconst _removedEvent = { type: 'removed' };\n\nclass Object3D extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isObject3D = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Object3D';\n\n\t\tthis.parent = null;\n\t\tthis.children = [];\n\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\n\n\t\tconst position = new Vector3();\n\t\tconst rotation = new Euler();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3( 1, 1, 1 );\n\n\t\tfunction onRotationChange() {\n\n\t\t\tquaternion.setFromEuler( rotation, false );\n\n\t\t}\n\n\t\tfunction onQuaternionChange() {\n\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\n\n\t\t}\n\n\t\trotation._onChange( onRotationChange );\n\t\tquaternion._onChange( onQuaternionChange );\n\n\t\tObject.defineProperties( this, {\n\t\t\tposition: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: position\n\t\t\t},\n\t\t\trotation: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: rotation\n\t\t\t},\n\t\t\tquaternion: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: quaternion\n\t\t\t},\n\t\t\tscale: {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: scale\n\t\t\t},\n\t\t\tmodelViewMatrix: {\n\t\t\t\tvalue: new Matrix4()\n\t\t\t},\n\t\t\tnormalMatrix: {\n\t\t\t\tvalue: new Matrix3()\n\t\t\t}\n\t\t} );\n\n\t\tthis.matrix = new Matrix4();\n\t\tthis.matrixWorld = new Matrix4();\n\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\n\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\n\n\t\tthis.layers = new Layers();\n\t\tthis.visible = true;\n\n\t\tthis.castShadow = false;\n\t\tthis.receiveShadow = false;\n\n\t\tthis.frustumCulled = true;\n\t\tthis.renderOrder = 0;\n\n\t\tthis.animations = [];\n\n\t\tthis.userData = {};\n\n\t}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tthis.matrix.premultiply( matrix );\n\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\tthis.quaternion.premultiply( q );\n\n\t\treturn this;\n\n\t}\n\n\tsetRotationFromAxisAngle( axis, angle ) {\n\n\t\t// assumes axis is normalized\n\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\n\n\t}\n\n\tsetRotationFromEuler( euler ) {\n\n\t\tthis.quaternion.setFromEuler( euler, true );\n\n\t}\n\n\tsetRotationFromMatrix( m ) {\n\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n\t\tthis.quaternion.setFromRotationMatrix( m );\n\n\t}\n\n\tsetRotationFromQuaternion( q ) {\n\n\t\t// assumes q is normalized\n\n\t\tthis.quaternion.copy( q );\n\n\t}\n\n\trotateOnAxis( axis, angle ) {\n\n\t\t// rotate object on axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.multiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateOnWorldAxis( axis, angle ) {\n\n\t\t// rotate object on axis in world space\n\t\t// axis is assumed to be normalized\n\t\t// method assumes no rotated parent\n\n\t\t_q1.setFromAxisAngle( axis, angle );\n\n\t\tthis.quaternion.premultiply( _q1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\treturn this.rotateOnAxis( _xAxis, angle );\n\n\t}\n\n\trotateY( angle ) {\n\n\t\treturn this.rotateOnAxis( _yAxis, angle );\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\treturn this.rotateOnAxis( _zAxis, angle );\n\n\t}\n\n\ttranslateOnAxis( axis, distance ) {\n\n\t\t// translate object by distance along axis in object space\n\t\t// axis is assumed to be normalized\n\n\t\t_v1$4.copy( axis ).applyQuaternion( this.quaternion );\n\n\t\tthis.position.add( _v1$4.multiplyScalar( distance ) );\n\n\t\treturn this;\n\n\t}\n\n\ttranslateX( distance ) {\n\n\t\treturn this.translateOnAxis( _xAxis, distance );\n\n\t}\n\n\ttranslateY( distance ) {\n\n\t\treturn this.translateOnAxis( _yAxis, distance );\n\n\t}\n\n\ttranslateZ( distance ) {\n\n\t\treturn this.translateOnAxis( _zAxis, distance );\n\n\t}\n\n\tlocalToWorld( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( this.matrixWorld );\n\n\t}\n\n\tworldToLocal( vector ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );\n\n\t}\n\n\tlookAt( x, y, z ) {\n\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\n\n\t\tif ( x.isVector3 ) {\n\n\t\t\t_target.copy( x );\n\n\t\t} else {\n\n\t\t\t_target.set( x, y, z );\n\n\t\t}\n\n\t\tconst parent = this.parent;\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_position$3.setFromMatrixPosition( this.matrixWorld );\n\n\t\tif ( this.isCamera || this.isLight ) {\n\n\t\t\t_m1$1.lookAt( _position$3, _target, this.up );\n\n\t\t} else {\n\n\t\t\t_m1$1.lookAt( _target, _position$3, this.up );\n\n\t\t}\n\n\t\tthis.quaternion.setFromRotationMatrix( _m1$1 );\n\n\t\tif ( parent ) {\n\n\t\t\t_m1$1.extractRotation( parent.matrixWorld );\n\t\t\t_q1.setFromRotationMatrix( _m1$1 );\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\n\n\t\t}\n\n\t}\n\n\tadd( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.add( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object === this ) {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tif ( object && object.isObject3D ) {\n\n\t\t\tif ( object.parent !== null ) {\n\n\t\t\t\tobject.parent.remove( object );\n\n\t\t\t}\n\n\t\t\tobject.parent = this;\n\t\t\tthis.children.push( object );\n\n\t\t\tobject.dispatchEvent( _addedEvent );\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( object ) {\n\n\t\tif ( arguments.length > 1 ) {\n\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\n\n\t\t\t\tthis.remove( arguments[ i ] );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst index = this.children.indexOf( object );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tobject.parent = null;\n\t\t\tthis.children.splice( index, 1 );\n\n\t\t\tobject.dispatchEvent( _removedEvent );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremoveFromParent() {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tparent.remove( this );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclear() {\n\n\t\treturn this.remove( ... this.children );\n\n\t}\n\n\tattach( object ) {\n\n\t\t// adds object as a child of this, while maintaining the object's world transform\n\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\t_m1$1.copy( this.matrixWorld ).invert();\n\n\t\tif ( object.parent !== null ) {\n\n\t\t\tobject.parent.updateWorldMatrix( true, false );\n\n\t\t\t_m1$1.multiply( object.parent.matrixWorld );\n\n\t\t}\n\n\t\tobject.applyMatrix4( _m1$1 );\n\n\t\tthis.add( object );\n\n\t\tobject.updateWorldMatrix( false, true );\n\n\t\treturn this;\n\n\t}\n\n\tgetObjectById( id ) {\n\n\t\treturn this.getObjectByProperty( 'id', id );\n\n\t}\n\n\tgetObjectByName( name ) {\n\n\t\treturn this.getObjectByProperty( 'name', name );\n\n\t}\n\n\tgetObjectByProperty( name, value ) {\n\n\t\tif ( this[ name ] === value ) return this;\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst child = this.children[ i ];\n\t\t\tconst object = child.getObjectByProperty( name, value );\n\n\t\t\tif ( object !== undefined ) {\n\n\t\t\t\treturn object;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tgetObjectsByProperty( name, value ) {\n\n\t\tlet result = [];\n\n\t\tif ( this[ name ] === value ) result.push( this );\n\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\n\n\t\t\tconst childResult = this.children[ i ].getObjectsByProperty( name, value );\n\n\t\t\tif ( childResult.length > 0 ) {\n\n\t\t\t\tresult = result.concat( childResult );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tgetWorldPosition( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\n\n\t}\n\n\tgetWorldQuaternion( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, target, _scale$2 );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldScale( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tthis.matrixWorld.decompose( _position$3, _quaternion$2, target );\n\n\t\treturn target;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\tthis.updateWorldMatrix( true, false );\n\n\t\tconst e = this.matrixWorld.elements;\n\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\n\n\t}\n\n\traycast( /* raycaster, intersects */ ) {}\n\n\ttraverse( callback ) {\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverse( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseVisible( callback ) {\n\n\t\tif ( this.visible === false ) return;\n\n\t\tcallback( this );\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].traverseVisible( callback );\n\n\t\t}\n\n\t}\n\n\ttraverseAncestors( callback ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( parent !== null ) {\n\n\t\t\tcallback( parent );\n\n\t\t\tparent.traverseAncestors( callback );\n\n\t\t}\n\n\t}\n\n\tupdateMatrix() {\n\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\n\n\t\tthis.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\n\n\t\t\tif ( this.parent === null ) {\n\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t\t}\n\n\t\t\tthis.matrixWorldNeedsUpdate = false;\n\n\t\t\tforce = true;\n\n\t\t}\n\n\t\t// update children\n\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.matrixWorldAutoUpdate === true || force === true ) {\n\n\t\t\t\tchild.updateMatrixWorld( force );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tconst parent = this.parent;\n\n\t\tif ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {\n\n\t\t\tparent.updateWorldMatrix( true, false );\n\n\t\t}\n\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\n\n\t\tif ( this.parent === null ) {\n\n\t\t\tthis.matrixWorld.copy( this.matrix );\n\n\t\t} else {\n\n\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\n\n\t\t}\n\n\t\t// update children\n\n\t\tif ( updateChildren === true ) {\n\n\t\t\tconst children = this.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tconst child = children[ i ];\n\n\t\t\t\tif ( child.matrixWorldAutoUpdate === true ) {\n\n\t\t\t\t\tchild.updateWorldMatrix( false, true );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\t// meta is a string when called from JSON.stringify\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tconst output = {};\n\n\t\t// meta is a hash used to collect geometries, materials.\n\t\t// not providing it implies that this is the root object\n\t\t// being serialized.\n\t\tif ( isRootObject ) {\n\n\t\t\t// initialize meta obj\n\t\t\tmeta = {\n\t\t\t\tgeometries: {},\n\t\t\t\tmaterials: {},\n\t\t\t\ttextures: {},\n\t\t\t\timages: {},\n\t\t\t\tshapes: {},\n\t\t\t\tskeletons: {},\n\t\t\t\tanimations: {},\n\t\t\t\tnodes: {}\n\t\t\t};\n\n\t\t\toutput.metadata = {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Object',\n\t\t\t\tgenerator: 'Object3D.toJSON'\n\t\t\t};\n\n\t\t}\n\n\t\t// standard Object3D serialization\n\n\t\tconst object = {};\n\n\t\tobject.uuid = this.uuid;\n\t\tobject.type = this.type;\n\n\t\tif ( this.name !== '' ) object.name = this.name;\n\t\tif ( this.castShadow === true ) object.castShadow = true;\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\n\t\tif ( this.visible === false ) object.visible = false;\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\n\n\t\tobject.layers = this.layers.mask;\n\t\tobject.matrix = this.matrix.toArray();\n\t\tobject.up = this.up.toArray();\n\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\n\n\t\t// object specific properties\n\n\t\tif ( this.isInstancedMesh ) {\n\n\t\t\tobject.type = 'InstancedMesh';\n\t\t\tobject.count = this.count;\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\n\n\t\t}\n\n\t\t//\n\n\t\tfunction serialize( library, element ) {\n\n\t\t\tif ( library[ element.uuid ] === undefined ) {\n\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\n\n\t\t\t}\n\n\t\t\treturn element.uuid;\n\n\t\t}\n\n\t\tif ( this.isScene ) {\n\n\t\t\tif ( this.background ) {\n\n\t\t\t\tif ( this.background.isColor ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON();\n\n\t\t\t\t} else if ( this.background.isTexture ) {\n\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\n\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\n\n\t\t\t}\n\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\n\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\n\n\t\t\tconst parameters = this.geometry.parameters;\n\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\n\n\t\t\t\tconst shapes = parameters.shapes;\n\n\t\t\t\tif ( Array.isArray( shapes ) ) {\n\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tconst shape = shapes[ i ];\n\n\t\t\t\t\t\tserialize( meta.shapes, shape );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tserialize( meta.shapes, shapes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.isSkinnedMesh ) {\n\n\t\t\tobject.bindMode = this.bindMode;\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\n\n\t\t\tif ( this.skeleton !== undefined ) {\n\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\n\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.material !== undefined ) {\n\n\t\t\tif ( Array.isArray( this.material ) ) {\n\n\t\t\t\tconst uuids = [];\n\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\n\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\n\n\t\t\t\t}\n\n\t\t\t\tobject.material = uuids;\n\n\t\t\t} else {\n\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.children.length > 0 ) {\n\n\t\t\tobject.children = [];\n\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\n\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.animations.length > 0 ) {\n\n\t\t\tobject.animations = [];\n\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\n\n\t\t\t\tconst animation = this.animations[ i ];\n\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst geometries = extractFromCache( meta.geometries );\n\t\t\tconst materials = extractFromCache( meta.materials );\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\t\t\tconst shapes = extractFromCache( meta.shapes );\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\n\t\t\tconst animations = extractFromCache( meta.animations );\n\t\t\tconst nodes = extractFromCache( meta.nodes );\n\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\n\t\t\tif ( images.length > 0 ) output.images = images;\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\n\n\t\t}\n\n\t\toutput.object = object;\n\n\t\treturn output;\n\n\t\t// extract data from the cache hash\n\t\t// remove metadata on each item\n\t\t// and return as array\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t}\n\n\tclone( recursive ) {\n\n\t\treturn new this.constructor().copy( this, recursive );\n\n\t}\n\n\tcopy( source, recursive = true ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.up.copy( source.up );\n\n\t\tthis.position.copy( source.position );\n\t\tthis.rotation.order = source.rotation.order;\n\t\tthis.quaternion.copy( source.quaternion );\n\t\tthis.scale.copy( source.scale );\n\n\t\tthis.matrix.copy( source.matrix );\n\t\tthis.matrixWorld.copy( source.matrixWorld );\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\n\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\n\n\t\tthis.layers.mask = source.layers.mask;\n\t\tthis.visible = source.visible;\n\n\t\tthis.castShadow = source.castShadow;\n\t\tthis.receiveShadow = source.receiveShadow;\n\n\t\tthis.frustumCulled = source.frustumCulled;\n\t\tthis.renderOrder = source.renderOrder;\n\n\t\tthis.animations = source.animations.slice();\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\tif ( recursive === true ) {\n\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\n\n\t\t\t\tconst child = source.children[ i ];\n\t\t\t\tthis.add( child.clone() );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\n\nconst _v0$1 = /*@__PURE__*/ new Vector3();\nconst _v1$3 = /*@__PURE__*/ new Vector3();\nconst _v2$2 = /*@__PURE__*/ new Vector3();\nconst _v3$1 = /*@__PURE__*/ new Vector3();\n\nconst _vab = /*@__PURE__*/ new Vector3();\nconst _vac = /*@__PURE__*/ new Vector3();\nconst _vbc = /*@__PURE__*/ new Vector3();\nconst _vap = /*@__PURE__*/ new Vector3();\nconst _vbp = /*@__PURE__*/ new Vector3();\nconst _vcp = /*@__PURE__*/ new Vector3();\n\nlet warnedGetUV = false;\n\nclass Triangle {\n\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t}\n\n\tstatic getNormal( a, b, c, target ) {\n\n\t\ttarget.subVectors( c, b );\n\t\t_v0$1.subVectors( a, b );\n\t\ttarget.cross( _v0$1 );\n\n\t\tconst targetLengthSq = target.lengthSq();\n\t\tif ( targetLengthSq > 0 ) {\n\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\n\n\t\t}\n\n\t\treturn target.set( 0, 0, 0 );\n\n\t}\n\n\t// static/instance method to calculate barycentric coordinates\n\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\n\tstatic getBarycoord( point, a, b, c, target ) {\n\n\t\t_v0$1.subVectors( c, a );\n\t\t_v1$3.subVectors( b, a );\n\t\t_v2$2.subVectors( point, a );\n\n\t\tconst dot00 = _v0$1.dot( _v0$1 );\n\t\tconst dot01 = _v0$1.dot( _v1$3 );\n\t\tconst dot02 = _v0$1.dot( _v2$2 );\n\t\tconst dot11 = _v1$3.dot( _v1$3 );\n\t\tconst dot12 = _v1$3.dot( _v2$2 );\n\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\n\n\t\t// collinear or singular triangle\n\t\tif ( denom === 0 ) {\n\n\t\t\t// arbitrary location outside of triangle?\n\t\t\t// not sure if this is the best idea, maybe should be returning undefined\n\t\t\treturn target.set( - 2, - 1, - 1 );\n\n\t\t}\n\n\t\tconst invDenom = 1 / denom;\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\n\n\t\t// barycentric coordinates must always sum to 1\n\t\treturn target.set( 1 - u - v, v, u );\n\n\t}\n\n\tstatic containsPoint( point, a, b, c ) {\n\n\t\tthis.getBarycoord( point, a, b, c, _v3$1 );\n\n\t\treturn ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );\n\n\t}\n\n\tstatic getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) { // @deprecated, r151\n\n\t\tif ( warnedGetUV === false ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );\n\n\t\t\twarnedGetUV = true;\n\n\t\t}\n\n\t\treturn this.getInterpolation( point, p1, p2, p3, uv1, uv2, uv3, target );\n\n\t}\n\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\n\n\t\tthis.getBarycoord( point, p1, p2, p3, _v3$1 );\n\n\t\ttarget.setScalar( 0 );\n\t\ttarget.addScaledVector( v1, _v3$1.x );\n\t\ttarget.addScaledVector( v2, _v3$1.y );\n\t\ttarget.addScaledVector( v3, _v3$1.z );\n\n\t\treturn target;\n\n\t}\n\n\tstatic isFrontFacing( a, b, c, direction ) {\n\n\t\t_v0$1.subVectors( c, b );\n\t\t_v1$3.subVectors( a, b );\n\n\t\t// strictly front facing\n\t\treturn ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;\n\n\t}\n\n\tset( a, b, c ) {\n\n\t\tthis.a.copy( a );\n\t\tthis.b.copy( b );\n\t\tthis.c.copy( c );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\n\n\t\tthis.a.copy( points[ i0 ] );\n\t\tthis.b.copy( points[ i1 ] );\n\t\tthis.c.copy( points[ i2 ] );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\n\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( triangle ) {\n\n\t\tthis.a.copy( triangle.a );\n\t\tthis.b.copy( triangle.b );\n\t\tthis.c.copy( triangle.c );\n\n\t\treturn this;\n\n\t}\n\n\tgetArea() {\n\n\t\t_v0$1.subVectors( this.c, this.b );\n\t\t_v1$3.subVectors( this.a, this.b );\n\n\t\treturn _v0$1.cross( _v1$3 ).length() * 0.5;\n\n\t}\n\n\tgetMidpoint( target ) {\n\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\n\n\t}\n\n\tgetNormal( target ) {\n\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\n\n\t}\n\n\tgetPlane( target ) {\n\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\n\n\t}\n\n\tgetBarycoord( point, target ) {\n\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\n\n\t}\n\n\tgetUV( point, uv1, uv2, uv3, target ) { // @deprecated, r151\n\n\t\tif ( warnedGetUV === false ) {\n\n\t\t\tconsole.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );\n\n\t\t\twarnedGetUV = true;\n\n\t\t}\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, uv1, uv2, uv3, target );\n\n\t}\n\n\tgetInterpolation( point, v1, v2, v3, target ) {\n\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\n\n\t}\n\n\tisFrontFacing( direction ) {\n\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsTriangle( this );\n\n\t}\n\n\tclosestPointToPoint( p, target ) {\n\n\t\tconst a = this.a, b = this.b, c = this.c;\n\t\tlet v, w;\n\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\n\t\t// the point lies in with the minimum amount of redundant computation.\n\n\t\t_vab.subVectors( b, a );\n\t\t_vac.subVectors( c, a );\n\t\t_vap.subVectors( p, a );\n\t\tconst d1 = _vab.dot( _vap );\n\t\tconst d2 = _vac.dot( _vap );\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\n\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\n\t\t\treturn target.copy( a );\n\n\t\t}\n\n\t\t_vbp.subVectors( p, b );\n\t\tconst d3 = _vab.dot( _vbp );\n\t\tconst d4 = _vac.dot( _vbp );\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\n\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\n\t\t\treturn target.copy( b );\n\n\t\t}\n\n\t\tconst vc = d1 * d4 - d3 * d2;\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\n\n\t\t\tv = d1 / ( d1 - d3 );\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\n\n\t\t}\n\n\t\t_vcp.subVectors( p, c );\n\t\tconst d5 = _vab.dot( _vcp );\n\t\tconst d6 = _vac.dot( _vcp );\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\n\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\n\t\t\treturn target.copy( c );\n\n\t\t}\n\n\t\tconst vb = d5 * d2 - d1 * d6;\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\n\n\t\t\tw = d2 / ( d2 - d6 );\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\n\n\t\t}\n\n\t\tconst va = d3 * d6 - d5 * d4;\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\n\n\t\t\t_vbc.subVectors( c, b );\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\n\n\t\t}\n\n\t\t// face region\n\t\tconst denom = 1 / ( va + vb + vc );\n\t\t// u = va * denom\n\t\tv = vb * denom;\n\t\tw = vc * denom;\n\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\n\n\t}\n\n\tequals( triangle ) {\n\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\n\n\t}\n\n}\n\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\n\nconst _hslA = { h: 0, s: 0, l: 0 };\nconst _hslB = { h: 0, s: 0, l: 0 };\n\nfunction hue2rgb( p, q, t ) {\n\n\tif ( t < 0 ) t += 1;\n\tif ( t > 1 ) t -= 1;\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\n\tif ( t < 1 / 2 ) return q;\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\n\treturn p;\n\n}\n\nclass Color {\n\n\tconstructor( r, g, b ) {\n\n\t\tthis.isColor = true;\n\n\t\tthis.r = 1;\n\t\tthis.g = 1;\n\t\tthis.b = 1;\n\n\t\treturn this.set( r, g, b );\n\n\t}\n\n\tset( r, g, b ) {\n\n\t\tif ( g === undefined && b === undefined ) {\n\n\t\t\t// r is THREE.Color, hex or string\n\n\t\t\tconst value = r;\n\n\t\t\tif ( value && value.isColor ) {\n\n\t\t\t\tthis.copy( value );\n\n\t\t\t} else if ( typeof value === 'number' ) {\n\n\t\t\t\tthis.setHex( value );\n\n\t\t\t} else if ( typeof value === 'string' ) {\n\n\t\t\t\tthis.setStyle( value );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.setRGB( r, g, b );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetScalar( scalar ) {\n\n\t\tthis.r = scalar;\n\t\tthis.g = scalar;\n\t\tthis.b = scalar;\n\n\t\treturn this;\n\n\t}\n\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\n\n\t\thex = Math.floor( hex );\n\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\n\t\tthis.b = ( hex & 255 ) / 255;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tthis.r = r;\n\t\tthis.g = g;\n\t\tthis.b = b;\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\t\th = euclideanModulo( h, 1 );\n\t\ts = clamp( s, 0, 1 );\n\t\tl = clamp( l, 0, 1 );\n\n\t\tif ( s === 0 ) {\n\n\t\t\tthis.r = this.g = this.b = l;\n\n\t\t} else {\n\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\n\t\t\tconst q = ( 2 * l ) - p;\n\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\n\t\t\tthis.g = hue2rgb( q, p, h );\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\n\n\t\t}\n\n\t\tColorManagement.toWorkingColorSpace( this, colorSpace );\n\n\t\treturn this;\n\n\t}\n\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\n\n\t\tfunction handleAlpha( string ) {\n\n\t\t\tif ( string === undefined ) return;\n\n\t\t\tif ( parseFloat( string ) < 1 ) {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\n\n\t\t\t}\n\n\t\t}\n\n\n\t\tlet m;\n\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\n\n\t\t\t// rgb / hsl\n\n\t\t\tlet color;\n\t\t\tconst name = m[ 1 ];\n\t\t\tconst components = m[ 2 ];\n\n\t\t\tswitch ( name ) {\n\n\t\t\t\tcase 'rgb':\n\t\t\t\tcase 'rgba':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setRGB(\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'hsl':\n\t\t\t\tcase 'hsla':\n\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\n\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\n\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\n\n\t\t\t\t\t\treturn this.setHSL(\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\n\t\t\t\t\t\t\tcolorSpace\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\n\n\t\t\t}\n\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\n\n\t\t\t// hex color\n\n\t\t\tconst hex = m[ 1 ];\n\t\t\tconst size = hex.length;\n\n\t\t\tif ( size === 3 ) {\n\n\t\t\t\t// #ff0\n\t\t\t\treturn this.setRGB(\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\n\t\t\t\t\tcolorSpace\n\t\t\t\t);\n\n\t\t\t} else if ( size === 6 ) {\n\n\t\t\t\t// #ff0000\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\n\n\t\t\t}\n\n\t\t} else if ( style && style.length > 0 ) {\n\n\t\t\treturn this.setColorName( style, colorSpace );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\n\n\t\t// color keywords\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\n\n\t\tif ( hex !== undefined ) {\n\n\t\t\t// red\n\t\t\tthis.setHex( hex, colorSpace );\n\n\t\t} else {\n\n\t\t\t// unknown color\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.r, this.g, this.b );\n\n\t}\n\n\tcopy( color ) {\n\n\t\tthis.r = color.r;\n\t\tthis.g = color.g;\n\t\tthis.b = color.b;\n\n\t\treturn this;\n\n\t}\n\n\tcopySRGBToLinear( color ) {\n\n\t\tthis.r = SRGBToLinear( color.r );\n\t\tthis.g = SRGBToLinear( color.g );\n\t\tthis.b = SRGBToLinear( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tcopyLinearToSRGB( color ) {\n\n\t\tthis.r = LinearToSRGB( color.r );\n\t\tthis.g = LinearToSRGB( color.g );\n\t\tthis.b = LinearToSRGB( color.b );\n\n\t\treturn this;\n\n\t}\n\n\tconvertSRGBToLinear() {\n\n\t\tthis.copySRGBToLinear( this );\n\n\t\treturn this;\n\n\t}\n\n\tconvertLinearToSRGB() {\n\n\t\tthis.copyLinearToSRGB( this );\n\n\t\treturn this;\n\n\t}\n\n\tgetHex( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\n\n\t}\n\n\tgetHexString( colorSpace = SRGBColorSpace ) {\n\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\n\n\t}\n\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\t// h,s,l ranges are in 0.0 - 1.0\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tconst max = Math.max( r, g, b );\n\t\tconst min = Math.min( r, g, b );\n\n\t\tlet hue, saturation;\n\t\tconst lightness = ( min + max ) / 2.0;\n\n\t\tif ( min === max ) {\n\n\t\t\thue = 0;\n\t\t\tsaturation = 0;\n\n\t\t} else {\n\n\t\t\tconst delta = max - min;\n\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\n\n\t\t\tswitch ( max ) {\n\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\n\n\t\t\t}\n\n\t\t\thue /= 6;\n\n\t\t}\n\n\t\ttarget.h = hue;\n\t\ttarget.s = saturation;\n\t\ttarget.l = lightness;\n\n\t\treturn target;\n\n\t}\n\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\ttarget.r = _color.r;\n\t\ttarget.g = _color.g;\n\t\ttarget.b = _color.b;\n\n\t\treturn target;\n\n\t}\n\n\tgetStyle( colorSpace = SRGBColorSpace ) {\n\n\t\tColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );\n\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\n\n\t\tif ( colorSpace !== SRGBColorSpace ) {\n\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\n\n\t\t}\n\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\n\n\t}\n\n\toffsetHSL( h, s, l ) {\n\n\t\tthis.getHSL( _hslA );\n\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\n\n\t}\n\n\tadd( color ) {\n\n\t\tthis.r += color.r;\n\t\tthis.g += color.g;\n\t\tthis.b += color.b;\n\n\t\treturn this;\n\n\t}\n\n\taddColors( color1, color2 ) {\n\n\t\tthis.r = color1.r + color2.r;\n\t\tthis.g = color1.g + color2.g;\n\t\tthis.b = color1.b + color2.b;\n\n\t\treturn this;\n\n\t}\n\n\taddScalar( s ) {\n\n\t\tthis.r += s;\n\t\tthis.g += s;\n\t\tthis.b += s;\n\n\t\treturn this;\n\n\t}\n\n\tsub( color ) {\n\n\t\tthis.r = Math.max( 0, this.r - color.r );\n\t\tthis.g = Math.max( 0, this.g - color.g );\n\t\tthis.b = Math.max( 0, this.b - color.b );\n\n\t\treturn this;\n\n\t}\n\n\tmultiply( color ) {\n\n\t\tthis.r *= color.r;\n\t\tthis.g *= color.g;\n\t\tthis.b *= color.b;\n\n\t\treturn this;\n\n\t}\n\n\tmultiplyScalar( s ) {\n\n\t\tthis.r *= s;\n\t\tthis.g *= s;\n\t\tthis.b *= s;\n\n\t\treturn this;\n\n\t}\n\n\tlerp( color, alpha ) {\n\n\t\tthis.r += ( color.r - this.r ) * alpha;\n\t\tthis.g += ( color.g - this.g ) * alpha;\n\t\tthis.b += ( color.b - this.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpColors( color1, color2, alpha ) {\n\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\n\n\t\treturn this;\n\n\t}\n\n\tlerpHSL( color, alpha ) {\n\n\t\tthis.getHSL( _hslA );\n\t\tcolor.getHSL( _hslB );\n\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\n\n\t\tthis.setHSL( h, s, l );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\tthis.r = v.x;\n\t\tthis.g = v.y;\n\t\tthis.b = v.z;\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tconst r = this.r, g = this.g, b = this.b;\n\t\tconst e = m.elements;\n\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\n\n\t\treturn this;\n\n\t}\n\n\tequals( c ) {\n\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tthis.r = array[ offset ];\n\t\tthis.g = array[ offset + 1 ];\n\t\tthis.b = array[ offset + 2 ];\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tarray[ offset ] = this.r;\n\t\tarray[ offset + 1 ] = this.g;\n\t\tarray[ offset + 2 ] = this.b;\n\n\t\treturn array;\n\n\t}\n\n\tfromBufferAttribute( attribute, index ) {\n\n\t\tthis.r = attribute.getX( index );\n\t\tthis.g = attribute.getY( index );\n\t\tthis.b = attribute.getZ( index );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.getHex();\n\n\t}\n\n\t*[ Symbol.iterator ]() {\n\n\t\tyield this.r;\n\t\tyield this.g;\n\t\tyield this.b;\n\n\t}\n\n}\n\nconst _color = /*@__PURE__*/ new Color();\n\nColor.NAMES = _colorKeywords;\n\nlet _materialId = 0;\n\nclass Material extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isMaterial = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Material';\n\n\t\tthis.blending = NormalBlending;\n\t\tthis.side = FrontSide;\n\t\tthis.vertexColors = false;\n\n\t\tthis.opacity = 1;\n\t\tthis.transparent = false;\n\t\tthis.alphaHash = false;\n\n\t\tthis.blendSrc = SrcAlphaFactor;\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\n\t\tthis.blendEquation = AddEquation;\n\t\tthis.blendSrcAlpha = null;\n\t\tthis.blendDstAlpha = null;\n\t\tthis.blendEquationAlpha = null;\n\t\tthis.blendColor = new Color( 0, 0, 0 );\n\t\tthis.blendAlpha = 0;\n\n\t\tthis.depthFunc = LessEqualDepth;\n\t\tthis.depthTest = true;\n\t\tthis.depthWrite = true;\n\n\t\tthis.stencilWriteMask = 0xff;\n\t\tthis.stencilFunc = AlwaysStencilFunc;\n\t\tthis.stencilRef = 0;\n\t\tthis.stencilFuncMask = 0xff;\n\t\tthis.stencilFail = KeepStencilOp;\n\t\tthis.stencilZFail = KeepStencilOp;\n\t\tthis.stencilZPass = KeepStencilOp;\n\t\tthis.stencilWrite = false;\n\n\t\tthis.clippingPlanes = null;\n\t\tthis.clipIntersection = false;\n\t\tthis.clipShadows = false;\n\n\t\tthis.shadowSide = null;\n\n\t\tthis.colorWrite = true;\n\n\t\tthis.precision = null; // override the renderer's default precision for this material\n\n\t\tthis.polygonOffset = false;\n\t\tthis.polygonOffsetFactor = 0;\n\t\tthis.polygonOffsetUnits = 0;\n\n\t\tthis.dithering = false;\n\n\t\tthis.alphaToCoverage = false;\n\t\tthis.premultipliedAlpha = false;\n\t\tthis.forceSinglePass = false;\n\n\t\tthis.visible = true;\n\n\t\tthis.toneMapped = true;\n\n\t\tthis.userData = {};\n\n\t\tthis.version = 0;\n\n\t\tthis._alphaTest = 0;\n\n\t}\n\n\tget alphaTest() {\n\n\t\treturn this._alphaTest;\n\n\t}\n\n\tset alphaTest( value ) {\n\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._alphaTest = value;\n\n\t}\n\n\tonBuild( /* shaderobject, renderer */ ) {}\n\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\n\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\n\n\tcustomProgramCacheKey() {\n\n\t\treturn this.onBeforeCompile.toString();\n\n\t}\n\n\tsetValues( values ) {\n\n\t\tif ( values === undefined ) return;\n\n\t\tfor ( const key in values ) {\n\n\t\t\tconst newValue = values[ key ];\n\n\t\t\tif ( newValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tconst currentValue = this[ key ];\n\n\t\t\tif ( currentValue === undefined ) {\n\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( currentValue && currentValue.isColor ) {\n\n\t\t\t\tcurrentValue.set( newValue );\n\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\n\n\t\t\t\tcurrentValue.copy( newValue );\n\n\t\t\t} else {\n\n\t\t\t\tthis[ key ] = newValue;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\n\n\t\tif ( isRootObject ) {\n\n\t\t\tmeta = {\n\t\t\t\ttextures: {},\n\t\t\t\timages: {}\n\t\t\t};\n\n\t\t}\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Material',\n\t\t\t\tgenerator: 'Material.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Material serialization\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\n\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\n\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\n\t\tif ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\n\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\n\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\n\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\n\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\n\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\n\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\n\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\n\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\n\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\n\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\n\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\n\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\n\n\t\t}\n\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\n\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\n\n\t\t}\n\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\n\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\n\t\t\tdata.bumpScale = this.bumpScale;\n\n\t\t}\n\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\n\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\n\t\t\tdata.normalMapType = this.normalMapType;\n\t\t\tdata.normalScale = this.normalScale.toArray();\n\n\t\t}\n\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\n\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\n\t\t\tdata.displacementScale = this.displacementScale;\n\t\t\tdata.displacementBias = this.displacementBias;\n\n\t\t}\n\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\n\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\n\n\t\tif ( this.envMap && this.envMap.isTexture ) {\n\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\n\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\n\n\t\t}\n\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\n\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\n\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\n\n\t\t}\n\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\n\n\t\tif ( this.size !== undefined ) data.size = this.size;\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\n\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\n\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\n\t\tif ( this.transparent === true ) data.transparent = true;\n\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\n\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\n\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\n\n\t\t// rotation (SpriteMaterial)\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\n\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\n\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\n\n\t\tif ( this.dithering === true ) data.dithering = true;\n\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\n\n\t\tif ( this.wireframe === true ) data.wireframe = true;\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\n\n\t\tif ( this.flatShading === true ) data.flatShading = true;\n\n\t\tif ( this.visible === false ) data.visible = false;\n\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\n\n\t\tif ( this.fog === false ) data.fog = false;\n\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\t// TODO: Copied from Object3D.toJSON\n\n\t\tfunction extractFromCache( cache ) {\n\n\t\t\tconst values = [];\n\n\t\t\tfor ( const key in cache ) {\n\n\t\t\t\tconst data = cache[ key ];\n\t\t\t\tdelete data.metadata;\n\t\t\t\tvalues.push( data );\n\n\t\t\t}\n\n\t\t\treturn values;\n\n\t\t}\n\n\t\tif ( isRootObject ) {\n\n\t\t\tconst textures = extractFromCache( meta.textures );\n\t\t\tconst images = extractFromCache( meta.images );\n\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\n\t\t\tif ( images.length > 0 ) data.images = images;\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\n\t\tthis.blending = source.blending;\n\t\tthis.side = source.side;\n\t\tthis.vertexColors = source.vertexColors;\n\n\t\tthis.opacity = source.opacity;\n\t\tthis.transparent = source.transparent;\n\n\t\tthis.blendSrc = source.blendSrc;\n\t\tthis.blendDst = source.blendDst;\n\t\tthis.blendEquation = source.blendEquation;\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\n\t\tthis.blendColor.copy( source.blendColor );\n\t\tthis.blendAlpha = source.blendAlpha;\n\n\t\tthis.depthFunc = source.depthFunc;\n\t\tthis.depthTest = source.depthTest;\n\t\tthis.depthWrite = source.depthWrite;\n\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\n\t\tthis.stencilFunc = source.stencilFunc;\n\t\tthis.stencilRef = source.stencilRef;\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\n\t\tthis.stencilFail = source.stencilFail;\n\t\tthis.stencilZFail = source.stencilZFail;\n\t\tthis.stencilZPass = source.stencilZPass;\n\t\tthis.stencilWrite = source.stencilWrite;\n\n\t\tconst srcPlanes = source.clippingPlanes;\n\t\tlet dstPlanes = null;\n\n\t\tif ( srcPlanes !== null ) {\n\n\t\t\tconst n = srcPlanes.length;\n\t\t\tdstPlanes = new Array( n );\n\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.clippingPlanes = dstPlanes;\n\t\tthis.clipIntersection = source.clipIntersection;\n\t\tthis.clipShadows = source.clipShadows;\n\n\t\tthis.shadowSide = source.shadowSide;\n\n\t\tthis.colorWrite = source.colorWrite;\n\n\t\tthis.precision = source.precision;\n\n\t\tthis.polygonOffset = source.polygonOffset;\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\n\n\t\tthis.dithering = source.dithering;\n\n\t\tthis.alphaTest = source.alphaTest;\n\t\tthis.alphaHash = source.alphaHash;\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\n\t\tthis.forceSinglePass = source.forceSinglePass;\n\n\t\tthis.visible = source.visible;\n\n\t\tthis.toneMapped = source.toneMapped;\n\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n}\n\nclass MeshBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshBasicMaterial = true;\n\n\t\tthis.type = 'MeshBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // emissive\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\nconst _tables = /*@__PURE__*/ _generateTables();\n\nfunction _generateTables() {\n\n\t// float32 to float16 helpers\n\n\tconst buffer = new ArrayBuffer( 4 );\n\tconst floatView = new Float32Array( buffer );\n\tconst uint32View = new Uint32Array( buffer );\n\n\tconst baseTable = new Uint32Array( 512 );\n\tconst shiftTable = new Uint32Array( 512 );\n\n\tfor ( let i = 0; i < 256; ++ i ) {\n\n\t\tconst e = i - 127;\n\n\t\t// very small number (0, -0)\n\n\t\tif ( e < - 27 ) {\n\n\t\t\tbaseTable[ i ] = 0x0000;\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// small number (denorm)\n\n\t\t} else if ( e < - 14 ) {\n\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\n\t\t\tshiftTable[ i ] = - e - 1;\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\n\n\t\t\t// normal number\n\n\t\t} else if ( e <= 15 ) {\n\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t\t// large number (Infinity, -Infinity)\n\n\t\t} else if ( e < 128 ) {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 24;\n\t\t\tshiftTable[ i | 0x100 ] = 24;\n\n\t\t\t// stay (NaN, Infinity, -Infinity)\n\n\t\t} else {\n\n\t\t\tbaseTable[ i ] = 0x7c00;\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\n\t\t\tshiftTable[ i ] = 13;\n\t\t\tshiftTable[ i | 0x100 ] = 13;\n\n\t\t}\n\n\t}\n\n\t// float16 to float32 helpers\n\n\tconst mantissaTable = new Uint32Array( 2048 );\n\tconst exponentTable = new Uint32Array( 64 );\n\tconst offsetTable = new Uint32Array( 64 );\n\n\tfor ( let i = 1; i < 1024; ++ i ) {\n\n\t\tlet m = i << 13; // zero pad mantissa bits\n\t\tlet e = 0; // zero exponent\n\n\t\t// normalized\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\n\n\t\t\tm <<= 1;\n\t\t\te -= 0x00800000; // decrement exponent\n\n\t\t}\n\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\n\t\te += 0x38800000; // adjust bias\n\n\t\tmantissaTable[ i ] = m | e;\n\n\t}\n\n\tfor ( let i = 1024; i < 2048; ++ i ) {\n\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\n\n\t}\n\n\tfor ( let i = 1; i < 31; ++ i ) {\n\n\t\texponentTable[ i ] = i << 23;\n\n\t}\n\n\texponentTable[ 31 ] = 0x47800000;\n\texponentTable[ 32 ] = 0x80000000;\n\n\tfor ( let i = 33; i < 63; ++ i ) {\n\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\n\n\t}\n\n\texponentTable[ 63 ] = 0xc7800000;\n\n\tfor ( let i = 1; i < 64; ++ i ) {\n\n\t\tif ( i !== 32 ) {\n\n\t\t\toffsetTable[ i ] = 1024;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tfloatView: floatView,\n\t\tuint32View: uint32View,\n\t\tbaseTable: baseTable,\n\t\tshiftTable: shiftTable,\n\t\tmantissaTable: mantissaTable,\n\t\texponentTable: exponentTable,\n\t\toffsetTable: offsetTable\n\t};\n\n}\n\n// float32 to float16\n\nfunction toHalfFloat( val ) {\n\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\n\n\tval = clamp( val, - 65504, 65504 );\n\n\t_tables.floatView[ 0 ] = val;\n\tconst f = _tables.uint32View[ 0 ];\n\tconst e = ( f >> 23 ) & 0x1ff;\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\n\n}\n\n// float16 to float32\n\nfunction fromHalfFloat( val ) {\n\n\tconst m = val >> 10;\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\n\treturn _tables.floatView[ 0 ];\n\n}\n\nconst DataUtils = {\n\ttoHalfFloat: toHalfFloat,\n\tfromHalfFloat: fromHalfFloat,\n};\n\nconst _vector$8 = /*@__PURE__*/ new Vector3();\nconst _vector2$1 = /*@__PURE__*/ new Vector2();\n\nclass BufferAttribute {\n\n\tconstructor( array, itemSize, normalized = false ) {\n\n\t\tif ( Array.isArray( array ) ) {\n\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\n\n\t\t}\n\n\t\tthis.isBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.array = array;\n\t\tthis.itemSize = itemSize;\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\n\t\tthis.normalized = normalized;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\t\tthis.gpuType = FloatType;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.itemSize = source.itemSize;\n\t\tthis.count = source.count;\n\t\tthis.normalized = source.normalized;\n\n\t\tthis.usage = source.usage;\n\t\tthis.gpuType = source.gpuType;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.itemSize;\n\t\tindex2 *= attribute.itemSize;\n\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcopyArray( array ) {\n\n\t\tthis.array.set( array );\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix3( m ) {\n\n\t\tif ( this.itemSize === 2 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector2$1.fromBufferAttribute( this, i );\n\t\t\t\t_vector2$1.applyMatrix3( m );\n\n\t\t\t\tthis.setXY( i, _vector2$1.x, _vector2$1.y );\n\n\t\t\t}\n\n\t\t} else if ( this.itemSize === 3 ) {\n\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t\t_vector$8.fromBufferAttribute( this, i );\n\t\t\t\t_vector$8.applyMatrix3( m );\n\n\t\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( this, i );\n\n\t\t\t_vector$8.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( this, i );\n\n\t\t\t_vector$8.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$8.fromBufferAttribute( this, i );\n\n\t\t\t_vector$8.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tgetComponent( index, component ) {\n\n\t\tlet value = this.array[ index * this.itemSize + component ];\n\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\n\n\t\treturn value;\n\n\t}\n\n\tsetComponent( index, component, value ) {\n\n\t\tif ( this.normalized ) value = normalize( value, this.array );\n\n\t\tthis.array[ index * this.itemSize + component ] = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.array[ index * this.itemSize ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = x;\n\t\tthis.array[ index + 1 ] = y;\n\t\tthis.array[ index + 2 ] = z;\n\t\tthis.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\titemSize: this.itemSize,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tarray: Array.from( this.array ),\n\t\t\tnormalized: this.normalized\n\t\t};\n\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\n\t\tif ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;\n\n\t\treturn data;\n\n\t}\n\n}\n\n//\n\nclass Int8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Int32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Uint32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float16BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\n\n\t\tthis.isFloat16BufferAttribute = true;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\n\n\t\treturn this;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex *= this.itemSize;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\n\n\t\treturn this;\n\n\t}\n\n}\n\n\nclass Float32BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nclass Float64BufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized ) {\n\n\t\tsuper( new Float64Array( array ), itemSize, normalized );\n\n\t}\n\n}\n\nlet _id$2 = 0;\n\nconst _m1 = /*@__PURE__*/ new Matrix4();\nconst _obj = /*@__PURE__*/ new Object3D();\nconst _offset = /*@__PURE__*/ new Vector3();\nconst _box$1 = /*@__PURE__*/ new Box3();\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\nconst _vector$7 = /*@__PURE__*/ new Vector3();\n\nclass BufferGeometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBufferGeometry = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id$2 ++ } );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'BufferGeometry';\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\n\t\tthis.morphAttributes = {};\n\t\tthis.morphTargetsRelative = false;\n\n\t\tthis.groups = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tthis.drawRange = { start: 0, count: Infinity };\n\n\t\tthis.userData = {};\n\n\t}\n\n\tgetIndex() {\n\n\t\treturn this.index;\n\n\t}\n\n\tsetIndex( index ) {\n\n\t\tif ( Array.isArray( index ) ) {\n\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\n\n\t\t} else {\n\n\t\t\tthis.index = index;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetAttribute( name ) {\n\n\t\treturn this.attributes[ name ];\n\n\t}\n\n\tsetAttribute( name, attribute ) {\n\n\t\tthis.attributes[ name ] = attribute;\n\n\t\treturn this;\n\n\t}\n\n\tdeleteAttribute( name ) {\n\n\t\tdelete this.attributes[ name ];\n\n\t\treturn this;\n\n\t}\n\n\thasAttribute( name ) {\n\n\t\treturn this.attributes[ name ] !== undefined;\n\n\t}\n\n\taddGroup( start, count, materialIndex = 0 ) {\n\n\t\tthis.groups.push( {\n\n\t\t\tstart: start,\n\t\t\tcount: count,\n\t\t\tmaterialIndex: materialIndex\n\n\t\t} );\n\n\t}\n\n\tclearGroups() {\n\n\t\tthis.groups = [];\n\n\t}\n\n\tsetDrawRange( start, count ) {\n\n\t\tthis.drawRange.start = start;\n\t\tthis.drawRange.count = count;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst position = this.attributes.position;\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tposition.applyMatrix4( matrix );\n\n\t\t\tposition.needsUpdate = true;\n\n\t\t}\n\n\t\tconst normal = this.attributes.normal;\n\n\t\tif ( normal !== undefined ) {\n\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\n\n\t\t\tnormal.needsUpdate = true;\n\n\t\t}\n\n\t\tconst tangent = this.attributes.tangent;\n\n\t\tif ( tangent !== undefined ) {\n\n\t\t\ttangent.transformDirection( matrix );\n\n\t\t\ttangent.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyQuaternion( q ) {\n\n\t\t_m1.makeRotationFromQuaternion( q );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tconst position = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tposition.push( point.x, point.y, point.z || 0 );\n\n\t\t}\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingBox.set(\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\n\t\t\t);\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position !== undefined ) {\n\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_box$1.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$7.addVectors( this.boundingBox.min, _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$7 );\n\n\t\t\t\t\t\t_vector$7.addVectors( this.boundingBox.max, _box$1.max );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector$7 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.min );\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box$1.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boundingBox.makeEmpty();\n\n\t\t}\n\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tconst position = this.attributes.position;\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\n\n\t\tif ( position && position.isGLBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set \"mesh.frustumCulled\" to \"false\".', this );\n\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( position ) {\n\n\t\t\t// first, find the center of the bounding sphere\n\n\t\t\tconst center = this.boundingSphere.center;\n\n\t\t\t_box$1.setFromBufferAttribute( position );\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\n\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\n\n\t\t\t\t\t\t_vector$7.addVectors( _box$1.min, _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$7 );\n\n\t\t\t\t\t\t_vector$7.addVectors( _box$1.max, _boxMorphTargets.max );\n\t\t\t\t\t\t_box$1.expandByPoint( _vector$7 );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.min );\n\t\t\t\t\t\t_box$1.expandByPoint( _boxMorphTargets.max );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_box$1.getCenter( center );\n\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\n\n\t\t\tlet maxRadiusSq = 0;\n\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\n\n\t\t\t\t_vector$7.fromBufferAttribute( position, i );\n\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );\n\n\t\t\t}\n\n\t\t\t// process morph attributes if present\n\n\t\t\tif ( morphAttributesPosition ) {\n\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\n\n\t\t\t\t\t\t_vector$7.fromBufferAttribute( morphAttribute, j );\n\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\n\t\t\t\t\t\t\t_vector$7.add( _offset );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\n\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconst index = this.index;\n\t\tconst attributes = this.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst indices = index.array;\n\t\tconst positions = attributes.position.array;\n\t\tconst normals = attributes.normal.array;\n\t\tconst uvs = attributes.uv.array;\n\n\t\tconst nVertices = positions.length / 3;\n\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\n\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tconst tangents = this.getAttribute( 'tangent' ).array;\n\n\t\tconst tan1 = [], tan2 = [];\n\n\t\tfor ( let i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tconst vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tlet groups = this.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\n\t\tconst n = new Vector3(), n2 = new Vector3();\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tconst t = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tconst group = groups[ i ];\n\n\t\t\tconst start = group.start;\n\t\t\tconst count = group.count;\n\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals() {\n\n\t\tconst index = this.index;\n\t\tconst positionAttribute = this.getAttribute( 'position' );\n\n\t\tif ( positionAttribute !== undefined ) {\n\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\n\n\t\t\tif ( normalAttribute === undefined ) {\n\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\n\n\t\t\t} else {\n\n\t\t\t\t// reset existing normals to zero\n\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\n\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\t// indexed elements\n\n\t\t\tif ( index ) {\n\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\n\n\t\t\t\t\tconst vA = index.getX( i + 0 );\n\t\t\t\t\tconst vB = index.getX( i + 1 );\n\t\t\t\t\tconst vC = index.getX( i + 2 );\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\n\n\t\t\t\t\tnA.add( cb );\n\t\t\t\t\tnB.add( cb );\n\t\t\t\t\tnC.add( cb );\n\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\n\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\n\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\n\n\t\t\t\t\tcb.subVectors( pC, pB );\n\t\t\t\t\tab.subVectors( pA, pB );\n\t\t\t\t\tcb.cross( ab );\n\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.normalizeNormals();\n\n\t\t\tnormalAttribute.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tnormalizeNormals() {\n\n\t\tconst normals = this.attributes.normal;\n\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\n\n\t\t\t_vector$7.fromBufferAttribute( normals, i );\n\n\t\t\t_vector$7.normalize();\n\n\t\t\tnormals.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );\n\n\t\t}\n\n\t}\n\n\ttoNonIndexed() {\n\n\t\tfunction convertBufferAttribute( attribute, indices ) {\n\n\t\t\tconst array = attribute.array;\n\t\t\tconst itemSize = attribute.itemSize;\n\t\t\tconst normalized = attribute.normalized;\n\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\n\n\t\t\tlet index = 0, index2 = 0;\n\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindex = indices[ i ] * itemSize;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\n\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( this.index === null ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst geometry2 = new BufferGeometry();\n\n\t\tconst indices = this.index.array;\n\t\tconst attributes = this.attributes;\n\n\t\t// attributes\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\tgeometry2.setAttribute( name, newAttribute );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = this.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst morphArray = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = morphAttribute[ i ];\n\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\n\n\t\t\t\tmorphArray.push( newAttribute );\n\n\t\t\t}\n\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\n\n\t\t}\n\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = this.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\treturn geometry2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'BufferGeometry',\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard BufferGeometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\n\n\t\tdata.data = { attributes: {} };\n\n\t\tconst index = this.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tdata.data.index = {\n\t\t\t\ttype: index.array.constructor.name,\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\n\t\t\t};\n\n\t\t}\n\n\t\tconst attributes = this.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\n\n\t\t}\n\n\t\tconst morphAttributes = {};\n\t\tlet hasMorphAttributes = false;\n\n\t\tfor ( const key in this.morphAttributes ) {\n\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\tconst attribute = attributeArray[ i ];\n\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\n\n\t\t\t}\n\n\t\t\tif ( array.length > 0 ) {\n\n\t\t\t\tmorphAttributes[ key ] = array;\n\n\t\t\t\thasMorphAttributes = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( hasMorphAttributes ) {\n\n\t\t\tdata.data.morphAttributes = morphAttributes;\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\n\n\t\t}\n\n\t\tconst groups = this.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\n\n\t\t}\n\n\t\tconst boundingSphere = this.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tdata.data.boundingSphere = {\n\t\t\t\tcenter: boundingSphere.center.toArray(),\n\t\t\t\tradius: boundingSphere.radius\n\t\t\t};\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.index = null;\n\t\tthis.attributes = {};\n\t\tthis.morphAttributes = {};\n\t\tthis.groups = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// used for storing cloned, shared data\n\n\t\tconst data = {};\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// index\n\n\t\tconst index = source.index;\n\n\t\tif ( index !== null ) {\n\n\t\t\tthis.setIndex( index.clone( data ) );\n\n\t\t}\n\n\t\t// attributes\n\n\t\tconst attributes = source.attributes;\n\n\t\tfor ( const name in attributes ) {\n\n\t\t\tconst attribute = attributes[ name ];\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\n\n\t\t}\n\n\t\t// morph attributes\n\n\t\tconst morphAttributes = source.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\n\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\n\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\n\n\t\t\t}\n\n\t\t\tthis.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\n\n\t\t// groups\n\n\t\tconst groups = source.groups;\n\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\tconst group = groups[ i ];\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// draw range\n\n\t\tthis.drawRange.start = source.drawRange.start;\n\t\tthis.drawRange.count = source.drawRange.count;\n\n\t\t// user data\n\n\t\tthis.userData = source.userData;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nconst _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();\nconst _ray$3 = /*@__PURE__*/ new Ray();\nconst _sphere$5 = /*@__PURE__*/ new Sphere();\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\n\nconst _vA$1 = /*@__PURE__*/ new Vector3();\nconst _vB$1 = /*@__PURE__*/ new Vector3();\nconst _vC$1 = /*@__PURE__*/ new Vector3();\n\nconst _tempA = /*@__PURE__*/ new Vector3();\nconst _morphA = /*@__PURE__*/ new Vector3();\n\nconst _uvA$1 = /*@__PURE__*/ new Vector2();\nconst _uvB$1 = /*@__PURE__*/ new Vector2();\nconst _uvC$1 = /*@__PURE__*/ new Vector2();\n\nconst _normalA = /*@__PURE__*/ new Vector3();\nconst _normalB = /*@__PURE__*/ new Vector3();\nconst _normalC = /*@__PURE__*/ new Vector3();\n\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\n\nclass Mesh extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isMesh = true;\n\n\t\tthis.type = 'Mesh';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.morphTargetInfluences !== undefined ) {\n\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\n\n\t\t}\n\n\t\tif ( source.morphTargetDictionary !== undefined ) {\n\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\n\n\t\t}\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.attributes.position;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\n\t\ttarget.fromBufferAttribute( position, index );\n\n\t\tconst morphInfluences = this.morphTargetInfluences;\n\n\t\tif ( morphPosition && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttarget.add( _morphA );\n\n\t\t}\n\n\t\treturn target;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$5.copy( geometry.boundingSphere );\n\t\t_sphere$5.applyMatrix4( matrixWorld );\n\n\t\t// check distance from ray origin to bounding sphere\n\n\t\t_ray$3.copy( raycaster.ray ).recast( raycaster.near );\n\n\t\tif ( _sphere$5.containsPoint( _ray$3.origin ) === false ) {\n\n\t\t\tif ( _ray$3.intersectSphere( _sphere$5, _sphereHitAt ) === null ) return;\n\n\t\t\tif ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\n\n\t\t}\n\n\t\t// convert ray to local space of mesh\n\n\t\t_inverseMatrix$3.copy( matrixWorld ).invert();\n\t\t_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tif ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$3 );\n\n\t}\n\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\n\n\t\tlet intersection;\n\n\t\tconst geometry = this.geometry;\n\t\tconst material = this.material;\n\n\t\tconst index = geometry.index;\n\t\tconst position = geometry.attributes.position;\n\t\tconst uv = geometry.attributes.uv;\n\t\tconst uv1 = geometry.attributes.uv1;\n\t\tconst normal = geometry.attributes.normal;\n\t\tconst groups = geometry.groups;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\tif ( index !== null ) {\n\n\t\t\t// indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = index.getX( j );\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = index.getX( i );\n\t\t\t\t\tconst b = index.getX( i + 1 );\n\t\t\t\t\tconst c = index.getX( i + 2 );\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( position !== undefined ) {\n\n\t\t\t// non-indexed buffer geometry\n\n\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\n\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\t\tconst a = j;\n\t\t\t\t\t\tconst b = j + 1;\n\t\t\t\t\t\tconst c = j + 2;\n\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\n\t\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\t\tconst a = i;\n\t\t\t\t\tconst b = i + 1;\n\t\t\t\t\tconst c = i + 2;\n\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\n\n\t\t\t\t\tif ( intersection ) {\n\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\n\t\t\t\t\t\tintersects.push( intersection );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\n\n\tlet intersect;\n\n\tif ( material.side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\t_intersectionPointWorld.copy( point );\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\n\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\n\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\n\n\treturn {\n\t\tdistance: distance,\n\t\tpoint: _intersectionPointWorld.clone(),\n\t\tobject: object\n\t};\n\n}\n\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\n\n\tobject.getVertexPosition( a, _vA$1 );\n\tobject.getVertexPosition( b, _vB$1 );\n\tobject.getVertexPosition( c, _vC$1 );\n\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\t_uvA$1.fromBufferAttribute( uv1, a );\n\t\t\t_uvB$1.fromBufferAttribute( uv1, b );\n\t\t\t_uvC$1.fromBufferAttribute( uv1, c );\n\n\t\t\tintersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );\n\t\t\tintersection.uv2 = intersection.uv1; // @deprecated, r152\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\t_normalA.fromBufferAttribute( normal, a );\n\t\t\t_normalB.fromBufferAttribute( normal, b );\n\t\t\t_normalC.fromBufferAttribute( normal, c );\n\n\t\t\tintersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3() );\n\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );\n\n\t\tintersection.face = face;\n\n\t}\n\n\treturn intersection;\n\n}\n\nclass BoxGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'BoxGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdepth: depth,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tdepthSegments: depthSegments\n\t\t};\n\n\t\tconst scope = this;\n\n\t\t// segments\n\n\t\twidthSegments = Math.floor( widthSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\t\tdepthSegments = Math.floor( depthSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet numberOfVertices = 0;\n\t\tlet groupStart = 0;\n\n\t\t// build each side of the box geometry\n\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\n\n\t\t\tconst segmentWidth = width / gridX;\n\t\t\tconst segmentHeight = height / gridY;\n\n\t\t\tconst widthHalf = width / 2;\n\t\t\tconst heightHalf = height / 2;\n\t\t\tconst depthHalf = depth / 2;\n\n\t\t\tconst gridX1 = gridX + 1;\n\t\t\tconst gridY1 = gridY + 1;\n\n\t\t\tlet vertexCounter = 0;\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst vector = new Vector3();\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\n\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = x * udir;\n\t\t\t\t\tvector[ v ] = y * vdir;\n\t\t\t\t\tvector[ w ] = depthHalf;\n\n\t\t\t\t\t// now apply vector to vertex buffer\n\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// set values to correct vector component\n\n\t\t\t\t\tvector[ u ] = 0;\n\t\t\t\t\tvector[ v ] = 0;\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\n\n\t\t\t\t\t// now apply vector to normal buffer\n\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\n\n\t\t\t\t\t// uvs\n\n\t\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t\t\t// counters\n\n\t\t\t\t\tvertexCounter += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\t// 1. you need three indices to draw a single face\n\t\t\t// 2. a single segment consists of two faces\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\n\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// increase counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t\t// update total number of vertices\n\n\t\t\tnumberOfVertices += vertexCounter;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\n\n\t}\n\n}\n\n/**\n * Uniform Utilities\n */\n\nfunction cloneUniforms( src ) {\n\n\tconst dst = {};\n\n\tfor ( const u in src ) {\n\n\t\tdst[ u ] = {};\n\n\t\tfor ( const p in src[ u ] ) {\n\n\t\t\tconst property = src[ u ][ p ];\n\n\t\t\tif ( property && ( property.isColor ||\n\t\t\t\tproperty.isMatrix3 || property.isMatrix4 ||\n\t\t\t\tproperty.isVector2 || property.isVector3 || property.isVector4 ||\n\t\t\t\tproperty.isTexture || property.isQuaternion ) ) {\n\n\t\t\t\tif ( property.isRenderTargetTexture ) {\n\n\t\t\t\t\tconsole.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );\n\t\t\t\t\tdst[ u ][ p ] = null;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdst[ u ][ p ] = property.clone();\n\n\t\t\t\t}\n\n\t\t\t} else if ( Array.isArray( property ) ) {\n\n\t\t\t\tdst[ u ][ p ] = property.slice();\n\n\t\t\t} else {\n\n\t\t\t\tdst[ u ][ p ] = property;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction mergeUniforms( uniforms ) {\n\n\tconst merged = {};\n\n\tfor ( let u = 0; u < uniforms.length; u ++ ) {\n\n\t\tconst tmp = cloneUniforms( uniforms[ u ] );\n\n\t\tfor ( const p in tmp ) {\n\n\t\t\tmerged[ p ] = tmp[ p ];\n\n\t\t}\n\n\t}\n\n\treturn merged;\n\n}\n\nfunction cloneUniformsGroups( src ) {\n\n\tconst dst = [];\n\n\tfor ( let u = 0; u < src.length; u ++ ) {\n\n\t\tdst.push( src[ u ].clone() );\n\n\t}\n\n\treturn dst;\n\n}\n\nfunction getUnlitUniformColorSpace( renderer ) {\n\n\tif ( renderer.getRenderTarget() === null ) {\n\n\t\t// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398\n\t\treturn renderer.outputColorSpace;\n\n\t}\n\n\treturn ColorManagement.workingColorSpace;\n\n}\n\n// Legacy\n\nconst UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };\n\nvar default_vertex = \"void main() {\\n\\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";\n\nvar default_fragment = \"void main() {\\n\\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\\n}\";\n\nclass ShaderMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShaderMaterial = true;\n\n\t\tthis.type = 'ShaderMaterial';\n\n\t\tthis.defines = {};\n\t\tthis.uniforms = {};\n\t\tthis.uniformsGroups = [];\n\n\t\tthis.vertexShader = default_vertex;\n\t\tthis.fragmentShader = default_fragment;\n\n\t\tthis.linewidth = 1;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.fog = false; // set to use scene fog\n\t\tthis.lights = false; // set to use scene lights\n\t\tthis.clipping = false; // set to use user-defined clipping planes\n\n\t\tthis.forceSinglePass = true;\n\n\t\tthis.extensions = {\n\t\t\tderivatives: false, // set to use derivatives\n\t\t\tfragDepth: false, // set to use fragment depth values\n\t\t\tdrawBuffers: false, // set to use draw buffers\n\t\t\tshaderTextureLOD: false // set to use shader texture LOD\n\t\t};\n\n\t\t// When rendered geometry doesn't include these attributes but the material does,\n\t\t// use these default values in WebGL. This avoids errors when buffer data is missing.\n\t\tthis.defaultAttributeValues = {\n\t\t\t'color': [ 1, 1, 1 ],\n\t\t\t'uv': [ 0, 0 ],\n\t\t\t'uv1': [ 0, 0 ]\n\t\t};\n\n\t\tthis.index0AttributeName = undefined;\n\t\tthis.uniformsNeedUpdate = false;\n\n\t\tthis.glslVersion = null;\n\n\t\tif ( parameters !== undefined ) {\n\n\t\t\tthis.setValues( parameters );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.fragmentShader = source.fragmentShader;\n\t\tthis.vertexShader = source.vertexShader;\n\n\t\tthis.uniforms = cloneUniforms( source.uniforms );\n\t\tthis.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );\n\n\t\tthis.defines = Object.assign( {}, source.defines );\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.fog = source.fog;\n\t\tthis.lights = source.lights;\n\t\tthis.clipping = source.clipping;\n\n\t\tthis.extensions = Object.assign( {}, source.extensions );\n\n\t\tthis.glslVersion = source.glslVersion;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.glslVersion = this.glslVersion;\n\t\tdata.uniforms = {};\n\n\t\tfor ( const name in this.uniforms ) {\n\n\t\t\tconst uniform = this.uniforms[ name ];\n\t\t\tconst value = uniform.value;\n\n\t\t\tif ( value && value.isTexture ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 't',\n\t\t\t\t\tvalue: value.toJSON( meta ).uuid\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isColor ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'c',\n\t\t\t\t\tvalue: value.getHex()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector2 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v2',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isVector4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'v4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix3 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm3',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else if ( value && value.isMatrix4 ) {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\ttype: 'm4',\n\t\t\t\t\tvalue: value.toArray()\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tdata.uniforms[ name ] = {\n\t\t\t\t\tvalue: value\n\t\t\t\t};\n\n\t\t\t\t// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;\n\n\t\tdata.vertexShader = this.vertexShader;\n\t\tdata.fragmentShader = this.fragmentShader;\n\n\t\tdata.lights = this.lights;\n\t\tdata.clipping = this.clipping;\n\n\t\tconst extensions = {};\n\n\t\tfor ( const key in this.extensions ) {\n\n\t\t\tif ( this.extensions[ key ] === true ) extensions[ key ] = true;\n\n\t\t}\n\n\t\tif ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass Camera extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isCamera = true;\n\n\t\tthis.type = 'Camera';\n\n\t\tthis.matrixWorldInverse = new Matrix4();\n\n\t\tthis.projectionMatrix = new Matrix4();\n\t\tthis.projectionMatrixInverse = new Matrix4();\n\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\n\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\n\n\t\tthis.coordinateSystem = source.coordinateSystem;\n\n\t\treturn this;\n\n\t}\n\n\tgetWorldDirection( target ) {\n\n\t\treturn super.getWorldDirection( target ).negate();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tupdateWorldMatrix( updateParents, updateChildren ) {\n\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\n\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass PerspectiveCamera extends Camera {\n\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isPerspectiveCamera = true;\n\n\t\tthis.type = 'PerspectiveCamera';\n\n\t\tthis.fov = fov;\n\t\tthis.zoom = 1;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.focus = 10;\n\n\t\tthis.aspect = aspect;\n\t\tthis.view = null;\n\n\t\tthis.filmGauge = 35;\t// width of the film (default in millimeters)\n\t\tthis.filmOffset = 0;\t// horizontal film offset (same unit as gauge)\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.fov = source.fov;\n\t\tthis.zoom = source.zoom;\n\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\t\tthis.focus = source.focus;\n\n\t\tthis.aspect = source.aspect;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\tthis.filmGauge = source.filmGauge;\n\t\tthis.filmOffset = source.filmOffset;\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets the FOV by focal length in respect to the current .filmGauge.\n\t *\n\t * The default film gauge is 35, so that the focal length can be specified for\n\t * a 35mm (full frame) camera.\n\t *\n\t * Values for focal length and film gauge must have the same unit.\n\t */\n\tsetFocalLength( focalLength ) {\n\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\n\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\t/**\n\t * Calculates the focal length from the current .fov and .filmGauge.\n\t */\n\tgetFocalLength() {\n\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\n\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\n\n\t}\n\n\tgetEffectiveFOV() {\n\n\t\treturn RAD2DEG * 2 * Math.atan(\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\n\n\t}\n\n\tgetFilmWidth() {\n\n\t\t// film not completely covered in portrait format (aspect < 1)\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\n\n\t}\n\n\tgetFilmHeight() {\n\n\t\t// film not completely covered in landscape format (aspect > 1)\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\n\n\t}\n\n\t/**\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\n\t * multi-monitor/multi-machine setups.\n\t *\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\n\t * the monitors are in grid like this\n\t *\n\t *   +---+---+---+\n\t *   | A | B | C |\n\t *   +---+---+---+\n\t *   | D | E | F |\n\t *   +---+---+---+\n\t *\n\t * then for each monitor you would call it like this\n\t *\n\t *   const w = 1920;\n\t *   const h = 1080;\n\t *   const fullWidth = w * 3;\n\t *   const fullHeight = h * 2;\n\t *\n\t *   --A--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\n\t *   --B--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\n\t *   --C--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\n\t *   --D--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\n\t *   --E--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\n\t *   --F--\n\t *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\n\t *\n\t *   Note there is no reason monitors have to be the same size or in a grid.\n\t */\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tthis.aspect = fullWidth / fullHeight;\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst near = this.near;\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\n\t\tlet height = 2 * top;\n\t\tlet width = this.aspect * height;\n\t\tlet left = - 0.5 * width;\n\t\tconst view = this.view;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst fullWidth = view.fullWidth,\n\t\t\t\tfullHeight = view.fullHeight;\n\n\t\t\tleft += view.offsetX * width / fullWidth;\n\t\t\ttop -= view.offsetY * height / fullHeight;\n\t\t\twidth *= view.width / fullWidth;\n\t\t\theight *= view.height / fullHeight;\n\n\t\t}\n\n\t\tconst skew = this.filmOffset;\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\n\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.fov = this.fov;\n\t\tdata.object.zoom = this.zoom;\n\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\t\tdata.object.focus = this.focus;\n\n\t\tdata.object.aspect = this.aspect;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\tdata.object.filmGauge = this.filmGauge;\n\t\tdata.object.filmOffset = this.filmOffset;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst fov = - 90; // negative fov is not an error\nconst aspect = 1;\n\nclass CubeCamera extends Object3D {\n\n\tconstructor( near, far, renderTarget ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CubeCamera';\n\n\t\tthis.renderTarget = renderTarget;\n\t\tthis.coordinateSystem = null;\n\t\tthis.activeMipmapLevel = 0;\n\n\t\tconst cameraPX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPX.layers = this.layers;\n\t\tthis.add( cameraPX );\n\n\t\tconst cameraNX = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNX.layers = this.layers;\n\t\tthis.add( cameraNX );\n\n\t\tconst cameraPY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPY.layers = this.layers;\n\t\tthis.add( cameraPY );\n\n\t\tconst cameraNY = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNY.layers = this.layers;\n\t\tthis.add( cameraNY );\n\n\t\tconst cameraPZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraPZ.layers = this.layers;\n\t\tthis.add( cameraPZ );\n\n\t\tconst cameraNZ = new PerspectiveCamera( fov, aspect, near, far );\n\t\tcameraNZ.layers = this.layers;\n\t\tthis.add( cameraNZ );\n\n\t}\n\n\tupdateCoordinateSystem() {\n\n\t\tconst coordinateSystem = this.coordinateSystem;\n\n\t\tconst cameras = this.children.concat();\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;\n\n\t\tfor ( const camera of cameras ) this.remove( camera );\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, 1, 0 );\n\t\t\tcameraPX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, 1, 0 );\n\t\t\tcameraNX.lookAt( - 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, - 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, 1 );\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tcameraPX.up.set( 0, - 1, 0 );\n\t\t\tcameraPX.lookAt( - 1, 0, 0 );\n\n\t\t\tcameraNX.up.set( 0, - 1, 0 );\n\t\t\tcameraNX.lookAt( 1, 0, 0 );\n\n\t\t\tcameraPY.up.set( 0, 0, 1 );\n\t\t\tcameraPY.lookAt( 0, 1, 0 );\n\n\t\t\tcameraNY.up.set( 0, 0, - 1 );\n\t\t\tcameraNY.lookAt( 0, - 1, 0 );\n\n\t\t\tcameraPZ.up.set( 0, - 1, 0 );\n\t\t\tcameraPZ.lookAt( 0, 0, 1 );\n\n\t\t\tcameraNZ.up.set( 0, - 1, 0 );\n\t\t\tcameraNZ.lookAt( 0, 0, - 1 );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\tfor ( const camera of cameras ) {\n\n\t\t\tthis.add( camera );\n\n\t\t\tcamera.updateMatrixWorld();\n\n\t\t}\n\n\t}\n\n\tupdate( renderer, scene ) {\n\n\t\tif ( this.parent === null ) this.updateMatrixWorld();\n\n\t\tconst { renderTarget, activeMipmapLevel } = this;\n\n\t\tif ( this.coordinateSystem !== renderer.coordinateSystem ) {\n\n\t\t\tthis.coordinateSystem = renderer.coordinateSystem;\n\n\t\t\tthis.updateCoordinateSystem();\n\n\t\t}\n\n\t\tconst [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\t\tconst currentActiveCubeFace = renderer.getActiveCubeFace();\n\t\tconst currentActiveMipmapLevel = renderer.getActiveMipmapLevel();\n\n\t\tconst currentXrEnabled = renderer.xr.enabled;\n\n\t\trenderer.xr.enabled = false;\n\n\t\tconst generateMipmaps = renderTarget.texture.generateMipmaps;\n\n\t\trenderTarget.texture.generateMipmaps = false;\n\n\t\trenderer.setRenderTarget( renderTarget, 0, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPX );\n\n\t\trenderer.setRenderTarget( renderTarget, 1, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNX );\n\n\t\trenderer.setRenderTarget( renderTarget, 2, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPY );\n\n\t\trenderer.setRenderTarget( renderTarget, 3, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNY );\n\n\t\trenderer.setRenderTarget( renderTarget, 4, activeMipmapLevel );\n\t\trenderer.render( scene, cameraPZ );\n\n\t\t// mipmaps are generated during the last call of render()\n\t\t// at this point, all sides of the cube render target are defined\n\n\t\trenderTarget.texture.generateMipmaps = generateMipmaps;\n\n\t\trenderer.setRenderTarget( renderTarget, 5, activeMipmapLevel );\n\t\trenderer.render( scene, cameraNZ );\n\n\t\trenderer.setRenderTarget( currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel );\n\n\t\trenderer.xr.enabled = currentXrEnabled;\n\n\t\trenderTarget.texture.needsPMREMUpdate = true;\n\n\t}\n\n}\n\nclass CubeTexture extends Texture {\n\n\tconstructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\n\n\t\timages = images !== undefined ? images : [];\n\t\tmapping = mapping !== undefined ? mapping : CubeReflectionMapping;\n\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.flipY = false;\n\n\t}\n\n\tget images() {\n\n\t\treturn this.image;\n\n\t}\n\n\tset images( value ) {\n\n\t\tthis.image = value;\n\n\t}\n\n}\n\nclass WebGLCubeRenderTarget extends WebGLRenderTarget {\n\n\tconstructor( size = 1, options = {} ) {\n\n\t\tsuper( size, size, options );\n\n\t\tthis.isWebGLCubeRenderTarget = true;\n\n\t\tconst image = { width: size, height: size, depth: 1 };\n\t\tconst images = [ image, image, image, image, image, image ];\n\n\t\tif ( options.encoding !== undefined ) {\n\n\t\t\t// @deprecated, r152\n\t\t\twarnOnce( 'THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.' );\n\t\t\toptions.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;\n\n\t\t}\n\n\t\tthis.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );\n\n\t\t// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)\n\t\t// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,\n\t\t// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.\n\n\t\t// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped\n\t\t// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture\n\t\t// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).\n\n\t\tthis.texture.isRenderTargetTexture = true;\n\n\t\tthis.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;\n\t\tthis.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;\n\n\t}\n\n\tfromEquirectangularTexture( renderer, texture ) {\n\n\t\tthis.texture.type = texture.type;\n\t\tthis.texture.colorSpace = texture.colorSpace;\n\n\t\tthis.texture.generateMipmaps = texture.generateMipmaps;\n\t\tthis.texture.minFilter = texture.minFilter;\n\t\tthis.texture.magFilter = texture.magFilter;\n\n\t\tconst shader = {\n\n\t\t\tuniforms: {\n\t\t\t\ttEquirect: { value: null },\n\t\t\t},\n\n\t\t\tvertexShader: /* glsl */`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,\n\n\t\t\tfragmentShader: /* glsl */`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`\n\t\t};\n\n\t\tconst geometry = new BoxGeometry( 5, 5, 5 );\n\n\t\tconst material = new ShaderMaterial( {\n\n\t\t\tname: 'CubemapFromEquirect',\n\n\t\t\tuniforms: cloneUniforms( shader.uniforms ),\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tside: BackSide,\n\t\t\tblending: NoBlending\n\n\t\t} );\n\n\t\tmaterial.uniforms.tEquirect.value = texture;\n\n\t\tconst mesh = new Mesh( geometry, material );\n\n\t\tconst currentMinFilter = texture.minFilter;\n\n\t\t// Avoid blurred poles\n\t\tif ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;\n\n\t\tconst camera = new CubeCamera( 1, 10, this );\n\t\tcamera.update( renderer, mesh );\n\n\t\ttexture.minFilter = currentMinFilter;\n\n\t\tmesh.geometry.dispose();\n\t\tmesh.material.dispose();\n\n\t\treturn this;\n\n\t}\n\n\tclear( renderer, color, depth, stencil ) {\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\trenderer.setRenderTarget( this, i );\n\n\t\t\trenderer.clear( color, depth, stencil );\n\n\t\t}\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n}\n\nconst _vector1 = /*@__PURE__*/ new Vector3();\nconst _vector2 = /*@__PURE__*/ new Vector3();\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\n\nclass Plane {\n\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\n\n\t\tthis.isPlane = true;\n\n\t\t// normal is assumed to be normalized\n\n\t\tthis.normal = normal;\n\t\tthis.constant = constant;\n\n\t}\n\n\tset( normal, constant ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = constant;\n\n\t\treturn this;\n\n\t}\n\n\tsetComponents( x, y, z, w ) {\n\n\t\tthis.normal.set( x, y, z );\n\t\tthis.constant = w;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\n\n\t\tthis.normal.copy( normal );\n\t\tthis.constant = - point.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCoplanarPoints( a, b, c ) {\n\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\n\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\n\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( plane ) {\n\n\t\tthis.normal.copy( plane.normal );\n\t\tthis.constant = plane.constant;\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\n\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\n\t\tthis.constant *= inverseNormalLength;\n\n\t\treturn this;\n\n\t}\n\n\tnegate() {\n\n\t\tthis.constant *= - 1;\n\t\tthis.normal.negate();\n\n\t\treturn this;\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.normal.dot( point ) + this.constant;\n\n\t}\n\n\tdistanceToSphere( sphere ) {\n\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\n\n\t}\n\n\tprojectPoint( point, target ) {\n\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\n\n\t}\n\n\tintersectLine( line, target ) {\n\n\t\tconst direction = line.delta( _vector1 );\n\n\t\tconst denominator = this.normal.dot( direction );\n\n\t\tif ( denominator === 0 ) {\n\n\t\t\t// line is coplanar, return origin\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\n\n\t\t\t\treturn target.copy( line.start );\n\n\t\t\t}\n\n\t\t\t// Unsure if this is the correct method to handle this case.\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\n\n\t\tif ( t < 0 || t > 1 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\n\n\t}\n\n\tintersectsLine( line ) {\n\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\n\n\t\tconst startSign = this.distanceToPoint( line.start );\n\t\tconst endSign = this.distanceToPoint( line.end );\n\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\treturn box.intersectsPlane( this );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphere.intersectsPlane( this );\n\n\t}\n\n\tcoplanarPoint( target ) {\n\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\n\n\t}\n\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\n\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\n\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\n\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\tthis.constant = - referencePoint.dot( normal );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.constant -= offset.dot( this.normal );\n\n\t\treturn this;\n\n\t}\n\n\tequals( plane ) {\n\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _sphere$4 = /*@__PURE__*/ new Sphere();\nconst _vector$6 = /*@__PURE__*/ new Vector3();\n\nclass Frustum {\n\n\tconstructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {\n\n\t\tthis.planes = [ p0, p1, p2, p3, p4, p5 ];\n\n\t}\n\n\tset( p0, p1, p2, p3, p4, p5 ) {\n\n\t\tconst planes = this.planes;\n\n\t\tplanes[ 0 ].copy( p0 );\n\t\tplanes[ 1 ].copy( p1 );\n\t\tplanes[ 2 ].copy( p2 );\n\t\tplanes[ 3 ].copy( p3 );\n\t\tplanes[ 4 ].copy( p4 );\n\t\tplanes[ 5 ].copy( p5 );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( frustum ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tplanes[ i ].copy( frustum.planes[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {\n\n\t\tconst planes = this.planes;\n\t\tconst me = m.elements;\n\t\tconst me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];\n\t\tconst me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];\n\t\tconst me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];\n\t\tconst me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];\n\n\t\tplanes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();\n\t\tplanes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();\n\t\tplanes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();\n\t\tplanes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();\n\t\tplanes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();\n\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();\n\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\n\n\t\t\tplanes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tintersectsObject( object ) {\n\n\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\n\t\t\t_sphere$4.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t} else {\n\n\t\t\tconst geometry = object.geometry;\n\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t\t_sphere$4.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\n\n\t\t}\n\n\t\treturn this.intersectsSphere( _sphere$4 );\n\n\t}\n\n\tintersectsSprite( sprite ) {\n\n\t\t_sphere$4.center.set( 0, 0, 0 );\n\t\t_sphere$4.radius = 0.7071067811865476;\n\t\t_sphere$4.applyMatrix4( sprite.matrixWorld );\n\n\t\treturn this.intersectsSphere( _sphere$4 );\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\tconst planes = this.planes;\n\t\tconst center = sphere.center;\n\t\tconst negRadius = - sphere.radius;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst distance = planes[ i ].distanceToPoint( center );\n\n\t\t\tif ( distance < negRadius ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst plane = planes[ i ];\n\n\t\t\t// corner at max distance\n\n\t\t\t_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;\n\t\t\t_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;\n\t\t\t_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;\n\n\t\t\tif ( plane.distanceToPoint( _vector$6 ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\tconst planes = this.planes;\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tif ( planes[ i ].distanceToPoint( point ) < 0 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nfunction WebGLAnimation() {\n\n\tlet context = null;\n\tlet isAnimating = false;\n\tlet animationLoop = null;\n\tlet requestId = null;\n\n\tfunction onAnimationFrame( time, frame ) {\n\n\t\tanimationLoop( time, frame );\n\n\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t}\n\n\treturn {\n\n\t\tstart: function () {\n\n\t\t\tif ( isAnimating === true ) return;\n\t\t\tif ( animationLoop === null ) return;\n\n\t\t\trequestId = context.requestAnimationFrame( onAnimationFrame );\n\n\t\t\tisAnimating = true;\n\n\t\t},\n\n\t\tstop: function () {\n\n\t\t\tcontext.cancelAnimationFrame( requestId );\n\n\t\t\tisAnimating = false;\n\n\t\t},\n\n\t\tsetAnimationLoop: function ( callback ) {\n\n\t\t\tanimationLoop = callback;\n\n\t\t},\n\n\t\tsetContext: function ( value ) {\n\n\t\t\tcontext = value;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLAttributes( gl, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tconst buffers = new WeakMap();\n\n\tfunction createBuffer( attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst usage = attribute.usage;\n\n\t\tconst buffer = gl.createBuffer();\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\t\tgl.bufferData( bufferType, array, usage );\n\n\t\tattribute.onUploadCallback();\n\n\t\tlet type;\n\n\t\tif ( array instanceof Float32Array ) {\n\n\t\t\ttype = gl.FLOAT;\n\n\t\t} else if ( array instanceof Uint16Array ) {\n\n\t\t\tif ( attribute.isFloat16BufferAttribute ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\ttype = gl.HALF_FLOAT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttype = gl.UNSIGNED_SHORT;\n\n\t\t\t}\n\n\t\t} else if ( array instanceof Int16Array ) {\n\n\t\t\ttype = gl.SHORT;\n\n\t\t} else if ( array instanceof Uint32Array ) {\n\n\t\t\ttype = gl.UNSIGNED_INT;\n\n\t\t} else if ( array instanceof Int32Array ) {\n\n\t\t\ttype = gl.INT;\n\n\t\t} else if ( array instanceof Int8Array ) {\n\n\t\t\ttype = gl.BYTE;\n\n\t\t} else if ( array instanceof Uint8Array ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else if ( array instanceof Uint8ClampedArray ) {\n\n\t\t\ttype = gl.UNSIGNED_BYTE;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );\n\n\t\t}\n\n\t\treturn {\n\t\t\tbuffer: buffer,\n\t\t\ttype: type,\n\t\t\tbytesPerElement: array.BYTES_PER_ELEMENT,\n\t\t\tversion: attribute.version\n\t\t};\n\n\t}\n\n\tfunction updateBuffer( buffer, attribute, bufferType ) {\n\n\t\tconst array = attribute.array;\n\t\tconst updateRange = attribute.updateRange;\n\n\t\tgl.bindBuffer( bufferType, buffer );\n\n\t\tif ( updateRange.count === - 1 ) {\n\n\t\t\t// Not using update ranges\n\n\t\t\tgl.bufferSubData( bufferType, 0, array );\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray, updateRange.offset, updateRange.count );\n\n\t\t\t} else {\n\n\t\t\t\tgl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,\n\t\t\t\t\tarray.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );\n\n\t\t\t}\n\n\t\t\tupdateRange.count = - 1; // reset range\n\n\t\t}\n\n\t\tattribute.onUploadCallback();\n\n\t}\n\n\t//\n\n\tfunction get( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\treturn buffers.get( attribute );\n\n\t}\n\n\tfunction remove( attribute ) {\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data ) {\n\n\t\t\tgl.deleteBuffer( data.buffer );\n\n\t\t\tbuffers.delete( attribute );\n\n\t\t}\n\n\t}\n\n\tfunction update( attribute, bufferType ) {\n\n\t\tif ( attribute.isGLBufferAttribute ) {\n\n\t\t\tconst cached = buffers.get( attribute );\n\n\t\t\tif ( ! cached || cached.version < attribute.version ) {\n\n\t\t\t\tbuffers.set( attribute, {\n\t\t\t\t\tbuffer: attribute.buffer,\n\t\t\t\t\ttype: attribute.type,\n\t\t\t\t\tbytesPerElement: attribute.elementSize,\n\t\t\t\t\tversion: attribute.version\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;\n\n\t\tconst data = buffers.get( attribute );\n\n\t\tif ( data === undefined ) {\n\n\t\t\tbuffers.set( attribute, createBuffer( attribute, bufferType ) );\n\n\t\t} else if ( data.version < attribute.version ) {\n\n\t\t\tupdateBuffer( data.buffer, attribute, bufferType );\n\n\t\t\tdata.version = attribute.version;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update\n\n\t};\n\n}\n\nclass PlaneGeometry extends BufferGeometry {\n\n\tconstructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PlaneGeometry';\n\n\t\tthis.parameters = {\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments\n\t\t};\n\n\t\tconst width_half = width / 2;\n\t\tconst height_half = height / 2;\n\n\t\tconst gridX = Math.floor( widthSegments );\n\t\tconst gridY = Math.floor( heightSegments );\n\n\t\tconst gridX1 = gridX + 1;\n\t\tconst gridY1 = gridY + 1;\n\n\t\tconst segment_width = width / gridX;\n\t\tconst segment_height = height / gridY;\n\n\t\t//\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\n\n\t\t\tconst y = iy * segment_height - height_half;\n\n\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\n\n\t\t\t\tconst x = ix * segment_width - width_half;\n\n\t\t\t\tvertices.push( x, - y, 0 );\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\tuvs.push( ix / gridX );\n\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\n\n\t\t\t\tconst a = ix + gridX1 * iy;\n\t\t\t\tconst b = ix + gridX1 * ( iy + 1 );\n\t\t\t\tconst c = ( ix + 1 ) + gridX1 * ( iy + 1 );\n\t\t\t\tconst d = ( ix + 1 ) + gridX1 * iy;\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );\n\n\t}\n\n}\n\nvar alphahash_fragment = \"#ifdef USE_ALPHAHASH\\n\\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\\n#endif\";\n\nvar alphahash_pars_fragment = \"#ifdef USE_ALPHAHASH\\n\\tconst float ALPHA_HASH_SCALE = 0.05;\\n\\tfloat hash2D( vec2 value ) {\\n\\t\\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\\n\\t}\\n\\tfloat hash3D( vec3 value ) {\\n\\t\\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\\n\\t}\\n\\tfloat getAlphaHashThreshold( vec3 position ) {\\n\\t\\tfloat maxDeriv = max(\\n\\t\\t\\tlength( dFdx( position.xyz ) ),\\n\\t\\t\\tlength( dFdy( position.xyz ) )\\n\\t\\t);\\n\\t\\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\\n\\t\\tvec2 pixScales = vec2(\\n\\t\\t\\texp2( floor( log2( pixScale ) ) ),\\n\\t\\t\\texp2( ceil( log2( pixScale ) ) )\\n\\t\\t);\\n\\t\\tvec2 alpha = vec2(\\n\\t\\t\\thash3D( floor( pixScales.x * position.xyz ) ),\\n\\t\\t\\thash3D( floor( pixScales.y * position.xyz ) )\\n\\t\\t);\\n\\t\\tfloat lerpFactor = fract( log2( pixScale ) );\\n\\t\\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\\n\\t\\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\\n\\t\\tvec3 cases = vec3(\\n\\t\\t\\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\\n\\t\\t\\t( x - 0.5 * a ) / ( 1.0 - a ),\\n\\t\\t\\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\\n\\t\\t);\\n\\t\\tfloat threshold = ( x < ( 1.0 - a ) )\\n\\t\\t\\t? ( ( x < a ) ? cases.x : cases.y )\\n\\t\\t\\t: cases.z;\\n\\t\\treturn clamp( threshold , 1.0e-6, 1.0 );\\n\\t}\\n#endif\";\n\nvar alphamap_fragment = \"#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\\n#endif\";\n\nvar alphamap_pars_fragment = \"#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar alphatest_fragment = \"#ifdef USE_ALPHATEST\\n\\tif ( diffuseColor.a < alphaTest ) discard;\\n#endif\";\n\nvar alphatest_pars_fragment = \"#ifdef USE_ALPHATEST\\n\\tuniform float alphaTest;\\n#endif\";\n\nvar aomap_fragment = \"#ifdef USE_AOMAP\\n\\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\\n\\treflectedLight.indirectDiffuse *= ambientOcclusion;\\n\\t#if defined( USE_CLEARCOAT ) \\n\\t\\tclearcoatSpecularIndirect *= ambientOcclusion;\\n\\t#endif\\n\\t#if defined( USE_SHEEN ) \\n\\t\\tsheenSpecularIndirect *= ambientOcclusion;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD )\\n\\t\\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\\n\\t\\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\\n\\t#endif\\n#endif\";\n\nvar aomap_pars_fragment = \"#ifdef USE_AOMAP\\n\\tuniform sampler2D aoMap;\\n\\tuniform float aoMapIntensity;\\n#endif\";\n\nvar begin_vertex = \"vec3 transformed = vec3( position );\\n#ifdef USE_ALPHAHASH\\n\\tvPosition = vec3( position );\\n#endif\";\n\nvar beginnormal_vertex = \"vec3 objectNormal = vec3( normal );\\n#ifdef USE_TANGENT\\n\\tvec3 objectTangent = vec3( tangent.xyz );\\n#endif\";\n\nvar bsdfs = \"float G_BlinnPhong_Implicit( ) {\\n\\treturn 0.25;\\n}\\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\\n\\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\\n}\\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\\n\\tfloat G = G_BlinnPhong_Implicit( );\\n\\tfloat D = D_BlinnPhong( shininess, dotNH );\\n\\treturn F * ( G * D );\\n} // validated\";\n\nvar iridescence_fragment = \"#ifdef USE_IRIDESCENCE\\n\\tconst mat3 XYZ_TO_REC709 = mat3(\\n\\t\\t 3.2404542, -0.9692660,  0.0556434,\\n\\t\\t-1.5371385,  1.8760108, -0.2040259,\\n\\t\\t-0.4985314,  0.0415560,  1.0572252\\n\\t);\\n\\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\\n\\t\\tvec3 sqrtF0 = sqrt( fresnel0 );\\n\\t\\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\\n\\t}\\n\\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\\n\\t}\\n\\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\\n\\t\\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\\n\\t}\\n\\tvec3 evalSensitivity( float OPD, vec3 shift ) {\\n\\t\\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\\n\\t\\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\\n\\t\\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\\n\\t\\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\\n\\t\\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\\n\\t\\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\\n\\t\\txyz /= 1.0685e-7;\\n\\t\\tvec3 rgb = XYZ_TO_REC709 * xyz;\\n\\t\\treturn rgb;\\n\\t}\\n\\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\\n\\t\\tvec3 I;\\n\\t\\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\\n\\t\\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\\n\\t\\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\\n\\t\\tif ( cosTheta2Sq < 0.0 ) {\\n\\t\\t\\treturn vec3( 1.0 );\\n\\t\\t}\\n\\t\\tfloat cosTheta2 = sqrt( cosTheta2Sq );\\n\\t\\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\\n\\t\\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\\n\\t\\tfloat T121 = 1.0 - R12;\\n\\t\\tfloat phi12 = 0.0;\\n\\t\\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\\n\\t\\tfloat phi21 = PI - phi12;\\n\\t\\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\\t\\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\\n\\t\\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\\n\\t\\tvec3 phi23 = vec3( 0.0 );\\n\\t\\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\\n\\t\\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\\n\\t\\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\\n\\t\\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\\n\\t\\tvec3 phi = vec3( phi21 ) + phi23;\\n\\t\\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\\n\\t\\tvec3 r123 = sqrt( R123 );\\n\\t\\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\\n\\t\\tvec3 C0 = R12 + Rs;\\n\\t\\tI = C0;\\n\\t\\tvec3 Cm = Rs - T121;\\n\\t\\tfor ( int m = 1; m <= 2; ++ m ) {\\n\\t\\t\\tCm *= r123;\\n\\t\\t\\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\\n\\t\\t\\tI += Cm * Sm;\\n\\t\\t}\\n\\t\\treturn max( I, vec3( 0.0 ) );\\n\\t}\\n#endif\";\n\nvar bumpmap_pars_fragment = \"#ifdef USE_BUMPMAP\\n\\tuniform sampler2D bumpMap;\\n\\tuniform float bumpScale;\\n\\tvec2 dHdxy_fwd() {\\n\\t\\tvec2 dSTdx = dFdx( vBumpMapUv );\\n\\t\\tvec2 dSTdy = dFdy( vBumpMapUv );\\n\\t\\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\\n\\t\\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\\n\\t\\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\\n\\t\\treturn vec2( dBx, dBy );\\n\\t}\\n\\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\\n\\t\\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\\n\\t\\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\\n\\t\\tvec3 vN = surf_norm;\\n\\t\\tvec3 R1 = cross( vSigmaY, vN );\\n\\t\\tvec3 R2 = cross( vN, vSigmaX );\\n\\t\\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\\n\\t\\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\\n\\t\\treturn normalize( abs( fDet ) * surf_norm - vGrad );\\n\\t}\\n#endif\";\n\nvar clipping_planes_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvec4 plane;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\\n\\t\\tplane = clippingPlanes[ i ];\\n\\t\\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\\n\\t\\tbool clipped = true;\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\\n\\t\\t\\tplane = clippingPlanes[ i ];\\n\\t\\t\\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t\\tif ( clipped ) discard;\\n\\t#endif\\n#endif\";\n\nvar clipping_planes_pars_fragment = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n\\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\\n#endif\";\n\nvar clipping_planes_pars_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvarying vec3 vClipPosition;\\n#endif\";\n\nvar clipping_planes_vertex = \"#if NUM_CLIPPING_PLANES > 0\\n\\tvClipPosition = - mvPosition.xyz;\\n#endif\";\n\nvar color_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tdiffuseColor *= vColor;\\n#elif defined( USE_COLOR )\\n\\tdiffuseColor.rgb *= vColor;\\n#endif\";\n\nvar color_pars_fragment = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_pars_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvarying vec4 vColor;\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvarying vec3 vColor;\\n#endif\";\n\nvar color_vertex = \"#if defined( USE_COLOR_ALPHA )\\n\\tvColor = vec4( 1.0 );\\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\\n\\tvColor = vec3( 1.0 );\\n#endif\\n#ifdef USE_COLOR\\n\\tvColor *= color;\\n#endif\\n#ifdef USE_INSTANCING_COLOR\\n\\tvColor.xyz *= instanceColor.xyz;\\n#endif\";\n\nvar common = \"#define PI 3.141592653589793\\n#define PI2 6.283185307179586\\n#define PI_HALF 1.5707963267948966\\n#define RECIPROCAL_PI 0.3183098861837907\\n#define RECIPROCAL_PI2 0.15915494309189535\\n#define EPSILON 1e-6\\n#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\\nfloat pow2( const in float x ) { return x*x; }\\nvec3 pow2( const in vec3 x ) { return x*x; }\\nfloat pow3( const in float x ) { return x*x*x; }\\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\\nhighp float rand( const in vec2 uv ) {\\n\\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\\n\\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\\n\\treturn fract( sin( sn ) * c );\\n}\\n#ifdef HIGH_PRECISION\\n\\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\\n#else\\n\\tfloat precisionSafeLength( vec3 v ) {\\n\\t\\tfloat maxComponent = max3( abs( v ) );\\n\\t\\treturn length( v / maxComponent ) * maxComponent;\\n\\t}\\n#endif\\nstruct IncidentLight {\\n\\tvec3 color;\\n\\tvec3 direction;\\n\\tbool visible;\\n};\\nstruct ReflectedLight {\\n\\tvec3 directDiffuse;\\n\\tvec3 directSpecular;\\n\\tvec3 indirectDiffuse;\\n\\tvec3 indirectSpecular;\\n};\\n#ifdef USE_ALPHAHASH\\n\\tvarying vec3 vPosition;\\n#endif\\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\\n}\\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\\n\\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\\n}\\nmat3 transposeMat3( const in mat3 m ) {\\n\\tmat3 tmp;\\n\\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\\n\\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\\n\\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\\n\\treturn tmp;\\n}\\nfloat luminance( const in vec3 rgb ) {\\n\\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\\n\\treturn dot( weights, rgb );\\n}\\nbool isPerspectiveMatrix( mat4 m ) {\\n\\treturn m[ 2 ][ 3 ] == - 1.0;\\n}\\nvec2 equirectUv( in vec3 dir ) {\\n\\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\\n\\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\\n\\treturn vec2( u, v );\\n}\\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\\n\\treturn RECIPROCAL_PI * diffuseColor;\\n}\\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n}\\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\\n\\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\\n\\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\\n} // validated\";\n\nvar cube_uv_reflection_fragment = \"#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t#define cubeUV_minMipLevel 4.0\\n\\t#define cubeUV_minTileSize 16.0\\n\\tfloat getFace( vec3 direction ) {\\n\\t\\tvec3 absDirection = abs( direction );\\n\\t\\tfloat face = - 1.0;\\n\\t\\tif ( absDirection.x > absDirection.z ) {\\n\\t\\t\\tif ( absDirection.x > absDirection.y )\\n\\t\\t\\t\\tface = direction.x > 0.0 ? 0.0 : 3.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t} else {\\n\\t\\t\\tif ( absDirection.z > absDirection.y )\\n\\t\\t\\t\\tface = direction.z > 0.0 ? 2.0 : 5.0;\\n\\t\\t\\telse\\n\\t\\t\\t\\tface = direction.y > 0.0 ? 1.0 : 4.0;\\n\\t\\t}\\n\\t\\treturn face;\\n\\t}\\n\\tvec2 getUV( vec3 direction, float face ) {\\n\\t\\tvec2 uv;\\n\\t\\tif ( face == 0.0 ) {\\n\\t\\t\\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 1.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\\n\\t\\t} else if ( face == 2.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\\n\\t\\t} else if ( face == 3.0 ) {\\n\\t\\t\\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\\n\\t\\t} else if ( face == 4.0 ) {\\n\\t\\t\\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\\n\\t\\t} else {\\n\\t\\t\\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\\n\\t\\t}\\n\\t\\treturn 0.5 * ( uv + 1.0 );\\n\\t}\\n\\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\\n\\t\\tfloat face = getFace( direction );\\n\\t\\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\\n\\t\\tmipInt = max( mipInt, cubeUV_minMipLevel );\\n\\t\\tfloat faceSize = exp2( mipInt );\\n\\t\\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\\n\\t\\tif ( face > 2.0 ) {\\n\\t\\t\\tuv.y += faceSize;\\n\\t\\t\\tface -= 3.0;\\n\\t\\t}\\n\\t\\tuv.x += face * faceSize;\\n\\t\\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\\n\\t\\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\\n\\t\\tuv.x *= CUBEUV_TEXEL_WIDTH;\\n\\t\\tuv.y *= CUBEUV_TEXEL_HEIGHT;\\n\\t\\t#ifdef texture2DGradEXT\\n\\t\\t\\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\\n\\t\\t#else\\n\\t\\t\\treturn texture2D( envMap, uv ).rgb;\\n\\t\\t#endif\\n\\t}\\n\\t#define cubeUV_r0 1.0\\n\\t#define cubeUV_v0 0.339\\n\\t#define cubeUV_m0 - 2.0\\n\\t#define cubeUV_r1 0.8\\n\\t#define cubeUV_v1 0.276\\n\\t#define cubeUV_m1 - 1.0\\n\\t#define cubeUV_r4 0.4\\n\\t#define cubeUV_v4 0.046\\n\\t#define cubeUV_m4 2.0\\n\\t#define cubeUV_r5 0.305\\n\\t#define cubeUV_v5 0.016\\n\\t#define cubeUV_m5 3.0\\n\\t#define cubeUV_r6 0.21\\n\\t#define cubeUV_v6 0.0038\\n\\t#define cubeUV_m6 4.0\\n\\tfloat roughnessToMip( float roughness ) {\\n\\t\\tfloat mip = 0.0;\\n\\t\\tif ( roughness >= cubeUV_r1 ) {\\n\\t\\t\\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\\n\\t\\t} else if ( roughness >= cubeUV_r4 ) {\\n\\t\\t\\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\\n\\t\\t} else if ( roughness >= cubeUV_r5 ) {\\n\\t\\t\\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\\n\\t\\t} else if ( roughness >= cubeUV_r6 ) {\\n\\t\\t\\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\\n\\t\\t} else {\\n\\t\\t\\tmip = - 2.0 * log2( 1.16 * roughness );\\t\\t}\\n\\t\\treturn mip;\\n\\t}\\n\\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\\n\\t\\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\\n\\t\\tfloat mipF = fract( mip );\\n\\t\\tfloat mipInt = floor( mip );\\n\\t\\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\\n\\t\\tif ( mipF == 0.0 ) {\\n\\t\\t\\treturn vec4( color0, 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\\n\\t\\t\\treturn vec4( mix( color0, color1, mipF ), 1.0 );\\n\\t\\t}\\n\\t}\\n#endif\";\n\nvar defaultnormal_vertex = \"vec3 transformedNormal = objectNormal;\\n#ifdef USE_INSTANCING\\n\\tmat3 m = mat3( instanceMatrix );\\n\\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\\n\\ttransformedNormal = m * transformedNormal;\\n#endif\\ntransformedNormal = normalMatrix * transformedNormal;\\n#ifdef FLIP_SIDED\\n\\ttransformedNormal = - transformedNormal;\\n#endif\\n#ifdef USE_TANGENT\\n\\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#ifdef FLIP_SIDED\\n\\t\\ttransformedTangent = - transformedTangent;\\n\\t#endif\\n#endif\";\n\nvar displacementmap_pars_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\tuniform sampler2D displacementMap;\\n\\tuniform float displacementScale;\\n\\tuniform float displacementBias;\\n#endif\";\n\nvar displacementmap_vertex = \"#ifdef USE_DISPLACEMENTMAP\\n\\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\\n#endif\";\n\nvar emissivemap_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\\n\\ttotalEmissiveRadiance *= emissiveColor.rgb;\\n#endif\";\n\nvar emissivemap_pars_fragment = \"#ifdef USE_EMISSIVEMAP\\n\\tuniform sampler2D emissiveMap;\\n#endif\";\n\nvar colorspace_fragment = \"gl_FragColor = linearToOutputTexel( gl_FragColor );\";\n\nvar colorspace_pars_fragment = \"\\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\\n\\tvec3( 0.8224621, 0.177538, 0.0 ),\\n\\tvec3( 0.0331941, 0.9668058, 0.0 ),\\n\\tvec3( 0.0170827, 0.0723974, 0.9105199 )\\n);\\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\\n\\tvec3( 1.2249401, - 0.2249404, 0.0 ),\\n\\tvec3( - 0.0420569, 1.0420571, 0.0 ),\\n\\tvec3( - 0.0196376, - 0.0786361, 1.0982735 )\\n);\\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\\n\\treturn vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\\n}\\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\\n\\treturn vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\\n}\\nvec4 LinearTransferOETF( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 sRGBTransferOETF( in vec4 value ) {\\n\\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\\n}\\nvec4 LinearToLinear( in vec4 value ) {\\n\\treturn value;\\n}\\nvec4 LinearTosRGB( in vec4 value ) {\\n\\treturn sRGBTransferOETF( value );\\n}\";\n\nvar envmap_fragment = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvec3 cameraToFrag;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#else\\n\\t\\tvec3 reflectVec = vReflect;\\n\\t#endif\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\\n\\t#else\\n\\t\\tvec4 envColor = vec4( 0.0 );\\n\\t#endif\\n\\t#ifdef ENVMAP_BLENDING_MULTIPLY\\n\\t\\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_MIX )\\n\\t\\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\\n\\t#elif defined( ENVMAP_BLENDING_ADD )\\n\\t\\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\\n\\t#endif\\n#endif\";\n\nvar envmap_common_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float envMapIntensity;\\n\\tuniform float flipEnvMap;\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tuniform samplerCube envMap;\\n\\t#else\\n\\t\\tuniform sampler2D envMap;\\n\\t#endif\\n\\t\\n#endif\";\n\nvar envmap_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tuniform float reflectivity;\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t\\tuniform float refractionRatio;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t#endif\\n#endif\";\n\nvar envmap_pars_vertex = \"#ifdef USE_ENVMAP\\n\\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\\n\\t\\t#define ENV_WORLDPOS\\n\\t#endif\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\t\\n\\t\\tvarying vec3 vWorldPosition;\\n\\t#else\\n\\t\\tvarying vec3 vReflect;\\n\\t\\tuniform float refractionRatio;\\n\\t#endif\\n#endif\";\n\nvar envmap_vertex = \"#ifdef USE_ENVMAP\\n\\t#ifdef ENV_WORLDPOS\\n\\t\\tvWorldPosition = worldPosition.xyz;\\n\\t#else\\n\\t\\tvec3 cameraToVertex;\\n\\t\\tif ( isOrthographic ) {\\n\\t\\t\\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\\n\\t\\t} else {\\n\\t\\t\\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\\n\\t\\t}\\n\\t\\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\t\\t#ifdef ENVMAP_MODE_REFLECTION\\n\\t\\t\\tvReflect = reflect( cameraToVertex, worldNormal );\\n\\t\\t#else\\n\\t\\t\\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar fog_vertex = \"#ifdef USE_FOG\\n\\tvFogDepth = - mvPosition.z;\\n#endif\";\n\nvar fog_pars_vertex = \"#ifdef USE_FOG\\n\\tvarying float vFogDepth;\\n#endif\";\n\nvar fog_fragment = \"#ifdef USE_FOG\\n\\t#ifdef FOG_EXP2\\n\\t\\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\\n\\t#else\\n\\t\\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\\n\\t#endif\\n\\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\\n#endif\";\n\nvar fog_pars_fragment = \"#ifdef USE_FOG\\n\\tuniform vec3 fogColor;\\n\\tvarying float vFogDepth;\\n\\t#ifdef FOG_EXP2\\n\\t\\tuniform float fogDensity;\\n\\t#else\\n\\t\\tuniform float fogNear;\\n\\t\\tuniform float fogFar;\\n\\t#endif\\n#endif\";\n\nvar gradientmap_pars_fragment = \"#ifdef USE_GRADIENTMAP\\n\\tuniform sampler2D gradientMap;\\n#endif\\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\\n\\tfloat dotNL = dot( normal, lightDirection );\\n\\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\\n\\t#ifdef USE_GRADIENTMAP\\n\\t\\treturn vec3( texture2D( gradientMap, coord ).r );\\n\\t#else\\n\\t\\tvec2 fw = fwidth( coord ) * 0.5;\\n\\t\\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\\n\\t#endif\\n}\";\n\nvar lightmap_fragment = \"#ifdef USE_LIGHTMAP\\n\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\treflectedLight.indirectDiffuse += lightMapIrradiance;\\n#endif\";\n\nvar lightmap_pars_fragment = \"#ifdef USE_LIGHTMAP\\n\\tuniform sampler2D lightMap;\\n\\tuniform float lightMapIntensity;\\n#endif\";\n\nvar lights_lambert_fragment = \"LambertMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_lambert_pars_fragment = \"varying vec3 vViewPosition;\\nstruct LambertMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Lambert\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Lambert\";\n\nvar lights_pars_begin = \"uniform bool receiveShadow;\\nuniform vec3 ambientLightColor;\\n#if defined( USE_LIGHT_PROBES )\\n\\tuniform vec3 lightProbe[ 9 ];\\n#endif\\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\\n\\tfloat x = normal.x, y = normal.y, z = normal.z;\\n\\tvec3 result = shCoefficients[ 0 ] * 0.886227;\\n\\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\\n\\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\\n\\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\\n\\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\\n\\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\\n\\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\\n\\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\\n\\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\\n\\treturn result;\\n}\\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\\n\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\\n\\treturn irradiance;\\n}\\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\\n\\tvec3 irradiance = ambientLightColor;\\n\\treturn irradiance;\\n}\\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\\n\\t#if defined ( LEGACY_LIGHTS )\\n\\t\\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\\n\\t\\t\\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\\n\\t\\t}\\n\\t\\treturn 1.0;\\n\\t#else\\n\\t\\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\\n\\t\\tif ( cutoffDistance > 0.0 ) {\\n\\t\\t\\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\\n\\t\\t}\\n\\t\\treturn distanceFalloff;\\n\\t#endif\\n}\\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\\n\\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\\n}\\n#if NUM_DIR_LIGHTS > 0\\n\\tstruct DirectionalLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t};\\n\\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\\n\\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\\n\\t\\tlight.color = directionalLight.color;\\n\\t\\tlight.direction = directionalLight.direction;\\n\\t\\tlight.visible = true;\\n\\t}\\n#endif\\n#if NUM_POINT_LIGHTS > 0\\n\\tstruct PointLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t};\\n\\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\\n\\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\\n\\t\\tvec3 lVector = pointLight.position - geometryPosition;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat lightDistance = length( lVector );\\n\\t\\tlight.color = pointLight.color;\\n\\t\\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\\n\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t}\\n#endif\\n#if NUM_SPOT_LIGHTS > 0\\n\\tstruct SpotLight {\\n\\t\\tvec3 position;\\n\\t\\tvec3 direction;\\n\\t\\tvec3 color;\\n\\t\\tfloat distance;\\n\\t\\tfloat decay;\\n\\t\\tfloat coneCos;\\n\\t\\tfloat penumbraCos;\\n\\t};\\n\\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\\n\\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\\n\\t\\tvec3 lVector = spotLight.position - geometryPosition;\\n\\t\\tlight.direction = normalize( lVector );\\n\\t\\tfloat angleCos = dot( light.direction, spotLight.direction );\\n\\t\\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\\n\\t\\tif ( spotAttenuation > 0.0 ) {\\n\\t\\t\\tfloat lightDistance = length( lVector );\\n\\t\\t\\tlight.color = spotLight.color * spotAttenuation;\\n\\t\\t\\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\\n\\t\\t\\tlight.visible = ( light.color != vec3( 0.0 ) );\\n\\t\\t} else {\\n\\t\\t\\tlight.color = vec3( 0.0 );\\n\\t\\t\\tlight.visible = false;\\n\\t\\t}\\n\\t}\\n#endif\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tstruct RectAreaLight {\\n\\t\\tvec3 color;\\n\\t\\tvec3 position;\\n\\t\\tvec3 halfWidth;\\n\\t\\tvec3 halfHeight;\\n\\t};\\n\\tuniform sampler2D ltc_1;\\tuniform sampler2D ltc_2;\\n\\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\\n#endif\\n#if NUM_HEMI_LIGHTS > 0\\n\\tstruct HemisphereLight {\\n\\t\\tvec3 direction;\\n\\t\\tvec3 skyColor;\\n\\t\\tvec3 groundColor;\\n\\t};\\n\\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\\n\\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\\n\\t\\tfloat dotNL = dot( normal, hemiLight.direction );\\n\\t\\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\\n\\t\\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\\n\\t\\treturn irradiance;\\n\\t}\\n#endif\";\n\nvar envmap_physical_pars_fragment = \"#ifdef USE_ENVMAP\\n\\tvec3 getIBLIrradiance( const in vec3 normal ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\\n\\t\\t\\treturn PI * envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\\n\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\tvec3 reflectVec = reflect( - viewDir, normal );\\n\\t\\t\\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\\n\\t\\t\\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\\n\\t\\t\\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\\n\\t\\t\\treturn envMapColor.rgb * envMapIntensity;\\n\\t\\t#else\\n\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t#endif\\n\\t}\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\\n\\t\\t\\t#ifdef ENVMAP_TYPE_CUBE_UV\\n\\t\\t\\t\\tvec3 bentNormal = cross( bitangent, viewDir );\\n\\t\\t\\t\\tbentNormal = normalize( cross( bentNormal, bitangent ) );\\n\\t\\t\\t\\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\\n\\t\\t\\t\\treturn getIBLRadiance( viewDir, bentNormal, roughness );\\n\\t\\t\\t#else\\n\\t\\t\\t\\treturn vec3( 0.0 );\\n\\t\\t\\t#endif\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar lights_toon_fragment = \"ToonMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\";\n\nvar lights_toon_pars_fragment = \"varying vec3 vViewPosition;\\nstruct ToonMaterial {\\n\\tvec3 diffuseColor;\\n};\\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Toon\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Toon\";\n\nvar lights_phong_fragment = \"BlinnPhongMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb;\\nmaterial.specularColor = specular;\\nmaterial.specularShininess = shininess;\\nmaterial.specularStrength = specularStrength;\";\n\nvar lights_phong_pars_fragment = \"varying vec3 vViewPosition;\\nstruct BlinnPhongMaterial {\\n\\tvec3 diffuseColor;\\n\\tvec3 specularColor;\\n\\tfloat specularShininess;\\n\\tfloat specularStrength;\\n};\\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n\\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\\n}\\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_BlinnPhong\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_BlinnPhong\";\n\nvar lights_physical_fragment = \"PhysicalMaterial material;\\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\\nmaterial.roughness = min( material.roughness, 1.0 );\\n#ifdef IOR\\n\\tmaterial.ior = ior;\\n\\t#ifdef USE_SPECULAR\\n\\t\\tfloat specularIntensityFactor = specularIntensity;\\n\\t\\tvec3 specularColorFactor = specularColor;\\n\\t\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\t\\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\\n\\t\\t#endif\\n\\t\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\t\\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\\n\\t\\t#endif\\n\\t\\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\\n\\t#else\\n\\t\\tfloat specularIntensityFactor = 1.0;\\n\\t\\tvec3 specularColorFactor = vec3( 1.0 );\\n\\t\\tmaterial.specularF90 = 1.0;\\n\\t#endif\\n\\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\\n#else\\n\\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\\n\\tmaterial.specularF90 = 1.0;\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tmaterial.clearcoat = clearcoat;\\n\\tmaterial.clearcoatRoughness = clearcoatRoughness;\\n\\tmaterial.clearcoatF0 = vec3( 0.04 );\\n\\tmaterial.clearcoatF90 = 1.0;\\n\\t#ifdef USE_CLEARCOATMAP\\n\\t\\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\t\\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\\n\\t#endif\\n\\tmaterial.clearcoat = saturate( material.clearcoat );\\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\\n\\tmaterial.clearcoatRoughness += geometryRoughness;\\n\\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tmaterial.iridescence = iridescence;\\n\\tmaterial.iridescenceIOR = iridescenceIOR;\\n\\t#ifdef USE_IRIDESCENCEMAP\\n\\t\\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\t\\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\\n\\t#else\\n\\t\\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\\n\\t#endif\\n#endif\\n#ifdef USE_SHEEN\\n\\tmaterial.sheenColor = sheenColor;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\\n\\t#endif\\n\\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\\n\\t\\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\\n\\t\\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\\n\\t#else\\n\\t\\tvec2 anisotropyV = anisotropyVector;\\n\\t#endif\\n\\tmaterial.anisotropy = length( anisotropyV );\\n\\tanisotropyV /= material.anisotropy;\\n\\tmaterial.anisotropy = saturate( material.anisotropy );\\n\\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\\n\\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\\n\\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\\n#endif\";\n\nvar lights_physical_pars_fragment = \"struct PhysicalMaterial {\\n\\tvec3 diffuseColor;\\n\\tfloat roughness;\\n\\tvec3 specularColor;\\n\\tfloat specularF90;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat clearcoat;\\n\\t\\tfloat clearcoatRoughness;\\n\\t\\tvec3 clearcoatF0;\\n\\t\\tfloat clearcoatF90;\\n\\t#endif\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tfloat iridescence;\\n\\t\\tfloat iridescenceIOR;\\n\\t\\tfloat iridescenceThickness;\\n\\t\\tvec3 iridescenceFresnel;\\n\\t\\tvec3 iridescenceF0;\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tvec3 sheenColor;\\n\\t\\tfloat sheenRoughness;\\n\\t#endif\\n\\t#ifdef IOR\\n\\t\\tfloat ior;\\n\\t#endif\\n\\t#ifdef USE_TRANSMISSION\\n\\t\\tfloat transmission;\\n\\t\\tfloat transmissionAlpha;\\n\\t\\tfloat thickness;\\n\\t\\tfloat attenuationDistance;\\n\\t\\tvec3 attenuationColor;\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat anisotropy;\\n\\t\\tfloat alphaT;\\n\\t\\tvec3 anisotropyT;\\n\\t\\tvec3 anisotropyB;\\n\\t#endif\\n};\\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\\nvec3 sheenSpecularDirect = vec3( 0.0 );\\nvec3 sheenSpecularIndirect = vec3(0.0 );\\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\\n    float x2 = x * x;\\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\\n}\\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\\n\\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\\n\\treturn 0.5 / max( gv + gl, EPSILON );\\n}\\nfloat D_GGX( const in float alpha, const in float dotNH ) {\\n\\tfloat a2 = pow2( alpha );\\n\\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\\n\\treturn RECIPROCAL_PI * a2 / pow2( denom );\\n}\\n#ifdef USE_ANISOTROPY\\n\\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\\n\\t\\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\\n\\t\\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\\n\\t\\tfloat v = 0.5 / ( gv + gl );\\n\\t\\treturn saturate(v);\\n\\t}\\n\\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\\n\\t\\tfloat a2 = alphaT * alphaB;\\n\\t\\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\\n\\t\\thighp float v2 = dot( v, v );\\n\\t\\tfloat w2 = a2 / v2;\\n\\t\\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\\n\\t}\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\\n\\t\\tvec3 f0 = material.clearcoatF0;\\n\\t\\tfloat f90 = material.clearcoatF90;\\n\\t\\tfloat roughness = material.clearcoatRoughness;\\n\\t\\tfloat alpha = pow2( roughness );\\n\\t\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\t\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\t\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\t\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\t\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\t\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t\\treturn F * ( V * D );\\n\\t}\\n#endif\\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\\n\\tvec3 f0 = material.specularColor;\\n\\tfloat f90 = material.specularF90;\\n\\tfloat roughness = material.roughness;\\n\\tfloat alpha = pow2( roughness );\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\\n\\tvec3 F = F_Schlick( f0, f90, dotVH );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tF = mix( F, material.iridescenceFresnel, material.iridescence );\\n\\t#endif\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tfloat dotTL = dot( material.anisotropyT, lightDir );\\n\\t\\tfloat dotTV = dot( material.anisotropyT, viewDir );\\n\\t\\tfloat dotTH = dot( material.anisotropyT, halfDir );\\n\\t\\tfloat dotBL = dot( material.anisotropyB, lightDir );\\n\\t\\tfloat dotBV = dot( material.anisotropyB, viewDir );\\n\\t\\tfloat dotBH = dot( material.anisotropyB, halfDir );\\n\\t\\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\\n\\t\\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\\n\\t#else\\n\\t\\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\\n\\t\\tfloat D = D_GGX( alpha, dotNH );\\n\\t#endif\\n\\treturn F * ( V * D );\\n}\\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\\n\\tconst float LUT_SIZE = 64.0;\\n\\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\\n\\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\\n\\tfloat dotNV = saturate( dot( N, V ) );\\n\\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\\n\\tuv = uv * LUT_SCALE + LUT_BIAS;\\n\\treturn uv;\\n}\\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\\n\\tfloat l = length( f );\\n\\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\\n}\\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\\n\\tfloat x = dot( v1, v2 );\\n\\tfloat y = abs( x );\\n\\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\\n\\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\\n\\tfloat v = a / b;\\n\\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\\n\\treturn cross( v1, v2 ) * theta_sintheta;\\n}\\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\\n\\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\\n\\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\\n\\tvec3 lightNormal = cross( v1, v2 );\\n\\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\\n\\tvec3 T1, T2;\\n\\tT1 = normalize( V - N * dot( V, N ) );\\n\\tT2 = - cross( N, T1 );\\n\\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\\n\\tvec3 coords[ 4 ];\\n\\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\\n\\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\\n\\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\\n\\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\\n\\tcoords[ 0 ] = normalize( coords[ 0 ] );\\n\\tcoords[ 1 ] = normalize( coords[ 1 ] );\\n\\tcoords[ 2 ] = normalize( coords[ 2 ] );\\n\\tcoords[ 3 ] = normalize( coords[ 3 ] );\\n\\tvec3 vectorFormFactor = vec3( 0.0 );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\\n\\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\\n\\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\\n\\treturn vec3( result );\\n}\\n#if defined( USE_SHEEN )\\nfloat D_Charlie( float roughness, float dotNH ) {\\n\\tfloat alpha = pow2( roughness );\\n\\tfloat invAlpha = 1.0 / alpha;\\n\\tfloat cos2h = dotNH * dotNH;\\n\\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\\n\\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\\n}\\nfloat V_Neubelt( float dotNV, float dotNL ) {\\n\\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\\n}\\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\\n\\tvec3 halfDir = normalize( lightDir + viewDir );\\n\\tfloat dotNL = saturate( dot( normal, lightDir ) );\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat dotNH = saturate( dot( normal, halfDir ) );\\n\\tfloat D = D_Charlie( sheenRoughness, dotNH );\\n\\tfloat V = V_Neubelt( dotNV, dotNL );\\n\\treturn sheenColor * ( D * V );\\n}\\n#endif\\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tfloat r2 = roughness * roughness;\\n\\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\\n\\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\\n\\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\\n\\treturn saturate( DG * RECIPROCAL_PI );\\n}\\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\\n\\tfloat dotNV = saturate( dot( normal, viewDir ) );\\n\\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\\n\\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\\n\\tvec4 r = roughness * c0 + c1;\\n\\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\\n\\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\\n\\treturn fab;\\n}\\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\treturn specularColor * fab.x + specularF90 * fab.y;\\n}\\n#ifdef USE_IRIDESCENCE\\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#else\\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\\n#endif\\n\\tvec2 fab = DFGApprox( normal, viewDir, roughness );\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\\n\\t#else\\n\\t\\tvec3 Fr = specularColor;\\n\\t#endif\\n\\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\\n\\tfloat Ess = fab.x + fab.y;\\n\\tfloat Ems = 1.0 - Ess;\\n\\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\\n\\tsingleScatter += FssEss;\\n\\tmultiScatter += Fms * Ems;\\n}\\n#if NUM_RECT_AREA_LIGHTS > 0\\n\\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\t\\tvec3 normal = geometryNormal;\\n\\t\\tvec3 viewDir = geometryViewDir;\\n\\t\\tvec3 position = geometryPosition;\\n\\t\\tvec3 lightPos = rectAreaLight.position;\\n\\t\\tvec3 halfWidth = rectAreaLight.halfWidth;\\n\\t\\tvec3 halfHeight = rectAreaLight.halfHeight;\\n\\t\\tvec3 lightColor = rectAreaLight.color;\\n\\t\\tfloat roughness = material.roughness;\\n\\t\\tvec3 rectCoords[ 4 ];\\n\\t\\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\\t\\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\\n\\t\\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\\n\\t\\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\\n\\t\\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\\n\\t\\tvec4 t1 = texture2D( ltc_1, uv );\\n\\t\\tvec4 t2 = texture2D( ltc_2, uv );\\n\\t\\tmat3 mInv = mat3(\\n\\t\\t\\tvec3( t1.x, 0, t1.y ),\\n\\t\\t\\tvec3(    0, 1,    0 ),\\n\\t\\t\\tvec3( t1.z, 0, t1.w )\\n\\t\\t);\\n\\t\\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\\n\\t\\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\\n\\t\\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\\n\\t}\\n#endif\\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\\n\\tvec3 irradiance = dotNL * directLight.color;\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\\n\\t\\tvec3 ccIrradiance = dotNLcc * directLight.color;\\n\\t\\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\\n\\t#endif\\n\\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\\n\\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\\n\\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\\n}\\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\\n\\t#endif\\n\\t#ifdef USE_SHEEN\\n\\t\\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\\n\\t#endif\\n\\tvec3 singleScattering = vec3( 0.0 );\\n\\tvec3 multiScattering = vec3( 0.0 );\\n\\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\\n\\t#ifdef USE_IRIDESCENCE\\n\\t\\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\\n\\t#else\\n\\t\\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\\n\\t#endif\\n\\tvec3 totalScattering = singleScattering + multiScattering;\\n\\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\\n\\treflectedLight.indirectSpecular += radiance * singleScattering;\\n\\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\\n\\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\\n}\\n#define RE_Direct\\t\\t\\t\\tRE_Direct_Physical\\n#define RE_Direct_RectArea\\t\\tRE_Direct_RectArea_Physical\\n#define RE_IndirectDiffuse\\t\\tRE_IndirectDiffuse_Physical\\n#define RE_IndirectSpecular\\t\\tRE_IndirectSpecular_Physical\\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\\n\\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\\n}\";\n\nvar lights_fragment_begin = \"\\nvec3 geometryPosition = - vViewPosition;\\nvec3 geometryNormal = normal;\\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\\nvec3 geometryClearcoatNormal = vec3( 0.0 );\\n#ifdef USE_CLEARCOAT\\n\\tgeometryClearcoatNormal = clearcoatNormal;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\\n\\tif ( material.iridescenceThickness == 0.0 ) {\\n\\t\\tmaterial.iridescence = 0.0;\\n\\t} else {\\n\\t\\tmaterial.iridescence = saturate( material.iridescence );\\n\\t}\\n\\tif ( material.iridescence > 0.0 ) {\\n\\t\\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\\n\\t\\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\\n\\t}\\n#endif\\nIncidentLight directLight;\\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tPointLight pointLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\\n\\t\\tpointLight = pointLights[ i ];\\n\\t\\tgetPointLightInfo( pointLight, geometryPosition, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\\n\\t\\tpointLightShadow = pointLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tSpotLight spotLight;\\n\\tvec4 spotColor;\\n\\tvec3 spotLightCoord;\\n\\tbool inSpotLightMap;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\\n\\t\\tspotLight = spotLights[ i ];\\n\\t\\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\\n\\t\\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\\n\\t\\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\\n\\t\\t#else\\n\\t\\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\\n\\t\\t#endif\\n\\t\\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\\n\\t\\t\\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\\n\\t\\t\\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\\n\\t\\t\\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\\n\\t\\t\\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\\n\\t\\t#endif\\n\\t\\t#undef SPOT_LIGHT_MAP_INDEX\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\tspotLightShadow = spotLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\\n\\tDirectionalLight directionalLight;\\n\\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLightShadow;\\n\\t#endif\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLights[ i ];\\n\\t\\tgetDirectionalLightInfo( directionalLight, directLight );\\n\\t\\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\\n\\t\\tdirectionalLightShadow = directionalLightShadows[ i ];\\n\\t\\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t\\t#endif\\n\\t\\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\\n\\tRectAreaLight rectAreaLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\\n\\t\\trectAreaLight = rectAreaLights[ i ];\\n\\t\\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\\n#if defined( RE_IndirectDiffuse )\\n\\tvec3 iblIrradiance = vec3( 0.0 );\\n\\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\\n\\t#if defined( USE_LIGHT_PROBES )\\n\\t\\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\\n\\t#endif\\n\\t#if ( NUM_HEMI_LIGHTS > 0 )\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\\n\\t\\t\\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tvec3 radiance = vec3( 0.0 );\\n\\tvec3 clearcoatRadiance = vec3( 0.0 );\\n#endif\";\n\nvar lights_fragment_maps = \"#if defined( RE_IndirectDiffuse )\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\\n\\t\\tirradiance += lightMapIrradiance;\\n\\t#endif\\n\\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tiblIrradiance += getIBLIrradiance( geometryNormal );\\n\\t#endif\\n#endif\\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\\n\\t#ifdef USE_ANISOTROPY\\n\\t\\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\\n\\t#else\\n\\t\\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\\n\\t#endif\\n#endif\";\n\nvar lights_fragment_end = \"#if defined( RE_IndirectDiffuse )\\n\\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n#endif\\n#if defined( RE_IndirectSpecular )\\n\\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\\n#endif\";\n\nvar logdepthbuf_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\\n#endif\";\n\nvar logdepthbuf_pars_fragment = \"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\\n\\tuniform float logDepthBufFC;\\n\\tvarying float vFragDepth;\\n\\tvarying float vIsPerspective;\\n#endif\";\n\nvar logdepthbuf_pars_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvarying float vFragDepth;\\n\\t\\tvarying float vIsPerspective;\\n\\t#else\\n\\t\\tuniform float logDepthBufFC;\\n\\t#endif\\n#endif\";\n\nvar logdepthbuf_vertex = \"#ifdef USE_LOGDEPTHBUF\\n\\t#ifdef USE_LOGDEPTHBUF_EXT\\n\\t\\tvFragDepth = 1.0 + gl_Position.w;\\n\\t\\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\\n\\t#else\\n\\t\\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\\n\\t\\t\\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\\n\\t\\t\\tgl_Position.z *= gl_Position.w;\\n\\t\\t}\\n\\t#endif\\n#endif\";\n\nvar map_fragment = \"#ifdef USE_MAP\\n\\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\\n\\t\\n\\t#endif\\n\\tdiffuseColor *= sampledDiffuseColor;\\n#endif\";\n\nvar map_pars_fragment = \"#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\";\n\nvar map_particle_fragment = \"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t#if defined( USE_POINTS_UV )\\n\\t\\tvec2 uv = vUv;\\n\\t#else\\n\\t\\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tdiffuseColor *= texture2D( map, uv );\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\\n#endif\";\n\nvar map_particle_pars_fragment = \"#if defined( USE_POINTS_UV )\\n\\tvarying vec2 vUv;\\n#else\\n\\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\\n\\t\\tuniform mat3 uvTransform;\\n\\t#endif\\n#endif\\n#ifdef USE_MAP\\n\\tuniform sampler2D map;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform sampler2D alphaMap;\\n#endif\";\n\nvar metalnessmap_fragment = \"float metalnessFactor = metalness;\\n#ifdef USE_METALNESSMAP\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\\n\\tmetalnessFactor *= texelMetalness.b;\\n#endif\";\n\nvar metalnessmap_pars_fragment = \"#ifdef USE_METALNESSMAP\\n\\tuniform sampler2D metalnessMap;\\n#endif\";\n\nvar morphcolor_vertex = \"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\\n\\tvColor *= morphTargetBaseInfluence;\\n\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t#if defined( USE_COLOR_ALPHA )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\\n\\t\\t#elif defined( USE_COLOR )\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar morphnormal_vertex = \"#ifdef USE_MORPHNORMALS\\n\\tobjectNormal *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\\n\\t\\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\\n\\t\\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\\n\\t\\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\\n\\t#endif\\n#endif\";\n\nvar morphtarget_pars_vertex = \"#ifdef USE_MORPHTARGETS\\n\\tuniform float morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\\n\\t\\tuniform sampler2DArray morphTargetsTexture;\\n\\t\\tuniform ivec2 morphTargetsTextureSize;\\n\\t\\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\\n\\t\\t\\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\\n\\t\\t\\tint y = texelIndex / morphTargetsTextureSize.x;\\n\\t\\t\\tint x = texelIndex - y * morphTargetsTextureSize.x;\\n\\t\\t\\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\\n\\t\\t\\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\\n\\t\\t}\\n\\t#else\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\tuniform float morphTargetInfluences[ 8 ];\\n\\t\\t#else\\n\\t\\t\\tuniform float morphTargetInfluences[ 4 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar morphtarget_vertex = \"#ifdef USE_MORPHTARGETS\\n\\ttransformed *= morphTargetBaseInfluence;\\n\\t#ifdef MORPHTARGETS_TEXTURE\\n\\t\\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\\n\\t\\t\\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\\n\\t\\t}\\n\\t#else\\n\\t\\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\\n\\t\\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\\n\\t\\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\\n\\t\\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\\n\\t\\t#ifndef USE_MORPHNORMALS\\n\\t\\t\\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\\n\\t\\t\\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\\n\\t\\t\\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\\n\\t\\t\\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\\n\\t\\t#endif\\n\\t#endif\\n#endif\";\n\nvar normal_fragment_begin = \"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\\n#ifdef FLAT_SHADED\\n\\tvec3 fdx = dFdx( vViewPosition );\\n\\tvec3 fdy = dFdy( vViewPosition );\\n\\tvec3 normal = normalize( cross( fdx, fdy ) );\\n#else\\n\\tvec3 normal = normalize( vNormal );\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal *= faceDirection;\\n\\t#endif\\n#endif\\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\\n\\t\\t#if defined( USE_NORMALMAP )\\n\\t\\t\\tvNormalMapUv\\n\\t\\t#elif defined( USE_CLEARCOAT_NORMALMAP )\\n\\t\\t\\tvClearcoatNormalMapUv\\n\\t\\t#else\\n\\t\\t\\tvUv\\n\\t\\t#endif\\n\\t\\t);\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn[0] *= faceDirection;\\n\\t\\ttbn[1] *= faceDirection;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\t#ifdef USE_TANGENT\\n\\t\\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\\n\\t#else\\n\\t\\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\\n\\t#endif\\n\\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\\n\\t\\ttbn2[0] *= faceDirection;\\n\\t\\ttbn2[1] *= faceDirection;\\n\\t#endif\\n#endif\\nvec3 nonPerturbedNormal = normal;\";\n\nvar normal_fragment_maps = \"#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\t#ifdef FLIP_SIDED\\n\\t\\tnormal = - normal;\\n\\t#endif\\n\\t#ifdef DOUBLE_SIDED\\n\\t\\tnormal = normal * faceDirection;\\n\\t#endif\\n\\tnormal = normalize( normalMatrix * normal );\\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tmapN.xy *= normalScale;\\n\\tnormal = normalize( tbn * mapN );\\n#elif defined( USE_BUMPMAP )\\n\\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\\n#endif\";\n\nvar normal_pars_fragment = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_pars_vertex = \"#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n\\t#ifdef USE_TANGENT\\n\\t\\tvarying vec3 vTangent;\\n\\t\\tvarying vec3 vBitangent;\\n\\t#endif\\n#endif\";\n\nvar normal_vertex = \"#ifndef FLAT_SHADED\\n\\tvNormal = normalize( transformedNormal );\\n\\t#ifdef USE_TANGENT\\n\\t\\tvTangent = normalize( transformedTangent );\\n\\t\\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\\n\\t#endif\\n#endif\";\n\nvar normalmap_pars_fragment = \"#ifdef USE_NORMALMAP\\n\\tuniform sampler2D normalMap;\\n\\tuniform vec2 normalScale;\\n#endif\\n#ifdef USE_NORMALMAP_OBJECTSPACE\\n\\tuniform mat3 normalMatrix;\\n#endif\\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\\n\\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\\n\\t\\tvec3 q0 = dFdx( eye_pos.xyz );\\n\\t\\tvec3 q1 = dFdy( eye_pos.xyz );\\n\\t\\tvec2 st0 = dFdx( uv.st );\\n\\t\\tvec2 st1 = dFdy( uv.st );\\n\\t\\tvec3 N = surf_norm;\\n\\t\\tvec3 q1perp = cross( q1, N );\\n\\t\\tvec3 q0perp = cross( N, q0 );\\n\\t\\tvec3 T = q1perp * st0.x + q0perp * st1.x;\\n\\t\\tvec3 B = q1perp * st0.y + q0perp * st1.y;\\n\\t\\tfloat det = max( dot( T, T ), dot( B, B ) );\\n\\t\\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\\n\\t\\treturn mat3( T * scale, B * scale, N );\\n\\t}\\n#endif\";\n\nvar clearcoat_normal_fragment_begin = \"#ifdef USE_CLEARCOAT\\n\\tvec3 clearcoatNormal = nonPerturbedNormal;\\n#endif\";\n\nvar clearcoat_normal_fragment_maps = \"#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\\n\\tclearcoatMapN.xy *= clearcoatNormalScale;\\n\\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\\n#endif\";\n\nvar clearcoat_pars_fragment = \"#ifdef USE_CLEARCOATMAP\\n\\tuniform sampler2D clearcoatMap;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform sampler2D clearcoatNormalMap;\\n\\tuniform vec2 clearcoatNormalScale;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform sampler2D clearcoatRoughnessMap;\\n#endif\";\n\nvar iridescence_pars_fragment = \"#ifdef USE_IRIDESCENCEMAP\\n\\tuniform sampler2D iridescenceMap;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform sampler2D iridescenceThicknessMap;\\n#endif\";\n\nvar opaque_fragment = \"#ifdef OPAQUE\\ndiffuseColor.a = 1.0;\\n#endif\\n#ifdef USE_TRANSMISSION\\ndiffuseColor.a *= material.transmissionAlpha;\\n#endif\\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );\";\n\nvar packing = \"vec3 packNormalToRGB( const in vec3 normal ) {\\n\\treturn normalize( normal ) * 0.5 + 0.5;\\n}\\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\\n\\treturn 2.0 * rgb.xyz - 1.0;\\n}\\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\\nconst float ShiftRight8 = 1. / 256.;\\nvec4 packDepthToRGBA( const in float v ) {\\n\\tvec4 r = vec4( fract( v * PackFactors ), v );\\n\\tr.yzw -= r.xyz * ShiftRight8;\\treturn r * PackUpscale;\\n}\\nfloat unpackRGBAToDepth( const in vec4 v ) {\\n\\treturn dot( v, UnpackFactors );\\n}\\nvec2 packDepthToRG( in highp float v ) {\\n\\treturn packDepthToRGBA( v ).yx;\\n}\\nfloat unpackRGToDepth( const in highp vec2 v ) {\\n\\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\\n}\\nvec4 pack2HalfToRGBA( vec2 v ) {\\n\\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\\n\\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\\n}\\nvec2 unpackRGBATo2Half( vec4 v ) {\\n\\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\\n}\\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( viewZ + near ) / ( near - far );\\n}\\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn depth * ( near - far ) - near;\\n}\\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\\n\\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\\n}\\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\\n\\treturn ( near * far ) / ( ( far - near ) * depth - far );\\n}\";\n\nvar premultiplied_alpha_fragment = \"#ifdef PREMULTIPLIED_ALPHA\\n\\tgl_FragColor.rgb *= gl_FragColor.a;\\n#endif\";\n\nvar project_vertex = \"vec4 mvPosition = vec4( transformed, 1.0 );\\n#ifdef USE_INSTANCING\\n\\tmvPosition = instanceMatrix * mvPosition;\\n#endif\\nmvPosition = modelViewMatrix * mvPosition;\\ngl_Position = projectionMatrix * mvPosition;\";\n\nvar dithering_fragment = \"#ifdef DITHERING\\n\\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\\n#endif\";\n\nvar dithering_pars_fragment = \"#ifdef DITHERING\\n\\tvec3 dithering( vec3 color ) {\\n\\t\\tfloat grid_position = rand( gl_FragCoord.xy );\\n\\t\\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\\n\\t\\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\\n\\t\\treturn color + dither_shift_RGB;\\n\\t}\\n#endif\";\n\nvar roughnessmap_fragment = \"float roughnessFactor = roughness;\\n#ifdef USE_ROUGHNESSMAP\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\\n\\troughnessFactor *= texelRoughness.g;\\n#endif\";\n\nvar roughnessmap_pars_fragment = \"#ifdef USE_ROUGHNESSMAP\\n\\tuniform sampler2D roughnessMap;\\n#endif\";\n\nvar shadowmap_pars_fragment = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#if NUM_SPOT_LIGHT_MAPS > 0\\n\\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\\n\\t\\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\\n\\t}\\n\\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\\n\\t\\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\\n\\t}\\n\\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\\n\\t\\tfloat occlusion = 1.0;\\n\\t\\tvec2 distribution = texture2DDistribution( shadow, uv );\\n\\t\\tfloat hard_shadow = step( compare , distribution.x );\\n\\t\\tif (hard_shadow != 1.0 ) {\\n\\t\\t\\tfloat distance = compare - distribution.x ;\\n\\t\\t\\tfloat variance = max( 0.00000, distribution.y * distribution.y );\\n\\t\\t\\tfloat softness_probability = variance / (variance + distance * distance );\\t\\t\\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\\t\\t\\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\\n\\t\\t}\\n\\t\\treturn occlusion;\\n\\t}\\n\\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\\n\\t\\tfloat shadow = 1.0;\\n\\t\\tshadowCoord.xyz /= shadowCoord.w;\\n\\t\\tshadowCoord.z += shadowBias;\\n\\t\\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\\n\\t\\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\\n\\t\\tif ( frustumTest ) {\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx0 = - texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy0 = - texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx1 = + texelSize.x * shadowRadius;\\n\\t\\t\\tfloat dy1 = + texelSize.y * shadowRadius;\\n\\t\\t\\tfloat dx2 = dx0 / 2.0;\\n\\t\\t\\tfloat dy2 = dy0 / 2.0;\\n\\t\\t\\tfloat dx3 = dx1 / 2.0;\\n\\t\\t\\tfloat dy3 = dy1 / 2.0;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\\n\\t\\t\\t) * ( 1.0 / 17.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\\n\\t\\t\\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\\n\\t\\t\\tfloat dx = texelSize.x;\\n\\t\\t\\tfloat dy = texelSize.y;\\n\\t\\t\\tvec2 uv = shadowCoord.xy;\\n\\t\\t\\tvec2 f = fract( uv * shadowMapSize + 0.5 );\\n\\t\\t\\tuv -= f * texelSize;\\n\\t\\t\\tshadow = (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.x ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t f.y ) +\\n\\t\\t\\t\\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\\n\\t\\t\\t\\t\\t\\t  f.x ),\\n\\t\\t\\t\\t\\t f.y )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#elif defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#else\\n\\t\\t\\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\\n\\t\\t#endif\\n\\t\\t}\\n\\t\\treturn shadow;\\n\\t}\\n\\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\\n\\t\\tvec3 absV = abs( v );\\n\\t\\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\\n\\t\\tabsV *= scaleToCube;\\n\\t\\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\\n\\t\\tvec2 planar = v.xy;\\n\\t\\tfloat almostATexel = 1.5 * texelSizeY;\\n\\t\\tfloat almostOne = 1.0 - almostATexel;\\n\\t\\tif ( absV.z >= almostOne ) {\\n\\t\\t\\tif ( v.z > 0.0 )\\n\\t\\t\\t\\tplanar.x = 4.0 - v.x;\\n\\t\\t} else if ( absV.x >= almostOne ) {\\n\\t\\t\\tfloat signX = sign( v.x );\\n\\t\\t\\tplanar.x = v.z * signX + 2.0 * signX;\\n\\t\\t} else if ( absV.y >= almostOne ) {\\n\\t\\t\\tfloat signY = sign( v.y );\\n\\t\\t\\tplanar.x = v.x + 2.0 * signY + 2.0;\\n\\t\\t\\tplanar.y = v.z * signY - 2.0;\\n\\t\\t}\\n\\t\\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\\n\\t}\\n\\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\\n\\t\\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\\n\\t\\tvec3 lightToPosition = shadowCoord.xyz;\\n\\t\\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\\t\\tdp += shadowBias;\\n\\t\\tvec3 bd3D = normalize( lightToPosition );\\n\\t\\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\\n\\t\\t\\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\\n\\t\\t\\treturn (\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\\n\\t\\t\\t\\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\\n\\t\\t\\t) * ( 1.0 / 9.0 );\\n\\t\\t#else\\n\\t\\t\\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\\n\\t\\t#endif\\n\\t}\\n#endif\";\n\nvar shadowmap_pars_vertex = \"#if NUM_SPOT_LIGHT_COORDS > 0\\n\\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\\n\\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\\n#endif\\n#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t\\tstruct DirectionalLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\t\\tstruct SpotLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t};\\n\\t\\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t\\tstruct PointLightShadow {\\n\\t\\t\\tfloat shadowBias;\\n\\t\\t\\tfloat shadowNormalBias;\\n\\t\\t\\tfloat shadowRadius;\\n\\t\\t\\tvec2 shadowMapSize;\\n\\t\\t\\tfloat shadowCameraNear;\\n\\t\\t\\tfloat shadowCameraFar;\\n\\t\\t};\\n\\t\\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\\n\\t#endif\\n#endif\";\n\nvar shadowmap_vertex = \"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\\n\\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\\n\\tvec4 shadowWorldPosition;\\n#endif\\n#if defined( USE_SHADOWMAP )\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\t\\t#pragma unroll_loop_start\\n\\t\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\t\\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\\n\\t\\t\\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\\n\\t\\t}\\n\\t\\t#pragma unroll_loop_end\\n\\t#endif\\n#endif\\n#if NUM_SPOT_LIGHT_COORDS > 0\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\\n\\t\\tshadowWorldPosition = worldPosition;\\n\\t\\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\\n\\t\\t\\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\\n\\t\\t#endif\\n\\t\\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\\n\\t}\\n\\t#pragma unroll_loop_end\\n#endif\";\n\nvar shadowmask_pars_fragment = \"float getShadowMask() {\\n\\tfloat shadow = 1.0;\\n\\t#ifdef USE_SHADOWMAP\\n\\t#if NUM_DIR_LIGHT_SHADOWS > 0\\n\\tDirectionalLightShadow directionalLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tdirectionalLight = directionalLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_SPOT_LIGHT_SHADOWS > 0\\n\\tSpotLightShadow spotLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tspotLight = spotLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#if NUM_POINT_LIGHT_SHADOWS > 0\\n\\tPointLightShadow pointLight;\\n\\t#pragma unroll_loop_start\\n\\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\\n\\t\\tpointLight = pointLightShadows[ i ];\\n\\t\\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\\n\\t}\\n\\t#pragma unroll_loop_end\\n\\t#endif\\n\\t#endif\\n\\treturn shadow;\\n}\";\n\nvar skinbase_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\\n\\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\\n\\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\\n\\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\\n#endif\";\n\nvar skinning_pars_vertex = \"#ifdef USE_SKINNING\\n\\tuniform mat4 bindMatrix;\\n\\tuniform mat4 bindMatrixInverse;\\n\\tuniform highp sampler2D boneTexture;\\n\\tuniform int boneTextureSize;\\n\\tmat4 getBoneMatrix( const in float i ) {\\n\\t\\tfloat j = i * 4.0;\\n\\t\\tfloat x = mod( j, float( boneTextureSize ) );\\n\\t\\tfloat y = floor( j / float( boneTextureSize ) );\\n\\t\\tfloat dx = 1.0 / float( boneTextureSize );\\n\\t\\tfloat dy = 1.0 / float( boneTextureSize );\\n\\t\\ty = dy * ( y + 0.5 );\\n\\t\\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\\n\\t\\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\\n\\t\\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\\n\\t\\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\\n\\t\\tmat4 bone = mat4( v1, v2, v3, v4 );\\n\\t\\treturn bone;\\n\\t}\\n#endif\";\n\nvar skinning_vertex = \"#ifdef USE_SKINNING\\n\\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\\n\\tvec4 skinned = vec4( 0.0 );\\n\\tskinned += boneMatX * skinVertex * skinWeight.x;\\n\\tskinned += boneMatY * skinVertex * skinWeight.y;\\n\\tskinned += boneMatZ * skinVertex * skinWeight.z;\\n\\tskinned += boneMatW * skinVertex * skinWeight.w;\\n\\ttransformed = ( bindMatrixInverse * skinned ).xyz;\\n#endif\";\n\nvar skinnormal_vertex = \"#ifdef USE_SKINNING\\n\\tmat4 skinMatrix = mat4( 0.0 );\\n\\tskinMatrix += skinWeight.x * boneMatX;\\n\\tskinMatrix += skinWeight.y * boneMatY;\\n\\tskinMatrix += skinWeight.z * boneMatZ;\\n\\tskinMatrix += skinWeight.w * boneMatW;\\n\\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\\n\\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\\n\\t#ifdef USE_TANGENT\\n\\t\\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\\n\\t#endif\\n#endif\";\n\nvar specularmap_fragment = \"float specularStrength;\\n#ifdef USE_SPECULARMAP\\n\\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\\n\\tspecularStrength = texelSpecular.r;\\n#else\\n\\tspecularStrength = 1.0;\\n#endif\";\n\nvar specularmap_pars_fragment = \"#ifdef USE_SPECULARMAP\\n\\tuniform sampler2D specularMap;\\n#endif\";\n\nvar tonemapping_fragment = \"#if defined( TONE_MAPPING )\\n\\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\\n#endif\";\n\nvar tonemapping_pars_fragment = \"#ifndef saturate\\n#define saturate( a ) clamp( a, 0.0, 1.0 )\\n#endif\\nuniform float toneMappingExposure;\\nvec3 LinearToneMapping( vec3 color ) {\\n\\treturn saturate( toneMappingExposure * color );\\n}\\nvec3 ReinhardToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\treturn saturate( color / ( vec3( 1.0 ) + color ) );\\n}\\nvec3 OptimizedCineonToneMapping( vec3 color ) {\\n\\tcolor *= toneMappingExposure;\\n\\tcolor = max( vec3( 0.0 ), color - 0.004 );\\n\\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\\n}\\nvec3 RRTAndODTFit( vec3 v ) {\\n\\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\\n\\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\\n\\treturn a / b;\\n}\\nvec3 ACESFilmicToneMapping( vec3 color ) {\\n\\tconst mat3 ACESInputMat = mat3(\\n\\t\\tvec3( 0.59719, 0.07600, 0.02840 ),\\t\\tvec3( 0.35458, 0.90834, 0.13383 ),\\n\\t\\tvec3( 0.04823, 0.01566, 0.83777 )\\n\\t);\\n\\tconst mat3 ACESOutputMat = mat3(\\n\\t\\tvec3(  1.60475, -0.10208, -0.00327 ),\\t\\tvec3( -0.53108,  1.10813, -0.07276 ),\\n\\t\\tvec3( -0.07367, -0.00605,  1.07602 )\\n\\t);\\n\\tcolor *= toneMappingExposure / 0.6;\\n\\tcolor = ACESInputMat * color;\\n\\tcolor = RRTAndODTFit( color );\\n\\tcolor = ACESOutputMat * color;\\n\\treturn saturate( color );\\n}\\nvec3 CustomToneMapping( vec3 color ) { return color; }\";\n\nvar transmission_fragment = \"#ifdef USE_TRANSMISSION\\n\\tmaterial.transmission = transmission;\\n\\tmaterial.transmissionAlpha = 1.0;\\n\\tmaterial.thickness = thickness;\\n\\tmaterial.attenuationDistance = attenuationDistance;\\n\\tmaterial.attenuationColor = attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\\n\\t#endif\\n\\tvec3 pos = vWorldPosition;\\n\\tvec3 v = normalize( cameraPosition - pos );\\n\\tvec3 n = inverseTransformDirection( normal, viewMatrix );\\n\\tvec4 transmitted = getIBLVolumeRefraction(\\n\\t\\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\\n\\t\\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\\n\\t\\tmaterial.attenuationColor, material.attenuationDistance );\\n\\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\\n\\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\\n#endif\";\n\nvar transmission_pars_fragment = \"#ifdef USE_TRANSMISSION\\n\\tuniform float transmission;\\n\\tuniform float thickness;\\n\\tuniform float attenuationDistance;\\n\\tuniform vec3 attenuationColor;\\n\\t#ifdef USE_TRANSMISSIONMAP\\n\\t\\tuniform sampler2D transmissionMap;\\n\\t#endif\\n\\t#ifdef USE_THICKNESSMAP\\n\\t\\tuniform sampler2D thicknessMap;\\n\\t#endif\\n\\tuniform vec2 transmissionSamplerSize;\\n\\tuniform sampler2D transmissionSamplerMap;\\n\\tuniform mat4 modelMatrix;\\n\\tuniform mat4 projectionMatrix;\\n\\tvarying vec3 vWorldPosition;\\n\\tfloat w0( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w1( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\\n\\t}\\n\\tfloat w2( float a ){\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\\n\\t}\\n\\tfloat w3( float a ) {\\n\\t\\treturn ( 1.0 / 6.0 ) * ( a * a * a );\\n\\t}\\n\\tfloat g0( float a ) {\\n\\t\\treturn w0( a ) + w1( a );\\n\\t}\\n\\tfloat g1( float a ) {\\n\\t\\treturn w2( a ) + w3( a );\\n\\t}\\n\\tfloat h0( float a ) {\\n\\t\\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\\n\\t}\\n\\tfloat h1( float a ) {\\n\\t\\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\\n\\t}\\n\\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\\n\\t\\tuv = uv * texelSize.zw + 0.5;\\n\\t\\tvec2 iuv = floor( uv );\\n\\t\\tvec2 fuv = fract( uv );\\n\\t\\tfloat g0x = g0( fuv.x );\\n\\t\\tfloat g1x = g1( fuv.x );\\n\\t\\tfloat h0x = h0( fuv.x );\\n\\t\\tfloat h1x = h1( fuv.x );\\n\\t\\tfloat h0y = h0( fuv.y );\\n\\t\\tfloat h1y = h1( fuv.y );\\n\\t\\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\\n\\t\\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\\n\\t\\t\\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\\n\\t}\\n\\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\\n\\t\\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\\n\\t\\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\\n\\t\\tvec2 fLodSizeInv = 1.0 / fLodSize;\\n\\t\\tvec2 cLodSizeInv = 1.0 / cLodSize;\\n\\t\\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\\n\\t\\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\\n\\t\\treturn mix( fSample, cSample, fract( lod ) );\\n\\t}\\n\\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\\n\\t\\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\\n\\t\\tvec3 modelScale;\\n\\t\\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\\n\\t\\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\\n\\t\\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\\n\\t\\treturn normalize( refractionVector ) * thickness * modelScale;\\n\\t}\\n\\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\\n\\t\\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\\n\\t}\\n\\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\\n\\t\\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\\n\\t\\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\\n\\t}\\n\\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tif ( isinf( attenuationDistance ) ) {\\n\\t\\t\\treturn vec3( 1.0 );\\n\\t\\t} else {\\n\\t\\t\\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\\n\\t\\t\\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\\t\\t\\treturn transmittance;\\n\\t\\t}\\n\\t}\\n\\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\\n\\t\\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\\n\\t\\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\\n\\t\\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\\n\\t\\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\\n\\t\\tvec3 refractedRayExit = position + transmissionRay;\\n\\t\\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\\n\\t\\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\\n\\t\\trefractionCoords += 1.0;\\n\\t\\trefractionCoords /= 2.0;\\n\\t\\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\\n\\t\\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\\n\\t\\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\\n\\t\\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\\n\\t\\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\\n\\t\\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\\n\\t}\\n#endif\";\n\nvar uv_pars_fragment = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\n\nvar uv_pars_vertex = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvarying vec2 vUv;\\n#endif\\n#ifdef USE_MAP\\n\\tuniform mat3 mapTransform;\\n\\tvarying vec2 vMapUv;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tuniform mat3 alphaMapTransform;\\n\\tvarying vec2 vAlphaMapUv;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tuniform mat3 lightMapTransform;\\n\\tvarying vec2 vLightMapUv;\\n#endif\\n#ifdef USE_AOMAP\\n\\tuniform mat3 aoMapTransform;\\n\\tvarying vec2 vAoMapUv;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tuniform mat3 bumpMapTransform;\\n\\tvarying vec2 vBumpMapUv;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tuniform mat3 normalMapTransform;\\n\\tvarying vec2 vNormalMapUv;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tuniform mat3 displacementMapTransform;\\n\\tvarying vec2 vDisplacementMapUv;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tuniform mat3 emissiveMapTransform;\\n\\tvarying vec2 vEmissiveMapUv;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tuniform mat3 metalnessMapTransform;\\n\\tvarying vec2 vMetalnessMapUv;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tuniform mat3 roughnessMapTransform;\\n\\tvarying vec2 vRoughnessMapUv;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tuniform mat3 anisotropyMapTransform;\\n\\tvarying vec2 vAnisotropyMapUv;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tuniform mat3 clearcoatMapTransform;\\n\\tvarying vec2 vClearcoatMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tuniform mat3 clearcoatNormalMapTransform;\\n\\tvarying vec2 vClearcoatNormalMapUv;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tuniform mat3 clearcoatRoughnessMapTransform;\\n\\tvarying vec2 vClearcoatRoughnessMapUv;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tuniform mat3 sheenColorMapTransform;\\n\\tvarying vec2 vSheenColorMapUv;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tuniform mat3 sheenRoughnessMapTransform;\\n\\tvarying vec2 vSheenRoughnessMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tuniform mat3 iridescenceMapTransform;\\n\\tvarying vec2 vIridescenceMapUv;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tuniform mat3 iridescenceThicknessMapTransform;\\n\\tvarying vec2 vIridescenceThicknessMapUv;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tuniform mat3 specularMapTransform;\\n\\tvarying vec2 vSpecularMapUv;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tuniform mat3 specularColorMapTransform;\\n\\tvarying vec2 vSpecularColorMapUv;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tuniform mat3 specularIntensityMapTransform;\\n\\tvarying vec2 vSpecularIntensityMapUv;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tuniform mat3 transmissionMapTransform;\\n\\tvarying vec2 vTransmissionMapUv;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tuniform mat3 thicknessMapTransform;\\n\\tvarying vec2 vThicknessMapUv;\\n#endif\";\n\nvar uv_vertex = \"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\\n\\tvUv = vec3( uv, 1 ).xy;\\n#endif\\n#ifdef USE_MAP\\n\\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ALPHAMAP\\n\\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_LIGHTMAP\\n\\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_AOMAP\\n\\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_BUMPMAP\\n\\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_NORMALMAP\\n\\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_DISPLACEMENTMAP\\n\\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_EMISSIVEMAP\\n\\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_METALNESSMAP\\n\\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ROUGHNESSMAP\\n\\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_ANISOTROPYMAP\\n\\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOATMAP\\n\\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_NORMALMAP\\n\\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\\n\\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCEMAP\\n\\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\\n\\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_COLORMAP\\n\\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULARMAP\\n\\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_COLORMAP\\n\\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_SPECULAR_INTENSITYMAP\\n\\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_TRANSMISSIONMAP\\n\\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\\n#endif\\n#ifdef USE_THICKNESSMAP\\n\\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\\n#endif\";\n\nvar worldpos_vertex = \"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\\n\\tvec4 worldPosition = vec4( transformed, 1.0 );\\n\\t#ifdef USE_INSTANCING\\n\\t\\tworldPosition = instanceMatrix * worldPosition;\\n\\t#endif\\n\\tworldPosition = modelMatrix * worldPosition;\\n#endif\";\n\nconst vertex$h = \"varying vec2 vUv;\\nuniform mat3 uvTransform;\\nvoid main() {\\n\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\tgl_Position = vec4( position.xy, 1.0, 1.0 );\\n}\";\n\nconst fragment$h = \"uniform sampler2D t2D;\\nuniform float backgroundIntensity;\\nvarying vec2 vUv;\\nvoid main() {\\n\\tvec4 texColor = texture2D( t2D, vUv );\\n\\t#ifdef DECODE_VIDEO_TEXTURE\\n\\t\\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$g = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$g = \"#ifdef ENVMAP_TYPE_CUBE\\n\\tuniform samplerCube envMap;\\n#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\tuniform sampler2D envMap;\\n#endif\\nuniform float flipEnvMap;\\nuniform float backgroundBlurriness;\\nuniform float backgroundIntensity;\\nvarying vec3 vWorldDirection;\\n#include <cube_uv_reflection_fragment>\\nvoid main() {\\n\\t#ifdef ENVMAP_TYPE_CUBE\\n\\t\\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\\n\\t#elif defined( ENVMAP_TYPE_CUBE_UV )\\n\\t\\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\\n\\t#else\\n\\t\\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\t#endif\\n\\ttexColor.rgb *= backgroundIntensity;\\n\\tgl_FragColor = texColor;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$f = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n\\tgl_Position.z = gl_Position.w;\\n}\";\n\nconst fragment$f = \"uniform samplerCube tCube;\\nuniform float tFlip;\\nuniform float opacity;\\nvarying vec3 vWorldDirection;\\nvoid main() {\\n\\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\\n\\tgl_FragColor = texColor;\\n\\tgl_FragColor.a *= opacity;\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$e = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvHighPrecisionZW = gl_Position.zw;\\n}\";\n\nconst fragment$e = \"#if DEPTH_PACKING == 3200\\n\\tuniform float opacity;\\n#endif\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvarying vec2 vHighPrecisionZW;\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tdiffuseColor.a = opacity;\\n\\t#endif\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\\n\\t#if DEPTH_PACKING == 3200\\n\\t\\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\\n\\t#elif DEPTH_PACKING == 3201\\n\\t\\tgl_FragColor = packDepthToRGBA( fragCoordZ );\\n\\t#endif\\n}\";\n\nconst vertex$d = \"#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#ifdef USE_DISPLACEMENTMAP\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvWorldPosition = worldPosition.xyz;\\n}\";\n\nconst fragment$d = \"#define DISTANCE\\nuniform vec3 referencePosition;\\nuniform float nearDistance;\\nuniform float farDistance;\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main () {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( 1.0 );\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\tfloat dist = length( vWorldPosition - referencePosition );\\n\\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\\n\\tdist = saturate( dist );\\n\\tgl_FragColor = packDepthToRGBA( dist );\\n}\";\n\nconst vertex$c = \"varying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvWorldDirection = transformDirection( position, modelMatrix );\\n\\t#include <begin_vertex>\\n\\t#include <project_vertex>\\n}\";\n\nconst fragment$c = \"uniform sampler2D tEquirect;\\nvarying vec3 vWorldDirection;\\n#include <common>\\nvoid main() {\\n\\tvec3 direction = normalize( vWorldDirection );\\n\\tvec2 sampleUV = equirectUv( direction );\\n\\tgl_FragColor = texture2D( tEquirect, sampleUV );\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n}\";\n\nconst vertex$b = \"uniform float scale;\\nattribute float lineDistance;\\nvarying float vLineDistance;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\tvLineDistance = scale * lineDistance;\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$b = \"uniform vec3 diffuse;\\nuniform float opacity;\\nuniform float dashSize;\\nuniform float totalSize;\\nvarying float vLineDistance;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\\n\\t\\tdiscard;\\n\\t}\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$a = \"#include <common>\\n#include <uv_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\\n\\t\\t#include <beginnormal_vertex>\\n\\t\\t#include <morphnormal_vertex>\\n\\t\\t#include <skinbase_vertex>\\n\\t\\t#include <skinnormal_vertex>\\n\\t\\t#include <defaultnormal_vertex>\\n\\t#endif\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$a = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#ifndef FLAT_SHADED\\n\\tvarying vec3 vNormal;\\n#endif\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\t#ifdef USE_LIGHTMAP\\n\\t\\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\\n\\t\\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\\n\\t#else\\n\\t\\treflectedLight.indirectDiffuse += vec3( 1.0 );\\n\\t#endif\\n\\t#include <aomap_fragment>\\n\\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\\n\\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$9 = \"#define LAMBERT\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$9 = \"#define LAMBERT\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_lambert_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_lambert_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$8 = \"#define MATCAP\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <color_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n}\";\n\nconst fragment$8 = \"#define MATCAP\\nuniform vec3 diffuse;\\nuniform float opacity;\\nuniform sampler2D matcap;\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tvec3 viewDir = normalize( vViewPosition );\\n\\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\\n\\tvec3 y = cross( viewDir, x );\\n\\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\\n\\t#ifdef USE_MATCAP\\n\\t\\tvec4 matcapColor = texture2D( matcap, uv );\\n\\t#else\\n\\t\\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\\n\\t#endif\\n\\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$7 = \"#define NORMAL\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvViewPosition = - mvPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$7 = \"#define NORMAL\\nuniform float opacity;\\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\\n\\tvarying vec3 vViewPosition;\\n#endif\\n#include <packing>\\n#include <uv_pars_fragment>\\n#include <normal_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\\n\\t#ifdef OPAQUE\\n\\t\\tgl_FragColor.a = 1.0;\\n\\t#endif\\n}\";\n\nconst vertex$6 = \"#define PHONG\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <envmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <envmap_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$6 = \"#define PHONG\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform vec3 specular;\\nuniform float shininess;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_phong_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <specularmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <specularmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_phong_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\\n\\t#include <envmap_fragment>\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$5 = \"#define STANDARD\\nvarying vec3 vViewPosition;\\n#ifdef USE_TRANSMISSION\\n\\tvarying vec3 vWorldPosition;\\n#endif\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n#ifdef USE_TRANSMISSION\\n\\tvWorldPosition = worldPosition.xyz;\\n#endif\\n}\";\n\nconst fragment$5 = \"#define STANDARD\\n#ifdef PHYSICAL\\n\\t#define IOR\\n\\t#define USE_SPECULAR\\n#endif\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float roughness;\\nuniform float metalness;\\nuniform float opacity;\\n#ifdef IOR\\n\\tuniform float ior;\\n#endif\\n#ifdef USE_SPECULAR\\n\\tuniform float specularIntensity;\\n\\tuniform vec3 specularColor;\\n\\t#ifdef USE_SPECULAR_COLORMAP\\n\\t\\tuniform sampler2D specularColorMap;\\n\\t#endif\\n\\t#ifdef USE_SPECULAR_INTENSITYMAP\\n\\t\\tuniform sampler2D specularIntensityMap;\\n\\t#endif\\n#endif\\n#ifdef USE_CLEARCOAT\\n\\tuniform float clearcoat;\\n\\tuniform float clearcoatRoughness;\\n#endif\\n#ifdef USE_IRIDESCENCE\\n\\tuniform float iridescence;\\n\\tuniform float iridescenceIOR;\\n\\tuniform float iridescenceThicknessMinimum;\\n\\tuniform float iridescenceThicknessMaximum;\\n#endif\\n#ifdef USE_SHEEN\\n\\tuniform vec3 sheenColor;\\n\\tuniform float sheenRoughness;\\n\\t#ifdef USE_SHEEN_COLORMAP\\n\\t\\tuniform sampler2D sheenColorMap;\\n\\t#endif\\n\\t#ifdef USE_SHEEN_ROUGHNESSMAP\\n\\t\\tuniform sampler2D sheenRoughnessMap;\\n\\t#endif\\n#endif\\n#ifdef USE_ANISOTROPY\\n\\tuniform vec2 anisotropyVector;\\n\\t#ifdef USE_ANISOTROPYMAP\\n\\t\\tuniform sampler2D anisotropyMap;\\n\\t#endif\\n#endif\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <iridescence_fragment>\\n#include <cube_uv_reflection_fragment>\\n#include <envmap_common_pars_fragment>\\n#include <envmap_physical_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_physical_pars_fragment>\\n#include <transmission_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <clearcoat_pars_fragment>\\n#include <iridescence_pars_fragment>\\n#include <roughnessmap_pars_fragment>\\n#include <metalnessmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <roughnessmap_fragment>\\n\\t#include <metalnessmap_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <clearcoat_normal_fragment_begin>\\n\\t#include <clearcoat_normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_physical_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\\n\\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\\n\\t#include <transmission_fragment>\\n\\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\\n\\t#ifdef USE_SHEEN\\n\\t\\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\\n\\t\\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\\n\\t#endif\\n\\t#ifdef USE_CLEARCOAT\\n\\t\\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\\n\\t\\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\\n\\t\\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\\n\\t#endif\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$4 = \"#define TOON\\nvarying vec3 vViewPosition;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <displacementmap_pars_vertex>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <normal_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <shadowmap_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <normal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <displacementmap_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\tvViewPosition = - mvPosition.xyz;\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$4 = \"#define TOON\\nuniform vec3 diffuse;\\nuniform vec3 emissive;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <dithering_pars_fragment>\\n#include <color_pars_fragment>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <aomap_pars_fragment>\\n#include <lightmap_pars_fragment>\\n#include <emissivemap_pars_fragment>\\n#include <gradientmap_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <normal_pars_fragment>\\n#include <lights_toon_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <bumpmap_pars_fragment>\\n#include <normalmap_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\\n\\tvec3 totalEmissiveRadiance = emissive;\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\t#include <normal_fragment_begin>\\n\\t#include <normal_fragment_maps>\\n\\t#include <emissivemap_fragment>\\n\\t#include <lights_toon_fragment>\\n\\t#include <lights_fragment_begin>\\n\\t#include <lights_fragment_maps>\\n\\t#include <lights_fragment_end>\\n\\t#include <aomap_fragment>\\n\\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n\\t#include <dithering_fragment>\\n}\";\n\nconst vertex$3 = \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <color_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\n#ifdef USE_POINTS_UV\\n\\tvarying vec2 vUv;\\n\\tuniform mat3 uvTransform;\\n#endif\\nvoid main() {\\n\\t#ifdef USE_POINTS_UV\\n\\t\\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\\n\\t#endif\\n\\t#include <color_vertex>\\n\\t#include <morphcolor_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <project_vertex>\\n\\tgl_PointSize = size;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$3 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <color_pars_fragment>\\n#include <map_particle_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_particle_fragment>\\n\\t#include <color_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n\\t#include <premultiplied_alpha_fragment>\\n}\";\n\nconst vertex$2 = \"#include <common>\\n#include <fog_pars_vertex>\\n#include <morphtarget_pars_vertex>\\n#include <skinning_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <shadowmap_pars_vertex>\\nvoid main() {\\n\\t#include <beginnormal_vertex>\\n\\t#include <morphnormal_vertex>\\n\\t#include <skinbase_vertex>\\n\\t#include <skinnormal_vertex>\\n\\t#include <defaultnormal_vertex>\\n\\t#include <begin_vertex>\\n\\t#include <morphtarget_vertex>\\n\\t#include <skinning_vertex>\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <shadowmap_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$2 = \"uniform vec3 color;\\nuniform float opacity;\\n#include <common>\\n#include <packing>\\n#include <fog_pars_fragment>\\n#include <bsdfs>\\n#include <lights_pars_begin>\\n#include <logdepthbuf_pars_fragment>\\n#include <shadowmap_pars_fragment>\\n#include <shadowmask_pars_fragment>\\nvoid main() {\\n\\t#include <logdepthbuf_fragment>\\n\\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst vertex$1 = \"uniform float rotation;\\nuniform vec2 center;\\n#include <common>\\n#include <uv_pars_vertex>\\n#include <fog_pars_vertex>\\n#include <logdepthbuf_pars_vertex>\\n#include <clipping_planes_pars_vertex>\\nvoid main() {\\n\\t#include <uv_vertex>\\n\\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\\n\\tvec2 scale;\\n\\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\\n\\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\\n\\t#ifndef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\\n\\t\\tif ( isPerspective ) scale *= - mvPosition.z;\\n\\t#endif\\n\\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\\n\\tvec2 rotatedPosition;\\n\\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\\n\\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\\n\\tmvPosition.xy += rotatedPosition;\\n\\tgl_Position = projectionMatrix * mvPosition;\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\t#include <fog_vertex>\\n}\";\n\nconst fragment$1 = \"uniform vec3 diffuse;\\nuniform float opacity;\\n#include <common>\\n#include <uv_pars_fragment>\\n#include <map_pars_fragment>\\n#include <alphamap_pars_fragment>\\n#include <alphatest_pars_fragment>\\n#include <alphahash_pars_fragment>\\n#include <fog_pars_fragment>\\n#include <logdepthbuf_pars_fragment>\\n#include <clipping_planes_pars_fragment>\\nvoid main() {\\n\\t#include <clipping_planes_fragment>\\n\\tvec3 outgoingLight = vec3( 0.0 );\\n\\tvec4 diffuseColor = vec4( diffuse, opacity );\\n\\t#include <logdepthbuf_fragment>\\n\\t#include <map_fragment>\\n\\t#include <alphamap_fragment>\\n\\t#include <alphatest_fragment>\\n\\t#include <alphahash_fragment>\\n\\toutgoingLight = diffuseColor.rgb;\\n\\t#include <opaque_fragment>\\n\\t#include <tonemapping_fragment>\\n\\t#include <colorspace_fragment>\\n\\t#include <fog_fragment>\\n}\";\n\nconst ShaderChunk = {\n\talphahash_fragment: alphahash_fragment,\n\talphahash_pars_fragment: alphahash_pars_fragment,\n\talphamap_fragment: alphamap_fragment,\n\talphamap_pars_fragment: alphamap_pars_fragment,\n\talphatest_fragment: alphatest_fragment,\n\talphatest_pars_fragment: alphatest_pars_fragment,\n\taomap_fragment: aomap_fragment,\n\taomap_pars_fragment: aomap_pars_fragment,\n\tbegin_vertex: begin_vertex,\n\tbeginnormal_vertex: beginnormal_vertex,\n\tbsdfs: bsdfs,\n\tiridescence_fragment: iridescence_fragment,\n\tbumpmap_pars_fragment: bumpmap_pars_fragment,\n\tclipping_planes_fragment: clipping_planes_fragment,\n\tclipping_planes_pars_fragment: clipping_planes_pars_fragment,\n\tclipping_planes_pars_vertex: clipping_planes_pars_vertex,\n\tclipping_planes_vertex: clipping_planes_vertex,\n\tcolor_fragment: color_fragment,\n\tcolor_pars_fragment: color_pars_fragment,\n\tcolor_pars_vertex: color_pars_vertex,\n\tcolor_vertex: color_vertex,\n\tcommon: common,\n\tcube_uv_reflection_fragment: cube_uv_reflection_fragment,\n\tdefaultnormal_vertex: defaultnormal_vertex,\n\tdisplacementmap_pars_vertex: displacementmap_pars_vertex,\n\tdisplacementmap_vertex: displacementmap_vertex,\n\temissivemap_fragment: emissivemap_fragment,\n\temissivemap_pars_fragment: emissivemap_pars_fragment,\n\tcolorspace_fragment: colorspace_fragment,\n\tcolorspace_pars_fragment: colorspace_pars_fragment,\n\tenvmap_fragment: envmap_fragment,\n\tenvmap_common_pars_fragment: envmap_common_pars_fragment,\n\tenvmap_pars_fragment: envmap_pars_fragment,\n\tenvmap_pars_vertex: envmap_pars_vertex,\n\tenvmap_physical_pars_fragment: envmap_physical_pars_fragment,\n\tenvmap_vertex: envmap_vertex,\n\tfog_vertex: fog_vertex,\n\tfog_pars_vertex: fog_pars_vertex,\n\tfog_fragment: fog_fragment,\n\tfog_pars_fragment: fog_pars_fragment,\n\tgradientmap_pars_fragment: gradientmap_pars_fragment,\n\tlightmap_fragment: lightmap_fragment,\n\tlightmap_pars_fragment: lightmap_pars_fragment,\n\tlights_lambert_fragment: lights_lambert_fragment,\n\tlights_lambert_pars_fragment: lights_lambert_pars_fragment,\n\tlights_pars_begin: lights_pars_begin,\n\tlights_toon_fragment: lights_toon_fragment,\n\tlights_toon_pars_fragment: lights_toon_pars_fragment,\n\tlights_phong_fragment: lights_phong_fragment,\n\tlights_phong_pars_fragment: lights_phong_pars_fragment,\n\tlights_physical_fragment: lights_physical_fragment,\n\tlights_physical_pars_fragment: lights_physical_pars_fragment,\n\tlights_fragment_begin: lights_fragment_begin,\n\tlights_fragment_maps: lights_fragment_maps,\n\tlights_fragment_end: lights_fragment_end,\n\tlogdepthbuf_fragment: logdepthbuf_fragment,\n\tlogdepthbuf_pars_fragment: logdepthbuf_pars_fragment,\n\tlogdepthbuf_pars_vertex: logdepthbuf_pars_vertex,\n\tlogdepthbuf_vertex: logdepthbuf_vertex,\n\tmap_fragment: map_fragment,\n\tmap_pars_fragment: map_pars_fragment,\n\tmap_particle_fragment: map_particle_fragment,\n\tmap_particle_pars_fragment: map_particle_pars_fragment,\n\tmetalnessmap_fragment: metalnessmap_fragment,\n\tmetalnessmap_pars_fragment: metalnessmap_pars_fragment,\n\tmorphcolor_vertex: morphcolor_vertex,\n\tmorphnormal_vertex: morphnormal_vertex,\n\tmorphtarget_pars_vertex: morphtarget_pars_vertex,\n\tmorphtarget_vertex: morphtarget_vertex,\n\tnormal_fragment_begin: normal_fragment_begin,\n\tnormal_fragment_maps: normal_fragment_maps,\n\tnormal_pars_fragment: normal_pars_fragment,\n\tnormal_pars_vertex: normal_pars_vertex,\n\tnormal_vertex: normal_vertex,\n\tnormalmap_pars_fragment: normalmap_pars_fragment,\n\tclearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,\n\tclearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,\n\tclearcoat_pars_fragment: clearcoat_pars_fragment,\n\tiridescence_pars_fragment: iridescence_pars_fragment,\n\topaque_fragment: opaque_fragment,\n\tpacking: packing,\n\tpremultiplied_alpha_fragment: premultiplied_alpha_fragment,\n\tproject_vertex: project_vertex,\n\tdithering_fragment: dithering_fragment,\n\tdithering_pars_fragment: dithering_pars_fragment,\n\troughnessmap_fragment: roughnessmap_fragment,\n\troughnessmap_pars_fragment: roughnessmap_pars_fragment,\n\tshadowmap_pars_fragment: shadowmap_pars_fragment,\n\tshadowmap_pars_vertex: shadowmap_pars_vertex,\n\tshadowmap_vertex: shadowmap_vertex,\n\tshadowmask_pars_fragment: shadowmask_pars_fragment,\n\tskinbase_vertex: skinbase_vertex,\n\tskinning_pars_vertex: skinning_pars_vertex,\n\tskinning_vertex: skinning_vertex,\n\tskinnormal_vertex: skinnormal_vertex,\n\tspecularmap_fragment: specularmap_fragment,\n\tspecularmap_pars_fragment: specularmap_pars_fragment,\n\ttonemapping_fragment: tonemapping_fragment,\n\ttonemapping_pars_fragment: tonemapping_pars_fragment,\n\ttransmission_fragment: transmission_fragment,\n\ttransmission_pars_fragment: transmission_pars_fragment,\n\tuv_pars_fragment: uv_pars_fragment,\n\tuv_pars_vertex: uv_pars_vertex,\n\tuv_vertex: uv_vertex,\n\tworldpos_vertex: worldpos_vertex,\n\n\tbackground_vert: vertex$h,\n\tbackground_frag: fragment$h,\n\tbackgroundCube_vert: vertex$g,\n\tbackgroundCube_frag: fragment$g,\n\tcube_vert: vertex$f,\n\tcube_frag: fragment$f,\n\tdepth_vert: vertex$e,\n\tdepth_frag: fragment$e,\n\tdistanceRGBA_vert: vertex$d,\n\tdistanceRGBA_frag: fragment$d,\n\tequirect_vert: vertex$c,\n\tequirect_frag: fragment$c,\n\tlinedashed_vert: vertex$b,\n\tlinedashed_frag: fragment$b,\n\tmeshbasic_vert: vertex$a,\n\tmeshbasic_frag: fragment$a,\n\tmeshlambert_vert: vertex$9,\n\tmeshlambert_frag: fragment$9,\n\tmeshmatcap_vert: vertex$8,\n\tmeshmatcap_frag: fragment$8,\n\tmeshnormal_vert: vertex$7,\n\tmeshnormal_frag: fragment$7,\n\tmeshphong_vert: vertex$6,\n\tmeshphong_frag: fragment$6,\n\tmeshphysical_vert: vertex$5,\n\tmeshphysical_frag: fragment$5,\n\tmeshtoon_vert: vertex$4,\n\tmeshtoon_frag: fragment$4,\n\tpoints_vert: vertex$3,\n\tpoints_frag: fragment$3,\n\tshadow_vert: vertex$2,\n\tshadow_frag: fragment$2,\n\tsprite_vert: vertex$1,\n\tsprite_frag: fragment$1\n};\n\n/**\n * Uniforms library for shared webgl shaders\n */\n\nconst UniformsLib = {\n\n\tcommon: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\n\t\tmap: { value: null },\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\n\t\talphaTest: { value: 0 }\n\n\t},\n\n\tspecularmap: {\n\n\t\tspecularMap: { value: null },\n\t\tspecularMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tenvmap: {\n\n\t\tenvMap: { value: null },\n\t\tflipEnvMap: { value: - 1 },\n\t\treflectivity: { value: 1.0 }, // basic, lambert, phong\n\t\tior: { value: 1.5 }, // physical\n\t\trefractionRatio: { value: 0.98 }, // basic, lambert, phong\n\n\t},\n\n\taomap: {\n\n\t\taoMap: { value: null },\n\t\taoMapIntensity: { value: 1 },\n\t\taoMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tlightmap: {\n\n\t\tlightMap: { value: null },\n\t\tlightMapIntensity: { value: 1 },\n\t\tlightMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tbumpmap: {\n\n\t\tbumpMap: { value: null },\n\t\tbumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tbumpScale: { value: 1 }\n\n\t},\n\n\tnormalmap: {\n\n\t\tnormalMap: { value: null },\n\t\tnormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tnormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }\n\n\t},\n\n\tdisplacementmap: {\n\n\t\tdisplacementMap: { value: null },\n\t\tdisplacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\tdisplacementScale: { value: 1 },\n\t\tdisplacementBias: { value: 0 }\n\n\t},\n\n\temissivemap: {\n\n\t\temissiveMap: { value: null },\n\t\temissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tmetalnessmap: {\n\n\t\tmetalnessMap: { value: null },\n\t\tmetalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\troughnessmap: {\n\n\t\troughnessMap: { value: null },\n\t\troughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tgradientmap: {\n\n\t\tgradientMap: { value: null }\n\n\t},\n\n\tfog: {\n\n\t\tfogDensity: { value: 0.00025 },\n\t\tfogNear: { value: 1 },\n\t\tfogFar: { value: 2000 },\n\t\tfogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }\n\n\t},\n\n\tlights: {\n\n\t\tambientLightColor: { value: [] },\n\n\t\tlightProbe: { value: [] },\n\n\t\tdirectionalLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tcolor: {}\n\t\t} },\n\n\t\tdirectionalLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tdirectionalShadowMap: { value: [] },\n\t\tdirectionalShadowMatrix: { value: [] },\n\n\t\tspotLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdirection: {},\n\t\t\tdistance: {},\n\t\t\tconeCos: {},\n\t\t\tpenumbraCos: {},\n\t\t\tdecay: {}\n\t\t} },\n\n\t\tspotLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {}\n\t\t} },\n\n\t\tspotLightMap: { value: [] },\n\t\tspotShadowMap: { value: [] },\n\t\tspotLightMatrix: { value: [] },\n\n\t\tpointLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\tdecay: {},\n\t\t\tdistance: {}\n\t\t} },\n\n\t\tpointLightShadows: { value: [], properties: {\n\t\t\tshadowBias: {},\n\t\t\tshadowNormalBias: {},\n\t\t\tshadowRadius: {},\n\t\t\tshadowMapSize: {},\n\t\t\tshadowCameraNear: {},\n\t\t\tshadowCameraFar: {}\n\t\t} },\n\n\t\tpointShadowMap: { value: [] },\n\t\tpointShadowMatrix: { value: [] },\n\n\t\themisphereLights: { value: [], properties: {\n\t\t\tdirection: {},\n\t\t\tskyColor: {},\n\t\t\tgroundColor: {}\n\t\t} },\n\n\t\t// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src\n\t\trectAreaLights: { value: [], properties: {\n\t\t\tcolor: {},\n\t\t\tposition: {},\n\t\t\twidth: {},\n\t\t\theight: {}\n\t\t} },\n\n\t\tltc_1: { value: null },\n\t\tltc_2: { value: null }\n\n\t},\n\n\tpoints: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tsize: { value: 1.0 },\n\t\tscale: { value: 1.0 },\n\t\tmap: { value: null },\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaTest: { value: 0 },\n\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() }\n\n\t},\n\n\tsprite: {\n\n\t\tdiffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },\n\t\topacity: { value: 1.0 },\n\t\tcenter: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },\n\t\trotation: { value: 0.0 },\n\t\tmap: { value: null },\n\t\tmapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaMap: { value: null },\n\t\talphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\talphaTest: { value: 0 }\n\n\t}\n\n};\n\nconst ShaderLib = {\n\n\tbasic: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshbasic_vert,\n\t\tfragmentShader: ShaderChunk.meshbasic_frag\n\n\t},\n\n\tlambert: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshlambert_vert,\n\t\tfragmentShader: ShaderChunk.meshlambert_frag\n\n\t},\n\n\tphong: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.specularmap,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\tspecular: { value: /*@__PURE__*/ new Color( 0x111111 ) },\n\t\t\t\tshininess: { value: 30 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphong_vert,\n\t\tfragmentShader: ShaderChunk.meshphong_frag\n\n\t},\n\n\tstandard: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.envmap,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.roughnessmap,\n\t\t\tUniformsLib.metalnessmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\t\troughness: { value: 1.0 },\n\t\t\t\tmetalness: { value: 0.0 },\n\t\t\t\tenvMapIntensity: { value: 1 } // temporary\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshphysical_vert,\n\t\tfragmentShader: ShaderChunk.meshphysical_frag\n\n\t},\n\n\ttoon: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.aomap,\n\t\t\tUniformsLib.lightmap,\n\t\t\tUniformsLib.emissivemap,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.gradientmap,\n\t\t\tUniformsLib.fog,\n\t\t\tUniformsLib.lights,\n\t\t\t{\n\t\t\t\temissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshtoon_vert,\n\t\tfragmentShader: ShaderChunk.meshtoon_frag\n\n\t},\n\n\tmatcap: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tmatcap: { value: null }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshmatcap_vert,\n\t\tfragmentShader: ShaderChunk.meshmatcap_frag\n\n\t},\n\n\tpoints: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.points,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.points_vert,\n\t\tfragmentShader: ShaderChunk.points_frag\n\n\t},\n\n\tdashed: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tscale: { value: 1 },\n\t\t\t\tdashSize: { value: 1 },\n\t\t\t\ttotalSize: { value: 2 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.linedashed_vert,\n\t\tfragmentShader: ShaderChunk.linedashed_frag\n\n\t},\n\n\tdepth: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.depth_vert,\n\t\tfragmentShader: ShaderChunk.depth_frag\n\n\t},\n\n\tnormal: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.bumpmap,\n\t\t\tUniformsLib.normalmap,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.meshnormal_vert,\n\t\tfragmentShader: ShaderChunk.meshnormal_frag\n\n\t},\n\n\tsprite: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.sprite,\n\t\t\tUniformsLib.fog\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.sprite_vert,\n\t\tfragmentShader: ShaderChunk.sprite_frag\n\n\t},\n\n\tbackground: {\n\n\t\tuniforms: {\n\t\t\tuvTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tt2D: { value: null },\n\t\t\tbackgroundIntensity: { value: 1 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.background_vert,\n\t\tfragmentShader: ShaderChunk.background_frag\n\n\t},\n\n\tbackgroundCube: {\n\n\t\tuniforms: {\n\t\t\tenvMap: { value: null },\n\t\t\tflipEnvMap: { value: - 1 },\n\t\t\tbackgroundBlurriness: { value: 0 },\n\t\t\tbackgroundIntensity: { value: 1 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.backgroundCube_vert,\n\t\tfragmentShader: ShaderChunk.backgroundCube_frag\n\n\t},\n\n\tcube: {\n\n\t\tuniforms: {\n\t\t\ttCube: { value: null },\n\t\t\ttFlip: { value: - 1 },\n\t\t\topacity: { value: 1.0 }\n\t\t},\n\n\t\tvertexShader: ShaderChunk.cube_vert,\n\t\tfragmentShader: ShaderChunk.cube_frag\n\n\t},\n\n\tequirect: {\n\n\t\tuniforms: {\n\t\t\ttEquirect: { value: null },\n\t\t},\n\n\t\tvertexShader: ShaderChunk.equirect_vert,\n\t\tfragmentShader: ShaderChunk.equirect_frag\n\n\t},\n\n\tdistanceRGBA: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.common,\n\t\t\tUniformsLib.displacementmap,\n\t\t\t{\n\t\t\t\treferencePosition: { value: /*@__PURE__*/ new Vector3() },\n\t\t\t\tnearDistance: { value: 1 },\n\t\t\t\tfarDistance: { value: 1000 }\n\t\t\t}\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.distanceRGBA_vert,\n\t\tfragmentShader: ShaderChunk.distanceRGBA_frag\n\n\t},\n\n\tshadow: {\n\n\t\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\t\tUniformsLib.lights,\n\t\t\tUniformsLib.fog,\n\t\t\t{\n\t\t\t\tcolor: { value: /*@__PURE__*/ new Color( 0x00000 ) },\n\t\t\t\topacity: { value: 1.0 }\n\t\t\t},\n\t\t] ),\n\n\t\tvertexShader: ShaderChunk.shadow_vert,\n\t\tfragmentShader: ShaderChunk.shadow_frag\n\n\t}\n\n};\n\nShaderLib.physical = {\n\n\tuniforms: /*@__PURE__*/ mergeUniforms( [\n\t\tShaderLib.standard.uniforms,\n\t\t{\n\t\t\tclearcoat: { value: 0 },\n\t\t\tclearcoatMap: { value: null },\n\t\t\tclearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tclearcoatNormalMap: { value: null },\n\t\t\tclearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tclearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },\n\t\t\tclearcoatRoughness: { value: 0 },\n\t\t\tclearcoatRoughnessMap: { value: null },\n\t\t\tclearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tiridescence: { value: 0 },\n\t\t\tiridescenceMap: { value: null },\n\t\t\tiridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tiridescenceIOR: { value: 1.3 },\n\t\t\tiridescenceThicknessMinimum: { value: 100 },\n\t\t\tiridescenceThicknessMaximum: { value: 400 },\n\t\t\tiridescenceThicknessMap: { value: null },\n\t\t\tiridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tsheen: { value: 0 },\n\t\t\tsheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tsheenColorMap: { value: null },\n\t\t\tsheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tsheenRoughness: { value: 1 },\n\t\t\tsheenRoughnessMap: { value: null },\n\t\t\tsheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\ttransmission: { value: 0 },\n\t\t\ttransmissionMap: { value: null },\n\t\t\ttransmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\ttransmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },\n\t\t\ttransmissionSamplerMap: { value: null },\n\t\t\tthickness: { value: 0 },\n\t\t\tthicknessMap: { value: null },\n\t\t\tthicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tattenuationDistance: { value: 0 },\n\t\t\tattenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },\n\t\t\tspecularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },\n\t\t\tspecularColorMap: { value: null },\n\t\t\tspecularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tspecularIntensity: { value: 1 },\n\t\t\tspecularIntensityMap: { value: null },\n\t\t\tspecularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t\tanisotropyVector: { value: /*@__PURE__*/ new Vector2() },\n\t\t\tanisotropyMap: { value: null },\n\t\t\tanisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },\n\t\t}\n\t] ),\n\n\tvertexShader: ShaderChunk.meshphysical_vert,\n\tfragmentShader: ShaderChunk.meshphysical_frag\n\n};\n\nconst _rgb = { r: 0, b: 0, g: 0 };\n\nfunction WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {\n\n\tconst clearColor = new Color( 0x000000 );\n\tlet clearAlpha = alpha === true ? 0 : 1;\n\n\tlet planeMesh;\n\tlet boxMesh;\n\n\tlet currentBackground = null;\n\tlet currentBackgroundVersion = 0;\n\tlet currentTonemapping = null;\n\n\tfunction render( renderList, scene ) {\n\n\t\tlet forceClear = false;\n\t\tlet background = scene.isScene === true ? scene.background : null;\n\n\t\tif ( background && background.isTexture ) {\n\n\t\t\tconst usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background\n\t\t\tbackground = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );\n\n\t\t}\n\n\t\tif ( background === null ) {\n\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t} else if ( background && background.isColor ) {\n\n\t\t\tsetClear( background, 1 );\n\t\t\tforceClear = true;\n\n\t\t}\n\n\t\tconst environmentBlendMode = renderer.xr.getEnvironmentBlendMode();\n\n\t\tif ( environmentBlendMode === 'additive' ) {\n\n\t\t\tstate.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );\n\n\t\t} else if ( environmentBlendMode === 'alpha-blend' ) {\n\n\t\t\tstate.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );\n\n\t\t}\n\n\t\tif ( renderer.autoClear || forceClear ) {\n\n\t\t\trenderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\n\t\t}\n\n\t\tif ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {\n\n\t\t\tif ( boxMesh === undefined ) {\n\n\t\t\t\tboxMesh = new Mesh(\n\t\t\t\t\tnew BoxGeometry( 1, 1, 1 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundCubeMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.backgroundCube.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.backgroundCube.fragmentShader,\n\t\t\t\t\t\tside: BackSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'normal' );\n\t\t\t\tboxMesh.geometry.deleteAttribute( 'uv' );\n\n\t\t\t\tboxMesh.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\n\n\t\t\t\t};\n\n\t\t\t\t// add \"envMap\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( boxMesh.material, 'envMap', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.envMap.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( boxMesh );\n\n\t\t\t}\n\n\t\t\tboxMesh.material.uniforms.envMap.value = background;\n\t\t\tboxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;\n\t\t\tboxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;\n\t\t\tboxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tboxMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tboxMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tboxMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );\n\n\t\t} else if ( background && background.isTexture ) {\n\n\t\t\tif ( planeMesh === undefined ) {\n\n\t\t\t\tplaneMesh = new Mesh(\n\t\t\t\t\tnew PlaneGeometry( 2, 2 ),\n\t\t\t\t\tnew ShaderMaterial( {\n\t\t\t\t\t\tname: 'BackgroundMaterial',\n\t\t\t\t\t\tuniforms: cloneUniforms( ShaderLib.background.uniforms ),\n\t\t\t\t\t\tvertexShader: ShaderLib.background.vertexShader,\n\t\t\t\t\t\tfragmentShader: ShaderLib.background.fragmentShader,\n\t\t\t\t\t\tside: FrontSide,\n\t\t\t\t\t\tdepthTest: false,\n\t\t\t\t\t\tdepthWrite: false,\n\t\t\t\t\t\tfog: false\n\t\t\t\t\t} )\n\t\t\t\t);\n\n\t\t\t\tplaneMesh.geometry.deleteAttribute( 'normal' );\n\n\t\t\t\t// add \"map\" material property so the renderer can evaluate it like for built-in materials\n\t\t\t\tObject.defineProperty( planeMesh.material, 'map', {\n\n\t\t\t\t\tget: function () {\n\n\t\t\t\t\t\treturn this.uniforms.t2D.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\tobjects.update( planeMesh );\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.t2D.value = background;\n\t\t\tplaneMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;\n\t\t\tplaneMesh.material.toneMapped = ColorManagement.getTransfer( background.colorSpace ) !== SRGBTransfer;\n\n\t\t\tif ( background.matrixAutoUpdate === true ) {\n\n\t\t\t\tbackground.updateMatrix();\n\n\t\t\t}\n\n\t\t\tplaneMesh.material.uniforms.uvTransform.value.copy( background.matrix );\n\n\t\t\tif ( currentBackground !== background ||\n\t\t\t\tcurrentBackgroundVersion !== background.version ||\n\t\t\t\tcurrentTonemapping !== renderer.toneMapping ) {\n\n\t\t\t\tplaneMesh.material.needsUpdate = true;\n\n\t\t\t\tcurrentBackground = background;\n\t\t\t\tcurrentBackgroundVersion = background.version;\n\t\t\t\tcurrentTonemapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t\tplaneMesh.layers.enableAll();\n\n\t\t\t// push to the pre-sorted opaque render list\n\t\t\trenderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );\n\n\t\t}\n\n\t}\n\n\tfunction setClear( color, alpha ) {\n\n\t\tcolor.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );\n\n\t\tstate.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );\n\n\t}\n\n\treturn {\n\n\t\tgetClearColor: function () {\n\n\t\t\treturn clearColor;\n\n\t\t},\n\t\tsetClearColor: function ( color, alpha = 1 ) {\n\n\t\t\tclearColor.set( color );\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\tgetClearAlpha: function () {\n\n\t\t\treturn clearAlpha;\n\n\t\t},\n\t\tsetClearAlpha: function ( alpha ) {\n\n\t\t\tclearAlpha = alpha;\n\t\t\tsetClear( clearColor, clearAlpha );\n\n\t\t},\n\t\trender: render\n\n\t};\n\n}\n\nfunction WebGLBindingStates( gl, extensions, attributes, capabilities ) {\n\n\tconst maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\n\tconst extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );\n\tconst vaoAvailable = capabilities.isWebGL2 || extension !== null;\n\n\tconst bindingStates = {};\n\n\tconst defaultState = createBindingState( null );\n\tlet currentState = defaultState;\n\tlet forceUpdate = false;\n\n\tfunction setup( object, material, program, geometry, index ) {\n\n\t\tlet updateBuffers = false;\n\n\t\tif ( vaoAvailable ) {\n\n\t\t\tconst state = getBindingState( geometry, program, material );\n\n\t\t\tif ( currentState !== state ) {\n\n\t\t\t\tcurrentState = state;\n\t\t\t\tbindVertexArrayObject( currentState.object );\n\n\t\t\t}\n\n\t\t\tupdateBuffers = needsUpdate( object, geometry, program, index );\n\n\t\t\tif ( updateBuffers ) saveCache( object, geometry, program, index );\n\n\t\t} else {\n\n\t\t\tconst wireframe = ( material.wireframe === true );\n\n\t\t\tif ( currentState.geometry !== geometry.id ||\n\t\t\t\tcurrentState.program !== program.id ||\n\t\t\t\tcurrentState.wireframe !== wireframe ) {\n\n\t\t\t\tcurrentState.geometry = geometry.id;\n\t\t\t\tcurrentState.program = program.id;\n\t\t\t\tcurrentState.wireframe = wireframe;\n\n\t\t\t\tupdateBuffers = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( index !== null ) {\n\n\t\t\tattributes.update( index, gl.ELEMENT_ARRAY_BUFFER );\n\n\t\t}\n\n\t\tif ( updateBuffers || forceUpdate ) {\n\n\t\t\tforceUpdate = false;\n\n\t\t\tsetupVertexAttributes( object, material, program, geometry );\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tgl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createVertexArrayObject() {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.createVertexArray();\n\n\t\treturn extension.createVertexArrayOES();\n\n\t}\n\n\tfunction bindVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );\n\n\t\treturn extension.bindVertexArrayOES( vao );\n\n\t}\n\n\tfunction deleteVertexArrayObject( vao ) {\n\n\t\tif ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );\n\n\t\treturn extension.deleteVertexArrayOES( vao );\n\n\t}\n\n\tfunction getBindingState( geometry, program, material ) {\n\n\t\tconst wireframe = ( material.wireframe === true );\n\n\t\tlet programMap = bindingStates[ geometry.id ];\n\n\t\tif ( programMap === undefined ) {\n\n\t\t\tprogramMap = {};\n\t\t\tbindingStates[ geometry.id ] = programMap;\n\n\t\t}\n\n\t\tlet stateMap = programMap[ program.id ];\n\n\t\tif ( stateMap === undefined ) {\n\n\t\t\tstateMap = {};\n\t\t\tprogramMap[ program.id ] = stateMap;\n\n\t\t}\n\n\t\tlet state = stateMap[ wireframe ];\n\n\t\tif ( state === undefined ) {\n\n\t\t\tstate = createBindingState( createVertexArrayObject() );\n\t\t\tstateMap[ wireframe ] = state;\n\n\t\t}\n\n\t\treturn state;\n\n\t}\n\n\tfunction createBindingState( vao ) {\n\n\t\tconst newAttributes = [];\n\t\tconst enabledAttributes = [];\n\t\tconst attributeDivisors = [];\n\n\t\tfor ( let i = 0; i < maxVertexAttributes; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\t\t\tenabledAttributes[ i ] = 0;\n\t\t\tattributeDivisors[ i ] = 0;\n\n\t\t}\n\n\t\treturn {\n\n\t\t\t// for backward compatibility on non-VAO support browser\n\t\t\tgeometry: null,\n\t\t\tprogram: null,\n\t\t\twireframe: false,\n\n\t\t\tnewAttributes: newAttributes,\n\t\t\tenabledAttributes: enabledAttributes,\n\t\t\tattributeDivisors: attributeDivisors,\n\t\t\tobject: vao,\n\t\t\tattributes: {},\n\t\t\tindex: null\n\n\t\t};\n\n\t}\n\n\tfunction needsUpdate( object, geometry, program, index ) {\n\n\t\tconst cachedAttributes = currentState.attributes;\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tconst cachedAttribute = cachedAttributes[ name ];\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( cachedAttribute === undefined ) return true;\n\n\t\t\t\tif ( cachedAttribute.attribute !== geometryAttribute ) return true;\n\n\t\t\t\tif ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( currentState.attributesNum !== attributesNum ) return true;\n\n\t\tif ( currentState.index !== index ) return true;\n\n\t\treturn false;\n\n\t}\n\n\tfunction saveCache( object, geometry, program, index ) {\n\n\t\tconst cache = {};\n\t\tconst attributes = geometry.attributes;\n\t\tlet attributesNum = 0;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet attribute = attributes[ name ];\n\n\t\t\t\tif ( attribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tconst data = {};\n\t\t\t\tdata.attribute = attribute;\n\n\t\t\t\tif ( attribute && attribute.data ) {\n\n\t\t\t\t\tdata.data = attribute.data;\n\n\t\t\t\t}\n\n\t\t\t\tcache[ name ] = data;\n\n\t\t\t\tattributesNum ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tcurrentState.attributes = cache;\n\t\tcurrentState.attributesNum = attributesNum;\n\n\t\tcurrentState.index = index;\n\n\t}\n\n\tfunction initAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\n\t\tfor ( let i = 0, il = newAttributes.length; i < il; i ++ ) {\n\n\t\t\tnewAttributes[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\tfunction enableAttribute( attribute ) {\n\n\t\tenableAttributeAndDivisor( attribute, 0 );\n\n\t}\n\n\tfunction enableAttributeAndDivisor( attribute, meshPerAttribute ) {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\t\tconst attributeDivisors = currentState.attributeDivisors;\n\n\t\tnewAttributes[ attribute ] = 1;\n\n\t\tif ( enabledAttributes[ attribute ] === 0 ) {\n\n\t\t\tgl.enableVertexAttribArray( attribute );\n\t\t\tenabledAttributes[ attribute ] = 1;\n\n\t\t}\n\n\t\tif ( attributeDivisors[ attribute ] !== meshPerAttribute ) {\n\n\t\t\tconst extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );\n\n\t\t\textension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );\n\t\t\tattributeDivisors[ attribute ] = meshPerAttribute;\n\n\t\t}\n\n\t}\n\n\tfunction disableUnusedAttributes() {\n\n\t\tconst newAttributes = currentState.newAttributes;\n\t\tconst enabledAttributes = currentState.enabledAttributes;\n\n\t\tfor ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {\n\n\t\t\tif ( enabledAttributes[ i ] !== newAttributes[ i ] ) {\n\n\t\t\t\tgl.disableVertexAttribArray( i );\n\t\t\t\tenabledAttributes[ i ] = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {\n\n\t\tif ( integer === true ) {\n\n\t\t\tgl.vertexAttribIPointer( index, size, type, stride, offset );\n\n\t\t} else {\n\n\t\t\tgl.vertexAttribPointer( index, size, type, normalized, stride, offset );\n\n\t\t}\n\n\t}\n\n\tfunction setupVertexAttributes( object, material, program, geometry ) {\n\n\t\tif ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {\n\n\t\t\tif ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;\n\n\t\t}\n\n\t\tinitAttributes();\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\tconst programAttributes = program.getAttributes();\n\n\t\tconst materialDefaultAttributeValues = material.defaultAttributeValues;\n\n\t\tfor ( const name in programAttributes ) {\n\n\t\t\tconst programAttribute = programAttributes[ name ];\n\n\t\t\tif ( programAttribute.location >= 0 ) {\n\n\t\t\t\tlet geometryAttribute = geometryAttributes[ name ];\n\n\t\t\t\tif ( geometryAttribute === undefined ) {\n\n\t\t\t\t\tif ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;\n\t\t\t\t\tif ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometryAttribute !== undefined ) {\n\n\t\t\t\t\tconst normalized = geometryAttribute.normalized;\n\t\t\t\t\tconst size = geometryAttribute.itemSize;\n\n\t\t\t\t\tconst attribute = attributes.get( geometryAttribute );\n\n\t\t\t\t\t// TODO Attribute may not be available on context restore\n\n\t\t\t\t\tif ( attribute === undefined ) continue;\n\n\t\t\t\t\tconst buffer = attribute.buffer;\n\t\t\t\t\tconst type = attribute.type;\n\t\t\t\t\tconst bytesPerElement = attribute.bytesPerElement;\n\n\t\t\t\t\t// check for integer attributes (WebGL 2 only)\n\n\t\t\t\t\tconst integer = ( capabilities.isWebGL2 === true && ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType ) );\n\n\t\t\t\t\tif ( geometryAttribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst data = geometryAttribute.data;\n\t\t\t\t\t\tconst stride = data.stride;\n\t\t\t\t\t\tconst offset = geometryAttribute.offset;\n\n\t\t\t\t\t\tif ( data.isInstancedInterleavedBuffer ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = data.meshPerAttribute * data.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tstride * bytesPerElement,\n\t\t\t\t\t\t\t\t( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,\n\t\t\t\t\t\t\t\tinteger\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( geometryAttribute.isInstancedBufferAttribute ) {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {\n\n\t\t\t\t\t\t\t\tgeometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\t\tenableAttribute( programAttribute.location + i );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgl.bindBuffer( gl.ARRAY_BUFFER, buffer );\n\n\t\t\t\t\t\tfor ( let i = 0; i < programAttribute.locationSize; i ++ ) {\n\n\t\t\t\t\t\t\tvertexAttribPointer(\n\t\t\t\t\t\t\t\tprogramAttribute.location + i,\n\t\t\t\t\t\t\t\tsize / programAttribute.locationSize,\n\t\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\t\tnormalized,\n\t\t\t\t\t\t\t\tsize * bytesPerElement,\n\t\t\t\t\t\t\t\t( size / programAttribute.locationSize ) * i * bytesPerElement,\n\t\t\t\t\t\t\t\tinteger\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( materialDefaultAttributeValues !== undefined ) {\n\n\t\t\t\t\tconst value = materialDefaultAttributeValues[ name ];\n\n\t\t\t\t\tif ( value !== undefined ) {\n\n\t\t\t\t\t\tswitch ( value.length ) {\n\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tgl.vertexAttrib2fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tgl.vertexAttrib3fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\tgl.vertexAttrib4fv( programAttribute.location, value );\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tgl.vertexAttrib1fv( programAttribute.location, value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tdisableUnusedAttributes();\n\n\t}\n\n\tfunction dispose() {\n\n\t\treset();\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tfor ( const programId in programMap ) {\n\n\t\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t\t}\n\n\t\t\t\tdelete programMap[ programId ];\n\n\t\t\t}\n\n\t\t\tdelete bindingStates[ geometryId ];\n\n\t\t}\n\n\t}\n\n\tfunction releaseStatesOfGeometry( geometry ) {\n\n\t\tif ( bindingStates[ geometry.id ] === undefined ) return;\n\n\t\tconst programMap = bindingStates[ geometry.id ];\n\n\t\tfor ( const programId in programMap ) {\n\n\t\t\tconst stateMap = programMap[ programId ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ programId ];\n\n\t\t}\n\n\t\tdelete bindingStates[ geometry.id ];\n\n\t}\n\n\tfunction releaseStatesOfProgram( program ) {\n\n\t\tfor ( const geometryId in bindingStates ) {\n\n\t\t\tconst programMap = bindingStates[ geometryId ];\n\n\t\t\tif ( programMap[ program.id ] === undefined ) continue;\n\n\t\t\tconst stateMap = programMap[ program.id ];\n\n\t\t\tfor ( const wireframe in stateMap ) {\n\n\t\t\t\tdeleteVertexArrayObject( stateMap[ wireframe ].object );\n\n\t\t\t\tdelete stateMap[ wireframe ];\n\n\t\t\t}\n\n\t\t\tdelete programMap[ program.id ];\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\tresetDefaultState();\n\t\tforceUpdate = true;\n\n\t\tif ( currentState === defaultState ) return;\n\n\t\tcurrentState = defaultState;\n\t\tbindVertexArrayObject( currentState.object );\n\n\t}\n\n\t// for backward-compatibility\n\n\tfunction resetDefaultState() {\n\n\t\tdefaultState.geometry = null;\n\t\tdefaultState.program = null;\n\t\tdefaultState.wireframe = false;\n\n\t}\n\n\treturn {\n\n\t\tsetup: setup,\n\t\treset: reset,\n\t\tresetDefaultState: resetDefaultState,\n\t\tdispose: dispose,\n\t\treleaseStatesOfGeometry: releaseStatesOfGeometry,\n\t\treleaseStatesOfProgram: releaseStatesOfProgram,\n\n\t\tinitAttributes: initAttributes,\n\t\tenableAttribute: enableAttribute,\n\t\tdisableUnusedAttributes: disableUnusedAttributes\n\n\t};\n\n}\n\nfunction WebGLBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawArrays( mode, start, count );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawArraysInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawArraysInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, start, count, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLCapabilities( gl, extensions, parameters ) {\n\n\tlet maxAnisotropy;\n\n\tfunction getMaxAnisotropy() {\n\n\t\tif ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tmaxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n\t\t} else {\n\n\t\t\tmaxAnisotropy = 0;\n\n\t\t}\n\n\t\treturn maxAnisotropy;\n\n\t}\n\n\tfunction getMaxPrecision( precision ) {\n\n\t\tif ( precision === 'highp' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'highp';\n\n\t\t\t}\n\n\t\t\tprecision = 'mediump';\n\n\t\t}\n\n\t\tif ( precision === 'mediump' ) {\n\n\t\t\tif ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n\t\t\t\tgl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n\t\t\t\treturn 'mediump';\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn 'lowp';\n\n\t}\n\n\tconst isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n\tlet precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n\tconst maxPrecision = getMaxPrecision( precision );\n\n\tif ( maxPrecision !== precision ) {\n\n\t\tconsole.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n\t\tprecision = maxPrecision;\n\n\t}\n\n\tconst drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n\tconst logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n\tconst maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n\tconst maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n\tconst maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n\tconst maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n\tconst maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n\tconst maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n\tconst maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n\tconst maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n\tconst vertexTextures = maxVertexTextures > 0;\n\tconst floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n\tconst floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n\tconst maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n\treturn {\n\n\t\tisWebGL2: isWebGL2,\n\n\t\tdrawBuffers: drawBuffers,\n\n\t\tgetMaxAnisotropy: getMaxAnisotropy,\n\t\tgetMaxPrecision: getMaxPrecision,\n\n\t\tprecision: precision,\n\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\tmaxTextures: maxTextures,\n\t\tmaxVertexTextures: maxVertexTextures,\n\t\tmaxTextureSize: maxTextureSize,\n\t\tmaxCubemapSize: maxCubemapSize,\n\n\t\tmaxAttributes: maxAttributes,\n\t\tmaxVertexUniforms: maxVertexUniforms,\n\t\tmaxVaryings: maxVaryings,\n\t\tmaxFragmentUniforms: maxFragmentUniforms,\n\n\t\tvertexTextures: vertexTextures,\n\t\tfloatFragmentTextures: floatFragmentTextures,\n\t\tfloatVertexTextures: floatVertexTextures,\n\n\t\tmaxSamples: maxSamples\n\n\t};\n\n}\n\nfunction WebGLClipping( properties ) {\n\n\tconst scope = this;\n\n\tlet globalState = null,\n\t\tnumGlobalPlanes = 0,\n\t\tlocalClippingEnabled = false,\n\t\trenderingShadows = false;\n\n\tconst plane = new Plane(),\n\t\tviewNormalMatrix = new Matrix3(),\n\n\t\tuniform = { value: null, needsUpdate: false };\n\n\tthis.uniform = uniform;\n\tthis.numPlanes = 0;\n\tthis.numIntersection = 0;\n\n\tthis.init = function ( planes, enableLocalClipping ) {\n\n\t\tconst enabled =\n\t\t\tplanes.length !== 0 ||\n\t\t\tenableLocalClipping ||\n\t\t\t// enable state of previous frame - the clipping code has to\n\t\t\t// run another frame in order to reset the state:\n\t\t\tnumGlobalPlanes !== 0 ||\n\t\t\tlocalClippingEnabled;\n\n\t\tlocalClippingEnabled = enableLocalClipping;\n\n\t\tnumGlobalPlanes = planes.length;\n\n\t\treturn enabled;\n\n\t};\n\n\tthis.beginShadows = function () {\n\n\t\trenderingShadows = true;\n\t\tprojectPlanes( null );\n\n\t};\n\n\tthis.endShadows = function () {\n\n\t\trenderingShadows = false;\n\n\t};\n\n\tthis.setGlobalState = function ( planes, camera ) {\n\n\t\tglobalState = projectPlanes( planes, camera, 0 );\n\n\t};\n\n\tthis.setState = function ( material, camera, useCache ) {\n\n\t\tconst planes = material.clippingPlanes,\n\t\t\tclipIntersection = material.clipIntersection,\n\t\t\tclipShadows = material.clipShadows;\n\n\t\tconst materialProperties = properties.get( material );\n\n\t\tif ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {\n\n\t\t\t// there's no local clipping\n\n\t\t\tif ( renderingShadows ) {\n\n\t\t\t\t// there's no global clipping\n\n\t\t\t\tprojectPlanes( null );\n\n\t\t\t} else {\n\n\t\t\t\tresetGlobalState();\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst nGlobal = renderingShadows ? 0 : numGlobalPlanes,\n\t\t\t\tlGlobal = nGlobal * 4;\n\n\t\t\tlet dstArray = materialProperties.clippingState || null;\n\n\t\t\tuniform.value = dstArray; // ensure unique state\n\n\t\t\tdstArray = projectPlanes( planes, camera, lGlobal, useCache );\n\n\t\t\tfor ( let i = 0; i !== lGlobal; ++ i ) {\n\n\t\t\t\tdstArray[ i ] = globalState[ i ];\n\n\t\t\t}\n\n\t\t\tmaterialProperties.clippingState = dstArray;\n\t\t\tthis.numIntersection = clipIntersection ? this.numPlanes : 0;\n\t\t\tthis.numPlanes += nGlobal;\n\n\t\t}\n\n\n\t};\n\n\tfunction resetGlobalState() {\n\n\t\tif ( uniform.value !== globalState ) {\n\n\t\t\tuniform.value = globalState;\n\t\t\tuniform.needsUpdate = numGlobalPlanes > 0;\n\n\t\t}\n\n\t\tscope.numPlanes = numGlobalPlanes;\n\t\tscope.numIntersection = 0;\n\n\t}\n\n\tfunction projectPlanes( planes, camera, dstOffset, skipTransform ) {\n\n\t\tconst nPlanes = planes !== null ? planes.length : 0;\n\t\tlet dstArray = null;\n\n\t\tif ( nPlanes !== 0 ) {\n\n\t\t\tdstArray = uniform.value;\n\n\t\t\tif ( skipTransform !== true || dstArray === null ) {\n\n\t\t\t\tconst flatSize = dstOffset + nPlanes * 4,\n\t\t\t\t\tviewMatrix = camera.matrixWorldInverse;\n\n\t\t\t\tviewNormalMatrix.getNormalMatrix( viewMatrix );\n\n\t\t\t\tif ( dstArray === null || dstArray.length < flatSize ) {\n\n\t\t\t\t\tdstArray = new Float32Array( flatSize );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {\n\n\t\t\t\t\tplane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );\n\n\t\t\t\t\tplane.normal.toArray( dstArray, i4 );\n\t\t\t\t\tdstArray[ i4 + 3 ] = plane.constant;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tuniform.value = dstArray;\n\t\t\tuniform.needsUpdate = true;\n\n\t\t}\n\n\t\tscope.numPlanes = nPlanes;\n\t\tscope.numIntersection = 0;\n\n\t\treturn dstArray;\n\n\t}\n\n}\n\nfunction WebGLCubeMaps( renderer ) {\n\n\tlet cubemaps = new WeakMap();\n\n\tfunction mapTextureMapping( texture, mapping ) {\n\n\t\tif ( mapping === EquirectangularReflectionMapping ) {\n\n\t\t\ttexture.mapping = CubeReflectionMapping;\n\n\t\t} else if ( mapping === EquirectangularRefractionMapping ) {\n\n\t\t\ttexture.mapping = CubeRefractionMapping;\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tif ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {\n\n\t\t\t\tif ( cubemaps.has( texture ) ) {\n\n\t\t\t\t\tconst cubemap = cubemaps.get( texture ).texture;\n\t\t\t\t\treturn mapTextureMapping( cubemap, texture.mapping );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\tif ( image && image.height > 0 ) {\n\n\t\t\t\t\t\tconst renderTarget = new WebGLCubeRenderTarget( image.height / 2 );\n\t\t\t\t\t\trenderTarget.fromEquirectangularTexture( renderer, texture );\n\t\t\t\t\t\tcubemaps.set( texture, renderTarget );\n\n\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\treturn mapTextureMapping( renderTarget.texture, texture.mapping );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemap = cubemaps.get( texture );\n\n\t\tif ( cubemap !== undefined ) {\n\n\t\t\tcubemaps.delete( texture );\n\t\t\tcubemap.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubemaps = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass OrthographicCamera extends Camera {\n\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\n\n\t\tsuper();\n\n\t\tthis.isOrthographicCamera = true;\n\n\t\tthis.type = 'OrthographicCamera';\n\n\t\tthis.zoom = 1;\n\t\tthis.view = null;\n\n\t\tthis.left = left;\n\t\tthis.right = right;\n\t\tthis.top = top;\n\t\tthis.bottom = bottom;\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.left = source.left;\n\t\tthis.right = source.right;\n\t\tthis.top = source.top;\n\t\tthis.bottom = source.bottom;\n\t\tthis.near = source.near;\n\t\tthis.far = source.far;\n\n\t\tthis.zoom = source.zoom;\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\n\n\t\treturn this;\n\n\t}\n\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\n\n\t\tif ( this.view === null ) {\n\n\t\t\tthis.view = {\n\t\t\t\tenabled: true,\n\t\t\t\tfullWidth: 1,\n\t\t\t\tfullHeight: 1,\n\t\t\t\toffsetX: 0,\n\t\t\t\toffsetY: 0,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1\n\t\t\t};\n\n\t\t}\n\n\t\tthis.view.enabled = true;\n\t\tthis.view.fullWidth = fullWidth;\n\t\tthis.view.fullHeight = fullHeight;\n\t\tthis.view.offsetX = x;\n\t\tthis.view.offsetY = y;\n\t\tthis.view.width = width;\n\t\tthis.view.height = height;\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tclearViewOffset() {\n\n\t\tif ( this.view !== null ) {\n\n\t\t\tthis.view.enabled = false;\n\n\t\t}\n\n\t\tthis.updateProjectionMatrix();\n\n\t}\n\n\tupdateProjectionMatrix() {\n\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\n\t\tconst cx = ( this.right + this.left ) / 2;\n\t\tconst cy = ( this.top + this.bottom ) / 2;\n\n\t\tlet left = cx - dx;\n\t\tlet right = cx + dx;\n\t\tlet top = cy + dy;\n\t\tlet bottom = cy - dy;\n\n\t\tif ( this.view !== null && this.view.enabled ) {\n\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\n\n\t\t\tleft += scaleW * this.view.offsetX;\n\t\t\tright = left + scaleW * this.view.width;\n\t\t\ttop -= scaleH * this.view.offsetY;\n\t\t\tbottom = top - scaleH * this.view.height;\n\n\t\t}\n\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\n\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.zoom = this.zoom;\n\t\tdata.object.left = this.left;\n\t\tdata.object.right = this.right;\n\t\tdata.object.top = this.top;\n\t\tdata.object.bottom = this.bottom;\n\t\tdata.object.near = this.near;\n\t\tdata.object.far = this.far;\n\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst LOD_MIN = 4;\n\n// The standard deviations (radians) associated with the extra mips. These are\n// chosen to approximate a Trowbridge-Reitz distribution function times the\n// geometric shadowing function. These sigma values squared must match the\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\n\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\n// samples and exit early, but not recompile the shader.\nconst MAX_SAMPLES = 20;\n\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera();\nconst _clearColor = /*@__PURE__*/ new Color();\nlet _oldTarget = null;\nlet _oldActiveCubeFace = 0;\nlet _oldActiveMipmapLevel = 0;\n\n// Golden Ratio\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\nconst INV_PHI = 1 / PHI;\n\n// Vertices of a dodecahedron (except the opposites, which represent the\n// same axis), used as axis directions evenly spread on a sphere.\nconst _axisDirections = [\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];\n\n/**\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\n * (PMREM) from a cubeMap environment texture. This allows different levels of\n * blur to be quickly accessed based on material roughness. It is packed into a\n * special CubeUV format that allows us to perform custom interpolation so that\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\n * higher roughness levels. In this way we maintain resolution to smoothly\n * interpolate diffuse lighting while limiting sampling computation.\n *\n * Paper: Fast, Accurate Image-Based Lighting\n * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view\n*/\n\nclass PMREMGenerator {\n\n\tconstructor( renderer ) {\n\n\t\tthis._renderer = renderer;\n\t\tthis._pingPongRenderTarget = null;\n\n\t\tthis._lodMax = 0;\n\t\tthis._cubeSize = 0;\n\t\tthis._lodPlanes = [];\n\t\tthis._sizeLods = [];\n\t\tthis._sigmas = [];\n\n\t\tthis._blurMaterial = null;\n\t\tthis._cubemapMaterial = null;\n\t\tthis._equirectMaterial = null;\n\n\t\tthis._compileMaterial( this._blurMaterial );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\n\t * in radians to be applied to the scene before PMREM generation. Optional near\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\n\t * is placed at the origin).\n\t */\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100 ) {\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\n\t\tthis._setSize( 256 );\n\n\t\tconst cubeUVRenderTarget = this._allocateTargets();\n\t\tcubeUVRenderTarget.depthBuffer = true;\n\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );\n\n\t\tif ( sigma > 0 ) {\n\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\n\n\t\t}\n\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\n\n\t\treturn this._fromTexture( equirectangular, renderTarget );\n\n\t}\n\n\t/**\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\n\t * or HDR. The ideal input cube size is 256 x 256,\n\t * as this matches best with the 256 x 256 cubemap output.\n\t */\n\tfromCubemap( cubemap, renderTarget = null ) {\n\n\t\treturn this._fromTexture( cubemap, renderTarget );\n\n\t}\n\n\t/**\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileCubemapShader() {\n\n\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\t\t\tthis._compileMaterial( this._cubemapMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\n\t * your texture's network fetch for increased concurrency.\n\t */\n\tcompileEquirectangularShader() {\n\n\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\t\t\tthis._compileMaterial( this._equirectMaterial );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\n\t * one of them will cause any others to also become unusable.\n\t */\n\tdispose() {\n\n\t\tthis._dispose();\n\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\n\n\t}\n\n\t// private interface\n\n\t_setSize( cubeSize ) {\n\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\n\n\t}\n\n\t_dispose() {\n\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\n\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\n\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tthis._lodPlanes[ i ].dispose();\n\n\t\t}\n\n\t}\n\n\t_cleanup( outputTarget ) {\n\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\n\t\toutputTarget.scissorTest = false;\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\n\n\t}\n\n\t_fromTexture( texture, renderTarget ) {\n\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\n\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\n\n\t\t} else { // Equirectangular\n\n\t\t\tthis._setSize( texture.image.width / 4 );\n\n\t\t}\n\n\t\t_oldTarget = this._renderer.getRenderTarget();\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\n\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTargets();\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\n\t\tthis._applyPMREM( cubeUVRenderTarget );\n\t\tthis._cleanup( cubeUVRenderTarget );\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_allocateTargets() {\n\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\n\t\tconst height = 4 * this._cubeSize;\n\n\t\tconst params = {\n\t\t\tmagFilter: LinearFilter,\n\t\t\tminFilter: LinearFilter,\n\t\t\tgenerateMipmaps: false,\n\t\t\ttype: HalfFloatType,\n\t\t\tformat: RGBAFormat,\n\t\t\tcolorSpace: LinearSRGBColorSpace,\n\t\t\tdepthBuffer: false\n\t\t};\n\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height, params );\n\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {\n\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\n\n\t\t\t\tthis._dispose();\n\n\t\t\t}\n\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( width, height, params );\n\n\t\t\tconst { _lodMax } = this;\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );\n\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, width, height );\n\n\t\t}\n\n\t\treturn cubeUVRenderTarget;\n\n\t}\n\n\t_compileMaterial( material ) {\n\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\n\t\tthis._renderer.compile( tmpMesh, _flatCamera );\n\n\t}\n\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {\n\n\t\tconst fov = 90;\n\t\tconst aspect = 1;\n\t\tconst cubeCamera = new PerspectiveCamera( fov, aspect, near, far );\n\t\tconst upSign = [ 1, - 1, 1, 1, 1, 1 ];\n\t\tconst forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];\n\t\tconst renderer = this._renderer;\n\n\t\tconst originalAutoClear = renderer.autoClear;\n\t\tconst toneMapping = renderer.toneMapping;\n\t\trenderer.getClearColor( _clearColor );\n\n\t\trenderer.toneMapping = NoToneMapping;\n\t\trenderer.autoClear = false;\n\n\t\tconst backgroundMaterial = new MeshBasicMaterial( {\n\t\t\tname: 'PMREM.Background',\n\t\t\tside: BackSide,\n\t\t\tdepthWrite: false,\n\t\t\tdepthTest: false,\n\t\t} );\n\n\t\tconst backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\n\n\t\tlet useSolidColor = false;\n\t\tconst background = scene.background;\n\n\t\tif ( background ) {\n\n\t\t\tif ( background.isColor ) {\n\n\t\t\t\tbackgroundMaterial.color.copy( background );\n\t\t\t\tscene.background = null;\n\t\t\t\tuseSolidColor = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tbackgroundMaterial.color.copy( _clearColor );\n\t\t\tuseSolidColor = true;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tconst col = i % 3;\n\n\t\t\tif ( col === 0 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( forwardSign[ i ], 0, 0 );\n\n\t\t\t} else if ( col === 1 ) {\n\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\n\t\t\t\tcubeCamera.lookAt( 0, forwardSign[ i ], 0 );\n\n\t\t\t} else {\n\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\n\t\t\t\tcubeCamera.lookAt( 0, 0, forwardSign[ i ] );\n\n\t\t\t}\n\n\t\t\tconst size = this._cubeSize;\n\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\n\n\t\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\n\t\t\tif ( useSolidColor ) {\n\n\t\t\t\trenderer.render( backgroundBox, cubeCamera );\n\n\t\t\t}\n\n\t\t\trenderer.render( scene, cubeCamera );\n\n\t\t}\n\n\t\tbackgroundBox.geometry.dispose();\n\t\tbackgroundBox.material.dispose();\n\n\t\trenderer.toneMapping = toneMapping;\n\t\trenderer.autoClear = originalAutoClear;\n\t\tscene.background = background;\n\n\t}\n\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\n\n\t\tif ( isCubeTexture ) {\n\n\t\t\tif ( this._cubemapMaterial === null ) {\n\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\n\n\t\t\t}\n\n\t\t\tthis._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t} else {\n\n\t\t\tif ( this._equirectMaterial === null ) {\n\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial();\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\n\t\tconst mesh = new Mesh( this._lodPlanes[ 0 ], material );\n\n\t\tconst uniforms = material.uniforms;\n\n\t\tuniforms[ 'envMap' ].value = texture;\n\n\t\tconst size = this._cubeSize;\n\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\n\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\n\t\trenderer.render( mesh, _flatCamera );\n\n\t}\n\n\t_applyPMREM( cubeUVRenderTarget ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst autoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tfor ( let i = 1; i < this._lodPlanes.length; i ++ ) {\n\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\n\n\t\t\tconst poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];\n\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\n\n\t\t}\n\n\t\trenderer.autoClear = autoClear;\n\n\t}\n\n\t/**\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\n\t * the poles) to approximate the orthogonally-separable blur. It is least\n\t * accurate at the poles, but still does a decent job.\n\t */\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\n\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\n\n\t\tthis._halfBlur(\n\t\t\tcubeUVRenderTarget,\n\t\t\tpingPongRenderTarget,\n\t\t\tlodIn,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'latitudinal',\n\t\t\tpoleAxis );\n\n\t\tthis._halfBlur(\n\t\t\tpingPongRenderTarget,\n\t\t\tcubeUVRenderTarget,\n\t\t\tlodOut,\n\t\t\tlodOut,\n\t\t\tsigma,\n\t\t\t'longitudinal',\n\t\t\tpoleAxis );\n\n\t}\n\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\n\n\t\tconst renderer = this._renderer;\n\t\tconst blurMaterial = this._blurMaterial;\n\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\n\n\t\t\tconsole.error(\n\t\t\t\t'blur direction must be either latitudinal or longitudinal!' );\n\n\t\t}\n\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\n\t\tconst STANDARD_DEVIATIONS = 3;\n\n\t\tconst blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );\n\t\tconst blurUniforms = blurMaterial.uniforms;\n\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\n\n\t\tif ( samples > MAX_SAMPLES ) {\n\n\t\t\tconsole.warn( `sigmaRadians, ${\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\n\n\t\t}\n\n\t\tconst weights = [];\n\t\tlet sum = 0;\n\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\n\n\t\t\tconst x = i / sigmaPixels;\n\t\t\tconst weight = Math.exp( - x * x / 2 );\n\t\t\tweights.push( weight );\n\n\t\t\tif ( i === 0 ) {\n\n\t\t\t\tsum += weight;\n\n\t\t\t} else if ( i < samples ) {\n\n\t\t\t\tsum += 2 * weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\n\n\t\t\tweights[ i ] = weights[ i ] / sum;\n\n\t\t}\n\n\t\tblurUniforms[ 'envMap' ].value = targetIn.texture;\n\t\tblurUniforms[ 'samples' ].value = samples;\n\t\tblurUniforms[ 'weights' ].value = weights;\n\t\tblurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';\n\n\t\tif ( poleAxis ) {\n\n\t\t\tblurUniforms[ 'poleAxis' ].value = poleAxis;\n\n\t\t}\n\n\t\tconst { _lodMax } = this;\n\t\tblurUniforms[ 'dTheta' ].value = radiansPerPixel;\n\t\tblurUniforms[ 'mipInt' ].value = _lodMax - lodIn;\n\n\t\tconst outputSize = this._sizeLods[ lodOut ];\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\n\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\n\t\trenderer.setRenderTarget( targetOut );\n\t\trenderer.render( blurMesh, _flatCamera );\n\n\t}\n\n}\n\n\n\nfunction _createPlanes( lodMax ) {\n\n\tconst lodPlanes = [];\n\tconst sizeLods = [];\n\tconst sigmas = [];\n\n\tlet lod = lodMax;\n\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\n\n\tfor ( let i = 0; i < totalLods; i ++ ) {\n\n\t\tconst sizeLod = Math.pow( 2, lod );\n\t\tsizeLods.push( sizeLod );\n\t\tlet sigma = 1.0 / sizeLod;\n\n\t\tif ( i > lodMax - LOD_MIN ) {\n\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\n\n\t\t} else if ( i === 0 ) {\n\n\t\t\tsigma = 0;\n\n\t\t}\n\n\t\tsigmas.push( sigma );\n\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\n\t\tconst min = - texelSize;\n\t\tconst max = 1 + texelSize;\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\n\n\t\tconst cubeFaces = 6;\n\t\tconst vertices = 6;\n\t\tconst positionSize = 3;\n\t\tconst uvSize = 2;\n\t\tconst faceIndexSize = 1;\n\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\n\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\n\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\n\t\t\tconst y = face > 2 ? 0 : - 1;\n\t\t\tconst coordinates = [\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y, 0,\n\t\t\t\tx + 2 / 3, y + 1, 0,\n\t\t\t\tx, y + 1, 0\n\t\t\t];\n\t\t\tposition.set( coordinates, positionSize * vertices * face );\n\t\t\tuv.set( uv1, uvSize * vertices * face );\n\t\t\tconst fill = [ face, face, face, face, face, face ];\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * face );\n\n\t\t}\n\n\t\tconst planes = new BufferGeometry();\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\n\t\tlodPlanes.push( planes );\n\n\t\tif ( lod > LOD_MIN ) {\n\n\t\t\tlod --;\n\n\t\t}\n\n\t}\n\n\treturn { lodPlanes, sizeLods, sigmas };\n\n}\n\nfunction _createRenderTarget( width, height, params ) {\n\n\tconst cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\n\tcubeUVRenderTarget.scissorTest = true;\n\treturn cubeUVRenderTarget;\n\n}\n\nfunction _setViewport( target, x, y, width, height ) {\n\n\ttarget.viewport.set( x, y, width, height );\n\ttarget.scissor.set( x, y, width, height );\n\n}\n\nfunction _getBlurShader( lodMax, width, height ) {\n\n\tconst weights = new Float32Array( MAX_SAMPLES );\n\tconst poleAxis = new Vector3( 0, 1, 0 );\n\tconst shaderMaterial = new ShaderMaterial( {\n\n\t\tname: 'SphericalGaussianBlur',\n\n\t\tdefines: {\n\t\t\t'n': MAX_SAMPLES,\n\t\t\t'CUBEUV_TEXEL_WIDTH': 1.0 / width,\n\t\t\t'CUBEUV_TEXEL_HEIGHT': 1.0 / height,\n\t\t\t'CUBEUV_MAX_MIP': `${lodMax}.0`,\n\t\t},\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'samples': { value: 1 },\n\t\t\t'weights': { value: weights },\n\t\t\t'latitudinal': { value: false },\n\t\t\t'dTheta': { value: 0 },\n\t\t\t'mipInt': { value: 0 },\n\t\t\t'poleAxis': { value: poleAxis }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n\treturn shaderMaterial;\n\n}\n\nfunction _getEquirectMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'EquirectangularToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCubemapMaterial() {\n\n\treturn new ShaderMaterial( {\n\n\t\tname: 'CubemapToCubeUV',\n\n\t\tuniforms: {\n\t\t\t'envMap': { value: null },\n\t\t\t'flipEnvMap': { value: - 1 }\n\t\t},\n\n\t\tvertexShader: _getCommonVertexShader(),\n\n\t\tfragmentShader: /* glsl */`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,\n\n\t\tblending: NoBlending,\n\t\tdepthTest: false,\n\t\tdepthWrite: false\n\n\t} );\n\n}\n\nfunction _getCommonVertexShader() {\n\n\treturn /* glsl */`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`;\n\n}\n\nfunction WebGLCubeUVMaps( renderer ) {\n\n\tlet cubeUVmaps = new WeakMap();\n\n\tlet pmremGenerator = null;\n\n\tfunction get( texture ) {\n\n\t\tif ( texture && texture.isTexture ) {\n\n\t\t\tconst mapping = texture.mapping;\n\n\t\t\tconst isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );\n\t\t\tconst isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );\n\n\t\t\t// equirect/cube map to cubeUV conversion\n\n\t\t\tif ( isEquirectMap || isCubeMap ) {\n\n\t\t\t\tif ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {\n\n\t\t\t\t\ttexture.needsPMREMUpdate = false;\n\n\t\t\t\t\tlet renderTarget = cubeUVmaps.get( texture );\n\n\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\trenderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );\n\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( cubeUVmaps.has( texture ) ) {\n\n\t\t\t\t\t\treturn cubeUVmaps.get( texture ).texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst image = texture.image;\n\n\t\t\t\t\t\tif ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {\n\n\t\t\t\t\t\t\tif ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );\n\n\t\t\t\t\t\t\tconst renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );\n\t\t\t\t\t\t\tcubeUVmaps.set( texture, renderTarget );\n\n\t\t\t\t\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t\t\t\t\t\treturn renderTarget.texture;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// image not yet ready. try the conversion next frame\n\n\t\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tfunction isCubeTextureComplete( image ) {\n\n\t\tlet count = 0;\n\t\tconst length = 6;\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tif ( image[ i ] !== undefined ) count ++;\n\n\t\t}\n\n\t\treturn count === length;\n\n\n\t}\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tconst cubemapUV = cubeUVmaps.get( texture );\n\n\t\tif ( cubemapUV !== undefined ) {\n\n\t\t\tcubeUVmaps.delete( texture );\n\t\t\tcubemapUV.dispose();\n\n\t\t}\n\n\t}\n\n\tfunction dispose() {\n\n\t\tcubeUVmaps = new WeakMap();\n\n\t\tif ( pmremGenerator !== null ) {\n\n\t\t\tpmremGenerator.dispose();\n\t\t\tpmremGenerator = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLExtensions( gl ) {\n\n\tconst extensions = {};\n\n\tfunction getExtension( name ) {\n\n\t\tif ( extensions[ name ] !== undefined ) {\n\n\t\t\treturn extensions[ name ];\n\n\t\t}\n\n\t\tlet extension;\n\n\t\tswitch ( name ) {\n\n\t\t\tcase 'WEBGL_depth_texture':\n\t\t\t\textension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'EXT_texture_filter_anisotropic':\n\t\t\t\textension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_s3tc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n\t\t\t\tbreak;\n\n\t\t\tcase 'WEBGL_compressed_texture_pvrtc':\n\t\t\t\textension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\textension = gl.getExtension( name );\n\n\t\t}\n\n\t\textensions[ name ] = extension;\n\n\t\treturn extension;\n\n\t}\n\n\treturn {\n\n\t\thas: function ( name ) {\n\n\t\t\treturn getExtension( name ) !== null;\n\n\t\t},\n\n\t\tinit: function ( capabilities ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgetExtension( 'EXT_color_buffer_float' );\n\n\t\t\t} else {\n\n\t\t\t\tgetExtension( 'WEBGL_depth_texture' );\n\t\t\t\tgetExtension( 'OES_texture_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float' );\n\t\t\t\tgetExtension( 'OES_texture_half_float_linear' );\n\t\t\t\tgetExtension( 'OES_standard_derivatives' );\n\t\t\t\tgetExtension( 'OES_element_index_uint' );\n\t\t\t\tgetExtension( 'OES_vertex_array_object' );\n\t\t\t\tgetExtension( 'ANGLE_instanced_arrays' );\n\n\t\t\t}\n\n\t\t\tgetExtension( 'OES_texture_float_linear' );\n\t\t\tgetExtension( 'EXT_color_buffer_half_float' );\n\t\t\tgetExtension( 'WEBGL_multisampled_render_to_texture' );\n\n\t\t},\n\n\t\tget: function ( name ) {\n\n\t\t\tconst extension = getExtension( name );\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n\t\t\t}\n\n\t\t\treturn extension;\n\n\t\t}\n\n\t};\n\n}\n\nfunction WebGLGeometries( gl, attributes, info, bindingStates ) {\n\n\tconst geometries = {};\n\tconst wireframeAttributes = new WeakMap();\n\n\tfunction onGeometryDispose( event ) {\n\n\t\tconst geometry = event.target;\n\n\t\tif ( geometry.index !== null ) {\n\n\t\t\tattributes.remove( geometry.index );\n\n\t\t}\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tattributes.remove( geometry.attributes[ name ] );\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tconst array = geometry.morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.remove( array[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.removeEventListener( 'dispose', onGeometryDispose );\n\n\t\tdelete geometries[ geometry.id ];\n\n\t\tconst attribute = wireframeAttributes.get( geometry );\n\n\t\tif ( attribute ) {\n\n\t\t\tattributes.remove( attribute );\n\t\t\twireframeAttributes.delete( geometry );\n\n\t\t}\n\n\t\tbindingStates.releaseStatesOfGeometry( geometry );\n\n\t\tif ( geometry.isInstancedBufferGeometry === true ) {\n\n\t\t\tdelete geometry._maxInstanceCount;\n\n\t\t}\n\n\t\t//\n\n\t\tinfo.memory.geometries --;\n\n\t}\n\n\tfunction get( object, geometry ) {\n\n\t\tif ( geometries[ geometry.id ] === true ) return geometry;\n\n\t\tgeometry.addEventListener( 'dispose', onGeometryDispose );\n\n\t\tgeometries[ geometry.id ] = true;\n\n\t\tinfo.memory.geometries ++;\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction update( geometry ) {\n\n\t\tconst geometryAttributes = geometry.attributes;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates.\n\n\t\tfor ( const name in geometryAttributes ) {\n\n\t\t\tattributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\tfor ( const name in morphAttributes ) {\n\n\t\t\tconst array = morphAttributes[ name ];\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\n\n\t\t\t\tattributes.update( array[ i ], gl.ARRAY_BUFFER );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateWireframeAttribute( geometry ) {\n\n\t\tconst indices = [];\n\n\t\tconst geometryIndex = geometry.index;\n\t\tconst geometryPosition = geometry.attributes.position;\n\t\tlet version = 0;\n\n\t\tif ( geometryIndex !== null ) {\n\n\t\t\tconst array = geometryIndex.array;\n\t\t\tversion = geometryIndex.version;\n\n\t\t\tfor ( let i = 0, l = array.length; i < l; i += 3 ) {\n\n\t\t\t\tconst a = array[ i + 0 ];\n\t\t\t\tconst b = array[ i + 1 ];\n\t\t\t\tconst c = array[ i + 2 ];\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else if ( geometryPosition !== undefined ) {\n\n\t\t\tconst array = geometryPosition.array;\n\t\t\tversion = geometryPosition.version;\n\n\t\t\tfor ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {\n\n\t\t\t\tconst a = i + 0;\n\t\t\t\tconst b = i + 1;\n\t\t\t\tconst c = i + 2;\n\n\t\t\t\tindices.push( a, b, b, c, c, a );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );\n\t\tattribute.version = version;\n\n\t\t// Updating index buffer in VAO now. See WebGLBindingStates\n\n\t\t//\n\n\t\tconst previousAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( previousAttribute ) attributes.remove( previousAttribute );\n\n\t\t//\n\n\t\twireframeAttributes.set( geometry, attribute );\n\n\t}\n\n\tfunction getWireframeAttribute( geometry ) {\n\n\t\tconst currentAttribute = wireframeAttributes.get( geometry );\n\n\t\tif ( currentAttribute ) {\n\n\t\t\tconst geometryIndex = geometry.index;\n\n\t\t\tif ( geometryIndex !== null ) {\n\n\t\t\t\t// if the attribute is obsolete, create a new one\n\n\t\t\t\tif ( currentAttribute.version < geometryIndex.version ) {\n\n\t\t\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tupdateWireframeAttribute( geometry );\n\n\t\t}\n\n\t\treturn wireframeAttributes.get( geometry );\n\n\t}\n\n\treturn {\n\n\t\tget: get,\n\t\tupdate: update,\n\n\t\tgetWireframeAttribute: getWireframeAttribute\n\n\t};\n\n}\n\nfunction WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tlet mode;\n\n\tfunction setMode( value ) {\n\n\t\tmode = value;\n\n\t}\n\n\tlet type, bytesPerElement;\n\n\tfunction setIndex( value ) {\n\n\t\ttype = value.type;\n\t\tbytesPerElement = value.bytesPerElement;\n\n\t}\n\n\tfunction render( start, count ) {\n\n\t\tgl.drawElements( mode, count, type, start * bytesPerElement );\n\n\t\tinfo.update( count, mode, 1 );\n\n\t}\n\n\tfunction renderInstances( start, count, primcount ) {\n\n\t\tif ( primcount === 0 ) return;\n\n\t\tlet extension, methodName;\n\n\t\tif ( isWebGL2 ) {\n\n\t\t\textension = gl;\n\t\t\tmethodName = 'drawElementsInstanced';\n\n\t\t} else {\n\n\t\t\textension = extensions.get( 'ANGLE_instanced_arrays' );\n\t\t\tmethodName = 'drawElementsInstancedANGLE';\n\n\t\t\tif ( extension === null ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\textension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );\n\n\t\tinfo.update( count, mode, primcount );\n\n\t}\n\n\t//\n\n\tthis.setMode = setMode;\n\tthis.setIndex = setIndex;\n\tthis.render = render;\n\tthis.renderInstances = renderInstances;\n\n}\n\nfunction WebGLInfo( gl ) {\n\n\tconst memory = {\n\t\tgeometries: 0,\n\t\ttextures: 0\n\t};\n\n\tconst render = {\n\t\tframe: 0,\n\t\tcalls: 0,\n\t\ttriangles: 0,\n\t\tpoints: 0,\n\t\tlines: 0\n\t};\n\n\tfunction update( count, mode, instanceCount ) {\n\n\t\trender.calls ++;\n\n\t\tswitch ( mode ) {\n\n\t\t\tcase gl.TRIANGLES:\n\t\t\t\trender.triangles += instanceCount * ( count / 3 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINES:\n\t\t\t\trender.lines += instanceCount * ( count / 2 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_STRIP:\n\t\t\t\trender.lines += instanceCount * ( count - 1 );\n\t\t\t\tbreak;\n\n\t\t\tcase gl.LINE_LOOP:\n\t\t\t\trender.lines += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tcase gl.POINTS:\n\t\t\t\trender.points += instanceCount * count;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tconsole.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction reset() {\n\n\t\trender.calls = 0;\n\t\trender.triangles = 0;\n\t\trender.points = 0;\n\t\trender.lines = 0;\n\n\t}\n\n\treturn {\n\t\tmemory: memory,\n\t\trender: render,\n\t\tprograms: null,\n\t\tautoReset: true,\n\t\treset: reset,\n\t\tupdate: update\n\t};\n\n}\n\nfunction numericalSort( a, b ) {\n\n\treturn a[ 0 ] - b[ 0 ];\n\n}\n\nfunction absNumericalSort( a, b ) {\n\n\treturn Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );\n\n}\n\nfunction WebGLMorphtargets( gl, capabilities, textures ) {\n\n\tconst influencesList = {};\n\tconst morphInfluences = new Float32Array( 8 );\n\tconst morphTextures = new WeakMap();\n\tconst morph = new Vector4();\n\n\tconst workInfluences = [];\n\n\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\tworkInfluences[ i ] = [ i, 0 ];\n\n\t}\n\n\tfunction update( object, geometry, program ) {\n\n\t\tconst objectInfluences = object.morphTargetInfluences;\n\n\t\tif ( capabilities.isWebGL2 === true ) {\n\n\t\t\t// instead of using attributes, the WebGL 2 code path encodes morph targets\n\t\t\t// into an array of data textures. Each layer represents a single morph target.\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tlet entry = morphTextures.get( geometry );\n\n\t\t\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\n\n\t\t\t\tif ( entry !== undefined ) entry.texture.dispose();\n\n\t\t\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\n\t\t\t\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\n\t\t\t\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\n\n\t\t\t\tconst morphTargets = geometry.morphAttributes.position || [];\n\t\t\t\tconst morphNormals = geometry.morphAttributes.normal || [];\n\t\t\t\tconst morphColors = geometry.morphAttributes.color || [];\n\n\t\t\t\tlet vertexDataCount = 0;\n\n\t\t\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\n\t\t\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\n\t\t\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\n\n\t\t\t\tlet width = geometry.attributes.position.count * vertexDataCount;\n\t\t\t\tlet height = 1;\n\n\t\t\t\tif ( width > capabilities.maxTextureSize ) {\n\n\t\t\t\t\theight = Math.ceil( width / capabilities.maxTextureSize );\n\t\t\t\t\twidth = capabilities.maxTextureSize;\n\n\t\t\t\t}\n\n\t\t\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\n\n\t\t\t\tconst texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\n\t\t\t\ttexture.type = FloatType;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t// fill buffer\n\n\t\t\t\tconst vertexDataStride = vertexDataCount * 4;\n\n\t\t\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\n\n\t\t\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\t\t\tconst morphNormal = morphNormals[ i ];\n\t\t\t\t\tconst morphColor = morphColors[ i ];\n\n\t\t\t\t\tconst offset = width * height * 4 * i;\n\n\t\t\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\n\n\t\t\t\t\t\tconst stride = j * vertexDataStride;\n\n\t\t\t\t\t\tif ( hasMorphPosition === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphTarget, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 0 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 1 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 2 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphNormals === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphNormal, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 4 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 5 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 6 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( hasMorphColors === true ) {\n\n\t\t\t\t\t\t\tmorph.fromBufferAttribute( morphColor, j );\n\n\t\t\t\t\t\t\tbuffer[ offset + stride + 8 ] = morph.x;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 9 ] = morph.y;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 10 ] = morph.z;\n\t\t\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tentry = {\n\t\t\t\t\tcount: morphTargetsCount,\n\t\t\t\t\ttexture: texture,\n\t\t\t\t\tsize: new Vector2( width, height )\n\t\t\t\t};\n\n\t\t\t\tmorphTextures.set( geometry, entry );\n\n\t\t\t\tfunction disposeTexture() {\n\n\t\t\t\t\ttexture.dispose();\n\n\t\t\t\t\tmorphTextures.delete( geometry );\n\n\t\t\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addEventListener( 'dispose', disposeTexture );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < objectInfluences.length; i ++ ) {\n\n\t\t\t\tmorphInfluencesSum += objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );\n\n\n\t\t} else {\n\n\t\t\t// When object doesn't have morph target influences defined, we treat it as a 0-length array\n\t\t\t// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences\n\n\t\t\tconst length = objectInfluences === undefined ? 0 : objectInfluences.length;\n\n\t\t\tlet influences = influencesList[ geometry.id ];\n\n\t\t\tif ( influences === undefined || influences.length !== length ) {\n\n\t\t\t\t// initialise list\n\n\t\t\t\tinfluences = [];\n\n\t\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\t\tinfluences[ i ] = [ i, 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tinfluencesList[ geometry.id ] = influences;\n\n\t\t\t}\n\n\t\t\t// Collect influences\n\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\t\tconst influence = influences[ i ];\n\n\t\t\t\tinfluence[ 0 ] = i;\n\t\t\t\tinfluence[ 1 ] = objectInfluences[ i ];\n\n\t\t\t}\n\n\t\t\tinfluences.sort( absNumericalSort );\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tif ( i < length && influences[ i ][ 1 ] ) {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = influences[ i ][ 0 ];\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = influences[ i ][ 1 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tworkInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;\n\t\t\t\t\tworkInfluences[ i ][ 1 ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tworkInfluences.sort( numericalSort );\n\n\t\t\tconst morphTargets = geometry.morphAttributes.position;\n\t\t\tconst morphNormals = geometry.morphAttributes.normal;\n\n\t\t\tlet morphInfluencesSum = 0;\n\n\t\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\t\tconst influence = workInfluences[ i ];\n\t\t\t\tconst index = influence[ 0 ];\n\t\t\t\tconst value = influence[ 1 ];\n\n\t\t\t\tif ( index !== Number.MAX_SAFE_INTEGER && value ) {\n\n\t\t\t\t\tif ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {\n\n\t\t\t\t\t\tgeometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = value;\n\t\t\t\t\tmorphInfluencesSum += value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphTarget' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {\n\n\t\t\t\t\t\tgeometry.deleteAttribute( 'morphNormal' + i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmorphInfluences[ i ] = 0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// GLSL shader uses formula baseinfluence * base + sum(target * influence)\n\t\t\t// This allows us to switch between absolute morphs and relative morphs without changing shader code\n\t\t\t// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)\n\t\t\tconst morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;\n\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );\n\t\t\tprogram.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\tupdate: update\n\n\t};\n\n}\n\nfunction WebGLObjects( gl, geometries, attributes, info ) {\n\n\tlet updateMap = new WeakMap();\n\n\tfunction update( object ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\tconst geometry = object.geometry;\n\t\tconst buffergeometry = geometries.get( object, geometry );\n\n\t\t// Update once per frame\n\n\t\tif ( updateMap.get( buffergeometry ) !== frame ) {\n\n\t\t\tgeometries.update( buffergeometry );\n\n\t\t\tupdateMap.set( buffergeometry, frame );\n\n\t\t}\n\n\t\tif ( object.isInstancedMesh ) {\n\n\t\t\tif ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {\n\n\t\t\t\tobject.addEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\t\t}\n\n\t\t\tif ( updateMap.get( object ) !== frame ) {\n\n\t\t\t\tattributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );\n\n\t\t\t\tif ( object.instanceColor !== null ) {\n\n\t\t\t\t\tattributes.update( object.instanceColor, gl.ARRAY_BUFFER );\n\n\t\t\t\t}\n\n\t\t\t\tupdateMap.set( object, frame );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tconst skeleton = object.skeleton;\n\n\t\t\tif ( updateMap.get( skeleton ) !== frame ) {\n\n\t\t\t\tskeleton.update();\n\n\t\t\t\tupdateMap.set( skeleton, frame );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tupdateMap = new WeakMap();\n\n\t}\n\n\tfunction onInstancedMeshDispose( event ) {\n\n\t\tconst instancedMesh = event.target;\n\n\t\tinstancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );\n\n\t\tattributes.remove( instancedMesh.instanceMatrix );\n\n\t\tif ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );\n\n\t}\n\n\treturn {\n\n\t\tupdate: update,\n\t\tdispose: dispose\n\n\t};\n\n}\n\n/**\n * Uniforms of a program.\n * Those form a tree structure with a special top-level container for the root,\n * which you get by calling 'new WebGLUniforms( gl, program )'.\n *\n *\n * Properties of inner nodes including the top-level container:\n *\n * .seq - array of nested uniforms\n * .map - nested uniforms by name\n *\n *\n * Methods of all nodes except the top-level container:\n *\n * .setValue( gl, value, [textures] )\n *\n * \t\tuploads a uniform value(s)\n *  \tthe 'textures' parameter is needed for sampler uniforms\n *\n *\n * Static methods of the top-level container (textures factorizations):\n *\n * .upload( gl, seq, values, textures )\n *\n * \t\tsets uniforms in 'seq' to 'values[id].value'\n *\n * .seqWithValue( seq, values ) : filteredSeq\n *\n * \t\tfilters 'seq' entries with corresponding entry in values\n *\n *\n * Methods of the top-level container (textures factorizations):\n *\n * .setValue( gl, name, value, textures )\n *\n * \t\tsets uniform with  name 'name' to 'value'\n *\n * .setOptional( gl, obj, prop )\n *\n * \t\tlike .set for an optional property of the object\n *\n */\n\n\nconst emptyTexture = /*@__PURE__*/ new Texture();\nconst emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();\nconst empty3dTexture = /*@__PURE__*/ new Data3DTexture();\nconst emptyCubeTexture = /*@__PURE__*/ new CubeTexture();\n\n// --- Utilities ---\n\n// Array Caches (provide typed arrays for temporary by size)\n\nconst arrayCacheF32 = [];\nconst arrayCacheI32 = [];\n\n// Float32Array caches used for uploading Matrix uniforms\n\nconst mat4array = new Float32Array( 16 );\nconst mat3array = new Float32Array( 9 );\nconst mat2array = new Float32Array( 4 );\n\n// Flattening for arrays of vectors and matrices\n\nfunction flatten( array, nBlocks, blockSize ) {\n\n\tconst firstElem = array[ 0 ];\n\n\tif ( firstElem <= 0 || firstElem > 0 ) return array;\n\t// unoptimized: ! isNaN( firstElem )\n\t// see http://jacksondunstan.com/articles/983\n\n\tconst n = nBlocks * blockSize;\n\tlet r = arrayCacheF32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Float32Array( n );\n\t\tarrayCacheF32[ n ] = r;\n\n\t}\n\n\tif ( nBlocks !== 0 ) {\n\n\t\tfirstElem.toArray( r, 0 );\n\n\t\tfor ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {\n\n\t\t\toffset += blockSize;\n\t\t\tarray[ i ].toArray( r, offset );\n\n\t\t}\n\n\t}\n\n\treturn r;\n\n}\n\nfunction arraysEqual( a, b ) {\n\n\tif ( a.length !== b.length ) return false;\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) return false;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction copyArray( a, b ) {\n\n\tfor ( let i = 0, l = b.length; i < l; i ++ ) {\n\n\t\ta[ i ] = b[ i ];\n\n\t}\n\n}\n\n// Texture unit allocation\n\nfunction allocTexUnits( textures, n ) {\n\n\tlet r = arrayCacheI32[ n ];\n\n\tif ( r === undefined ) {\n\n\t\tr = new Int32Array( n );\n\t\tarrayCacheI32[ n ] = r;\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\tr[ i ] = textures.allocateTextureUnit();\n\n\t}\n\n\treturn r;\n\n}\n\n// --- Setters ---\n\n// Note: Defining these methods externally, because they come in a bunch\n// and this way their names minify.\n\n// Single scalar\n\nfunction setValueV1f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1f( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single float vector (from flat array or THREE.VectorN)\n\nfunction setValueV2f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2f( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3f( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else if ( v.r !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {\n\n\t\t\tgl.uniform3f( this.addr, v.r, v.g, v.b );\n\n\t\t\tcache[ 0 ] = v.r;\n\t\t\tcache[ 1 ] = v.g;\n\t\t\tcache[ 2 ] = v.b;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4f( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4f( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4fv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single matrix (from flat array or THREE.MatrixN)\n\nfunction setValueM2( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix2fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat2array.set( elements );\n\n\t\tgl.uniformMatrix2fv( this.addr, false, mat2array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM3( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix3fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat3array.set( elements );\n\n\t\tgl.uniformMatrix3fv( this.addr, false, mat3array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\nfunction setValueM4( gl, v ) {\n\n\tconst cache = this.cache;\n\tconst elements = v.elements;\n\n\tif ( elements === undefined ) {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniformMatrix4fv( this.addr, false, v );\n\n\t\tcopyArray( cache, v );\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, elements ) ) return;\n\n\t\tmat4array.set( elements );\n\n\t\tgl.uniformMatrix4fv( this.addr, false, mat4array );\n\n\t\tcopyArray( cache, elements );\n\n\t}\n\n}\n\n// Single integer / boolean\n\nfunction setValueV1i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1i( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single integer / boolean vector (from flat array or THREE.VectorN)\n\nfunction setValueV2i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2i( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3i( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4i( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4i( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4iv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n// Single unsigned integer\n\nfunction setValueV1ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( cache[ 0 ] === v ) return;\n\n\tgl.uniform1ui( this.addr, v );\n\n\tcache[ 0 ] = v;\n\n}\n\n// Single unsigned integer vector (from flat array or THREE.VectorN)\n\nfunction setValueV2ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {\n\n\t\t\tgl.uniform2ui( this.addr, v.x, v.y );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform2uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV3ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {\n\n\t\t\tgl.uniform3ui( this.addr, v.x, v.y, v.z );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform3uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\nfunction setValueV4ui( gl, v ) {\n\n\tconst cache = this.cache;\n\n\tif ( v.x !== undefined ) {\n\n\t\tif ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {\n\n\t\t\tgl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );\n\n\t\t\tcache[ 0 ] = v.x;\n\t\t\tcache[ 1 ] = v.y;\n\t\t\tcache[ 2 ] = v.z;\n\t\t\tcache[ 3 ] = v.w;\n\n\t\t}\n\n\t} else {\n\n\t\tif ( arraysEqual( cache, v ) ) return;\n\n\t\tgl.uniform4uiv( this.addr, v );\n\n\t\tcopyArray( cache, v );\n\n\t}\n\n}\n\n\n// Single texture (2D / Cube)\n\nfunction setValueT1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2D( v || emptyTexture, unit );\n\n}\n\nfunction setValueT3D1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture3D( v || empty3dTexture, unit );\n\n}\n\nfunction setValueT6( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTextureCube( v || emptyCubeTexture, unit );\n\n}\n\nfunction setValueT2DArray1( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\tconst unit = textures.allocateTextureUnit();\n\n\tif ( cache[ 0 ] !== unit ) {\n\n\t\tgl.uniform1i( this.addr, unit );\n\t\tcache[ 0 ] = unit;\n\n\t}\n\n\ttextures.setTexture2DArray( v || emptyArrayTexture, unit );\n\n}\n\n// Helper to pick the right setter for the singular case\n\nfunction getSingularSetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1f; // FLOAT\n\t\tcase 0x8b50: return setValueV2f; // _VEC2\n\t\tcase 0x8b51: return setValueV3f; // _VEC3\n\t\tcase 0x8b52: return setValueV4f; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2; // _MAT2\n\t\tcase 0x8b5b: return setValueM3; // _MAT3\n\t\tcase 0x8b5c: return setValueM4; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2i; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3i; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4i; // _VEC4\n\n\t\tcase 0x1405: return setValueV1ui; // UINT\n\t\tcase 0x8dc6: return setValueV2ui; // _VEC2\n\t\tcase 0x8dc7: return setValueV3ui; // _VEC3\n\t\tcase 0x8dc8: return setValueV4ui; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3D1;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArray1;\n\n\t}\n\n}\n\n\n// Array of scalars\n\nfunction setValueV1fArray( gl, v ) {\n\n\tgl.uniform1fv( this.addr, v );\n\n}\n\n// Array of vectors (from flat array or array of THREE.VectorN)\n\nfunction setValueV2fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 2 );\n\n\tgl.uniform2fv( this.addr, data );\n\n}\n\nfunction setValueV3fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 3 );\n\n\tgl.uniform3fv( this.addr, data );\n\n}\n\nfunction setValueV4fArray( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniform4fv( this.addr, data );\n\n}\n\n// Array of matrices (from flat array or array of THREE.MatrixN)\n\nfunction setValueM2Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 4 );\n\n\tgl.uniformMatrix2fv( this.addr, false, data );\n\n}\n\nfunction setValueM3Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 9 );\n\n\tgl.uniformMatrix3fv( this.addr, false, data );\n\n}\n\nfunction setValueM4Array( gl, v ) {\n\n\tconst data = flatten( v, this.size, 16 );\n\n\tgl.uniformMatrix4fv( this.addr, false, data );\n\n}\n\n// Array of integer / boolean\n\nfunction setValueV1iArray( gl, v ) {\n\n\tgl.uniform1iv( this.addr, v );\n\n}\n\n// Array of integer / boolean vectors (from flat array)\n\nfunction setValueV2iArray( gl, v ) {\n\n\tgl.uniform2iv( this.addr, v );\n\n}\n\nfunction setValueV3iArray( gl, v ) {\n\n\tgl.uniform3iv( this.addr, v );\n\n}\n\nfunction setValueV4iArray( gl, v ) {\n\n\tgl.uniform4iv( this.addr, v );\n\n}\n\n// Array of unsigned integer\n\nfunction setValueV1uiArray( gl, v ) {\n\n\tgl.uniform1uiv( this.addr, v );\n\n}\n\n// Array of unsigned integer vectors (from flat array)\n\nfunction setValueV2uiArray( gl, v ) {\n\n\tgl.uniform2uiv( this.addr, v );\n\n}\n\nfunction setValueV3uiArray( gl, v ) {\n\n\tgl.uniform3uiv( this.addr, v );\n\n}\n\nfunction setValueV4uiArray( gl, v ) {\n\n\tgl.uniform4uiv( this.addr, v );\n\n}\n\n\n// Array of textures (2D / 3D / Cube / 2DArray)\n\nfunction setValueT1Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT3DArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT6Array( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );\n\n\t}\n\n}\n\nfunction setValueT2DArrayArray( gl, v, textures ) {\n\n\tconst cache = this.cache;\n\n\tconst n = v.length;\n\n\tconst units = allocTexUnits( textures, n );\n\n\tif ( ! arraysEqual( cache, units ) ) {\n\n\t\tgl.uniform1iv( this.addr, units );\n\n\t\tcopyArray( cache, units );\n\n\t}\n\n\tfor ( let i = 0; i !== n; ++ i ) {\n\n\t\ttextures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );\n\n\t}\n\n}\n\n\n// Helper to pick the right setter for a pure (bottom-level) array\n\nfunction getPureArraySetter( type ) {\n\n\tswitch ( type ) {\n\n\t\tcase 0x1406: return setValueV1fArray; // FLOAT\n\t\tcase 0x8b50: return setValueV2fArray; // _VEC2\n\t\tcase 0x8b51: return setValueV3fArray; // _VEC3\n\t\tcase 0x8b52: return setValueV4fArray; // _VEC4\n\n\t\tcase 0x8b5a: return setValueM2Array; // _MAT2\n\t\tcase 0x8b5b: return setValueM3Array; // _MAT3\n\t\tcase 0x8b5c: return setValueM4Array; // _MAT4\n\n\t\tcase 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL\n\t\tcase 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2\n\t\tcase 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3\n\t\tcase 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4\n\n\t\tcase 0x1405: return setValueV1uiArray; // UINT\n\t\tcase 0x8dc6: return setValueV2uiArray; // _VEC2\n\t\tcase 0x8dc7: return setValueV3uiArray; // _VEC3\n\t\tcase 0x8dc8: return setValueV4uiArray; // _VEC4\n\n\t\tcase 0x8b5e: // SAMPLER_2D\n\t\tcase 0x8d66: // SAMPLER_EXTERNAL_OES\n\t\tcase 0x8dca: // INT_SAMPLER_2D\n\t\tcase 0x8dd2: // UNSIGNED_INT_SAMPLER_2D\n\t\tcase 0x8b62: // SAMPLER_2D_SHADOW\n\t\t\treturn setValueT1Array;\n\n\t\tcase 0x8b5f: // SAMPLER_3D\n\t\tcase 0x8dcb: // INT_SAMPLER_3D\n\t\tcase 0x8dd3: // UNSIGNED_INT_SAMPLER_3D\n\t\t\treturn setValueT3DArray;\n\n\t\tcase 0x8b60: // SAMPLER_CUBE\n\t\tcase 0x8dcc: // INT_SAMPLER_CUBE\n\t\tcase 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE\n\t\tcase 0x8dc5: // SAMPLER_CUBE_SHADOW\n\t\t\treturn setValueT6Array;\n\n\t\tcase 0x8dc1: // SAMPLER_2D_ARRAY\n\t\tcase 0x8dcf: // INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY\n\t\tcase 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW\n\t\t\treturn setValueT2DArrayArray;\n\n\t}\n\n}\n\n// --- Uniform Classes ---\n\nclass SingleUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.setValue = getSingularSetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass PureArrayUniform {\n\n\tconstructor( id, activeInfo, addr ) {\n\n\t\tthis.id = id;\n\t\tthis.addr = addr;\n\t\tthis.cache = [];\n\t\tthis.size = activeInfo.size;\n\t\tthis.setValue = getPureArraySetter( activeInfo.type );\n\n\t\t// this.path = activeInfo.name; // DEBUG\n\n\t}\n\n}\n\nclass StructuredUniform {\n\n\tconstructor( id ) {\n\n\t\tthis.id = id;\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t}\n\n\tsetValue( gl, value, textures ) {\n\n\t\tconst seq = this.seq;\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tu.setValue( gl, value[ u.id ], textures );\n\n\t\t}\n\n\t}\n\n}\n\n// --- Top-level ---\n\n// Parser - builds up the property tree from the path strings\n\nconst RePathPart = /(\\w+)(\\])?(\\[|\\.)?/g;\n\n// extracts\n// \t- the identifier (member name or array index)\n//  - followed by an optional right bracket (found when array index)\n//  - followed by an optional left bracket or dot (type of subscript)\n//\n// Note: These portions can be read in a non-overlapping fashion and\n// allow straightforward parsing of the hierarchy that WebGL encodes\n// in the uniform names.\n\nfunction addUniform( container, uniformObject ) {\n\n\tcontainer.seq.push( uniformObject );\n\tcontainer.map[ uniformObject.id ] = uniformObject;\n\n}\n\nfunction parseUniform( activeInfo, addr, container ) {\n\n\tconst path = activeInfo.name,\n\t\tpathLength = path.length;\n\n\t// reset RegExp object, because of the early exit of a previous run\n\tRePathPart.lastIndex = 0;\n\n\twhile ( true ) {\n\n\t\tconst match = RePathPart.exec( path ),\n\t\t\tmatchEnd = RePathPart.lastIndex;\n\n\t\tlet id = match[ 1 ];\n\t\tconst idIsIndex = match[ 2 ] === ']',\n\t\t\tsubscript = match[ 3 ];\n\n\t\tif ( idIsIndex ) id = id | 0; // convert to integer\n\n\t\tif ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {\n\n\t\t\t// bare name or \"pure\" bottom-level array \"[0]\" suffix\n\n\t\t\taddUniform( container, subscript === undefined ?\n\t\t\t\tnew SingleUniform( id, activeInfo, addr ) :\n\t\t\t\tnew PureArrayUniform( id, activeInfo, addr ) );\n\n\t\t\tbreak;\n\n\t\t} else {\n\n\t\t\t// step into inner node / create it in case it doesn't exist\n\n\t\t\tconst map = container.map;\n\t\t\tlet next = map[ id ];\n\n\t\t\tif ( next === undefined ) {\n\n\t\t\t\tnext = new StructuredUniform( id );\n\t\t\t\taddUniform( container, next );\n\n\t\t\t}\n\n\t\t\tcontainer = next;\n\n\t\t}\n\n\t}\n\n}\n\n// Root Container\n\nclass WebGLUniforms {\n\n\tconstructor( gl, program ) {\n\n\t\tthis.seq = [];\n\t\tthis.map = {};\n\n\t\tconst n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );\n\n\t\tfor ( let i = 0; i < n; ++ i ) {\n\n\t\t\tconst info = gl.getActiveUniform( program, i ),\n\t\t\t\taddr = gl.getUniformLocation( program, info.name );\n\n\t\t\tparseUniform( info, addr, this );\n\n\t\t}\n\n\t}\n\n\tsetValue( gl, name, value, textures ) {\n\n\t\tconst u = this.map[ name ];\n\n\t\tif ( u !== undefined ) u.setValue( gl, value, textures );\n\n\t}\n\n\tsetOptional( gl, object, name ) {\n\n\t\tconst v = object[ name ];\n\n\t\tif ( v !== undefined ) this.setValue( gl, name, v );\n\n\t}\n\n\tstatic upload( gl, seq, values, textures ) {\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ],\n\t\t\t\tv = values[ u.id ];\n\n\t\t\tif ( v.needsUpdate !== false ) {\n\n\t\t\t\t// note: always updating when .needsUpdate is undefined\n\t\t\t\tu.setValue( gl, v.value, textures );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tstatic seqWithValue( seq, values ) {\n\n\t\tconst r = [];\n\n\t\tfor ( let i = 0, n = seq.length; i !== n; ++ i ) {\n\n\t\t\tconst u = seq[ i ];\n\t\t\tif ( u.id in values ) r.push( u );\n\n\t\t}\n\n\t\treturn r;\n\n\t}\n\n}\n\nfunction WebGLShader( gl, type, string ) {\n\n\tconst shader = gl.createShader( type );\n\n\tgl.shaderSource( shader, string );\n\tgl.compileShader( shader );\n\n\treturn shader;\n\n}\n\n// From https://www.khronos.org/registry/webgl/extensions/KHR_parallel_shader_compile/\nconst COMPLETION_STATUS_KHR = 0x91B1;\n\nlet programIdCount = 0;\n\nfunction handleSource( string, errorLine ) {\n\n\tconst lines = string.split( '\\n' );\n\tconst lines2 = [];\n\n\tconst from = Math.max( errorLine - 6, 0 );\n\tconst to = Math.min( errorLine + 6, lines.length );\n\n\tfor ( let i = from; i < to; i ++ ) {\n\n\t\tconst line = i + 1;\n\t\tlines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );\n\n\t}\n\n\treturn lines2.join( '\\n' );\n\n}\n\nfunction getEncodingComponents( colorSpace ) {\n\n\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\tconst encodingPrimaries = ColorManagement.getPrimaries( colorSpace );\n\n\tlet gamutMapping;\n\n\tif ( workingPrimaries === encodingPrimaries ) {\n\n\t\tgamutMapping = '';\n\n\t} else if ( workingPrimaries === P3Primaries && encodingPrimaries === Rec709Primaries ) {\n\n\t\tgamutMapping = 'LinearDisplayP3ToLinearSRGB';\n\n\t} else if ( workingPrimaries === Rec709Primaries && encodingPrimaries === P3Primaries ) {\n\n\t\tgamutMapping = 'LinearSRGBToLinearDisplayP3';\n\n\t}\n\n\tswitch ( colorSpace ) {\n\n\t\tcase LinearSRGBColorSpace:\n\t\tcase LinearDisplayP3ColorSpace:\n\t\t\treturn [ gamutMapping, 'LinearTransferOETF' ];\n\n\t\tcase SRGBColorSpace:\n\t\tcase DisplayP3ColorSpace:\n\t\t\treturn [ gamutMapping, 'sRGBTransferOETF' ];\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported color space:', colorSpace );\n\t\t\treturn [ gamutMapping, 'LinearTransferOETF' ];\n\n\t}\n\n}\n\nfunction getShaderErrors( gl, shader, type ) {\n\n\tconst status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );\n\tconst errors = gl.getShaderInfoLog( shader ).trim();\n\n\tif ( status && errors === '' ) return '';\n\n\tconst errorMatches = /ERROR: 0:(\\d+)/.exec( errors );\n\tif ( errorMatches ) {\n\n\t\t// --enable-privileged-webgl-extension\n\t\t// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );\n\n\t\tconst errorLine = parseInt( errorMatches[ 1 ] );\n\t\treturn type.toUpperCase() + '\\n\\n' + errors + '\\n\\n' + handleSource( gl.getShaderSource( shader ), errorLine );\n\n\t} else {\n\n\t\treturn errors;\n\n\t}\n\n}\n\nfunction getTexelEncodingFunction( functionName, colorSpace ) {\n\n\tconst components = getEncodingComponents( colorSpace );\n\treturn `vec4 ${functionName}( vec4 value ) { return ${components[ 0 ]}( ${components[ 1 ]}( value ) ); }`;\n\n}\n\nfunction getToneMappingFunction( functionName, toneMapping ) {\n\n\tlet toneMappingName;\n\n\tswitch ( toneMapping ) {\n\n\t\tcase LinearToneMapping:\n\t\t\ttoneMappingName = 'Linear';\n\t\t\tbreak;\n\n\t\tcase ReinhardToneMapping:\n\t\t\ttoneMappingName = 'Reinhard';\n\t\t\tbreak;\n\n\t\tcase CineonToneMapping:\n\t\t\ttoneMappingName = 'OptimizedCineon';\n\t\t\tbreak;\n\n\t\tcase ACESFilmicToneMapping:\n\t\t\ttoneMappingName = 'ACESFilmic';\n\t\t\tbreak;\n\n\t\tcase CustomToneMapping:\n\t\t\ttoneMappingName = 'Custom';\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tconsole.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );\n\t\t\ttoneMappingName = 'Linear';\n\n\t}\n\n\treturn 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';\n\n}\n\nfunction generateExtensions( parameters ) {\n\n\tconst chunks = [\n\t\t( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',\n\t\t( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',\n\t\t( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',\n\t\t( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''\n\t];\n\n\treturn chunks.filter( filterEmptyLine ).join( '\\n' );\n\n}\n\nfunction generateDefines( defines ) {\n\n\tconst chunks = [];\n\n\tfor ( const name in defines ) {\n\n\t\tconst value = defines[ name ];\n\n\t\tif ( value === false ) continue;\n\n\t\tchunks.push( '#define ' + name + ' ' + value );\n\n\t}\n\n\treturn chunks.join( '\\n' );\n\n}\n\nfunction fetchAttributeLocations( gl, program ) {\n\n\tconst attributes = {};\n\n\tconst n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );\n\n\tfor ( let i = 0; i < n; i ++ ) {\n\n\t\tconst info = gl.getActiveAttrib( program, i );\n\t\tconst name = info.name;\n\n\t\tlet locationSize = 1;\n\t\tif ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;\n\t\tif ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;\n\t\tif ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;\n\n\t\t// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );\n\n\t\tattributes[ name ] = {\n\t\t\ttype: info.type,\n\t\t\tlocation: gl.getAttribLocation( program, name ),\n\t\t\tlocationSize: locationSize\n\t\t};\n\n\t}\n\n\treturn attributes;\n\n}\n\nfunction filterEmptyLine( string ) {\n\n\treturn string !== '';\n\n}\n\nfunction replaceLightNums( string, parameters ) {\n\n\tconst numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;\n\n\treturn string\n\t\t.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )\n\t\t.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )\n\t\t.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )\n\t\t.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )\n\t\t.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )\n\t\t.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )\n\t\t.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )\n\t\t.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )\n\t\t.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );\n\n}\n\nfunction replaceClippingPlaneNums( string, parameters ) {\n\n\treturn string\n\t\t.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )\n\t\t.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );\n\n}\n\n// Resolve Includes\n\nconst includePattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\nfunction resolveIncludes( string ) {\n\n\treturn string.replace( includePattern, includeReplacer );\n\n}\n\nconst shaderChunkMap = new Map( [\n\t[ 'encodings_fragment', 'colorspace_fragment' ], // @deprecated, r154\n\t[ 'encodings_pars_fragment', 'colorspace_pars_fragment' ], // @deprecated, r154\n\t[ 'output_fragment', 'opaque_fragment' ], // @deprecated, r154\n] );\n\nfunction includeReplacer( match, include ) {\n\n\tlet string = ShaderChunk[ include ];\n\n\tif ( string === undefined ) {\n\n\t\tconst newInclude = shaderChunkMap.get( include );\n\n\t\tif ( newInclude !== undefined ) {\n\n\t\t\tstring = ShaderChunk[ newInclude ];\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Shader chunk \"%s\" has been deprecated. Use \"%s\" instead.', include, newInclude );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Can not resolve #include <' + include + '>' );\n\n\t\t}\n\n\t}\n\n\treturn resolveIncludes( string );\n\n}\n\n// Unroll Loops\n\nconst unrollLoopPattern = /#pragma unroll_loop_start\\s+for\\s*\\(\\s*int\\s+i\\s*=\\s*(\\d+)\\s*;\\s*i\\s*<\\s*(\\d+)\\s*;\\s*i\\s*\\+\\+\\s*\\)\\s*{([\\s\\S]+?)}\\s+#pragma unroll_loop_end/g;\n\nfunction unrollLoops( string ) {\n\n\treturn string.replace( unrollLoopPattern, loopReplacer );\n\n}\n\nfunction loopReplacer( match, start, end, snippet ) {\n\n\tlet string = '';\n\n\tfor ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {\n\n\t\tstring += snippet\n\t\t\t.replace( /\\[\\s*i\\s*\\]/g, '[ ' + i + ' ]' )\n\t\t\t.replace( /UNROLLED_LOOP_INDEX/g, i );\n\n\t}\n\n\treturn string;\n\n}\n\n//\n\nfunction generatePrecision( parameters ) {\n\n\tlet precisionstring = 'precision ' + parameters.precision + ' float;\\nprecision ' + parameters.precision + ' int;';\n\n\tif ( parameters.precision === 'highp' ) {\n\n\t\tprecisionstring += '\\n#define HIGH_PRECISION';\n\n\t} else if ( parameters.precision === 'mediump' ) {\n\n\t\tprecisionstring += '\\n#define MEDIUM_PRECISION';\n\n\t} else if ( parameters.precision === 'lowp' ) {\n\n\t\tprecisionstring += '\\n#define LOW_PRECISION';\n\n\t}\n\n\treturn precisionstring;\n\n}\n\nfunction generateShadowMapTypeDefine( parameters ) {\n\n\tlet shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';\n\n\tif ( parameters.shadowMapType === PCFShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';\n\n\t} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';\n\n\t} else if ( parameters.shadowMapType === VSMShadowMap ) {\n\n\t\tshadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';\n\n\t}\n\n\treturn shadowMapTypeDefine;\n\n}\n\nfunction generateEnvMapTypeDefine( parameters ) {\n\n\tlet envMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeReflectionMapping:\n\t\t\tcase CubeRefractionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE';\n\t\t\t\tbreak;\n\n\t\t\tcase CubeUVReflectionMapping:\n\t\t\t\tenvMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapTypeDefine;\n\n}\n\nfunction generateEnvMapModeDefine( parameters ) {\n\n\tlet envMapModeDefine = 'ENVMAP_MODE_REFLECTION';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.envMapMode ) {\n\n\t\t\tcase CubeRefractionMapping:\n\n\t\t\t\tenvMapModeDefine = 'ENVMAP_MODE_REFRACTION';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapModeDefine;\n\n}\n\nfunction generateEnvMapBlendingDefine( parameters ) {\n\n\tlet envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';\n\n\tif ( parameters.envMap ) {\n\n\t\tswitch ( parameters.combine ) {\n\n\t\t\tcase MultiplyOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';\n\t\t\t\tbreak;\n\n\t\t\tcase MixOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_MIX';\n\t\t\t\tbreak;\n\n\t\t\tcase AddOperation:\n\t\t\t\tenvMapBlendingDefine = 'ENVMAP_BLENDING_ADD';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\treturn envMapBlendingDefine;\n\n}\n\nfunction generateCubeUVSize( parameters ) {\n\n\tconst imageHeight = parameters.envMapCubeUVHeight;\n\n\tif ( imageHeight === null ) return null;\n\n\tconst maxMip = Math.log2( imageHeight ) - 2;\n\n\tconst texelHeight = 1.0 / imageHeight;\n\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\n\n\treturn { texelWidth, texelHeight, maxMip };\n\n}\n\nfunction WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {\n\n\t// TODO Send this event to Three.js DevTools\n\t// console.log( 'WebGLProgram', cacheKey );\n\n\tconst gl = renderer.getContext();\n\n\tconst defines = parameters.defines;\n\n\tlet vertexShader = parameters.vertexShader;\n\tlet fragmentShader = parameters.fragmentShader;\n\n\tconst shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );\n\tconst envMapTypeDefine = generateEnvMapTypeDefine( parameters );\n\tconst envMapModeDefine = generateEnvMapModeDefine( parameters );\n\tconst envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );\n\tconst envMapCubeUVSize = generateCubeUVSize( parameters );\n\n\tconst customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );\n\n\tconst customDefines = generateDefines( defines );\n\n\tconst program = gl.createProgram();\n\n\tlet prefixVertex, prefixFragment;\n\tlet versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\\n' : '';\n\n\tif ( parameters.isRawShaderMaterial ) {\n\n\t\tprefixVertex = [\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixVertex.length > 0 ) {\n\n\t\t\tprefixVertex += '\\n';\n\n\t\t}\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tif ( prefixFragment.length > 0 ) {\n\n\t\t\tprefixFragment += '\\n';\n\n\t\t}\n\n\t} else {\n\n\t\tprefixVertex = [\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.instancing ? '#define USE_INSTANCING' : '',\n\t\t\tparameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',\n\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\n\t\t\tparameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\n\t\t\tparameters.anisotropy ? '#define USE_ANISOTROPY' : '',\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\n\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaHash ? '#define USE_ALPHAHASH' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\n\n\t\t\t//\n\n\t\t\tparameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',\n\t\t\tparameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',\n\t\t\tparameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',\n\t\t\tparameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',\n\t\t\tparameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',\n\t\t\tparameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',\n\t\t\tparameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',\n\t\t\tparameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',\n\n\t\t\tparameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',\n\t\t\tparameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',\n\n\t\t\tparameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',\n\n\t\t\tparameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',\n\t\t\tparameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',\n\t\t\tparameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',\n\n\t\t\tparameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',\n\t\t\tparameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',\n\n\t\t\tparameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',\n\t\t\tparameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',\n\n\t\t\tparameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',\n\t\t\tparameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',\n\t\t\tparameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',\n\n\t\t\tparameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',\n\t\t\tparameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',\n\n\t\t\t//\n\n\t\t\tparameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\n\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.skinning ? '#define USE_SKINNING' : '',\n\n\t\t\tparameters.morphTargets ? '#define USE_MORPHTARGETS' : '',\n\t\t\tparameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',\n\t\t\t( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',\n\t\t\t( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',\n\n\t\t\tparameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',\n\n\t\t\tparameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 modelMatrix;',\n\t\t\t'uniform mat4 modelViewMatrix;',\n\t\t\t'uniform mat4 projectionMatrix;',\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform mat3 normalMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t'#ifdef USE_INSTANCING',\n\n\t\t\t'\tattribute mat4 instanceMatrix;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_INSTANCING_COLOR',\n\n\t\t\t'\tattribute vec3 instanceColor;',\n\n\t\t\t'#endif',\n\n\t\t\t'attribute vec3 position;',\n\t\t\t'attribute vec3 normal;',\n\t\t\t'attribute vec2 uv;',\n\n\t\t\t'#ifdef USE_UV1',\n\n\t\t\t'\tattribute vec2 uv1;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_UV2',\n\n\t\t\t'\tattribute vec2 uv2;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_UV3',\n\n\t\t\t'\tattribute vec2 uv3;',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_TANGENT',\n\n\t\t\t'\tattribute vec4 tangent;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if defined( USE_COLOR_ALPHA )',\n\n\t\t\t'\tattribute vec4 color;',\n\n\t\t\t'#elif defined( USE_COLOR )',\n\n\t\t\t'\tattribute vec3 color;',\n\n\t\t\t'#endif',\n\n\t\t\t'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',\n\n\t\t\t'\tattribute vec3 morphTarget0;',\n\t\t\t'\tattribute vec3 morphTarget1;',\n\t\t\t'\tattribute vec3 morphTarget2;',\n\t\t\t'\tattribute vec3 morphTarget3;',\n\n\t\t\t'\t#ifdef USE_MORPHNORMALS',\n\n\t\t\t'\t\tattribute vec3 morphNormal0;',\n\t\t\t'\t\tattribute vec3 morphNormal1;',\n\t\t\t'\t\tattribute vec3 morphNormal2;',\n\t\t\t'\t\tattribute vec3 morphNormal3;',\n\n\t\t\t'\t#else',\n\n\t\t\t'\t\tattribute vec3 morphTarget4;',\n\t\t\t'\t\tattribute vec3 morphTarget5;',\n\t\t\t'\t\tattribute vec3 morphTarget6;',\n\t\t\t'\t\tattribute vec3 morphTarget7;',\n\n\t\t\t'\t#endif',\n\n\t\t\t'#endif',\n\n\t\t\t'#ifdef USE_SKINNING',\n\n\t\t\t'\tattribute vec4 skinIndex;',\n\t\t\t'\tattribute vec4 skinWeight;',\n\n\t\t\t'#endif',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t\tprefixFragment = [\n\n\t\t\tcustomExtensions,\n\n\t\t\tgeneratePrecision( parameters ),\n\n\t\t\t'#define SHADER_TYPE ' + parameters.shaderType,\n\t\t\t'#define SHADER_NAME ' + parameters.shaderName,\n\n\t\t\tcustomDefines,\n\n\t\t\tparameters.useFog && parameters.fog ? '#define USE_FOG' : '',\n\t\t\tparameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',\n\n\t\t\tparameters.map ? '#define USE_MAP' : '',\n\t\t\tparameters.matcap ? '#define USE_MATCAP' : '',\n\t\t\tparameters.envMap ? '#define USE_ENVMAP' : '',\n\t\t\tparameters.envMap ? '#define ' + envMapTypeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapModeDefine : '',\n\t\t\tparameters.envMap ? '#define ' + envMapBlendingDefine : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',\n\t\t\tenvMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',\n\t\t\tparameters.lightMap ? '#define USE_LIGHTMAP' : '',\n\t\t\tparameters.aoMap ? '#define USE_AOMAP' : '',\n\t\t\tparameters.bumpMap ? '#define USE_BUMPMAP' : '',\n\t\t\tparameters.normalMap ? '#define USE_NORMALMAP' : '',\n\t\t\tparameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',\n\t\t\tparameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',\n\t\t\tparameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',\n\n\t\t\tparameters.anisotropy ? '#define USE_ANISOTROPY' : '',\n\t\t\tparameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',\n\n\t\t\tparameters.clearcoat ? '#define USE_CLEARCOAT' : '',\n\t\t\tparameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',\n\t\t\tparameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',\n\t\t\tparameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',\n\n\t\t\tparameters.iridescence ? '#define USE_IRIDESCENCE' : '',\n\t\t\tparameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',\n\t\t\tparameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',\n\n\t\t\tparameters.specularMap ? '#define USE_SPECULARMAP' : '',\n\t\t\tparameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',\n\t\t\tparameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',\n\n\t\t\tparameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',\n\t\t\tparameters.metalnessMap ? '#define USE_METALNESSMAP' : '',\n\n\t\t\tparameters.alphaMap ? '#define USE_ALPHAMAP' : '',\n\t\t\tparameters.alphaTest ? '#define USE_ALPHATEST' : '',\n\t\t\tparameters.alphaHash ? '#define USE_ALPHAHASH' : '',\n\n\t\t\tparameters.sheen ? '#define USE_SHEEN' : '',\n\t\t\tparameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',\n\t\t\tparameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',\n\n\t\t\tparameters.transmission ? '#define USE_TRANSMISSION' : '',\n\t\t\tparameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',\n\t\t\tparameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',\n\n\t\t\tparameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',\n\t\t\tparameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',\n\t\t\tparameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',\n\t\t\tparameters.vertexUv1s ? '#define USE_UV1' : '',\n\t\t\tparameters.vertexUv2s ? '#define USE_UV2' : '',\n\t\t\tparameters.vertexUv3s ? '#define USE_UV3' : '',\n\n\t\t\tparameters.pointsUvs ? '#define USE_POINTS_UV' : '',\n\n\t\t\tparameters.gradientMap ? '#define USE_GRADIENTMAP' : '',\n\n\t\t\tparameters.flatShading ? '#define FLAT_SHADED' : '',\n\n\t\t\tparameters.doubleSided ? '#define DOUBLE_SIDED' : '',\n\t\t\tparameters.flipSided ? '#define FLIP_SIDED' : '',\n\n\t\t\tparameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',\n\t\t\tparameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',\n\n\t\t\tparameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',\n\n\t\t\tparameters.numLightProbes > 0 ? '#define USE_LIGHT_PROBES' : '',\n\n\t\t\tparameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',\n\n\t\t\tparameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',\n\n\t\t\tparameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',\n\t\t\t( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',\n\n\t\t\t'uniform mat4 viewMatrix;',\n\t\t\t'uniform vec3 cameraPosition;',\n\t\t\t'uniform bool isOrthographic;',\n\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below\n\t\t\t( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',\n\n\t\t\tparameters.dithering ? '#define DITHERING' : '',\n\t\t\tparameters.opaque ? '#define OPAQUE' : '',\n\n\t\t\tShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below\n\t\t\tgetTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),\n\n\t\t\tparameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',\n\n\t\t\t'\\n'\n\n\t\t].filter( filterEmptyLine ).join( '\\n' );\n\n\t}\n\n\tvertexShader = resolveIncludes( vertexShader );\n\tvertexShader = replaceLightNums( vertexShader, parameters );\n\tvertexShader = replaceClippingPlaneNums( vertexShader, parameters );\n\n\tfragmentShader = resolveIncludes( fragmentShader );\n\tfragmentShader = replaceLightNums( fragmentShader, parameters );\n\tfragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );\n\n\tvertexShader = unrollLoops( vertexShader );\n\tfragmentShader = unrollLoops( fragmentShader );\n\n\tif ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {\n\n\t\t// GLSL 3.0 conversion for built-in materials and ShaderMaterial\n\n\t\tversionString = '#version 300 es\\n';\n\n\t\tprefixVertex = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define attribute in',\n\t\t\t'#define varying out',\n\t\t\t'#define texture2D texture'\n\t\t].join( '\\n' ) + '\\n' + prefixVertex;\n\n\t\tprefixFragment = [\n\t\t\t'precision mediump sampler2DArray;',\n\t\t\t'#define varying in',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',\n\t\t\t( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',\n\t\t\t'#define gl_FragDepthEXT gl_FragDepth',\n\t\t\t'#define texture2D texture',\n\t\t\t'#define textureCube texture',\n\t\t\t'#define texture2DProj textureProj',\n\t\t\t'#define texture2DLodEXT textureLod',\n\t\t\t'#define texture2DProjLodEXT textureProjLod',\n\t\t\t'#define textureCubeLodEXT textureLod',\n\t\t\t'#define texture2DGradEXT textureGrad',\n\t\t\t'#define texture2DProjGradEXT textureProjGrad',\n\t\t\t'#define textureCubeGradEXT textureGrad'\n\t\t].join( '\\n' ) + '\\n' + prefixFragment;\n\n\t}\n\n\tconst vertexGlsl = versionString + prefixVertex + vertexShader;\n\tconst fragmentGlsl = versionString + prefixFragment + fragmentShader;\n\n\t// console.log( '*VERTEX*', vertexGlsl );\n\t// console.log( '*FRAGMENT*', fragmentGlsl );\n\n\tconst glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );\n\tconst glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );\n\n\tgl.attachShader( program, glVertexShader );\n\tgl.attachShader( program, glFragmentShader );\n\n\t// Force a particular attribute to index 0.\n\n\tif ( parameters.index0AttributeName !== undefined ) {\n\n\t\tgl.bindAttribLocation( program, 0, parameters.index0AttributeName );\n\n\t} else if ( parameters.morphTargets === true ) {\n\n\t\t// programs with morphTargets displace position out of attribute 0\n\t\tgl.bindAttribLocation( program, 0, 'position' );\n\n\t}\n\n\tgl.linkProgram( program );\n\n\tfunction onFirstUse( self ) {\n\n\t\t// check for link errors\n\t\tif ( renderer.debug.checkShaderErrors ) {\n\n\t\t\tconst programLog = gl.getProgramInfoLog( program ).trim();\n\t\t\tconst vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();\n\t\t\tconst fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();\n\n\t\t\tlet runnable = true;\n\t\t\tlet haveDiagnostics = true;\n\n\t\t\tif ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {\n\n\t\t\t\trunnable = false;\n\n\t\t\t\tif ( typeof renderer.debug.onShaderError === 'function' ) {\n\n\t\t\t\t\trenderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// default error reporting\n\n\t\t\t\t\tconst vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );\n\t\t\t\t\tconst fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );\n\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +\n\t\t\t\t\t\t'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\\n\\n' +\n\t\t\t\t\t\t'Program Info Log: ' + programLog + '\\n' +\n\t\t\t\t\t\tvertexErrors + '\\n' +\n\t\t\t\t\t\tfragmentErrors\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t} else if ( programLog !== '' ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );\n\n\t\t\t} else if ( vertexLog === '' || fragmentLog === '' ) {\n\n\t\t\t\thaveDiagnostics = false;\n\n\t\t\t}\n\n\t\t\tif ( haveDiagnostics ) {\n\n\t\t\t\tself.diagnostics = {\n\n\t\t\t\t\trunnable: runnable,\n\n\t\t\t\t\tprogramLog: programLog,\n\n\t\t\t\t\tvertexShader: {\n\n\t\t\t\t\t\tlog: vertexLog,\n\t\t\t\t\t\tprefix: prefixVertex\n\n\t\t\t\t\t},\n\n\t\t\t\t\tfragmentShader: {\n\n\t\t\t\t\t\tlog: fragmentLog,\n\t\t\t\t\t\tprefix: prefixFragment\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Clean up\n\n\t\t// Crashes in iOS9 and iOS10. #18402\n\t\t// gl.detachShader( program, glVertexShader );\n\t\t// gl.detachShader( program, glFragmentShader );\n\n\t\tgl.deleteShader( glVertexShader );\n\t\tgl.deleteShader( glFragmentShader );\n\n\t\tcachedUniforms = new WebGLUniforms( gl, program );\n\t\tcachedAttributes = fetchAttributeLocations( gl, program );\n\n\t}\n\n\t// set up caching for uniform locations\n\n\tlet cachedUniforms;\n\n\tthis.getUniforms = function () {\n\n\t\tif ( cachedUniforms === undefined ) {\n\n\t\t\t// Populates cachedUniforms and cachedAttributes\n\t\t\tonFirstUse( this );\n\n\t\t}\n\n\t\treturn cachedUniforms;\n\n\t};\n\n\t// set up caching for attribute locations\n\n\tlet cachedAttributes;\n\n\tthis.getAttributes = function () {\n\n\t\tif ( cachedAttributes === undefined ) {\n\n\t\t\t// Populates cachedAttributes and cachedUniforms\n\t\t\tonFirstUse( this );\n\n\t\t}\n\n\t\treturn cachedAttributes;\n\n\t};\n\n\t// indicate when the program is ready to be used. if the KHR_parallel_shader_compile extension isn't supported,\n\t// flag the program as ready immediately. It may cause a stall when it's first used.\n\n\tlet programReady = ( parameters.rendererExtensionParallelShaderCompile === false );\n\n\tthis.isReady = function () {\n\n\t\tif ( programReady === false ) {\n\n\t\t\tprogramReady = gl.getProgramParameter( program, COMPLETION_STATUS_KHR );\n\n\t\t}\n\n\t\treturn programReady;\n\n\t};\n\n\t// free resource\n\n\tthis.destroy = function () {\n\n\t\tbindingStates.releaseStatesOfProgram( this );\n\n\t\tgl.deleteProgram( program );\n\t\tthis.program = undefined;\n\n\t};\n\n\t//\n\n\tthis.type = parameters.shaderType;\n\tthis.name = parameters.shaderName;\n\tthis.id = programIdCount ++;\n\tthis.cacheKey = cacheKey;\n\tthis.usedTimes = 1;\n\tthis.program = program;\n\tthis.vertexShader = glVertexShader;\n\tthis.fragmentShader = glFragmentShader;\n\n\treturn this;\n\n}\n\nlet _id$1 = 0;\n\nclass WebGLShaderCache {\n\n\tconstructor() {\n\n\t\tthis.shaderCache = new Map();\n\t\tthis.materialCache = new Map();\n\n\t}\n\n\tupdate( material ) {\n\n\t\tconst vertexShader = material.vertexShader;\n\t\tconst fragmentShader = material.fragmentShader;\n\n\t\tconst vertexShaderStage = this._getShaderStage( vertexShader );\n\t\tconst fragmentShaderStage = this._getShaderStage( fragmentShader );\n\n\t\tconst materialShaders = this._getShaderCacheForMaterial( material );\n\n\t\tif ( materialShaders.has( vertexShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( vertexShaderStage );\n\t\t\tvertexShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\tif ( materialShaders.has( fragmentShaderStage ) === false ) {\n\n\t\t\tmaterialShaders.add( fragmentShaderStage );\n\t\t\tfragmentShaderStage.usedTimes ++;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tremove( material ) {\n\n\t\tconst materialShaders = this.materialCache.get( material );\n\n\t\tfor ( const shaderStage of materialShaders ) {\n\n\t\t\tshaderStage.usedTimes --;\n\n\t\t\tif ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );\n\n\t\t}\n\n\t\tthis.materialCache.delete( material );\n\n\t\treturn this;\n\n\t}\n\n\tgetVertexShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.vertexShader ).id;\n\n\t}\n\n\tgetFragmentShaderID( material ) {\n\n\t\treturn this._getShaderStage( material.fragmentShader ).id;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shaderCache.clear();\n\t\tthis.materialCache.clear();\n\n\t}\n\n\t_getShaderCacheForMaterial( material ) {\n\n\t\tconst cache = this.materialCache;\n\t\tlet set = cache.get( material );\n\n\t\tif ( set === undefined ) {\n\n\t\t\tset = new Set();\n\t\t\tcache.set( material, set );\n\n\t\t}\n\n\t\treturn set;\n\n\t}\n\n\t_getShaderStage( code ) {\n\n\t\tconst cache = this.shaderCache;\n\t\tlet stage = cache.get( code );\n\n\t\tif ( stage === undefined ) {\n\n\t\t\tstage = new WebGLShaderStage( code );\n\t\t\tcache.set( code, stage );\n\n\t\t}\n\n\t\treturn stage;\n\n\t}\n\n}\n\nclass WebGLShaderStage {\n\n\tconstructor( code ) {\n\n\t\tthis.id = _id$1 ++;\n\n\t\tthis.code = code;\n\t\tthis.usedTimes = 0;\n\n\t}\n\n}\n\nfunction WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {\n\n\tconst _programLayers = new Layers();\n\tconst _customShaders = new WebGLShaderCache();\n\tconst programs = [];\n\n\tconst IS_WEBGL2 = capabilities.isWebGL2;\n\tconst logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;\n\tconst SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;\n\n\tlet precision = capabilities.precision;\n\n\tconst shaderIDs = {\n\t\tMeshDepthMaterial: 'depth',\n\t\tMeshDistanceMaterial: 'distanceRGBA',\n\t\tMeshNormalMaterial: 'normal',\n\t\tMeshBasicMaterial: 'basic',\n\t\tMeshLambertMaterial: 'lambert',\n\t\tMeshPhongMaterial: 'phong',\n\t\tMeshToonMaterial: 'toon',\n\t\tMeshStandardMaterial: 'physical',\n\t\tMeshPhysicalMaterial: 'physical',\n\t\tMeshMatcapMaterial: 'matcap',\n\t\tLineBasicMaterial: 'basic',\n\t\tLineDashedMaterial: 'dashed',\n\t\tPointsMaterial: 'points',\n\t\tShadowMaterial: 'shadow',\n\t\tSpriteMaterial: 'sprite'\n\t};\n\n\tfunction getChannel( value ) {\n\n\t\tif ( value === 0 ) return 'uv';\n\n\t\treturn `uv${ value }`;\n\n\t}\n\n\tfunction getParameters( material, lights, shadows, scene, object ) {\n\n\t\tconst fog = scene.fog;\n\t\tconst geometry = object.geometry;\n\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\n\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\tconst envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\n\t\t// heuristics to create shader parameters according to lights in the scene\n\t\t// (not to blow over maxLights budget)\n\n\t\tif ( material.precision !== null ) {\n\n\t\t\tprecision = capabilities.getMaxPrecision( material.precision );\n\n\t\t\tif ( precision !== material.precision ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\tlet morphTextureStride = 0;\n\n\t\tif ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;\n\t\tif ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;\n\t\tif ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;\n\n\t\t//\n\n\t\tlet vertexShader, fragmentShader;\n\t\tlet customVertexShaderID, customFragmentShaderID;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\n\t\t\tvertexShader = shader.vertexShader;\n\t\t\tfragmentShader = shader.fragmentShader;\n\n\t\t} else {\n\n\t\t\tvertexShader = material.vertexShader;\n\t\t\tfragmentShader = material.fragmentShader;\n\n\t\t\t_customShaders.update( material );\n\n\t\t\tcustomVertexShaderID = _customShaders.getVertexShaderID( material );\n\t\t\tcustomFragmentShaderID = _customShaders.getFragmentShaderID( material );\n\n\t\t}\n\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\tconst IS_INSTANCEDMESH = object.isInstancedMesh === true;\n\n\t\tconst HAS_MAP = !! material.map;\n\t\tconst HAS_MATCAP = !! material.matcap;\n\t\tconst HAS_ENVMAP = !! envMap;\n\t\tconst HAS_AOMAP = !! material.aoMap;\n\t\tconst HAS_LIGHTMAP = !! material.lightMap;\n\t\tconst HAS_BUMPMAP = !! material.bumpMap;\n\t\tconst HAS_NORMALMAP = !! material.normalMap;\n\t\tconst HAS_DISPLACEMENTMAP = !! material.displacementMap;\n\t\tconst HAS_EMISSIVEMAP = !! material.emissiveMap;\n\n\t\tconst HAS_METALNESSMAP = !! material.metalnessMap;\n\t\tconst HAS_ROUGHNESSMAP = !! material.roughnessMap;\n\n\t\tconst HAS_ANISOTROPY = material.anisotropy > 0;\n\t\tconst HAS_CLEARCOAT = material.clearcoat > 0;\n\t\tconst HAS_IRIDESCENCE = material.iridescence > 0;\n\t\tconst HAS_SHEEN = material.sheen > 0;\n\t\tconst HAS_TRANSMISSION = material.transmission > 0;\n\n\t\tconst HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;\n\n\t\tconst HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;\n\t\tconst HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;\n\t\tconst HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;\n\n\t\tconst HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;\n\t\tconst HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;\n\n\t\tconst HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;\n\t\tconst HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;\n\n\t\tconst HAS_SPECULARMAP = !! material.specularMap;\n\t\tconst HAS_SPECULAR_COLORMAP = !! material.specularColorMap;\n\t\tconst HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;\n\n\t\tconst HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;\n\t\tconst HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;\n\n\t\tconst HAS_GRADIENTMAP = !! material.gradientMap;\n\n\t\tconst HAS_ALPHAMAP = !! material.alphaMap;\n\n\t\tconst HAS_ALPHATEST = material.alphaTest > 0;\n\n\t\tconst HAS_ALPHAHASH = !! material.alphaHash;\n\n\t\tconst HAS_EXTENSIONS = !! material.extensions;\n\n\t\tconst HAS_ATTRIBUTE_UV1 = !! geometry.attributes.uv1;\n\t\tconst HAS_ATTRIBUTE_UV2 = !! geometry.attributes.uv2;\n\t\tconst HAS_ATTRIBUTE_UV3 = !! geometry.attributes.uv3;\n\n\t\tlet toneMapping = NoToneMapping;\n\n\t\tif ( material.toneMapped ) {\n\n\t\t\tif ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\t\t\ttoneMapping = renderer.toneMapping;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst parameters = {\n\n\t\t\tisWebGL2: IS_WEBGL2,\n\n\t\t\tshaderID: shaderID,\n\t\t\tshaderType: material.type,\n\t\t\tshaderName: material.name,\n\n\t\t\tvertexShader: vertexShader,\n\t\t\tfragmentShader: fragmentShader,\n\t\t\tdefines: material.defines,\n\n\t\t\tcustomVertexShaderID: customVertexShaderID,\n\t\t\tcustomFragmentShaderID: customFragmentShaderID,\n\n\t\t\tisRawShaderMaterial: material.isRawShaderMaterial === true,\n\t\t\tglslVersion: material.glslVersion,\n\n\t\t\tprecision: precision,\n\n\t\t\tinstancing: IS_INSTANCEDMESH,\n\t\t\tinstancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,\n\n\t\t\tsupportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,\n\t\t\toutputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),\n\n\t\t\tmap: HAS_MAP,\n\t\t\tmatcap: HAS_MATCAP,\n\t\t\tenvMap: HAS_ENVMAP,\n\t\t\tenvMapMode: HAS_ENVMAP && envMap.mapping,\n\t\t\tenvMapCubeUVHeight: envMapCubeUVHeight,\n\t\t\taoMap: HAS_AOMAP,\n\t\t\tlightMap: HAS_LIGHTMAP,\n\t\t\tbumpMap: HAS_BUMPMAP,\n\t\t\tnormalMap: HAS_NORMALMAP,\n\t\t\tdisplacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,\n\t\t\temissiveMap: HAS_EMISSIVEMAP,\n\n\t\t\tnormalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,\n\t\t\tnormalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,\n\n\t\t\tmetalnessMap: HAS_METALNESSMAP,\n\t\t\troughnessMap: HAS_ROUGHNESSMAP,\n\n\t\t\tanisotropy: HAS_ANISOTROPY,\n\t\t\tanisotropyMap: HAS_ANISOTROPYMAP,\n\n\t\t\tclearcoat: HAS_CLEARCOAT,\n\t\t\tclearcoatMap: HAS_CLEARCOATMAP,\n\t\t\tclearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,\n\t\t\tclearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,\n\n\t\t\tiridescence: HAS_IRIDESCENCE,\n\t\t\tiridescenceMap: HAS_IRIDESCENCEMAP,\n\t\t\tiridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,\n\n\t\t\tsheen: HAS_SHEEN,\n\t\t\tsheenColorMap: HAS_SHEEN_COLORMAP,\n\t\t\tsheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,\n\n\t\t\tspecularMap: HAS_SPECULARMAP,\n\t\t\tspecularColorMap: HAS_SPECULAR_COLORMAP,\n\t\t\tspecularIntensityMap: HAS_SPECULAR_INTENSITYMAP,\n\n\t\t\ttransmission: HAS_TRANSMISSION,\n\t\t\ttransmissionMap: HAS_TRANSMISSIONMAP,\n\t\t\tthicknessMap: HAS_THICKNESSMAP,\n\n\t\t\tgradientMap: HAS_GRADIENTMAP,\n\n\t\t\topaque: material.transparent === false && material.blending === NormalBlending,\n\n\t\t\talphaMap: HAS_ALPHAMAP,\n\t\t\talphaTest: HAS_ALPHATEST,\n\t\t\talphaHash: HAS_ALPHAHASH,\n\n\t\t\tcombine: material.combine,\n\n\t\t\t//\n\n\t\t\tmapUv: HAS_MAP && getChannel( material.map.channel ),\n\t\t\taoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),\n\t\t\tlightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),\n\t\t\tbumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),\n\t\t\tnormalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),\n\t\t\tdisplacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),\n\t\t\temissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),\n\n\t\t\tmetalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),\n\t\t\troughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),\n\n\t\t\tanisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),\n\n\t\t\tclearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),\n\t\t\tclearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),\n\t\t\tclearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),\n\n\t\t\tiridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),\n\t\t\tiridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),\n\n\t\t\tsheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),\n\t\t\tsheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),\n\n\t\t\tspecularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),\n\t\t\tspecularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),\n\t\t\tspecularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),\n\n\t\t\ttransmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),\n\t\t\tthicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),\n\n\t\t\talphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),\n\n\t\t\t//\n\n\t\t\tvertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),\n\t\t\tvertexColors: material.vertexColors,\n\t\t\tvertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,\n\t\t\tvertexUv1s: HAS_ATTRIBUTE_UV1,\n\t\t\tvertexUv2s: HAS_ATTRIBUTE_UV2,\n\t\t\tvertexUv3s: HAS_ATTRIBUTE_UV3,\n\n\t\t\tpointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),\n\n\t\t\tfog: !! fog,\n\t\t\tuseFog: material.fog === true,\n\t\t\tfogExp2: ( fog && fog.isFogExp2 ),\n\n\t\t\tflatShading: material.flatShading === true,\n\n\t\t\tsizeAttenuation: material.sizeAttenuation === true,\n\t\t\tlogarithmicDepthBuffer: logarithmicDepthBuffer,\n\n\t\t\tskinning: object.isSkinnedMesh === true,\n\n\t\t\tmorphTargets: geometry.morphAttributes.position !== undefined,\n\t\t\tmorphNormals: geometry.morphAttributes.normal !== undefined,\n\t\t\tmorphColors: geometry.morphAttributes.color !== undefined,\n\t\t\tmorphTargetsCount: morphTargetsCount,\n\t\t\tmorphTextureStride: morphTextureStride,\n\n\t\t\tnumDirLights: lights.directional.length,\n\t\t\tnumPointLights: lights.point.length,\n\t\t\tnumSpotLights: lights.spot.length,\n\t\t\tnumSpotLightMaps: lights.spotLightMap.length,\n\t\t\tnumRectAreaLights: lights.rectArea.length,\n\t\t\tnumHemiLights: lights.hemi.length,\n\n\t\t\tnumDirLightShadows: lights.directionalShadowMap.length,\n\t\t\tnumPointLightShadows: lights.pointShadowMap.length,\n\t\t\tnumSpotLightShadows: lights.spotShadowMap.length,\n\t\t\tnumSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,\n\n\t\t\tnumLightProbes: lights.numLightProbes,\n\n\t\t\tnumClippingPlanes: clipping.numPlanes,\n\t\t\tnumClipIntersection: clipping.numIntersection,\n\n\t\t\tdithering: material.dithering,\n\n\t\t\tshadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,\n\t\t\tshadowMapType: renderer.shadowMap.type,\n\n\t\t\ttoneMapping: toneMapping,\n\t\t\tuseLegacyLights: renderer._useLegacyLights,\n\n\t\t\tdecodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( ColorManagement.getTransfer( material.map.colorSpace ) === SRGBTransfer ),\n\n\t\t\tpremultipliedAlpha: material.premultipliedAlpha,\n\n\t\t\tdoubleSided: material.side === DoubleSide,\n\t\t\tflipSided: material.side === BackSide,\n\n\t\t\tuseDepthPacking: material.depthPacking >= 0,\n\t\t\tdepthPacking: material.depthPacking || 0,\n\n\t\t\tindex0AttributeName: material.index0AttributeName,\n\n\t\t\textensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,\n\t\t\textensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,\n\t\t\textensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,\n\t\t\textensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,\n\n\t\t\trendererExtensionFragDepth: IS_WEBGL2 || extensions.has( 'EXT_frag_depth' ),\n\t\t\trendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has( 'WEBGL_draw_buffers' ),\n\t\t\trendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has( 'EXT_shader_texture_lod' ),\n\t\t\trendererExtensionParallelShaderCompile: extensions.has( 'KHR_parallel_shader_compile' ),\n\n\t\t\tcustomProgramCacheKey: material.customProgramCacheKey()\n\n\t\t};\n\n\t\treturn parameters;\n\n\t}\n\n\tfunction getProgramCacheKey( parameters ) {\n\n\t\tconst array = [];\n\n\t\tif ( parameters.shaderID ) {\n\n\t\t\tarray.push( parameters.shaderID );\n\n\t\t} else {\n\n\t\t\tarray.push( parameters.customVertexShaderID );\n\t\t\tarray.push( parameters.customFragmentShaderID );\n\n\t\t}\n\n\t\tif ( parameters.defines !== undefined ) {\n\n\t\t\tfor ( const name in parameters.defines ) {\n\n\t\t\t\tarray.push( name );\n\t\t\t\tarray.push( parameters.defines[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parameters.isRawShaderMaterial === false ) {\n\n\t\t\tgetProgramCacheKeyParameters( array, parameters );\n\t\t\tgetProgramCacheKeyBooleans( array, parameters );\n\t\t\tarray.push( renderer.outputColorSpace );\n\n\t\t}\n\n\t\tarray.push( parameters.customProgramCacheKey );\n\n\t\treturn array.join();\n\n\t}\n\n\tfunction getProgramCacheKeyParameters( array, parameters ) {\n\n\t\tarray.push( parameters.precision );\n\t\tarray.push( parameters.outputColorSpace );\n\t\tarray.push( parameters.envMapMode );\n\t\tarray.push( parameters.envMapCubeUVHeight );\n\t\tarray.push( parameters.mapUv );\n\t\tarray.push( parameters.alphaMapUv );\n\t\tarray.push( parameters.lightMapUv );\n\t\tarray.push( parameters.aoMapUv );\n\t\tarray.push( parameters.bumpMapUv );\n\t\tarray.push( parameters.normalMapUv );\n\t\tarray.push( parameters.displacementMapUv );\n\t\tarray.push( parameters.emissiveMapUv );\n\t\tarray.push( parameters.metalnessMapUv );\n\t\tarray.push( parameters.roughnessMapUv );\n\t\tarray.push( parameters.anisotropyMapUv );\n\t\tarray.push( parameters.clearcoatMapUv );\n\t\tarray.push( parameters.clearcoatNormalMapUv );\n\t\tarray.push( parameters.clearcoatRoughnessMapUv );\n\t\tarray.push( parameters.iridescenceMapUv );\n\t\tarray.push( parameters.iridescenceThicknessMapUv );\n\t\tarray.push( parameters.sheenColorMapUv );\n\t\tarray.push( parameters.sheenRoughnessMapUv );\n\t\tarray.push( parameters.specularMapUv );\n\t\tarray.push( parameters.specularColorMapUv );\n\t\tarray.push( parameters.specularIntensityMapUv );\n\t\tarray.push( parameters.transmissionMapUv );\n\t\tarray.push( parameters.thicknessMapUv );\n\t\tarray.push( parameters.combine );\n\t\tarray.push( parameters.fogExp2 );\n\t\tarray.push( parameters.sizeAttenuation );\n\t\tarray.push( parameters.morphTargetsCount );\n\t\tarray.push( parameters.morphAttributeCount );\n\t\tarray.push( parameters.numDirLights );\n\t\tarray.push( parameters.numPointLights );\n\t\tarray.push( parameters.numSpotLights );\n\t\tarray.push( parameters.numSpotLightMaps );\n\t\tarray.push( parameters.numHemiLights );\n\t\tarray.push( parameters.numRectAreaLights );\n\t\tarray.push( parameters.numDirLightShadows );\n\t\tarray.push( parameters.numPointLightShadows );\n\t\tarray.push( parameters.numSpotLightShadows );\n\t\tarray.push( parameters.numSpotLightShadowsWithMaps );\n\t\tarray.push( parameters.numLightProbes );\n\t\tarray.push( parameters.shadowMapType );\n\t\tarray.push( parameters.toneMapping );\n\t\tarray.push( parameters.numClippingPlanes );\n\t\tarray.push( parameters.numClipIntersection );\n\t\tarray.push( parameters.depthPacking );\n\n\t}\n\n\tfunction getProgramCacheKeyBooleans( array, parameters ) {\n\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.isWebGL2 )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.supportsVertexTextures )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.instancing )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.instancingColor )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.matcap )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.envMap )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.normalMapObjectSpace )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.normalMapTangentSpace )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.clearcoat )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.iridescence )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.alphaTest )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.vertexColors )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.vertexAlphas )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.vertexUv1s )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.vertexUv2s )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.vertexUv3s )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.vertexTangents )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.anisotropy )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.alphaHash )\n\t\t\t_programLayers.enable( 18 );\n\n\t\tarray.push( _programLayers.mask );\n\t\t_programLayers.disableAll();\n\n\t\tif ( parameters.fog )\n\t\t\t_programLayers.enable( 0 );\n\t\tif ( parameters.useFog )\n\t\t\t_programLayers.enable( 1 );\n\t\tif ( parameters.flatShading )\n\t\t\t_programLayers.enable( 2 );\n\t\tif ( parameters.logarithmicDepthBuffer )\n\t\t\t_programLayers.enable( 3 );\n\t\tif ( parameters.skinning )\n\t\t\t_programLayers.enable( 4 );\n\t\tif ( parameters.morphTargets )\n\t\t\t_programLayers.enable( 5 );\n\t\tif ( parameters.morphNormals )\n\t\t\t_programLayers.enable( 6 );\n\t\tif ( parameters.morphColors )\n\t\t\t_programLayers.enable( 7 );\n\t\tif ( parameters.premultipliedAlpha )\n\t\t\t_programLayers.enable( 8 );\n\t\tif ( parameters.shadowMapEnabled )\n\t\t\t_programLayers.enable( 9 );\n\t\tif ( parameters.useLegacyLights )\n\t\t\t_programLayers.enable( 10 );\n\t\tif ( parameters.doubleSided )\n\t\t\t_programLayers.enable( 11 );\n\t\tif ( parameters.flipSided )\n\t\t\t_programLayers.enable( 12 );\n\t\tif ( parameters.useDepthPacking )\n\t\t\t_programLayers.enable( 13 );\n\t\tif ( parameters.dithering )\n\t\t\t_programLayers.enable( 14 );\n\t\tif ( parameters.transmission )\n\t\t\t_programLayers.enable( 15 );\n\t\tif ( parameters.sheen )\n\t\t\t_programLayers.enable( 16 );\n\t\tif ( parameters.opaque )\n\t\t\t_programLayers.enable( 17 );\n\t\tif ( parameters.pointsUvs )\n\t\t\t_programLayers.enable( 18 );\n\t\tif ( parameters.decodeVideoTexture )\n\t\t\t_programLayers.enable( 19 );\n\n\t\tarray.push( _programLayers.mask );\n\n\t}\n\n\tfunction getUniforms( material ) {\n\n\t\tconst shaderID = shaderIDs[ material.type ];\n\t\tlet uniforms;\n\n\t\tif ( shaderID ) {\n\n\t\t\tconst shader = ShaderLib[ shaderID ];\n\t\t\tuniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t} else {\n\n\t\t\tuniforms = material.uniforms;\n\n\t\t}\n\n\t\treturn uniforms;\n\n\t}\n\n\tfunction acquireProgram( parameters, cacheKey ) {\n\n\t\tlet program;\n\n\t\t// Check if code has been already compiled\n\t\tfor ( let p = 0, pl = programs.length; p < pl; p ++ ) {\n\n\t\t\tconst preexistingProgram = programs[ p ];\n\n\t\t\tif ( preexistingProgram.cacheKey === cacheKey ) {\n\n\t\t\t\tprogram = preexistingProgram;\n\t\t\t\t++ program.usedTimes;\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( program === undefined ) {\n\n\t\t\tprogram = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );\n\t\t\tprograms.push( program );\n\n\t\t}\n\n\t\treturn program;\n\n\t}\n\n\tfunction releaseProgram( program ) {\n\n\t\tif ( -- program.usedTimes === 0 ) {\n\n\t\t\t// Remove from unordered set\n\t\t\tconst i = programs.indexOf( program );\n\t\t\tprograms[ i ] = programs[ programs.length - 1 ];\n\t\t\tprograms.pop();\n\n\t\t\t// Free WebGL resources\n\t\t\tprogram.destroy();\n\n\t\t}\n\n\t}\n\n\tfunction releaseShaderCache( material ) {\n\n\t\t_customShaders.remove( material );\n\n\t}\n\n\tfunction dispose() {\n\n\t\t_customShaders.dispose();\n\n\t}\n\n\treturn {\n\t\tgetParameters: getParameters,\n\t\tgetProgramCacheKey: getProgramCacheKey,\n\t\tgetUniforms: getUniforms,\n\t\tacquireProgram: acquireProgram,\n\t\treleaseProgram: releaseProgram,\n\t\treleaseShaderCache: releaseShaderCache,\n\t\t// Exposed for resource monitoring & error feedback via renderer.info:\n\t\tprograms: programs,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction WebGLProperties() {\n\n\tlet properties = new WeakMap();\n\n\tfunction get( object ) {\n\n\t\tlet map = properties.get( object );\n\n\t\tif ( map === undefined ) {\n\n\t\t\tmap = {};\n\t\t\tproperties.set( object, map );\n\n\t\t}\n\n\t\treturn map;\n\n\t}\n\n\tfunction remove( object ) {\n\n\t\tproperties.delete( object );\n\n\t}\n\n\tfunction update( object, key, value ) {\n\n\t\tproperties.get( object )[ key ] = value;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tproperties = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tremove: remove,\n\t\tupdate: update,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction painterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.material.id !== b.material.id ) {\n\n\t\treturn a.material.id - b.material.id;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn a.z - b.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\nfunction reversePainterSortStable( a, b ) {\n\n\tif ( a.groupOrder !== b.groupOrder ) {\n\n\t\treturn a.groupOrder - b.groupOrder;\n\n\t} else if ( a.renderOrder !== b.renderOrder ) {\n\n\t\treturn a.renderOrder - b.renderOrder;\n\n\t} else if ( a.z !== b.z ) {\n\n\t\treturn b.z - a.z;\n\n\t} else {\n\n\t\treturn a.id - b.id;\n\n\t}\n\n}\n\n\nfunction WebGLRenderList() {\n\n\tconst renderItems = [];\n\tlet renderItemsIndex = 0;\n\n\tconst opaque = [];\n\tconst transmissive = [];\n\tconst transparent = [];\n\n\tfunction init() {\n\n\t\trenderItemsIndex = 0;\n\n\t\topaque.length = 0;\n\t\ttransmissive.length = 0;\n\t\ttransparent.length = 0;\n\n\t}\n\n\tfunction getNextRenderItem( object, geometry, material, groupOrder, z, group ) {\n\n\t\tlet renderItem = renderItems[ renderItemsIndex ];\n\n\t\tif ( renderItem === undefined ) {\n\n\t\t\trenderItem = {\n\t\t\t\tid: object.id,\n\t\t\t\tobject: object,\n\t\t\t\tgeometry: geometry,\n\t\t\t\tmaterial: material,\n\t\t\t\tgroupOrder: groupOrder,\n\t\t\t\trenderOrder: object.renderOrder,\n\t\t\t\tz: z,\n\t\t\t\tgroup: group\n\t\t\t};\n\n\t\t\trenderItems[ renderItemsIndex ] = renderItem;\n\n\t\t} else {\n\n\t\t\trenderItem.id = object.id;\n\t\t\trenderItem.object = object;\n\t\t\trenderItem.geometry = geometry;\n\t\t\trenderItem.material = material;\n\t\t\trenderItem.groupOrder = groupOrder;\n\t\t\trenderItem.renderOrder = object.renderOrder;\n\t\t\trenderItem.z = z;\n\t\t\trenderItem.group = group;\n\n\t\t}\n\n\t\trenderItemsIndex ++;\n\n\t\treturn renderItem;\n\n\t}\n\n\tfunction push( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.push( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.push( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.push( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction unshift( object, geometry, material, groupOrder, z, group ) {\n\n\t\tconst renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );\n\n\t\tif ( material.transmission > 0.0 ) {\n\n\t\t\ttransmissive.unshift( renderItem );\n\n\t\t} else if ( material.transparent === true ) {\n\n\t\t\ttransparent.unshift( renderItem );\n\n\t\t} else {\n\n\t\t\topaque.unshift( renderItem );\n\n\t\t}\n\n\t}\n\n\tfunction sort( customOpaqueSort, customTransparentSort ) {\n\n\t\tif ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );\n\t\tif ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );\n\t\tif ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );\n\n\t}\n\n\tfunction finish() {\n\n\t\t// Clear references from inactive renderItems in the list\n\n\t\tfor ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {\n\n\t\t\tconst renderItem = renderItems[ i ];\n\n\t\t\tif ( renderItem.id === null ) break;\n\n\t\t\trenderItem.id = null;\n\t\t\trenderItem.object = null;\n\t\t\trenderItem.geometry = null;\n\t\t\trenderItem.material = null;\n\t\t\trenderItem.group = null;\n\n\t\t}\n\n\t}\n\n\treturn {\n\n\t\topaque: opaque,\n\t\ttransmissive: transmissive,\n\t\ttransparent: transparent,\n\n\t\tinit: init,\n\t\tpush: push,\n\t\tunshift: unshift,\n\t\tfinish: finish,\n\n\t\tsort: sort\n\t};\n\n}\n\nfunction WebGLRenderLists() {\n\n\tlet lists = new WeakMap();\n\n\tfunction get( scene, renderCallDepth ) {\n\n\t\tconst listArray = lists.get( scene );\n\t\tlet list;\n\n\t\tif ( listArray === undefined ) {\n\n\t\t\tlist = new WebGLRenderList();\n\t\t\tlists.set( scene, [ list ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= listArray.length ) {\n\n\t\t\t\tlist = new WebGLRenderList();\n\t\t\t\tlistArray.push( list );\n\n\t\t\t} else {\n\n\t\t\t\tlist = listArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn list;\n\n\t}\n\n\tfunction dispose() {\n\n\t\tlists = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nfunction UniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tconeCos: 0,\n\t\t\t\t\t\tpenumbraCos: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tdistance: 0,\n\t\t\t\t\t\tdecay: 0\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'HemisphereLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tdirection: new Vector3(),\n\t\t\t\t\t\tskyColor: new Color(),\n\t\t\t\t\t\tgroundColor: new Color()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'RectAreaLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tcolor: new Color(),\n\t\t\t\t\t\tposition: new Vector3(),\n\t\t\t\t\t\thalfWidth: new Vector3(),\n\t\t\t\t\t\thalfHeight: new Vector3()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\nfunction ShadowUniformsCache() {\n\n\tconst lights = {};\n\n\treturn {\n\n\t\tget: function ( light ) {\n\n\t\t\tif ( lights[ light.id ] !== undefined ) {\n\n\t\t\t\treturn lights[ light.id ];\n\n\t\t\t}\n\n\t\t\tlet uniforms;\n\n\t\t\tswitch ( light.type ) {\n\n\t\t\t\tcase 'DirectionalLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'SpotLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2()\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'PointLight':\n\t\t\t\t\tuniforms = {\n\t\t\t\t\t\tshadowBias: 0,\n\t\t\t\t\t\tshadowNormalBias: 0,\n\t\t\t\t\t\tshadowRadius: 1,\n\t\t\t\t\t\tshadowMapSize: new Vector2(),\n\t\t\t\t\t\tshadowCameraNear: 1,\n\t\t\t\t\t\tshadowCameraFar: 1000\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\n\t\t\t\t// TODO (abelnation): set RectAreaLight shadow uniforms\n\n\t\t\t}\n\n\t\t\tlights[ light.id ] = uniforms;\n\n\t\t\treturn uniforms;\n\n\t\t}\n\n\t};\n\n}\n\n\n\nlet nextVersion = 0;\n\nfunction shadowCastingAndTexturingLightsFirst( lightA, lightB ) {\n\n\treturn ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );\n\n}\n\nfunction WebGLLights( extensions, capabilities ) {\n\n\tconst cache = new UniformsCache();\n\n\tconst shadowCache = ShadowUniformsCache();\n\n\tconst state = {\n\n\t\tversion: 0,\n\n\t\thash: {\n\t\t\tdirectionalLength: - 1,\n\t\t\tpointLength: - 1,\n\t\t\tspotLength: - 1,\n\t\t\trectAreaLength: - 1,\n\t\t\themiLength: - 1,\n\n\t\t\tnumDirectionalShadows: - 1,\n\t\t\tnumPointShadows: - 1,\n\t\t\tnumSpotShadows: - 1,\n\t\t\tnumSpotMaps: - 1,\n\n\t\t\tnumLightProbes: - 1\n\t\t},\n\n\t\tambient: [ 0, 0, 0 ],\n\t\tprobe: [],\n\t\tdirectional: [],\n\t\tdirectionalShadow: [],\n\t\tdirectionalShadowMap: [],\n\t\tdirectionalShadowMatrix: [],\n\t\tspot: [],\n\t\tspotLightMap: [],\n\t\tspotShadow: [],\n\t\tspotShadowMap: [],\n\t\tspotLightMatrix: [],\n\t\trectArea: [],\n\t\trectAreaLTC1: null,\n\t\trectAreaLTC2: null,\n\t\tpoint: [],\n\t\tpointShadow: [],\n\t\tpointShadowMap: [],\n\t\tpointShadowMatrix: [],\n\t\themi: [],\n\t\tnumSpotLightShadowsWithMaps: 0,\n\t\tnumLightProbes: 0\n\n\t};\n\n\tfor ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );\n\n\tconst vector3 = new Vector3();\n\tconst matrix4 = new Matrix4();\n\tconst matrix42 = new Matrix4();\n\n\tfunction setup( lights, useLegacyLights ) {\n\n\t\tlet r = 0, g = 0, b = 0;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tlet numDirectionalShadows = 0;\n\t\tlet numPointShadows = 0;\n\t\tlet numSpotShadows = 0;\n\t\tlet numSpotMaps = 0;\n\t\tlet numSpotShadowsWithMaps = 0;\n\n\t\tlet numLightProbes = 0;\n\n\t\t// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]\n\t\tlights.sort( shadowCastingAndTexturingLightsFirst );\n\n\t\t// artist-friendly light intensity scaling factor\n\t\tconst scaleFactor = ( useLegacyLights === true ) ? Math.PI : 1;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tconst color = light.color;\n\t\t\tconst intensity = light.intensity;\n\t\t\tconst distance = light.distance;\n\n\t\t\tconst shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\tr += color.r * intensity * scaleFactor;\n\t\t\t\tg += color.g * intensity * scaleFactor;\n\t\t\t\tb += color.b * intensity * scaleFactor;\n\n\t\t\t} else if ( light.isLightProbe ) {\n\n\t\t\t\tfor ( let j = 0; j < 9; j ++ ) {\n\n\t\t\t\t\tstate.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );\n\n\t\t\t\t}\n\n\t\t\t\tnumLightProbes ++;\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.directionalShadow[ directionalLength ] = shadowUniforms;\n\t\t\t\t\tstate.directionalShadowMap[ directionalLength ] = shadowMap;\n\t\t\t\t\tstate.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumDirectionalShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.directional[ directionalLength ] = uniforms;\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.distance = distance;\n\n\t\t\t\tuniforms.coneCos = Math.cos( light.angle );\n\t\t\t\tuniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tstate.spot[ spotLength ] = uniforms;\n\n\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\tif ( light.map ) {\n\n\t\t\t\t\tstate.spotLightMap[ numSpotMaps ] = light.map;\n\t\t\t\t\tnumSpotMaps ++;\n\n\t\t\t\t\t// make sure the lightMatrix is up to date\n\t\t\t\t\t// TODO : do it if required only\n\t\t\t\t\tshadow.updateMatrices( light );\n\n\t\t\t\t\tif ( light.castShadow ) numSpotShadowsWithMaps ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.spotLightMatrix[ spotLength ] = shadow.matrix;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\n\t\t\t\t\tstate.spotShadow[ spotLength ] = shadowUniforms;\n\t\t\t\t\tstate.spotShadowMap[ spotLength ] = shadowMap;\n\n\t\t\t\t\tnumSpotShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( color ).multiplyScalar( intensity );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tstate.rectArea[ rectAreaLength ] = uniforms;\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );\n\t\t\t\tuniforms.distance = light.distance;\n\t\t\t\tuniforms.decay = light.decay;\n\n\t\t\t\tif ( light.castShadow ) {\n\n\t\t\t\t\tconst shadow = light.shadow;\n\n\t\t\t\t\tconst shadowUniforms = shadowCache.get( light );\n\n\t\t\t\t\tshadowUniforms.shadowBias = shadow.bias;\n\t\t\t\t\tshadowUniforms.shadowNormalBias = shadow.normalBias;\n\t\t\t\t\tshadowUniforms.shadowRadius = shadow.radius;\n\t\t\t\t\tshadowUniforms.shadowMapSize = shadow.mapSize;\n\t\t\t\t\tshadowUniforms.shadowCameraNear = shadow.camera.near;\n\t\t\t\t\tshadowUniforms.shadowCameraFar = shadow.camera.far;\n\n\t\t\t\t\tstate.pointShadow[ pointLength ] = shadowUniforms;\n\t\t\t\t\tstate.pointShadowMap[ pointLength ] = shadowMap;\n\t\t\t\t\tstate.pointShadowMatrix[ pointLength ] = light.shadow.matrix;\n\n\t\t\t\t\tnumPointShadows ++;\n\n\t\t\t\t}\n\n\t\t\t\tstate.point[ pointLength ] = uniforms;\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = cache.get( light );\n\n\t\t\t\tuniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );\n\t\t\t\tuniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );\n\n\t\t\t\tstate.hemi[ hemiLength ] = uniforms;\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( rectAreaLength > 0 ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t// WebGL 2\n\n\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t} else {\n\n\t\t\t\t// WebGL 1\n\n\t\t\t\tif ( extensions.has( 'OES_texture_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;\n\n\t\t\t\t} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {\n\n\t\t\t\t\tstate.rectAreaLTC1 = UniformsLib.LTC_HALF_1;\n\t\t\t\t\tstate.rectAreaLTC2 = UniformsLib.LTC_HALF_2;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.ambient[ 0 ] = r;\n\t\tstate.ambient[ 1 ] = g;\n\t\tstate.ambient[ 2 ] = b;\n\n\t\tconst hash = state.hash;\n\n\t\tif ( hash.directionalLength !== directionalLength ||\n\t\t\thash.pointLength !== pointLength ||\n\t\t\thash.spotLength !== spotLength ||\n\t\t\thash.rectAreaLength !== rectAreaLength ||\n\t\t\thash.hemiLength !== hemiLength ||\n\t\t\thash.numDirectionalShadows !== numDirectionalShadows ||\n\t\t\thash.numPointShadows !== numPointShadows ||\n\t\t\thash.numSpotShadows !== numSpotShadows ||\n\t\t\thash.numSpotMaps !== numSpotMaps ||\n\t\t\thash.numLightProbes !== numLightProbes ) {\n\n\t\t\tstate.directional.length = directionalLength;\n\t\t\tstate.spot.length = spotLength;\n\t\t\tstate.rectArea.length = rectAreaLength;\n\t\t\tstate.point.length = pointLength;\n\t\t\tstate.hemi.length = hemiLength;\n\n\t\t\tstate.directionalShadow.length = numDirectionalShadows;\n\t\t\tstate.directionalShadowMap.length = numDirectionalShadows;\n\t\t\tstate.pointShadow.length = numPointShadows;\n\t\t\tstate.pointShadowMap.length = numPointShadows;\n\t\t\tstate.spotShadow.length = numSpotShadows;\n\t\t\tstate.spotShadowMap.length = numSpotShadows;\n\t\t\tstate.directionalShadowMatrix.length = numDirectionalShadows;\n\t\t\tstate.pointShadowMatrix.length = numPointShadows;\n\t\t\tstate.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;\n\t\t\tstate.spotLightMap.length = numSpotMaps;\n\t\t\tstate.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;\n\t\t\tstate.numLightProbes = numLightProbes;\n\n\t\t\thash.directionalLength = directionalLength;\n\t\t\thash.pointLength = pointLength;\n\t\t\thash.spotLength = spotLength;\n\t\t\thash.rectAreaLength = rectAreaLength;\n\t\t\thash.hemiLength = hemiLength;\n\n\t\t\thash.numDirectionalShadows = numDirectionalShadows;\n\t\t\thash.numPointShadows = numPointShadows;\n\t\t\thash.numSpotShadows = numSpotShadows;\n\t\t\thash.numSpotMaps = numSpotMaps;\n\n\t\t\thash.numLightProbes = numLightProbes;\n\n\t\t\tstate.version = nextVersion ++;\n\n\t\t}\n\n\t}\n\n\tfunction setupView( lights, camera ) {\n\n\t\tlet directionalLength = 0;\n\t\tlet pointLength = 0;\n\t\tlet spotLength = 0;\n\t\tlet rectAreaLength = 0;\n\t\tlet hemiLength = 0;\n\n\t\tconst viewMatrix = camera.matrixWorldInverse;\n\n\t\tfor ( let i = 0, l = lights.length; i < l; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tconst uniforms = state.directional[ directionalLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tdirectionalLength ++;\n\n\t\t\t} else if ( light.isSpotLight ) {\n\n\t\t\t\tconst uniforms = state.spot[ spotLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tvector3.setFromMatrixPosition( light.target.matrixWorld );\n\t\t\t\tuniforms.direction.sub( vector3 );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\tspotLength ++;\n\n\t\t\t} else if ( light.isRectAreaLight ) {\n\n\t\t\t\tconst uniforms = state.rectArea[ rectAreaLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\t// extract local rotation of light to derive width/height half vectors\n\t\t\t\tmatrix42.identity();\n\t\t\t\tmatrix4.copy( light.matrixWorld );\n\t\t\t\tmatrix4.premultiply( viewMatrix );\n\t\t\t\tmatrix42.extractRotation( matrix4 );\n\n\t\t\t\tuniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );\n\t\t\t\tuniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );\n\n\t\t\t\tuniforms.halfWidth.applyMatrix4( matrix42 );\n\t\t\t\tuniforms.halfHeight.applyMatrix4( matrix42 );\n\n\t\t\t\trectAreaLength ++;\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tconst uniforms = state.point[ pointLength ];\n\n\t\t\t\tuniforms.position.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.position.applyMatrix4( viewMatrix );\n\n\t\t\t\tpointLength ++;\n\n\t\t\t} else if ( light.isHemisphereLight ) {\n\n\t\t\t\tconst uniforms = state.hemi[ hemiLength ];\n\n\t\t\t\tuniforms.direction.setFromMatrixPosition( light.matrixWorld );\n\t\t\t\tuniforms.direction.transformDirection( viewMatrix );\n\n\t\t\t\themiLength ++;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn {\n\t\tsetup: setup,\n\t\tsetupView: setupView,\n\t\tstate: state\n\t};\n\n}\n\nfunction WebGLRenderState( extensions, capabilities ) {\n\n\tconst lights = new WebGLLights( extensions, capabilities );\n\n\tconst lightsArray = [];\n\tconst shadowsArray = [];\n\n\tfunction init() {\n\n\t\tlightsArray.length = 0;\n\t\tshadowsArray.length = 0;\n\n\t}\n\n\tfunction pushLight( light ) {\n\n\t\tlightsArray.push( light );\n\n\t}\n\n\tfunction pushShadow( shadowLight ) {\n\n\t\tshadowsArray.push( shadowLight );\n\n\t}\n\n\tfunction setupLights( useLegacyLights ) {\n\n\t\tlights.setup( lightsArray, useLegacyLights );\n\n\t}\n\n\tfunction setupLightsView( camera ) {\n\n\t\tlights.setupView( lightsArray, camera );\n\n\t}\n\n\tconst state = {\n\t\tlightsArray: lightsArray,\n\t\tshadowsArray: shadowsArray,\n\n\t\tlights: lights\n\t};\n\n\treturn {\n\t\tinit: init,\n\t\tstate: state,\n\t\tsetupLights: setupLights,\n\t\tsetupLightsView: setupLightsView,\n\n\t\tpushLight: pushLight,\n\t\tpushShadow: pushShadow\n\t};\n\n}\n\nfunction WebGLRenderStates( extensions, capabilities ) {\n\n\tlet renderStates = new WeakMap();\n\n\tfunction get( scene, renderCallDepth = 0 ) {\n\n\t\tconst renderStateArray = renderStates.get( scene );\n\t\tlet renderState;\n\n\t\tif ( renderStateArray === undefined ) {\n\n\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\trenderStates.set( scene, [ renderState ] );\n\n\t\t} else {\n\n\t\t\tif ( renderCallDepth >= renderStateArray.length ) {\n\n\t\t\t\trenderState = new WebGLRenderState( extensions, capabilities );\n\t\t\t\trenderStateArray.push( renderState );\n\n\t\t\t} else {\n\n\t\t\t\trenderState = renderStateArray[ renderCallDepth ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn renderState;\n\n\t}\n\n\tfunction dispose() {\n\n\t\trenderStates = new WeakMap();\n\n\t}\n\n\treturn {\n\t\tget: get,\n\t\tdispose: dispose\n\t};\n\n}\n\nclass MeshDepthMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDepthMaterial = true;\n\n\t\tthis.type = 'MeshDepthMaterial';\n\n\t\tthis.depthPacking = BasicDepthPacking;\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.depthPacking = source.depthPacking;\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshDistanceMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshDistanceMaterial = true;\n\n\t\tthis.type = 'MeshDistanceMaterial';\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst vertex = \"void main() {\\n\\tgl_Position = vec4( position, 1.0 );\\n}\";\n\nconst fragment = \"uniform sampler2D shadow_pass;\\nuniform vec2 resolution;\\nuniform float radius;\\n#include <packing>\\nvoid main() {\\n\\tconst float samples = float( VSM_SAMPLES );\\n\\tfloat mean = 0.0;\\n\\tfloat squared_mean = 0.0;\\n\\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\\n\\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\\n\\tfor ( float i = 0.0; i < samples; i ++ ) {\\n\\t\\tfloat uvOffset = uvStart + i * uvStride;\\n\\t\\t#ifdef HORIZONTAL_PASS\\n\\t\\t\\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\\n\\t\\t\\tmean += distribution.x;\\n\\t\\t\\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\\n\\t\\t#else\\n\\t\\t\\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\\n\\t\\t\\tmean += depth;\\n\\t\\t\\tsquared_mean += depth * depth;\\n\\t\\t#endif\\n\\t}\\n\\tmean = mean / samples;\\n\\tsquared_mean = squared_mean / samples;\\n\\tfloat std_dev = sqrt( squared_mean - mean * mean );\\n\\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\\n}\";\n\nfunction WebGLShadowMap( _renderer, _objects, _capabilities ) {\n\n\tlet _frustum = new Frustum();\n\n\tconst _shadowMapSize = new Vector2(),\n\t\t_viewportSize = new Vector2(),\n\n\t\t_viewport = new Vector4(),\n\n\t\t_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),\n\t\t_distanceMaterial = new MeshDistanceMaterial(),\n\n\t\t_materialCache = {},\n\n\t\t_maxTextureSize = _capabilities.maxTextureSize;\n\n\tconst shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };\n\n\tconst shadowMaterialVertical = new ShaderMaterial( {\n\t\tdefines: {\n\t\t\tVSM_SAMPLES: 8\n\t\t},\n\t\tuniforms: {\n\t\t\tshadow_pass: { value: null },\n\t\t\tresolution: { value: new Vector2() },\n\t\t\tradius: { value: 4.0 }\n\t\t},\n\n\t\tvertexShader: vertex,\n\t\tfragmentShader: fragment\n\n\t} );\n\n\tconst shadowMaterialHorizontal = shadowMaterialVertical.clone();\n\tshadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;\n\n\tconst fullScreenTri = new BufferGeometry();\n\tfullScreenTri.setAttribute(\n\t\t'position',\n\t\tnew BufferAttribute(\n\t\t\tnew Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),\n\t\t\t3\n\t\t)\n\t);\n\n\tconst fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );\n\n\tconst scope = this;\n\n\tthis.enabled = false;\n\n\tthis.autoUpdate = true;\n\tthis.needsUpdate = false;\n\n\tthis.type = PCFShadowMap;\n\tlet _previousType = this.type;\n\n\tthis.render = function ( lights, scene, camera ) {\n\n\t\tif ( scope.enabled === false ) return;\n\t\tif ( scope.autoUpdate === false && scope.needsUpdate === false ) return;\n\n\t\tif ( lights.length === 0 ) return;\n\n\t\tconst currentRenderTarget = _renderer.getRenderTarget();\n\t\tconst activeCubeFace = _renderer.getActiveCubeFace();\n\t\tconst activeMipmapLevel = _renderer.getActiveMipmapLevel();\n\n\t\tconst _state = _renderer.state;\n\n\t\t// Set GL state for depth map.\n\t\t_state.setBlending( NoBlending );\n\t\t_state.buffers.color.setClear( 1, 1, 1, 1 );\n\t\t_state.buffers.depth.setTest( true );\n\t\t_state.setScissorTest( false );\n\n\t\t// check for shadow map type changes\n\n\t\tconst toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );\n\t\tconst fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );\n\n\t\t// render depth map\n\n\t\tfor ( let i = 0, il = lights.length; i < il; i ++ ) {\n\n\t\t\tconst light = lights[ i ];\n\t\t\tconst shadow = light.shadow;\n\n\t\t\tif ( shadow === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;\n\n\t\t\t_shadowMapSize.copy( shadow.mapSize );\n\n\t\t\tconst shadowFrameExtents = shadow.getFrameExtents();\n\n\t\t\t_shadowMapSize.multiply( shadowFrameExtents );\n\n\t\t\t_viewportSize.copy( shadow.mapSize );\n\n\t\t\tif ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\tif ( _shadowMapSize.x > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );\n\t\t\t\t\t_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;\n\t\t\t\t\tshadow.mapSize.x = _viewportSize.x;\n\n\t\t\t\t}\n\n\t\t\t\tif ( _shadowMapSize.y > _maxTextureSize ) {\n\n\t\t\t\t\t_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );\n\t\t\t\t\t_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;\n\t\t\t\t\tshadow.mapSize.y = _viewportSize.y;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( shadow.map === null || toVSM === true || fromVSM === true ) {\n\n\t\t\t\tconst pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};\n\n\t\t\t\tif ( shadow.map !== null ) {\n\n\t\t\t\t\tshadow.map.dispose();\n\n\t\t\t\t}\n\n\t\t\t\tshadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );\n\t\t\t\tshadow.map.texture.name = light.name + '.shadowMap';\n\n\t\t\t\tshadow.camera.updateProjectionMatrix();\n\n\t\t\t}\n\n\t\t\t_renderer.setRenderTarget( shadow.map );\n\t\t\t_renderer.clear();\n\n\t\t\tconst viewportCount = shadow.getViewportCount();\n\n\t\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\n\n\t\t\t\tconst viewport = shadow.getViewport( vp );\n\n\t\t\t\t_viewport.set(\n\t\t\t\t\t_viewportSize.x * viewport.x,\n\t\t\t\t\t_viewportSize.y * viewport.y,\n\t\t\t\t\t_viewportSize.x * viewport.z,\n\t\t\t\t\t_viewportSize.y * viewport.w\n\t\t\t\t);\n\n\t\t\t\t_state.viewport( _viewport );\n\n\t\t\t\tshadow.updateMatrices( light, vp );\n\n\t\t\t\t_frustum = shadow.getFrustum();\n\n\t\t\t\trenderObject( scene, camera, shadow.camera, light, this.type );\n\n\t\t\t}\n\n\t\t\t// do blur pass for VSM\n\n\t\t\tif ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {\n\n\t\t\t\tVSMPass( shadow, camera );\n\n\t\t\t}\n\n\t\t\tshadow.needsUpdate = false;\n\n\t\t}\n\n\t\t_previousType = this.type;\n\n\t\tscope.needsUpdate = false;\n\n\t\t_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );\n\n\t};\n\n\tfunction VSMPass( shadow, camera ) {\n\n\t\tconst geometry = _objects.update( fullScreenMesh );\n\n\t\tif ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {\n\n\t\t\tshadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;\n\t\t\tshadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;\n\n\t\t\tshadowMaterialVertical.needsUpdate = true;\n\t\t\tshadowMaterialHorizontal.needsUpdate = true;\n\n\t\t}\n\n\t\tif ( shadow.mapPass === null ) {\n\n\t\t\tshadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );\n\n\t\t}\n\n\t\t// vertical pass\n\n\t\tshadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;\n\t\tshadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialVertical.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.mapPass );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );\n\n\t\t// horizontal pass\n\n\t\tshadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;\n\t\tshadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;\n\t\tshadowMaterialHorizontal.uniforms.radius.value = shadow.radius;\n\t\t_renderer.setRenderTarget( shadow.map );\n\t\t_renderer.clear();\n\t\t_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );\n\n\t}\n\n\tfunction getDepthMaterial( object, material, light, type ) {\n\n\t\tlet result = null;\n\n\t\tconst customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;\n\n\t\tif ( customMaterial !== undefined ) {\n\n\t\t\tresult = customMaterial;\n\n\t\t} else {\n\n\t\t\tresult = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;\n\n\t\t\tif ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||\n\t\t\t\t( material.displacementMap && material.displacementScale !== 0 ) ||\n\t\t\t\t( material.alphaMap && material.alphaTest > 0 ) ||\n\t\t\t\t( material.map && material.alphaTest > 0 ) ) {\n\n\t\t\t\t// in this case we need a unique material instance reflecting the\n\t\t\t\t// appropriate state\n\n\t\t\t\tconst keyA = result.uuid, keyB = material.uuid;\n\n\t\t\t\tlet materialsForVariant = _materialCache[ keyA ];\n\n\t\t\t\tif ( materialsForVariant === undefined ) {\n\n\t\t\t\t\tmaterialsForVariant = {};\n\t\t\t\t\t_materialCache[ keyA ] = materialsForVariant;\n\n\t\t\t\t}\n\n\t\t\t\tlet cachedMaterial = materialsForVariant[ keyB ];\n\n\t\t\t\tif ( cachedMaterial === undefined ) {\n\n\t\t\t\t\tcachedMaterial = result.clone();\n\t\t\t\t\tmaterialsForVariant[ keyB ] = cachedMaterial;\n\n\t\t\t\t}\n\n\t\t\t\tresult = cachedMaterial;\n\n\t\t\t}\n\n\t\t}\n\n\t\tresult.visible = material.visible;\n\t\tresult.wireframe = material.wireframe;\n\n\t\tif ( type === VSMShadowMap ) {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;\n\n\t\t} else {\n\n\t\t\tresult.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];\n\n\t\t}\n\n\t\tresult.alphaMap = material.alphaMap;\n\t\tresult.alphaTest = material.alphaTest;\n\t\tresult.map = material.map;\n\n\t\tresult.clipShadows = material.clipShadows;\n\t\tresult.clippingPlanes = material.clippingPlanes;\n\t\tresult.clipIntersection = material.clipIntersection;\n\n\t\tresult.displacementMap = material.displacementMap;\n\t\tresult.displacementScale = material.displacementScale;\n\t\tresult.displacementBias = material.displacementBias;\n\n\t\tresult.wireframeLinewidth = material.wireframeLinewidth;\n\t\tresult.linewidth = material.linewidth;\n\n\t\tif ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {\n\n\t\t\tconst materialProperties = _renderer.properties.get( result );\n\t\t\tmaterialProperties.light = light;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tfunction renderObject( object, camera, shadowCamera, light, type ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tconst visible = object.layers.test( camera.layers );\n\n\t\tif ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {\n\n\t\t\tif ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {\n\n\t\t\t\tobject.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );\n\n\t\t\t\tconst geometry = _objects.update( object );\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\tfor ( let k = 0, kl = groups.length; k < kl; k ++ ) {\n\n\t\t\t\t\t\tconst group = groups[ k ];\n\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, groupMaterial, light, type );\n\n\t\t\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\tconst depthMaterial = getDepthMaterial( object, material, light, type );\n\n\t\t\t\t\t_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\trenderObject( children[ i ], camera, shadowCamera, light, type );\n\n\t\t}\n\n\t}\n\n}\n\nfunction WebGLState( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction ColorBuffer() {\n\n\t\tlet locked = false;\n\n\t\tconst color = new Vector4();\n\t\tlet currentColorMask = null;\n\t\tconst currentColorClear = new Vector4( 0, 0, 0, 0 );\n\n\t\treturn {\n\n\t\t\tsetMask: function ( colorMask ) {\n\n\t\t\t\tif ( currentColorMask !== colorMask && ! locked ) {\n\n\t\t\t\t\tgl.colorMask( colorMask, colorMask, colorMask, colorMask );\n\t\t\t\t\tcurrentColorMask = colorMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( r, g, b, a, premultipliedAlpha ) {\n\n\t\t\t\tif ( premultipliedAlpha === true ) {\n\n\t\t\t\t\tr *= a; g *= a; b *= a;\n\n\t\t\t\t}\n\n\t\t\t\tcolor.set( r, g, b, a );\n\n\t\t\t\tif ( currentColorClear.equals( color ) === false ) {\n\n\t\t\t\t\tgl.clearColor( r, g, b, a );\n\t\t\t\t\tcurrentColorClear.copy( color );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentColorMask = null;\n\t\t\t\tcurrentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction DepthBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentDepthMask = null;\n\t\tlet currentDepthFunc = null;\n\t\tlet currentDepthClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( depthTest ) {\n\n\t\t\t\tif ( depthTest ) {\n\n\t\t\t\t\tenable( gl.DEPTH_TEST );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdisable( gl.DEPTH_TEST );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( depthMask ) {\n\n\t\t\t\tif ( currentDepthMask !== depthMask && ! locked ) {\n\n\t\t\t\t\tgl.depthMask( depthMask );\n\t\t\t\t\tcurrentDepthMask = depthMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( depthFunc ) {\n\n\t\t\t\tif ( currentDepthFunc !== depthFunc ) {\n\n\t\t\t\t\tswitch ( depthFunc ) {\n\n\t\t\t\t\t\tcase NeverDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NEVER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AlwaysDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.ALWAYS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LESS );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase LessEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.EQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase GreaterDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.GREATER );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase NotEqualDepth:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.NOTEQUAL );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tgl.depthFunc( gl.LEQUAL );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurrentDepthFunc = depthFunc;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( depth ) {\n\n\t\t\t\tif ( currentDepthClear !== depth ) {\n\n\t\t\t\t\tgl.clearDepth( depth );\n\t\t\t\t\tcurrentDepthClear = depth;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentDepthMask = null;\n\t\t\t\tcurrentDepthFunc = null;\n\t\t\t\tcurrentDepthClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tfunction StencilBuffer() {\n\n\t\tlet locked = false;\n\n\t\tlet currentStencilMask = null;\n\t\tlet currentStencilFunc = null;\n\t\tlet currentStencilRef = null;\n\t\tlet currentStencilFuncMask = null;\n\t\tlet currentStencilFail = null;\n\t\tlet currentStencilZFail = null;\n\t\tlet currentStencilZPass = null;\n\t\tlet currentStencilClear = null;\n\n\t\treturn {\n\n\t\t\tsetTest: function ( stencilTest ) {\n\n\t\t\t\tif ( ! locked ) {\n\n\t\t\t\t\tif ( stencilTest ) {\n\n\t\t\t\t\t\tenable( gl.STENCIL_TEST );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdisable( gl.STENCIL_TEST );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetMask: function ( stencilMask ) {\n\n\t\t\t\tif ( currentStencilMask !== stencilMask && ! locked ) {\n\n\t\t\t\t\tgl.stencilMask( stencilMask );\n\t\t\t\t\tcurrentStencilMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetFunc: function ( stencilFunc, stencilRef, stencilMask ) {\n\n\t\t\t\tif ( currentStencilFunc !== stencilFunc ||\n\t\t\t\t     currentStencilRef !== stencilRef ||\n\t\t\t\t     currentStencilFuncMask !== stencilMask ) {\n\n\t\t\t\t\tgl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n\n\t\t\t\t\tcurrentStencilFunc = stencilFunc;\n\t\t\t\t\tcurrentStencilRef = stencilRef;\n\t\t\t\t\tcurrentStencilFuncMask = stencilMask;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetOp: function ( stencilFail, stencilZFail, stencilZPass ) {\n\n\t\t\t\tif ( currentStencilFail !== stencilFail ||\n\t\t\t\t     currentStencilZFail !== stencilZFail ||\n\t\t\t\t     currentStencilZPass !== stencilZPass ) {\n\n\t\t\t\t\tgl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n\n\t\t\t\t\tcurrentStencilFail = stencilFail;\n\t\t\t\t\tcurrentStencilZFail = stencilZFail;\n\t\t\t\t\tcurrentStencilZPass = stencilZPass;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tsetLocked: function ( lock ) {\n\n\t\t\t\tlocked = lock;\n\n\t\t\t},\n\n\t\t\tsetClear: function ( stencil ) {\n\n\t\t\t\tif ( currentStencilClear !== stencil ) {\n\n\t\t\t\t\tgl.clearStencil( stencil );\n\t\t\t\t\tcurrentStencilClear = stencil;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\treset: function () {\n\n\t\t\t\tlocked = false;\n\n\t\t\t\tcurrentStencilMask = null;\n\t\t\t\tcurrentStencilFunc = null;\n\t\t\t\tcurrentStencilRef = null;\n\t\t\t\tcurrentStencilFuncMask = null;\n\t\t\t\tcurrentStencilFail = null;\n\t\t\t\tcurrentStencilZFail = null;\n\t\t\t\tcurrentStencilZPass = null;\n\t\t\t\tcurrentStencilClear = null;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t//\n\n\tconst colorBuffer = new ColorBuffer();\n\tconst depthBuffer = new DepthBuffer();\n\tconst stencilBuffer = new StencilBuffer();\n\n\tconst uboBindings = new WeakMap();\n\tconst uboProgramMap = new WeakMap();\n\n\tlet enabledCapabilities = {};\n\n\tlet currentBoundFramebuffers = {};\n\tlet currentDrawbuffers = new WeakMap();\n\tlet defaultDrawbuffers = [];\n\n\tlet currentProgram = null;\n\n\tlet currentBlendingEnabled = false;\n\tlet currentBlending = null;\n\tlet currentBlendEquation = null;\n\tlet currentBlendSrc = null;\n\tlet currentBlendDst = null;\n\tlet currentBlendEquationAlpha = null;\n\tlet currentBlendSrcAlpha = null;\n\tlet currentBlendDstAlpha = null;\n\tlet currentBlendColor = new Color( 0, 0, 0 );\n\tlet currentBlendAlpha = 0;\n\tlet currentPremultipledAlpha = false;\n\n\tlet currentFlipSided = null;\n\tlet currentCullFace = null;\n\n\tlet currentLineWidth = null;\n\n\tlet currentPolygonOffsetFactor = null;\n\tlet currentPolygonOffsetUnits = null;\n\n\tconst maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );\n\n\tlet lineWidthAvailable = false;\n\tlet version = 0;\n\tconst glVersion = gl.getParameter( gl.VERSION );\n\n\tif ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^WebGL (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 1.0 );\n\n\t} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {\n\n\t\tversion = parseFloat( /^OpenGL ES (\\d)/.exec( glVersion )[ 1 ] );\n\t\tlineWidthAvailable = ( version >= 2.0 );\n\n\t}\n\n\tlet currentTextureSlot = null;\n\tlet currentBoundTextures = {};\n\n\tconst scissorParam = gl.getParameter( gl.SCISSOR_BOX );\n\tconst viewportParam = gl.getParameter( gl.VIEWPORT );\n\n\tconst currentScissor = new Vector4().fromArray( scissorParam );\n\tconst currentViewport = new Vector4().fromArray( viewportParam );\n\n\tfunction createTexture( type, target, count, dimensions ) {\n\n\t\tconst data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.\n\t\tconst texture = gl.createTexture();\n\n\t\tgl.bindTexture( type, texture );\n\t\tgl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );\n\t\tgl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tif ( isWebGL2 && ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) ) {\n\n\t\t\t\tgl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t} else {\n\n\t\t\t\tgl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n\tconst emptyTextures = {};\n\temptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );\n\temptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );\n\n\tif ( isWebGL2 ) {\n\n\t\temptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );\n\t\temptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );\n\n\t}\n\n\t// init\n\n\tcolorBuffer.setClear( 0, 0, 0, 1 );\n\tdepthBuffer.setClear( 1 );\n\tstencilBuffer.setClear( 0 );\n\n\tenable( gl.DEPTH_TEST );\n\tdepthBuffer.setFunc( LessEqualDepth );\n\n\tsetFlipSided( false );\n\tsetCullFace( CullFaceBack );\n\tenable( gl.CULL_FACE );\n\n\tsetBlending( NoBlending );\n\n\t//\n\n\tfunction enable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== true ) {\n\n\t\t\tgl.enable( id );\n\t\t\tenabledCapabilities[ id ] = true;\n\n\t\t}\n\n\t}\n\n\tfunction disable( id ) {\n\n\t\tif ( enabledCapabilities[ id ] !== false ) {\n\n\t\t\tgl.disable( id );\n\t\t\tenabledCapabilities[ id ] = false;\n\n\t\t}\n\n\t}\n\n\tfunction bindFramebuffer( target, framebuffer ) {\n\n\t\tif ( currentBoundFramebuffers[ target ] !== framebuffer ) {\n\n\t\t\tgl.bindFramebuffer( target, framebuffer );\n\n\t\t\tcurrentBoundFramebuffers[ target ] = framebuffer;\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER\n\n\t\t\t\tif ( target === gl.DRAW_FRAMEBUFFER ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t\tif ( target === gl.FRAMEBUFFER ) {\n\n\t\t\t\t\tcurrentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction drawBuffers( renderTarget, framebuffer ) {\n\n\t\tlet drawBuffers = defaultDrawbuffers;\n\n\t\tlet needsUpdate = false;\n\n\t\tif ( renderTarget ) {\n\n\t\t\tdrawBuffers = currentDrawbuffers.get( framebuffer );\n\n\t\t\tif ( drawBuffers === undefined ) {\n\n\t\t\t\tdrawBuffers = [];\n\t\t\t\tcurrentDrawbuffers.set( framebuffer, drawBuffers );\n\n\t\t\t}\n\n\t\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\tif ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tdrawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tdrawBuffers.length = textures.length;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {\n\n\t\t\t\t\tdrawBuffers[ 0 ] = gl.COLOR_ATTACHMENT0;\n\n\t\t\t\t\tneedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( drawBuffers[ 0 ] !== gl.BACK ) {\n\n\t\t\t\tdrawBuffers[ 0 ] = gl.BACK;\n\n\t\t\t\tneedsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\tgl.drawBuffers( drawBuffers );\n\n\t\t\t} else {\n\n\t\t\t\textensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );\n\n\t\t\t}\n\n\t\t}\n\n\n\t}\n\n\tfunction useProgram( program ) {\n\n\t\tif ( currentProgram !== program ) {\n\n\t\t\tgl.useProgram( program );\n\n\t\t\tcurrentProgram = program;\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tconst equationToGL = {\n\t\t[ AddEquation ]: gl.FUNC_ADD,\n\t\t[ SubtractEquation ]: gl.FUNC_SUBTRACT,\n\t\t[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT\n\t};\n\n\tif ( isWebGL2 ) {\n\n\t\tequationToGL[ MinEquation ] = gl.MIN;\n\t\tequationToGL[ MaxEquation ] = gl.MAX;\n\n\t} else {\n\n\t\tconst extension = extensions.get( 'EXT_blend_minmax' );\n\n\t\tif ( extension !== null ) {\n\n\t\t\tequationToGL[ MinEquation ] = extension.MIN_EXT;\n\t\t\tequationToGL[ MaxEquation ] = extension.MAX_EXT;\n\n\t\t}\n\n\t}\n\n\tconst factorToGL = {\n\t\t[ ZeroFactor ]: gl.ZERO,\n\t\t[ OneFactor ]: gl.ONE,\n\t\t[ SrcColorFactor ]: gl.SRC_COLOR,\n\t\t[ SrcAlphaFactor ]: gl.SRC_ALPHA,\n\t\t[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,\n\t\t[ DstColorFactor ]: gl.DST_COLOR,\n\t\t[ DstAlphaFactor ]: gl.DST_ALPHA,\n\t\t[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,\n\t\t[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,\n\t\t[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,\n\t\t[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA,\n\t\t[ ConstantColorFactor ]: gl.CONSTANT_COLOR,\n\t\t[ OneMinusConstantColorFactor ]: gl.ONE_MINUS_CONSTANT_COLOR,\n\t\t[ ConstantAlphaFactor ]: gl.CONSTANT_ALPHA,\n\t\t[ OneMinusConstantAlphaFactor ]: gl.ONE_MINUS_CONSTANT_ALPHA\n\t};\n\n\tfunction setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha ) {\n\n\t\tif ( blending === NoBlending ) {\n\n\t\t\tif ( currentBlendingEnabled === true ) {\n\n\t\t\t\tdisable( gl.BLEND );\n\t\t\t\tcurrentBlendingEnabled = false;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( currentBlendingEnabled === false ) {\n\n\t\t\tenable( gl.BLEND );\n\t\t\tcurrentBlendingEnabled = true;\n\n\t\t}\n\n\t\tif ( blending !== CustomBlending ) {\n\n\t\t\tif ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {\n\n\t\t\t\tif ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {\n\n\t\t\t\t\tgl.blendEquation( gl.FUNC_ADD );\n\n\t\t\t\t\tcurrentBlendEquation = AddEquation;\n\t\t\t\t\tcurrentBlendEquationAlpha = AddEquation;\n\n\t\t\t\t}\n\n\t\t\t\tif ( premultipliedAlpha ) {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ONE, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tswitch ( blending ) {\n\n\t\t\t\t\t\tcase NormalBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase AdditiveBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.SRC_ALPHA, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase SubtractiveBlending:\n\t\t\t\t\t\t\tgl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase MultiplyBlending:\n\t\t\t\t\t\t\tgl.blendFunc( gl.ZERO, gl.SRC_COLOR );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.WebGLState: Invalid blending: ', blending );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tcurrentBlendSrc = null;\n\t\t\t\tcurrentBlendDst = null;\n\t\t\t\tcurrentBlendSrcAlpha = null;\n\t\t\t\tcurrentBlendDstAlpha = null;\n\t\t\t\tcurrentBlendColor.set( 0, 0, 0 );\n\t\t\t\tcurrentBlendAlpha = 0;\n\n\t\t\t\tcurrentBlending = blending;\n\t\t\t\tcurrentPremultipledAlpha = premultipliedAlpha;\n\n\t\t\t}\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// custom blending\n\n\t\tblendEquationAlpha = blendEquationAlpha || blendEquation;\n\t\tblendSrcAlpha = blendSrcAlpha || blendSrc;\n\t\tblendDstAlpha = blendDstAlpha || blendDst;\n\n\t\tif ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {\n\n\t\t\tgl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );\n\n\t\t\tcurrentBlendEquation = blendEquation;\n\t\t\tcurrentBlendEquationAlpha = blendEquationAlpha;\n\n\t\t}\n\n\t\tif ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {\n\n\t\t\tgl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );\n\n\t\t\tcurrentBlendSrc = blendSrc;\n\t\t\tcurrentBlendDst = blendDst;\n\t\t\tcurrentBlendSrcAlpha = blendSrcAlpha;\n\t\t\tcurrentBlendDstAlpha = blendDstAlpha;\n\n\t\t}\n\n\t\tif ( blendColor.equals( currentBlendColor ) === false || blendAlpha !== currentBlendAlpha ) {\n\n\t\t\tgl.blendColor( blendColor.r, blendColor.g, blendColor.b, blendAlpha );\n\n\t\t\tcurrentBlendColor.copy( blendColor );\n\t\t\tcurrentBlendAlpha = blendAlpha;\n\n\t\t}\n\n\t\tcurrentBlending = blending;\n\t\tcurrentPremultipledAlpha = false;\n\n\t}\n\n\tfunction setMaterial( material, frontFaceCW ) {\n\n\t\tmaterial.side === DoubleSide\n\t\t\t? disable( gl.CULL_FACE )\n\t\t\t: enable( gl.CULL_FACE );\n\n\t\tlet flipSided = ( material.side === BackSide );\n\t\tif ( frontFaceCW ) flipSided = ! flipSided;\n\n\t\tsetFlipSided( flipSided );\n\n\t\t( material.blending === NormalBlending && material.transparent === false )\n\t\t\t? setBlending( NoBlending )\n\t\t\t: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha );\n\n\t\tdepthBuffer.setFunc( material.depthFunc );\n\t\tdepthBuffer.setTest( material.depthTest );\n\t\tdepthBuffer.setMask( material.depthWrite );\n\t\tcolorBuffer.setMask( material.colorWrite );\n\n\t\tconst stencilWrite = material.stencilWrite;\n\t\tstencilBuffer.setTest( stencilWrite );\n\t\tif ( stencilWrite ) {\n\n\t\t\tstencilBuffer.setMask( material.stencilWriteMask );\n\t\t\tstencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );\n\t\t\tstencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );\n\n\t\t}\n\n\t\tsetPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );\n\n\t\tmaterial.alphaToCoverage === true\n\t\t\t? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )\n\t\t\t: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t}\n\n\t//\n\n\tfunction setFlipSided( flipSided ) {\n\n\t\tif ( currentFlipSided !== flipSided ) {\n\n\t\t\tif ( flipSided ) {\n\n\t\t\t\tgl.frontFace( gl.CW );\n\n\t\t\t} else {\n\n\t\t\t\tgl.frontFace( gl.CCW );\n\n\t\t\t}\n\n\t\t\tcurrentFlipSided = flipSided;\n\n\t\t}\n\n\t}\n\n\tfunction setCullFace( cullFace ) {\n\n\t\tif ( cullFace !== CullFaceNone ) {\n\n\t\t\tenable( gl.CULL_FACE );\n\n\t\t\tif ( cullFace !== currentCullFace ) {\n\n\t\t\t\tif ( cullFace === CullFaceBack ) {\n\n\t\t\t\t\tgl.cullFace( gl.BACK );\n\n\t\t\t\t} else if ( cullFace === CullFaceFront ) {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tgl.cullFace( gl.FRONT_AND_BACK );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.CULL_FACE );\n\n\t\t}\n\n\t\tcurrentCullFace = cullFace;\n\n\t}\n\n\tfunction setLineWidth( width ) {\n\n\t\tif ( width !== currentLineWidth ) {\n\n\t\t\tif ( lineWidthAvailable ) gl.lineWidth( width );\n\n\t\t\tcurrentLineWidth = width;\n\n\t\t}\n\n\t}\n\n\tfunction setPolygonOffset( polygonOffset, factor, units ) {\n\n\t\tif ( polygonOffset ) {\n\n\t\t\tenable( gl.POLYGON_OFFSET_FILL );\n\n\t\t\tif ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {\n\n\t\t\t\tgl.polygonOffset( factor, units );\n\n\t\t\t\tcurrentPolygonOffsetFactor = factor;\n\t\t\t\tcurrentPolygonOffsetUnits = units;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tdisable( gl.POLYGON_OFFSET_FILL );\n\n\t\t}\n\n\t}\n\n\tfunction setScissorTest( scissorTest ) {\n\n\t\tif ( scissorTest ) {\n\n\t\t\tenable( gl.SCISSOR_TEST );\n\n\t\t} else {\n\n\t\t\tdisable( gl.SCISSOR_TEST );\n\n\t\t}\n\n\t}\n\n\t// texture\n\n\tfunction activeTexture( webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\tgl.activeTexture( webglSlot );\n\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t}\n\n\t}\n\n\tfunction bindTexture( webglType, webglTexture, webglSlot ) {\n\n\t\tif ( webglSlot === undefined ) {\n\n\t\t\tif ( currentTextureSlot === null ) {\n\n\t\t\t\twebglSlot = gl.TEXTURE0 + maxTextures - 1;\n\n\t\t\t} else {\n\n\t\t\t\twebglSlot = currentTextureSlot;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet boundTexture = currentBoundTextures[ webglSlot ];\n\n\t\tif ( boundTexture === undefined ) {\n\n\t\t\tboundTexture = { type: undefined, texture: undefined };\n\t\t\tcurrentBoundTextures[ webglSlot ] = boundTexture;\n\n\t\t}\n\n\t\tif ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {\n\n\t\t\tif ( currentTextureSlot !== webglSlot ) {\n\n\t\t\t\tgl.activeTexture( webglSlot );\n\t\t\t\tcurrentTextureSlot = webglSlot;\n\n\t\t\t}\n\n\t\t\tgl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );\n\n\t\t\tboundTexture.type = webglType;\n\t\t\tboundTexture.texture = webglTexture;\n\n\t\t}\n\n\t}\n\n\tfunction unbindTexture() {\n\n\t\tconst boundTexture = currentBoundTextures[ currentTextureSlot ];\n\n\t\tif ( boundTexture !== undefined && boundTexture.type !== undefined ) {\n\n\t\t\tgl.bindTexture( boundTexture.type, null );\n\n\t\t\tboundTexture.type = undefined;\n\t\t\tboundTexture.texture = undefined;\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction compressedTexSubImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.compressedTexSubImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texStorage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texStorage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage2D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage2D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\tfunction texImage3D() {\n\n\t\ttry {\n\n\t\t\tgl.texImage3D.apply( gl, arguments );\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLState:', error );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction scissor( scissor ) {\n\n\t\tif ( currentScissor.equals( scissor ) === false ) {\n\n\t\t\tgl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );\n\t\t\tcurrentScissor.copy( scissor );\n\n\t\t}\n\n\t}\n\n\tfunction viewport( viewport ) {\n\n\t\tif ( currentViewport.equals( viewport ) === false ) {\n\n\t\t\tgl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );\n\t\t\tcurrentViewport.copy( viewport );\n\n\t\t}\n\n\t}\n\n\tfunction updateUBOMapping( uniformsGroup, program ) {\n\n\t\tlet mapping = uboProgramMap.get( program );\n\n\t\tif ( mapping === undefined ) {\n\n\t\t\tmapping = new WeakMap();\n\n\t\t\tuboProgramMap.set( program, mapping );\n\n\t\t}\n\n\t\tlet blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( blockIndex === undefined ) {\n\n\t\t\tblockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );\n\n\t\t\tmapping.set( uniformsGroup, blockIndex );\n\n\t\t}\n\n\t}\n\n\tfunction uniformBlockBinding( uniformsGroup, program ) {\n\n\t\tconst mapping = uboProgramMap.get( program );\n\t\tconst blockIndex = mapping.get( uniformsGroup );\n\n\t\tif ( uboBindings.get( program ) !== blockIndex ) {\n\n\t\t\t// bind shader specific block index to global block point\n\t\t\tgl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );\n\n\t\t\tuboBindings.set( program, blockIndex );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction reset() {\n\n\t\t// reset state\n\n\t\tgl.disable( gl.BLEND );\n\t\tgl.disable( gl.CULL_FACE );\n\t\tgl.disable( gl.DEPTH_TEST );\n\t\tgl.disable( gl.POLYGON_OFFSET_FILL );\n\t\tgl.disable( gl.SCISSOR_TEST );\n\t\tgl.disable( gl.STENCIL_TEST );\n\t\tgl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );\n\n\t\tgl.blendEquation( gl.FUNC_ADD );\n\t\tgl.blendFunc( gl.ONE, gl.ZERO );\n\t\tgl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );\n\t\tgl.blendColor( 0, 0, 0, 0 );\n\n\t\tgl.colorMask( true, true, true, true );\n\t\tgl.clearColor( 0, 0, 0, 0 );\n\n\t\tgl.depthMask( true );\n\t\tgl.depthFunc( gl.LESS );\n\t\tgl.clearDepth( 1 );\n\n\t\tgl.stencilMask( 0xffffffff );\n\t\tgl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );\n\t\tgl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );\n\t\tgl.clearStencil( 0 );\n\n\t\tgl.cullFace( gl.BACK );\n\t\tgl.frontFace( gl.CCW );\n\n\t\tgl.polygonOffset( 0, 0 );\n\n\t\tgl.activeTexture( gl.TEXTURE0 );\n\n\t\tgl.bindFramebuffer( gl.FRAMEBUFFER, null );\n\n\t\tif ( isWebGL2 === true ) {\n\n\t\t\tgl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );\n\t\t\tgl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );\n\n\t\t}\n\n\t\tgl.useProgram( null );\n\n\t\tgl.lineWidth( 1 );\n\n\t\tgl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tgl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\t// reset internals\n\n\t\tenabledCapabilities = {};\n\n\t\tcurrentTextureSlot = null;\n\t\tcurrentBoundTextures = {};\n\n\t\tcurrentBoundFramebuffers = {};\n\t\tcurrentDrawbuffers = new WeakMap();\n\t\tdefaultDrawbuffers = [];\n\n\t\tcurrentProgram = null;\n\n\t\tcurrentBlendingEnabled = false;\n\t\tcurrentBlending = null;\n\t\tcurrentBlendEquation = null;\n\t\tcurrentBlendSrc = null;\n\t\tcurrentBlendDst = null;\n\t\tcurrentBlendEquationAlpha = null;\n\t\tcurrentBlendSrcAlpha = null;\n\t\tcurrentBlendDstAlpha = null;\n\t\tcurrentBlendColor = new Color( 0, 0, 0 );\n\t\tcurrentBlendAlpha = 0;\n\t\tcurrentPremultipledAlpha = false;\n\n\t\tcurrentFlipSided = null;\n\t\tcurrentCullFace = null;\n\n\t\tcurrentLineWidth = null;\n\n\t\tcurrentPolygonOffsetFactor = null;\n\t\tcurrentPolygonOffsetUnits = null;\n\n\t\tcurrentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\t\tcurrentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );\n\n\t\tcolorBuffer.reset();\n\t\tdepthBuffer.reset();\n\t\tstencilBuffer.reset();\n\n\t}\n\n\treturn {\n\n\t\tbuffers: {\n\t\t\tcolor: colorBuffer,\n\t\t\tdepth: depthBuffer,\n\t\t\tstencil: stencilBuffer\n\t\t},\n\n\t\tenable: enable,\n\t\tdisable: disable,\n\n\t\tbindFramebuffer: bindFramebuffer,\n\t\tdrawBuffers: drawBuffers,\n\n\t\tuseProgram: useProgram,\n\n\t\tsetBlending: setBlending,\n\t\tsetMaterial: setMaterial,\n\n\t\tsetFlipSided: setFlipSided,\n\t\tsetCullFace: setCullFace,\n\n\t\tsetLineWidth: setLineWidth,\n\t\tsetPolygonOffset: setPolygonOffset,\n\n\t\tsetScissorTest: setScissorTest,\n\n\t\tactiveTexture: activeTexture,\n\t\tbindTexture: bindTexture,\n\t\tunbindTexture: unbindTexture,\n\t\tcompressedTexImage2D: compressedTexImage2D,\n\t\tcompressedTexImage3D: compressedTexImage3D,\n\t\ttexImage2D: texImage2D,\n\t\ttexImage3D: texImage3D,\n\n\t\tupdateUBOMapping: updateUBOMapping,\n\t\tuniformBlockBinding: uniformBlockBinding,\n\n\t\ttexStorage2D: texStorage2D,\n\t\ttexStorage3D: texStorage3D,\n\t\ttexSubImage2D: texSubImage2D,\n\t\ttexSubImage3D: texSubImage3D,\n\t\tcompressedTexSubImage2D: compressedTexSubImage2D,\n\t\tcompressedTexSubImage3D: compressedTexSubImage3D,\n\n\t\tscissor: scissor,\n\t\tviewport: viewport,\n\n\t\treset: reset\n\n\t};\n\n}\n\nfunction WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\tconst maxTextures = capabilities.maxTextures;\n\tconst maxCubemapSize = capabilities.maxCubemapSize;\n\tconst maxTextureSize = capabilities.maxTextureSize;\n\tconst maxSamples = capabilities.maxSamples;\n\tconst multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;\n\tconst supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );\n\n\tconst _videoTextures = new WeakMap();\n\tlet _canvas;\n\n\tconst _sources = new WeakMap(); // maps WebglTexture objects to instances of Source\n\n\t// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,\n\t// also OffscreenCanvas.getContext(\"webgl\"), but not OffscreenCanvas.getContext(\"2d\")!\n\t// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).\n\n\tlet useOffscreenCanvas = false;\n\n\ttry {\n\n\t\tuseOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\t&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;\n\n\t} catch ( err ) {\n\n\t\t// Ignore any errors\n\n\t}\n\n\tfunction createCanvas( width, height ) {\n\n\t\t// Use OffscreenCanvas when available. Specially needed in web workers\n\n\t\treturn useOffscreenCanvas ?\n\t\t\t// eslint-disable-next-line compat/compat\n\t\t\tnew OffscreenCanvas( width, height ) : createElementNS( 'canvas' );\n\n\t}\n\n\tfunction resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {\n\n\t\tlet scale = 1;\n\n\t\t// handle case if texture exceeds max size\n\n\t\tif ( image.width > maxSize || image.height > maxSize ) {\n\n\t\t\tscale = maxSize / Math.max( image.width, image.height );\n\n\t\t}\n\n\t\t// only perform resize if necessary\n\n\t\tif ( scale < 1 || needsPowerOfTwo === true ) {\n\n\t\t\t// only perform resize for certain image types\n\n\t\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\n\t\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\n\t\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\n\n\t\t\t\tconst floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;\n\n\t\t\t\tconst width = floor( scale * image.width );\n\t\t\t\tconst height = floor( scale * image.height );\n\n\t\t\t\tif ( _canvas === undefined ) _canvas = createCanvas( width, height );\n\n\t\t\t\t// cube textures can't reuse the same canvas\n\n\t\t\t\tconst canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;\n\n\t\t\t\tcanvas.width = width;\n\t\t\t\tcanvas.height = height;\n\n\t\t\t\tconst context = canvas.getContext( '2d' );\n\t\t\t\tcontext.drawImage( image, 0, 0, width, height );\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );\n\n\t\t\t\treturn canvas;\n\n\t\t\t} else {\n\n\t\t\t\tif ( 'data' in image ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );\n\n\t\t\t\t}\n\n\t\t\t\treturn image;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\tfunction isPowerOfTwo$1( image ) {\n\n\t\treturn isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );\n\n\t}\n\n\tfunction textureNeedsPowerOfTwo( texture ) {\n\n\t\tif ( isWebGL2 ) return false;\n\n\t\treturn ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||\n\t\t\t( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );\n\n\t}\n\n\tfunction textureNeedsGenerateMipmaps( texture, supportsMips ) {\n\n\t\treturn texture.generateMipmaps && supportsMips &&\n\t\t\ttexture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;\n\n\t}\n\n\tfunction generateMipmap( target ) {\n\n\t\t_gl.generateMipmap( target );\n\n\t}\n\n\tfunction getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {\n\n\t\tif ( isWebGL2 === false ) return glFormat;\n\n\t\tif ( internalFormatName !== null ) {\n\n\t\t\tif ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \\'' + internalFormatName + '\\'' );\n\n\t\t}\n\n\t\tlet internalFormat = glFormat;\n\n\t\tif ( glFormat === _gl.RED ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RED_INTEGER ) {\n\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;\n\t\t\tif ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;\n\t\t\tif ( glType === _gl.BYTE ) internalFormat = _gl.R8I;\n\t\t\tif ( glType === _gl.SHORT ) internalFormat = _gl.R16I;\n\t\t\tif ( glType === _gl.INT ) internalFormat = _gl.R32I;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RG ) {\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;\n\n\t\t}\n\n\t\tif ( glFormat === _gl.RGBA ) {\n\n\t\t\tconst transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer( colorSpace );\n\n\t\t\tif ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;\n\t\t\tif ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;\n\t\t\tif ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( transfer === SRGBTransfer ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;\n\t\t\tif ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;\n\n\t\t}\n\n\t\tif ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||\n\t\t\tinternalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||\n\t\t\tinternalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {\n\n\t\t\textensions.get( 'EXT_color_buffer_float' );\n\n\t\t}\n\n\t\treturn internalFormat;\n\n\t}\n\n\tfunction getMipLevels( texture, image, supportsMips ) {\n\n\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {\n\n\t\t\treturn Math.log2( Math.max( image.width, image.height ) ) + 1;\n\n\t\t} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {\n\n\t\t\t// user-defined mipmaps\n\n\t\t\treturn texture.mipmaps.length;\n\n\t\t} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {\n\n\t\t\treturn image.mipmaps.length;\n\n\t\t} else {\n\n\t\t\t// texture without mipmaps (only base level)\n\n\t\t\treturn 1;\n\n\t\t}\n\n\t}\n\n\t// Fallback filters for non-power-of-2 textures\n\n\tfunction filterFallback( f ) {\n\n\t\tif ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {\n\n\t\t\treturn _gl.NEAREST;\n\n\t\t}\n\n\t\treturn _gl.LINEAR;\n\n\t}\n\n\t//\n\n\tfunction onTextureDispose( event ) {\n\n\t\tconst texture = event.target;\n\n\t\ttexture.removeEventListener( 'dispose', onTextureDispose );\n\n\t\tdeallocateTexture( texture );\n\n\t\tif ( texture.isVideoTexture ) {\n\n\t\t\t_videoTextures.delete( texture );\n\n\t\t}\n\n\t}\n\n\tfunction onRenderTargetDispose( event ) {\n\n\t\tconst renderTarget = event.target;\n\n\t\trenderTarget.removeEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tdeallocateRenderTarget( renderTarget );\n\n\t}\n\n\t//\n\n\tfunction deallocateTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglInit === undefined ) return;\n\n\t\t// check if it's necessary to remove the WebGLTexture object\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures ) {\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\t\t\twebglTexture.usedTimes --;\n\n\t\t\t// the WebGLTexture object is not used anymore, remove it\n\n\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\tdeleteTexture( texture );\n\n\t\t\t}\n\n\t\t\t// remove the weak map entry if no WebGLTexture uses the source anymore\n\n\t\t\tif ( Object.keys( webglTextures ).length === 0 ) {\n\n\t\t\t\t_sources.delete( source );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\n\t}\n\n\tfunction deleteTexture( texture ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\tconst source = texture.source;\n\t\tconst webglTextures = _sources.get( source );\n\t\tdelete webglTextures[ textureProperties.__cacheKey ];\n\n\t\tinfo.memory.textures --;\n\n\t}\n\n\tfunction deallocateRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( textureProperties.__webglTexture !== undefined ) {\n\n\t\t\t_gl.deleteTexture( textureProperties.__webglTexture );\n\n\t\t\tinfo.memory.textures --;\n\n\t\t}\n\n\t\tif ( renderTarget.depthTexture ) {\n\n\t\t\trenderTarget.depthTexture.dispose();\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {\n\n\t\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {\n\n\t\t\t\tfor ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );\n\t\t\tif ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer ) {\n\n\t\t\t\tfor ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {\n\n\t\t\t\t\tif ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );\n\n\t\t}\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets ) {\n\n\t\t\tfor ( let i = 0, il = texture.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachmentProperties = properties.get( texture[ i ] );\n\n\t\t\t\tif ( attachmentProperties.__webglTexture ) {\n\n\t\t\t\t\t_gl.deleteTexture( attachmentProperties.__webglTexture );\n\n\t\t\t\t\tinfo.memory.textures --;\n\n\t\t\t\t}\n\n\t\t\t\tproperties.remove( texture[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tproperties.remove( texture );\n\t\tproperties.remove( renderTarget );\n\n\t}\n\n\t//\n\n\tlet textureUnits = 0;\n\n\tfunction resetTextureUnits() {\n\n\t\ttextureUnits = 0;\n\n\t}\n\n\tfunction allocateTextureUnit() {\n\n\t\tconst textureUnit = textureUnits;\n\n\t\tif ( textureUnit >= maxTextures ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );\n\n\t\t}\n\n\t\ttextureUnits += 1;\n\n\t\treturn textureUnit;\n\n\t}\n\n\tfunction getTextureCacheKey( texture ) {\n\n\t\tconst array = [];\n\n\t\tarray.push( texture.wrapS );\n\t\tarray.push( texture.wrapT );\n\t\tarray.push( texture.wrapR || 0 );\n\t\tarray.push( texture.magFilter );\n\t\tarray.push( texture.minFilter );\n\t\tarray.push( texture.anisotropy );\n\t\tarray.push( texture.internalFormat );\n\t\tarray.push( texture.format );\n\t\tarray.push( texture.type );\n\t\tarray.push( texture.generateMipmaps );\n\t\tarray.push( texture.premultiplyAlpha );\n\t\tarray.push( texture.flipY );\n\t\tarray.push( texture.unpackAlignment );\n\t\tarray.push( texture.colorSpace );\n\n\t\treturn array.join();\n\n\t}\n\n\t//\n\n\tfunction setTexture2D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.isVideoTexture ) updateVideoTexture( texture );\n\n\t\tif ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tconst image = texture.image;\n\n\t\t\tif ( image === null ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );\n\n\t\t\t} else if ( image.complete === false ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );\n\n\t\t\t} else {\n\n\t\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture2DArray( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTexture3D( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tfunction setTextureCube( texture, slot ) {\n\n\t\tconst textureProperties = properties.get( texture );\n\n\t\tif ( texture.version > 0 && textureProperties.__version !== texture.version ) {\n\n\t\t\tuploadCubeTexture( textureProperties, texture, slot );\n\t\t\treturn;\n\n\t\t}\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t}\n\n\tconst wrappingToGL = {\n\t\t[ RepeatWrapping ]: _gl.REPEAT,\n\t\t[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,\n\t\t[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT\n\t};\n\n\tconst filterToGL = {\n\t\t[ NearestFilter ]: _gl.NEAREST,\n\t\t[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,\n\t\t[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,\n\n\t\t[ LinearFilter ]: _gl.LINEAR,\n\t\t[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,\n\t\t[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR\n\t};\n\n\tconst compareToGL = {\n\t\t[ NeverCompare ]: _gl.NEVER,\n\t\t[ AlwaysCompare ]: _gl.ALWAYS,\n\t\t[ LessCompare ]: _gl.LESS,\n\t\t[ LessEqualCompare ]: _gl.LEQUAL,\n\t\t[ EqualCompare ]: _gl.EQUAL,\n\t\t[ GreaterEqualCompare ]: _gl.GEQUAL,\n\t\t[ GreaterCompare ]: _gl.GREATER,\n\t\t[ NotEqualCompare ]: _gl.NOTEQUAL\n\t};\n\n\tfunction setTextureParameters( textureType, texture, supportsMips ) {\n\n\t\tif ( supportsMips ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );\n\n\t\t} else {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );\n\n\t\t\tif ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );\n\n\t\t\t}\n\n\t\t\tif ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );\n\n\t\t\t}\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );\n\n\t\t\tif ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( texture.compareFunction ) {\n\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );\n\t\t\t_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );\n\n\t\t}\n\n\t\tif ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n\t\t\tconst extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n\t\t\tif ( texture.magFilter === NearestFilter ) return;\n\t\t\tif ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;\n\t\t\tif ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2\n\t\t\tif ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only\n\n\t\t\tif ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {\n\n\t\t\t\t_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );\n\t\t\t\tproperties.get( texture ).__currentAnisotropy = texture.anisotropy;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction initTexture( textureProperties, texture ) {\n\n\t\tlet forceUpload = false;\n\n\t\tif ( textureProperties.__webglInit === undefined ) {\n\n\t\t\ttextureProperties.__webglInit = true;\n\n\t\t\ttexture.addEventListener( 'dispose', onTextureDispose );\n\n\t\t}\n\n\t\t// create Source <-> WebGLTextures mapping if necessary\n\n\t\tconst source = texture.source;\n\t\tlet webglTextures = _sources.get( source );\n\n\t\tif ( webglTextures === undefined ) {\n\n\t\t\twebglTextures = {};\n\t\t\t_sources.set( source, webglTextures );\n\n\t\t}\n\n\t\t// check if there is already a WebGLTexture object for the given texture parameters\n\n\t\tconst textureCacheKey = getTextureCacheKey( texture );\n\n\t\tif ( textureCacheKey !== textureProperties.__cacheKey ) {\n\n\t\t\t// if not, create a new instance of WebGLTexture\n\n\t\t\tif ( webglTextures[ textureCacheKey ] === undefined ) {\n\n\t\t\t\t// create new entry\n\n\t\t\t\twebglTextures[ textureCacheKey ] = {\n\t\t\t\t\ttexture: _gl.createTexture(),\n\t\t\t\t\tusedTimes: 0\n\t\t\t\t};\n\n\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t// when a new instance of WebGLTexture was created, a texture upload is required\n\t\t\t\t// even if the image contents are identical\n\n\t\t\t\tforceUpload = true;\n\n\t\t\t}\n\n\t\t\twebglTextures[ textureCacheKey ].usedTimes ++;\n\n\t\t\t// every time the texture cache key changes, it's necessary to check if an instance of\n\t\t\t// WebGLTexture can be deleted in order to avoid a memory leak.\n\n\t\t\tconst webglTexture = webglTextures[ textureProperties.__cacheKey ];\n\n\t\t\tif ( webglTexture !== undefined ) {\n\n\t\t\t\twebglTextures[ textureProperties.__cacheKey ].usedTimes --;\n\n\t\t\t\tif ( webglTexture.usedTimes === 0 ) {\n\n\t\t\t\t\tdeleteTexture( texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// store references to cache key and WebGLTexture object\n\n\t\t\ttextureProperties.__cacheKey = textureCacheKey;\n\t\t\ttextureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;\n\n\t\t}\n\n\t\treturn forceUpload;\n\n\t}\n\n\tfunction uploadTexture( textureProperties, texture, slot ) {\n\n\t\tlet textureType = _gl.TEXTURE_2D;\n\n\t\tif ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;\n\t\tif ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\n\n\t\t\tconst needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;\n\t\t\tlet image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );\n\t\t\timage = verifyColorSpace( texture, image );\n\n\t\t\tconst supportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.colorSpace );\n\n\t\t\tlet glType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );\n\n\t\t\tsetTextureParameters( textureType, texture, supportsMips );\n\n\t\t\tlet mipmap;\n\t\t\tconst mipmaps = texture.mipmaps;\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tconst levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tif ( texture.isDepthTexture ) {\n\n\t\t\t\t// populate depth texture with dummy data\n\n\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT;\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t\t} else if ( texture.type === UnsignedInt248Type ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH24_STENCIL8;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( texture.type === FloatType ) {\n\n\t\t\t\t\t\tconsole.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// validation checks for WebGL 1\n\n\t\t\t\tif ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedIntType;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {\n\n\t\t\t\t\t// Depth stencil textures need the DEPTH_STENCIL internal format\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tglInternalFormat = _gl.DEPTH_STENCIL;\n\n\t\t\t\t\t// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are\n\t\t\t\t\t// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.\n\t\t\t\t\t// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)\n\t\t\t\t\tif ( texture.type !== UnsignedInt248Type ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );\n\n\t\t\t\t\t\ttexture.type = UnsignedInt248Type;\n\t\t\t\t\t\tglType = utils.convert( texture.type );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t//\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataTexture ) {\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isCompressedTexture ) {\n\n\t\t\t\tif ( texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isDataArrayTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tstate.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstate.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );\n\n\t\t\t\t}\n\n\t\t\t} else if ( texture.isFramebufferTexture ) {\n\n\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tlet width = image.width, height = image.height;\n\n\t\t\t\t\t\tfor ( let i = 0; i < levels; i ++ ) {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t\t\t\t\twidth >>= 1;\n\t\t\t\t\t\t\theight >>= 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// regular Texture (image, video, canvas)\n\n\t\t\t\t// use manually created mipmaps if available\n\t\t\t\t// if there are no manual mipmaps\n\t\t\t\t// set 0 level mipmap and then use GL to generate other mipmap levels\n\n\t\t\t\tif ( mipmaps.length > 0 && supportsMips ) {\n\n\t\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let i = 0, il = mipmaps.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tmipmap = mipmaps[ i ];\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\tif ( allocateMemory ) {\n\n\t\t\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( textureType );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\tfunction uploadCubeTexture( textureProperties, texture, slot ) {\n\n\t\tif ( texture.image.length !== 6 ) return;\n\n\t\tconst forceUpload = initTexture( textureProperties, texture );\n\t\tconst source = texture.source;\n\n\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );\n\n\t\tconst sourceProperties = properties.get( source );\n\n\t\tif ( source.version !== sourceProperties.__version || forceUpload === true ) {\n\n\t\t\tstate.activeTexture( _gl.TEXTURE0 + slot );\n\n\t\t\tconst workingPrimaries = ColorManagement.getPrimaries( ColorManagement.workingColorSpace );\n\t\t\tconst texturePrimaries = texture.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries( texture.colorSpace );\n\t\t\tconst unpackConversion = texture.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion );\n\n\t\t\tconst isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );\n\t\t\tconst isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );\n\n\t\t\tconst cubeImage = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( ! isCompressed && ! isDataTexture ) {\n\n\t\t\t\t\tcubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];\n\n\t\t\t\t}\n\n\t\t\t\tcubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );\n\n\t\t\t}\n\n\t\t\tconst image = cubeImage[ 0 ],\n\t\t\t\tsupportsMips = isPowerOfTwo$1( image ) || isWebGL2,\n\t\t\t\tglFormat = utils.convert( texture.format, texture.colorSpace ),\n\t\t\t\tglType = utils.convert( texture.type ),\n\t\t\t\tglInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\n\t\t\tconst useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );\n\t\t\tconst allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );\n\t\t\tlet levels = getMipLevels( texture, image, supportsMips );\n\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\t\tlet mipmaps;\n\n\t\t\tif ( isCompressed ) {\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tmipmaps = cubeImage[ i ].mipmaps;\n\n\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\tif ( texture.format !== RGBAFormat ) {\n\n\t\t\t\t\t\t\tif ( glFormat !== null ) {\n\n\t\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tstate.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tmipmaps = texture.mipmaps;\n\n\t\t\t\tif ( useTexStorage && allocateMemory ) {\n\n\t\t\t\t\t// TODO: Uniformly handle mipmap definitions\n\t\t\t\t\t// Normal textures and compressed cube textures define base level + mips with their mipmap array\n\t\t\t\t\t// Uncompressed cube textures use their mipmap array only for mips (no base level)\n\n\t\t\t\t\tif ( mipmaps.length > 0 ) levels ++;\n\n\t\t\t\t\tstate.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tif ( isDataTexture ) {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\t\t\t\t\t\t\tconst mipmapImage = mipmap.image[ i ].image;\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let j = 0; j < mipmaps.length; j ++ ) {\n\n\t\t\t\t\t\t\tconst mipmap = mipmaps[ j ];\n\n\t\t\t\t\t\t\tif ( useTexStorage ) {\n\n\t\t\t\t\t\t\t\tstate.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tstate.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\t// We assume images for cube map have the same size.\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tsourceProperties.__version = source.version;\n\n\t\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\t}\n\n\t\ttextureProperties.__version = texture.version;\n\n\t}\n\n\t// Render targets\n\n\t// Setup storage for target texture and bind it to correct framebuffer\n\tfunction setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {\n\n\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\tconst glType = utils.convert( texture.type );\n\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( ! renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\tconst width = Math.max( 1, renderTarget.width >> level );\n\t\t\tconst height = Math.max( 1, renderTarget.height >> level );\n\n\t\t\tif ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {\n\n\t\t\t\tstate.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );\n\n\t\t\t} else {\n\n\t\t\t\tstate.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );\n\n\t\t} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753\n\n\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, level );\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\n\t// Setup storage for internal depth/stencil buffers and bind to correct framebuffer\n\tfunction setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );\n\n\t\tif ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {\n\n\t\t\tlet glInternalFormat = ( isWebGL2 === true ) ? _gl.DEPTH_COMPONENT24 : _gl.DEPTH_COMPONENT16;\n\n\t\t\tif ( isMultisample || useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tconst depthTexture = renderTarget.depthTexture;\n\n\t\t\t\tif ( depthTexture && depthTexture.isDepthTexture ) {\n\n\t\t\t\t\tif ( depthTexture.type === FloatType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT32F;\n\n\t\t\t\t\t} else if ( depthTexture.type === UnsignedIntType ) {\n\n\t\t\t\t\t\tglInternalFormat = _gl.DEPTH_COMPONENT24;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {\n\n\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );\n\n\t\t\t}\n\n\n\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );\n\n\t\t} else {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tconst texture = textures[ i ];\n\n\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );\n\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\t\t\tif ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else if ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\t\tmultisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t}\n\n\t// Setup resources for a Depth Texture for a FBO (needs an extension)\n\tfunction setupDepthTexture( framebuffer, renderTarget ) {\n\n\t\tconst isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );\n\t\tif ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\tif ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {\n\n\t\t\tthrow new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );\n\n\t\t}\n\n\t\t// upload an empty depth texture with framebuffer size\n\t\tif ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||\n\t\t\t\trenderTarget.depthTexture.image.width !== renderTarget.width ||\n\t\t\t\trenderTarget.depthTexture.image.height !== renderTarget.height ) {\n\n\t\t\trenderTarget.depthTexture.image.width = renderTarget.width;\n\t\t\trenderTarget.depthTexture.image.height = renderTarget.height;\n\t\t\trenderTarget.depthTexture.needsUpdate = true;\n\n\t\t}\n\n\t\tsetTexture2D( renderTarget.depthTexture, 0 );\n\n\t\tconst webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;\n\t\tconst samples = getRenderTargetSamples( renderTarget );\n\n\t\tif ( renderTarget.depthTexture.format === DepthFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {\n\n\t\t\tif ( useMultisampledRTT( renderTarget ) ) {\n\n\t\t\t\tmultisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );\n\n\t\t\t} else {\n\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'Unknown depthTexture format' );\n\n\t\t}\n\n\t}\n\n\t// Setup GL resources for a non-texture depth buffer\n\tfunction setupDepthRenderbuffer( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\n\t\tif ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\tif ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );\n\n\t\t\tsetupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );\n\n\t\t} else {\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = [];\n\n\t\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );\n\t\t\t\t\trenderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\trenderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();\n\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );\n\n\t\t\t}\n\n\t\t}\n\n\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t}\n\n\t// rebind framebuffer with external textures\n\tfunction rebindTextures( renderTarget, colorTexture, depthTexture ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\tif ( colorTexture !== undefined ) {\n\n\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );\n\n\t\t}\n\n\t\tif ( depthTexture !== undefined ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\t// Set up GL resources for the render target\n\tfunction setupRenderTarget( renderTarget ) {\n\n\t\tconst texture = renderTarget.texture;\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\tconst textureProperties = properties.get( texture );\n\n\t\trenderTarget.addEventListener( 'dispose', onRenderTargetDispose );\n\n\t\tif ( renderTarget.isWebGLMultipleRenderTargets !== true ) {\n\n\t\t\tif ( textureProperties.__webglTexture === undefined ) {\n\n\t\t\t\ttextureProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t}\n\n\t\t\ttextureProperties.__version = texture.version;\n\t\t\tinfo.memory.textures ++;\n\n\t\t}\n\n\t\tconst isCube = ( renderTarget.isWebGLCubeRenderTarget === true );\n\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\t// Setup framebuffer\n\n\t\tif ( isCube ) {\n\n\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = [];\n\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = [];\n\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\trenderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();\n\n\t\t\t}\n\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tif ( capabilities.drawBuffers ) {\n\n\t\t\t\t\tconst textures = renderTarget.texture;\n\n\t\t\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst attachmentProperties = properties.get( textures[ i ] );\n\n\t\t\t\t\t\tif ( attachmentProperties.__webglTexture === undefined ) {\n\n\t\t\t\t\t\t\tattachmentProperties.__webglTexture = _gl.createTexture();\n\n\t\t\t\t\t\t\tinfo.memory.textures ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\tconst textures = isMultipleRenderTargets ? texture : [ texture ];\n\n\t\t\t\trenderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();\n\t\t\t\trenderTargetProperties.__webglColorRenderbuffer = [];\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tconst texture = textures[ i ];\n\t\t\t\t\trenderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();\n\n\t\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst glFormat = utils.convert( texture.format, texture.colorSpace );\n\t\t\t\t\tconst glType = utils.convert( texture.type );\n\t\t\t\t\tconst glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );\n\t\t\t\t\tconst samples = getRenderTargetSamples( renderTarget );\n\t\t\t\t\t_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\trenderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();\n\t\t\t\t\tsetupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );\n\n\t\t\t\t}\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Setup color buffer\n\n\t\tif ( isCube ) {\n\n\t\t\tstate.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tif ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( _gl.TEXTURE_CUBE_MAP );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else if ( isMultipleRenderTargets ) {\n\n\t\t\tconst textures = renderTarget.texture;\n\n\t\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\t\tconst attachment = textures[ i ];\n\t\t\t\tconst attachmentProperties = properties.get( attachment );\n\n\t\t\t\tstate.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );\n\t\t\t\tsetTextureParameters( _gl.TEXTURE_2D, attachment, supportsMips );\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );\n\n\t\t\t\tif ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {\n\n\t\t\t\t\tgenerateMipmap( _gl.TEXTURE_2D );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t} else {\n\n\t\t\tlet glTextureType = _gl.TEXTURE_2D;\n\n\t\t\tif ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {\n\n\t\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t\tglTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindTexture( glTextureType, textureProperties.__webglTexture );\n\t\t\tsetTextureParameters( glTextureType, texture, supportsMips );\n\n\t\t\tif ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {\n\n\t\t\t\tfor ( let level = 0; level < texture.mipmaps.length; level ++ ) {\n\n\t\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tsetupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );\n\n\t\t\t}\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tgenerateMipmap( glTextureType );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t}\n\n\t\t// Setup depth and stencil buffers\n\n\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\tsetupDepthRenderbuffer( renderTarget );\n\n\t\t}\n\n\t}\n\n\tfunction updateRenderTargetMipmap( renderTarget ) {\n\n\t\tconst supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;\n\n\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];\n\n\t\tfor ( let i = 0, il = textures.length; i < il; i ++ ) {\n\n\t\t\tconst texture = textures[ i ];\n\n\t\t\tif ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {\n\n\t\t\t\tconst target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;\n\t\t\t\tconst webglTexture = properties.get( texture ).__webglTexture;\n\n\t\t\t\tstate.bindTexture( target, webglTexture );\n\t\t\t\tgenerateMipmap( target );\n\t\t\t\tstate.unbindTexture();\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction updateMultisampleRenderTarget( renderTarget ) {\n\n\t\tif ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\tconst textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];\n\t\t\tconst width = renderTarget.width;\n\t\t\tconst height = renderTarget.height;\n\t\t\tlet mask = _gl.COLOR_BUFFER_BIT;\n\t\t\tconst invalidationArray = [];\n\t\t\tconst depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\tconst isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );\n\n\t\t\t// If MRT we need to remove FBO attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\n\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\tinvalidationArray.push( _gl.COLOR_ATTACHMENT0 + i );\n\n\t\t\t\tif ( renderTarget.depthBuffer ) {\n\n\t\t\t\t\tinvalidationArray.push( depthStyle );\n\n\t\t\t\t}\n\n\t\t\t\tconst ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;\n\n\t\t\t\tif ( ignoreDepthValues === false ) {\n\n\t\t\t\t\tif ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;\n\t\t\t\t\tif ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ignoreDepthValues === true ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, [ depthStyle ] );\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t\t_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );\n\n\t\t\t\tif ( supportsInvalidateFramebuffer ) {\n\n\t\t\t\t\t_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArray );\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );\n\n\t\t\t// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments\n\t\t\tif ( isMultipleRenderTargets ) {\n\n\t\t\t\tfor ( let i = 0; i < textures.length; i ++ ) {\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\t\t\t\t\t_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );\n\n\t\t\t\t\tconst webglTexture = properties.get( textures[ i ] ).__webglTexture;\n\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );\n\t\t\t\t\t_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );\n\n\t\t}\n\n\t}\n\n\tfunction getRenderTargetSamples( renderTarget ) {\n\n\t\treturn Math.min( maxSamples, renderTarget.samples );\n\n\t}\n\n\tfunction useMultisampledRTT( renderTarget ) {\n\n\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\treturn isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;\n\n\t}\n\n\tfunction updateVideoTexture( texture ) {\n\n\t\tconst frame = info.render.frame;\n\n\t\t// Check the last frame we updated the VideoTexture\n\n\t\tif ( _videoTextures.get( texture ) !== frame ) {\n\n\t\t\t_videoTextures.set( texture, frame );\n\t\t\ttexture.update();\n\n\t\t}\n\n\t}\n\n\tfunction verifyColorSpace( texture, image ) {\n\n\t\tconst colorSpace = texture.colorSpace;\n\t\tconst format = texture.format;\n\t\tconst type = texture.type;\n\n\t\tif ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;\n\n\t\tif ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {\n\n\t\t\t// sRGB\n\n\t\t\tif ( ColorManagement.getTransfer( colorSpace ) === SRGBTransfer ) {\n\n\t\t\t\tif ( isWebGL2 === false ) {\n\n\t\t\t\t\t// in WebGL 1, try to use EXT_sRGB extension and unsized formats\n\n\t\t\t\t\tif ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {\n\n\t\t\t\t\t\ttexture.format = _SRGBAFormat;\n\n\t\t\t\t\t\t// it's not possible to generate mips in WebGL 1 with this extension\n\n\t\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\t\ttexture.generateMipmaps = false;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// slow fallback (CPU decode)\n\n\t\t\t\t\t\timage = ImageUtils.sRGBToLinear( image );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format\n\n\t\t\t\t\tif ( format !== RGBAFormat || type !== UnsignedByteType ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn image;\n\n\t}\n\n\t//\n\n\tthis.allocateTextureUnit = allocateTextureUnit;\n\tthis.resetTextureUnits = resetTextureUnits;\n\n\tthis.setTexture2D = setTexture2D;\n\tthis.setTexture2DArray = setTexture2DArray;\n\tthis.setTexture3D = setTexture3D;\n\tthis.setTextureCube = setTextureCube;\n\tthis.rebindTextures = rebindTextures;\n\tthis.setupRenderTarget = setupRenderTarget;\n\tthis.updateRenderTargetMipmap = updateRenderTargetMipmap;\n\tthis.updateMultisampleRenderTarget = updateMultisampleRenderTarget;\n\tthis.setupDepthRenderbuffer = setupDepthRenderbuffer;\n\tthis.setupFrameBufferTexture = setupFrameBufferTexture;\n\tthis.useMultisampledRTT = useMultisampledRTT;\n\n}\n\nfunction WebGLUtils( gl, extensions, capabilities ) {\n\n\tconst isWebGL2 = capabilities.isWebGL2;\n\n\tfunction convert( p, colorSpace = NoColorSpace ) {\n\n\t\tlet extension;\n\n\t\tconst transfer = ColorManagement.getTransfer( colorSpace );\n\n\t\tif ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;\n\t\tif ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;\n\t\tif ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;\n\n\t\tif ( p === ByteType ) return gl.BYTE;\n\t\tif ( p === ShortType ) return gl.SHORT;\n\t\tif ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;\n\t\tif ( p === IntType ) return gl.INT;\n\t\tif ( p === UnsignedIntType ) return gl.UNSIGNED_INT;\n\t\tif ( p === FloatType ) return gl.FLOAT;\n\n\t\tif ( p === HalfFloatType ) {\n\n\t\t\tif ( isWebGL2 ) return gl.HALF_FLOAT;\n\n\t\t\textension = extensions.get( 'OES_texture_half_float' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.HALF_FLOAT_OES;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( p === AlphaFormat ) return gl.ALPHA;\n\t\tif ( p === RGBAFormat ) return gl.RGBA;\n\t\tif ( p === LuminanceFormat ) return gl.LUMINANCE;\n\t\tif ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;\n\t\tif ( p === DepthFormat ) return gl.DEPTH_COMPONENT;\n\t\tif ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;\n\n\t\t// WebGL 1 sRGB fallback\n\n\t\tif ( p === _SRGBAFormat ) {\n\n\t\t\textension = extensions.get( 'EXT_sRGB' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.SRGB_ALPHA_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// WebGL2 formats.\n\n\t\tif ( p === RedFormat ) return gl.RED;\n\t\tif ( p === RedIntegerFormat ) return gl.RED_INTEGER;\n\t\tif ( p === RGFormat ) return gl.RG;\n\t\tif ( p === RGIntegerFormat ) return gl.RG_INTEGER;\n\t\tif ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;\n\n\t\t// S3TC\n\n\t\tif ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {\n\n\t\t\tif ( transfer === SRGBTransfer ) {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\textension = extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\n\t\t\t\tif ( extension !== null ) {\n\n\t\t\t\t\tif ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;\n\t\t\t\t\tif ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// PVRTC\n\n\t\tif ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\n\t\t\t\tif ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC1\n\n\t\tif ( p === RGB_ETC1_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc1' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.COMPRESSED_RGB_ETC1_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ETC2\n\n\t\tif ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_etc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGB_ETC2_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;\n\t\t\t\tif ( p === RGBA_ETC2_EAC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// ASTC\n\n\t\tif ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||\n\t\t\tp === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||\n\t\t\tp === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||\n\t\t\tp === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||\n\t\t\tp === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {\n\n\t\t\textension = extensions.get( 'WEBGL_compressed_texture_astc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_ASTC_4x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x4_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_5x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_6x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_8x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x5_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x6_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x8_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_10x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x10_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;\n\t\t\t\tif ( p === RGBA_ASTC_12x12_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// BPTC\n\n\t\tif ( p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_bptc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return ( transfer === SRGBTransfer ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;\n\t\t\t\tif ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;\n\t\t\t\tif ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// RGTC\n\n\t\tif ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {\n\n\t\t\textension = extensions.get( 'EXT_texture_compression_rgtc' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\tif ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;\n\t\t\t\tif ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;\n\t\t\t\tif ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tif ( p === UnsignedInt248Type ) {\n\n\t\t\tif ( isWebGL2 ) return gl.UNSIGNED_INT_24_8;\n\n\t\t\textension = extensions.get( 'WEBGL_depth_texture' );\n\n\t\t\tif ( extension !== null ) {\n\n\t\t\t\treturn extension.UNSIGNED_INT_24_8_WEBGL;\n\n\t\t\t} else {\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// if \"p\" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)\n\n\t\treturn ( gl[ p ] !== undefined ) ? gl[ p ] : null;\n\n\t}\n\n\treturn { convert: convert };\n\n}\n\nclass ArrayCamera extends PerspectiveCamera {\n\n\tconstructor( array = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isArrayCamera = true;\n\n\t\tthis.cameras = array;\n\n\t}\n\n}\n\nclass Group extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isGroup = true;\n\n\t\tthis.type = 'Group';\n\n\t}\n\n}\n\nconst _moveEvent = { type: 'move' };\n\nclass WebXRController {\n\n\tconstructor() {\n\n\t\tthis._targetRay = null;\n\t\tthis._grip = null;\n\t\tthis._hand = null;\n\n\t}\n\n\tgetHandSpace() {\n\n\t\tif ( this._hand === null ) {\n\n\t\t\tthis._hand = new Group();\n\t\t\tthis._hand.matrixAutoUpdate = false;\n\t\t\tthis._hand.visible = false;\n\n\t\t\tthis._hand.joints = {};\n\t\t\tthis._hand.inputState = { pinching: false };\n\n\t\t}\n\n\t\treturn this._hand;\n\n\t}\n\n\tgetTargetRaySpace() {\n\n\t\tif ( this._targetRay === null ) {\n\n\t\t\tthis._targetRay = new Group();\n\t\t\tthis._targetRay.matrixAutoUpdate = false;\n\t\t\tthis._targetRay.visible = false;\n\t\t\tthis._targetRay.hasLinearVelocity = false;\n\t\t\tthis._targetRay.linearVelocity = new Vector3();\n\t\t\tthis._targetRay.hasAngularVelocity = false;\n\t\t\tthis._targetRay.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._targetRay;\n\n\t}\n\n\tgetGripSpace() {\n\n\t\tif ( this._grip === null ) {\n\n\t\t\tthis._grip = new Group();\n\t\t\tthis._grip.matrixAutoUpdate = false;\n\t\t\tthis._grip.visible = false;\n\t\t\tthis._grip.hasLinearVelocity = false;\n\t\t\tthis._grip.linearVelocity = new Vector3();\n\t\t\tthis._grip.hasAngularVelocity = false;\n\t\t\tthis._grip.angularVelocity = new Vector3();\n\n\t\t}\n\n\t\treturn this._grip;\n\n\t}\n\n\tdispatchEvent( event ) {\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.dispatchEvent( event );\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.dispatchEvent( event );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tconnect( inputSource ) {\n\n\t\tif ( inputSource && inputSource.hand ) {\n\n\t\t\tconst hand = this._hand;\n\n\t\t\tif ( hand ) {\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Initialize hand with joints when connected\n\t\t\t\t\tthis._getHandJoint( hand, inputjoint );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( { type: 'connected', data: inputSource } );\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect( inputSource ) {\n\n\t\tthis.dispatchEvent( { type: 'disconnected', data: inputSource } );\n\n\t\tif ( this._targetRay !== null ) {\n\n\t\t\tthis._targetRay.visible = false;\n\n\t\t}\n\n\t\tif ( this._grip !== null ) {\n\n\t\t\tthis._grip.visible = false;\n\n\t\t}\n\n\t\tif ( this._hand !== null ) {\n\n\t\t\tthis._hand.visible = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tupdate( inputSource, frame, referenceSpace ) {\n\n\t\tlet inputPose = null;\n\t\tlet gripPose = null;\n\t\tlet handPose = null;\n\n\t\tconst targetRay = this._targetRay;\n\t\tconst grip = this._grip;\n\t\tconst hand = this._hand;\n\n\t\tif ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {\n\n\t\t\tif ( hand && inputSource.hand ) {\n\n\t\t\t\thandPose = true;\n\n\t\t\t\tfor ( const inputjoint of inputSource.hand.values() ) {\n\n\t\t\t\t\t// Update the joints groups with the XRJoint poses\n\t\t\t\t\tconst jointPose = frame.getJointPose( inputjoint, referenceSpace );\n\n\t\t\t\t\t// The transform of this joint will be updated with the joint pose on each frame\n\t\t\t\t\tconst joint = this._getHandJoint( hand, inputjoint );\n\n\t\t\t\t\tif ( jointPose !== null ) {\n\n\t\t\t\t\t\tjoint.matrix.fromArray( jointPose.transform.matrix );\n\t\t\t\t\t\tjoint.matrix.decompose( joint.position, joint.rotation, joint.scale );\n\t\t\t\t\t\tjoint.matrixWorldNeedsUpdate = true;\n\t\t\t\t\t\tjoint.jointRadius = jointPose.radius;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tjoint.visible = jointPose !== null;\n\n\t\t\t\t}\n\n\t\t\t\t// Custom events\n\n\t\t\t\t// Check pinchz\n\t\t\t\tconst indexTip = hand.joints[ 'index-finger-tip' ];\n\t\t\t\tconst thumbTip = hand.joints[ 'thumb-tip' ];\n\t\t\t\tconst distance = indexTip.position.distanceTo( thumbTip.position );\n\n\t\t\t\tconst distanceToPinch = 0.02;\n\t\t\t\tconst threshold = 0.005;\n\n\t\t\t\tif ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = false;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchend',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {\n\n\t\t\t\t\thand.inputState.pinching = true;\n\t\t\t\t\tthis.dispatchEvent( {\n\t\t\t\t\t\ttype: 'pinchstart',\n\t\t\t\t\t\thandedness: inputSource.handedness,\n\t\t\t\t\t\ttarget: this\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( grip !== null && inputSource.gripSpace ) {\n\n\t\t\t\t\tgripPose = frame.getPose( inputSource.gripSpace, referenceSpace );\n\n\t\t\t\t\tif ( gripPose !== null ) {\n\n\t\t\t\t\t\tgrip.matrix.fromArray( gripPose.transform.matrix );\n\t\t\t\t\t\tgrip.matrix.decompose( grip.position, grip.rotation, grip.scale );\n\t\t\t\t\t\tgrip.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\t\tif ( gripPose.linearVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = true;\n\t\t\t\t\t\t\tgrip.linearVelocity.copy( gripPose.linearVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasLinearVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( gripPose.angularVelocity ) {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = true;\n\t\t\t\t\t\t\tgrip.angularVelocity.copy( gripPose.angularVelocity );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tgrip.hasAngularVelocity = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( targetRay !== null ) {\n\n\t\t\t\tinputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );\n\n\t\t\t\t// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it\n\t\t\t\tif ( inputPose === null && gripPose !== null ) {\n\n\t\t\t\t\tinputPose = gripPose;\n\n\t\t\t\t}\n\n\t\t\t\tif ( inputPose !== null ) {\n\n\t\t\t\t\ttargetRay.matrix.fromArray( inputPose.transform.matrix );\n\t\t\t\t\ttargetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );\n\t\t\t\t\ttargetRay.matrixWorldNeedsUpdate = true;\n\n\t\t\t\t\tif ( inputPose.linearVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = true;\n\t\t\t\t\t\ttargetRay.linearVelocity.copy( inputPose.linearVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasLinearVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( inputPose.angularVelocity ) {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = true;\n\t\t\t\t\t\ttargetRay.angularVelocity.copy( inputPose.angularVelocity );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttargetRay.hasAngularVelocity = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.dispatchEvent( _moveEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t\tif ( targetRay !== null ) {\n\n\t\t\ttargetRay.visible = ( inputPose !== null );\n\n\t\t}\n\n\t\tif ( grip !== null ) {\n\n\t\t\tgrip.visible = ( gripPose !== null );\n\n\t\t}\n\n\t\tif ( hand !== null ) {\n\n\t\t\thand.visible = ( handPose !== null );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// private method\n\n\t_getHandJoint( hand, inputjoint ) {\n\n\t\tif ( hand.joints[ inputjoint.jointName ] === undefined ) {\n\n\t\t\tconst joint = new Group();\n\t\t\tjoint.matrixAutoUpdate = false;\n\t\t\tjoint.visible = false;\n\t\t\thand.joints[ inputjoint.jointName ] = joint;\n\n\t\t\thand.add( joint );\n\n\t\t}\n\n\t\treturn hand.joints[ inputjoint.jointName ];\n\n\t}\n\n}\n\nclass DepthTexture extends Texture {\n\n\tconstructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {\n\n\t\tformat = format !== undefined ? format : DepthFormat;\n\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\n\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\n\n\t\t}\n\n\t\tif ( type === undefined && format === DepthFormat ) type = UnsignedIntType;\n\t\tif ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isDepthTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : NearestFilter;\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : NearestFilter;\n\n\t\tthis.flipY = false;\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.compareFunction = null;\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.compareFunction = source.compareFunction;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass WebXRManager extends EventDispatcher {\n\n\tconstructor( renderer, gl ) {\n\n\t\tsuper();\n\n\t\tconst scope = this;\n\n\t\tlet session = null;\n\n\t\tlet framebufferScaleFactor = 1.0;\n\n\t\tlet referenceSpace = null;\n\t\tlet referenceSpaceType = 'local-floor';\n\t\t// Set default foveation to maximum.\n\t\tlet foveation = 1.0;\n\t\tlet customReferenceSpace = null;\n\n\t\tlet pose = null;\n\t\tlet glBinding = null;\n\t\tlet glProjLayer = null;\n\t\tlet glBaseLayer = null;\n\t\tlet xrFrame = null;\n\t\tconst attributes = gl.getContextAttributes();\n\t\tlet initialRenderTarget = null;\n\t\tlet newRenderTarget = null;\n\n\t\tconst controllers = [];\n\t\tconst controllerInputSources = [];\n\n\t\t//\n\n\t\tconst cameraL = new PerspectiveCamera();\n\t\tcameraL.layers.enable( 1 );\n\t\tcameraL.viewport = new Vector4();\n\n\t\tconst cameraR = new PerspectiveCamera();\n\t\tcameraR.layers.enable( 2 );\n\t\tcameraR.viewport = new Vector4();\n\n\t\tconst cameras = [ cameraL, cameraR ];\n\n\t\tconst cameraXR = new ArrayCamera();\n\t\tcameraXR.layers.enable( 1 );\n\t\tcameraXR.layers.enable( 2 );\n\n\t\tlet _currentDepthNear = null;\n\t\tlet _currentDepthFar = null;\n\n\t\t//\n\n\t\tthis.cameraAutoUpdate = true;\n\t\tthis.enabled = false;\n\n\t\tthis.isPresenting = false;\n\n\t\tthis.getController = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getTargetRaySpace();\n\n\t\t};\n\n\t\tthis.getControllerGrip = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getGripSpace();\n\n\t\t};\n\n\t\tthis.getHand = function ( index ) {\n\n\t\t\tlet controller = controllers[ index ];\n\n\t\t\tif ( controller === undefined ) {\n\n\t\t\t\tcontroller = new WebXRController();\n\t\t\t\tcontrollers[ index ] = controller;\n\n\t\t\t}\n\n\t\t\treturn controller.getHandSpace();\n\n\t\t};\n\n\t\t//\n\n\t\tfunction onSessionEvent( event ) {\n\n\t\t\tconst controllerIndex = controllerInputSources.indexOf( event.inputSource );\n\n\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\tif ( controller !== undefined ) {\n\n\t\t\t\tcontroller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );\n\t\t\t\tcontroller.dispatchEvent( { type: event.type, data: event.inputSource } );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction onSessionEnd() {\n\n\t\t\tsession.removeEventListener( 'select', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectstart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'selectend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeeze', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezestart', onSessionEvent );\n\t\t\tsession.removeEventListener( 'squeezeend', onSessionEvent );\n\t\t\tsession.removeEventListener( 'end', onSessionEnd );\n\t\t\tsession.removeEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\n\t\t\t\tif ( inputSource === null ) continue;\n\n\t\t\t\tcontrollerInputSources[ i ] = null;\n\n\t\t\t\tcontrollers[ i ].disconnect( inputSource );\n\n\t\t\t}\n\n\t\t\t_currentDepthNear = null;\n\t\t\t_currentDepthFar = null;\n\n\t\t\t// restore framebuffer/rendering state\n\n\t\t\trenderer.setRenderTarget( initialRenderTarget );\n\n\t\t\tglBaseLayer = null;\n\t\t\tglProjLayer = null;\n\t\t\tglBinding = null;\n\t\t\tsession = null;\n\t\t\tnewRenderTarget = null;\n\n\t\t\t//\n\n\t\t\tanimation.stop();\n\n\t\t\tscope.isPresenting = false;\n\n\t\t\tscope.dispatchEvent( { type: 'sessionend' } );\n\n\t\t}\n\n\t\tthis.setFramebufferScaleFactor = function ( value ) {\n\n\t\t\tframebufferScaleFactor = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setReferenceSpaceType = function ( value ) {\n\n\t\t\treferenceSpaceType = value;\n\n\t\t\tif ( scope.isPresenting === true ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getReferenceSpace = function () {\n\n\t\t\treturn customReferenceSpace || referenceSpace;\n\n\t\t};\n\n\t\tthis.setReferenceSpace = function ( space ) {\n\n\t\t\tcustomReferenceSpace = space;\n\n\t\t};\n\n\t\tthis.getBaseLayer = function () {\n\n\t\t\treturn glProjLayer !== null ? glProjLayer : glBaseLayer;\n\n\t\t};\n\n\t\tthis.getBinding = function () {\n\n\t\t\treturn glBinding;\n\n\t\t};\n\n\t\tthis.getFrame = function () {\n\n\t\t\treturn xrFrame;\n\n\t\t};\n\n\t\tthis.getSession = function () {\n\n\t\t\treturn session;\n\n\t\t};\n\n\t\tthis.setSession = async function ( value ) {\n\n\t\t\tsession = value;\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\tinitialRenderTarget = renderer.getRenderTarget();\n\n\t\t\t\tsession.addEventListener( 'select', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectstart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'selectend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeeze', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezestart', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'squeezeend', onSessionEvent );\n\t\t\t\tsession.addEventListener( 'end', onSessionEnd );\n\t\t\t\tsession.addEventListener( 'inputsourceschange', onInputSourcesChange );\n\n\t\t\t\tif ( attributes.xrCompatible !== true ) {\n\n\t\t\t\t\tawait gl.makeXRCompatible();\n\n\t\t\t\t}\n\n\t\t\t\tif ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {\n\n\t\t\t\t\tconst layerInit = {\n\t\t\t\t\t\tantialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,\n\t\t\t\t\t\talpha: true,\n\t\t\t\t\t\tdepth: attributes.depth,\n\t\t\t\t\t\tstencil: attributes.stencil,\n\t\t\t\t\t\tframebufferScaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBaseLayer = new XRWebGLLayer( session, gl, layerInit );\n\n\t\t\t\t\tsession.updateRenderState( { baseLayer: glBaseLayer } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglBaseLayer.framebufferWidth,\n\t\t\t\t\t\tglBaseLayer.framebufferHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tlet depthFormat = null;\n\t\t\t\t\tlet depthType = null;\n\t\t\t\t\tlet glDepthFormat = null;\n\n\t\t\t\t\tif ( attributes.depth ) {\n\n\t\t\t\t\t\tglDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;\n\t\t\t\t\t\tdepthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;\n\t\t\t\t\t\tdepthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst projectionlayerInit = {\n\t\t\t\t\t\tcolorFormat: gl.RGBA8,\n\t\t\t\t\t\tdepthFormat: glDepthFormat,\n\t\t\t\t\t\tscaleFactor: framebufferScaleFactor\n\t\t\t\t\t};\n\n\t\t\t\t\tglBinding = new XRWebGLBinding( session, gl );\n\n\t\t\t\t\tglProjLayer = glBinding.createProjectionLayer( projectionlayerInit );\n\n\t\t\t\t\tsession.updateRenderState( { layers: [ glProjLayer ] } );\n\n\t\t\t\t\tnewRenderTarget = new WebGLRenderTarget(\n\t\t\t\t\t\tglProjLayer.textureWidth,\n\t\t\t\t\t\tglProjLayer.textureHeight,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tformat: RGBAFormat,\n\t\t\t\t\t\t\ttype: UnsignedByteType,\n\t\t\t\t\t\t\tdepthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),\n\t\t\t\t\t\t\tstencilBuffer: attributes.stencil,\n\t\t\t\t\t\t\tcolorSpace: renderer.outputColorSpace,\n\t\t\t\t\t\t\tsamples: attributes.antialias ? 4 : 0\n\t\t\t\t\t\t} );\n\n\t\t\t\t\tconst renderTargetProperties = renderer.properties.get( newRenderTarget );\n\t\t\t\t\trenderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;\n\n\t\t\t\t}\n\n\t\t\t\tnewRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278\n\n\t\t\t\tthis.setFoveation( foveation );\n\n\t\t\t\tcustomReferenceSpace = null;\n\t\t\t\treferenceSpace = await session.requestReferenceSpace( referenceSpaceType );\n\n\t\t\t\tanimation.setContext( session );\n\t\t\t\tanimation.start();\n\n\t\t\t\tscope.isPresenting = true;\n\n\t\t\t\tscope.dispatchEvent( { type: 'sessionstart' } );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.getEnvironmentBlendMode = function () {\n\n\t\t\tif ( session !== null ) {\n\n\t\t\t\treturn session.environmentBlendMode;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction onInputSourcesChange( event ) {\n\n\t\t\t// Notify disconnected\n\n\t\t\tfor ( let i = 0; i < event.removed.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.removed[ i ];\n\t\t\t\tconst index = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( index >= 0 ) {\n\n\t\t\t\t\tcontrollerInputSources[ index ] = null;\n\t\t\t\t\tcontrollers[ index ].disconnect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Notify connected\n\n\t\t\tfor ( let i = 0; i < event.added.length; i ++ ) {\n\n\t\t\t\tconst inputSource = event.added[ i ];\n\n\t\t\t\tlet controllerIndex = controllerInputSources.indexOf( inputSource );\n\n\t\t\t\tif ( controllerIndex === - 1 ) {\n\n\t\t\t\t\t// Assign input source a controller that currently has no input source\n\n\t\t\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\t\t\tif ( i >= controllerInputSources.length ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources.push( inputSource );\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t} else if ( controllerInputSources[ i ] === null ) {\n\n\t\t\t\t\t\t\tcontrollerInputSources[ i ] = inputSource;\n\t\t\t\t\t\t\tcontrollerIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// If all controllers do currently receive input we ignore new ones\n\n\t\t\t\t\tif ( controllerIndex === - 1 ) break;\n\n\t\t\t\t}\n\n\t\t\t\tconst controller = controllers[ controllerIndex ];\n\n\t\t\t\tif ( controller ) {\n\n\t\t\t\t\tcontroller.connect( inputSource );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst cameraLPos = new Vector3();\n\t\tconst cameraRPos = new Vector3();\n\n\t\t/**\n\t\t * Assumes 2 cameras that are parallel and share an X-axis, and that\n\t\t * the cameras' projection and world matrices have already been set.\n\t\t * And that near and far planes are identical for both cameras.\n\t\t * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765\n\t\t */\n\t\tfunction setProjectionFromUnion( camera, cameraL, cameraR ) {\n\n\t\t\tcameraLPos.setFromMatrixPosition( cameraL.matrixWorld );\n\t\t\tcameraRPos.setFromMatrixPosition( cameraR.matrixWorld );\n\n\t\t\tconst ipd = cameraLPos.distanceTo( cameraRPos );\n\n\t\t\tconst projL = cameraL.projectionMatrix.elements;\n\t\t\tconst projR = cameraR.projectionMatrix.elements;\n\n\t\t\t// VR systems will have identical far and near planes, and\n\t\t\t// most likely identical top and bottom frustum extents.\n\t\t\t// Use the left camera for these values.\n\t\t\tconst near = projL[ 14 ] / ( projL[ 10 ] - 1 );\n\t\t\tconst far = projL[ 14 ] / ( projL[ 10 ] + 1 );\n\t\t\tconst topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];\n\t\t\tconst bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];\n\n\t\t\tconst leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];\n\t\t\tconst rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];\n\t\t\tconst left = near * leftFov;\n\t\t\tconst right = near * rightFov;\n\n\t\t\t// Calculate the new camera's position offset from the\n\t\t\t// left camera. xOffset should be roughly half `ipd`.\n\t\t\tconst zOffset = ipd / ( - leftFov + rightFov );\n\t\t\tconst xOffset = zOffset * - leftFov;\n\n\t\t\t// TODO: Better way to apply this offset?\n\t\t\tcameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.translateX( xOffset );\n\t\t\tcamera.translateZ( zOffset );\n\t\t\tcamera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t\t// Find the union of the frustum values of the cameras and scale\n\t\t\t// the values so that the near plane's position does not change in world space,\n\t\t\t// although must now be relative to the new union camera.\n\t\t\tconst near2 = near + zOffset;\n\t\t\tconst far2 = far + zOffset;\n\t\t\tconst left2 = left - xOffset;\n\t\t\tconst right2 = right + ( ipd - xOffset );\n\t\t\tconst top2 = topFov * far / far2 * near2;\n\t\t\tconst bottom2 = bottomFov * far / far2 * near2;\n\n\t\t\tcamera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );\n\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\n\t\t}\n\n\t\tfunction updateCamera( camera, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrixWorld.copy( camera.matrix );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );\n\n\t\t\t}\n\n\t\t\tcamera.matrixWorldInverse.copy( camera.matrixWorld ).invert();\n\n\t\t}\n\n\t\tthis.updateCamera = function ( camera ) {\n\n\t\t\tif ( session === null ) return;\n\n\t\t\tcameraXR.near = cameraR.near = cameraL.near = camera.near;\n\t\t\tcameraXR.far = cameraR.far = cameraL.far = camera.far;\n\n\t\t\tif ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {\n\n\t\t\t\t// Note that the new renderState won't apply until the next frame. See #18320\n\n\t\t\t\tsession.updateRenderState( {\n\t\t\t\t\tdepthNear: cameraXR.near,\n\t\t\t\t\tdepthFar: cameraXR.far\n\t\t\t\t} );\n\n\t\t\t\t_currentDepthNear = cameraXR.near;\n\t\t\t\t_currentDepthFar = cameraXR.far;\n\n\t\t\t}\n\n\t\t\tconst parent = camera.parent;\n\t\t\tconst cameras = cameraXR.cameras;\n\n\t\t\tupdateCamera( cameraXR, parent );\n\n\t\t\tfor ( let i = 0; i < cameras.length; i ++ ) {\n\n\t\t\t\tupdateCamera( cameras[ i ], parent );\n\n\t\t\t}\n\n\t\t\t// update projection matrix for proper view frustum culling\n\n\t\t\tif ( cameras.length === 2 ) {\n\n\t\t\t\tsetProjectionFromUnion( cameraXR, cameraL, cameraR );\n\n\t\t\t} else {\n\n\t\t\t\t// assume single camera setup (AR)\n\n\t\t\t\tcameraXR.projectionMatrix.copy( cameraL.projectionMatrix );\n\n\t\t\t}\n\n\t\t\t// update user camera and its children\n\n\t\t\tupdateUserCamera( camera, cameraXR, parent );\n\n\t\t};\n\n\t\tfunction updateUserCamera( camera, cameraXR, parent ) {\n\n\t\t\tif ( parent === null ) {\n\n\t\t\t\tcamera.matrix.copy( cameraXR.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tcamera.matrix.copy( parent.matrixWorld );\n\t\t\t\tcamera.matrix.invert();\n\t\t\t\tcamera.matrix.multiply( cameraXR.matrixWorld );\n\n\t\t\t}\n\n\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\tcamera.updateMatrixWorld( true );\n\n\t\t\tcamera.projectionMatrix.copy( cameraXR.projectionMatrix );\n\t\t\tcamera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );\n\n\t\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\t\tcamera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );\n\t\t\t\tcamera.zoom = 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.getCamera = function () {\n\n\t\t\treturn cameraXR;\n\n\t\t};\n\n\t\tthis.getFoveation = function () {\n\n\t\t\tif ( glProjLayer === null && glBaseLayer === null ) {\n\n\t\t\t\treturn undefined;\n\n\t\t\t}\n\n\t\t\treturn foveation;\n\n\t\t};\n\n\t\tthis.setFoveation = function ( value ) {\n\n\t\t\t// 0 = no foveation = full resolution\n\t\t\t// 1 = maximum foveation = the edges render at lower resolution\n\n\t\t\tfoveation = value;\n\n\t\t\tif ( glProjLayer !== null ) {\n\n\t\t\t\tglProjLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t\tif ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {\n\n\t\t\t\tglBaseLayer.fixedFoveation = value;\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time, frame ) {\n\n\t\t\tpose = frame.getViewerPose( customReferenceSpace || referenceSpace );\n\t\t\txrFrame = frame;\n\n\t\t\tif ( pose !== null ) {\n\n\t\t\t\tconst views = pose.views;\n\n\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\trenderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );\n\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t}\n\n\t\t\t\tlet cameraXRNeedsUpdate = false;\n\n\t\t\t\t// check if it's necessary to rebuild cameraXR's camera list\n\n\t\t\t\tif ( views.length !== cameraXR.cameras.length ) {\n\n\t\t\t\t\tcameraXR.cameras.length = 0;\n\t\t\t\t\tcameraXRNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0; i < views.length; i ++ ) {\n\n\t\t\t\t\tconst view = views[ i ];\n\n\t\t\t\t\tlet viewport = null;\n\n\t\t\t\t\tif ( glBaseLayer !== null ) {\n\n\t\t\t\t\t\tviewport = glBaseLayer.getViewport( view );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst glSubImage = glBinding.getViewSubImage( glProjLayer, view );\n\t\t\t\t\t\tviewport = glSubImage.viewport;\n\n\t\t\t\t\t\t// For side-by-side projection, we only produce a single texture for both eyes.\n\t\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\t\trenderer.setRenderTargetTextures(\n\t\t\t\t\t\t\t\tnewRenderTarget,\n\t\t\t\t\t\t\t\tglSubImage.colorTexture,\n\t\t\t\t\t\t\t\tglProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );\n\n\t\t\t\t\t\t\trenderer.setRenderTarget( newRenderTarget );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet camera = cameras[ i ];\n\n\t\t\t\t\tif ( camera === undefined ) {\n\n\t\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\t\tcamera.layers.enable( i );\n\t\t\t\t\t\tcamera.viewport = new Vector4();\n\t\t\t\t\t\tcameras[ i ] = camera;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcamera.matrix.fromArray( view.transform.matrix );\n\t\t\t\t\tcamera.matrix.decompose( camera.position, camera.quaternion, camera.scale );\n\t\t\t\t\tcamera.projectionMatrix.fromArray( view.projectionMatrix );\n\t\t\t\t\tcamera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();\n\t\t\t\t\tcamera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );\n\n\t\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\t\tcameraXR.matrix.copy( camera.matrix );\n\t\t\t\t\t\tcameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( cameraXRNeedsUpdate === true ) {\n\n\t\t\t\t\t\tcameraXR.cameras.push( camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tfor ( let i = 0; i < controllers.length; i ++ ) {\n\n\t\t\t\tconst inputSource = controllerInputSources[ i ];\n\t\t\t\tconst controller = controllers[ i ];\n\n\t\t\t\tif ( inputSource !== null && controller !== undefined ) {\n\n\t\t\t\t\tcontroller.update( inputSource, frame, customReferenceSpace || referenceSpace );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );\n\n\t\t\tif ( frame.detectedPlanes ) {\n\n\t\t\t\tscope.dispatchEvent( { type: 'planesdetected', data: frame } );\n\n\t\t\t}\n\n\t\t\txrFrame = null;\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\n\t\t};\n\n\t\tthis.dispose = function () {};\n\n\t}\n\n}\n\nfunction WebGLMaterials( renderer, properties ) {\n\n\tfunction refreshTransformUniform( map, uniform ) {\n\n\t\tif ( map.matrixAutoUpdate === true ) {\n\n\t\t\tmap.updateMatrix();\n\n\t\t}\n\n\t\tuniform.value.copy( map.matrix );\n\n\t}\n\n\tfunction refreshFogUniforms( uniforms, fog ) {\n\n\t\tfog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );\n\n\t\tif ( fog.isFog ) {\n\n\t\t\tuniforms.fogNear.value = fog.near;\n\t\t\tuniforms.fogFar.value = fog.far;\n\n\t\t} else if ( fog.isFogExp2 ) {\n\n\t\t\tuniforms.fogDensity.value = fog.density;\n\n\t\t}\n\n\t}\n\n\tfunction refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {\n\n\t\tif ( material.isMeshBasicMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshLambertMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshToonMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsToon( uniforms, material );\n\n\t\t} else if ( material.isMeshPhongMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsPhong( uniforms, material );\n\n\t\t} else if ( material.isMeshStandardMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsStandard( uniforms, material );\n\n\t\t\tif ( material.isMeshPhysicalMaterial ) {\n\n\t\t\t\trefreshUniformsPhysical( uniforms, material, transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshMatcapMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsMatcap( uniforms, material );\n\n\t\t} else if ( material.isMeshDepthMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isMeshDistanceMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\t\t\trefreshUniformsDistance( uniforms, material );\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\trefreshUniformsCommon( uniforms, material );\n\n\t\t} else if ( material.isLineBasicMaterial ) {\n\n\t\t\trefreshUniformsLine( uniforms, material );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\trefreshUniformsDash( uniforms, material );\n\n\t\t\t}\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\trefreshUniformsPoints( uniforms, material, pixelRatio, height );\n\n\t\t} else if ( material.isSpriteMaterial ) {\n\n\t\t\trefreshUniformsSprites( uniforms, material );\n\n\t\t} else if ( material.isShadowMaterial ) {\n\n\t\t\tuniforms.color.value.copy( material.color );\n\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t} else if ( material.isShaderMaterial ) {\n\n\t\t\tmaterial.uniformsNeedUpdate = false; // #15581\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsCommon( uniforms, material ) {\n\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.color ) {\n\n\t\t\tuniforms.diffuse.value.copy( material.color );\n\n\t\t}\n\n\t\tif ( material.emissive ) {\n\n\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t}\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.bumpMap ) {\n\n\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\n\t\t\trefreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );\n\n\t\t\tuniforms.bumpScale.value = material.bumpScale;\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.bumpScale.value *= - 1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.normalMap ) {\n\n\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\trefreshTransformUniform( material.normalMap, uniforms.normalMapTransform );\n\n\t\t\tuniforms.normalScale.value.copy( material.normalScale );\n\n\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\tuniforms.normalScale.value.negate();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.displacementMap ) {\n\n\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\n\t\t\trefreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );\n\n\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t}\n\n\t\tif ( material.emissiveMap ) {\n\n\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\n\t\t\trefreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularMap ) {\n\n\t\t\tuniforms.specularMap.value = material.specularMap;\n\n\t\t\trefreshTransformUniform( material.specularMap, uniforms.specularMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\tuniforms.envMap.value = envMap;\n\n\t\t\tuniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\tuniforms.ior.value = material.ior;\n\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t}\n\n\t\tif ( material.lightMap ) {\n\n\t\t\tuniforms.lightMap.value = material.lightMap;\n\n\t\t\t// artist-friendly light intensity scaling factor\n\t\t\tconst scaleFactor = ( renderer._useLegacyLights === true ) ? Math.PI : 1;\n\n\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;\n\n\t\t\trefreshTransformUniform( material.lightMap, uniforms.lightMapTransform );\n\n\t\t}\n\n\t\tif ( material.aoMap ) {\n\n\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\trefreshTransformUniform( material.aoMap, uniforms.aoMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsLine( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDash( uniforms, material ) {\n\n\t\tuniforms.dashSize.value = material.dashSize;\n\t\tuniforms.totalSize.value = material.dashSize + material.gapSize;\n\t\tuniforms.scale.value = material.scale;\n\n\t}\n\n\tfunction refreshUniformsPoints( uniforms, material, pixelRatio, height ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.size.value = material.size * pixelRatio;\n\t\tuniforms.scale.value = height * 0.5;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.uvTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsSprites( uniforms, material ) {\n\n\t\tuniforms.diffuse.value.copy( material.color );\n\t\tuniforms.opacity.value = material.opacity;\n\t\tuniforms.rotation.value = material.rotation;\n\n\t\tif ( material.map ) {\n\n\t\t\tuniforms.map.value = material.map;\n\n\t\t\trefreshTransformUniform( material.map, uniforms.mapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaMap ) {\n\n\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\trefreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );\n\n\t\t}\n\n\t\tif ( material.alphaTest > 0 ) {\n\n\t\t\tuniforms.alphaTest.value = material.alphaTest;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhong( uniforms, material ) {\n\n\t\tuniforms.specular.value.copy( material.specular );\n\t\tuniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )\n\n\t}\n\n\tfunction refreshUniformsToon( uniforms, material ) {\n\n\t\tif ( material.gradientMap ) {\n\n\t\t\tuniforms.gradientMap.value = material.gradientMap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsStandard( uniforms, material ) {\n\n\t\tuniforms.metalness.value = material.metalness;\n\n\t\tif ( material.metalnessMap ) {\n\n\t\t\tuniforms.metalnessMap.value = material.metalnessMap;\n\n\t\t\trefreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );\n\n\t\t}\n\n\t\tuniforms.roughness.value = material.roughness;\n\n\t\tif ( material.roughnessMap ) {\n\n\t\t\tuniforms.roughnessMap.value = material.roughnessMap;\n\n\t\t\trefreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );\n\n\t\t}\n\n\t\tconst envMap = properties.get( material ).envMap;\n\n\t\tif ( envMap ) {\n\n\t\t\t//uniforms.envMap.value = material.envMap; // part of uniforms common\n\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {\n\n\t\tuniforms.ior.value = material.ior; // also part of uniforms common\n\n\t\tif ( material.sheen > 0 ) {\n\n\t\t\tuniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );\n\n\t\t\tuniforms.sheenRoughness.value = material.sheenRoughness;\n\n\t\t\tif ( material.sheenColorMap ) {\n\n\t\t\t\tuniforms.sheenColorMap.value = material.sheenColorMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.sheenRoughnessMap ) {\n\n\t\t\t\tuniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.clearcoat > 0 ) {\n\n\t\t\tuniforms.clearcoat.value = material.clearcoat;\n\t\t\tuniforms.clearcoatRoughness.value = material.clearcoatRoughness;\n\n\t\t\tif ( material.clearcoatMap ) {\n\n\t\t\t\tuniforms.clearcoatMap.value = material.clearcoatMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatRoughnessMap ) {\n\n\t\t\t\tuniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.clearcoatNormalMap ) {\n\n\t\t\t\tuniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;\n\n\t\t\t\trefreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );\n\n\t\t\t\tuniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );\n\n\t\t\t\tif ( material.side === BackSide ) {\n\n\t\t\t\t\tuniforms.clearcoatNormalScale.value.negate();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.iridescence > 0 ) {\n\n\t\t\tuniforms.iridescence.value = material.iridescence;\n\t\t\tuniforms.iridescenceIOR.value = material.iridescenceIOR;\n\t\t\tuniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];\n\t\t\tuniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];\n\n\t\t\tif ( material.iridescenceMap ) {\n\n\t\t\t\tuniforms.iridescenceMap.value = material.iridescenceMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );\n\n\t\t\t}\n\n\t\t\tif ( material.iridescenceThicknessMap ) {\n\n\t\t\t\tuniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( material.transmission > 0 ) {\n\n\t\t\tuniforms.transmission.value = material.transmission;\n\t\t\tuniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;\n\t\t\tuniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );\n\n\t\t\tif ( material.transmissionMap ) {\n\n\t\t\t\tuniforms.transmissionMap.value = material.transmissionMap;\n\n\t\t\t\trefreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.thickness.value = material.thickness;\n\n\t\t\tif ( material.thicknessMap ) {\n\n\t\t\t\tuniforms.thicknessMap.value = material.thicknessMap;\n\n\t\t\t\trefreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );\n\n\t\t\t}\n\n\t\t\tuniforms.attenuationDistance.value = material.attenuationDistance;\n\t\t\tuniforms.attenuationColor.value.copy( material.attenuationColor );\n\n\t\t}\n\n\t\tif ( material.anisotropy > 0 ) {\n\n\t\t\tuniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\n\n\t\t\tif ( material.anisotropyMap ) {\n\n\t\t\t\tuniforms.anisotropyMap.value = material.anisotropyMap;\n\n\t\t\t\trefreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );\n\n\t\t\t}\n\n\t\t}\n\n\t\tuniforms.specularIntensity.value = material.specularIntensity;\n\t\tuniforms.specularColor.value.copy( material.specularColor );\n\n\t\tif ( material.specularColorMap ) {\n\n\t\t\tuniforms.specularColorMap.value = material.specularColorMap;\n\n\t\t\trefreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );\n\n\t\t}\n\n\t\tif ( material.specularIntensityMap ) {\n\n\t\t\tuniforms.specularIntensityMap.value = material.specularIntensityMap;\n\n\t\t\trefreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsMatcap( uniforms, material ) {\n\n\t\tif ( material.matcap ) {\n\n\t\t\tuniforms.matcap.value = material.matcap;\n\n\t\t}\n\n\t}\n\n\tfunction refreshUniformsDistance( uniforms, material ) {\n\n\t\tconst light = properties.get( material ).light;\n\n\t\tuniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );\n\t\tuniforms.nearDistance.value = light.shadow.camera.near;\n\t\tuniforms.farDistance.value = light.shadow.camera.far;\n\n\t}\n\n\treturn {\n\t\trefreshFogUniforms: refreshFogUniforms,\n\t\trefreshMaterialUniforms: refreshMaterialUniforms\n\t};\n\n}\n\nfunction WebGLUniformsGroups( gl, info, capabilities, state ) {\n\n\tlet buffers = {};\n\tlet updateList = {};\n\tlet allocatedBindingPoints = [];\n\n\tconst maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ) : 0; // binding points are global whereas block indices are per shader program\n\n\tfunction bind( uniformsGroup, program ) {\n\n\t\tconst webglProgram = program.program;\n\t\tstate.uniformBlockBinding( uniformsGroup, webglProgram );\n\n\t}\n\n\tfunction update( uniformsGroup, program ) {\n\n\t\tlet buffer = buffers[ uniformsGroup.id ];\n\n\t\tif ( buffer === undefined ) {\n\n\t\t\tprepareUniformsGroup( uniformsGroup );\n\n\t\t\tbuffer = createBuffer( uniformsGroup );\n\t\t\tbuffers[ uniformsGroup.id ] = buffer;\n\n\t\t\tuniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\t}\n\n\t\t// ensure to update the binding points/block indices mapping for this program\n\n\t\tconst webglProgram = program.program;\n\t\tstate.updateUBOMapping( uniformsGroup, webglProgram );\n\n\t\t// update UBO once per frame\n\n\t\tconst frame = info.render.frame;\n\n\t\tif ( updateList[ uniformsGroup.id ] !== frame ) {\n\n\t\t\tupdateBufferData( uniformsGroup );\n\n\t\t\tupdateList[ uniformsGroup.id ] = frame;\n\n\t\t}\n\n\t}\n\n\tfunction createBuffer( uniformsGroup ) {\n\n\t\t// the setup of an UBO is independent of a particular shader program but global\n\n\t\tconst bindingPointIndex = allocateBindingPointIndex();\n\t\tuniformsGroup.__bindingPointIndex = bindingPointIndex;\n\n\t\tconst buffer = gl.createBuffer();\n\t\tconst size = uniformsGroup.__size;\n\t\tconst usage = uniformsGroup.usage;\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\n\t\tgl.bufferData( gl.UNIFORM_BUFFER, size, usage );\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\n\t\tgl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );\n\n\t\treturn buffer;\n\n\t}\n\n\tfunction allocateBindingPointIndex() {\n\n\t\tfor ( let i = 0; i < maxBindingPoints; i ++ ) {\n\n\t\t\tif ( allocatedBindingPoints.indexOf( i ) === - 1 ) {\n\n\t\t\t\tallocatedBindingPoints.push( i );\n\t\t\t\treturn i;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconsole.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );\n\n\t\treturn 0;\n\n\t}\n\n\tfunction updateBufferData( uniformsGroup ) {\n\n\t\tconst buffer = buffers[ uniformsGroup.id ];\n\t\tconst uniforms = uniformsGroup.uniforms;\n\t\tconst cache = uniformsGroup.__cache;\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, buffer );\n\n\t\tfor ( let i = 0, il = uniforms.length; i < il; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\n\t\t\t// partly update the buffer if necessary\n\n\t\t\tif ( hasUniformChanged( uniform, i, cache ) === true ) {\n\n\t\t\t\tconst offset = uniform.__offset;\n\n\t\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\t\tlet arrayOffset = 0;\n\n\t\t\t\tfor ( let i = 0; i < values.length; i ++ ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\t\t\tuniform.__data[ 0 ] = value;\n\t\t\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );\n\n\t\t\t\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t\t\t\t// manually converting 3x3 to 3x4\n\n\t\t\t\t\t\tuniform.__data[ 0 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 1 ] = value.elements[ 1 ];\n\t\t\t\t\t\tuniform.__data[ 2 ] = value.elements[ 2 ];\n\t\t\t\t\t\tuniform.__data[ 3 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 4 ] = value.elements[ 3 ];\n\t\t\t\t\t\tuniform.__data[ 5 ] = value.elements[ 4 ];\n\t\t\t\t\t\tuniform.__data[ 6 ] = value.elements[ 5 ];\n\t\t\t\t\t\tuniform.__data[ 7 ] = value.elements[ 0 ];\n\t\t\t\t\t\tuniform.__data[ 8 ] = value.elements[ 6 ];\n\t\t\t\t\t\tuniform.__data[ 9 ] = value.elements[ 7 ];\n\t\t\t\t\t\tuniform.__data[ 10 ] = value.elements[ 8 ];\n\t\t\t\t\t\tuniform.__data[ 11 ] = value.elements[ 0 ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tvalue.toArray( uniform.__data, arrayOffset );\n\n\t\t\t\t\t\tarrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgl.bindBuffer( gl.UNIFORM_BUFFER, null );\n\n\t}\n\n\tfunction hasUniformChanged( uniform, index, cache ) {\n\n\t\tconst value = uniform.value;\n\n\t\tif ( cache[ index ] === undefined ) {\n\n\t\t\t// cache entry does not exist so far\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tcache[ index ] = value;\n\n\t\t\t} else {\n\n\t\t\t\tconst values = Array.isArray( value ) ? value : [ value ];\n\n\t\t\t\tconst tempValues = [];\n\n\t\t\t\tfor ( let i = 0; i < values.length; i ++ ) {\n\n\t\t\t\t\ttempValues.push( values[ i ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tcache[ index ] = tempValues;\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// compare current value with cached entry\n\n\t\t\tif ( typeof value === 'number' ) {\n\n\t\t\t\tif ( cache[ index ] !== value ) {\n\n\t\t\t\t\tcache[ index ] = value;\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconst cachedObjects = Array.isArray( cache[ index ] ) ? cache[ index ] : [ cache[ index ] ];\n\t\t\t\tconst values = Array.isArray( value ) ? value : [ value ];\n\n\t\t\t\tfor ( let i = 0; i < cachedObjects.length; i ++ ) {\n\n\t\t\t\t\tconst cachedObject = cachedObjects[ i ];\n\n\t\t\t\t\tif ( cachedObject.equals( values[ i ] ) === false ) {\n\n\t\t\t\t\t\tcachedObject.copy( values[ i ] );\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tfunction prepareUniformsGroup( uniformsGroup ) {\n\n\t\t// determine total buffer size according to the STD140 layout\n\t\t// Hint: STD140 is the only supported layout in WebGL 2\n\n\t\tconst uniforms = uniformsGroup.uniforms;\n\n\t\tlet offset = 0; // global buffer offset in bytes\n\t\tconst chunkSize = 16; // size of a chunk in bytes\n\t\tlet chunkOffset = 0; // offset within a single chunk in bytes\n\n\t\tfor ( let i = 0, l = uniforms.length; i < l; i ++ ) {\n\n\t\t\tconst uniform = uniforms[ i ];\n\n\t\t\tconst infos = {\n\t\t\t\tboundary: 0, // bytes\n\t\t\t\tstorage: 0 // bytes\n\t\t\t};\n\n\t\t\tconst values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];\n\n\t\t\tfor ( let j = 0, jl = values.length; j < jl; j ++ ) {\n\n\t\t\t\tconst value = values[ j ];\n\n\t\t\t\tconst info = getUniformSize( value );\n\n\t\t\t\tinfos.boundary += info.boundary;\n\t\t\t\tinfos.storage += info.storage;\n\n\t\t\t}\n\n\t\t\t// the following two properties will be used for partial buffer updates\n\n\t\t\tuniform.__data = new Float32Array( infos.storage / Float32Array.BYTES_PER_ELEMENT );\n\t\t\tuniform.__offset = offset;\n\n\t\t\t//\n\n\t\t\tif ( i > 0 ) {\n\n\t\t\t\tchunkOffset = offset % chunkSize;\n\n\t\t\t\tconst remainingSizeInChunk = chunkSize - chunkOffset;\n\n\t\t\t\t// check for chunk overflow\n\n\t\t\t\tif ( chunkOffset !== 0 && ( remainingSizeInChunk - infos.boundary ) < 0 ) {\n\n\t\t\t\t\t// add padding and adjust offset\n\n\t\t\t\t\toffset += ( chunkSize - chunkOffset );\n\t\t\t\t\tuniform.__offset = offset;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\toffset += infos.storage;\n\n\t\t}\n\n\t\t// ensure correct final padding\n\n\t\tchunkOffset = offset % chunkSize;\n\n\t\tif ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );\n\n\t\t//\n\n\t\tuniformsGroup.__size = offset;\n\t\tuniformsGroup.__cache = {};\n\n\t\treturn this;\n\n\t}\n\n\tfunction getUniformSize( value ) {\n\n\t\tconst info = {\n\t\t\tboundary: 0, // bytes\n\t\t\tstorage: 0 // bytes\n\t\t};\n\n\t\t// determine sizes according to STD140\n\n\t\tif ( typeof value === 'number' ) {\n\n\t\t\t// float/int\n\n\t\t\tinfo.boundary = 4;\n\t\t\tinfo.storage = 4;\n\n\t\t} else if ( value.isVector2 ) {\n\n\t\t\t// vec2\n\n\t\t\tinfo.boundary = 8;\n\t\t\tinfo.storage = 8;\n\n\t\t} else if ( value.isVector3 || value.isColor ) {\n\n\t\t\t// vec3\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes\n\n\t\t} else if ( value.isVector4 ) {\n\n\t\t\t// vec4\n\n\t\t\tinfo.boundary = 16;\n\t\t\tinfo.storage = 16;\n\n\t\t} else if ( value.isMatrix3 ) {\n\n\t\t\t// mat3 (in STD140 a 3x3 matrix is represented as 3x4)\n\n\t\t\tinfo.boundary = 48;\n\t\t\tinfo.storage = 48;\n\n\t\t} else if ( value.isMatrix4 ) {\n\n\t\t\t// mat4\n\n\t\t\tinfo.boundary = 64;\n\t\t\tinfo.storage = 64;\n\n\t\t} else if ( value.isTexture ) {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );\n\n\t\t}\n\n\t\treturn info;\n\n\t}\n\n\tfunction onUniformsGroupsDispose( event ) {\n\n\t\tconst uniformsGroup = event.target;\n\n\t\tuniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );\n\n\t\tconst index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );\n\t\tallocatedBindingPoints.splice( index, 1 );\n\n\t\tgl.deleteBuffer( buffers[ uniformsGroup.id ] );\n\n\t\tdelete buffers[ uniformsGroup.id ];\n\t\tdelete updateList[ uniformsGroup.id ];\n\n\t}\n\n\tfunction dispose() {\n\n\t\tfor ( const id in buffers ) {\n\n\t\t\tgl.deleteBuffer( buffers[ id ] );\n\n\t\t}\n\n\t\tallocatedBindingPoints = [];\n\t\tbuffers = {};\n\t\tupdateList = {};\n\n\t}\n\n\treturn {\n\n\t\tbind: bind,\n\t\tupdate: update,\n\n\t\tdispose: dispose\n\n\t};\n\n}\n\nclass WebGLRenderer {\n\n\tconstructor( parameters = {} ) {\n\n\t\tconst {\n\t\t\tcanvas = createCanvasElement(),\n\t\t\tcontext = null,\n\t\t\tdepth = true,\n\t\t\tstencil = true,\n\t\t\talpha = false,\n\t\t\tantialias = false,\n\t\t\tpremultipliedAlpha = true,\n\t\t\tpreserveDrawingBuffer = false,\n\t\t\tpowerPreference = 'default',\n\t\t\tfailIfMajorPerformanceCaveat = false,\n\t\t} = parameters;\n\n\t\tthis.isWebGLRenderer = true;\n\n\t\tlet _alpha;\n\n\t\tif ( context !== null ) {\n\n\t\t\t_alpha = context.getContextAttributes().alpha;\n\n\t\t} else {\n\n\t\t\t_alpha = alpha;\n\n\t\t}\n\n\t\tconst uintClearColor = new Uint32Array( 4 );\n\t\tconst intClearColor = new Int32Array( 4 );\n\n\t\tlet currentRenderList = null;\n\t\tlet currentRenderState = null;\n\n\t\t// render() can be called from within a callback triggered by another render.\n\t\t// We track this so that the nested render call gets its list and state isolated from the parent render call.\n\n\t\tconst renderListStack = [];\n\t\tconst renderStateStack = [];\n\n\t\t// public properties\n\n\t\tthis.domElement = canvas;\n\n\t\t// Debug configuration container\n\t\tthis.debug = {\n\n\t\t\t/**\n\t\t\t * Enables error checking and reporting when shader programs are being compiled\n\t\t\t * @type {boolean}\n\t\t\t */\n\t\t\tcheckShaderErrors: true,\n\t\t\t/**\n\t\t\t * Callback for custom error reporting.\n\t\t\t * @type {?Function}\n\t\t\t */\n\t\t\tonShaderError: null\n\t\t};\n\n\t\t// clearing\n\n\t\tthis.autoClear = true;\n\t\tthis.autoClearColor = true;\n\t\tthis.autoClearDepth = true;\n\t\tthis.autoClearStencil = true;\n\n\t\t// scene graph\n\n\t\tthis.sortObjects = true;\n\n\t\t// user-defined clipping\n\n\t\tthis.clippingPlanes = [];\n\t\tthis.localClippingEnabled = false;\n\n\t\t// physically based shading\n\n\t\tthis._outputColorSpace = SRGBColorSpace;\n\n\t\t// physical lights\n\n\t\tthis._useLegacyLights = false;\n\n\t\t// tone mapping\n\n\t\tthis.toneMapping = NoToneMapping;\n\t\tthis.toneMappingExposure = 1.0;\n\n\t\t// internal properties\n\n\t\tconst _this = this;\n\n\t\tlet _isContextLost = false;\n\n\t\t// internal state cache\n\n\t\tlet _currentActiveCubeFace = 0;\n\t\tlet _currentActiveMipmapLevel = 0;\n\t\tlet _currentRenderTarget = null;\n\t\tlet _currentMaterialId = - 1;\n\n\t\tlet _currentCamera = null;\n\n\t\tconst _currentViewport = new Vector4();\n\t\tconst _currentScissor = new Vector4();\n\t\tlet _currentScissorTest = null;\n\n\t\tconst _currentClearColor = new Color( 0x000000 );\n\t\tlet _currentClearAlpha = 0;\n\n\t\t//\n\n\t\tlet _width = canvas.width;\n\t\tlet _height = canvas.height;\n\n\t\tlet _pixelRatio = 1;\n\t\tlet _opaqueSort = null;\n\t\tlet _transparentSort = null;\n\n\t\tconst _viewport = new Vector4( 0, 0, _width, _height );\n\t\tconst _scissor = new Vector4( 0, 0, _width, _height );\n\t\tlet _scissorTest = false;\n\n\t\t// frustum\n\n\t\tconst _frustum = new Frustum();\n\n\t\t// clipping\n\n\t\tlet _clippingEnabled = false;\n\t\tlet _localClippingEnabled = false;\n\n\t\t// transmission\n\n\t\tlet _transmissionRenderTarget = null;\n\n\t\t// camera matrices cache\n\n\t\tconst _projScreenMatrix = new Matrix4();\n\n\t\tconst _vector2 = new Vector2();\n\t\tconst _vector3 = new Vector3();\n\n\t\tconst _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };\n\n\t\tfunction getTargetPixelRatio() {\n\n\t\t\treturn _currentRenderTarget === null ? _pixelRatio : 1;\n\n\t\t}\n\n\t\t// initialize\n\n\t\tlet _gl = context;\n\n\t\tfunction getContext( contextNames, contextAttributes ) {\n\n\t\t\tfor ( let i = 0; i < contextNames.length; i ++ ) {\n\n\t\t\t\tconst contextName = contextNames[ i ];\n\t\t\t\tconst context = canvas.getContext( contextName, contextAttributes );\n\t\t\t\tif ( context !== null ) return context;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\ttry {\n\n\t\t\tconst contextAttributes = {\n\t\t\t\talpha: true,\n\t\t\t\tdepth,\n\t\t\t\tstencil,\n\t\t\t\tantialias,\n\t\t\t\tpremultipliedAlpha,\n\t\t\t\tpreserveDrawingBuffer,\n\t\t\t\tpowerPreference,\n\t\t\t\tfailIfMajorPerformanceCaveat,\n\t\t\t};\n\n\t\t\t// OffscreenCanvas does not have setAttribute, see #22811\n\t\t\tif ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );\n\n\t\t\t// event listeners must be registered before WebGL context is created, see #12753\n\t\t\tcanvas.addEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\tcanvas.addEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t\tcanvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\t\tif ( _gl === null ) {\n\n\t\t\t\tconst contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];\n\n\t\t\t\tif ( _this.isWebGL1Renderer === true ) {\n\n\t\t\t\t\tcontextNames.shift();\n\n\t\t\t\t}\n\n\t\t\t\t_gl = getContext( contextNames, contextAttributes );\n\n\t\t\t\tif ( _gl === null ) {\n\n\t\t\t\t\tif ( getContext( contextNames ) ) {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context with your selected attributes.' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'Error creating WebGL context.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( typeof WebGLRenderingContext !== 'undefined' && _gl instanceof WebGLRenderingContext ) { // @deprecated, r153\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.' );\n\n\t\t\t}\n\n\t\t\t// Some experimental-webgl implementations do not have getShaderPrecisionFormat\n\n\t\t\tif ( _gl.getShaderPrecisionFormat === undefined ) {\n\n\t\t\t\t_gl.getShaderPrecisionFormat = function () {\n\n\t\t\t\t\treturn { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t} catch ( error ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: ' + error.message );\n\t\t\tthrow error;\n\n\t\t}\n\n\t\tlet extensions, capabilities, state, info;\n\t\tlet properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;\n\t\tlet programCache, materials, renderLists, renderStates, clipping, shadowMap;\n\n\t\tlet background, morphtargets, bufferRenderer, indexedBufferRenderer;\n\n\t\tlet utils, bindingStates, uniformsGroups;\n\n\t\tfunction initGLContext() {\n\n\t\t\textensions = new WebGLExtensions( _gl );\n\n\t\t\tcapabilities = new WebGLCapabilities( _gl, extensions, parameters );\n\n\t\t\textensions.init( capabilities );\n\n\t\t\tutils = new WebGLUtils( _gl, extensions, capabilities );\n\n\t\t\tstate = new WebGLState( _gl, extensions, capabilities );\n\n\t\t\tinfo = new WebGLInfo( _gl );\n\t\t\tproperties = new WebGLProperties();\n\t\t\ttextures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );\n\t\t\tcubemaps = new WebGLCubeMaps( _this );\n\t\t\tcubeuvmaps = new WebGLCubeUVMaps( _this );\n\t\t\tattributes = new WebGLAttributes( _gl, capabilities );\n\t\t\tbindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );\n\t\t\tgeometries = new WebGLGeometries( _gl, attributes, info, bindingStates );\n\t\t\tobjects = new WebGLObjects( _gl, geometries, attributes, info );\n\t\t\tmorphtargets = new WebGLMorphtargets( _gl, capabilities, textures );\n\t\t\tclipping = new WebGLClipping( properties );\n\t\t\tprogramCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );\n\t\t\tmaterials = new WebGLMaterials( _this, properties );\n\t\t\trenderLists = new WebGLRenderLists();\n\t\t\trenderStates = new WebGLRenderStates( extensions, capabilities );\n\t\t\tbackground = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );\n\t\t\tshadowMap = new WebGLShadowMap( _this, objects, capabilities );\n\t\t\tuniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );\n\n\t\t\tbufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );\n\t\t\tindexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );\n\n\t\t\tinfo.programs = programCache.programs;\n\n\t\t\t_this.capabilities = capabilities;\n\t\t\t_this.extensions = extensions;\n\t\t\t_this.properties = properties;\n\t\t\t_this.renderLists = renderLists;\n\t\t\t_this.shadowMap = shadowMap;\n\t\t\t_this.state = state;\n\t\t\t_this.info = info;\n\n\t\t}\n\n\t\tinitGLContext();\n\n\t\t// xr\n\n\t\tconst xr = new WebXRManager( _this, _gl );\n\n\t\tthis.xr = xr;\n\n\t\t// API\n\n\t\tthis.getContext = function () {\n\n\t\t\treturn _gl;\n\n\t\t};\n\n\t\tthis.getContextAttributes = function () {\n\n\t\t\treturn _gl.getContextAttributes();\n\n\t\t};\n\n\t\tthis.forceContextLoss = function () {\n\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.loseContext();\n\n\t\t};\n\n\t\tthis.forceContextRestore = function () {\n\n\t\t\tconst extension = extensions.get( 'WEBGL_lose_context' );\n\t\t\tif ( extension ) extension.restoreContext();\n\n\t\t};\n\n\t\tthis.getPixelRatio = function () {\n\n\t\t\treturn _pixelRatio;\n\n\t\t};\n\n\t\tthis.setPixelRatio = function ( value ) {\n\n\t\t\tif ( value === undefined ) return;\n\n\t\t\t_pixelRatio = value;\n\n\t\t\tthis.setSize( _width, _height, false );\n\n\t\t};\n\n\t\tthis.getSize = function ( target ) {\n\n\t\t\treturn target.set( _width, _height );\n\n\t\t};\n\n\t\tthis.setSize = function ( width, height, updateStyle = true ) {\n\n\t\t\tif ( xr.isPresenting ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Can\\'t change size while VR device is presenting.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\tcanvas.width = Math.floor( width * _pixelRatio );\n\t\t\tcanvas.height = Math.floor( height * _pixelRatio );\n\n\t\t\tif ( updateStyle === true ) {\n\n\t\t\t\tcanvas.style.width = width + 'px';\n\t\t\t\tcanvas.style.height = height + 'px';\n\n\t\t\t}\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getDrawingBufferSize = function ( target ) {\n\n\t\t\treturn target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();\n\n\t\t};\n\n\t\tthis.setDrawingBufferSize = function ( width, height, pixelRatio ) {\n\n\t\t\t_width = width;\n\t\t\t_height = height;\n\n\t\t\t_pixelRatio = pixelRatio;\n\n\t\t\tcanvas.width = Math.floor( width * pixelRatio );\n\t\t\tcanvas.height = Math.floor( height * pixelRatio );\n\n\t\t\tthis.setViewport( 0, 0, width, height );\n\n\t\t};\n\n\t\tthis.getCurrentViewport = function ( target ) {\n\n\t\t\treturn target.copy( _currentViewport );\n\n\t\t};\n\n\t\tthis.getViewport = function ( target ) {\n\n\t\t\treturn target.copy( _viewport );\n\n\t\t};\n\n\t\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_viewport.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_viewport.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissor = function ( target ) {\n\n\t\t\treturn target.copy( _scissor );\n\n\t\t};\n\n\t\tthis.setScissor = function ( x, y, width, height ) {\n\n\t\t\tif ( x.isVector4 ) {\n\n\t\t\t\t_scissor.set( x.x, x.y, x.z, x.w );\n\n\t\t\t} else {\n\n\t\t\t\t_scissor.set( x, y, width, height );\n\n\t\t\t}\n\n\t\t\tstate.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );\n\n\t\t};\n\n\t\tthis.getScissorTest = function () {\n\n\t\t\treturn _scissorTest;\n\n\t\t};\n\n\t\tthis.setScissorTest = function ( boolean ) {\n\n\t\t\tstate.setScissorTest( _scissorTest = boolean );\n\n\t\t};\n\n\t\tthis.setOpaqueSort = function ( method ) {\n\n\t\t\t_opaqueSort = method;\n\n\t\t};\n\n\t\tthis.setTransparentSort = function ( method ) {\n\n\t\t\t_transparentSort = method;\n\n\t\t};\n\n\t\t// Clearing\n\n\t\tthis.getClearColor = function ( target ) {\n\n\t\t\treturn target.copy( background.getClearColor() );\n\n\t\t};\n\n\t\tthis.setClearColor = function () {\n\n\t\t\tbackground.setClearColor.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.getClearAlpha = function () {\n\n\t\t\treturn background.getClearAlpha();\n\n\t\t};\n\n\t\tthis.setClearAlpha = function () {\n\n\t\t\tbackground.setClearAlpha.apply( background, arguments );\n\n\t\t};\n\n\t\tthis.clear = function ( color = true, depth = true, stencil = true ) {\n\n\t\t\tlet bits = 0;\n\n\t\t\tif ( color ) {\n\n\t\t\t\t// check if we're trying to clear an integer target\n\t\t\t\tlet isIntegerFormat = false;\n\t\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t\tconst targetFormat = _currentRenderTarget.texture.format;\n\t\t\t\t\tisIntegerFormat = targetFormat === RGBAIntegerFormat ||\n\t\t\t\t\t\ttargetFormat === RGIntegerFormat ||\n\t\t\t\t\t\ttargetFormat === RedIntegerFormat;\n\n\t\t\t\t}\n\n\t\t\t\t// use the appropriate clear functions to clear the target if it's a signed\n\t\t\t\t// or unsigned integer target\n\t\t\t\tif ( isIntegerFormat ) {\n\n\t\t\t\t\tconst targetType = _currentRenderTarget.texture.type;\n\t\t\t\t\tconst isUnsignedType = targetType === UnsignedByteType ||\n\t\t\t\t\t\ttargetType === UnsignedIntType ||\n\t\t\t\t\t\ttargetType === UnsignedShortType ||\n\t\t\t\t\t\ttargetType === UnsignedInt248Type ||\n\t\t\t\t\t\ttargetType === UnsignedShort4444Type ||\n\t\t\t\t\t\ttargetType === UnsignedShort5551Type;\n\n\t\t\t\t\tconst clearColor = background.getClearColor();\n\t\t\t\t\tconst a = background.getClearAlpha();\n\t\t\t\t\tconst r = clearColor.r;\n\t\t\t\t\tconst g = clearColor.g;\n\t\t\t\t\tconst b = clearColor.b;\n\n\t\t\t\t\tif ( isUnsignedType ) {\n\n\t\t\t\t\t\tuintClearColor[ 0 ] = r;\n\t\t\t\t\t\tuintClearColor[ 1 ] = g;\n\t\t\t\t\t\tuintClearColor[ 2 ] = b;\n\t\t\t\t\t\tuintClearColor[ 3 ] = a;\n\t\t\t\t\t\t_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tintClearColor[ 0 ] = r;\n\t\t\t\t\t\tintClearColor[ 1 ] = g;\n\t\t\t\t\t\tintClearColor[ 2 ] = b;\n\t\t\t\t\t\tintClearColor[ 3 ] = a;\n\t\t\t\t\t\t_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbits |= _gl.COLOR_BUFFER_BIT;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( depth ) bits |= _gl.DEPTH_BUFFER_BIT;\n\t\t\tif ( stencil ) {\n\n\t\t\t\tbits |= _gl.STENCIL_BUFFER_BIT;\n\t\t\t\tthis.state.buffers.stencil.setMask( 0xffffffff );\n\n\t\t\t}\n\n\t\t\t_gl.clear( bits );\n\n\t\t};\n\n\t\tthis.clearColor = function () {\n\n\t\t\tthis.clear( true, false, false );\n\n\t\t};\n\n\t\tthis.clearDepth = function () {\n\n\t\t\tthis.clear( false, true, false );\n\n\t\t};\n\n\t\tthis.clearStencil = function () {\n\n\t\t\tthis.clear( false, false, true );\n\n\t\t};\n\n\t\t//\n\n\t\tthis.dispose = function () {\n\n\t\t\tcanvas.removeEventListener( 'webglcontextlost', onContextLost, false );\n\t\t\tcanvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );\n\t\t\tcanvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );\n\n\t\t\trenderLists.dispose();\n\t\t\trenderStates.dispose();\n\t\t\tproperties.dispose();\n\t\t\tcubemaps.dispose();\n\t\t\tcubeuvmaps.dispose();\n\t\t\tobjects.dispose();\n\t\t\tbindingStates.dispose();\n\t\t\tuniformsGroups.dispose();\n\t\t\tprogramCache.dispose();\n\n\t\t\txr.dispose();\n\n\t\t\txr.removeEventListener( 'sessionstart', onXRSessionStart );\n\t\t\txr.removeEventListener( 'sessionend', onXRSessionEnd );\n\n\t\t\tif ( _transmissionRenderTarget ) {\n\n\t\t\t\t_transmissionRenderTarget.dispose();\n\t\t\t\t_transmissionRenderTarget = null;\n\n\t\t\t}\n\n\t\t\tanimation.stop();\n\n\t\t};\n\n\t\t// Events\n\n\t\tfunction onContextLost( event ) {\n\n\t\t\tevent.preventDefault();\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Lost.' );\n\n\t\t\t_isContextLost = true;\n\n\t\t}\n\n\t\tfunction onContextRestore( /* event */ ) {\n\n\t\t\tconsole.log( 'THREE.WebGLRenderer: Context Restored.' );\n\n\t\t\t_isContextLost = false;\n\n\t\t\tconst infoAutoReset = info.autoReset;\n\t\t\tconst shadowMapEnabled = shadowMap.enabled;\n\t\t\tconst shadowMapAutoUpdate = shadowMap.autoUpdate;\n\t\t\tconst shadowMapNeedsUpdate = shadowMap.needsUpdate;\n\t\t\tconst shadowMapType = shadowMap.type;\n\n\t\t\tinitGLContext();\n\n\t\t\tinfo.autoReset = infoAutoReset;\n\t\t\tshadowMap.enabled = shadowMapEnabled;\n\t\t\tshadowMap.autoUpdate = shadowMapAutoUpdate;\n\t\t\tshadowMap.needsUpdate = shadowMapNeedsUpdate;\n\t\t\tshadowMap.type = shadowMapType;\n\n\t\t}\n\n\t\tfunction onContextCreationError( event ) {\n\n\t\t\tconsole.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );\n\n\t\t}\n\n\t\tfunction onMaterialDispose( event ) {\n\n\t\t\tconst material = event.target;\n\n\t\t\tmaterial.removeEventListener( 'dispose', onMaterialDispose );\n\n\t\t\tdeallocateMaterial( material );\n\n\t\t}\n\n\t\t// Buffer deallocation\n\n\t\tfunction deallocateMaterial( material ) {\n\n\t\t\treleaseMaterialProgramReferences( material );\n\n\t\t\tproperties.remove( material );\n\n\t\t}\n\n\n\t\tfunction releaseMaterialProgramReferences( material ) {\n\n\t\t\tconst programs = properties.get( material ).programs;\n\n\t\t\tif ( programs !== undefined ) {\n\n\t\t\t\tprograms.forEach( function ( program ) {\n\n\t\t\t\t\tprogramCache.releaseProgram( program );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( material.isShaderMaterial ) {\n\n\t\t\t\t\tprogramCache.releaseShaderCache( material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Buffer rendering\n\n\t\tthis.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {\n\n\t\t\tif ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)\n\n\t\t\tconst frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );\n\n\t\t\tconst program = setProgram( camera, scene, geometry, material, object );\n\n\t\t\tstate.setMaterial( material, frontFaceCW );\n\n\t\t\t//\n\n\t\t\tlet index = geometry.index;\n\t\t\tlet rangeFactor = 1;\n\n\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\tindex = geometries.getWireframeAttribute( geometry );\n\n\t\t\t\tif ( index === undefined ) return;\n\n\t\t\t\trangeFactor = 2;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst drawRange = geometry.drawRange;\n\t\t\tconst position = geometry.attributes.position;\n\n\t\t\tlet drawStart = drawRange.start * rangeFactor;\n\t\t\tlet drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;\n\n\t\t\tif ( group !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, group.start * rangeFactor );\n\t\t\t\tdrawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );\n\n\t\t\t}\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\t\tdrawEnd = Math.min( drawEnd, index.count );\n\n\t\t\t} else if ( position !== undefined && position !== null ) {\n\n\t\t\t\tdrawStart = Math.max( drawStart, 0 );\n\t\t\t\tdrawEnd = Math.min( drawEnd, position.count );\n\n\t\t\t}\n\n\t\t\tconst drawCount = drawEnd - drawStart;\n\n\t\t\tif ( drawCount < 0 || drawCount === Infinity ) return;\n\n\t\t\t//\n\n\t\t\tbindingStates.setup( object, material, program, geometry, index );\n\n\t\t\tlet attribute;\n\t\t\tlet renderer = bufferRenderer;\n\n\t\t\tif ( index !== null ) {\n\n\t\t\t\tattribute = attributes.get( index );\n\n\t\t\t\trenderer = indexedBufferRenderer;\n\t\t\t\trenderer.setIndex( attribute );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( object.isMesh ) {\n\n\t\t\t\tif ( material.wireframe === true ) {\n\n\t\t\t\t\tstate.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isLine ) {\n\n\t\t\t\tlet lineWidth = material.linewidth;\n\n\t\t\t\tif ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material\n\n\t\t\t\tstate.setLineWidth( lineWidth * getTargetPixelRatio() );\n\n\t\t\t\tif ( object.isLineSegments ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINES );\n\n\t\t\t\t} else if ( object.isLineLoop ) {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_LOOP );\n\n\t\t\t\t} else {\n\n\t\t\t\t\trenderer.setMode( _gl.LINE_STRIP );\n\n\t\t\t\t}\n\n\t\t\t} else if ( object.isPoints ) {\n\n\t\t\t\trenderer.setMode( _gl.POINTS );\n\n\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\trenderer.setMode( _gl.TRIANGLES );\n\n\t\t\t}\n\n\t\t\tif ( object.isInstancedMesh ) {\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, object.count );\n\n\t\t\t} else if ( geometry.isInstancedBufferGeometry ) {\n\n\t\t\t\tconst maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;\n\t\t\t\tconst instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );\n\n\t\t\t\trenderer.renderInstances( drawStart, drawCount, instanceCount );\n\n\t\t\t} else {\n\n\t\t\t\trenderer.render( drawStart, drawCount );\n\n\t\t\t}\n\n\t\t};\n\n\t\t// Compile\n\n\t\tfunction prepareMaterial( material, scene, object ) {\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\tgetProgram( material, scene, object );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.compile = function ( scene, camera, targetScene = null ) {\n\n\t\t\tif ( targetScene === null ) targetScene = scene;\n\n\t\t\tcurrentRenderState = renderStates.get( targetScene );\n\t\t\tcurrentRenderState.init();\n\n\t\t\trenderStateStack.push( currentRenderState );\n\n\t\t\t// gather lights from both the target scene and the new object that will be added to the scene.\n\n\t\t\ttargetScene.traverseVisible( function ( object ) {\n\n\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( scene !== targetScene ) {\n\n\t\t\t\tscene.traverseVisible( function ( object ) {\n\n\t\t\t\t\tif ( object.isLight && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tcurrentRenderState.setupLights( _this._useLegacyLights );\n\n\t\t\t// Only initialize materials in the new scene, not the targetScene.\n\n\t\t\tconst materials = new Set();\n\n\t\t\tscene.traverse( function ( object ) {\n\n\t\t\t\tconst material = object.material;\n\n\t\t\t\tif ( material ) {\n\n\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\tfor ( let i = 0; i < material.length; i ++ ) {\n\n\t\t\t\t\t\t\tconst material2 = material[ i ];\n\n\t\t\t\t\t\t\tprepareMaterial( material2, targetScene, object );\n\t\t\t\t\t\t\tmaterials.add( material2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tprepareMaterial( material, targetScene, object );\n\t\t\t\t\t\tmaterials.add( material );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\trenderStateStack.pop();\n\t\t\tcurrentRenderState = null;\n\n\t\t\treturn materials;\n\n\t\t};\n\n\t\t// compileAsync\n\n\t\tthis.compileAsync = function ( scene, camera, targetScene = null ) {\n\n\t\t\tconst materials = this.compile( scene, camera, targetScene );\n\n\t\t\t// Wait for all the materials in the new object to indicate that they're\n\t\t\t// ready to be used before resolving the promise.\n\n\t\t\treturn new Promise( ( resolve ) => {\n\n\t\t\t\tfunction checkMaterialsReady() {\n\n\t\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\t\tconst materialProperties = properties.get( material );\n\t\t\t\t\t\tconst program = materialProperties.currentProgram;\n\n\t\t\t\t\t\tif ( program.isReady() ) {\n\n\t\t\t\t\t\t\t// remove any programs that report they're ready to use from the list\n\t\t\t\t\t\t\tmaterials.delete( material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\t// once the list of compiling materials is empty, call the callback\n\n\t\t\t\t\tif ( materials.size === 0 ) {\n\n\t\t\t\t\t\tresolve( scene );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if some materials are still not ready, wait a bit and check again\n\n\t\t\t\t\tsetTimeout( checkMaterialsReady, 10 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( extensions.get( 'KHR_parallel_shader_compile' ) !== null ) {\n\n\t\t\t\t\t// If we can check the compilation status of the materials without\n\t\t\t\t\t// blocking then do so right away.\n\n\t\t\t\t\tcheckMaterialsReady();\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise start by waiting a bit to give the materials we just\n\t\t\t\t\t// initialized a chance to finish.\n\n\t\t\t\t\tsetTimeout( checkMaterialsReady, 10 );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t};\n\n\t\t// Animation Loop\n\n\t\tlet onAnimationFrameCallback = null;\n\n\t\tfunction onAnimationFrame( time ) {\n\n\t\t\tif ( onAnimationFrameCallback ) onAnimationFrameCallback( time );\n\n\t\t}\n\n\t\tfunction onXRSessionStart() {\n\n\t\t\tanimation.stop();\n\n\t\t}\n\n\t\tfunction onXRSessionEnd() {\n\n\t\t\tanimation.start();\n\n\t\t}\n\n\t\tconst animation = new WebGLAnimation();\n\t\tanimation.setAnimationLoop( onAnimationFrame );\n\n\t\tif ( typeof self !== 'undefined' ) animation.setContext( self );\n\n\t\tthis.setAnimationLoop = function ( callback ) {\n\n\t\t\tonAnimationFrameCallback = callback;\n\t\t\txr.setAnimationLoop( callback );\n\n\t\t\t( callback === null ) ? animation.stop() : animation.start();\n\n\t\t};\n\n\t\txr.addEventListener( 'sessionstart', onXRSessionStart );\n\t\txr.addEventListener( 'sessionend', onXRSessionEnd );\n\n\t\t// Rendering\n\n\t\tthis.render = function ( scene, camera ) {\n\n\t\t\tif ( camera !== undefined && camera.isCamera !== true ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( _isContextLost === true ) return;\n\n\t\t\t// update scene graph\n\n\t\t\tif ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();\n\n\t\t\t// update camera matrices and frustum\n\n\t\t\tif ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();\n\n\t\t\tif ( xr.enabled === true && xr.isPresenting === true ) {\n\n\t\t\t\tif ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );\n\n\t\t\t\tcamera = xr.getCamera(); // use XR camera for rendering\n\n\t\t\t}\n\n\t\t\t//\n\t\t\tif ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );\n\n\t\t\tcurrentRenderState = renderStates.get( scene, renderStateStack.length );\n\t\t\tcurrentRenderState.init();\n\n\t\t\trenderStateStack.push( currentRenderState );\n\n\t\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\t\t_frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t\t\t_localClippingEnabled = this.localClippingEnabled;\n\t\t\t_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );\n\n\t\t\tcurrentRenderList = renderLists.get( scene, renderListStack.length );\n\t\t\tcurrentRenderList.init();\n\n\t\t\trenderListStack.push( currentRenderList );\n\n\t\t\tprojectObject( scene, camera, 0, _this.sortObjects );\n\n\t\t\tcurrentRenderList.finish();\n\n\t\t\tif ( _this.sortObjects === true ) {\n\n\t\t\t\tcurrentRenderList.sort( _opaqueSort, _transparentSort );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tthis.info.render.frame ++;\n\n\t\t\tif ( _clippingEnabled === true ) clipping.beginShadows();\n\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tshadowMap.render( shadowsArray, scene, camera );\n\n\t\t\tif ( _clippingEnabled === true ) clipping.endShadows();\n\n\t\t\t//\n\n\t\t\tif ( this.info.autoReset === true ) this.info.reset();\n\n\n\t\t\t//\n\n\t\t\tbackground.render( currentRenderList, scene );\n\n\t\t\t// render scene\n\n\t\t\tcurrentRenderState.setupLights( _this._useLegacyLights );\n\n\t\t\tif ( camera.isArrayCamera ) {\n\n\t\t\t\tconst cameras = camera.cameras;\n\n\t\t\t\tfor ( let i = 0, l = cameras.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst camera2 = cameras[ i ];\n\n\t\t\t\t\trenderScene( currentRenderList, scene, camera2, camera2.viewport );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\trenderScene( currentRenderList, scene, camera );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( _currentRenderTarget !== null ) {\n\n\t\t\t\t// resolve multisample renderbuffers to a single-sample texture if necessary\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _currentRenderTarget );\n\n\t\t\t\t// Generate mipmap if we're using any kind of mipmap filtering\n\n\t\t\t\ttextures.updateRenderTargetMipmap( _currentRenderTarget );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );\n\n\t\t\t// _gl.finish();\n\n\t\t\tbindingStates.resetDefaultState();\n\t\t\t_currentMaterialId = - 1;\n\t\t\t_currentCamera = null;\n\n\t\t\trenderStateStack.pop();\n\n\t\t\tif ( renderStateStack.length > 0 ) {\n\n\t\t\t\tcurrentRenderState = renderStateStack[ renderStateStack.length - 1 ];\n\n\t\t\t} else {\n\n\t\t\t\tcurrentRenderState = null;\n\n\t\t\t}\n\n\t\t\trenderListStack.pop();\n\n\t\t\tif ( renderListStack.length > 0 ) {\n\n\t\t\t\tcurrentRenderList = renderListStack[ renderListStack.length - 1 ];\n\n\t\t\t} else {\n\n\t\t\t\tcurrentRenderList = null;\n\n\t\t\t}\n\n\t\t};\n\n\t\tfunction projectObject( object, camera, groupOrder, sortObjects ) {\n\n\t\t\tif ( object.visible === false ) return;\n\n\t\t\tconst visible = object.layers.test( camera.layers );\n\n\t\t\tif ( visible ) {\n\n\t\t\t\tif ( object.isGroup ) {\n\n\t\t\t\t\tgroupOrder = object.renderOrder;\n\n\t\t\t\t} else if ( object.isLOD ) {\n\n\t\t\t\t\tif ( object.autoUpdate === true ) object.update( camera );\n\n\t\t\t\t} else if ( object.isLight ) {\n\n\t\t\t\t\tcurrentRenderState.pushLight( object );\n\n\t\t\t\t\tif ( object.castShadow ) {\n\n\t\t\t\t\t\tcurrentRenderState.pushShadow( object );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isSprite ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\t_vector3.setFromMatrixPosition( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( object.isMesh || object.isLine || object.isPoints ) {\n\n\t\t\t\t\tif ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {\n\n\t\t\t\t\t\tconst geometry = objects.update( object );\n\t\t\t\t\t\tconst material = object.material;\n\n\t\t\t\t\t\tif ( sortObjects ) {\n\n\t\t\t\t\t\t\tif ( object.boundingSphere !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( object.boundingSphere === null ) object.computeBoundingSphere();\n\t\t\t\t\t\t\t\t_vector3.copy( object.boundingSphere.center );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\t\t\t\t\t\t\t\t_vector3.copy( geometry.boundingSphere.center );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_vector3\n\t\t\t\t\t\t\t\t.applyMatrix4( object.matrixWorld )\n\t\t\t\t\t\t\t\t.applyMatrix4( _projScreenMatrix );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( Array.isArray( material ) ) {\n\n\t\t\t\t\t\t\tconst groups = geometry.groups;\n\n\t\t\t\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\tconst group = groups[ i ];\n\t\t\t\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\n\n\t\t\t\t\t\t\t\tif ( groupMaterial && groupMaterial.visible ) {\n\n\t\t\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else if ( material.visible ) {\n\n\t\t\t\t\t\t\tcurrentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst children = object.children;\n\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\t\tprojectObject( children[ i ], camera, groupOrder, sortObjects );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderScene( currentRenderList, scene, camera, viewport ) {\n\n\t\t\tconst opaqueObjects = currentRenderList.opaque;\n\t\t\tconst transmissiveObjects = currentRenderList.transmissive;\n\t\t\tconst transparentObjects = currentRenderList.transparent;\n\n\t\t\tcurrentRenderState.setupLightsView( camera );\n\n\t\t\tif ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );\n\n\t\t\tif ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );\n\n\t\t\tif ( viewport ) state.viewport( _currentViewport.copy( viewport ) );\n\n\t\t\tif ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );\n\t\t\tif ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );\n\t\t\tif ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );\n\n\t\t\t// Ensure depth buffer writing is enabled so it can be cleared on next render\n\n\t\t\tstate.buffers.depth.setTest( true );\n\t\t\tstate.buffers.depth.setMask( true );\n\t\t\tstate.buffers.color.setMask( true );\n\n\t\t\tstate.setPolygonOffset( false );\n\n\t\t}\n\n\t\tfunction renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {\n\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tif ( overrideMaterial !== null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst isWebGL2 = capabilities.isWebGL2;\n\n\t\t\tif ( _transmissionRenderTarget === null ) {\n\n\t\t\t\t_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {\n\t\t\t\t\tgenerateMipmaps: true,\n\t\t\t\t\ttype: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,\n\t\t\t\t\tminFilter: LinearMipmapLinearFilter,\n\t\t\t\t\tsamples: ( isWebGL2 ) ? 4 : 0\n\t\t\t\t} );\n\n\t\t\t\t// debug\n\n\t\t\t\t/*\n\t\t\t\tconst geometry = new PlaneGeometry();\n\t\t\t\tconst material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );\n\n\t\t\t\tconst mesh = new Mesh( geometry, material );\n\t\t\t\tscene.add( mesh );\n\t\t\t\t*/\n\n\t\t\t}\n\n\t\t\t_this.getDrawingBufferSize( _vector2 );\n\n\t\t\tif ( isWebGL2 ) {\n\n\t\t\t\t_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );\n\n\t\t\t} else {\n\n\t\t\t\t_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tconst currentRenderTarget = _this.getRenderTarget();\n\t\t\t_this.setRenderTarget( _transmissionRenderTarget );\n\n\t\t\t_this.getClearColor( _currentClearColor );\n\t\t\t_currentClearAlpha = _this.getClearAlpha();\n\t\t\tif ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );\n\n\t\t\t_this.clear();\n\n\t\t\t// Turn off the features which can affect the frag color for opaque objects pass.\n\t\t\t// Otherwise they are applied twice in opaque objects pass and transmission objects pass.\n\t\t\tconst currentToneMapping = _this.toneMapping;\n\t\t\t_this.toneMapping = NoToneMapping;\n\n\t\t\trenderObjects( opaqueObjects, scene, camera );\n\n\t\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t\tlet renderTargetNeedsUpdate = false;\n\n\t\t\tfor ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {\n\n\t\t\t\tconst renderItem = transmissiveObjects[ i ];\n\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = renderItem.material;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\tconst currentSide = material.side;\n\n\t\t\t\t\tmaterial.side = BackSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t\tmaterial.side = currentSide;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t\trenderTargetNeedsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( renderTargetNeedsUpdate === true ) {\n\n\t\t\t\ttextures.updateMultisampleRenderTarget( _transmissionRenderTarget );\n\t\t\t\ttextures.updateRenderTargetMipmap( _transmissionRenderTarget );\n\n\t\t\t}\n\n\t\t\t_this.setRenderTarget( currentRenderTarget );\n\n\t\t\t_this.setClearColor( _currentClearColor, _currentClearAlpha );\n\n\t\t\t_this.toneMapping = currentToneMapping;\n\n\t\t}\n\n\t\tfunction renderObjects( renderList, scene, camera ) {\n\n\t\t\tconst overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;\n\n\t\t\tfor ( let i = 0, l = renderList.length; i < l; i ++ ) {\n\n\t\t\t\tconst renderItem = renderList[ i ];\n\n\t\t\t\tconst object = renderItem.object;\n\t\t\t\tconst geometry = renderItem.geometry;\n\t\t\t\tconst material = overrideMaterial === null ? renderItem.material : overrideMaterial;\n\t\t\t\tconst group = renderItem.group;\n\n\t\t\t\tif ( object.layers.test( camera.layers ) ) {\n\n\t\t\t\t\trenderObject( object, scene, camera, geometry, material, group );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction renderObject( object, scene, camera, geometry, material, group ) {\n\n\t\t\tobject.onBeforeRender( _this, scene, camera, geometry, material, group );\n\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\n\t\t\tobject.normalMatrix.getNormalMatrix( object.modelViewMatrix );\n\n\t\t\tmaterial.onBeforeRender( _this, scene, camera, geometry, object, group );\n\n\t\t\tif ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {\n\n\t\t\t\tmaterial.side = BackSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = FrontSide;\n\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t} else {\n\n\t\t\t\t_this.renderBufferDirect( camera, scene, geometry, material, object, group );\n\n\t\t\t}\n\n\t\t\tobject.onAfterRender( _this, scene, camera, geometry, material, group );\n\n\t\t}\n\n\t\tfunction getProgram( material, scene, object ) {\n\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\tconst materialProperties = properties.get( material );\n\n\t\t\tconst lights = currentRenderState.state.lights;\n\t\t\tconst shadowsArray = currentRenderState.state.shadowsArray;\n\n\t\t\tconst lightsStateVersion = lights.state.version;\n\n\t\t\tconst parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );\n\t\t\tconst programCacheKey = programCache.getProgramCacheKey( parameters );\n\n\t\t\tlet programs = materialProperties.programs;\n\n\t\t\t// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change\n\n\t\t\tmaterialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tmaterialProperties.fog = scene.fog;\n\t\t\tmaterialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );\n\n\t\t\tif ( programs === undefined ) {\n\n\t\t\t\t// new material\n\n\t\t\t\tmaterial.addEventListener( 'dispose', onMaterialDispose );\n\n\t\t\t\tprograms = new Map();\n\t\t\t\tmaterialProperties.programs = programs;\n\n\t\t\t}\n\n\t\t\tlet program = programs.get( programCacheKey );\n\n\t\t\tif ( program !== undefined ) {\n\n\t\t\t\t// early out if program and light state is identical\n\n\t\t\t\tif ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {\n\n\t\t\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t\t\treturn program;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tparameters.uniforms = programCache.getUniforms( material );\n\n\t\t\t\tmaterial.onBuild( object, parameters, _this );\n\n\t\t\t\tmaterial.onBeforeCompile( parameters, _this );\n\n\t\t\t\tprogram = programCache.acquireProgram( parameters, programCacheKey );\n\t\t\t\tprograms.set( programCacheKey, program );\n\n\t\t\t\tmaterialProperties.uniforms = parameters.uniforms;\n\n\t\t\t}\n\n\t\t\tconst uniforms = materialProperties.uniforms;\n\n\t\t\tif ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {\n\n\t\t\t\tuniforms.clippingPlanes = clipping.uniform;\n\n\t\t\t}\n\n\t\t\tupdateCommonMaterialProperties( material, parameters );\n\n\t\t\t// store the light setup it was created for\n\n\t\t\tmaterialProperties.needsLights = materialNeedsLights( material );\n\t\t\tmaterialProperties.lightsStateVersion = lightsStateVersion;\n\n\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t// wire up the material to this renderer's lighting state\n\n\t\t\t\tuniforms.ambientLightColor.value = lights.state.ambient;\n\t\t\t\tuniforms.lightProbe.value = lights.state.probe;\n\t\t\t\tuniforms.directionalLights.value = lights.state.directional;\n\t\t\t\tuniforms.directionalLightShadows.value = lights.state.directionalShadow;\n\t\t\t\tuniforms.spotLights.value = lights.state.spot;\n\t\t\t\tuniforms.spotLightShadows.value = lights.state.spotShadow;\n\t\t\t\tuniforms.rectAreaLights.value = lights.state.rectArea;\n\t\t\t\tuniforms.ltc_1.value = lights.state.rectAreaLTC1;\n\t\t\t\tuniforms.ltc_2.value = lights.state.rectAreaLTC2;\n\t\t\t\tuniforms.pointLights.value = lights.state.point;\n\t\t\t\tuniforms.pointLightShadows.value = lights.state.pointShadow;\n\t\t\t\tuniforms.hemisphereLights.value = lights.state.hemi;\n\n\t\t\t\tuniforms.directionalShadowMap.value = lights.state.directionalShadowMap;\n\t\t\t\tuniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;\n\t\t\t\tuniforms.spotShadowMap.value = lights.state.spotShadowMap;\n\t\t\t\tuniforms.spotLightMatrix.value = lights.state.spotLightMatrix;\n\t\t\t\tuniforms.spotLightMap.value = lights.state.spotLightMap;\n\t\t\t\tuniforms.pointShadowMap.value = lights.state.pointShadowMap;\n\t\t\t\tuniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;\n\t\t\t\t// TODO (abelnation): add area lights shadow info to uniforms\n\n\t\t\t}\n\n\t\t\tmaterialProperties.currentProgram = program;\n\t\t\tmaterialProperties.uniformsList = null;\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\tfunction getUniformList( materialProperties ) {\n\n\t\t\tif ( materialProperties.uniformsList === null ) {\n\n\t\t\t\tconst progUniforms = materialProperties.currentProgram.getUniforms();\n\t\t\t\tmaterialProperties.uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, materialProperties.uniforms );\n\n\t\t\t}\n\n\t\t\treturn materialProperties.uniformsList;\n\n\t\t}\n\n\t\tfunction updateCommonMaterialProperties( material, parameters ) {\n\n\t\t\tconst materialProperties = properties.get( material );\n\n\t\t\tmaterialProperties.outputColorSpace = parameters.outputColorSpace;\n\t\t\tmaterialProperties.instancing = parameters.instancing;\n\t\t\tmaterialProperties.instancingColor = parameters.instancingColor;\n\t\t\tmaterialProperties.skinning = parameters.skinning;\n\t\t\tmaterialProperties.morphTargets = parameters.morphTargets;\n\t\t\tmaterialProperties.morphNormals = parameters.morphNormals;\n\t\t\tmaterialProperties.morphColors = parameters.morphColors;\n\t\t\tmaterialProperties.morphTargetsCount = parameters.morphTargetsCount;\n\t\t\tmaterialProperties.numClippingPlanes = parameters.numClippingPlanes;\n\t\t\tmaterialProperties.numIntersection = parameters.numClipIntersection;\n\t\t\tmaterialProperties.vertexAlphas = parameters.vertexAlphas;\n\t\t\tmaterialProperties.vertexTangents = parameters.vertexTangents;\n\t\t\tmaterialProperties.toneMapping = parameters.toneMapping;\n\n\t\t}\n\n\t\tfunction setProgram( camera, scene, geometry, material, object ) {\n\n\t\t\tif ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...\n\n\t\t\ttextures.resetTextureUnits();\n\n\t\t\tconst fog = scene.fog;\n\t\t\tconst environment = material.isMeshStandardMaterial ? scene.environment : null;\n\t\t\tconst colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );\n\t\t\tconst envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );\n\t\t\tconst vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;\n\t\t\tconst vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );\n\t\t\tconst morphTargets = !! geometry.morphAttributes.position;\n\t\t\tconst morphNormals = !! geometry.morphAttributes.normal;\n\t\t\tconst morphColors = !! geometry.morphAttributes.color;\n\n\t\t\tlet toneMapping = NoToneMapping;\n\n\t\t\tif ( material.toneMapped ) {\n\n\t\t\t\tif ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {\n\n\t\t\t\t\ttoneMapping = _this.toneMapping;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\n\t\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\n\n\t\t\tconst materialProperties = properties.get( material );\n\t\t\tconst lights = currentRenderState.state.lights;\n\n\t\t\tif ( _clippingEnabled === true ) {\n\n\t\t\t\tif ( _localClippingEnabled === true || camera !== _currentCamera ) {\n\n\t\t\t\t\tconst useCache =\n\t\t\t\t\t\tcamera === _currentCamera &&\n\t\t\t\t\t\tmaterial.id === _currentMaterialId;\n\n\t\t\t\t\t// we might want to call this function with some ClippingGroup\n\t\t\t\t\t// object instead of the material, once it becomes feasible\n\t\t\t\t\t// (#8465, #8379)\n\t\t\t\t\tclipping.setState( material, camera, useCache );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet needsProgramChange = false;\n\n\t\t\tif ( material.version === materialProperties.__version ) {\n\n\t\t\t\tif ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.outputColorSpace !== colorSpace ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.envMap !== envMap ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( material.fog === true && materialProperties.fog !== fog ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.numClippingPlanes !== undefined &&\n\t\t\t\t\t( materialProperties.numClippingPlanes !== clipping.numPlanes ||\n\t\t\t\t\tmaterialProperties.numIntersection !== clipping.numIntersection ) ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.vertexTangents !== vertexTangents ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphTargets !== morphTargets ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphNormals !== morphNormals ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.morphColors !== morphColors ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( materialProperties.toneMapping !== toneMapping ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {\n\n\t\t\t\t\tneedsProgramChange = true;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tneedsProgramChange = true;\n\t\t\t\tmaterialProperties.__version = material.version;\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tlet program = materialProperties.currentProgram;\n\n\t\t\tif ( needsProgramChange === true ) {\n\n\t\t\t\tprogram = getProgram( material, scene, object );\n\n\t\t\t}\n\n\t\t\tlet refreshProgram = false;\n\t\t\tlet refreshMaterial = false;\n\t\t\tlet refreshLights = false;\n\n\t\t\tconst p_uniforms = program.getUniforms(),\n\t\t\t\tm_uniforms = materialProperties.uniforms;\n\n\t\t\tif ( state.useProgram( program.program ) ) {\n\n\t\t\t\trefreshProgram = true;\n\t\t\t\trefreshMaterial = true;\n\t\t\t\trefreshLights = true;\n\n\t\t\t}\n\n\t\t\tif ( material.id !== _currentMaterialId ) {\n\n\t\t\t\t_currentMaterialId = material.id;\n\n\t\t\t\trefreshMaterial = true;\n\n\t\t\t}\n\n\t\t\tif ( refreshProgram || _currentCamera !== camera ) {\n\n\t\t\t\t// common camera uniforms\n\n\t\t\t\tp_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );\n\t\t\t\tp_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );\n\n\t\t\t\tconst uCamPos = p_uniforms.map.cameraPosition;\n\n\t\t\t\tif ( uCamPos !== undefined ) {\n\n\t\t\t\t\tuCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( capabilities.logarithmicDepthBuffer ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'logDepthBufFC',\n\t\t\t\t\t\t2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067\n\n\t\t\t\tif ( material.isMeshPhongMaterial ||\n\t\t\t\t\tmaterial.isMeshToonMaterial ||\n\t\t\t\t\tmaterial.isMeshLambertMaterial ||\n\t\t\t\t\tmaterial.isMeshBasicMaterial ||\n\t\t\t\t\tmaterial.isMeshStandardMaterial ||\n\t\t\t\t\tmaterial.isShaderMaterial ) {\n\n\t\t\t\t\tp_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );\n\n\t\t\t\t}\n\n\t\t\t\tif ( _currentCamera !== camera ) {\n\n\t\t\t\t\t_currentCamera = camera;\n\n\t\t\t\t\t// lighting uniforms depend on the camera so enforce an update\n\t\t\t\t\t// now, in case this material supports lights - or later, when\n\t\t\t\t\t// the next material that does gets activated:\n\n\t\t\t\t\trefreshMaterial = true;\t\t// set to true on material change\n\t\t\t\t\trefreshLights = true;\t\t// remains set until update done\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// skinning and morph target uniforms must be set even if material didn't change\n\t\t\t// auto-setting of texture unit for bone and morph texture must go before other textures\n\t\t\t// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures\n\n\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrix' );\n\t\t\t\tp_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );\n\n\t\t\t\tconst skeleton = object.skeleton;\n\n\t\t\t\tif ( skeleton ) {\n\n\t\t\t\t\tif ( capabilities.floatVertexTextures ) {\n\n\t\t\t\t\t\tif ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();\n\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );\n\t\t\t\t\t\tp_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst morphAttributes = geometry.morphAttributes;\n\n\t\t\tif ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {\n\n\t\t\t\tmorphtargets.update( object, geometry, program );\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {\n\n\t\t\t\tmaterialProperties.receiveShadow = object.receiveShadow;\n\t\t\t\tp_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );\n\n\t\t\t}\n\n\t\t\t// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512\n\n\t\t\tif ( material.isMeshGouraudMaterial && material.envMap !== null ) {\n\n\t\t\t\tm_uniforms.envMap.value = envMap;\n\n\t\t\t\tm_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;\n\n\t\t\t}\n\n\t\t\tif ( refreshMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );\n\n\t\t\t\tif ( materialProperties.needsLights ) {\n\n\t\t\t\t\t// the current material requires lighting info\n\n\t\t\t\t\t// note: all lighting uniforms are always set correctly\n\t\t\t\t\t// they simply reference the renderer's state for their\n\t\t\t\t\t// values\n\t\t\t\t\t//\n\t\t\t\t\t// use the current material's .needsUpdate flags to set\n\t\t\t\t\t// the GL state when required\n\n\t\t\t\t\tmarkUniformsLightsNeedsUpdate( m_uniforms, refreshLights );\n\n\t\t\t\t}\n\n\t\t\t\t// refresh uniforms common to several materials\n\n\t\t\t\tif ( fog && material.fog === true ) {\n\n\t\t\t\t\tmaterials.refreshFogUniforms( m_uniforms, fog );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );\n\n\t\t\t\tWebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );\n\n\t\t\t}\n\n\t\t\tif ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {\n\n\t\t\t\tWebGLUniforms.upload( _gl, getUniformList( materialProperties ), m_uniforms, textures );\n\t\t\t\tmaterial.uniformsNeedUpdate = false;\n\n\t\t\t}\n\n\t\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\t\tp_uniforms.setValue( _gl, 'center', object.center );\n\n\t\t\t}\n\n\t\t\t// common matrices\n\n\t\t\tp_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );\n\t\t\tp_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );\n\n\t\t\t// UBOs\n\n\t\t\tif ( material.isShaderMaterial || material.isRawShaderMaterial ) {\n\n\t\t\t\tconst groups = material.uniformsGroups;\n\n\t\t\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\t\t\t\tif ( capabilities.isWebGL2 ) {\n\n\t\t\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\t\t\tuniformsGroups.update( group, program );\n\t\t\t\t\t\tuniformsGroups.bind( group, program );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn program;\n\n\t\t}\n\n\t\t// If uniforms are marked as clean, they don't need to be loaded to the GPU.\n\n\t\tfunction markUniformsLightsNeedsUpdate( uniforms, value ) {\n\n\t\t\tuniforms.ambientLightColor.needsUpdate = value;\n\t\t\tuniforms.lightProbe.needsUpdate = value;\n\n\t\t\tuniforms.directionalLights.needsUpdate = value;\n\t\t\tuniforms.directionalLightShadows.needsUpdate = value;\n\t\t\tuniforms.pointLights.needsUpdate = value;\n\t\t\tuniforms.pointLightShadows.needsUpdate = value;\n\t\t\tuniforms.spotLights.needsUpdate = value;\n\t\t\tuniforms.spotLightShadows.needsUpdate = value;\n\t\t\tuniforms.rectAreaLights.needsUpdate = value;\n\t\t\tuniforms.hemisphereLights.needsUpdate = value;\n\n\t\t}\n\n\t\tfunction materialNeedsLights( material ) {\n\n\t\t\treturn material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||\n\t\t\t\tmaterial.isMeshStandardMaterial || material.isShadowMaterial ||\n\t\t\t\t( material.isShaderMaterial && material.lights === true );\n\n\t\t}\n\n\t\tthis.getActiveCubeFace = function () {\n\n\t\t\treturn _currentActiveCubeFace;\n\n\t\t};\n\n\t\tthis.getActiveMipmapLevel = function () {\n\n\t\t\treturn _currentActiveMipmapLevel;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn _currentRenderTarget;\n\n\t\t};\n\n\t\tthis.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {\n\n\t\t\tproperties.get( renderTarget.texture ).__webglTexture = colorTexture;\n\t\t\tproperties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\trenderTargetProperties.__hasExternalTextures = true;\n\n\t\t\tif ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\trenderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;\n\n\t\t\t\tif ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {\n\n\t\t\t\t\t// The multisample_render_to_texture extension doesn't work properly if there\n\t\t\t\t\t// are midframe flushes and an external depth buffer. Disable use of the extension.\n\t\t\t\t\tif ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );\n\t\t\t\t\t\trenderTargetProperties.__useRenderToTexture = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {\n\n\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\t\t\trenderTargetProperties.__webglFramebuffer = defaultFramebuffer;\n\t\t\trenderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;\n\n\t\t};\n\n\t\tthis.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {\n\n\t\t\t_currentRenderTarget = renderTarget;\n\t\t\t_currentActiveCubeFace = activeCubeFace;\n\t\t\t_currentActiveMipmapLevel = activeMipmapLevel;\n\n\t\t\tlet useDefaultFramebuffer = true;\n\t\t\tlet framebuffer = null;\n\t\t\tlet isCube = false;\n\t\t\tlet isRenderTarget3D = false;\n\n\t\t\tif ( renderTarget ) {\n\n\t\t\t\tconst renderTargetProperties = properties.get( renderTarget );\n\n\t\t\t\tif ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {\n\n\t\t\t\t\t// We need to make sure to rebind the framebuffer.\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, null );\n\t\t\t\t\tuseDefaultFramebuffer = false;\n\n\t\t\t\t} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {\n\n\t\t\t\t\ttextures.setupRenderTarget( renderTarget );\n\n\t\t\t\t} else if ( renderTargetProperties.__hasExternalTextures ) {\n\n\t\t\t\t\t// Color and depth texture must be rebound in order for the swapchain to update.\n\t\t\t\t\ttextures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );\n\n\t\t\t\t}\n\n\t\t\t\tconst texture = renderTarget.texture;\n\n\t\t\t\tif ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tisRenderTarget3D = true;\n\n\t\t\t\t}\n\n\t\t\t\tconst __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\t\tif ( renderTarget.isWebGLCubeRenderTarget ) {\n\n\t\t\t\t\tif ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeCubeFace ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tisCube = true;\n\n\t\t\t\t} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {\n\n\t\t\t\t\tframebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( Array.isArray( __webglFramebuffer ) ) {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer[ activeMipmapLevel ];\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tframebuffer = __webglFramebuffer;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t_currentViewport.copy( renderTarget.viewport );\n\t\t\t\t_currentScissor.copy( renderTarget.scissor );\n\t\t\t\t_currentScissorTest = renderTarget.scissorTest;\n\n\t\t\t} else {\n\n\t\t\t\t_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();\n\t\t\t\t_currentScissorTest = _scissorTest;\n\n\t\t\t}\n\n\t\t\tconst framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\tif ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {\n\n\t\t\t\tstate.drawBuffers( renderTarget, framebuffer );\n\n\t\t\t}\n\n\t\t\tstate.viewport( _currentViewport );\n\t\t\tstate.scissor( _currentScissor );\n\t\t\tstate.setScissorTest( _currentScissorTest );\n\n\t\t\tif ( isCube ) {\n\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t\t_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );\n\n\t\t\t} else if ( isRenderTarget3D ) {\n\n\t\t\t\tconst textureProperties = properties.get( renderTarget.texture );\n\t\t\t\tconst layer = activeCubeFace || 0;\n\t\t\t\t_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );\n\n\t\t\t}\n\n\t\t\t_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings\n\n\t\t};\n\n\t\tthis.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {\n\n\t\t\tif ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {\n\n\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tlet framebuffer = properties.get( renderTarget ).__webglFramebuffer;\n\n\t\t\tif ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {\n\n\t\t\t\tframebuffer = framebuffer[ activeCubeFaceIndex ];\n\n\t\t\t}\n\n\t\t\tif ( framebuffer ) {\n\n\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\ttry {\n\n\t\t\t\t\tconst texture = renderTarget.texture;\n\t\t\t\t\tconst textureFormat = texture.format;\n\t\t\t\t\tconst textureType = texture.type;\n\n\t\t\t\t\tif ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );\n\n\t\t\t\t\tif ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)\n\t\t\t\t\t\t! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox\n\t\t\t\t\t\t! halfFloatSupportedByExt ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)\n\n\t\t\t\t\tif ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {\n\n\t\t\t\t\t\t_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );\n\n\t\t\t\t\t}\n\n\t\t\t\t} finally {\n\n\t\t\t\t\t// restore framebuffer of current render target if necessary\n\n\t\t\t\t\tconst framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;\n\t\t\t\t\tstate.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.copyFramebufferToTexture = function ( position, texture, level = 0 ) {\n\n\t\t\tconst levelScale = Math.pow( 2, - level );\n\t\t\tconst width = Math.floor( texture.image.width * levelScale );\n\t\t\tconst height = Math.floor( texture.image.height * levelScale );\n\n\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {\n\n\t\t\tconst width = srcTexture.image.width;\n\t\t\tconst height = srcTexture.image.height;\n\t\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\t\tconst glType = utils.convert( dstTexture.type );\n\n\t\t\ttextures.setTexture2D( dstTexture, 0 );\n\n\t\t\t// As another texture upload may have changed pixelStorei\n\t\t\t// parameters, make sure they are correct for the dstTexture\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\t\tif ( srcTexture.isDataTexture ) {\n\n\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );\n\n\t\t\t} else {\n\n\t\t\t\tif ( srcTexture.isCompressedTexture ) {\n\n\t\t\t\t\t_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {\n\n\t\t\tif ( _this.isWebGL1Renderer ) {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst width = sourceBox.max.x - sourceBox.min.x + 1;\n\t\t\tconst height = sourceBox.max.y - sourceBox.min.y + 1;\n\t\t\tconst depth = sourceBox.max.z - sourceBox.min.z + 1;\n\t\t\tconst glFormat = utils.convert( dstTexture.format );\n\t\t\tconst glType = utils.convert( dstTexture.type );\n\t\t\tlet glTarget;\n\n\t\t\tif ( dstTexture.isData3DTexture ) {\n\n\t\t\t\ttextures.setTexture3D( dstTexture, 0 );\n\t\t\t\tglTarget = _gl.TEXTURE_3D;\n\n\t\t\t} else if ( dstTexture.isDataArrayTexture ) {\n\n\t\t\t\ttextures.setTexture2DArray( dstTexture, 0 );\n\t\t\t\tglTarget = _gl.TEXTURE_2D_ARRAY;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );\n\n\t\t\tconst unpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );\n\t\t\tconst unpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );\n\t\t\tconst unpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );\n\t\t\tconst unpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );\n\t\t\tconst unpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );\n\n\t\t\tconst image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, sourceBox.min.x );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, sourceBox.min.y );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, sourceBox.min.z );\n\n\t\t\tif ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {\n\n\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );\n\n\t\t\t} else {\n\n\t\t\t\tif ( srcTexture.isCompressedArrayTexture ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );\n\t\t\t\t\t_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, unpackRowLen );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, unpackSkipPixels );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, unpackSkipRows );\n\t\t\t_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, unpackSkipImages );\n\n\t\t\t// Generate mipmaps only when copying level 0\n\t\t\tif ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.initTexture = function ( texture ) {\n\n\t\t\tif ( texture.isCubeTexture ) {\n\n\t\t\t\ttextures.setTextureCube( texture, 0 );\n\n\t\t\t} else if ( texture.isData3DTexture ) {\n\n\t\t\t\ttextures.setTexture3D( texture, 0 );\n\n\t\t\t} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {\n\n\t\t\t\ttextures.setTexture2DArray( texture, 0 );\n\n\t\t\t} else {\n\n\t\t\t\ttextures.setTexture2D( texture, 0 );\n\n\t\t\t}\n\n\t\t\tstate.unbindTexture();\n\n\t\t};\n\n\t\tthis.resetState = function () {\n\n\t\t\t_currentActiveCubeFace = 0;\n\t\t\t_currentActiveMipmapLevel = 0;\n\t\t\t_currentRenderTarget = null;\n\n\t\t\tstate.reset();\n\t\t\tbindingStates.reset();\n\n\t\t};\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tget coordinateSystem() {\n\n\t\treturn WebGLCoordinateSystem;\n\n\t}\n\n\tget outputColorSpace() {\n\n\t\treturn this._outputColorSpace;\n\n\t}\n\n\tset outputColorSpace( colorSpace ) {\n\n\t\tthis._outputColorSpace = colorSpace;\n\n\t\tconst gl = this.getContext();\n\t\tgl.drawingBufferColorSpace = colorSpace === DisplayP3ColorSpace ? 'display-p3' : 'srgb';\n\t\tgl.unpackColorSpace = ColorManagement.workingColorSpace === LinearDisplayP3ColorSpace ? 'display-p3' : 'srgb';\n\n\t}\n\n\tget physicallyCorrectLights() { // @deprecated, r150\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );\n\t\treturn ! this.useLegacyLights;\n\n\t}\n\n\tset physicallyCorrectLights( value ) { // @deprecated, r150\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );\n\t\tthis.useLegacyLights = ! value;\n\n\t}\n\n\tget outputEncoding() { // @deprecated, r152\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );\n\t\treturn this.outputColorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;\n\n\t}\n\n\tset outputEncoding( encoding ) { // @deprecated, r152\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );\n\t\tthis.outputColorSpace = encoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n\n\t}\n\n\tget useLegacyLights() { // @deprecated, r155\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );\n\t\treturn this._useLegacyLights;\n\n\t}\n\n\tset useLegacyLights( value ) { // @deprecated, r155\n\n\t\tconsole.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );\n\t\tthis._useLegacyLights = value;\n\n\t}\n\n}\n\nclass WebGL1Renderer extends WebGLRenderer {}\n\nWebGL1Renderer.prototype.isWebGL1Renderer = true;\n\nclass FogExp2 {\n\n\tconstructor( color, density = 0.00025 ) {\n\n\t\tthis.isFogExp2 = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\t\tthis.density = density;\n\n\t}\n\n\tclone() {\n\n\t\treturn new FogExp2( this.color, this.density );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'FogExp2',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tdensity: this.density\n\t\t};\n\n\t}\n\n}\n\nclass Fog {\n\n\tconstructor( color, near = 1, far = 1000 ) {\n\n\t\tthis.isFog = true;\n\n\t\tthis.name = '';\n\n\t\tthis.color = new Color( color );\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Fog( this.color, this.near, this.far );\n\n\t}\n\n\ttoJSON( /* meta */ ) {\n\n\t\treturn {\n\t\t\ttype: 'Fog',\n\t\t\tname: this.name,\n\t\t\tcolor: this.color.getHex(),\n\t\t\tnear: this.near,\n\t\t\tfar: this.far\n\t\t};\n\n\t}\n\n}\n\nclass Scene extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isScene = true;\n\n\t\tthis.type = 'Scene';\n\n\t\tthis.background = null;\n\t\tthis.environment = null;\n\t\tthis.fog = null;\n\n\t\tthis.backgroundBlurriness = 0;\n\t\tthis.backgroundIntensity = 1;\n\n\t\tthis.overrideMaterial = null;\n\n\t\tif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t\t\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.background !== null ) this.background = source.background.clone();\n\t\tif ( source.environment !== null ) this.environment = source.environment.clone();\n\t\tif ( source.fog !== null ) this.fog = source.fog.clone();\n\n\t\tthis.backgroundBlurriness = source.backgroundBlurriness;\n\t\tthis.backgroundIntensity = source.backgroundIntensity;\n\n\t\tif ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();\n\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.fog !== null ) data.object.fog = this.fog.toJSON();\n\t\tif ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;\n\t\tif ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InterleavedBuffer {\n\n\tconstructor( array, stride ) {\n\n\t\tthis.isInterleavedBuffer = true;\n\n\t\tthis.array = array;\n\t\tthis.stride = stride;\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.updateRange = { offset: 0, count: - 1 };\n\n\t\tthis.version = 0;\n\n\t\tthis.uuid = generateUUID();\n\n\t}\n\n\tonUploadCallback() {}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.array = new source.array.constructor( source.array );\n\t\tthis.count = source.count;\n\t\tthis.stride = source.stride;\n\t\tthis.usage = source.usage;\n\n\t\treturn this;\n\n\t}\n\n\tcopyAt( index1, attribute, index2 ) {\n\n\t\tindex1 *= this.stride;\n\t\tindex2 *= attribute.stride;\n\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\n\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tset( value, offset = 0 ) {\n\n\t\tthis.array.set( value, offset );\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\n\n\t\t}\n\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\n\n\t\tconst ib = new this.constructor( array, this.stride );\n\t\tib.setUsage( this.usage );\n\n\t\treturn ib;\n\n\t}\n\n\tonUpload( callback ) {\n\n\t\tthis.onUploadCallback = callback;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data.arrayBuffers === undefined ) {\n\n\t\t\tdata.arrayBuffers = {};\n\n\t\t}\n\n\t\t// generate UUID for array buffer if necessary\n\n\t\tif ( this.array.buffer._uuid === undefined ) {\n\n\t\t\tthis.array.buffer._uuid = generateUUID();\n\n\t\t}\n\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\n\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\n\n\t\t}\n\n\t\t//\n\n\t\treturn {\n\t\t\tuuid: this.uuid,\n\t\t\tbuffer: this.array.buffer._uuid,\n\t\t\ttype: this.array.constructor.name,\n\t\t\tstride: this.stride\n\t\t};\n\n\t}\n\n}\n\nconst _vector$5 = /*@__PURE__*/ new Vector3();\n\nclass InterleavedBufferAttribute {\n\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\n\n\t\tthis.isInterleavedBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.data = interleavedBuffer;\n\t\tthis.itemSize = itemSize;\n\t\tthis.offset = offset;\n\n\t\tthis.normalized = normalized;\n\n\t}\n\n\tget count() {\n\n\t\treturn this.data.count;\n\n\t}\n\n\tget array() {\n\n\t\treturn this.data.array;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tthis.data.needsUpdate = value;\n\n\t}\n\n\tapplyMatrix4( m ) {\n\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\n\n\t\t\t_vector$5.fromBufferAttribute( this, i );\n\n\t\t\t_vector$5.applyMatrix4( m );\n\n\t\t\tthis.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tapplyNormalMatrix( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$5.fromBufferAttribute( this, i );\n\n\t\t\t_vector$5.applyNormalMatrix( m );\n\n\t\t\tthis.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttransformDirection( m ) {\n\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\n\n\t\t\t_vector$5.fromBufferAttribute( this, i );\n\n\t\t\t_vector$5.transformDirection( m );\n\n\t\t\tthis.setXYZ( i, _vector$5.x, _vector$5.y, _vector$5.z );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetX( index, x ) {\n\n\t\tif ( this.normalized ) x = normalize( x, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\n\n\t\treturn this;\n\n\t}\n\n\tsetY( index, y ) {\n\n\t\tif ( this.normalized ) y = normalize( y, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetZ( index, z ) {\n\n\t\tif ( this.normalized ) z = normalize( z, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetW( index, w ) {\n\n\t\tif ( this.normalized ) w = normalize( w, this.array );\n\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tgetX( index ) {\n\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\n\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\n\n\t\treturn x;\n\n\t}\n\n\tgetY( index ) {\n\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\n\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\n\n\t\treturn y;\n\n\t}\n\n\tgetZ( index ) {\n\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\n\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\n\n\t\treturn z;\n\n\t}\n\n\tgetW( index ) {\n\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\n\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\n\n\t\treturn w;\n\n\t}\n\n\tsetXY( index, x, y ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZ( index, x, y, z ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\n\t\treturn this;\n\n\t}\n\n\tsetXYZW( index, x, y, z, w ) {\n\n\t\tindex = index * this.data.stride + this.offset;\n\n\t\tif ( this.normalized ) {\n\n\t\t\tx = normalize( x, this.array );\n\t\t\ty = normalize( y, this.array );\n\t\t\tz = normalize( z, this.array );\n\t\t\tw = normalize( w, this.array );\n\n\t\t}\n\n\t\tthis.data.array[ index + 0 ] = x;\n\t\tthis.data.array[ index + 1 ] = y;\n\t\tthis.data.array[ index + 2 ] = z;\n\t\tthis.data.array[ index + 3 ] = w;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\n\n\t\t} else {\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\n\n\t\t\t}\n\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\n\n\t\t}\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tif ( data === undefined ) {\n\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\n\n\t\t\tconst array = [];\n\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\n\n\t\t\t\tconst index = i * this.data.stride + this.offset;\n\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\n\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\n\n\t\t\treturn {\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\ttype: this.array.constructor.name,\n\t\t\t\tarray: array,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t} else {\n\n\t\t\t// save as true interleaved attribute\n\n\t\t\tif ( data.interleavedBuffers === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers = {};\n\n\t\t\t}\n\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\n\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tisInterleavedBufferAttribute: true,\n\t\t\t\titemSize: this.itemSize,\n\t\t\t\tdata: this.data.uuid,\n\t\t\t\toffset: this.offset,\n\t\t\t\tnormalized: this.normalized\n\t\t\t};\n\n\t\t}\n\n\t}\n\n}\n\nclass SpriteMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isSpriteMaterial = true;\n\n\t\tthis.type = 'SpriteMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.rotation = 0;\n\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.rotation = source.rotation;\n\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nlet _geometry;\n\nconst _intersectPoint = /*@__PURE__*/ new Vector3();\nconst _worldScale = /*@__PURE__*/ new Vector3();\nconst _mvPosition = /*@__PURE__*/ new Vector3();\n\nconst _alignedPosition = /*@__PURE__*/ new Vector2();\nconst _rotatedPosition = /*@__PURE__*/ new Vector2();\nconst _viewWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _vA = /*@__PURE__*/ new Vector3();\nconst _vB = /*@__PURE__*/ new Vector3();\nconst _vC = /*@__PURE__*/ new Vector3();\n\nconst _uvA = /*@__PURE__*/ new Vector2();\nconst _uvB = /*@__PURE__*/ new Vector2();\nconst _uvC = /*@__PURE__*/ new Vector2();\n\nclass Sprite extends Object3D {\n\n\tconstructor( material = new SpriteMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isSprite = true;\n\n\t\tthis.type = 'Sprite';\n\n\t\tif ( _geometry === undefined ) {\n\n\t\t\t_geometry = new BufferGeometry();\n\n\t\t\tconst float32Array = new Float32Array( [\n\t\t\t\t- 0.5, - 0.5, 0, 0, 0,\n\t\t\t\t0.5, - 0.5, 0, 1, 0,\n\t\t\t\t0.5, 0.5, 0, 1, 1,\n\t\t\t\t- 0.5, 0.5, 0, 0, 1\n\t\t\t] );\n\n\t\t\tconst interleavedBuffer = new InterleavedBuffer( float32Array, 5 );\n\n\t\t\t_geometry.setIndex( [ 0, 1, 2,\t0, 2, 3 ] );\n\t\t\t_geometry.setAttribute( 'position', new InterleavedBufferAttribute( interleavedBuffer, 3, 0, false ) );\n\t\t\t_geometry.setAttribute( 'uv', new InterleavedBufferAttribute( interleavedBuffer, 2, 3, false ) );\n\n\t\t}\n\n\t\tthis.geometry = _geometry;\n\t\tthis.material = material;\n\n\t\tthis.center = new Vector2( 0.5, 0.5 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tif ( raycaster.camera === null ) {\n\n\t\t\tconsole.error( 'THREE.Sprite: \"Raycaster.camera\" needs to be set in order to raycast against sprites.' );\n\n\t\t}\n\n\t\t_worldScale.setFromMatrixScale( this.matrixWorld );\n\n\t\t_viewWorldMatrix.copy( raycaster.camera.matrixWorld );\n\t\tthis.modelViewMatrix.multiplyMatrices( raycaster.camera.matrixWorldInverse, this.matrixWorld );\n\n\t\t_mvPosition.setFromMatrixPosition( this.modelViewMatrix );\n\n\t\tif ( raycaster.camera.isPerspectiveCamera && this.material.sizeAttenuation === false ) {\n\n\t\t\t_worldScale.multiplyScalar( - _mvPosition.z );\n\n\t\t}\n\n\t\tconst rotation = this.material.rotation;\n\t\tlet sin, cos;\n\n\t\tif ( rotation !== 0 ) {\n\n\t\t\tcos = Math.cos( rotation );\n\t\t\tsin = Math.sin( rotation );\n\n\t\t}\n\n\t\tconst center = this.center;\n\n\t\ttransformVertex( _vA.set( - 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vB.set( 0.5, - 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\ttransformVertex( _vC.set( 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\n\t\t_uvA.set( 0, 0 );\n\t\t_uvB.set( 1, 0 );\n\t\t_uvC.set( 1, 1 );\n\n\t\t// check first triangle\n\t\tlet intersect = raycaster.ray.intersectTriangle( _vA, _vB, _vC, false, _intersectPoint );\n\n\t\tif ( intersect === null ) {\n\n\t\t\t// check second triangle\n\t\t\ttransformVertex( _vB.set( - 0.5, 0.5, 0 ), _mvPosition, center, _worldScale, sin, cos );\n\t\t\t_uvB.set( 0, 1 );\n\n\t\t\tintersect = raycaster.ray.intersectTriangle( _vA, _vC, _vB, false, _intersectPoint );\n\t\t\tif ( intersect === null ) {\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( _intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tpoint: _intersectPoint.clone(),\n\t\t\tuv: Triangle.getInterpolation( _intersectPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() ),\n\t\t\tface: null,\n\t\t\tobject: this\n\n\t\t} );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tif ( source.center !== undefined ) this.center.copy( source.center );\n\n\t\tthis.material = source.material;\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction transformVertex( vertexPosition, mvPosition, center, scale, sin, cos ) {\n\n\t// compute position in camera space\n\t_alignedPosition.subVectors( vertexPosition, center ).addScalar( 0.5 ).multiply( scale );\n\n\t// to check if rotation is not zero\n\tif ( sin !== undefined ) {\n\n\t\t_rotatedPosition.x = ( cos * _alignedPosition.x ) - ( sin * _alignedPosition.y );\n\t\t_rotatedPosition.y = ( sin * _alignedPosition.x ) + ( cos * _alignedPosition.y );\n\n\t} else {\n\n\t\t_rotatedPosition.copy( _alignedPosition );\n\n\t}\n\n\n\tvertexPosition.copy( mvPosition );\n\tvertexPosition.x += _rotatedPosition.x;\n\tvertexPosition.y += _rotatedPosition.y;\n\n\t// transform to world space\n\tvertexPosition.applyMatrix4( _viewWorldMatrix );\n\n}\n\nconst _v1$2 = /*@__PURE__*/ new Vector3();\nconst _v2$1 = /*@__PURE__*/ new Vector3();\n\nclass LOD extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis._currentLevel = 0;\n\n\t\tthis.type = 'LOD';\n\n\t\tObject.defineProperties( this, {\n\t\t\tlevels: {\n\t\t\t\tenumerable: true,\n\t\t\t\tvalue: []\n\t\t\t},\n\t\t\tisLOD: {\n\t\t\t\tvalue: true,\n\t\t\t}\n\t\t} );\n\n\t\tthis.autoUpdate = true;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tconst levels = source.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tthis.addLevel( level.object.clone(), level.distance, level.hysteresis );\n\n\t\t}\n\n\t\tthis.autoUpdate = source.autoUpdate;\n\n\t\treturn this;\n\n\t}\n\n\taddLevel( object, distance = 0, hysteresis = 0 ) {\n\n\t\tdistance = Math.abs( distance );\n\n\t\tconst levels = this.levels;\n\n\t\tlet l;\n\n\t\tfor ( l = 0; l < levels.length; l ++ ) {\n\n\t\t\tif ( distance < levels[ l ].distance ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlevels.splice( l, 0, { distance: distance, hysteresis: hysteresis, object: object } );\n\n\t\tthis.add( object );\n\n\t\treturn this;\n\n\t}\n\n\tgetCurrentLevel() {\n\n\t\treturn this._currentLevel;\n\n\t}\n\n\n\n\tgetObjectForDistance( distance ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance < levelDistance ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn levels[ i - 1 ].object;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 0 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = raycaster.ray.origin.distanceTo( _v1$2 );\n\n\t\t\tthis.getObjectForDistance( distance ).raycast( raycaster, intersects );\n\n\t\t}\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst levels = this.levels;\n\n\t\tif ( levels.length > 1 ) {\n\n\t\t\t_v1$2.setFromMatrixPosition( camera.matrixWorld );\n\t\t\t_v2$1.setFromMatrixPosition( this.matrixWorld );\n\n\t\t\tconst distance = _v1$2.distanceTo( _v2$1 ) / camera.zoom;\n\n\t\t\tlevels[ 0 ].object.visible = true;\n\n\t\t\tlet i, l;\n\n\t\t\tfor ( i = 1, l = levels.length; i < l; i ++ ) {\n\n\t\t\t\tlet levelDistance = levels[ i ].distance;\n\n\t\t\t\tif ( levels[ i ].object.visible ) {\n\n\t\t\t\t\tlevelDistance -= levelDistance * levels[ i ].hysteresis;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distance >= levelDistance ) {\n\n\t\t\t\t\tlevels[ i - 1 ].object.visible = false;\n\t\t\t\t\tlevels[ i ].object.visible = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._currentLevel = i - 1;\n\n\t\t\tfor ( ; i < l; i ++ ) {\n\n\t\t\t\tlevels[ i ].object.visible = false;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tif ( this.autoUpdate === false ) data.object.autoUpdate = false;\n\n\t\tdata.object.levels = [];\n\n\t\tconst levels = this.levels;\n\n\t\tfor ( let i = 0, l = levels.length; i < l; i ++ ) {\n\n\t\t\tconst level = levels[ i ];\n\n\t\t\tdata.object.levels.push( {\n\t\t\t\tobject: level.object.uuid,\n\t\t\t\tdistance: level.distance,\n\t\t\t\thysteresis: level.hysteresis\n\t\t\t} );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _basePosition = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\n\nconst _vector3 = /*@__PURE__*/ new Vector3();\nconst _matrix4 = /*@__PURE__*/ new Matrix4();\nconst _vertex = /*@__PURE__*/ new Vector3();\n\nconst _sphere$3 = /*@__PURE__*/ new Sphere();\nconst _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();\nconst _ray$2 = /*@__PURE__*/ new Ray();\n\nclass SkinnedMesh extends Mesh {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkinnedMesh = true;\n\n\t\tthis.type = 'SkinnedMesh';\n\n\t\tthis.bindMode = AttachedBindMode;\n\t\tthis.bindMatrix = new Matrix4();\n\t\tthis.bindMatrixInverse = new Matrix4();\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingBox.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\n\n\t\t\tthis.getVertexPosition( i, _vertex );\n\t\t\tthis.boundingSphere.expandByPoint( _vertex );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.bindMode = source.bindMode;\n\t\tthis.bindMatrix.copy( source.bindMatrix );\n\t\tthis.bindMatrixInverse.copy( source.bindMatrixInverse );\n\n\t\tthis.skeleton = source.skeleton;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst material = this.material;\n\t\tconst matrixWorld = this.matrixWorld;\n\n\t\tif ( material === undefined ) return;\n\n\t\t// test with bounding sphere in world space\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$3.copy( this.boundingSphere );\n\t\t_sphere$3.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$3 ) === false ) return;\n\n\t\t// convert ray to local space of skinned mesh\n\n\t\t_inverseMatrix$2.copy( matrixWorld ).invert();\n\t\t_ray$2.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$2 );\n\n\t\t// test with bounding box in local space\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tif ( _ray$2.intersectsBox( this.boundingBox ) === false ) return;\n\n\t\t}\n\n\t\t// test for intersections with geometry\n\n\t\tthis._computeIntersections( raycaster, intersects, _ray$2 );\n\n\t}\n\n\tgetVertexPosition( index, target ) {\n\n\t\tsuper.getVertexPosition( index, target );\n\n\t\tthis.applyBoneTransform( index, target );\n\n\t\treturn target;\n\n\t}\n\n\tbind( skeleton, bindMatrix ) {\n\n\t\tthis.skeleton = skeleton;\n\n\t\tif ( bindMatrix === undefined ) {\n\n\t\t\tthis.updateMatrixWorld( true );\n\n\t\t\tthis.skeleton.calculateInverses();\n\n\t\t\tbindMatrix = this.matrixWorld;\n\n\t\t}\n\n\t\tthis.bindMatrix.copy( bindMatrix );\n\t\tthis.bindMatrixInverse.copy( bindMatrix ).invert();\n\n\t}\n\n\tpose() {\n\n\t\tthis.skeleton.pose();\n\n\t}\n\n\tnormalizeSkinWeights() {\n\n\t\tconst vector = new Vector4();\n\n\t\tconst skinWeight = this.geometry.attributes.skinWeight;\n\n\t\tfor ( let i = 0, l = skinWeight.count; i < l; i ++ ) {\n\n\t\t\tvector.fromBufferAttribute( skinWeight, i );\n\n\t\t\tconst scale = 1.0 / vector.manhattanLength();\n\n\t\t\tif ( scale !== Infinity ) {\n\n\t\t\t\tvector.multiplyScalar( scale );\n\n\t\t\t} else {\n\n\t\t\t\tvector.set( 1, 0, 0, 0 ); // do something reasonable\n\n\t\t\t}\n\n\t\t\tskinWeight.setXYZW( i, vector.x, vector.y, vector.z, vector.w );\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.bindMode === AttachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.matrixWorld ).invert();\n\n\t\t} else if ( this.bindMode === DetachedBindMode ) {\n\n\t\t\tthis.bindMatrixInverse.copy( this.bindMatrix ).invert();\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.SkinnedMesh: Unrecognized bindMode: ' + this.bindMode );\n\n\t\t}\n\n\t}\n\n\tapplyBoneTransform( index, vector ) {\n\n\t\tconst skeleton = this.skeleton;\n\t\tconst geometry = this.geometry;\n\n\t\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t\t_basePosition.copy( vector ).applyMatrix4( this.bindMatrix );\n\n\t\tvector.set( 0, 0, 0 );\n\n\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\t\tif ( weight !== 0 ) {\n\n\t\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\n\t\t\t\t_matrix4.multiplyMatrices( skeleton.bones[ boneIndex ].matrixWorld, skeleton.boneInverses[ boneIndex ] );\n\n\t\t\t\tvector.addScaledVector( _vector3.copy( _basePosition ).applyMatrix4( _matrix4 ), weight );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn vector.applyMatrix4( this.bindMatrixInverse );\n\n\t}\n\n\tboneTransform( index, vector ) { // @deprecated, r151\n\n\t\tconsole.warn( 'THREE.SkinnedMesh: .boneTransform() was renamed to .applyBoneTransform() in r151.' );\n\t\treturn this.applyBoneTransform( index, vector );\n\n\t}\n\n\n}\n\nclass Bone extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isBone = true;\n\n\t\tthis.type = 'Bone';\n\n\t}\n\n}\n\nclass DataTexture extends Texture {\n\n\tconstructor( data = null, width = 1, height = 1, format, type, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isDataTexture = true;\n\n\t\tthis.image = { data: data, width: width, height: height };\n\n\t\tthis.generateMipmaps = false;\n\t\tthis.flipY = false;\n\t\tthis.unpackAlignment = 1;\n\n\t}\n\n}\n\nconst _offsetMatrix = /*@__PURE__*/ new Matrix4();\nconst _identityMatrix = /*@__PURE__*/ new Matrix4();\n\nclass Skeleton {\n\n\tconstructor( bones = [], boneInverses = [] ) {\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.bones = bones.slice( 0 );\n\t\tthis.boneInverses = boneInverses;\n\t\tthis.boneMatrices = null;\n\n\t\tthis.boneTexture = null;\n\t\tthis.boneTextureSize = 0;\n\n\t\tthis.init();\n\n\t}\n\n\tinit() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tthis.boneMatrices = new Float32Array( bones.length * 16 );\n\n\t\t// calculate inverse bone matrices if necessary\n\n\t\tif ( boneInverses.length === 0 ) {\n\n\t\t\tthis.calculateInverses();\n\n\t\t} else {\n\n\t\t\t// handle special case\n\n\t\t\tif ( bones.length !== boneInverses.length ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.' );\n\n\t\t\t\tthis.boneInverses = [];\n\n\t\t\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\t\t\tthis.boneInverses.push( new Matrix4() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcalculateInverses() {\n\n\t\tthis.boneInverses.length = 0;\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst inverse = new Matrix4();\n\n\t\t\tif ( this.bones[ i ] ) {\n\n\t\t\t\tinverse.copy( this.bones[ i ].matrixWorld ).invert();\n\n\t\t\t}\n\n\t\t\tthis.boneInverses.push( inverse );\n\n\t\t}\n\n\t}\n\n\tpose() {\n\n\t\t// recover the bind-time world matrices\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tbone.matrixWorld.copy( this.boneInverses[ i ] ).invert();\n\n\t\t\t}\n\n\t\t}\n\n\t\t// compute the local matrices, positions, rotations and scales\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone ) {\n\n\t\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t\tbone.matrix.copy( bone.parent.matrixWorld ).invert();\n\t\t\t\t\tbone.matrix.multiply( bone.matrixWorld );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbone.matrix.copy( bone.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\tbone.matrix.decompose( bone.position, bone.quaternion, bone.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdate() {\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\t\tconst boneMatrices = this.boneMatrices;\n\t\tconst boneTexture = this.boneTexture;\n\n\t\t// flatten bone matrices to array\n\n\t\tfor ( let i = 0, il = bones.length; i < il; i ++ ) {\n\n\t\t\t// compute the offset between the current and the original transform\n\n\t\t\tconst matrix = bones[ i ] ? bones[ i ].matrixWorld : _identityMatrix;\n\n\t\t\t_offsetMatrix.multiplyMatrices( matrix, boneInverses[ i ] );\n\t\t\t_offsetMatrix.toArray( boneMatrices, i * 16 );\n\n\t\t}\n\n\t\tif ( boneTexture !== null ) {\n\n\t\t\tboneTexture.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new Skeleton( this.bones, this.boneInverses );\n\n\t}\n\n\tcomputeBoneTexture() {\n\n\t\t// layout (1 matrix = 4 pixels)\n\t\t//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)\n\t\t//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)\n\t\t//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)\n\t\t//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)\n\t\t//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)\n\n\t\tlet size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix\n\t\tsize = ceilPowerOfTwo( size );\n\t\tsize = Math.max( size, 4 );\n\n\t\tconst boneMatrices = new Float32Array( size * size * 4 ); // 4 floats per RGBA pixel\n\t\tboneMatrices.set( this.boneMatrices ); // copy current values\n\n\t\tconst boneTexture = new DataTexture( boneMatrices, size, size, RGBAFormat, FloatType );\n\t\tboneTexture.needsUpdate = true;\n\n\t\tthis.boneMatrices = boneMatrices;\n\t\tthis.boneTexture = boneTexture;\n\t\tthis.boneTextureSize = size;\n\n\t\treturn this;\n\n\t}\n\n\tgetBoneByName( name ) {\n\n\t\tfor ( let i = 0, il = this.bones.length; i < il; i ++ ) {\n\n\t\t\tconst bone = this.bones[ i ];\n\n\t\t\tif ( bone.name === name ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn undefined;\n\n\t}\n\n\tdispose( ) {\n\n\t\tif ( this.boneTexture !== null ) {\n\n\t\t\tthis.boneTexture.dispose();\n\n\t\t\tthis.boneTexture = null;\n\n\t\t}\n\n\t}\n\n\tfromJSON( json, bones ) {\n\n\t\tthis.uuid = json.uuid;\n\n\t\tfor ( let i = 0, l = json.bones.length; i < l; i ++ ) {\n\n\t\t\tconst uuid = json.bones[ i ];\n\t\t\tlet bone = bones[ uuid ];\n\n\t\t\tif ( bone === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.Skeleton: No bone found with UUID:', uuid );\n\t\t\t\tbone = new Bone();\n\n\t\t\t}\n\n\t\t\tthis.bones.push( bone );\n\t\t\tthis.boneInverses.push( new Matrix4().fromArray( json.boneInverses[ i ] ) );\n\n\t\t}\n\n\t\tthis.init();\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Skeleton',\n\t\t\t\tgenerator: 'Skeleton.toJSON'\n\t\t\t},\n\t\t\tbones: [],\n\t\t\tboneInverses: []\n\t\t};\n\n\t\tdata.uuid = this.uuid;\n\n\t\tconst bones = this.bones;\n\t\tconst boneInverses = this.boneInverses;\n\n\t\tfor ( let i = 0, l = bones.length; i < l; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\t\t\tdata.bones.push( bone.uuid );\n\n\t\t\tconst boneInverse = boneInverses[ i ];\n\t\t\tdata.boneInverses.push( boneInverse.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass InstancedBufferAttribute extends BufferAttribute {\n\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, itemSize, normalized );\n\n\t\tthis.isInstancedBufferAttribute = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\n\n\t\tdata.isInstancedBufferAttribute = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nconst _instanceLocalMatrix = /*@__PURE__*/ new Matrix4();\nconst _instanceWorldMatrix = /*@__PURE__*/ new Matrix4();\n\nconst _instanceIntersects = [];\n\nconst _box3 = /*@__PURE__*/ new Box3();\nconst _identity = /*@__PURE__*/ new Matrix4();\nconst _mesh = /*@__PURE__*/ new Mesh();\nconst _sphere$2 = /*@__PURE__*/ new Sphere();\n\nclass InstancedMesh extends Mesh {\n\n\tconstructor( geometry, material, count ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isInstancedMesh = true;\n\n\t\tthis.instanceMatrix = new InstancedBufferAttribute( new Float32Array( count * 16 ), 16 );\n\t\tthis.instanceColor = null;\n\n\t\tthis.count = count;\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.setMatrixAt( i, _identity );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox === null ) {\n\n\t\t\tgeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tthis.boundingBox.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_box3.copy( geometry.boundingBox ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingBox.union( _box3 );\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst count = this.count;\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere === null ) {\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.makeEmpty();\n\n\t\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\t\tthis.getMatrixAt( i, _instanceLocalMatrix );\n\n\t\t\t_sphere$2.copy( geometry.boundingSphere ).applyMatrix4( _instanceLocalMatrix );\n\n\t\t\tthis.boundingSphere.union( _sphere$2 );\n\n\t\t}\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.instanceMatrix.copy( source.instanceMatrix );\n\n\t\tif ( source.instanceColor !== null ) this.instanceColor = source.instanceColor.clone();\n\n\t\tthis.count = source.count;\n\n\t\tif ( source.boundingBox !== null ) this.boundingBox = source.boundingBox.clone();\n\t\tif ( source.boundingSphere !== null ) this.boundingSphere = source.boundingSphere.clone();\n\n\t\treturn this;\n\n\t}\n\n\tgetColorAt( index, color ) {\n\n\t\tcolor.fromArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tgetMatrixAt( index, matrix ) {\n\n\t\tmatrix.fromArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst raycastTimes = this.count;\n\n\t\t_mesh.geometry = this.geometry;\n\t\t_mesh.material = this.material;\n\n\t\tif ( _mesh.material === undefined ) return;\n\n\t\t// test with bounding sphere first\n\n\t\tif ( this.boundingSphere === null ) this.computeBoundingSphere();\n\n\t\t_sphere$2.copy( this.boundingSphere );\n\t\t_sphere$2.applyMatrix4( matrixWorld );\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$2 ) === false ) return;\n\n\t\t// now test each instance\n\n\t\tfor ( let instanceId = 0; instanceId < raycastTimes; instanceId ++ ) {\n\n\t\t\t// calculate the world matrix for each instance\n\n\t\t\tthis.getMatrixAt( instanceId, _instanceLocalMatrix );\n\n\t\t\t_instanceWorldMatrix.multiplyMatrices( matrixWorld, _instanceLocalMatrix );\n\n\t\t\t// the mesh represents this single instance\n\n\t\t\t_mesh.matrixWorld = _instanceWorldMatrix;\n\n\t\t\t_mesh.raycast( raycaster, _instanceIntersects );\n\n\t\t\t// process the result of raycast\n\n\t\t\tfor ( let i = 0, l = _instanceIntersects.length; i < l; i ++ ) {\n\n\t\t\t\tconst intersect = _instanceIntersects[ i ];\n\t\t\t\tintersect.instanceId = instanceId;\n\t\t\t\tintersect.object = this;\n\t\t\t\tintersects.push( intersect );\n\n\t\t\t}\n\n\t\t\t_instanceIntersects.length = 0;\n\n\t\t}\n\n\t}\n\n\tsetColorAt( index, color ) {\n\n\t\tif ( this.instanceColor === null ) {\n\n\t\t\tthis.instanceColor = new InstancedBufferAttribute( new Float32Array( this.instanceMatrix.count * 3 ), 3 );\n\n\t\t}\n\n\t\tcolor.toArray( this.instanceColor.array, index * 3 );\n\n\t}\n\n\tsetMatrixAt( index, matrix ) {\n\n\t\tmatrix.toArray( this.instanceMatrix.array, index * 16 );\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n}\n\nclass LineBasicMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineBasicMaterial = true;\n\n\t\tthis.type = 'LineBasicMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.linewidth = 1;\n\t\tthis.linecap = 'round';\n\t\tthis.linejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.linewidth = source.linewidth;\n\t\tthis.linecap = source.linecap;\n\t\tthis.linejoin = source.linejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _start$1 = /*@__PURE__*/ new Vector3();\nconst _end$1 = /*@__PURE__*/ new Vector3();\nconst _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _ray$1 = /*@__PURE__*/ new Ray();\nconst _sphere$1 = /*@__PURE__*/ new Sphere();\n\nclass Line extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isLine = true;\n\n\t\tthis.type = 'Line';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [ 0 ];\n\n\t\t\tfor ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {\n\n\t\t\t\t_start$1.fromBufferAttribute( positionAttribute, i - 1 );\n\t\t\t\t_end$1.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\tlineDistances[ i ] = lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i ] += _start$1.distanceTo( _end$1 );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Line.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere$1.copy( geometry.boundingSphere );\n\t\t_sphere$1.applyMatrix4( matrixWorld );\n\t\t_sphere$1.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix$1.copy( matrixWorld ).invert();\n\t\t_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst vStart = new Vector3();\n\t\tconst vEnd = new Vector3();\n\t\tconst interSegment = new Vector3();\n\t\tconst interRay = new Vector3();\n\t\tconst step = this.isLineSegments ? 2 : 1;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tconst a = index.getX( i );\n\t\t\t\tconst b = index.getX( i + 1 );\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, a );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, b );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end - 1; i < l; i += step ) {\n\n\t\t\t\tvStart.fromBufferAttribute( positionAttribute, i );\n\t\t\t\tvEnd.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tconst distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );\n\n\t\t\t\tif ( distSq > localThresholdSq ) continue;\n\n\t\t\t\tinterRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation\n\n\t\t\t\tconst distance = raycaster.ray.origin.distanceTo( interRay );\n\n\t\t\t\tif ( distance < raycaster.near || distance > raycaster.far ) continue;\n\n\t\t\t\tintersects.push( {\n\n\t\t\t\t\tdistance: distance,\n\t\t\t\t\t// What do we want? intersection point on the ray or on the segment??\n\t\t\t\t\t// point: raycaster.ray.at( distance ),\n\t\t\t\t\tpoint: interSegment.clone().applyMatrix4( this.matrixWorld ),\n\t\t\t\t\tindex: i,\n\t\t\t\t\tface: null,\n\t\t\t\t\tfaceIndex: null,\n\t\t\t\t\tobject: this\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nconst _start = /*@__PURE__*/ new Vector3();\nconst _end = /*@__PURE__*/ new Vector3();\n\nclass LineSegments extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineSegments = true;\n\n\t\tthis.type = 'LineSegments';\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconst geometry = this.geometry;\n\n\t\t// we assume non-indexed geometry\n\n\t\tif ( geometry.index === null ) {\n\n\t\t\tconst positionAttribute = geometry.attributes.position;\n\t\t\tconst lineDistances = [];\n\n\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {\n\n\t\t\t\t_start.fromBufferAttribute( positionAttribute, i );\n\t\t\t\t_end.fromBufferAttribute( positionAttribute, i + 1 );\n\n\t\t\t\tlineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];\n\t\t\t\tlineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineLoop extends Line {\n\n\tconstructor( geometry, material ) {\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isLineLoop = true;\n\n\t\tthis.type = 'LineLoop';\n\n\t}\n\n}\n\nclass PointsMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isPointsMaterial = true;\n\n\t\tthis.type = 'PointsMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.size = 1;\n\t\tthis.sizeAttenuation = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.size = source.size;\n\t\tthis.sizeAttenuation = source.sizeAttenuation;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\nconst _ray = /*@__PURE__*/ new Ray();\nconst _sphere = /*@__PURE__*/ new Sphere();\nconst _position$2 = /*@__PURE__*/ new Vector3();\n\nclass Points extends Object3D {\n\n\tconstructor( geometry = new BufferGeometry(), material = new PointsMaterial() ) {\n\n\t\tsuper();\n\n\t\tthis.isPoints = true;\n\n\t\tthis.type = 'Points';\n\n\t\tthis.geometry = geometry;\n\t\tthis.material = material;\n\n\t\tthis.updateMorphTargets();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\n\t\tthis.geometry = source.geometry;\n\n\t\treturn this;\n\n\t}\n\n\traycast( raycaster, intersects ) {\n\n\t\tconst geometry = this.geometry;\n\t\tconst matrixWorld = this.matrixWorld;\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst drawRange = geometry.drawRange;\n\n\t\t// Checking boundingSphere distance to ray\n\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\n\n\t\t_sphere.copy( geometry.boundingSphere );\n\t\t_sphere.applyMatrix4( matrixWorld );\n\t\t_sphere.radius += threshold;\n\n\t\tif ( raycaster.ray.intersectsSphere( _sphere ) === false ) return;\n\n\t\t//\n\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\n\n\t\tconst localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst index = geometry.index;\n\t\tconst attributes = geometry.attributes;\n\t\tconst positionAttribute = attributes.position;\n\n\t\tif ( index !== null ) {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, il = end; i < il; i ++ ) {\n\n\t\t\t\tconst a = index.getX( i );\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, a );\n\n\t\t\t\ttestPoint( _position$2, a, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst start = Math.max( 0, drawRange.start );\n\t\t\tconst end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( let i = start, l = end; i < l; i ++ ) {\n\n\t\t\t\t_position$2.fromBufferAttribute( positionAttribute, i );\n\n\t\t\t\ttestPoint( _position$2, i, localThresholdSq, matrixWorld, raycaster, intersects, this );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tupdateMorphTargets() {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst morphAttributes = geometry.morphAttributes;\n\t\tconst keys = Object.keys( morphAttributes );\n\n\t\tif ( keys.length > 0 ) {\n\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\n\n\t\t\tif ( morphAttribute !== undefined ) {\n\n\t\t\t\tthis.morphTargetInfluences = [];\n\t\t\t\tthis.morphTargetDictionary = {};\n\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\n\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\n\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nfunction testPoint( point, index, localThresholdSq, matrixWorld, raycaster, intersects, object ) {\n\n\tconst rayPointDistanceSq = _ray.distanceSqToPoint( point );\n\n\tif ( rayPointDistanceSq < localThresholdSq ) {\n\n\t\tconst intersectPoint = new Vector3();\n\n\t\t_ray.closestPointToPoint( point, intersectPoint );\n\t\tintersectPoint.applyMatrix4( matrixWorld );\n\n\t\tconst distance = raycaster.ray.origin.distanceTo( intersectPoint );\n\n\t\tif ( distance < raycaster.near || distance > raycaster.far ) return;\n\n\t\tintersects.push( {\n\n\t\t\tdistance: distance,\n\t\t\tdistanceToRay: Math.sqrt( rayPointDistanceSq ),\n\t\t\tpoint: intersectPoint,\n\t\t\tindex: index,\n\t\t\tface: null,\n\t\t\tobject: object\n\n\t\t} );\n\n\t}\n\n}\n\nclass VideoTexture extends Texture {\n\n\tconstructor( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isVideoTexture = true;\n\n\t\tthis.minFilter = minFilter !== undefined ? minFilter : LinearFilter;\n\t\tthis.magFilter = magFilter !== undefined ? magFilter : LinearFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tconst scope = this;\n\n\t\tfunction updateVideo() {\n\n\t\t\tscope.needsUpdate = true;\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t\tif ( 'requestVideoFrameCallback' in video ) {\n\n\t\t\tvideo.requestVideoFrameCallback( updateVideo );\n\n\t\t}\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor( this.image ).copy( this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst video = this.image;\n\t\tconst hasVideoFrameCallback = 'requestVideoFrameCallback' in video;\n\n\t\tif ( hasVideoFrameCallback === false && video.readyState >= video.HAVE_CURRENT_DATA ) {\n\n\t\t\tthis.needsUpdate = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass FramebufferTexture extends Texture {\n\n\tconstructor( width, height ) {\n\n\t\tsuper( { width, height } );\n\n\t\tthis.isFramebufferTexture = true;\n\n\t\tthis.magFilter = NearestFilter;\n\t\tthis.minFilter = NearestFilter;\n\n\t\tthis.generateMipmaps = false;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nclass CompressedTexture extends Texture {\n\n\tconstructor( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, colorSpace ) {\n\n\t\tsuper( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\n\n\t\tthis.isCompressedTexture = true;\n\n\t\tthis.image = { width: width, height: height };\n\t\tthis.mipmaps = mipmaps;\n\n\t\t// no flipping for cube textures\n\t\t// (also flipping doesn't work for compressed textures )\n\n\t\tthis.flipY = false;\n\n\t\t// can't generate mipmaps for compressed textures\n\t\t// mips must be embedded in DDS files\n\n\t\tthis.generateMipmaps = false;\n\n\t}\n\n}\n\nclass CompressedArrayTexture extends CompressedTexture {\n\n\tconstructor( mipmaps, width, height, depth, format, type ) {\n\n\t\tsuper( mipmaps, width, height, format, type );\n\n\t\tthis.isCompressedArrayTexture = true;\n\t\tthis.image.depth = depth;\n\t\tthis.wrapR = ClampToEdgeWrapping;\n\n\t}\n\n}\n\nclass CompressedCubeTexture extends CompressedTexture {\n\n\tconstructor( images, format, type ) {\n\n\t\tsuper( undefined, images[ 0 ].width, images[ 0 ].height, format, type, CubeReflectionMapping );\n\n\t\tthis.isCompressedCubeTexture = true;\n\t\tthis.isCubeTexture = true;\n\n\t\tthis.image = images;\n\n\t}\n\n}\n\nclass CanvasTexture extends Texture {\n\n\tconstructor( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {\n\n\t\tsuper( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\n\n\t\tthis.isCanvasTexture = true;\n\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\n/**\n * Extensible curve object.\n *\n * Some common of curve methods:\n * .getPoint( t, optionalTarget ), .getTangent( t, optionalTarget )\n * .getPointAt( u, optionalTarget ), .getTangentAt( u, optionalTarget )\n * .getPoints(), .getSpacedPoints()\n * .getLength()\n * .updateArcLengths()\n *\n * This following curves inherit from THREE.Curve:\n *\n * -- 2D curves --\n * THREE.ArcCurve\n * THREE.CubicBezierCurve\n * THREE.EllipseCurve\n * THREE.LineCurve\n * THREE.QuadraticBezierCurve\n * THREE.SplineCurve\n *\n * -- 3D curves --\n * THREE.CatmullRomCurve3\n * THREE.CubicBezierCurve3\n * THREE.LineCurve3\n * THREE.QuadraticBezierCurve3\n *\n * A series of curves can be represented as a THREE.CurvePath.\n *\n **/\n\nclass Curve {\n\n\tconstructor() {\n\n\t\tthis.type = 'Curve';\n\n\t\tthis.arcLengthDivisions = 200;\n\n\t}\n\n\t// Virtual base class method to overwrite and implement in subclasses\n\t//\t- t [0 .. 1]\n\n\tgetPoint( /* t, optionalTarget */ ) {\n\n\t\tconsole.warn( 'THREE.Curve: .getPoint() not implemented.' );\n\t\treturn null;\n\n\t}\n\n\t// Get point at relative position in curve according to arc length\n\t// - u [0 .. 1]\n\n\tgetPointAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getPoint( t, optionalTarget );\n\n\t}\n\n\t// Get sequence of points using getPoint( t )\n\n\tgetPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPoint( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get sequence of points using getPointAt( u )\n\n\tgetSpacedPoints( divisions = 5 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let d = 0; d <= divisions; d ++ ) {\n\n\t\t\tpoints.push( this.getPointAt( d / divisions ) );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\t// Get total curve arc length\n\n\tgetLength() {\n\n\t\tconst lengths = this.getLengths();\n\t\treturn lengths[ lengths.length - 1 ];\n\n\t}\n\n\t// Get list of cumulative segment lengths\n\n\tgetLengths( divisions = this.arcLengthDivisions ) {\n\n\t\tif ( this.cacheArcLengths &&\n\t\t\t( this.cacheArcLengths.length === divisions + 1 ) &&\n\t\t\t! this.needsUpdate ) {\n\n\t\t\treturn this.cacheArcLengths;\n\n\t\t}\n\n\t\tthis.needsUpdate = false;\n\n\t\tconst cache = [];\n\t\tlet current, last = this.getPoint( 0 );\n\t\tlet sum = 0;\n\n\t\tcache.push( 0 );\n\n\t\tfor ( let p = 1; p <= divisions; p ++ ) {\n\n\t\t\tcurrent = this.getPoint( p / divisions );\n\t\t\tsum += current.distanceTo( last );\n\t\t\tcache.push( sum );\n\t\t\tlast = current;\n\n\t\t}\n\n\t\tthis.cacheArcLengths = cache;\n\n\t\treturn cache; // { sums: cache, sum: sum }; Sum is in the last element.\n\n\t}\n\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.getLengths();\n\n\t}\n\n\t// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant\n\n\tgetUtoTmapping( u, distance ) {\n\n\t\tconst arcLengths = this.getLengths();\n\n\t\tlet i = 0;\n\t\tconst il = arcLengths.length;\n\n\t\tlet targetArcLength; // The targeted u distance value to get\n\n\t\tif ( distance ) {\n\n\t\t\ttargetArcLength = distance;\n\n\t\t} else {\n\n\t\t\ttargetArcLength = u * arcLengths[ il - 1 ];\n\n\t\t}\n\n\t\t// binary search for the index with largest value smaller than target u distance\n\n\t\tlet low = 0, high = il - 1, comparison;\n\n\t\twhile ( low <= high ) {\n\n\t\t\ti = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n\n\t\t\tcomparison = arcLengths[ i ] - targetArcLength;\n\n\t\t\tif ( comparison < 0 ) {\n\n\t\t\t\tlow = i + 1;\n\n\t\t\t} else if ( comparison > 0 ) {\n\n\t\t\t\thigh = i - 1;\n\n\t\t\t} else {\n\n\t\t\t\thigh = i;\n\t\t\t\tbreak;\n\n\t\t\t\t// DONE\n\n\t\t\t}\n\n\t\t}\n\n\t\ti = high;\n\n\t\tif ( arcLengths[ i ] === targetArcLength ) {\n\n\t\t\treturn i / ( il - 1 );\n\n\t\t}\n\n\t\t// we could get finer grain at lengths, or use simple interpolation between two points\n\n\t\tconst lengthBefore = arcLengths[ i ];\n\t\tconst lengthAfter = arcLengths[ i + 1 ];\n\n\t\tconst segmentLength = lengthAfter - lengthBefore;\n\n\t\t// determine where we are between the 'before' and 'after' points\n\n\t\tconst segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n\n\t\t// add that fractional amount to t\n\n\t\tconst t = ( i + segmentFraction ) / ( il - 1 );\n\n\t\treturn t;\n\n\t}\n\n\t// Returns a unit vector tangent at t\n\t// In case any sub curve does not implement its tangent derivation,\n\t// 2 points a small delta apart will be used to find its gradient\n\t// which seems to give a reasonable approximation\n\n\tgetTangent( t, optionalTarget ) {\n\n\t\tconst delta = 0.0001;\n\t\tlet t1 = t - delta;\n\t\tlet t2 = t + delta;\n\n\t\t// Capping in case of danger\n\n\t\tif ( t1 < 0 ) t1 = 0;\n\t\tif ( t2 > 1 ) t2 = 1;\n\n\t\tconst pt1 = this.getPoint( t1 );\n\t\tconst pt2 = this.getPoint( t2 );\n\n\t\tconst tangent = optionalTarget || ( ( pt1.isVector2 ) ? new Vector2() : new Vector3() );\n\n\t\ttangent.copy( pt2 ).sub( pt1 ).normalize();\n\n\t\treturn tangent;\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\tconst t = this.getUtoTmapping( u );\n\t\treturn this.getTangent( t, optionalTarget );\n\n\t}\n\n\tcomputeFrenetFrames( segments, closed ) {\n\n\t\t// see http://www.cs.indiana.edu/pub/techreports/TR425.pdf\n\n\t\tconst normal = new Vector3();\n\n\t\tconst tangents = [];\n\t\tconst normals = [];\n\t\tconst binormals = [];\n\n\t\tconst vec = new Vector3();\n\t\tconst mat = new Matrix4();\n\n\t\t// compute the tangent vectors for each segment on the curve\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst u = i / segments;\n\n\t\t\ttangents[ i ] = this.getTangentAt( u, new Vector3() );\n\n\t\t}\n\n\t\t// select an initial normal vector perpendicular to the first tangent vector,\n\t\t// and in the direction of the minimum tangent xyz component\n\n\t\tnormals[ 0 ] = new Vector3();\n\t\tbinormals[ 0 ] = new Vector3();\n\t\tlet min = Number.MAX_VALUE;\n\t\tconst tx = Math.abs( tangents[ 0 ].x );\n\t\tconst ty = Math.abs( tangents[ 0 ].y );\n\t\tconst tz = Math.abs( tangents[ 0 ].z );\n\n\t\tif ( tx <= min ) {\n\n\t\t\tmin = tx;\n\t\t\tnormal.set( 1, 0, 0 );\n\n\t\t}\n\n\t\tif ( ty <= min ) {\n\n\t\t\tmin = ty;\n\t\t\tnormal.set( 0, 1, 0 );\n\n\t\t}\n\n\t\tif ( tz <= min ) {\n\n\t\t\tnormal.set( 0, 0, 1 );\n\n\t\t}\n\n\t\tvec.crossVectors( tangents[ 0 ], normal ).normalize();\n\n\t\tnormals[ 0 ].crossVectors( tangents[ 0 ], vec );\n\t\tbinormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );\n\n\n\t\t// compute the slowly-varying normal and binormal vectors for each segment on the curve\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tnormals[ i ] = normals[ i - 1 ].clone();\n\n\t\t\tbinormals[ i ] = binormals[ i - 1 ].clone();\n\n\t\t\tvec.crossVectors( tangents[ i - 1 ], tangents[ i ] );\n\n\t\t\tif ( vec.length() > Number.EPSILON ) {\n\n\t\t\t\tvec.normalize();\n\n\t\t\t\tconst theta = Math.acos( clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors\n\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );\n\n\t\t\t}\n\n\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t}\n\n\t\t// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same\n\n\t\tif ( closed === true ) {\n\n\t\t\tlet theta = Math.acos( clamp( normals[ 0 ].dot( normals[ segments ] ), - 1, 1 ) );\n\t\t\ttheta /= segments;\n\n\t\t\tif ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ segments ] ) ) > 0 ) {\n\n\t\t\t\ttheta = - theta;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\t\t// twist a little...\n\t\t\t\tnormals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );\n\t\t\t\tbinormals[ i ].crossVectors( tangents[ i ], normals[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\ttangents: tangents,\n\t\t\tnormals: normals,\n\t\t\tbinormals: binormals\n\t\t};\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.arcLengthDivisions = source.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.6,\n\t\t\t\ttype: 'Curve',\n\t\t\t\tgenerator: 'Curve.toJSON'\n\t\t\t}\n\t\t};\n\n\t\tdata.arcLengthDivisions = this.arcLengthDivisions;\n\t\tdata.type = this.type;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.arcLengthDivisions = json.arcLengthDivisions;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass EllipseCurve extends Curve {\n\n\tconstructor( aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.isEllipseCurve = true;\n\n\t\tthis.type = 'EllipseCurve';\n\n\t\tthis.aX = aX;\n\t\tthis.aY = aY;\n\n\t\tthis.xRadius = xRadius;\n\t\tthis.yRadius = yRadius;\n\n\t\tthis.aStartAngle = aStartAngle;\n\t\tthis.aEndAngle = aEndAngle;\n\n\t\tthis.aClockwise = aClockwise;\n\n\t\tthis.aRotation = aRotation;\n\n\t}\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst point = optionalTarget || new Vector2();\n\n\t\tconst twoPi = Math.PI * 2;\n\t\tlet deltaAngle = this.aEndAngle - this.aStartAngle;\n\t\tconst samePoints = Math.abs( deltaAngle ) < Number.EPSILON;\n\n\t\t// ensures that deltaAngle is 0 .. 2 PI\n\t\twhile ( deltaAngle < 0 ) deltaAngle += twoPi;\n\t\twhile ( deltaAngle > twoPi ) deltaAngle -= twoPi;\n\n\t\tif ( deltaAngle < Number.EPSILON ) {\n\n\t\t\tif ( samePoints ) {\n\n\t\t\t\tdeltaAngle = 0;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.aClockwise === true && ! samePoints ) {\n\n\t\t\tif ( deltaAngle === twoPi ) {\n\n\t\t\t\tdeltaAngle = - twoPi;\n\n\t\t\t} else {\n\n\t\t\t\tdeltaAngle = deltaAngle - twoPi;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst angle = this.aStartAngle + t * deltaAngle;\n\t\tlet x = this.aX + this.xRadius * Math.cos( angle );\n\t\tlet y = this.aY + this.yRadius * Math.sin( angle );\n\n\t\tif ( this.aRotation !== 0 ) {\n\n\t\t\tconst cos = Math.cos( this.aRotation );\n\t\t\tconst sin = Math.sin( this.aRotation );\n\n\t\t\tconst tx = x - this.aX;\n\t\t\tconst ty = y - this.aY;\n\n\t\t\t// Rotate the point about the center of the ellipse.\n\t\t\tx = tx * cos - ty * sin + this.aX;\n\t\t\ty = tx * sin + ty * cos + this.aY;\n\n\t\t}\n\n\t\treturn point.set( x, y );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.aX = source.aX;\n\t\tthis.aY = source.aY;\n\n\t\tthis.xRadius = source.xRadius;\n\t\tthis.yRadius = source.yRadius;\n\n\t\tthis.aStartAngle = source.aStartAngle;\n\t\tthis.aEndAngle = source.aEndAngle;\n\n\t\tthis.aClockwise = source.aClockwise;\n\n\t\tthis.aRotation = source.aRotation;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.aX = this.aX;\n\t\tdata.aY = this.aY;\n\n\t\tdata.xRadius = this.xRadius;\n\t\tdata.yRadius = this.yRadius;\n\n\t\tdata.aStartAngle = this.aStartAngle;\n\t\tdata.aEndAngle = this.aEndAngle;\n\n\t\tdata.aClockwise = this.aClockwise;\n\n\t\tdata.aRotation = this.aRotation;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.aX = json.aX;\n\t\tthis.aY = json.aY;\n\n\t\tthis.xRadius = json.xRadius;\n\t\tthis.yRadius = json.yRadius;\n\n\t\tthis.aStartAngle = json.aStartAngle;\n\t\tthis.aEndAngle = json.aEndAngle;\n\n\t\tthis.aClockwise = json.aClockwise;\n\n\t\tthis.aRotation = json.aRotation;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass ArcCurve extends EllipseCurve {\n\n\tconstructor( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tsuper( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\tthis.isArcCurve = true;\n\n\t\tthis.type = 'ArcCurve';\n\n\t}\n\n}\n\n/**\n * Centripetal CatmullRom Curve - which is useful for avoiding\n * cusps and self-intersections in non-uniform catmull rom curves.\n * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf\n *\n * curve.type accepts centripetal(default), chordal and catmullrom\n * curve.tension is used for catmullrom which defaults to 0.5\n */\n\n\n/*\nBased on an optimized c++ solution in\n - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/\n - http://ideone.com/NoEbVM\n\nThis CubicPoly class could be used for reusing some variables and calculations,\nbut for three.js curve use, it could be possible inlined and flatten into a single function call\nwhich can be placed in CurveUtils.\n*/\n\nfunction CubicPoly() {\n\n\tlet c0 = 0, c1 = 0, c2 = 0, c3 = 0;\n\n\t/*\n\t * Compute coefficients for a cubic polynomial\n\t *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3\n\t * such that\n\t *   p(0) = x0, p(1) = x1\n\t *  and\n\t *   p'(0) = t0, p'(1) = t1.\n\t */\n\tfunction init( x0, x1, t0, t1 ) {\n\n\t\tc0 = x0;\n\t\tc1 = t0;\n\t\tc2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;\n\t\tc3 = 2 * x0 - 2 * x1 + t0 + t1;\n\n\t}\n\n\treturn {\n\n\t\tinitCatmullRom: function ( x0, x1, x2, x3, tension ) {\n\n\t\t\tinit( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );\n\n\t\t},\n\n\t\tinitNonuniformCatmullRom: function ( x0, x1, x2, x3, dt0, dt1, dt2 ) {\n\n\t\t\t// compute tangents when parameterized in [t1,t2]\n\t\t\tlet t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;\n\t\t\tlet t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;\n\n\t\t\t// rescale tangents for parametrization in [0,1]\n\t\t\tt1 *= dt1;\n\t\t\tt2 *= dt1;\n\n\t\t\tinit( x1, x2, t1, t2 );\n\n\t\t},\n\n\t\tcalc: function ( t ) {\n\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t2 * t;\n\t\t\treturn c0 + c1 * t + c2 * t2 + c3 * t3;\n\n\t\t}\n\n\t};\n\n}\n\n//\n\nconst tmp = /*@__PURE__*/ new Vector3();\nconst px = /*@__PURE__*/ new CubicPoly();\nconst py = /*@__PURE__*/ new CubicPoly();\nconst pz = /*@__PURE__*/ new CubicPoly();\n\nclass CatmullRomCurve3 extends Curve {\n\n\tconstructor( points = [], closed = false, curveType = 'centripetal', tension = 0.5 ) {\n\n\t\tsuper();\n\n\t\tthis.isCatmullRomCurve3 = true;\n\n\t\tthis.type = 'CatmullRomCurve3';\n\n\t\tthis.points = points;\n\t\tthis.closed = closed;\n\t\tthis.curveType = curveType;\n\t\tthis.tension = tension;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst l = points.length;\n\n\t\tconst p = ( l - ( this.closed ? 0 : 1 ) ) * t;\n\t\tlet intPoint = Math.floor( p );\n\t\tlet weight = p - intPoint;\n\n\t\tif ( this.closed ) {\n\n\t\t\tintPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / l ) + 1 ) * l;\n\n\t\t} else if ( weight === 0 && intPoint === l - 1 ) {\n\n\t\t\tintPoint = l - 2;\n\t\t\tweight = 1;\n\n\t\t}\n\n\t\tlet p0, p3; // 4 points (p1 & p2 defined below)\n\n\t\tif ( this.closed || intPoint > 0 ) {\n\n\t\t\tp0 = points[ ( intPoint - 1 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate first point\n\t\t\ttmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );\n\t\t\tp0 = tmp;\n\n\t\t}\n\n\t\tconst p1 = points[ intPoint % l ];\n\t\tconst p2 = points[ ( intPoint + 1 ) % l ];\n\n\t\tif ( this.closed || intPoint + 2 < l ) {\n\n\t\t\tp3 = points[ ( intPoint + 2 ) % l ];\n\n\t\t} else {\n\n\t\t\t// extrapolate last point\n\t\t\ttmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 1 ] );\n\t\t\tp3 = tmp;\n\n\t\t}\n\n\t\tif ( this.curveType === 'centripetal' || this.curveType === 'chordal' ) {\n\n\t\t\t// init Centripetal / Chordal Catmull-Rom\n\t\t\tconst pow = this.curveType === 'chordal' ? 0.5 : 0.25;\n\t\t\tlet dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );\n\t\t\tlet dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );\n\t\t\tlet dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );\n\n\t\t\t// safety check for repeated points\n\t\t\tif ( dt1 < 1e-4 ) dt1 = 1.0;\n\t\t\tif ( dt0 < 1e-4 ) dt0 = dt1;\n\t\t\tif ( dt2 < 1e-4 ) dt2 = dt1;\n\n\t\t\tpx.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );\n\t\t\tpy.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );\n\t\t\tpz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );\n\n\t\t} else if ( this.curveType === 'catmullrom' ) {\n\n\t\t\tpx.initCatmullRom( p0.x, p1.x, p2.x, p3.x, this.tension );\n\t\t\tpy.initCatmullRom( p0.y, p1.y, p2.y, p3.y, this.tension );\n\t\t\tpz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, this.tension );\n\n\t\t}\n\n\t\tpoint.set(\n\t\t\tpx.calc( weight ),\n\t\t\tpy.calc( weight ),\n\t\t\tpz.calc( weight )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\tthis.closed = source.closed;\n\t\tthis.curveType = source.curveType;\n\t\tthis.tension = source.tension;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\tdata.closed = this.closed;\n\t\tdata.curveType = this.curveType;\n\t\tdata.tension = this.tension;\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector3().fromArray( point ) );\n\n\t\t}\n\n\t\tthis.closed = json.closed;\n\t\tthis.curveType = json.curveType;\n\t\tthis.tension = json.tension;\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Bezier Curves formulas obtained from\n * https://en.wikipedia.org/wiki/B%C3%A9zier_curve\n */\n\nfunction CatmullRom( t, p0, p1, p2, p3 ) {\n\n\tconst v0 = ( p2 - p0 ) * 0.5;\n\tconst v1 = ( p3 - p1 ) * 0.5;\n\tconst t2 = t * t;\n\tconst t3 = t * t2;\n\treturn ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;\n\n}\n\n//\n\nfunction QuadraticBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * p;\n\n}\n\nfunction QuadraticBezierP1( t, p ) {\n\n\treturn 2 * ( 1 - t ) * t * p;\n\n}\n\nfunction QuadraticBezierP2( t, p ) {\n\n\treturn t * t * p;\n\n}\n\nfunction QuadraticBezier( t, p0, p1, p2 ) {\n\n\treturn QuadraticBezierP0( t, p0 ) + QuadraticBezierP1( t, p1 ) +\n\t\tQuadraticBezierP2( t, p2 );\n\n}\n\n//\n\nfunction CubicBezierP0( t, p ) {\n\n\tconst k = 1 - t;\n\treturn k * k * k * p;\n\n}\n\nfunction CubicBezierP1( t, p ) {\n\n\tconst k = 1 - t;\n\treturn 3 * k * k * t * p;\n\n}\n\nfunction CubicBezierP2( t, p ) {\n\n\treturn 3 * ( 1 - t ) * t * t * p;\n\n}\n\nfunction CubicBezierP3( t, p ) {\n\n\treturn t * t * t * p;\n\n}\n\nfunction CubicBezier( t, p0, p1, p2, p3 ) {\n\n\treturn CubicBezierP0( t, p0 ) + CubicBezierP1( t, p1 ) + CubicBezierP2( t, p2 ) +\n\t\tCubicBezierP3( t, p3 );\n\n}\n\nclass CubicBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2(), v3 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve = true;\n\n\t\tthis.type = 'CubicBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass CubicBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3(), v3 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isCubicBezierCurve3 = true;\n\n\t\tthis.type = 'CubicBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\t\tthis.v3 = v3;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2, v3 = this.v3;\n\n\t\tpoint.set(\n\t\t\tCubicBezier( t, v0.x, v1.x, v2.x, v3.x ),\n\t\t\tCubicBezier( t, v0.y, v1.y, v2.y, v3.y ),\n\t\t\tCubicBezier( t, v0.z, v1.z, v2.z, v3.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\t\tthis.v3.copy( source.v3 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\t\tdata.v3 = this.v3.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\t\tthis.v3.fromArray( json.v3 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve extends Curve {\n\n\tconstructor( v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve = true;\n\n\t\tthis.type = 'LineCurve';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector2() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineCurve3 extends Curve {\n\n\tconstructor( v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isLineCurve3 = true;\n\n\t\tthis.type = 'LineCurve3';\n\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tif ( t === 1 ) {\n\n\t\t\tpoint.copy( this.v2 );\n\n\t\t} else {\n\n\t\t\tpoint.copy( this.v2 ).sub( this.v1 );\n\t\t\tpoint.multiplyScalar( t ).add( this.v1 );\n\n\t\t}\n\n\t\treturn point;\n\n\t}\n\t// Line curve is linear, so we can overwrite default getPointAt\n\tgetPointAt( u, optionalTarget ) {\n\n\t\treturn this.getPoint( u, optionalTarget );\n\n\t}\n\n\tgetTangent( t, optionalTarget = new Vector3() ) {\n\n\t\treturn optionalTarget.subVectors( this.v2, this.v1 ).normalize();\n\n\t}\n\n\tgetTangentAt( u, optionalTarget ) {\n\n\t\treturn this.getTangent( u, optionalTarget );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve extends Curve {\n\n\tconstructor( v0 = new Vector2(), v1 = new Vector2(), v2 = new Vector2() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve = true;\n\n\t\tthis.type = 'QuadraticBezierCurve';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass QuadraticBezierCurve3 extends Curve {\n\n\tconstructor( v0 = new Vector3(), v1 = new Vector3(), v2 = new Vector3() ) {\n\n\t\tsuper();\n\n\t\tthis.isQuadraticBezierCurve3 = true;\n\n\t\tthis.type = 'QuadraticBezierCurve3';\n\n\t\tthis.v0 = v0;\n\t\tthis.v1 = v1;\n\t\tthis.v2 = v2;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector3() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst v0 = this.v0, v1 = this.v1, v2 = this.v2;\n\n\t\tpoint.set(\n\t\t\tQuadraticBezier( t, v0.x, v1.x, v2.x ),\n\t\t\tQuadraticBezier( t, v0.y, v1.y, v2.y ),\n\t\t\tQuadraticBezier( t, v0.z, v1.z, v2.z )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.v0.copy( source.v0 );\n\t\tthis.v1.copy( source.v1 );\n\t\tthis.v2.copy( source.v2 );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.v0 = this.v0.toArray();\n\t\tdata.v1 = this.v1.toArray();\n\t\tdata.v2 = this.v2.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.v0.fromArray( json.v0 );\n\t\tthis.v1.fromArray( json.v1 );\n\t\tthis.v2.fromArray( json.v2 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SplineCurve extends Curve {\n\n\tconstructor( points = [] ) {\n\n\t\tsuper();\n\n\t\tthis.isSplineCurve = true;\n\n\t\tthis.type = 'SplineCurve';\n\n\t\tthis.points = points;\n\n\t}\n\n\tgetPoint( t, optionalTarget = new Vector2() ) {\n\n\t\tconst point = optionalTarget;\n\n\t\tconst points = this.points;\n\t\tconst p = ( points.length - 1 ) * t;\n\n\t\tconst intPoint = Math.floor( p );\n\t\tconst weight = p - intPoint;\n\n\t\tconst p0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];\n\t\tconst p1 = points[ intPoint ];\n\t\tconst p2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];\n\t\tconst p3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];\n\n\t\tpoint.set(\n\t\t\tCatmullRom( weight, p0.x, p1.x, p2.x, p3.x ),\n\t\t\tCatmullRom( weight, p0.y, p1.y, p2.y, p3.y )\n\t\t);\n\n\t\treturn point;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = source.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = source.points[ i ];\n\n\t\t\tthis.points.push( point.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.points = [];\n\n\t\tfor ( let i = 0, l = this.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = this.points[ i ];\n\t\t\tdata.points.push( point.toArray() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.points = [];\n\n\t\tfor ( let i = 0, l = json.points.length; i < l; i ++ ) {\n\n\t\t\tconst point = json.points[ i ];\n\t\t\tthis.points.push( new Vector2().fromArray( point ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nvar Curves = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tArcCurve: ArcCurve,\n\tCatmullRomCurve3: CatmullRomCurve3,\n\tCubicBezierCurve: CubicBezierCurve,\n\tCubicBezierCurve3: CubicBezierCurve3,\n\tEllipseCurve: EllipseCurve,\n\tLineCurve: LineCurve,\n\tLineCurve3: LineCurve3,\n\tQuadraticBezierCurve: QuadraticBezierCurve,\n\tQuadraticBezierCurve3: QuadraticBezierCurve3,\n\tSplineCurve: SplineCurve\n});\n\n/**************************************************************\n *\tCurved Path - a curve path is simply a array of connected\n *  curves, but retains the api of a curve\n **************************************************************/\n\nclass CurvePath extends Curve {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'CurvePath';\n\n\t\tthis.curves = [];\n\t\tthis.autoClose = false; // Automatically closes the path\n\n\t}\n\n\tadd( curve ) {\n\n\t\tthis.curves.push( curve );\n\n\t}\n\n\tclosePath() {\n\n\t\t// Add a line curve if start and end of lines are not connected\n\t\tconst startPoint = this.curves[ 0 ].getPoint( 0 );\n\t\tconst endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );\n\n\t\tif ( ! startPoint.equals( endPoint ) ) {\n\n\t\t\tconst lineType = ( startPoint.isVector2 === true ) ? 'LineCurve' : 'LineCurve3';\n\t\t\tthis.curves.push( new Curves[ lineType ]( endPoint, startPoint ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// To get accurate point with reference to\n\t// entire path distance at time t,\n\t// following has to be done:\n\n\t// 1. Length of each sub path have to be known\n\t// 2. Locate and identify type of curve\n\t// 3. Get t for the curve\n\t// 4. Return curve.getPointAt(t')\n\n\tgetPoint( t, optionalTarget ) {\n\n\t\tconst d = t * this.getLength();\n\t\tconst curveLengths = this.getCurveLengths();\n\t\tlet i = 0;\n\n\t\t// To think about boundaries points.\n\n\t\twhile ( i < curveLengths.length ) {\n\n\t\t\tif ( curveLengths[ i ] >= d ) {\n\n\t\t\t\tconst diff = curveLengths[ i ] - d;\n\t\t\t\tconst curve = this.curves[ i ];\n\n\t\t\t\tconst segmentLength = curve.getLength();\n\t\t\t\tconst u = segmentLength === 0 ? 0 : 1 - diff / segmentLength;\n\n\t\t\t\treturn curve.getPointAt( u, optionalTarget );\n\n\t\t\t}\n\n\t\t\ti ++;\n\n\t\t}\n\n\t\treturn null;\n\n\t\t// loop where sum != 0, sum > d , sum+1 <d\n\n\t}\n\n\t// We cannot use the default THREE.Curve getPoint() with getLength() because in\n\t// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath\n\t// getPoint() depends on getLength\n\n\tgetLength() {\n\n\t\tconst lens = this.getCurveLengths();\n\t\treturn lens[ lens.length - 1 ];\n\n\t}\n\n\t// cacheLengths must be recalculated.\n\tupdateArcLengths() {\n\n\t\tthis.needsUpdate = true;\n\t\tthis.cacheLengths = null;\n\t\tthis.getCurveLengths();\n\n\t}\n\n\t// Compute lengths and cache them\n\t// We cannot overwrite getLengths() because UtoT mapping uses it.\n\n\tgetCurveLengths() {\n\n\t\t// We use cache values if curves and cache array are same length\n\n\t\tif ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {\n\n\t\t\treturn this.cacheLengths;\n\n\t\t}\n\n\t\t// Get length of sub-curve\n\t\t// Push sums into cached array\n\n\t\tconst lengths = [];\n\t\tlet sums = 0;\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tsums += this.curves[ i ].getLength();\n\t\t\tlengths.push( sums );\n\n\t\t}\n\n\t\tthis.cacheLengths = lengths;\n\n\t\treturn lengths;\n\n\t}\n\n\tgetSpacedPoints( divisions = 40 ) {\n\n\t\tconst points = [];\n\n\t\tfor ( let i = 0; i <= divisions; i ++ ) {\n\n\t\t\tpoints.push( this.getPoint( i / divisions ) );\n\n\t\t}\n\n\t\tif ( this.autoClose ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tgetPoints( divisions = 12 ) {\n\n\t\tconst points = [];\n\t\tlet last;\n\n\t\tfor ( let i = 0, curves = this.curves; i < curves.length; i ++ ) {\n\n\t\t\tconst curve = curves[ i ];\n\t\t\tconst resolution = curve.isEllipseCurve ? divisions * 2\n\t\t\t\t: ( curve.isLineCurve || curve.isLineCurve3 ) ? 1\n\t\t\t\t\t: curve.isSplineCurve ? divisions * curve.points.length\n\t\t\t\t\t\t: divisions;\n\n\t\t\tconst pts = curve.getPoints( resolution );\n\n\t\t\tfor ( let j = 0; j < pts.length; j ++ ) {\n\n\t\t\t\tconst point = pts[ j ];\n\n\t\t\t\tif ( last && last.equals( point ) ) continue; // ensures no consecutive points are duplicates\n\n\t\t\t\tpoints.push( point );\n\t\t\t\tlast = point;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.autoClose && points.length > 1 && ! points[ points.length - 1 ].equals( points[ 0 ] ) ) {\n\n\t\t\tpoints.push( points[ 0 ] );\n\n\t\t}\n\n\t\treturn points;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = source.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = source.curves[ i ];\n\n\t\t\tthis.curves.push( curve.clone() );\n\n\t\t}\n\n\t\tthis.autoClose = source.autoClose;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.autoClose = this.autoClose;\n\t\tdata.curves = [];\n\n\t\tfor ( let i = 0, l = this.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = this.curves[ i ];\n\t\t\tdata.curves.push( curve.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.autoClose = json.autoClose;\n\t\tthis.curves = [];\n\n\t\tfor ( let i = 0, l = json.curves.length; i < l; i ++ ) {\n\n\t\t\tconst curve = json.curves[ i ];\n\t\t\tthis.curves.push( new Curves[ curve.type ]().fromJSON( curve ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Path extends CurvePath {\n\n\tconstructor( points ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Path';\n\n\t\tthis.currentPoint = new Vector2();\n\n\t\tif ( points ) {\n\n\t\t\tthis.setFromPoints( points );\n\n\t\t}\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.moveTo( points[ 0 ].x, points[ 0 ].y );\n\n\t\tfor ( let i = 1, l = points.length; i < l; i ++ ) {\n\n\t\t\tthis.lineTo( points[ i ].x, points[ i ].y );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPoint.set( x, y ); // TODO consider referencing vectors instead of copying?\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tconst curve = new LineCurve( this.currentPoint.clone(), new Vector2( x, y ) );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tconst curve = new QuadraticBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCPx, aCPy ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tconst curve = new CubicBezierCurve(\n\t\t\tthis.currentPoint.clone(),\n\t\t\tnew Vector2( aCP1x, aCP1y ),\n\t\t\tnew Vector2( aCP2x, aCP2y ),\n\t\t\tnew Vector2( aX, aY )\n\t\t);\n\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.set( aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts /*Array of Vector*/ ) {\n\n\t\tconst npts = [ this.currentPoint.clone() ].concat( pts );\n\n\t\tconst curve = new SplineCurve( npts );\n\t\tthis.curves.push( curve );\n\n\t\tthis.currentPoint.copy( pts[ pts.length - 1 ] );\n\n\t\treturn this;\n\n\t}\n\n\tarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absarc( aX + x0, aY + y0, aRadius,\n\t\t\taStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tabsarc( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {\n\n\t\tthis.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );\n\n\t\treturn this;\n\n\t}\n\n\tellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst x0 = this.currentPoint.x;\n\t\tconst y0 = this.currentPoint.y;\n\n\t\tthis.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\treturn this;\n\n\t}\n\n\tabsellipse( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {\n\n\t\tconst curve = new EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );\n\n\t\tif ( this.curves.length > 0 ) {\n\n\t\t\t// if a previous curve is present, attempt to join\n\t\t\tconst firstPoint = curve.getPoint( 0 );\n\n\t\t\tif ( ! firstPoint.equals( this.currentPoint ) ) {\n\n\t\t\t\tthis.lineTo( firstPoint.x, firstPoint.y );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.curves.push( curve );\n\n\t\tconst lastPoint = curve.getPoint( 1 );\n\t\tthis.currentPoint.copy( lastPoint );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.currentPoint.copy( source.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.currentPoint = this.currentPoint.toArray();\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.currentPoint.fromArray( json.currentPoint );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LatheGeometry extends BufferGeometry {\n\n\tconstructor( points = [ new Vector2( 0, - 0.5 ), new Vector2( 0.5, 0 ), new Vector2( 0, 0.5 ) ], segments = 12, phiStart = 0, phiLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'LatheGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpoints: points,\n\t\t\tsegments: segments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength\n\t\t};\n\n\t\tsegments = Math.floor( segments );\n\n\t\t// clamp phiLength so it's in range of [ 0, 2PI ]\n\n\t\tphiLength = clamp( phiLength, 0, Math.PI * 2 );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst uvs = [];\n\t\tconst initNormals = [];\n\t\tconst normals = [];\n\n\t\t// helper variables\n\n\t\tconst inverseSegments = 1.0 / segments;\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tconst normal = new Vector3();\n\t\tconst curNormal = new Vector3();\n\t\tconst prevNormal = new Vector3();\n\t\tlet dx = 0;\n\t\tlet dy = 0;\n\n\t\t// pre-compute normals for initial \"meridian\"\n\n\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\tswitch ( j ) {\n\n\t\t\t\tcase 0:\t\t\t\t// special handling for 1st vertex on path\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tprevNormal.copy( normal );\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase ( points.length - 1 ):\t// special handling for last Vertex on path\n\n\t\t\t\t\tinitNormals.push( prevNormal.x, prevNormal.y, prevNormal.z );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\t\t\t// default handling for all vertices in between\n\n\t\t\t\t\tdx = points[ j + 1 ].x - points[ j ].x;\n\t\t\t\t\tdy = points[ j + 1 ].y - points[ j ].y;\n\n\t\t\t\t\tnormal.x = dy * 1.0;\n\t\t\t\t\tnormal.y = - dx;\n\t\t\t\t\tnormal.z = dy * 0.0;\n\n\t\t\t\t\tcurNormal.copy( normal );\n\n\t\t\t\t\tnormal.x += prevNormal.x;\n\t\t\t\t\tnormal.y += prevNormal.y;\n\t\t\t\t\tnormal.z += prevNormal.z;\n\n\t\t\t\t\tnormal.normalize();\n\n\t\t\t\t\tinitNormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\tprevNormal.copy( curNormal );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate vertices, uvs and normals\n\n\t\tfor ( let i = 0; i <= segments; i ++ ) {\n\n\t\t\tconst phi = phiStart + i * inverseSegments * phiLength;\n\n\t\t\tconst sin = Math.sin( phi );\n\t\t\tconst cos = Math.cos( phi );\n\n\t\t\tfor ( let j = 0; j <= ( points.length - 1 ); j ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = points[ j ].x * sin;\n\t\t\t\tvertex.y = points[ j ].y;\n\t\t\t\tvertex.z = points[ j ].x * cos;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = i / segments;\n\t\t\t\tuv.y = j / ( points.length - 1 );\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// normal\n\n\t\t\t\tconst x = initNormals[ 3 * j + 0 ] * sin;\n\t\t\t\tconst y = initNormals[ 3 * j + 1 ];\n\t\t\t\tconst z = initNormals[ 3 * j + 0 ] * cos;\n\n\t\t\t\tnormals.push( x, y, z );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 0; i < segments; i ++ ) {\n\n\t\t\tfor ( let j = 0; j < ( points.length - 1 ); j ++ ) {\n\n\t\t\t\tconst base = j + i * points.length;\n\n\t\t\t\tconst a = base;\n\t\t\t\tconst b = base + points.length;\n\t\t\t\tconst c = base + points.length + 1;\n\t\t\t\tconst d = base + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( c, d, b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new LatheGeometry( data.points, data.segments, data.phiStart, data.phiLength );\n\n\t}\n\n}\n\nclass CapsuleGeometry extends LatheGeometry {\n\n\tconstructor( radius = 1, length = 1, capSegments = 4, radialSegments = 8 ) {\n\n\t\tconst path = new Path();\n\t\tpath.absarc( 0, - length / 2, radius, Math.PI * 1.5, 0 );\n\t\tpath.absarc( 0, length / 2, radius, 0, Math.PI * 0.5 );\n\n\t\tsuper( path.getPoints( capSegments ), radialSegments );\n\n\t\tthis.type = 'CapsuleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tlength: length,\n\t\t\tcapSegments: capSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CapsuleGeometry( data.radius, data.length, data.capSegments, data.radialSegments );\n\n\t}\n\n}\n\nclass CircleGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CircleGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tsegments: segments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tsegments = Math.max( 3, segments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// center point\n\n\t\tvertices.push( 0, 0, 0 );\n\t\tnormals.push( 0, 0, 1 );\n\t\tuvs.push( 0.5, 0.5 );\n\n\t\tfor ( let s = 0, i = 3; s <= segments; s ++, i += 3 ) {\n\n\t\t\tconst segment = thetaStart + s / segments * thetaLength;\n\n\t\t\t// vertex\n\n\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t// normal\n\n\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t// uvs\n\n\t\t\tuv.x = ( vertices[ i ] / radius + 1 ) / 2;\n\t\t\tuv.y = ( vertices[ i + 1 ] / radius + 1 ) / 2;\n\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let i = 1; i <= segments; i ++ ) {\n\n\t\t\tindices.push( i, i + 1, 0 );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CircleGeometry( data.radius, data.segments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass CylinderGeometry extends BufferGeometry {\n\n\tconstructor( radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'CylinderGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradiusTop: radiusTop,\n\t\t\tradiusBottom: radiusBottom,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tconst scope = this;\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\theightSegments = Math.floor( heightSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet index = 0;\n\t\tconst indexArray = [];\n\t\tconst halfHeight = height / 2;\n\t\tlet groupStart = 0;\n\n\t\t// generate geometry\n\n\t\tgenerateTorso();\n\n\t\tif ( openEnded === false ) {\n\n\t\t\tif ( radiusTop > 0 ) generateCap( true );\n\t\t\tif ( radiusBottom > 0 ) generateCap( false );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\tfunction generateTorso() {\n\n\t\t\tconst normal = new Vector3();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\t// this will be used to calculate the normal\n\t\t\tconst slope = ( radiusBottom - radiusTop ) / height;\n\n\t\t\t// generate vertices, normals and uvs\n\n\t\t\tfor ( let y = 0; y <= heightSegments; y ++ ) {\n\n\t\t\t\tconst indexRow = [];\n\n\t\t\t\tconst v = y / heightSegments;\n\n\t\t\t\t// calculate the radius of the current row\n\n\t\t\t\tconst radius = v * ( radiusBottom - radiusTop ) + radiusTop;\n\n\t\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\t\tconst u = x / radialSegments;\n\n\t\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\t\tconst sinTheta = Math.sin( theta );\n\t\t\t\t\tconst cosTheta = Math.cos( theta );\n\n\t\t\t\t\t// vertex\n\n\t\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\t\tvertex.y = - v * height + halfHeight;\n\t\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t\t// normal\n\n\t\t\t\t\tnormal.set( sinTheta, slope, cosTheta ).normalize();\n\t\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t\t// uv\n\n\t\t\t\t\tuvs.push( u, 1 - v );\n\n\t\t\t\t\t// save index of vertex in respective row\n\n\t\t\t\t\tindexRow.push( index ++ );\n\n\t\t\t\t}\n\n\t\t\t\t// now save vertices of the row in our index array\n\n\t\t\t\tindexArray.push( indexRow );\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < heightSegments; y ++ ) {\n\n\t\t\t\t\t// we use the index array to access the correct indices\n\n\t\t\t\t\tconst a = indexArray[ y ][ x ];\n\t\t\t\t\tconst b = indexArray[ y + 1 ][ x ];\n\t\t\t\t\tconst c = indexArray[ y + 1 ][ x + 1 ];\n\t\t\t\t\tconst d = indexArray[ y ][ x + 1 ];\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t\t// update group counter\n\n\t\t\t\t\tgroupCount += 6;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, 0 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t\tfunction generateCap( top ) {\n\n\t\t\t// save the index of the first center vertex\n\t\t\tconst centerIndexStart = index;\n\n\t\t\tconst uv = new Vector2();\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tlet groupCount = 0;\n\n\t\t\tconst radius = ( top === true ) ? radiusTop : radiusBottom;\n\t\t\tconst sign = ( top === true ) ? 1 : - 1;\n\n\t\t\t// first we generate the center vertex data of the cap.\n\t\t\t// because the geometry needs one set of uvs per face,\n\t\t\t// we must generate a center vertex per face/segment\n\n\t\t\tfor ( let x = 1; x <= radialSegments; x ++ ) {\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertices.push( 0, halfHeight * sign, 0 );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( 0.5, 0.5 );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// save the index of the last center vertex\n\t\t\tconst centerIndexEnd = index;\n\n\t\t\t// now we generate the surrounding vertices, normals and uvs\n\n\t\t\tfor ( let x = 0; x <= radialSegments; x ++ ) {\n\n\t\t\t\tconst u = x / radialSegments;\n\t\t\t\tconst theta = u * thetaLength + thetaStart;\n\n\t\t\t\tconst cosTheta = Math.cos( theta );\n\t\t\t\tconst sinTheta = Math.sin( theta );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * sinTheta;\n\t\t\t\tvertex.y = halfHeight * sign;\n\t\t\t\tvertex.z = radius * cosTheta;\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, sign, 0 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( cosTheta * 0.5 ) + 0.5;\n\t\t\t\tuv.y = ( sinTheta * 0.5 * sign ) + 0.5;\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t// increase index\n\n\t\t\t\tindex ++;\n\n\t\t\t}\n\n\t\t\t// generate indices\n\n\t\t\tfor ( let x = 0; x < radialSegments; x ++ ) {\n\n\t\t\t\tconst c = centerIndexStart + x;\n\t\t\t\tconst i = centerIndexEnd + x;\n\n\t\t\t\tif ( top === true ) {\n\n\t\t\t\t\t// face top\n\n\t\t\t\t\tindices.push( i, i + 1, c );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// face bottom\n\n\t\t\t\t\tindices.push( i + 1, i, c );\n\n\t\t\t\t}\n\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t\t// add a group to the geometry. this will ensure multi material support\n\n\t\t\tscope.addGroup( groupStart, groupCount, top === true ? 1 : 2 );\n\n\t\t\t// calculate new start value for groups\n\n\t\t\tgroupStart += groupCount;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new CylinderGeometry( data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ConeGeometry extends CylinderGeometry {\n\n\tconstructor( radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper( 0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength );\n\n\t\tthis.type = 'ConeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\theight: height,\n\t\t\tradialSegments: radialSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\topenEnded: openEnded,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new ConeGeometry( data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass PolyhedronGeometry extends BufferGeometry {\n\n\tconstructor( vertices = [], indices = [], radius = 1, detail = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'PolyhedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tvertices: vertices,\n\t\t\tindices: indices,\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t\t// default buffer data\n\n\t\tconst vertexBuffer = [];\n\t\tconst uvBuffer = [];\n\n\t\t// the subdivision creates the vertex buffer data\n\n\t\tsubdivide( detail );\n\n\t\t// all vertices should lie on a conceptual sphere with a given radius\n\n\t\tapplyRadius( radius );\n\n\t\t// finally, create the uv data\n\n\t\tgenerateUVs();\n\n\t\t// build non-indexed geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertexBuffer, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( vertexBuffer.slice(), 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvBuffer, 2 ) );\n\n\t\tif ( detail === 0 ) {\n\n\t\t\tthis.computeVertexNormals(); // flat normals\n\n\t\t} else {\n\n\t\t\tthis.normalizeNormals(); // smooth normals\n\n\t\t}\n\n\t\t// helper functions\n\n\t\tfunction subdivide( detail ) {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\t// iterate over all faces and apply a subdivision with the given detail value\n\n\t\t\tfor ( let i = 0; i < indices.length; i += 3 ) {\n\n\t\t\t\t// get the vertices of the face\n\n\t\t\t\tgetVertexByIndex( indices[ i + 0 ], a );\n\t\t\t\tgetVertexByIndex( indices[ i + 1 ], b );\n\t\t\t\tgetVertexByIndex( indices[ i + 2 ], c );\n\n\t\t\t\t// perform subdivision\n\n\t\t\t\tsubdivideFace( a, b, c, detail );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction subdivideFace( a, b, c, detail ) {\n\n\t\t\tconst cols = detail + 1;\n\n\t\t\t// we use this multidimensional array as a data structure for creating the subdivision\n\n\t\t\tconst v = [];\n\n\t\t\t// construct all of the vertices for this subdivision\n\n\t\t\tfor ( let i = 0; i <= cols; i ++ ) {\n\n\t\t\t\tv[ i ] = [];\n\n\t\t\t\tconst aj = a.clone().lerp( c, i / cols );\n\t\t\t\tconst bj = b.clone().lerp( c, i / cols );\n\n\t\t\t\tconst rows = cols - i;\n\n\t\t\t\tfor ( let j = 0; j <= rows; j ++ ) {\n\n\t\t\t\t\tif ( j === 0 && i === cols ) {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tv[ i ][ j ] = aj.clone().lerp( bj, j / rows );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// construct all of the faces\n\n\t\t\tfor ( let i = 0; i < cols; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {\n\n\t\t\t\t\tconst k = Math.floor( j / 2 );\n\n\t\t\t\t\tif ( j % 2 === 0 ) {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\t\t\t\t\t\tpushVertex( v[ i ][ k ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpushVertex( v[ i ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k + 1 ] );\n\t\t\t\t\t\tpushVertex( v[ i + 1 ][ k ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction applyRadius( radius ) {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\t// iterate over the entire buffer and apply the radius to each vertex\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tvertex.normalize().multiplyScalar( radius );\n\n\t\t\t\tvertexBuffer[ i + 0 ] = vertex.x;\n\t\t\t\tvertexBuffer[ i + 1 ] = vertex.y;\n\t\t\t\tvertexBuffer[ i + 2 ] = vertex.z;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tconst vertex = new Vector3();\n\n\t\t\tfor ( let i = 0; i < vertexBuffer.length; i += 3 ) {\n\n\t\t\t\tvertex.x = vertexBuffer[ i + 0 ];\n\t\t\t\tvertex.y = vertexBuffer[ i + 1 ];\n\t\t\t\tvertex.z = vertexBuffer[ i + 2 ];\n\n\t\t\t\tconst u = azimuth( vertex ) / 2 / Math.PI + 0.5;\n\t\t\t\tconst v = inclination( vertex ) / Math.PI + 0.5;\n\t\t\t\tuvBuffer.push( u, 1 - v );\n\n\t\t\t}\n\n\t\t\tcorrectUVs();\n\n\t\t\tcorrectSeam();\n\n\t\t}\n\n\t\tfunction correctSeam() {\n\n\t\t\t// handle case when face straddles the seam, see #3269\n\n\t\t\tfor ( let i = 0; i < uvBuffer.length; i += 6 ) {\n\n\t\t\t\t// uv data of a single face\n\n\t\t\t\tconst x0 = uvBuffer[ i + 0 ];\n\t\t\t\tconst x1 = uvBuffer[ i + 2 ];\n\t\t\t\tconst x2 = uvBuffer[ i + 4 ];\n\n\t\t\t\tconst max = Math.max( x0, x1, x2 );\n\t\t\t\tconst min = Math.min( x0, x1, x2 );\n\n\t\t\t\t// 0.9 is somewhat arbitrary\n\n\t\t\t\tif ( max > 0.9 && min < 0.1 ) {\n\n\t\t\t\t\tif ( x0 < 0.2 ) uvBuffer[ i + 0 ] += 1;\n\t\t\t\t\tif ( x1 < 0.2 ) uvBuffer[ i + 2 ] += 1;\n\t\t\t\t\tif ( x2 < 0.2 ) uvBuffer[ i + 4 ] += 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushVertex( vertex ) {\n\n\t\t\tvertexBuffer.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tfunction getVertexByIndex( index, vertex ) {\n\n\t\t\tconst stride = index * 3;\n\n\t\t\tvertex.x = vertices[ stride + 0 ];\n\t\t\tvertex.y = vertices[ stride + 1 ];\n\t\t\tvertex.z = vertices[ stride + 2 ];\n\n\t\t}\n\n\t\tfunction correctUVs() {\n\n\t\t\tconst a = new Vector3();\n\t\t\tconst b = new Vector3();\n\t\t\tconst c = new Vector3();\n\n\t\t\tconst centroid = new Vector3();\n\n\t\t\tconst uvA = new Vector2();\n\t\t\tconst uvB = new Vector2();\n\t\t\tconst uvC = new Vector2();\n\n\t\t\tfor ( let i = 0, j = 0; i < vertexBuffer.length; i += 9, j += 6 ) {\n\n\t\t\t\ta.set( vertexBuffer[ i + 0 ], vertexBuffer[ i + 1 ], vertexBuffer[ i + 2 ] );\n\t\t\t\tb.set( vertexBuffer[ i + 3 ], vertexBuffer[ i + 4 ], vertexBuffer[ i + 5 ] );\n\t\t\t\tc.set( vertexBuffer[ i + 6 ], vertexBuffer[ i + 7 ], vertexBuffer[ i + 8 ] );\n\n\t\t\t\tuvA.set( uvBuffer[ j + 0 ], uvBuffer[ j + 1 ] );\n\t\t\t\tuvB.set( uvBuffer[ j + 2 ], uvBuffer[ j + 3 ] );\n\t\t\t\tuvC.set( uvBuffer[ j + 4 ], uvBuffer[ j + 5 ] );\n\n\t\t\t\tcentroid.copy( a ).add( b ).add( c ).divideScalar( 3 );\n\n\t\t\t\tconst azi = azimuth( centroid );\n\n\t\t\t\tcorrectUV( uvA, j + 0, a, azi );\n\t\t\t\tcorrectUV( uvB, j + 2, b, azi );\n\t\t\t\tcorrectUV( uvC, j + 4, c, azi );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction correctUV( uv, stride, vector, azimuth ) {\n\n\t\t\tif ( ( azimuth < 0 ) && ( uv.x === 1 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = uv.x - 1;\n\n\t\t\t}\n\n\t\t\tif ( ( vector.x === 0 ) && ( vector.z === 0 ) ) {\n\n\t\t\t\tuvBuffer[ stride ] = azimuth / 2 / Math.PI + 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Angle around the Y axis, counter-clockwise when looking from above.\n\n\t\tfunction azimuth( vector ) {\n\n\t\t\treturn Math.atan2( vector.z, - vector.x );\n\n\t\t}\n\n\n\t\t// Angle above the XZ plane.\n\n\t\tfunction inclination( vector ) {\n\n\t\t\treturn Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new PolyhedronGeometry( data.vertices, data.indices, data.radius, data.details );\n\n\t}\n\n}\n\nclass DodecahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\t\tconst r = 1 / t;\n\n\t\tconst vertices = [\n\n\t\t\t// (±1, ±1, ±1)\n\t\t\t- 1, - 1, - 1,\t- 1, - 1, 1,\n\t\t\t- 1, 1, - 1, - 1, 1, 1,\n\t\t\t1, - 1, - 1, 1, - 1, 1,\n\t\t\t1, 1, - 1, 1, 1, 1,\n\n\t\t\t// (0, ±1/φ, ±φ)\n\t\t\t0, - r, - t, 0, - r, t,\n\t\t\t0, r, - t, 0, r, t,\n\n\t\t\t// (±1/φ, ±φ, 0)\n\t\t\t- r, - t, 0, - r, t, 0,\n\t\t\tr, - t, 0, r, t, 0,\n\n\t\t\t// (±φ, 0, ±1/φ)\n\t\t\t- t, 0, - r, t, 0, - r,\n\t\t\t- t, 0, r, t, 0, r\n\t\t];\n\n\t\tconst indices = [\n\t\t\t3, 11, 7, \t3, 7, 15, \t3, 15, 13,\n\t\t\t7, 19, 17, \t7, 17, 6, \t7, 6, 15,\n\t\t\t17, 4, 8, \t17, 8, 10, \t17, 10, 6,\n\t\t\t8, 0, 16, \t8, 16, 2, \t8, 2, 10,\n\t\t\t0, 12, 1, \t0, 1, 18, \t0, 18, 16,\n\t\t\t6, 10, 2, \t6, 2, 13, \t6, 13, 15,\n\t\t\t2, 16, 18, \t2, 18, 3, \t2, 3, 13,\n\t\t\t18, 1, 9, \t18, 9, 11, \t18, 11, 3,\n\t\t\t4, 14, 12, \t4, 12, 0, \t4, 0, 8,\n\t\t\t11, 9, 5, \t11, 5, 19, \t11, 19, 7,\n\t\t\t19, 5, 14, \t19, 14, 4, \t19, 4, 17,\n\t\t\t1, 12, 14, \t1, 14, 5, \t1, 5, 9\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'DodecahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new DodecahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nconst _v0 = /*@__PURE__*/ new Vector3();\nconst _v1$1 = /*@__PURE__*/ new Vector3();\nconst _normal = /*@__PURE__*/ new Vector3();\nconst _triangle = /*@__PURE__*/ new Triangle();\n\nclass EdgesGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null, thresholdAngle = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'EdgesGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry,\n\t\t\tthresholdAngle: thresholdAngle\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\tconst precisionPoints = 4;\n\t\t\tconst precision = Math.pow( 10, precisionPoints );\n\t\t\tconst thresholdDot = Math.cos( DEG2RAD * thresholdAngle );\n\n\t\t\tconst indexAttr = geometry.getIndex();\n\t\t\tconst positionAttr = geometry.getAttribute( 'position' );\n\t\t\tconst indexCount = indexAttr ? indexAttr.count : positionAttr.count;\n\n\t\t\tconst indexArr = [ 0, 0, 0 ];\n\t\t\tconst vertKeys = [ 'a', 'b', 'c' ];\n\t\t\tconst hashes = new Array( 3 );\n\n\t\t\tconst edgeData = {};\n\t\t\tconst vertices = [];\n\t\t\tfor ( let i = 0; i < indexCount; i += 3 ) {\n\n\t\t\t\tif ( indexAttr ) {\n\n\t\t\t\t\tindexArr[ 0 ] = indexAttr.getX( i );\n\t\t\t\t\tindexArr[ 1 ] = indexAttr.getX( i + 1 );\n\t\t\t\t\tindexArr[ 2 ] = indexAttr.getX( i + 2 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tindexArr[ 0 ] = i;\n\t\t\t\t\tindexArr[ 1 ] = i + 1;\n\t\t\t\t\tindexArr[ 2 ] = i + 2;\n\n\t\t\t\t}\n\n\t\t\t\tconst { a, b, c } = _triangle;\n\t\t\t\ta.fromBufferAttribute( positionAttr, indexArr[ 0 ] );\n\t\t\t\tb.fromBufferAttribute( positionAttr, indexArr[ 1 ] );\n\t\t\t\tc.fromBufferAttribute( positionAttr, indexArr[ 2 ] );\n\t\t\t\t_triangle.getNormal( _normal );\n\n\t\t\t\t// create hashes for the edge from the vertices\n\t\t\t\thashes[ 0 ] = `${ Math.round( a.x * precision ) },${ Math.round( a.y * precision ) },${ Math.round( a.z * precision ) }`;\n\t\t\t\thashes[ 1 ] = `${ Math.round( b.x * precision ) },${ Math.round( b.y * precision ) },${ Math.round( b.z * precision ) }`;\n\t\t\t\thashes[ 2 ] = `${ Math.round( c.x * precision ) },${ Math.round( c.y * precision ) },${ Math.round( c.z * precision ) }`;\n\n\t\t\t\t// skip degenerate triangles\n\t\t\t\tif ( hashes[ 0 ] === hashes[ 1 ] || hashes[ 1 ] === hashes[ 2 ] || hashes[ 2 ] === hashes[ 0 ] ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over every edge\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t// get the first and next vertex making up the edge\n\t\t\t\t\tconst jNext = ( j + 1 ) % 3;\n\t\t\t\t\tconst vecHash0 = hashes[ j ];\n\t\t\t\t\tconst vecHash1 = hashes[ jNext ];\n\t\t\t\t\tconst v0 = _triangle[ vertKeys[ j ] ];\n\t\t\t\t\tconst v1 = _triangle[ vertKeys[ jNext ] ];\n\n\t\t\t\t\tconst hash = `${ vecHash0 }_${ vecHash1 }`;\n\t\t\t\t\tconst reverseHash = `${ vecHash1 }_${ vecHash0 }`;\n\n\t\t\t\t\tif ( reverseHash in edgeData && edgeData[ reverseHash ] ) {\n\n\t\t\t\t\t\t// if we found a sibling edge add it into the vertex array if\n\t\t\t\t\t\t// it meets the angle threshold and delete the edge from the map.\n\t\t\t\t\t\tif ( _normal.dot( edgeData[ reverseHash ].normal ) <= thresholdDot ) {\n\n\t\t\t\t\t\t\tvertices.push( v0.x, v0.y, v0.z );\n\t\t\t\t\t\t\tvertices.push( v1.x, v1.y, v1.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tedgeData[ reverseHash ] = null;\n\n\t\t\t\t\t} else if ( ! ( hash in edgeData ) ) {\n\n\t\t\t\t\t\t// if we've already got an edge here then skip adding a new one\n\t\t\t\t\t\tedgeData[ hash ] = {\n\n\t\t\t\t\t\t\tindex0: indexArr[ j ],\n\t\t\t\t\t\t\tindex1: indexArr[ jNext ],\n\t\t\t\t\t\t\tnormal: _normal.clone(),\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all remaining, unmatched edges and add them to the vertex array\n\t\t\tfor ( const key in edgeData ) {\n\n\t\t\t\tif ( edgeData[ key ] ) {\n\n\t\t\t\t\tconst { index0, index1 } = edgeData[ key ];\n\t\t\t\t\t_v0.fromBufferAttribute( positionAttr, index0 );\n\t\t\t\t\t_v1$1.fromBufferAttribute( positionAttr, index1 );\n\n\t\t\t\t\tvertices.push( _v0.x, _v0.y, _v0.z );\n\t\t\t\t\tvertices.push( _v1$1.x, _v1$1.y, _v1$1.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Shape extends Path {\n\n\tconstructor( points ) {\n\n\t\tsuper( points );\n\n\t\tthis.uuid = generateUUID();\n\n\t\tthis.type = 'Shape';\n\n\t\tthis.holes = [];\n\n\t}\n\n\tgetPointsHoles( divisions ) {\n\n\t\tconst holesPts = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tholesPts[ i ] = this.holes[ i ].getPoints( divisions );\n\n\t\t}\n\n\t\treturn holesPts;\n\n\t}\n\n\t// get points of shape and holes (keypoints based on segments parameter)\n\n\textractPoints( divisions ) {\n\n\t\treturn {\n\n\t\t\tshape: this.getPoints( divisions ),\n\t\t\tholes: this.getPointsHoles( divisions )\n\n\t\t};\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = source.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = source.holes[ i ];\n\n\t\t\tthis.holes.push( hole.clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.holes = [];\n\n\t\tfor ( let i = 0, l = this.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = this.holes[ i ];\n\t\t\tdata.holes.push( hole.toJSON() );\n\n\t\t}\n\n\t\treturn data;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tsuper.fromJSON( json );\n\n\t\tthis.uuid = json.uuid;\n\t\tthis.holes = [];\n\n\t\tfor ( let i = 0, l = json.holes.length; i < l; i ++ ) {\n\n\t\t\tconst hole = json.holes[ i ];\n\t\t\tthis.holes.push( new Path().fromJSON( hole ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\n/**\n * Port from https://github.com/mapbox/earcut (v2.2.4)\n */\n\nconst Earcut = {\n\n\ttriangulate: function ( data, holeIndices, dim = 2 ) {\n\n\t\tconst hasHoles = holeIndices && holeIndices.length;\n\t\tconst outerLen = hasHoles ? holeIndices[ 0 ] * dim : data.length;\n\t\tlet outerNode = linkedList( data, 0, outerLen, dim, true );\n\t\tconst triangles = [];\n\n\t\tif ( ! outerNode || outerNode.next === outerNode.prev ) return triangles;\n\n\t\tlet minX, minY, maxX, maxY, x, y, invSize;\n\n\t\tif ( hasHoles ) outerNode = eliminateHoles( data, holeIndices, outerNode, dim );\n\n\t\t// if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\n\t\tif ( data.length > 80 * dim ) {\n\n\t\t\tminX = maxX = data[ 0 ];\n\t\t\tminY = maxY = data[ 1 ];\n\n\t\t\tfor ( let i = dim; i < outerLen; i += dim ) {\n\n\t\t\t\tx = data[ i ];\n\t\t\t\ty = data[ i + 1 ];\n\t\t\t\tif ( x < minX ) minX = x;\n\t\t\t\tif ( y < minY ) minY = y;\n\t\t\t\tif ( x > maxX ) maxX = x;\n\t\t\t\tif ( y > maxY ) maxY = y;\n\n\t\t\t}\n\n\t\t\t// minX, minY and invSize are later used to transform coords into integers for z-order calculation\n\t\t\tinvSize = Math.max( maxX - minX, maxY - minY );\n\t\t\tinvSize = invSize !== 0 ? 32767 / invSize : 0;\n\n\t\t}\n\n\t\tearcutLinked( outerNode, triangles, dim, minX, minY, invSize, 0 );\n\n\t\treturn triangles;\n\n\t}\n\n};\n\n// create a circular doubly linked list from polygon points in the specified winding order\nfunction linkedList( data, start, end, dim, clockwise ) {\n\n\tlet i, last;\n\n\tif ( clockwise === ( signedArea( data, start, end, dim ) > 0 ) ) {\n\n\t\tfor ( i = start; i < end; i += dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t} else {\n\n\t\tfor ( i = end - dim; i >= start; i -= dim ) last = insertNode( i, data[ i ], data[ i + 1 ], last );\n\n\t}\n\n\tif ( last && equals( last, last.next ) ) {\n\n\t\tremoveNode( last );\n\t\tlast = last.next;\n\n\t}\n\n\treturn last;\n\n}\n\n// eliminate colinear or duplicate points\nfunction filterPoints( start, end ) {\n\n\tif ( ! start ) return start;\n\tif ( ! end ) end = start;\n\n\tlet p = start,\n\t\tagain;\n\tdo {\n\n\t\tagain = false;\n\n\t\tif ( ! p.steiner && ( equals( p, p.next ) || area( p.prev, p, p.next ) === 0 ) ) {\n\n\t\t\tremoveNode( p );\n\t\t\tp = end = p.prev;\n\t\t\tif ( p === p.next ) break;\n\t\t\tagain = true;\n\n\t\t} else {\n\n\t\t\tp = p.next;\n\n\t\t}\n\n\t} while ( again || p !== end );\n\n\treturn end;\n\n}\n\n// main ear slicing loop which triangulates a polygon (given as a linked list)\nfunction earcutLinked( ear, triangles, dim, minX, minY, invSize, pass ) {\n\n\tif ( ! ear ) return;\n\n\t// interlink polygon nodes in z-order\n\tif ( ! pass && invSize ) indexCurve( ear, minX, minY, invSize );\n\n\tlet stop = ear,\n\t\tprev, next;\n\n\t// iterate through ears, slicing them one by one\n\twhile ( ear.prev !== ear.next ) {\n\n\t\tprev = ear.prev;\n\t\tnext = ear.next;\n\n\t\tif ( invSize ? isEarHashed( ear, minX, minY, invSize ) : isEar( ear ) ) {\n\n\t\t\t// cut off the triangle\n\t\t\ttriangles.push( prev.i / dim | 0 );\n\t\t\ttriangles.push( ear.i / dim | 0 );\n\t\t\ttriangles.push( next.i / dim | 0 );\n\n\t\t\tremoveNode( ear );\n\n\t\t\t// skipping the next vertex leads to less sliver triangles\n\t\t\tear = next.next;\n\t\t\tstop = next.next;\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\tear = next;\n\n\t\t// if we looped through the whole remaining polygon and can't find any more ears\n\t\tif ( ear === stop ) {\n\n\t\t\t// try filtering points and slicing again\n\t\t\tif ( ! pass ) {\n\n\t\t\t\tearcutLinked( filterPoints( ear ), triangles, dim, minX, minY, invSize, 1 );\n\n\t\t\t\t// if this didn't work, try curing all small self-intersections locally\n\n\t\t\t} else if ( pass === 1 ) {\n\n\t\t\t\tear = cureLocalIntersections( filterPoints( ear ), triangles, dim );\n\t\t\t\tearcutLinked( ear, triangles, dim, minX, minY, invSize, 2 );\n\n\t\t\t\t// as a last resort, try splitting the remaining polygon into two\n\n\t\t\t} else if ( pass === 2 ) {\n\n\t\t\t\tsplitEarcut( ear, triangles, dim, minX, minY, invSize );\n\n\t\t\t}\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n}\n\n// check whether a polygon node forms a valid ear with adjacent nodes\nfunction isEar( ear ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\t// now make sure we don't have other points inside the potential ear\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\tlet p = c.next;\n\twhile ( p !== a ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) &&\n\t\t\tarea( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.next;\n\n\t}\n\n\treturn true;\n\n}\n\nfunction isEarHashed( ear, minX, minY, invSize ) {\n\n\tconst a = ear.prev,\n\t\tb = ear,\n\t\tc = ear.next;\n\n\tif ( area( a, b, c ) >= 0 ) return false; // reflex, can't be an ear\n\n\tconst ax = a.x, bx = b.x, cx = c.x, ay = a.y, by = b.y, cy = c.y;\n\n\t// triangle bbox; min & max are calculated like this for speed\n\tconst x0 = ax < bx ? ( ax < cx ? ax : cx ) : ( bx < cx ? bx : cx ),\n\t\ty0 = ay < by ? ( ay < cy ? ay : cy ) : ( by < cy ? by : cy ),\n\t\tx1 = ax > bx ? ( ax > cx ? ax : cx ) : ( bx > cx ? bx : cx ),\n\t\ty1 = ay > by ? ( ay > cy ? ay : cy ) : ( by > cy ? by : cy );\n\n\t// z-order range for the current triangle bbox;\n\tconst minZ = zOrder( x0, y0, minX, minY, invSize ),\n\t\tmaxZ = zOrder( x1, y1, minX, minY, invSize );\n\n\tlet p = ear.prevZ,\n\t\tn = ear.nextZ;\n\n\t// look for points inside the triangle in both directions\n\twhile ( p && p.z >= minZ && n && n.z <= maxZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\t// look for remaining points in decreasing z-order\n\twhile ( p && p.z >= minZ ) {\n\n\t\tif ( p.x >= x0 && p.x <= x1 && p.y >= y0 && p.y <= y1 && p !== a && p !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, p.x, p.y ) && area( p.prev, p, p.next ) >= 0 ) return false;\n\t\tp = p.prevZ;\n\n\t}\n\n\t// look for remaining points in increasing z-order\n\twhile ( n && n.z <= maxZ ) {\n\n\t\tif ( n.x >= x0 && n.x <= x1 && n.y >= y0 && n.y <= y1 && n !== a && n !== c &&\n\t\t\tpointInTriangle( ax, ay, bx, by, cx, cy, n.x, n.y ) && area( n.prev, n, n.next ) >= 0 ) return false;\n\t\tn = n.nextZ;\n\n\t}\n\n\treturn true;\n\n}\n\n// go through all polygon nodes and cure small local self-intersections\nfunction cureLocalIntersections( start, triangles, dim ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tconst a = p.prev,\n\t\t\tb = p.next.next;\n\n\t\tif ( ! equals( a, b ) && intersects( a, p, p.next, b ) && locallyInside( a, b ) && locallyInside( b, a ) ) {\n\n\t\t\ttriangles.push( a.i / dim | 0 );\n\t\t\ttriangles.push( p.i / dim | 0 );\n\t\t\ttriangles.push( b.i / dim | 0 );\n\n\t\t\t// remove two nodes involved\n\t\t\tremoveNode( p );\n\t\t\tremoveNode( p.next );\n\n\t\t\tp = start = b;\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn filterPoints( p );\n\n}\n\n// try splitting polygon into two and triangulate them independently\nfunction splitEarcut( start, triangles, dim, minX, minY, invSize ) {\n\n\t// look for a valid diagonal that divides the polygon into two\n\tlet a = start;\n\tdo {\n\n\t\tlet b = a.next.next;\n\t\twhile ( b !== a.prev ) {\n\n\t\t\tif ( a.i !== b.i && isValidDiagonal( a, b ) ) {\n\n\t\t\t\t// split the polygon in two by the diagonal\n\t\t\t\tlet c = splitPolygon( a, b );\n\n\t\t\t\t// filter colinear points around the cuts\n\t\t\t\ta = filterPoints( a, a.next );\n\t\t\t\tc = filterPoints( c, c.next );\n\n\t\t\t\t// run earcut on each half\n\t\t\t\tearcutLinked( a, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\tearcutLinked( c, triangles, dim, minX, minY, invSize, 0 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tb = b.next;\n\n\t\t}\n\n\t\ta = a.next;\n\n\t} while ( a !== start );\n\n}\n\n// link every hole into the outer loop, producing a single-ring polygon without holes\nfunction eliminateHoles( data, holeIndices, outerNode, dim ) {\n\n\tconst queue = [];\n\tlet i, len, start, end, list;\n\n\tfor ( i = 0, len = holeIndices.length; i < len; i ++ ) {\n\n\t\tstart = holeIndices[ i ] * dim;\n\t\tend = i < len - 1 ? holeIndices[ i + 1 ] * dim : data.length;\n\t\tlist = linkedList( data, start, end, dim, false );\n\t\tif ( list === list.next ) list.steiner = true;\n\t\tqueue.push( getLeftmost( list ) );\n\n\t}\n\n\tqueue.sort( compareX );\n\n\t// process holes from left to right\n\tfor ( i = 0; i < queue.length; i ++ ) {\n\n\t\touterNode = eliminateHole( queue[ i ], outerNode );\n\n\t}\n\n\treturn outerNode;\n\n}\n\nfunction compareX( a, b ) {\n\n\treturn a.x - b.x;\n\n}\n\n// find a bridge between vertices that connects hole with an outer ring and link it\nfunction eliminateHole( hole, outerNode ) {\n\n\tconst bridge = findHoleBridge( hole, outerNode );\n\tif ( ! bridge ) {\n\n\t\treturn outerNode;\n\n\t}\n\n\tconst bridgeReverse = splitPolygon( bridge, hole );\n\n\t// filter collinear points around the cuts\n\tfilterPoints( bridgeReverse, bridgeReverse.next );\n\treturn filterPoints( bridge, bridge.next );\n\n}\n\n// David Eberly's algorithm for finding a bridge between hole and outer polygon\nfunction findHoleBridge( hole, outerNode ) {\n\n\tlet p = outerNode,\n\t\tqx = - Infinity,\n\t\tm;\n\n\tconst hx = hole.x, hy = hole.y;\n\n\t// find a segment intersected by a ray from the hole's leftmost point to the left;\n\t// segment's endpoint with lesser x will be potential connection point\n\tdo {\n\n\t\tif ( hy <= p.y && hy >= p.next.y && p.next.y !== p.y ) {\n\n\t\t\tconst x = p.x + ( hy - p.y ) * ( p.next.x - p.x ) / ( p.next.y - p.y );\n\t\t\tif ( x <= hx && x > qx ) {\n\n\t\t\t\tqx = x;\n\t\t\t\tm = p.x < p.next.x ? p : p.next;\n\t\t\t\tif ( x === hx ) return m; // hole touches outer segment; pick leftmost endpoint\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== outerNode );\n\n\tif ( ! m ) return null;\n\n\t// look for points inside the triangle of hole point, segment intersection and endpoint;\n\t// if there are no points found, we have a valid connection;\n\t// otherwise choose the point of the minimum angle with the ray as connection point\n\n\tconst stop = m,\n\t\tmx = m.x,\n\t\tmy = m.y;\n\tlet tanMin = Infinity, tan;\n\n\tp = m;\n\n\tdo {\n\n\t\tif ( hx >= p.x && p.x >= mx && hx !== p.x &&\n\t\t\t\tpointInTriangle( hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y ) ) {\n\n\t\t\ttan = Math.abs( hy - p.y ) / ( hx - p.x ); // tangential\n\n\t\t\tif ( locallyInside( p, hole ) && ( tan < tanMin || ( tan === tanMin && ( p.x > m.x || ( p.x === m.x && sectorContainsSector( m, p ) ) ) ) ) ) {\n\n\t\t\t\tm = p;\n\t\t\t\ttanMin = tan;\n\n\t\t\t}\n\n\t\t}\n\n\t\tp = p.next;\n\n\t} while ( p !== stop );\n\n\treturn m;\n\n}\n\n// whether sector in vertex m contains sector in vertex p in the same coordinates\nfunction sectorContainsSector( m, p ) {\n\n\treturn area( m.prev, m, p.prev ) < 0 && area( p.next, m, m.next ) < 0;\n\n}\n\n// interlink polygon nodes in z-order\nfunction indexCurve( start, minX, minY, invSize ) {\n\n\tlet p = start;\n\tdo {\n\n\t\tif ( p.z === 0 ) p.z = zOrder( p.x, p.y, minX, minY, invSize );\n\t\tp.prevZ = p.prev;\n\t\tp.nextZ = p.next;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\tp.prevZ.nextZ = null;\n\tp.prevZ = null;\n\n\tsortLinked( p );\n\n}\n\n// Simon Tatham's linked list merge sort algorithm\n// http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\nfunction sortLinked( list ) {\n\n\tlet i, p, q, e, tail, numMerges, pSize, qSize,\n\t\tinSize = 1;\n\n\tdo {\n\n\t\tp = list;\n\t\tlist = null;\n\t\ttail = null;\n\t\tnumMerges = 0;\n\n\t\twhile ( p ) {\n\n\t\t\tnumMerges ++;\n\t\t\tq = p;\n\t\t\tpSize = 0;\n\t\t\tfor ( i = 0; i < inSize; i ++ ) {\n\n\t\t\t\tpSize ++;\n\t\t\t\tq = q.nextZ;\n\t\t\t\tif ( ! q ) break;\n\n\t\t\t}\n\n\t\t\tqSize = inSize;\n\n\t\t\twhile ( pSize > 0 || ( qSize > 0 && q ) ) {\n\n\t\t\t\tif ( pSize !== 0 && ( qSize === 0 || ! q || p.z <= q.z ) ) {\n\n\t\t\t\t\te = p;\n\t\t\t\t\tp = p.nextZ;\n\t\t\t\t\tpSize --;\n\n\t\t\t\t} else {\n\n\t\t\t\t\te = q;\n\t\t\t\t\tq = q.nextZ;\n\t\t\t\t\tqSize --;\n\n\t\t\t\t}\n\n\t\t\t\tif ( tail ) tail.nextZ = e;\n\t\t\t\telse list = e;\n\n\t\t\t\te.prevZ = tail;\n\t\t\t\ttail = e;\n\n\t\t\t}\n\n\t\t\tp = q;\n\n\t\t}\n\n\t\ttail.nextZ = null;\n\t\tinSize *= 2;\n\n\t} while ( numMerges > 1 );\n\n\treturn list;\n\n}\n\n// z-order of a point given coords and inverse of the longer side of data bbox\nfunction zOrder( x, y, minX, minY, invSize ) {\n\n\t// coords are transformed into non-negative 15-bit integer range\n\tx = ( x - minX ) * invSize | 0;\n\ty = ( y - minY ) * invSize | 0;\n\n\tx = ( x | ( x << 8 ) ) & 0x00FF00FF;\n\tx = ( x | ( x << 4 ) ) & 0x0F0F0F0F;\n\tx = ( x | ( x << 2 ) ) & 0x33333333;\n\tx = ( x | ( x << 1 ) ) & 0x55555555;\n\n\ty = ( y | ( y << 8 ) ) & 0x00FF00FF;\n\ty = ( y | ( y << 4 ) ) & 0x0F0F0F0F;\n\ty = ( y | ( y << 2 ) ) & 0x33333333;\n\ty = ( y | ( y << 1 ) ) & 0x55555555;\n\n\treturn x | ( y << 1 );\n\n}\n\n// find the leftmost node of a polygon ring\nfunction getLeftmost( start ) {\n\n\tlet p = start,\n\t\tleftmost = start;\n\tdo {\n\n\t\tif ( p.x < leftmost.x || ( p.x === leftmost.x && p.y < leftmost.y ) ) leftmost = p;\n\t\tp = p.next;\n\n\t} while ( p !== start );\n\n\treturn leftmost;\n\n}\n\n// check if a point lies within a convex triangle\nfunction pointInTriangle( ax, ay, bx, by, cx, cy, px, py ) {\n\n\treturn ( cx - px ) * ( ay - py ) >= ( ax - px ) * ( cy - py ) &&\n           ( ax - px ) * ( by - py ) >= ( bx - px ) * ( ay - py ) &&\n           ( bx - px ) * ( cy - py ) >= ( cx - px ) * ( by - py );\n\n}\n\n// check if a diagonal between two polygon nodes is valid (lies in polygon interior)\nfunction isValidDiagonal( a, b ) {\n\n\treturn a.next.i !== b.i && a.prev.i !== b.i && ! intersectsPolygon( a, b ) && // dones't intersect other edges\n           ( locallyInside( a, b ) && locallyInside( b, a ) && middleInside( a, b ) && // locally visible\n            ( area( a.prev, a, b.prev ) || area( a, b.prev, b ) ) || // does not create opposite-facing sectors\n            equals( a, b ) && area( a.prev, a, a.next ) > 0 && area( b.prev, b, b.next ) > 0 ); // special zero-length case\n\n}\n\n// signed area of a triangle\nfunction area( p, q, r ) {\n\n\treturn ( q.y - p.y ) * ( r.x - q.x ) - ( q.x - p.x ) * ( r.y - q.y );\n\n}\n\n// check if two points are equal\nfunction equals( p1, p2 ) {\n\n\treturn p1.x === p2.x && p1.y === p2.y;\n\n}\n\n// check if two segments intersect\nfunction intersects( p1, q1, p2, q2 ) {\n\n\tconst o1 = sign( area( p1, q1, p2 ) );\n\tconst o2 = sign( area( p1, q1, q2 ) );\n\tconst o3 = sign( area( p2, q2, p1 ) );\n\tconst o4 = sign( area( p2, q2, q1 ) );\n\n\tif ( o1 !== o2 && o3 !== o4 ) return true; // general case\n\n\tif ( o1 === 0 && onSegment( p1, p2, q1 ) ) return true; // p1, q1 and p2 are collinear and p2 lies on p1q1\n\tif ( o2 === 0 && onSegment( p1, q2, q1 ) ) return true; // p1, q1 and q2 are collinear and q2 lies on p1q1\n\tif ( o3 === 0 && onSegment( p2, p1, q2 ) ) return true; // p2, q2 and p1 are collinear and p1 lies on p2q2\n\tif ( o4 === 0 && onSegment( p2, q1, q2 ) ) return true; // p2, q2 and q1 are collinear and q1 lies on p2q2\n\n\treturn false;\n\n}\n\n// for collinear points p, q, r, check if point q lies on segment pr\nfunction onSegment( p, q, r ) {\n\n\treturn q.x <= Math.max( p.x, r.x ) && q.x >= Math.min( p.x, r.x ) && q.y <= Math.max( p.y, r.y ) && q.y >= Math.min( p.y, r.y );\n\n}\n\nfunction sign( num ) {\n\n\treturn num > 0 ? 1 : num < 0 ? - 1 : 0;\n\n}\n\n// check if a polygon diagonal intersects any polygon segments\nfunction intersectsPolygon( a, b ) {\n\n\tlet p = a;\n\tdo {\n\n\t\tif ( p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\n\t\t\tintersects( p, p.next, a, b ) ) return true;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn false;\n\n}\n\n// check if a polygon diagonal is locally inside the polygon\nfunction locallyInside( a, b ) {\n\n\treturn area( a.prev, a, a.next ) < 0 ?\n\t\tarea( a, b, a.next ) >= 0 && area( a, a.prev, b ) >= 0 :\n\t\tarea( a, b, a.prev ) < 0 || area( a, a.next, b ) < 0;\n\n}\n\n// check if the middle point of a polygon diagonal is inside the polygon\nfunction middleInside( a, b ) {\n\n\tlet p = a,\n\t\tinside = false;\n\tconst px = ( a.x + b.x ) / 2,\n\t\tpy = ( a.y + b.y ) / 2;\n\tdo {\n\n\t\tif ( ( ( p.y > py ) !== ( p.next.y > py ) ) && p.next.y !== p.y &&\n\t\t\t( px < ( p.next.x - p.x ) * ( py - p.y ) / ( p.next.y - p.y ) + p.x ) )\n\t\t\tinside = ! inside;\n\t\tp = p.next;\n\n\t} while ( p !== a );\n\n\treturn inside;\n\n}\n\n// link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\n// if one belongs to the outer ring and another to a hole, it merges it into a single ring\nfunction splitPolygon( a, b ) {\n\n\tconst a2 = new Node( a.i, a.x, a.y ),\n\t\tb2 = new Node( b.i, b.x, b.y ),\n\t\tan = a.next,\n\t\tbp = b.prev;\n\n\ta.next = b;\n\tb.prev = a;\n\n\ta2.next = an;\n\tan.prev = a2;\n\n\tb2.next = a2;\n\ta2.prev = b2;\n\n\tbp.next = b2;\n\tb2.prev = bp;\n\n\treturn b2;\n\n}\n\n// create a node and optionally link it with previous one (in a circular doubly linked list)\nfunction insertNode( i, x, y, last ) {\n\n\tconst p = new Node( i, x, y );\n\n\tif ( ! last ) {\n\n\t\tp.prev = p;\n\t\tp.next = p;\n\n\t} else {\n\n\t\tp.next = last.next;\n\t\tp.prev = last;\n\t\tlast.next.prev = p;\n\t\tlast.next = p;\n\n\t}\n\n\treturn p;\n\n}\n\nfunction removeNode( p ) {\n\n\tp.next.prev = p.prev;\n\tp.prev.next = p.next;\n\n\tif ( p.prevZ ) p.prevZ.nextZ = p.nextZ;\n\tif ( p.nextZ ) p.nextZ.prevZ = p.prevZ;\n\n}\n\nfunction Node( i, x, y ) {\n\n\t// vertex index in coordinates array\n\tthis.i = i;\n\n\t// vertex coordinates\n\tthis.x = x;\n\tthis.y = y;\n\n\t// previous and next vertex nodes in a polygon ring\n\tthis.prev = null;\n\tthis.next = null;\n\n\t// z-order curve value\n\tthis.z = 0;\n\n\t// previous and next nodes in z-order\n\tthis.prevZ = null;\n\tthis.nextZ = null;\n\n\t// indicates whether this is a steiner point\n\tthis.steiner = false;\n\n}\n\nfunction signedArea( data, start, end, dim ) {\n\n\tlet sum = 0;\n\tfor ( let i = start, j = end - dim; i < end; i += dim ) {\n\n\t\tsum += ( data[ j ] - data[ i ] ) * ( data[ i + 1 ] + data[ j + 1 ] );\n\t\tj = i;\n\n\t}\n\n\treturn sum;\n\n}\n\nclass ShapeUtils {\n\n\t// calculate area of the contour polygon\n\n\tstatic area( contour ) {\n\n\t\tconst n = contour.length;\n\t\tlet a = 0.0;\n\n\t\tfor ( let p = n - 1, q = 0; q < n; p = q ++ ) {\n\n\t\t\ta += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;\n\n\t\t}\n\n\t\treturn a * 0.5;\n\n\t}\n\n\tstatic isClockWise( pts ) {\n\n\t\treturn ShapeUtils.area( pts ) < 0;\n\n\t}\n\n\tstatic triangulateShape( contour, holes ) {\n\n\t\tconst vertices = []; // flat array of vertices like [ x0,y0, x1,y1, x2,y2, ... ]\n\t\tconst holeIndices = []; // array of hole indices\n\t\tconst faces = []; // final array of vertex indices like [ [ a,b,d ], [ b,c,d ] ]\n\n\t\tremoveDupEndPts( contour );\n\t\taddContour( vertices, contour );\n\n\t\t//\n\n\t\tlet holeIndex = contour.length;\n\n\t\tholes.forEach( removeDupEndPts );\n\n\t\tfor ( let i = 0; i < holes.length; i ++ ) {\n\n\t\t\tholeIndices.push( holeIndex );\n\t\t\tholeIndex += holes[ i ].length;\n\t\t\taddContour( vertices, holes[ i ] );\n\n\t\t}\n\n\t\t//\n\n\t\tconst triangles = Earcut.triangulate( vertices, holeIndices );\n\n\t\t//\n\n\t\tfor ( let i = 0; i < triangles.length; i += 3 ) {\n\n\t\t\tfaces.push( triangles.slice( i, i + 3 ) );\n\n\t\t}\n\n\t\treturn faces;\n\n\t}\n\n}\n\nfunction removeDupEndPts( points ) {\n\n\tconst l = points.length;\n\n\tif ( l > 2 && points[ l - 1 ].equals( points[ 0 ] ) ) {\n\n\t\tpoints.pop();\n\n\t}\n\n}\n\nfunction addContour( vertices, contour ) {\n\n\tfor ( let i = 0; i < contour.length; i ++ ) {\n\n\t\tvertices.push( contour[ i ].x );\n\t\tvertices.push( contour[ i ].y );\n\n\t}\n\n}\n\n/**\n * Creates extruded geometry from a path shape.\n *\n * parameters = {\n *\n *  curveSegments: <int>, // number of points on the curves\n *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too\n *  depth: <float>, // Depth to extrude the shape\n *\n *  bevelEnabled: <bool>, // turn on bevel\n *  bevelThickness: <float>, // how deep into the original shape bevel goes\n *  bevelSize: <float>, // how far from shape outline (including bevelOffset) is bevel\n *  bevelOffset: <float>, // how far from shape outline does bevel start\n *  bevelSegments: <int>, // number of bevel layers\n *\n *  extrudePath: <THREE.Curve> // curve to extrude shape along\n *\n *  UVGenerator: <Object> // object that provides UV generator functions\n *\n * }\n */\n\n\nclass ExtrudeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0.5, 0.5 ), new Vector2( - 0.5, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), options = {} ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ExtrudeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\toptions: options\n\t\t};\n\n\t\tshapes = Array.isArray( shapes ) ? shapes : [ shapes ];\n\n\t\tconst scope = this;\n\n\t\tconst verticesArray = [];\n\t\tconst uvArray = [];\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\t\t\taddShape( shape );\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( verticesArray, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvArray, 2 ) );\n\n\t\tthis.computeVertexNormals();\n\n\t\t// functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst placeholder = [];\n\n\t\t\t// options\n\n\t\t\tconst curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;\n\t\t\tconst steps = options.steps !== undefined ? options.steps : 1;\n\t\t\tconst depth = options.depth !== undefined ? options.depth : 1;\n\n\t\t\tlet bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true;\n\t\t\tlet bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 0.2;\n\t\t\tlet bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 0.1;\n\t\t\tlet bevelOffset = options.bevelOffset !== undefined ? options.bevelOffset : 0;\n\t\t\tlet bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;\n\n\t\t\tconst extrudePath = options.extrudePath;\n\n\t\t\tconst uvgen = options.UVGenerator !== undefined ? options.UVGenerator : WorldUVGenerator;\n\n\t\t\t//\n\n\t\t\tlet extrudePts, extrudeByPath = false;\n\t\t\tlet splineTube, binormal, normal, position2;\n\n\t\t\tif ( extrudePath ) {\n\n\t\t\t\textrudePts = extrudePath.getSpacedPoints( steps );\n\n\t\t\t\textrudeByPath = true;\n\t\t\t\tbevelEnabled = false; // bevels not supported for path extrusion\n\n\t\t\t\t// SETUP TNB variables\n\n\t\t\t\t// TODO1 - have a .isClosed in spline?\n\n\t\t\t\tsplineTube = extrudePath.computeFrenetFrames( steps, false );\n\n\t\t\t\t// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);\n\n\t\t\t\tbinormal = new Vector3();\n\t\t\t\tnormal = new Vector3();\n\t\t\t\tposition2 = new Vector3();\n\n\t\t\t}\n\n\t\t\t// Safeguards if bevels are not enabled\n\n\t\t\tif ( ! bevelEnabled ) {\n\n\t\t\t\tbevelSegments = 0;\n\t\t\t\tbevelThickness = 0;\n\t\t\t\tbevelSize = 0;\n\t\t\t\tbevelOffset = 0;\n\n\t\t\t}\n\n\t\t\t// Variables initialization\n\n\t\t\tconst shapePoints = shape.extractPoints( curveSegments );\n\n\t\t\tlet vertices = shapePoints.shape;\n\t\t\tconst holes = shapePoints.holes;\n\n\t\t\tconst reverse = ! ShapeUtils.isClockWise( vertices );\n\n\t\t\tif ( reverse ) {\n\n\t\t\t\tvertices = vertices.reverse();\n\n\t\t\t\t// Maybe we should also check if holes are in the opposite direction, just to be safe ...\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\t\tif ( ShapeUtils.isClockWise( ahole ) ) {\n\n\t\t\t\t\t\tholes[ h ] = ahole.reverse();\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( vertices, holes );\n\n\t\t\t/* Vertices */\n\n\t\t\tconst contour = vertices; // vertices has all points but contour has only points of circumference\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\tvertices = vertices.concat( ahole );\n\n\t\t\t}\n\n\n\t\t\tfunction scalePt2( pt, vec, size ) {\n\n\t\t\t\tif ( ! vec ) console.error( 'THREE.ExtrudeGeometry: vec does not exist' );\n\n\t\t\t\treturn pt.clone().addScaledVector( vec, size );\n\n\t\t\t}\n\n\t\t\tconst vlen = vertices.length, flen = faces.length;\n\n\n\t\t\t// Find directions for point movement\n\n\n\t\t\tfunction getBevelVec( inPt, inPrev, inNext ) {\n\n\t\t\t\t// computes for inPt the corresponding point inPt' on a new contour\n\t\t\t\t//   shifted by 1 unit (length of normalized vector) to the left\n\t\t\t\t// if we walk along contour clockwise, this new contour is outside the old one\n\t\t\t\t//\n\t\t\t\t// inPt' is the intersection of the two lines parallel to the two\n\t\t\t\t//  adjacent edges of inPt at a distance of 1 unit on the left side.\n\n\t\t\t\tlet v_trans_x, v_trans_y, shrink_by; // resulting translation vector for inPt\n\n\t\t\t\t// good reading for geometry algorithms (here: line-line intersection)\n\t\t\t\t// http://geomalgorithms.com/a05-_intersect-1.html\n\n\t\t\t\tconst v_prev_x = inPt.x - inPrev.x,\n\t\t\t\t\tv_prev_y = inPt.y - inPrev.y;\n\t\t\t\tconst v_next_x = inNext.x - inPt.x,\n\t\t\t\t\tv_next_y = inNext.y - inPt.y;\n\n\t\t\t\tconst v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );\n\n\t\t\t\t// check for collinear edges\n\t\t\t\tconst collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\tif ( Math.abs( collinear0 ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not collinear\n\n\t\t\t\t\t// length of vectors for normalizing\n\n\t\t\t\t\tconst v_prev_len = Math.sqrt( v_prev_lensq );\n\t\t\t\t\tconst v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );\n\n\t\t\t\t\t// shift adjacent points by unit vectors to the left\n\n\t\t\t\t\tconst ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );\n\t\t\t\t\tconst ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );\n\n\t\t\t\t\tconst ptNextShift_x = ( inNext.x - v_next_y / v_next_len );\n\t\t\t\t\tconst ptNextShift_y = ( inNext.y + v_next_x / v_next_len );\n\n\t\t\t\t\t// scaling factor for v_prev to intersection point\n\n\t\t\t\t\tconst sf = ( ( ptNextShift_x - ptPrevShift_x ) * v_next_y -\n\t\t\t\t\t\t\t( ptNextShift_y - ptPrevShift_y ) * v_next_x ) /\n\t\t\t\t\t\t( v_prev_x * v_next_y - v_prev_y * v_next_x );\n\n\t\t\t\t\t// vector from inPt to intersection point\n\n\t\t\t\t\tv_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );\n\t\t\t\t\tv_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );\n\n\t\t\t\t\t// Don't normalize!, otherwise sharp corners become ugly\n\t\t\t\t\t//  but prevent crazy spikes\n\t\t\t\t\tconst v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );\n\t\t\t\t\tif ( v_trans_lensq <= 2 ) {\n\n\t\t\t\t\t\treturn new Vector2( v_trans_x, v_trans_y );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_trans_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// handle special case of collinear edges\n\n\t\t\t\t\tlet direction_eq = false; // assumes: opposite\n\n\t\t\t\t\tif ( v_prev_x > Number.EPSILON ) {\n\n\t\t\t\t\t\tif ( v_next_x > Number.EPSILON ) {\n\n\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( v_prev_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\tif ( v_next_x < - Number.EPSILON ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {\n\n\t\t\t\t\t\t\t\tdirection_eq = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( direction_eq ) {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight sequence\");\n\t\t\t\t\t\tv_trans_x = - v_prev_y;\n\t\t\t\t\t\tv_trans_y = v_prev_x;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// console.log(\"Warning: lines are a straight spike\");\n\t\t\t\t\t\tv_trans_x = v_prev_x;\n\t\t\t\t\t\tv_trans_y = v_prev_y;\n\t\t\t\t\t\tshrink_by = Math.sqrt( v_prev_lensq / 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn new Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );\n\n\t\t\t}\n\n\n\t\t\tconst contourMovements = [];\n\n\t\t\tfor ( let i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t// console.log('i,j,k', i, j , k)\n\n\t\t\t\tcontourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );\n\n\t\t\t}\n\n\t\t\tconst holesMovements = [];\n\t\t\tlet oneHoleMovements, verticesMovements = contourMovements.concat();\n\n\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\tconst ahole = holes[ h ];\n\n\t\t\t\toneHoleMovements = [];\n\n\t\t\t\tfor ( let i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {\n\n\t\t\t\t\tif ( j === il ) j = 0;\n\t\t\t\t\tif ( k === il ) k = 0;\n\n\t\t\t\t\t//  (j)---(i)---(k)\n\t\t\t\t\toneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );\n\n\t\t\t\t}\n\n\t\t\t\tholesMovements.push( oneHoleMovements );\n\t\t\t\tverticesMovements = verticesMovements.concat( oneHoleMovements );\n\n\t\t\t}\n\n\n\t\t\t// Loop bevelSegments, 1 for the front, 1 for the back\n\n\t\t\tfor ( let b = 0; b < bevelSegments; b ++ ) {\n\n\t\t\t\t//for ( b = bevelSegments; b > 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\n\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tv( vert.x, vert.y, - z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst bs = bevelSize + bevelOffset;\n\n\t\t\t// Back facing vertices\n\n\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\tv( vert.x, vert.y, 0 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );\n\n\t\t\t\t\tnormal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );\n\t\t\t\t\tbinormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\tposition2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );\n\n\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add stepped vertices...\n\t\t\t// Including front facing vertices\n\n\t\t\tfor ( let s = 1; s <= steps; s ++ ) {\n\n\t\t\t\tfor ( let i = 0; i < vlen; i ++ ) {\n\n\t\t\t\t\tconst vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];\n\n\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\tv( vert.x, vert.y, depth / steps * s );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );\n\n\t\t\t\t\t\tnormal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );\n\t\t\t\t\t\tbinormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );\n\n\t\t\t\t\t\tposition2.copy( extrudePts[ s ] ).add( normal ).add( binormal );\n\n\t\t\t\t\t\tv( position2.x, position2.y, position2.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\t// Add bevel segments planes\n\n\t\t\t//for ( b = 1; b <= bevelSegments; b ++ ) {\n\t\t\tfor ( let b = bevelSegments - 1; b >= 0; b -- ) {\n\n\t\t\t\tconst t = b / bevelSegments;\n\t\t\t\tconst z = bevelThickness * Math.cos( t * Math.PI / 2 );\n\t\t\t\tconst bs = bevelSize * Math.sin( t * Math.PI / 2 ) + bevelOffset;\n\n\t\t\t\t// contract shape\n\n\t\t\t\tfor ( let i = 0, il = contour.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst vert = scalePt2( contour[ i ], contourMovements[ i ], bs );\n\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t}\n\n\t\t\t\t// expand holes\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\toneHoleMovements = holesMovements[ h ];\n\n\t\t\t\t\tfor ( let i = 0, il = ahole.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tconst vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );\n\n\t\t\t\t\t\tif ( ! extrudeByPath ) {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y, depth + z );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tv( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* Faces */\n\n\t\t\t// Top and bottom faces\n\n\t\t\tbuildLidFaces();\n\n\t\t\t// Sides faces\n\n\t\t\tbuildSideFaces();\n\n\n\t\t\t/////  Internal functions\n\n\t\t\tfunction buildLidFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\n\t\t\t\tif ( bevelEnabled ) {\n\n\t\t\t\t\tlet layer = 0; // steps + 1\n\t\t\t\t\tlet offset = vlen * layer;\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlayer = steps + bevelSegments * 2;\n\t\t\t\t\toffset = vlen * layer;\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Bottom faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 2 ], face[ 1 ], face[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Top faces\n\n\t\t\t\t\tfor ( let i = 0; i < flen; i ++ ) {\n\n\t\t\t\t\t\tconst face = faces[ i ];\n\t\t\t\t\t\tf3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 0 );\n\n\t\t\t}\n\n\t\t\t// Create faces for the z-sides of the shape\n\n\t\t\tfunction buildSideFaces() {\n\n\t\t\t\tconst start = verticesArray.length / 3;\n\t\t\t\tlet layeroffset = 0;\n\t\t\t\tsidewalls( contour, layeroffset );\n\t\t\t\tlayeroffset += contour.length;\n\n\t\t\t\tfor ( let h = 0, hl = holes.length; h < hl; h ++ ) {\n\n\t\t\t\t\tconst ahole = holes[ h ];\n\t\t\t\t\tsidewalls( ahole, layeroffset );\n\n\t\t\t\t\t//, true\n\t\t\t\t\tlayeroffset += ahole.length;\n\n\t\t\t\t}\n\n\n\t\t\t\tscope.addGroup( start, verticesArray.length / 3 - start, 1 );\n\n\n\t\t\t}\n\n\t\t\tfunction sidewalls( contour, layeroffset ) {\n\n\t\t\t\tlet i = contour.length;\n\n\t\t\t\twhile ( -- i >= 0 ) {\n\n\t\t\t\t\tconst j = i;\n\t\t\t\t\tlet k = i - 1;\n\t\t\t\t\tif ( k < 0 ) k = contour.length - 1;\n\n\t\t\t\t\t//console.log('b', i,j, i-1, k,vertices.length);\n\n\t\t\t\t\tfor ( let s = 0, sl = ( steps + bevelSegments * 2 ); s < sl; s ++ ) {\n\n\t\t\t\t\t\tconst slen1 = vlen * s;\n\t\t\t\t\t\tconst slen2 = vlen * ( s + 1 );\n\n\t\t\t\t\t\tconst a = layeroffset + j + slen1,\n\t\t\t\t\t\t\tb = layeroffset + k + slen1,\n\t\t\t\t\t\t\tc = layeroffset + k + slen2,\n\t\t\t\t\t\t\td = layeroffset + j + slen2;\n\n\t\t\t\t\t\tf4( a, b, c, d );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction v( x, y, z ) {\n\n\t\t\t\tplaceholder.push( x );\n\t\t\t\tplaceholder.push( y );\n\t\t\t\tplaceholder.push( z );\n\n\t\t\t}\n\n\n\t\t\tfunction f3( a, b, c ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateTopUV( scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\n\t\t\t}\n\n\t\t\tfunction f4( a, b, c, d ) {\n\n\t\t\t\taddVertex( a );\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( d );\n\n\t\t\t\taddVertex( b );\n\t\t\t\taddVertex( c );\n\t\t\t\taddVertex( d );\n\n\n\t\t\t\tconst nextIndex = verticesArray.length / 3;\n\t\t\t\tconst uvs = uvgen.generateSideWallUV( scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1 );\n\n\t\t\t\taddUV( uvs[ 0 ] );\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t\taddUV( uvs[ 1 ] );\n\t\t\t\taddUV( uvs[ 2 ] );\n\t\t\t\taddUV( uvs[ 3 ] );\n\n\t\t\t}\n\n\t\t\tfunction addVertex( index ) {\n\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 0 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 1 ] );\n\t\t\t\tverticesArray.push( placeholder[ index * 3 + 2 ] );\n\n\t\t\t}\n\n\n\t\t\tfunction addUV( vector2 ) {\n\n\t\t\t\tuvArray.push( vector2.x );\n\t\t\t\tuvArray.push( vector2.y );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\t\tconst options = this.parameters.options;\n\n\t\treturn toJSON$1( shapes, options, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\tconst extrudePath = data.options.extrudePath;\n\n\t\tif ( extrudePath !== undefined ) {\n\n\t\t\tdata.options.extrudePath = new Curves[ extrudePath.type ]().fromJSON( extrudePath );\n\n\t\t}\n\n\t\treturn new ExtrudeGeometry( geometryShapes, data.options );\n\n\t}\n\n}\n\nconst WorldUVGenerator = {\n\n\tgenerateTopUV: function ( geometry, vertices, indexA, indexB, indexC ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\n\t\treturn [\n\t\t\tnew Vector2( a_x, a_y ),\n\t\t\tnew Vector2( b_x, b_y ),\n\t\t\tnew Vector2( c_x, c_y )\n\t\t];\n\n\t},\n\n\tgenerateSideWallUV: function ( geometry, vertices, indexA, indexB, indexC, indexD ) {\n\n\t\tconst a_x = vertices[ indexA * 3 ];\n\t\tconst a_y = vertices[ indexA * 3 + 1 ];\n\t\tconst a_z = vertices[ indexA * 3 + 2 ];\n\t\tconst b_x = vertices[ indexB * 3 ];\n\t\tconst b_y = vertices[ indexB * 3 + 1 ];\n\t\tconst b_z = vertices[ indexB * 3 + 2 ];\n\t\tconst c_x = vertices[ indexC * 3 ];\n\t\tconst c_y = vertices[ indexC * 3 + 1 ];\n\t\tconst c_z = vertices[ indexC * 3 + 2 ];\n\t\tconst d_x = vertices[ indexD * 3 ];\n\t\tconst d_y = vertices[ indexD * 3 + 1 ];\n\t\tconst d_z = vertices[ indexD * 3 + 2 ];\n\n\t\tif ( Math.abs( a_y - b_y ) < Math.abs( a_x - b_x ) ) {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_x, 1 - a_z ),\n\t\t\t\tnew Vector2( b_x, 1 - b_z ),\n\t\t\t\tnew Vector2( c_x, 1 - c_z ),\n\t\t\t\tnew Vector2( d_x, 1 - d_z )\n\t\t\t];\n\n\t\t} else {\n\n\t\t\treturn [\n\t\t\t\tnew Vector2( a_y, 1 - a_z ),\n\t\t\t\tnew Vector2( b_y, 1 - b_z ),\n\t\t\t\tnew Vector2( c_y, 1 - c_z ),\n\t\t\t\tnew Vector2( d_y, 1 - d_z )\n\t\t\t];\n\n\t\t}\n\n\t}\n\n};\n\nfunction toJSON$1( shapes, options, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\tdata.options = Object.assign( {}, options );\n\n\tif ( options.extrudePath !== undefined ) data.options.extrudePath = options.extrudePath.toJSON();\n\n\treturn data;\n\n}\n\nclass IcosahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst t = ( 1 + Math.sqrt( 5 ) ) / 2;\n\n\t\tconst vertices = [\n\t\t\t- 1, t, 0, \t1, t, 0, \t- 1, - t, 0, \t1, - t, 0,\n\t\t\t0, - 1, t, \t0, 1, t,\t0, - 1, - t, \t0, 1, - t,\n\t\t\tt, 0, - 1, \tt, 0, 1, \t- t, 0, - 1, \t- t, 0, 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 11, 5, \t0, 5, 1, \t0, 1, 7, \t0, 7, 10, \t0, 10, 11,\n\t\t\t1, 5, 9, \t5, 11, 4,\t11, 10, 2,\t10, 7, 6,\t7, 1, 8,\n\t\t\t3, 9, 4, \t3, 4, 2,\t3, 2, 6,\t3, 6, 8,\t3, 8, 9,\n\t\t\t4, 9, 5, \t2, 4, 11,\t6, 2, 10,\t8, 6, 7,\t9, 8, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'IcosahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new IcosahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass OctahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 0, 0, \t- 1, 0, 0,\t0, 1, 0,\n\t\t\t0, - 1, 0, \t0, 0, 1,\t0, 0, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t0, 2, 4,\t0, 4, 3,\t0, 3, 5,\n\t\t\t0, 5, 2,\t1, 2, 5,\t1, 5, 3,\n\t\t\t1, 3, 4,\t1, 4, 2\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'OctahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new OctahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass RingGeometry extends BufferGeometry {\n\n\tconstructor( innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'RingGeometry';\n\n\t\tthis.parameters = {\n\t\t\tinnerRadius: innerRadius,\n\t\t\touterRadius: outerRadius,\n\t\t\tthetaSegments: thetaSegments,\n\t\t\tphiSegments: phiSegments,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\tthetaSegments = Math.max( 3, thetaSegments );\n\t\tphiSegments = Math.max( 1, phiSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// some helper variables\n\n\t\tlet radius = innerRadius;\n\t\tconst radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );\n\t\tconst vertex = new Vector3();\n\t\tconst uv = new Vector2();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= phiSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= thetaSegments; i ++ ) {\n\n\t\t\t\t// values are generate from the inside of the ring to the outside\n\n\t\t\t\tconst segment = thetaStart + i / thetaSegments * thetaLength;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = radius * Math.cos( segment );\n\t\t\t\tvertex.y = radius * Math.sin( segment );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormals.push( 0, 0, 1 );\n\n\t\t\t\t// uv\n\n\t\t\t\tuv.x = ( vertex.x / outerRadius + 1 ) / 2;\n\t\t\t\tuv.y = ( vertex.y / outerRadius + 1 ) / 2;\n\n\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t}\n\n\t\t\t// increase the radius for next row of vertices\n\n\t\t\tradius += radiusStep;\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let j = 0; j < phiSegments; j ++ ) {\n\n\t\t\tconst thetaSegmentLevel = j * ( thetaSegments + 1 );\n\n\t\t\tfor ( let i = 0; i < thetaSegments; i ++ ) {\n\n\t\t\t\tconst segment = i + thetaSegmentLevel;\n\n\t\t\t\tconst a = segment;\n\t\t\t\tconst b = segment + thetaSegments + 1;\n\t\t\t\tconst c = segment + thetaSegments + 2;\n\t\t\t\tconst d = segment + 1;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new RingGeometry( data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass ShapeGeometry extends BufferGeometry {\n\n\tconstructor( shapes = new Shape( [ new Vector2( 0, 0.5 ), new Vector2( - 0.5, - 0.5 ), new Vector2( 0.5, - 0.5 ) ] ), curveSegments = 12 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ShapeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tshapes: shapes,\n\t\t\tcurveSegments: curveSegments\n\t\t};\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tlet groupStart = 0;\n\t\tlet groupCount = 0;\n\n\t\t// allow single and array values for \"shapes\" parameter\n\n\t\tif ( Array.isArray( shapes ) === false ) {\n\n\t\t\taddShape( shapes );\n\n\t\t} else {\n\n\t\t\tfor ( let i = 0; i < shapes.length; i ++ ) {\n\n\t\t\t\taddShape( shapes[ i ] );\n\n\t\t\t\tthis.addGroup( groupStart, groupCount, i ); // enables MultiMaterial support\n\n\t\t\t\tgroupStart += groupCount;\n\t\t\t\tgroupCount = 0;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\n\t\t// helper functions\n\n\t\tfunction addShape( shape ) {\n\n\t\t\tconst indexOffset = vertices.length / 3;\n\t\t\tconst points = shape.extractPoints( curveSegments );\n\n\t\t\tlet shapeVertices = points.shape;\n\t\t\tconst shapeHoles = points.holes;\n\n\t\t\t// check direction of vertices\n\n\t\t\tif ( ShapeUtils.isClockWise( shapeVertices ) === false ) {\n\n\t\t\t\tshapeVertices = shapeVertices.reverse();\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\n\t\t\t\tif ( ShapeUtils.isClockWise( shapeHole ) === true ) {\n\n\t\t\t\t\tshapeHoles[ i ] = shapeHole.reverse();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst faces = ShapeUtils.triangulateShape( shapeVertices, shapeHoles );\n\n\t\t\t// join vertices of inner and outer paths to a single array\n\n\t\t\tfor ( let i = 0, l = shapeHoles.length; i < l; i ++ ) {\n\n\t\t\t\tconst shapeHole = shapeHoles[ i ];\n\t\t\t\tshapeVertices = shapeVertices.concat( shapeHole );\n\n\t\t\t}\n\n\t\t\t// vertices, normals, uvs\n\n\t\t\tfor ( let i = 0, l = shapeVertices.length; i < l; i ++ ) {\n\n\t\t\t\tconst vertex = shapeVertices[ i ];\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, 0 );\n\t\t\t\tnormals.push( 0, 0, 1 );\n\t\t\t\tuvs.push( vertex.x, vertex.y ); // world uvs\n\n\t\t\t}\n\n\t\t\t// indices\n\n\t\t\tfor ( let i = 0, l = faces.length; i < l; i ++ ) {\n\n\t\t\t\tconst face = faces[ i ];\n\n\t\t\t\tconst a = face[ 0 ] + indexOffset;\n\t\t\t\tconst b = face[ 1 ] + indexOffset;\n\t\t\t\tconst c = face[ 2 ] + indexOffset;\n\n\t\t\t\tindices.push( a, b, c );\n\t\t\t\tgroupCount += 3;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tconst shapes = this.parameters.shapes;\n\n\t\treturn toJSON( shapes, data );\n\n\t}\n\n\tstatic fromJSON( data, shapes ) {\n\n\t\tconst geometryShapes = [];\n\n\t\tfor ( let j = 0, jl = data.shapes.length; j < jl; j ++ ) {\n\n\t\t\tconst shape = shapes[ data.shapes[ j ] ];\n\n\t\t\tgeometryShapes.push( shape );\n\n\t\t}\n\n\t\treturn new ShapeGeometry( geometryShapes, data.curveSegments );\n\n\t}\n\n}\n\nfunction toJSON( shapes, data ) {\n\n\tdata.shapes = [];\n\n\tif ( Array.isArray( shapes ) ) {\n\n\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\n\n\t\t\tconst shape = shapes[ i ];\n\n\t\t\tdata.shapes.push( shape.uuid );\n\n\t\t}\n\n\t} else {\n\n\t\tdata.shapes.push( shapes.uuid );\n\n\t}\n\n\treturn data;\n\n}\n\nclass SphereGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'SphereGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\twidthSegments: widthSegments,\n\t\t\theightSegments: heightSegments,\n\t\t\tphiStart: phiStart,\n\t\t\tphiLength: phiLength,\n\t\t\tthetaStart: thetaStart,\n\t\t\tthetaLength: thetaLength\n\t\t};\n\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\n\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\n\n\t\tlet index = 0;\n\t\tconst grid = [];\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\n\n\t\t\tconst verticesRow = [];\n\n\t\t\tconst v = iy / heightSegments;\n\n\t\t\t// special case for the poles\n\n\t\t\tlet uOffset = 0;\n\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\n\n\t\t\t\tuOffset = 0.5 / widthSegments;\n\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\n\n\t\t\t\tuOffset = - 0.5 / widthSegments;\n\n\t\t\t}\n\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\n\n\t\t\t\tconst u = ix / widthSegments;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.copy( vertex ).normalize();\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\n\n\t\t\t\tverticesRow.push( index ++ );\n\n\t\t\t}\n\n\t\t\tgrid.push( verticesRow );\n\n\t\t}\n\n\t\t// indices\n\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\n\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\n\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\n\t\t\t\tconst b = grid[ iy ][ ix ];\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\n\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\n\n\t}\n\n}\n\nclass TetrahedronGeometry extends PolyhedronGeometry {\n\n\tconstructor( radius = 1, detail = 0 ) {\n\n\t\tconst vertices = [\n\t\t\t1, 1, 1, \t- 1, - 1, 1, \t- 1, 1, - 1, \t1, - 1, - 1\n\t\t];\n\n\t\tconst indices = [\n\t\t\t2, 1, 0, \t0, 3, 2,\t1, 3, 0,\t2, 3, 1\n\t\t];\n\n\t\tsuper( vertices, indices, radius, detail );\n\n\t\tthis.type = 'TetrahedronGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\tdetail: detail\n\t\t};\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TetrahedronGeometry( data.radius, data.detail );\n\n\t}\n\n}\n\nclass TorusGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\tradialSegments: radialSegments,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tarc: arc\n\t\t};\n\n\t\tradialSegments = Math.floor( radialSegments );\n\t\ttubularSegments = Math.floor( tubularSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst center = new Vector3();\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tconst u = i / tubularSegments * arc;\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );\n\t\t\t\tvertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );\n\t\t\t\tvertex.z = tube * Math.sin( v );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal\n\n\t\t\t\tcenter.x = radius * Math.cos( u );\n\t\t\t\tcenter.y = radius * Math.sin( u );\n\t\t\t\tnormal.subVectors( vertex, center ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= radialSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= tubularSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( tubularSegments + 1 ) * j + i - 1;\n\t\t\t\tconst b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;\n\t\t\t\tconst c = ( tubularSegments + 1 ) * ( j - 1 ) + i;\n\t\t\t\tconst d = ( tubularSegments + 1 ) * j + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusGeometry( data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc );\n\n\t}\n\n}\n\nclass TorusKnotGeometry extends BufferGeometry {\n\n\tconstructor( radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p = 2, q = 3 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TorusKnotGeometry';\n\n\t\tthis.parameters = {\n\t\t\tradius: radius,\n\t\t\ttube: tube,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradialSegments: radialSegments,\n\t\t\tp: p,\n\t\t\tq: q\n\t\t};\n\n\t\ttubularSegments = Math.floor( tubularSegments );\n\t\tradialSegments = Math.floor( radialSegments );\n\n\t\t// buffers\n\n\t\tconst indices = [];\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst P1 = new Vector3();\n\t\tconst P2 = new Vector3();\n\n\t\tconst B = new Vector3();\n\t\tconst T = new Vector3();\n\t\tconst N = new Vector3();\n\n\t\t// generate vertices, normals and uvs\n\n\t\tfor ( let i = 0; i <= tubularSegments; ++ i ) {\n\n\t\t\t// the radian \"u\" is used to calculate the position on the torus curve of the current tubular segment\n\n\t\t\tconst u = i / tubularSegments * p * Math.PI * 2;\n\n\t\t\t// now we calculate two points. P1 is our current position on the curve, P2 is a little farther ahead.\n\t\t\t// these points are used to create a special \"coordinate space\", which is necessary to calculate the correct vertex positions\n\n\t\t\tcalculatePositionOnCurve( u, p, q, radius, P1 );\n\t\t\tcalculatePositionOnCurve( u + 0.01, p, q, radius, P2 );\n\n\t\t\t// calculate orthonormal basis\n\n\t\t\tT.subVectors( P2, P1 );\n\t\t\tN.addVectors( P2, P1 );\n\t\t\tB.crossVectors( T, N );\n\t\t\tN.crossVectors( B, T );\n\n\t\t\t// normalize B, N. T can be ignored, we don't use it\n\n\t\t\tB.normalize();\n\t\t\tN.normalize();\n\n\t\t\tfor ( let j = 0; j <= radialSegments; ++ j ) {\n\n\t\t\t\t// now calculate the vertices. they are nothing more than an extrusion of the torus curve.\n\t\t\t\t// because we extrude a shape in the xy-plane, there is no need to calculate a z-value.\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\t\t\t\tconst cx = - tube * Math.cos( v );\n\t\t\t\tconst cy = tube * Math.sin( v );\n\n\t\t\t\t// now calculate the final vertex position.\n\t\t\t\t// first we orient the extrusion with our basis vectors, then we add it to the current position on the curve\n\n\t\t\t\tvertex.x = P1.x + ( cx * N.x + cy * B.x );\n\t\t\t\tvertex.y = P1.y + ( cx * N.y + cy * B.y );\n\t\t\t\tvertex.z = P1.z + ( cx * N.z + cy * B.z );\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t\t// normal (P1 is always the center/origin of the extrusion, thus we can use it to calculate the normal)\n\n\t\t\t\tnormal.subVectors( vertex, P1 ).normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// uv\n\n\t\t\t\tuvs.push( i / tubularSegments );\n\t\t\t\tuvs.push( j / radialSegments );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate indices\n\n\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t// indices\n\n\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t// faces\n\n\t\t\t\tindices.push( a, b, d );\n\t\t\t\tindices.push( b, c, d );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// this function calculates the current position on the torus curve\n\n\t\tfunction calculatePositionOnCurve( u, p, q, radius, position ) {\n\n\t\t\tconst cu = Math.cos( u );\n\t\t\tconst su = Math.sin( u );\n\t\t\tconst quOverP = q / p * u;\n\t\t\tconst cs = Math.cos( quOverP );\n\n\t\t\tposition.x = radius * ( 2 + cs ) * 0.5 * cu;\n\t\t\tposition.y = radius * ( 2 + cs ) * su * 0.5;\n\t\t\tposition.z = radius * Math.sin( quOverP ) * 0.5;\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\treturn new TorusKnotGeometry( data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q );\n\n\t}\n\n}\n\nclass TubeGeometry extends BufferGeometry {\n\n\tconstructor( path = new QuadraticBezierCurve3( new Vector3( - 1, - 1, 0 ), new Vector3( - 1, 1, 0 ), new Vector3( 1, 1, 0 ) ), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'TubeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tpath: path,\n\t\t\ttubularSegments: tubularSegments,\n\t\t\tradius: radius,\n\t\t\tradialSegments: radialSegments,\n\t\t\tclosed: closed\n\t\t};\n\n\t\tconst frames = path.computeFrenetFrames( tubularSegments, closed );\n\n\t\t// expose internals\n\n\t\tthis.tangents = frames.tangents;\n\t\tthis.normals = frames.normals;\n\t\tthis.binormals = frames.binormals;\n\n\t\t// helper variables\n\n\t\tconst vertex = new Vector3();\n\t\tconst normal = new Vector3();\n\t\tconst uv = new Vector2();\n\t\tlet P = new Vector3();\n\n\t\t// buffer\n\n\t\tconst vertices = [];\n\t\tconst normals = [];\n\t\tconst uvs = [];\n\t\tconst indices = [];\n\n\t\t// create buffer data\n\n\t\tgenerateBufferData();\n\n\t\t// build geometry\n\n\t\tthis.setIndex( indices );\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\n\n\t\t// functions\n\n\t\tfunction generateBufferData() {\n\n\t\t\tfor ( let i = 0; i < tubularSegments; i ++ ) {\n\n\t\t\t\tgenerateSegment( i );\n\n\t\t\t}\n\n\t\t\t// if the geometry is not closed, generate the last row of vertices and normals\n\t\t\t// at the regular position on the given path\n\t\t\t//\n\t\t\t// if the geometry is closed, duplicate the first row of vertices and normals (uvs will differ)\n\n\t\t\tgenerateSegment( ( closed === false ) ? tubularSegments : 0 );\n\n\t\t\t// uvs are generated in a separate function.\n\t\t\t// this makes it easy compute correct values for closed geometries\n\n\t\t\tgenerateUVs();\n\n\t\t\t// finally create faces\n\n\t\t\tgenerateIndices();\n\n\t\t}\n\n\t\tfunction generateSegment( i ) {\n\n\t\t\t// we use getPointAt to sample evenly distributed points from the given path\n\n\t\t\tP = path.getPointAt( i / tubularSegments, P );\n\n\t\t\t// retrieve corresponding normal and binormal\n\n\t\t\tconst N = frames.normals[ i ];\n\t\t\tconst B = frames.binormals[ i ];\n\n\t\t\t// generate normals and vertices for the current segment\n\n\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\tconst v = j / radialSegments * Math.PI * 2;\n\n\t\t\t\tconst sin = Math.sin( v );\n\t\t\t\tconst cos = - Math.cos( v );\n\n\t\t\t\t// normal\n\n\t\t\t\tnormal.x = ( cos * N.x + sin * B.x );\n\t\t\t\tnormal.y = ( cos * N.y + sin * B.y );\n\t\t\t\tnormal.z = ( cos * N.z + sin * B.z );\n\t\t\t\tnormal.normalize();\n\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\t\t// vertex\n\n\t\t\t\tvertex.x = P.x + radius * normal.x;\n\t\t\t\tvertex.y = P.y + radius * normal.y;\n\t\t\t\tvertex.z = P.z + radius * normal.z;\n\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateIndices() {\n\n\t\t\tfor ( let j = 1; j <= tubularSegments; j ++ ) {\n\n\t\t\t\tfor ( let i = 1; i <= radialSegments; i ++ ) {\n\n\t\t\t\t\tconst a = ( radialSegments + 1 ) * ( j - 1 ) + ( i - 1 );\n\t\t\t\t\tconst b = ( radialSegments + 1 ) * j + ( i - 1 );\n\t\t\t\t\tconst c = ( radialSegments + 1 ) * j + i;\n\t\t\t\t\tconst d = ( radialSegments + 1 ) * ( j - 1 ) + i;\n\n\t\t\t\t\t// faces\n\n\t\t\t\t\tindices.push( a, b, d );\n\t\t\t\t\tindices.push( b, c, d );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction generateUVs() {\n\n\t\t\tfor ( let i = 0; i <= tubularSegments; i ++ ) {\n\n\t\t\t\tfor ( let j = 0; j <= radialSegments; j ++ ) {\n\n\t\t\t\t\tuv.x = i / tubularSegments;\n\t\t\t\t\tuv.y = j / radialSegments;\n\n\t\t\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.path = this.parameters.path.toJSON();\n\n\t\treturn data;\n\n\t}\n\n\tstatic fromJSON( data ) {\n\n\t\t// This only works for built-in curves (e.g. CatmullRomCurve3).\n\t\t// User defined curves or instances of CurvePath will not be deserialized.\n\t\treturn new TubeGeometry(\n\t\t\tnew Curves[ data.path.type ]().fromJSON( data.path ),\n\t\t\tdata.tubularSegments,\n\t\t\tdata.radius,\n\t\t\tdata.radialSegments,\n\t\t\tdata.closed\n\t\t);\n\n\t}\n\n}\n\nclass WireframeGeometry extends BufferGeometry {\n\n\tconstructor( geometry = null ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'WireframeGeometry';\n\n\t\tthis.parameters = {\n\t\t\tgeometry: geometry\n\t\t};\n\n\t\tif ( geometry !== null ) {\n\n\t\t\t// buffer\n\n\t\t\tconst vertices = [];\n\t\t\tconst edges = new Set();\n\n\t\t\t// helper variables\n\n\t\t\tconst start = new Vector3();\n\t\t\tconst end = new Vector3();\n\n\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t// indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\t\t\t\tconst indices = geometry.index;\n\t\t\t\tlet groups = geometry.groups;\n\n\t\t\t\tif ( groups.length === 0 ) {\n\n\t\t\t\t\tgroups = [ { start: 0, count: indices.count, materialIndex: 0 } ];\n\n\t\t\t\t}\n\n\t\t\t\t// create a data structure that contains all edges without duplicates\n\n\t\t\t\tfor ( let o = 0, ol = groups.length; o < ol; ++ o ) {\n\n\t\t\t\t\tconst group = groups[ o ];\n\n\t\t\t\t\tconst groupStart = group.start;\n\t\t\t\t\tconst groupCount = group.count;\n\n\t\t\t\t\tfor ( let i = groupStart, l = ( groupStart + groupCount ); i < l; i += 3 ) {\n\n\t\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t\tconst index1 = indices.getX( i + j );\n\t\t\t\t\t\t\tconst index2 = indices.getX( i + ( j + 1 ) % 3 );\n\n\t\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// non-indexed BufferGeometry\n\n\t\t\t\tconst position = geometry.attributes.position;\n\n\t\t\t\tfor ( let i = 0, l = ( position.count / 3 ); i < l; i ++ ) {\n\n\t\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\t\t// three edges per triangle, an edge is represented as (index1, index2)\n\t\t\t\t\t\t// e.g. the first triangle has the following edges: (0,1),(1,2),(2,0)\n\n\t\t\t\t\t\tconst index1 = 3 * i + j;\n\t\t\t\t\t\tconst index2 = 3 * i + ( ( j + 1 ) % 3 );\n\n\t\t\t\t\t\tstart.fromBufferAttribute( position, index1 );\n\t\t\t\t\t\tend.fromBufferAttribute( position, index2 );\n\n\t\t\t\t\t\tif ( isUniqueEdge( start, end, edges ) === true ) {\n\n\t\t\t\t\t\t\tvertices.push( start.x, start.y, start.z );\n\t\t\t\t\t\t\tvertices.push( end.x, end.y, end.z );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.parameters = Object.assign( {}, source.parameters );\n\n\t\treturn this;\n\n\t}\n\n}\n\nfunction isUniqueEdge( start, end, edges ) {\n\n\tconst hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;\n\tconst hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`; // coincident edge\n\n\tif ( edges.has( hash1 ) === true || edges.has( hash2 ) === true ) {\n\n\t\treturn false;\n\n\t} else {\n\n\t\tedges.add( hash1 );\n\t\tedges.add( hash2 );\n\t\treturn true;\n\n\t}\n\n}\n\nvar Geometries = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tBoxGeometry: BoxGeometry,\n\tCapsuleGeometry: CapsuleGeometry,\n\tCircleGeometry: CircleGeometry,\n\tConeGeometry: ConeGeometry,\n\tCylinderGeometry: CylinderGeometry,\n\tDodecahedronGeometry: DodecahedronGeometry,\n\tEdgesGeometry: EdgesGeometry,\n\tExtrudeGeometry: ExtrudeGeometry,\n\tIcosahedronGeometry: IcosahedronGeometry,\n\tLatheGeometry: LatheGeometry,\n\tOctahedronGeometry: OctahedronGeometry,\n\tPlaneGeometry: PlaneGeometry,\n\tPolyhedronGeometry: PolyhedronGeometry,\n\tRingGeometry: RingGeometry,\n\tShapeGeometry: ShapeGeometry,\n\tSphereGeometry: SphereGeometry,\n\tTetrahedronGeometry: TetrahedronGeometry,\n\tTorusGeometry: TorusGeometry,\n\tTorusKnotGeometry: TorusKnotGeometry,\n\tTubeGeometry: TubeGeometry,\n\tWireframeGeometry: WireframeGeometry\n});\n\nclass ShadowMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isShadowMaterial = true;\n\n\t\tthis.type = 'ShadowMaterial';\n\n\t\tthis.color = new Color( 0x000000 );\n\t\tthis.transparent = true;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass RawShaderMaterial extends ShaderMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper( parameters );\n\n\t\tthis.isRawShaderMaterial = true;\n\n\t\tthis.type = 'RawShaderMaterial';\n\n\t}\n\n}\n\nclass MeshStandardMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshStandardMaterial = true;\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.type = 'MeshStandardMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.roughness = 1.0;\n\t\tthis.metalness = 0.0;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.roughnessMap = null;\n\n\t\tthis.metalnessMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.envMapIntensity = 1.0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'STANDARD': '' };\n\n\t\tthis.color.copy( source.color );\n\t\tthis.roughness = source.roughness;\n\t\tthis.metalness = source.metalness;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.roughnessMap = source.roughnessMap;\n\n\t\tthis.metalnessMap = source.metalnessMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.envMapIntensity = source.envMapIntensity;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhysicalMaterial extends MeshStandardMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhysicalMaterial = true;\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.type = 'MeshPhysicalMaterial';\n\n\t\tthis.anisotropyRotation = 0;\n\t\tthis.anisotropyMap = null;\n\n\t\tthis.clearcoatMap = null;\n\t\tthis.clearcoatRoughness = 0.0;\n\t\tthis.clearcoatRoughnessMap = null;\n\t\tthis.clearcoatNormalScale = new Vector2( 1, 1 );\n\t\tthis.clearcoatNormalMap = null;\n\n\t\tthis.ior = 1.5;\n\n\t\tObject.defineProperty( this, 'reflectivity', {\n\t\t\tget: function () {\n\n\t\t\t\treturn ( clamp( 2.5 * ( this.ior - 1 ) / ( this.ior + 1 ), 0, 1 ) );\n\n\t\t\t},\n\t\t\tset: function ( reflectivity ) {\n\n\t\t\t\tthis.ior = ( 1 + 0.4 * reflectivity ) / ( 1 - 0.4 * reflectivity );\n\n\t\t\t}\n\t\t} );\n\n\t\tthis.iridescenceMap = null;\n\t\tthis.iridescenceIOR = 1.3;\n\t\tthis.iridescenceThicknessRange = [ 100, 400 ];\n\t\tthis.iridescenceThicknessMap = null;\n\n\t\tthis.sheenColor = new Color( 0x000000 );\n\t\tthis.sheenColorMap = null;\n\t\tthis.sheenRoughness = 1.0;\n\t\tthis.sheenRoughnessMap = null;\n\n\t\tthis.transmissionMap = null;\n\n\t\tthis.thickness = 0;\n\t\tthis.thicknessMap = null;\n\t\tthis.attenuationDistance = Infinity;\n\t\tthis.attenuationColor = new Color( 1, 1, 1 );\n\n\t\tthis.specularIntensity = 1.0;\n\t\tthis.specularIntensityMap = null;\n\t\tthis.specularColor = new Color( 1, 1, 1 );\n\t\tthis.specularColorMap = null;\n\n\t\tthis._anisotropy = 0;\n\t\tthis._clearcoat = 0;\n\t\tthis._iridescence = 0;\n\t\tthis._sheen = 0.0;\n\t\tthis._transmission = 0;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tget anisotropy() {\n\n\t\treturn this._anisotropy;\n\n\t}\n\n\tset anisotropy( value ) {\n\n\t\tif ( this._anisotropy > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._anisotropy = value;\n\n\t}\n\n\tget clearcoat() {\n\n\t\treturn this._clearcoat;\n\n\t}\n\n\tset clearcoat( value ) {\n\n\t\tif ( this._clearcoat > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._clearcoat = value;\n\n\t}\n\n\tget iridescence() {\n\n\t\treturn this._iridescence;\n\n\t}\n\n\tset iridescence( value ) {\n\n\t\tif ( this._iridescence > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._iridescence = value;\n\n\t}\n\n\tget sheen() {\n\n\t\treturn this._sheen;\n\n\t}\n\n\tset sheen( value ) {\n\n\t\tif ( this._sheen > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._sheen = value;\n\n\t}\n\n\tget transmission() {\n\n\t\treturn this._transmission;\n\n\t}\n\n\tset transmission( value ) {\n\n\t\tif ( this._transmission > 0 !== value > 0 ) {\n\n\t\t\tthis.version ++;\n\n\t\t}\n\n\t\tthis._transmission = value;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = {\n\n\t\t\t'STANDARD': '',\n\t\t\t'PHYSICAL': ''\n\n\t\t};\n\n\t\tthis.anisotropy = source.anisotropy;\n\t\tthis.anisotropyRotation = source.anisotropyRotation;\n\t\tthis.anisotropyMap = source.anisotropyMap;\n\n\t\tthis.clearcoat = source.clearcoat;\n\t\tthis.clearcoatMap = source.clearcoatMap;\n\t\tthis.clearcoatRoughness = source.clearcoatRoughness;\n\t\tthis.clearcoatRoughnessMap = source.clearcoatRoughnessMap;\n\t\tthis.clearcoatNormalMap = source.clearcoatNormalMap;\n\t\tthis.clearcoatNormalScale.copy( source.clearcoatNormalScale );\n\n\t\tthis.ior = source.ior;\n\n\t\tthis.iridescence = source.iridescence;\n\t\tthis.iridescenceMap = source.iridescenceMap;\n\t\tthis.iridescenceIOR = source.iridescenceIOR;\n\t\tthis.iridescenceThicknessRange = [ ...source.iridescenceThicknessRange ];\n\t\tthis.iridescenceThicknessMap = source.iridescenceThicknessMap;\n\n\t\tthis.sheen = source.sheen;\n\t\tthis.sheenColor.copy( source.sheenColor );\n\t\tthis.sheenColorMap = source.sheenColorMap;\n\t\tthis.sheenRoughness = source.sheenRoughness;\n\t\tthis.sheenRoughnessMap = source.sheenRoughnessMap;\n\n\t\tthis.transmission = source.transmission;\n\t\tthis.transmissionMap = source.transmissionMap;\n\n\t\tthis.thickness = source.thickness;\n\t\tthis.thicknessMap = source.thicknessMap;\n\t\tthis.attenuationDistance = source.attenuationDistance;\n\t\tthis.attenuationColor.copy( source.attenuationColor );\n\n\t\tthis.specularIntensity = source.specularIntensity;\n\t\tthis.specularIntensityMap = source.specularIntensityMap;\n\t\tthis.specularColor.copy( source.specularColor );\n\t\tthis.specularColorMap = source.specularColorMap;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshPhongMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshPhongMaterial = true;\n\n\t\tthis.type = 'MeshPhongMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\t\tthis.specular = new Color( 0x111111 );\n\t\tthis.shininess = 30;\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.specular.copy( source.specular );\n\t\tthis.shininess = source.shininess;\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshToonMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshToonMaterial = true;\n\n\t\tthis.defines = { 'TOON': '' };\n\n\t\tthis.type = 'MeshToonMaterial';\n\n\t\tthis.color = new Color( 0xffffff );\n\n\t\tthis.map = null;\n\t\tthis.gradientMap = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\t\tthis.gradientMap = source.gradientMap;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshNormalMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshNormalMaterial = true;\n\n\t\tthis.type = 'MeshNormalMaterial';\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshLambertMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshLambertMaterial = true;\n\n\t\tthis.type = 'MeshLambertMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.map = null;\n\n\t\tthis.lightMap = null;\n\t\tthis.lightMapIntensity = 1.0;\n\n\t\tthis.aoMap = null;\n\t\tthis.aoMapIntensity = 1.0;\n\n\t\tthis.emissive = new Color( 0x000000 );\n\t\tthis.emissiveIntensity = 1.0;\n\t\tthis.emissiveMap = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.specularMap = null;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.envMap = null;\n\t\tthis.combine = MultiplyOperation;\n\t\tthis.reflectivity = 1;\n\t\tthis.refractionRatio = 0.98;\n\n\t\tthis.wireframe = false;\n\t\tthis.wireframeLinewidth = 1;\n\t\tthis.wireframeLinecap = 'round';\n\t\tthis.wireframeLinejoin = 'round';\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.map = source.map;\n\n\t\tthis.lightMap = source.lightMap;\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\n\n\t\tthis.aoMap = source.aoMap;\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\n\n\t\tthis.emissive.copy( source.emissive );\n\t\tthis.emissiveMap = source.emissiveMap;\n\t\tthis.emissiveIntensity = source.emissiveIntensity;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.specularMap = source.specularMap;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.envMap = source.envMap;\n\t\tthis.combine = source.combine;\n\t\tthis.reflectivity = source.reflectivity;\n\t\tthis.refractionRatio = source.refractionRatio;\n\n\t\tthis.wireframe = source.wireframe;\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass MeshMatcapMaterial extends Material {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isMeshMatcapMaterial = true;\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.type = 'MeshMatcapMaterial';\n\n\t\tthis.color = new Color( 0xffffff ); // diffuse\n\n\t\tthis.matcap = null;\n\n\t\tthis.map = null;\n\n\t\tthis.bumpMap = null;\n\t\tthis.bumpScale = 1;\n\n\t\tthis.normalMap = null;\n\t\tthis.normalMapType = TangentSpaceNormalMap;\n\t\tthis.normalScale = new Vector2( 1, 1 );\n\n\t\tthis.displacementMap = null;\n\t\tthis.displacementScale = 1;\n\t\tthis.displacementBias = 0;\n\n\t\tthis.alphaMap = null;\n\n\t\tthis.flatShading = false;\n\n\t\tthis.fog = true;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.defines = { 'MATCAP': '' };\n\n\t\tthis.color.copy( source.color );\n\n\t\tthis.matcap = source.matcap;\n\n\t\tthis.map = source.map;\n\n\t\tthis.bumpMap = source.bumpMap;\n\t\tthis.bumpScale = source.bumpScale;\n\n\t\tthis.normalMap = source.normalMap;\n\t\tthis.normalMapType = source.normalMapType;\n\t\tthis.normalScale.copy( source.normalScale );\n\n\t\tthis.displacementMap = source.displacementMap;\n\t\tthis.displacementScale = source.displacementScale;\n\t\tthis.displacementBias = source.displacementBias;\n\n\t\tthis.alphaMap = source.alphaMap;\n\n\t\tthis.flatShading = source.flatShading;\n\n\t\tthis.fog = source.fog;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass LineDashedMaterial extends LineBasicMaterial {\n\n\tconstructor( parameters ) {\n\n\t\tsuper();\n\n\t\tthis.isLineDashedMaterial = true;\n\n\t\tthis.type = 'LineDashedMaterial';\n\n\t\tthis.scale = 1;\n\t\tthis.dashSize = 3;\n\t\tthis.gapSize = 1;\n\n\t\tthis.setValues( parameters );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.scale = source.scale;\n\t\tthis.dashSize = source.dashSize;\n\t\tthis.gapSize = source.gapSize;\n\n\t\treturn this;\n\n\t}\n\n}\n\n// converts an array to a specific type\nfunction convertArray( array, type, forceClone ) {\n\n\tif ( ! array || // let 'undefined' and 'null' pass\n\t\t! forceClone && array.constructor === type ) return array;\n\n\tif ( typeof type.BYTES_PER_ELEMENT === 'number' ) {\n\n\t\treturn new type( array ); // create typed array\n\n\t}\n\n\treturn Array.prototype.slice.call( array ); // create Array\n\n}\n\nfunction isTypedArray( object ) {\n\n\treturn ArrayBuffer.isView( object ) &&\n\t\t! ( object instanceof DataView );\n\n}\n\n// returns an array by which times and values can be sorted\nfunction getKeyframeOrder( times ) {\n\n\tfunction compareTime( i, j ) {\n\n\t\treturn times[ i ] - times[ j ];\n\n\t}\n\n\tconst n = times.length;\n\tconst result = new Array( n );\n\tfor ( let i = 0; i !== n; ++ i ) result[ i ] = i;\n\n\tresult.sort( compareTime );\n\n\treturn result;\n\n}\n\n// uses the array previously returned by 'getKeyframeOrder' to sort data\nfunction sortedArray( values, stride, order ) {\n\n\tconst nValues = values.length;\n\tconst result = new values.constructor( nValues );\n\n\tfor ( let i = 0, dstOffset = 0; dstOffset !== nValues; ++ i ) {\n\n\t\tconst srcOffset = order[ i ] * stride;\n\n\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\tresult[ dstOffset ++ ] = values[ srcOffset + j ];\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n// function for parsing AOS keyframe formats\nfunction flattenJSON( jsonKeys, times, values, valuePropertyName ) {\n\n\tlet i = 1, key = jsonKeys[ 0 ];\n\n\twhile ( key !== undefined && key[ valuePropertyName ] === undefined ) {\n\n\t\tkey = jsonKeys[ i ++ ];\n\n\t}\n\n\tif ( key === undefined ) return; // no data\n\n\tlet value = key[ valuePropertyName ];\n\tif ( value === undefined ) return; // no data\n\n\tif ( Array.isArray( value ) ) {\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push.apply( values, value ); // push all elements\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else if ( value.toArray !== undefined ) {\n\n\t\t// ...assume THREE.Math-ish\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalue.toArray( values, values.length );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t} else {\n\n\t\t// otherwise push as-is\n\n\t\tdo {\n\n\t\t\tvalue = key[ valuePropertyName ];\n\n\t\t\tif ( value !== undefined ) {\n\n\t\t\t\ttimes.push( key.time );\n\t\t\t\tvalues.push( value );\n\n\t\t\t}\n\n\t\t\tkey = jsonKeys[ i ++ ];\n\n\t\t} while ( key !== undefined );\n\n\t}\n\n}\n\nfunction subclip( sourceClip, name, startFrame, endFrame, fps = 30 ) {\n\n\tconst clip = sourceClip.clone();\n\n\tclip.name = name;\n\n\tconst tracks = [];\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tconst track = clip.tracks[ i ];\n\t\tconst valueSize = track.getValueSize();\n\n\t\tconst times = [];\n\t\tconst values = [];\n\n\t\tfor ( let j = 0; j < track.times.length; ++ j ) {\n\n\t\t\tconst frame = track.times[ j ] * fps;\n\n\t\t\tif ( frame < startFrame || frame >= endFrame ) continue;\n\n\t\t\ttimes.push( track.times[ j ] );\n\n\t\t\tfor ( let k = 0; k < valueSize; ++ k ) {\n\n\t\t\t\tvalues.push( track.values[ j * valueSize + k ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( times.length === 0 ) continue;\n\n\t\ttrack.times = convertArray( times, track.times.constructor );\n\t\ttrack.values = convertArray( values, track.values.constructor );\n\n\t\ttracks.push( track );\n\n\t}\n\n\tclip.tracks = tracks;\n\n\t// find minimum .times value across all tracks in the trimmed clip\n\n\tlet minStartTime = Infinity;\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tif ( minStartTime > clip.tracks[ i ].times[ 0 ] ) {\n\n\t\t\tminStartTime = clip.tracks[ i ].times[ 0 ];\n\n\t\t}\n\n\t}\n\n\t// shift all tracks such that clip begins at t=0\n\n\tfor ( let i = 0; i < clip.tracks.length; ++ i ) {\n\n\t\tclip.tracks[ i ].shift( - 1 * minStartTime );\n\n\t}\n\n\tclip.resetDuration();\n\n\treturn clip;\n\n}\n\nfunction makeClipAdditive( targetClip, referenceFrame = 0, referenceClip = targetClip, fps = 30 ) {\n\n\tif ( fps <= 0 ) fps = 30;\n\n\tconst numTracks = referenceClip.tracks.length;\n\tconst referenceTime = referenceFrame / fps;\n\n\t// Make each track's values relative to the values at the reference frame\n\tfor ( let i = 0; i < numTracks; ++ i ) {\n\n\t\tconst referenceTrack = referenceClip.tracks[ i ];\n\t\tconst referenceTrackType = referenceTrack.ValueTypeName;\n\n\t\t// Skip this track if it's non-numeric\n\t\tif ( referenceTrackType === 'bool' || referenceTrackType === 'string' ) continue;\n\n\t\t// Find the track in the target clip whose name and type matches the reference track\n\t\tconst targetTrack = targetClip.tracks.find( function ( track ) {\n\n\t\t\treturn track.name === referenceTrack.name\n\t\t\t\t&& track.ValueTypeName === referenceTrackType;\n\n\t\t} );\n\n\t\tif ( targetTrack === undefined ) continue;\n\n\t\tlet referenceOffset = 0;\n\t\tconst referenceValueSize = referenceTrack.getValueSize();\n\n\t\tif ( referenceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\treferenceOffset = referenceValueSize / 3;\n\n\t\t}\n\n\t\tlet targetOffset = 0;\n\t\tconst targetValueSize = targetTrack.getValueSize();\n\n\t\tif ( targetTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline ) {\n\n\t\t\ttargetOffset = targetValueSize / 3;\n\n\t\t}\n\n\t\tconst lastIndex = referenceTrack.times.length - 1;\n\t\tlet referenceValue;\n\n\t\t// Find the value to subtract out of the track\n\t\tif ( referenceTime <= referenceTrack.times[ 0 ] ) {\n\n\t\t\t// Reference frame is earlier than the first keyframe, so just use the first keyframe\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else if ( referenceTime >= referenceTrack.times[ lastIndex ] ) {\n\n\t\t\t// Reference frame is after the last keyframe, so just use the last keyframe\n\t\t\tconst startIndex = lastIndex * referenceValueSize + referenceOffset;\n\t\t\tconst endIndex = startIndex + referenceValueSize - referenceOffset;\n\t\t\treferenceValue = referenceTrack.values.slice( startIndex, endIndex );\n\n\t\t} else {\n\n\t\t\t// Interpolate to the reference value\n\t\t\tconst interpolant = referenceTrack.createInterpolant();\n\t\t\tconst startIndex = referenceOffset;\n\t\t\tconst endIndex = referenceValueSize - referenceOffset;\n\t\t\tinterpolant.evaluate( referenceTime );\n\t\t\treferenceValue = interpolant.resultBuffer.slice( startIndex, endIndex );\n\n\t\t}\n\n\t\t// Conjugate the quaternion\n\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\tconst referenceQuat = new Quaternion().fromArray( referenceValue ).normalize().conjugate();\n\t\t\treferenceQuat.toArray( referenceValue );\n\n\t\t}\n\n\t\t// Subtract the reference value from all of the track values\n\n\t\tconst numTimes = targetTrack.times.length;\n\t\tfor ( let j = 0; j < numTimes; ++ j ) {\n\n\t\t\tconst valueStart = j * targetValueSize + targetOffset;\n\n\t\t\tif ( referenceTrackType === 'quaternion' ) {\n\n\t\t\t\t// Multiply the conjugate for quaternion track types\n\t\t\t\tQuaternion.multiplyQuaternionsFlat(\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart,\n\t\t\t\t\treferenceValue,\n\t\t\t\t\t0,\n\t\t\t\t\ttargetTrack.values,\n\t\t\t\t\tvalueStart\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\tconst valueEnd = targetValueSize - targetOffset * 2;\n\n\t\t\t\t// Subtract each value for all other numeric track types\n\t\t\t\tfor ( let k = 0; k < valueEnd; ++ k ) {\n\n\t\t\t\t\ttargetTrack.values[ valueStart + k ] -= referenceValue[ k ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\ttargetClip.blendMode = AdditiveAnimationBlendMode;\n\n\treturn targetClip;\n\n}\n\nconst AnimationUtils = {\n\tconvertArray: convertArray,\n\tisTypedArray: isTypedArray,\n\tgetKeyframeOrder: getKeyframeOrder,\n\tsortedArray: sortedArray,\n\tflattenJSON: flattenJSON,\n\tsubclip: subclip,\n\tmakeClipAdditive: makeClipAdditive\n};\n\n/**\n * Abstract base class of interpolants over parametric samples.\n *\n * The parameter domain is one dimensional, typically the time or a path\n * along a curve defined by the data.\n *\n * The sample values can have any dimensionality and derived classes may\n * apply special interpretations to the data.\n *\n * This class provides the interval seek in a Template Method, deferring\n * the actual interpolation to derived classes.\n *\n * Time complexity is O(1) for linear access crossing at most two points\n * and O(log N) for random access, where N is the number of positions.\n *\n * References:\n *\n * \t\thttp://www.oodesign.com/template-method-pattern.html\n *\n */\n\nclass Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tthis.parameterPositions = parameterPositions;\n\t\tthis._cachedIndex = 0;\n\n\t\tthis.resultBuffer = resultBuffer !== undefined ?\n\t\t\tresultBuffer : new sampleValues.constructor( sampleSize );\n\t\tthis.sampleValues = sampleValues;\n\t\tthis.valueSize = sampleSize;\n\n\t\tthis.settings = null;\n\t\tthis.DefaultSettings_ = {};\n\n\t}\n\n\tevaluate( t ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet i1 = this._cachedIndex,\n\t\t\tt1 = pp[ i1 ],\n\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\tvalidate_interval: {\n\n\t\t\tseek: {\n\n\t\t\t\tlet right;\n\n\t\t\t\tlinear_scan: {\n\n\t\t\t\t\t//- See http://jsperf.com/comparison-to-undefined/3\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\n\t\t\t\t\t//- \t\t\t\tif ( t >= t1 || t1 === undefined ) {\n\t\t\t\t\tforward_scan: if ( ! ( t < t1 ) ) {\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 + 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\t\t\t\tif ( t < t0 ) break forward_scan;\n\n\t\t\t\t\t\t\t\t// after end\n\n\t\t\t\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt0 = t1;\n\t\t\t\t\t\t\tt1 = pp[ ++ i1 ];\n\n\t\t\t\t\t\t\tif ( t < t1 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the right side of the index\n\t\t\t\t\t\tright = pp.length;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t//- slower code:\n\t\t\t\t\t//-\t\t\t\t\tif ( t < t0 || t0 === undefined ) {\n\t\t\t\t\tif ( ! ( t >= t0 ) ) {\n\n\t\t\t\t\t\t// looping?\n\n\t\t\t\t\t\tconst t1global = pp[ 1 ];\n\n\t\t\t\t\t\tif ( t < t1global ) {\n\n\t\t\t\t\t\t\ti1 = 2; // + 1, using the scan for the details\n\t\t\t\t\t\t\tt0 = t1global;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// linear reverse scan\n\n\t\t\t\t\t\tfor ( let giveUpAt = i1 - 2; ; ) {\n\n\t\t\t\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\t\t\t\t// before start\n\n\t\t\t\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( i1 === giveUpAt ) break; // this loop\n\n\t\t\t\t\t\t\tt1 = t0;\n\t\t\t\t\t\t\tt0 = pp[ -- i1 - 1 ];\n\n\t\t\t\t\t\t\tif ( t >= t0 ) {\n\n\t\t\t\t\t\t\t\t// we have arrived at the sought interval\n\t\t\t\t\t\t\t\tbreak seek;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// prepare binary search on the left side of the index\n\t\t\t\t\t\tright = i1;\n\t\t\t\t\t\ti1 = 0;\n\t\t\t\t\t\tbreak linear_scan;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// the interval is valid\n\n\t\t\t\t\tbreak validate_interval;\n\n\t\t\t\t} // linear scan\n\n\t\t\t\t// binary search\n\n\t\t\t\twhile ( i1 < right ) {\n\n\t\t\t\t\tconst mid = ( i1 + right ) >>> 1;\n\n\t\t\t\t\tif ( t < pp[ mid ] ) {\n\n\t\t\t\t\t\tright = mid;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ti1 = mid + 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tt1 = pp[ i1 ];\n\t\t\t\tt0 = pp[ i1 - 1 ];\n\n\t\t\t\t// check boundary cases, again\n\n\t\t\t\tif ( t0 === undefined ) {\n\n\t\t\t\t\tthis._cachedIndex = 0;\n\t\t\t\t\treturn this.copySampleValue_( 0 );\n\n\t\t\t\t}\n\n\t\t\t\tif ( t1 === undefined ) {\n\n\t\t\t\t\ti1 = pp.length;\n\t\t\t\t\tthis._cachedIndex = i1;\n\t\t\t\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t\t\t\t}\n\n\t\t\t} // seek\n\n\t\t\tthis._cachedIndex = i1;\n\n\t\t\tthis.intervalChanged_( i1, t0, t1 );\n\n\t\t} // validate_interval\n\n\t\treturn this.interpolate_( i1, t0, t, t1 );\n\n\t}\n\n\tgetSettings_() {\n\n\t\treturn this.settings || this.DefaultSettings_;\n\n\t}\n\n\tcopySampleValue_( index ) {\n\n\t\t// copies a sample value to the result buffer\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = index * stride;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\t// Template methods for derived classes:\n\n\tinterpolate_( /* i1, t0, t, t1 */ ) {\n\n\t\tthrow new Error( 'call to abstract method' );\n\t\t// implementations shall return this.resultBuffer\n\n\t}\n\n\tintervalChanged_( /* i1, t0, t1 */ ) {\n\n\t\t// empty\n\n\t}\n\n}\n\n/**\n * Fast and simple cubic spline interpolant.\n *\n * It was derived from a Hermitian construction setting the first derivative\n * at each sample position to the linear slope between neighboring positions\n * over their parameter interval.\n */\n\nclass CubicInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t\tthis._weightPrev = - 0;\n\t\tthis._offsetPrev = - 0;\n\t\tthis._weightNext = - 0;\n\t\tthis._offsetNext = - 0;\n\n\t\tthis.DefaultSettings_ = {\n\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\n\t\t};\n\n\t}\n\n\tintervalChanged_( i1, t0, t1 ) {\n\n\t\tconst pp = this.parameterPositions;\n\t\tlet iPrev = i1 - 2,\n\t\t\tiNext = i1 + 1,\n\n\t\t\ttPrev = pp[ iPrev ],\n\t\t\ttNext = pp[ iNext ];\n\n\t\tif ( tPrev === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingStart ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(t0) = 0\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = 2 * t0 - t1;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiPrev = pp.length - 2;\n\t\t\t\t\ttPrev = t0 + pp[ iPrev ] - pp[ iPrev + 1 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(t0) = 0 a.k.a. Natural Spline\n\t\t\t\t\tiPrev = i1;\n\t\t\t\t\ttPrev = t1;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tNext === undefined ) {\n\n\t\t\tswitch ( this.getSettings_().endingEnd ) {\n\n\t\t\t\tcase ZeroSlopeEnding:\n\n\t\t\t\t\t// f'(tN) = 0\n\t\t\t\t\tiNext = i1;\n\t\t\t\t\ttNext = 2 * t1 - t0;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase WrapAroundEnding:\n\n\t\t\t\t\t// use the other end of the curve\n\t\t\t\t\tiNext = 1;\n\t\t\t\t\ttNext = t1 + pp[ 1 ] - pp[ 0 ];\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault: // ZeroCurvatureEnding\n\n\t\t\t\t\t// f''(tN) = 0, a.k.a. Natural Spline\n\t\t\t\t\tiNext = i1 - 1;\n\t\t\t\t\ttNext = t0;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst halfDt = ( t1 - t0 ) * 0.5,\n\t\t\tstride = this.valueSize;\n\n\t\tthis._weightPrev = halfDt / ( t0 - tPrev );\n\t\tthis._weightNext = halfDt / ( tNext - t1 );\n\t\tthis._offsetPrev = iPrev * stride;\n\t\tthis._offsetNext = iNext * stride;\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\to1 = i1 * stride,\t\to0 = o1 - stride,\n\t\t\toP = this._offsetPrev, \toN = this._offsetNext,\n\t\t\twP = this._weightPrev,\twN = this._weightNext,\n\n\t\t\tp = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tpp = p * p,\n\t\t\tppp = pp * p;\n\n\t\t// evaluate polynomials\n\n\t\tconst sP = - wP * ppp + 2 * wP * pp - wP * p;\n\t\tconst s0 = ( 1 + wP ) * ppp + ( - 1.5 - 2 * wP ) * pp + ( - 0.5 + wP ) * p + 1;\n\t\tconst s1 = ( - 1 - wN ) * ppp + ( 1.5 + wN ) * pp + 0.5 * p;\n\t\tconst sN = wN * ppp - wN * pp;\n\n\t\t// combine data linearly\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tsP * values[ oP + i ] +\n\t\t\t\t\ts0 * values[ o0 + i ] +\n\t\t\t\t\ts1 * values[ o1 + i ] +\n\t\t\t\t\tsN * values[ oN + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\nclass LinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\toffset1 = i1 * stride,\n\t\t\toffset0 = offset1 - stride,\n\n\t\t\tweight1 = ( t - t0 ) / ( t1 - t0 ),\n\t\t\tweight0 = 1 - weight1;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tresult[ i ] =\n\t\t\t\t\tvalues[ offset0 + i ] * weight0 +\n\t\t\t\t\tvalues[ offset1 + i ] * weight1;\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n *\n * Interpolant that evaluates to the sample value at the position preceding\n * the parameter.\n */\n\nclass DiscreteInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1 /*, t0, t, t1 */ ) {\n\n\t\treturn this.copySampleValue_( i1 - 1 );\n\n\t}\n\n}\n\nclass KeyframeTrack {\n\n\tconstructor( name, times, values, interpolation ) {\n\n\t\tif ( name === undefined ) throw new Error( 'THREE.KeyframeTrack: track name is undefined' );\n\t\tif ( times === undefined || times.length === 0 ) throw new Error( 'THREE.KeyframeTrack: no keyframes in track named ' + name );\n\n\t\tthis.name = name;\n\n\t\tthis.times = convertArray( times, this.TimeBufferType );\n\t\tthis.values = convertArray( values, this.ValueBufferType );\n\n\t\tthis.setInterpolation( interpolation || this.DefaultInterpolation );\n\n\t}\n\n\t// Serialization (in static context, because of constructor invocation\n\t// and automatic invocation of .toJSON):\n\n\tstatic toJSON( track ) {\n\n\t\tconst trackType = track.constructor;\n\n\t\tlet json;\n\n\t\t// derived classes can define a static toJSON method\n\t\tif ( trackType.toJSON !== this.toJSON ) {\n\n\t\t\tjson = trackType.toJSON( track );\n\n\t\t} else {\n\n\t\t\t// by default, we assume the data can be serialized as-is\n\t\t\tjson = {\n\n\t\t\t\t'name': track.name,\n\t\t\t\t'times': convertArray( track.times, Array ),\n\t\t\t\t'values': convertArray( track.values, Array )\n\n\t\t\t};\n\n\t\t\tconst interpolation = track.getInterpolation();\n\n\t\t\tif ( interpolation !== track.DefaultInterpolation ) {\n\n\t\t\t\tjson.interpolation = interpolation;\n\n\t\t\t}\n\n\t\t}\n\n\t\tjson.type = track.ValueTypeName; // mandatory\n\n\t\treturn json;\n\n\t}\n\n\tInterpolantFactoryMethodDiscrete( result ) {\n\n\t\treturn new DiscreteInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new LinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tInterpolantFactoryMethodSmooth( result ) {\n\n\t\treturn new CubicInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n\tsetInterpolation( interpolation ) {\n\n\t\tlet factoryMethod;\n\n\t\tswitch ( interpolation ) {\n\n\t\t\tcase InterpolateDiscrete:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodDiscrete;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateLinear:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodLinear;\n\n\t\t\t\tbreak;\n\n\t\t\tcase InterpolateSmooth:\n\n\t\t\t\tfactoryMethod = this.InterpolantFactoryMethodSmooth;\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( factoryMethod === undefined ) {\n\n\t\t\tconst message = 'unsupported interpolation for ' +\n\t\t\t\tthis.ValueTypeName + ' keyframe track named ' + this.name;\n\n\t\t\tif ( this.createInterpolant === undefined ) {\n\n\t\t\t\t// fall back to default, unless the default itself is messed up\n\t\t\t\tif ( interpolation !== this.DefaultInterpolation ) {\n\n\t\t\t\t\tthis.setInterpolation( this.DefaultInterpolation );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new Error( message ); // fatal, in this case\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.KeyframeTrack:', message );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis.createInterpolant = factoryMethod;\n\n\t\treturn this;\n\n\t}\n\n\tgetInterpolation() {\n\n\t\tswitch ( this.createInterpolant ) {\n\n\t\t\tcase this.InterpolantFactoryMethodDiscrete:\n\n\t\t\t\treturn InterpolateDiscrete;\n\n\t\t\tcase this.InterpolantFactoryMethodLinear:\n\n\t\t\t\treturn InterpolateLinear;\n\n\t\t\tcase this.InterpolantFactoryMethodSmooth:\n\n\t\t\t\treturn InterpolateSmooth;\n\n\t\t}\n\n\t}\n\n\tgetValueSize() {\n\n\t\treturn this.values.length / this.times.length;\n\n\t}\n\n\t// move all keyframes either forwards or backwards in time\n\tshift( timeOffset ) {\n\n\t\tif ( timeOffset !== 0.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] += timeOffset;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// scale all keyframe times by a factor (useful for frame <-> seconds conversions)\n\tscale( timeScale ) {\n\n\t\tif ( timeScale !== 1.0 ) {\n\n\t\t\tconst times = this.times;\n\n\t\t\tfor ( let i = 0, n = times.length; i !== n; ++ i ) {\n\n\t\t\t\ttimes[ i ] *= timeScale;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// removes keyframes before and after animation without changing any values within the range [startTime, endTime].\n\t// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values\n\ttrim( startTime, endTime ) {\n\n\t\tconst times = this.times,\n\t\t\tnKeys = times.length;\n\n\t\tlet from = 0,\n\t\t\tto = nKeys - 1;\n\n\t\twhile ( from !== nKeys && times[ from ] < startTime ) {\n\n\t\t\t++ from;\n\n\t\t}\n\n\t\twhile ( to !== - 1 && times[ to ] > endTime ) {\n\n\t\t\t-- to;\n\n\t\t}\n\n\t\t++ to; // inclusive -> exclusive bound\n\n\t\tif ( from !== 0 || to !== nKeys ) {\n\n\t\t\t// empty tracks are forbidden, so keep at least one keyframe\n\t\t\tif ( from >= to ) {\n\n\t\t\t\tto = Math.max( to, 1 );\n\t\t\t\tfrom = to - 1;\n\n\t\t\t}\n\n\t\t\tconst stride = this.getValueSize();\n\t\t\tthis.times = times.slice( from, to );\n\t\t\tthis.values = this.values.slice( from * stride, to * stride );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tconst valueSize = this.getValueSize();\n\t\tif ( valueSize - Math.floor( valueSize ) !== 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Invalid value size in track.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tconst times = this.times,\n\t\t\tvalues = this.values,\n\n\t\t\tnKeys = times.length;\n\n\t\tif ( nKeys === 0 ) {\n\n\t\t\tconsole.error( 'THREE.KeyframeTrack: Track is empty.', this );\n\t\t\tvalid = false;\n\n\t\t}\n\n\t\tlet prevTime = null;\n\n\t\tfor ( let i = 0; i !== nKeys; i ++ ) {\n\n\t\t\tconst currTime = times[ i ];\n\n\t\t\tif ( typeof currTime === 'number' && isNaN( currTime ) ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Time is not a valid number.', this, i, currTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( prevTime !== null && prevTime > currTime ) {\n\n\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Out of order keys.', this, i, currTime, prevTime );\n\t\t\t\tvalid = false;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tprevTime = currTime;\n\n\t\t}\n\n\t\tif ( values !== undefined ) {\n\n\t\t\tif ( isTypedArray( values ) ) {\n\n\t\t\t\tfor ( let i = 0, n = values.length; i !== n; ++ i ) {\n\n\t\t\t\t\tconst value = values[ i ];\n\n\t\t\t\t\tif ( isNaN( value ) ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.KeyframeTrack: Value is not a valid number.', this, i, value );\n\t\t\t\t\t\tvalid = false;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\t// removes equivalent sequential keys as common in morph target sequences\n\t// (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)\n\toptimize() {\n\n\t\t// times or values may be shared with other tracks, so overwriting is unsafe\n\t\tconst times = this.times.slice(),\n\t\t\tvalues = this.values.slice(),\n\t\t\tstride = this.getValueSize(),\n\n\t\t\tsmoothInterpolation = this.getInterpolation() === InterpolateSmooth,\n\n\t\t\tlastIndex = times.length - 1;\n\n\t\tlet writeIndex = 1;\n\n\t\tfor ( let i = 1; i < lastIndex; ++ i ) {\n\n\t\t\tlet keep = false;\n\n\t\t\tconst time = times[ i ];\n\t\t\tconst timeNext = times[ i + 1 ];\n\n\t\t\t// remove adjacent keyframes scheduled at the same time\n\n\t\t\tif ( time !== timeNext && ( i !== 1 || time !== times[ 0 ] ) ) {\n\n\t\t\t\tif ( ! smoothInterpolation ) {\n\n\t\t\t\t\t// remove unnecessary keyframes same as their neighbors\n\n\t\t\t\t\tconst offset = i * stride,\n\t\t\t\t\t\toffsetP = offset - stride,\n\t\t\t\t\t\toffsetN = offset + stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tconst value = values[ offset + j ];\n\n\t\t\t\t\t\tif ( value !== values[ offsetP + j ] ||\n\t\t\t\t\t\t\tvalue !== values[ offsetN + j ] ) {\n\n\t\t\t\t\t\t\tkeep = true;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tkeep = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// in-place compaction\n\n\t\t\tif ( keep ) {\n\n\t\t\t\tif ( i !== writeIndex ) {\n\n\t\t\t\t\ttimes[ writeIndex ] = times[ i ];\n\n\t\t\t\t\tconst readOffset = i * stride,\n\t\t\t\t\t\twriteOffset = writeIndex * stride;\n\n\t\t\t\t\tfor ( let j = 0; j !== stride; ++ j ) {\n\n\t\t\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t++ writeIndex;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// flush last keyframe (compaction looks ahead)\n\n\t\tif ( lastIndex > 0 ) {\n\n\t\t\ttimes[ writeIndex ] = times[ lastIndex ];\n\n\t\t\tfor ( let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j = 0; j !== stride; ++ j ) {\n\n\t\t\t\tvalues[ writeOffset + j ] = values[ readOffset + j ];\n\n\t\t\t}\n\n\t\t\t++ writeIndex;\n\n\t\t}\n\n\t\tif ( writeIndex !== times.length ) {\n\n\t\t\tthis.times = times.slice( 0, writeIndex );\n\t\t\tthis.values = values.slice( 0, writeIndex * stride );\n\n\t\t} else {\n\n\t\t\tthis.times = times;\n\t\t\tthis.values = values;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst times = this.times.slice();\n\t\tconst values = this.values.slice();\n\n\t\tconst TypedKeyframeTrack = this.constructor;\n\t\tconst track = new TypedKeyframeTrack( this.name, times, values );\n\n\t\t// Interpolant argument to constructor is not saved, so copy the factory method directly.\n\t\ttrack.createInterpolant = this.createInterpolant;\n\n\t\treturn track;\n\n\t}\n\n}\n\nKeyframeTrack.prototype.TimeBufferType = Float32Array;\nKeyframeTrack.prototype.ValueBufferType = Float32Array;\nKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\n\n/**\n * A Track of Boolean keyframe values.\n */\nclass BooleanKeyframeTrack extends KeyframeTrack {}\n\nBooleanKeyframeTrack.prototype.ValueTypeName = 'bool';\nBooleanKeyframeTrack.prototype.ValueBufferType = Array;\nBooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nBooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of keyframe values that represent color.\n */\nclass ColorKeyframeTrack extends KeyframeTrack {}\n\nColorKeyframeTrack.prototype.ValueTypeName = 'color';\n\n/**\n * A Track of numeric keyframe values.\n */\nclass NumberKeyframeTrack extends KeyframeTrack {}\n\nNumberKeyframeTrack.prototype.ValueTypeName = 'number';\n\n/**\n * Spherical linear unit quaternion interpolant.\n */\n\nclass QuaternionLinearInterpolant extends Interpolant {\n\n\tconstructor( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tsuper( parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tinterpolate_( i1, t0, t, t1 ) {\n\n\t\tconst result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tstride = this.valueSize,\n\n\t\t\talpha = ( t - t0 ) / ( t1 - t0 );\n\n\t\tlet offset = i1 * stride;\n\n\t\tfor ( let end = offset + stride; offset !== end; offset += 4 ) {\n\n\t\t\tQuaternion.slerpFlat( result, 0, values, offset - stride, values, offset, alpha );\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n}\n\n/**\n * A Track of quaternion keyframe values.\n */\nclass QuaternionKeyframeTrack extends KeyframeTrack {\n\n\tInterpolantFactoryMethodLinear( result ) {\n\n\t\treturn new QuaternionLinearInterpolant( this.times, this.values, this.getValueSize(), result );\n\n\t}\n\n}\n\nQuaternionKeyframeTrack.prototype.ValueTypeName = 'quaternion';\n// ValueBufferType is inherited\nQuaternionKeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;\nQuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track that interpolates Strings\n */\nclass StringKeyframeTrack extends KeyframeTrack {}\n\nStringKeyframeTrack.prototype.ValueTypeName = 'string';\nStringKeyframeTrack.prototype.ValueBufferType = Array;\nStringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = undefined;\nStringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = undefined;\n\n/**\n * A Track of vectored keyframe values.\n */\nclass VectorKeyframeTrack extends KeyframeTrack {}\n\nVectorKeyframeTrack.prototype.ValueTypeName = 'vector';\n\nclass AnimationClip {\n\n\tconstructor( name, duration = - 1, tracks, blendMode = NormalAnimationBlendMode ) {\n\n\t\tthis.name = name;\n\t\tthis.tracks = tracks;\n\t\tthis.duration = duration;\n\t\tthis.blendMode = blendMode;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// this means it should figure out its duration by scanning the tracks\n\t\tif ( this.duration < 0 ) {\n\n\t\t\tthis.resetDuration();\n\n\t\t}\n\n\t}\n\n\n\tstatic parse( json ) {\n\n\t\tconst tracks = [],\n\t\t\tjsonTracks = json.tracks,\n\t\t\tframeTime = 1.0 / ( json.fps || 1.0 );\n\n\t\tfor ( let i = 0, n = jsonTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( parseKeyframeTrack( jsonTracks[ i ] ).scale( frameTime ) );\n\n\t\t}\n\n\t\tconst clip = new this( json.name, json.duration, tracks, json.blendMode );\n\t\tclip.uuid = json.uuid;\n\n\t\treturn clip;\n\n\t}\n\n\tstatic toJSON( clip ) {\n\n\t\tconst tracks = [],\n\t\t\tclipTracks = clip.tracks;\n\n\t\tconst json = {\n\n\t\t\t'name': clip.name,\n\t\t\t'duration': clip.duration,\n\t\t\t'tracks': tracks,\n\t\t\t'uuid': clip.uuid,\n\t\t\t'blendMode': clip.blendMode\n\n\t\t};\n\n\t\tfor ( let i = 0, n = clipTracks.length; i !== n; ++ i ) {\n\n\t\t\ttracks.push( KeyframeTrack.toJSON( clipTracks[ i ] ) );\n\n\t\t}\n\n\t\treturn json;\n\n\t}\n\n\tstatic CreateFromMorphTargetSequence( name, morphTargetSequence, fps, noLoop ) {\n\n\t\tconst numMorphTargets = morphTargetSequence.length;\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; i ++ ) {\n\n\t\t\tlet times = [];\n\t\t\tlet values = [];\n\n\t\t\ttimes.push(\n\t\t\t\t( i + numMorphTargets - 1 ) % numMorphTargets,\n\t\t\t\ti,\n\t\t\t\t( i + 1 ) % numMorphTargets );\n\n\t\t\tvalues.push( 0, 1, 0 );\n\n\t\t\tconst order = getKeyframeOrder( times );\n\t\t\ttimes = sortedArray( times, 1, order );\n\t\t\tvalues = sortedArray( values, 1, order );\n\n\t\t\t// if there is a key at the first frame, duplicate it as the\n\t\t\t// last frame as well for perfect loop.\n\t\t\tif ( ! noLoop && times[ 0 ] === 0 ) {\n\n\t\t\t\ttimes.push( numMorphTargets );\n\t\t\t\tvalues.push( values[ 0 ] );\n\n\t\t\t}\n\n\t\t\ttracks.push(\n\t\t\t\tnew NumberKeyframeTrack(\n\t\t\t\t\t'.morphTargetInfluences[' + morphTargetSequence[ i ].name + ']',\n\t\t\t\t\ttimes, values\n\t\t\t\t).scale( 1.0 / fps ) );\n\n\t\t}\n\n\t\treturn new this( name, - 1, tracks );\n\n\t}\n\n\tstatic findByName( objectOrClipArray, name ) {\n\n\t\tlet clipArray = objectOrClipArray;\n\n\t\tif ( ! Array.isArray( objectOrClipArray ) ) {\n\n\t\t\tconst o = objectOrClipArray;\n\t\t\tclipArray = o.geometry && o.geometry.animations || o.animations;\n\n\t\t}\n\n\t\tfor ( let i = 0; i < clipArray.length; i ++ ) {\n\n\t\t\tif ( clipArray[ i ].name === name ) {\n\n\t\t\t\treturn clipArray[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\tstatic CreateClipsFromMorphTargetSequences( morphTargets, fps, noLoop ) {\n\n\t\tconst animationToMorphTargets = {};\n\n\t\t// tested with https://regex101.com/ on trick sequences\n\t\t// such flamingo_flyA_003, flamingo_run1_003, crdeath0059\n\t\tconst pattern = /^([\\w-]*?)([\\d]+)$/;\n\n\t\t// sort morph target names into animation groups based\n\t\t// patterns like Walk_001, Walk_002, Run_001, Run_002\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = morphTargets[ i ];\n\t\t\tconst parts = morphTarget.name.match( pattern );\n\n\t\t\tif ( parts && parts.length > 1 ) {\n\n\t\t\t\tconst name = parts[ 1 ];\n\n\t\t\t\tlet animationMorphTargets = animationToMorphTargets[ name ];\n\n\t\t\t\tif ( ! animationMorphTargets ) {\n\n\t\t\t\t\tanimationToMorphTargets[ name ] = animationMorphTargets = [];\n\n\t\t\t\t}\n\n\t\t\t\tanimationMorphTargets.push( morphTarget );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst clips = [];\n\n\t\tfor ( const name in animationToMorphTargets ) {\n\n\t\t\tclips.push( this.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps, noLoop ) );\n\n\t\t}\n\n\t\treturn clips;\n\n\t}\n\n\t// parse the animation.hierarchy format\n\tstatic parseAnimation( animation, bones ) {\n\n\t\tif ( ! animation ) {\n\n\t\t\tconsole.error( 'THREE.AnimationClip: No animation in JSONLoader data.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst addNonemptyTrack = function ( trackType, trackName, animationKeys, propertyName, destTracks ) {\n\n\t\t\t// only return track if there are actually keys.\n\t\t\tif ( animationKeys.length !== 0 ) {\n\n\t\t\t\tconst times = [];\n\t\t\t\tconst values = [];\n\n\t\t\t\tflattenJSON( animationKeys, times, values, propertyName );\n\n\t\t\t\t// empty keys are filtered out, so check again\n\t\t\t\tif ( times.length !== 0 ) {\n\n\t\t\t\t\tdestTracks.push( new trackType( trackName, times, values ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tconst tracks = [];\n\n\t\tconst clipName = animation.name || 'default';\n\t\tconst fps = animation.fps || 30;\n\t\tconst blendMode = animation.blendMode;\n\n\t\t// automatic length determination in AnimationClip.\n\t\tlet duration = animation.length || - 1;\n\n\t\tconst hierarchyTracks = animation.hierarchy || [];\n\n\t\tfor ( let h = 0; h < hierarchyTracks.length; h ++ ) {\n\n\t\t\tconst animationKeys = hierarchyTracks[ h ].keys;\n\n\t\t\t// skip empty tracks\n\t\t\tif ( ! animationKeys || animationKeys.length === 0 ) continue;\n\n\t\t\t// process morph targets\n\t\t\tif ( animationKeys[ 0 ].morphTargets ) {\n\n\t\t\t\t// figure out all morph targets used in this track\n\t\t\t\tconst morphTargetNames = {};\n\n\t\t\t\tlet k;\n\n\t\t\t\tfor ( k = 0; k < animationKeys.length; k ++ ) {\n\n\t\t\t\t\tif ( animationKeys[ k ].morphTargets ) {\n\n\t\t\t\t\t\tfor ( let m = 0; m < animationKeys[ k ].morphTargets.length; m ++ ) {\n\n\t\t\t\t\t\t\tmorphTargetNames[ animationKeys[ k ].morphTargets[ m ] ] = - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// create a track for each morph target with all zero\n\t\t\t\t// morphTargetInfluences except for the keys in which\n\t\t\t\t// the morphTarget is named.\n\t\t\t\tfor ( const morphTargetName in morphTargetNames ) {\n\n\t\t\t\t\tconst times = [];\n\t\t\t\t\tconst values = [];\n\n\t\t\t\t\tfor ( let m = 0; m !== animationKeys[ k ].morphTargets.length; ++ m ) {\n\n\t\t\t\t\t\tconst animationKey = animationKeys[ k ];\n\n\t\t\t\t\t\ttimes.push( animationKey.time );\n\t\t\t\t\t\tvalues.push( ( animationKey.morphTarget === morphTargetName ) ? 1 : 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( new NumberKeyframeTrack( '.morphTargetInfluence[' + morphTargetName + ']', times, values ) );\n\n\t\t\t\t}\n\n\t\t\t\tduration = morphTargetNames.length * fps;\n\n\t\t\t} else {\n\n\t\t\t\t// ...assume skeletal animation\n\n\t\t\t\tconst boneName = '.bones[' + bones[ h ].name + ']';\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.position',\n\t\t\t\t\tanimationKeys, 'pos', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tQuaternionKeyframeTrack, boneName + '.quaternion',\n\t\t\t\t\tanimationKeys, 'rot', tracks );\n\n\t\t\t\taddNonemptyTrack(\n\t\t\t\t\tVectorKeyframeTrack, boneName + '.scale',\n\t\t\t\t\tanimationKeys, 'scl', tracks );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( tracks.length === 0 ) {\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tconst clip = new this( clipName, duration, tracks, blendMode );\n\n\t\treturn clip;\n\n\t}\n\n\tresetDuration() {\n\n\t\tconst tracks = this.tracks;\n\t\tlet duration = 0;\n\n\t\tfor ( let i = 0, n = tracks.length; i !== n; ++ i ) {\n\n\t\t\tconst track = this.tracks[ i ];\n\n\t\t\tduration = Math.max( duration, track.times[ track.times.length - 1 ] );\n\n\t\t}\n\n\t\tthis.duration = duration;\n\n\t\treturn this;\n\n\t}\n\n\ttrim() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].trim( 0, this.duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tvalidate() {\n\n\t\tlet valid = true;\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tvalid = valid && this.tracks[ i ].validate();\n\n\t\t}\n\n\t\treturn valid;\n\n\t}\n\n\toptimize() {\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\tthis.tracks[ i ].optimize();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\tconst tracks = [];\n\n\t\tfor ( let i = 0; i < this.tracks.length; i ++ ) {\n\n\t\t\ttracks.push( this.tracks[ i ].clone() );\n\n\t\t}\n\n\t\treturn new this.constructor( this.name, this.duration, tracks, this.blendMode );\n\n\t}\n\n\ttoJSON() {\n\n\t\treturn this.constructor.toJSON( this );\n\n\t}\n\n}\n\nfunction getTrackTypeForValueTypeName( typeName ) {\n\n\tswitch ( typeName.toLowerCase() ) {\n\n\t\tcase 'scalar':\n\t\tcase 'double':\n\t\tcase 'float':\n\t\tcase 'number':\n\t\tcase 'integer':\n\n\t\t\treturn NumberKeyframeTrack;\n\n\t\tcase 'vector':\n\t\tcase 'vector2':\n\t\tcase 'vector3':\n\t\tcase 'vector4':\n\n\t\t\treturn VectorKeyframeTrack;\n\n\t\tcase 'color':\n\n\t\t\treturn ColorKeyframeTrack;\n\n\t\tcase 'quaternion':\n\n\t\t\treturn QuaternionKeyframeTrack;\n\n\t\tcase 'bool':\n\t\tcase 'boolean':\n\n\t\t\treturn BooleanKeyframeTrack;\n\n\t\tcase 'string':\n\n\t\t\treturn StringKeyframeTrack;\n\n\t}\n\n\tthrow new Error( 'THREE.KeyframeTrack: Unsupported typeName: ' + typeName );\n\n}\n\nfunction parseKeyframeTrack( json ) {\n\n\tif ( json.type === undefined ) {\n\n\t\tthrow new Error( 'THREE.KeyframeTrack: track type undefined, can not parse' );\n\n\t}\n\n\tconst trackType = getTrackTypeForValueTypeName( json.type );\n\n\tif ( json.times === undefined ) {\n\n\t\tconst times = [], values = [];\n\n\t\tflattenJSON( json.keys, times, values, 'value' );\n\n\t\tjson.times = times;\n\t\tjson.values = values;\n\n\t}\n\n\t// derived classes can define a static parse method\n\tif ( trackType.parse !== undefined ) {\n\n\t\treturn trackType.parse( json );\n\n\t} else {\n\n\t\t// by default, we assume a constructor compatible with the base\n\t\treturn new trackType( json.name, json.times, json.values, json.interpolation );\n\n\t}\n\n}\n\nconst Cache = {\n\n\tenabled: false,\n\n\tfiles: {},\n\n\tadd: function ( key, file ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Adding key:', key );\n\n\t\tthis.files[ key ] = file;\n\n\t},\n\n\tget: function ( key ) {\n\n\t\tif ( this.enabled === false ) return;\n\n\t\t// console.log( 'THREE.Cache', 'Checking key:', key );\n\n\t\treturn this.files[ key ];\n\n\t},\n\n\tremove: function ( key ) {\n\n\t\tdelete this.files[ key ];\n\n\t},\n\n\tclear: function () {\n\n\t\tthis.files = {};\n\n\t}\n\n};\n\nclass LoadingManager {\n\n\tconstructor( onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tlet isLoading = false;\n\t\tlet itemsLoaded = 0;\n\t\tlet itemsTotal = 0;\n\t\tlet urlModifier = undefined;\n\t\tconst handlers = [];\n\n\t\t// Refer to #5689 for the reason why we don't set .onStart\n\t\t// in the constructor\n\n\t\tthis.onStart = undefined;\n\t\tthis.onLoad = onLoad;\n\t\tthis.onProgress = onProgress;\n\t\tthis.onError = onError;\n\n\t\tthis.itemStart = function ( url ) {\n\n\t\t\titemsTotal ++;\n\n\t\t\tif ( isLoading === false ) {\n\n\t\t\t\tif ( scope.onStart !== undefined ) {\n\n\t\t\t\t\tscope.onStart( url, itemsLoaded, itemsTotal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tisLoading = true;\n\n\t\t};\n\n\t\tthis.itemEnd = function ( url ) {\n\n\t\t\titemsLoaded ++;\n\n\t\t\tif ( scope.onProgress !== undefined ) {\n\n\t\t\t\tscope.onProgress( url, itemsLoaded, itemsTotal );\n\n\t\t\t}\n\n\t\t\tif ( itemsLoaded === itemsTotal ) {\n\n\t\t\t\tisLoading = false;\n\n\t\t\t\tif ( scope.onLoad !== undefined ) {\n\n\t\t\t\t\tscope.onLoad();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.itemError = function ( url ) {\n\n\t\t\tif ( scope.onError !== undefined ) {\n\n\t\t\t\tscope.onError( url );\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.resolveURL = function ( url ) {\n\n\t\t\tif ( urlModifier ) {\n\n\t\t\t\treturn urlModifier( url );\n\n\t\t\t}\n\n\t\t\treturn url;\n\n\t\t};\n\n\t\tthis.setURLModifier = function ( transform ) {\n\n\t\t\turlModifier = transform;\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.addHandler = function ( regex, loader ) {\n\n\t\t\thandlers.push( regex, loader );\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.removeHandler = function ( regex ) {\n\n\t\t\tconst index = handlers.indexOf( regex );\n\n\t\t\tif ( index !== - 1 ) {\n\n\t\t\t\thandlers.splice( index, 2 );\n\n\t\t\t}\n\n\t\t\treturn this;\n\n\t\t};\n\n\t\tthis.getHandler = function ( file ) {\n\n\t\t\tfor ( let i = 0, l = handlers.length; i < l; i += 2 ) {\n\n\t\t\t\tconst regex = handlers[ i ];\n\t\t\t\tconst loader = handlers[ i + 1 ];\n\n\t\t\t\tif ( regex.global ) regex.lastIndex = 0; // see #17920\n\n\t\t\t\tif ( regex.test( file ) ) {\n\n\t\t\t\t\treturn loader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t};\n\n\t}\n\n}\n\nconst DefaultLoadingManager = /*@__PURE__*/ new LoadingManager();\n\nclass Loader {\n\n\tconstructor( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : DefaultLoadingManager;\n\n\t\tthis.crossOrigin = 'anonymous';\n\t\tthis.withCredentials = false;\n\t\tthis.path = '';\n\t\tthis.resourcePath = '';\n\t\tthis.requestHeader = {};\n\n\t}\n\n\tload( /* url, onLoad, onProgress, onError */ ) {}\n\n\tloadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tscope.load( url, resolve, onProgress, reject );\n\n\t\t} );\n\n\t}\n\n\tparse( /* data */ ) {}\n\n\tsetCrossOrigin( crossOrigin ) {\n\n\t\tthis.crossOrigin = crossOrigin;\n\t\treturn this;\n\n\t}\n\n\tsetWithCredentials( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t}\n\n\tsetPath( path ) {\n\n\t\tthis.path = path;\n\t\treturn this;\n\n\t}\n\n\tsetResourcePath( resourcePath ) {\n\n\t\tthis.resourcePath = resourcePath;\n\t\treturn this;\n\n\t}\n\n\tsetRequestHeader( requestHeader ) {\n\n\t\tthis.requestHeader = requestHeader;\n\t\treturn this;\n\n\t}\n\n}\n\nLoader.DEFAULT_MATERIAL_NAME = '__DEFAULT';\n\nconst loading = {};\n\nclass HttpError extends Error {\n\n\tconstructor( message, response ) {\n\n\t\tsuper( message );\n\t\tthis.response = response;\n\n\t}\n\n}\n\nclass FileLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tthis.manager.itemStart( url );\n\n\t\t\tsetTimeout( () => {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Initialise array for duplicate requests\n\t\tloading[ url ] = [];\n\n\t\tloading[ url ].push( {\n\t\t\tonLoad: onLoad,\n\t\t\tonProgress: onProgress,\n\t\t\tonError: onError,\n\t\t} );\n\n\t\t// create request\n\t\tconst req = new Request( url, {\n\t\t\theaders: new Headers( this.requestHeader ),\n\t\t\tcredentials: this.withCredentials ? 'include' : 'same-origin',\n\t\t\t// An abort controller could be added within a future PR\n\t\t} );\n\n\t\t// record states ( avoid data race )\n\t\tconst mimeType = this.mimeType;\n\t\tconst responseType = this.responseType;\n\n\t\t// start the fetch\n\t\tfetch( req )\n\t\t\t.then( response => {\n\n\t\t\t\tif ( response.status === 200 || response.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( response.status === 0 ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Workaround: Checking if response.body === undefined for Alipay browser #23548\n\n\t\t\t\t\tif ( typeof ReadableStream === 'undefined' || response.body === undefined || response.body.getReader === undefined ) {\n\n\t\t\t\t\t\treturn response;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\t// Nginx needs X-File-Size check\n\t\t\t\t\t// https://serverfault.com/questions/482875/why-does-nginx-remove-content-length-header-for-chunked-content\n\t\t\t\t\tconst contentLength = response.headers.get( 'Content-Length' ) || response.headers.get( 'X-File-Size' );\n\t\t\t\t\tconst total = contentLength ? parseInt( contentLength ) : 0;\n\t\t\t\t\tconst lengthComputable = total !== 0;\n\t\t\t\t\tlet loaded = 0;\n\n\t\t\t\t\t// periodically read data into the new stream tracking while download progress\n\t\t\t\t\tconst stream = new ReadableStream( {\n\t\t\t\t\t\tstart( controller ) {\n\n\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\tfunction readData() {\n\n\t\t\t\t\t\t\t\treader.read().then( ( { done, value } ) => {\n\n\t\t\t\t\t\t\t\t\tif ( done ) {\n\n\t\t\t\t\t\t\t\t\t\tcontroller.close();\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\tloaded += value.byteLength;\n\n\t\t\t\t\t\t\t\t\t\tconst event = new ProgressEvent( 'progress', { lengthComputable, loaded, total } );\n\t\t\t\t\t\t\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\t\t\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tcontroller.enqueue( value );\n\t\t\t\t\t\t\t\t\t\treadData();\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn new Response( stream );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow new HttpError( `fetch for \"${response.url}\" responded with ${response.status}: ${response.statusText}`, response );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( response => {\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\n\t\t\t\t\t\treturn response.arrayBuffer();\n\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\treturn response.blob();\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\treturn response.text()\n\t\t\t\t\t\t\t.then( text => {\n\n\t\t\t\t\t\t\t\tconst parser = new DOMParser();\n\t\t\t\t\t\t\t\treturn parser.parseFromString( text, mimeType );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\treturn response.json();\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( mimeType === undefined ) {\n\n\t\t\t\t\t\t\treturn response.text();\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// sniff encoding\n\t\t\t\t\t\t\tconst re = /charset=\"?([^;\"\\s]*)\"?/i;\n\t\t\t\t\t\t\tconst exec = re.exec( mimeType );\n\t\t\t\t\t\t\tconst label = exec && exec[ 1 ] ? exec[ 1 ].toLowerCase() : undefined;\n\t\t\t\t\t\t\tconst decoder = new TextDecoder( label );\n\t\t\t\t\t\t\treturn response.arrayBuffer().then( ab => decoder.decode( ab ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.then( data => {\n\n\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\tCache.add( url, data );\n\n\t\t\t\tconst callbacks = loading[ url ];\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( data );\n\n\t\t\t\t}\n\n\t\t\t} )\n\t\t\t.catch( err => {\n\n\t\t\t\t// Abort errors and other errors are handled the same\n\n\t\t\t\tconst callbacks = loading[ url ];\n\n\t\t\t\tif ( callbacks === undefined ) {\n\n\t\t\t\t\t// When onLoad was called and url was deleted in `loading`\n\t\t\t\t\tthis.manager.itemError( url );\n\t\t\t\t\tthrow err;\n\n\t\t\t\t}\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( let i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( err );\n\n\t\t\t\t}\n\n\t\t\t\tthis.manager.itemError( url );\n\n\t\t\t} )\n\t\t\t.finally( () => {\n\n\t\t\t\tthis.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\tthis.manager.itemStart( url );\n\n\t}\n\n\tsetResponseType( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t}\n\n\tsetMimeType( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t}\n\n}\n\nclass AnimationLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst animations = [];\n\n\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\tconst clip = AnimationClip.parse( json[ i ] );\n\n\t\t\tanimations.push( clip );\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to block based textures loader (dds, pvr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass CompressedTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst images = [];\n\n\t\tconst texture = new CompressedTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( url[ i ], function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\timages[ i ] = {\n\t\t\t\t\twidth: texDatas.width,\n\t\t\t\t\theight: texDatas.height,\n\t\t\t\t\tformat: texDatas.format,\n\t\t\t\t\tmipmaps: texDatas.mipmaps\n\t\t\t\t};\n\n\t\t\t\tloaded += 1;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\tif ( texDatas.mipmapCount === 1 ) texture.minFilter = LinearFilter;\n\n\t\t\t\t\ttexture.image = images;\n\t\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\tif ( Array.isArray( url ) ) {\n\n\t\t\tfor ( let i = 0, il = url.length; i < il; ++ i ) {\n\n\t\t\t\tloadTexture( i );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// compressed cubemap texture stored in a single DDS file\n\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\tconst texDatas = scope.parse( buffer, true );\n\n\t\t\t\tif ( texDatas.isCubemap ) {\n\n\t\t\t\t\tconst faces = texDatas.mipmaps.length / texDatas.mipmapCount;\n\n\t\t\t\t\tfor ( let f = 0; f < faces; f ++ ) {\n\n\t\t\t\t\t\timages[ f ] = { mipmaps: [] };\n\n\t\t\t\t\t\tfor ( let i = 0; i < texDatas.mipmapCount; i ++ ) {\n\n\t\t\t\t\t\t\timages[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );\n\t\t\t\t\t\t\timages[ f ].format = texDatas.format;\n\t\t\t\t\t\t\timages[ f ].width = texDatas.width;\n\t\t\t\t\t\t\timages[ f ].height = texDatas.height;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttexture.image = images;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture.image.width = texDatas.width;\n\t\t\t\t\ttexture.image.height = texDatas.height;\n\t\t\t\t\ttexture.mipmaps = texDatas.mipmaps;\n\n\t\t\t\t}\n\n\t\t\t\tif ( texDatas.mipmapCount === 1 ) {\n\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t\t}\n\n\t\t\t\ttexture.format = texDatas.format;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t}, onProgress, onError );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass ImageLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst image = createElementNS( 'img' );\n\n\t\tfunction onImageLoad() {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tCache.add( url, this );\n\n\t\t\tif ( onLoad ) onLoad( this );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction onImageError( event ) {\n\n\t\t\tremoveEventListeners();\n\n\t\t\tif ( onError ) onError( event );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t}\n\n\t\tfunction removeEventListeners() {\n\n\t\t\timage.removeEventListener( 'load', onImageLoad, false );\n\t\t\timage.removeEventListener( 'error', onImageError, false );\n\n\t\t}\n\n\t\timage.addEventListener( 'load', onImageLoad, false );\n\t\timage.addEventListener( 'error', onImageError, false );\n\n\t\tif ( url.slice( 0, 5 ) !== 'data:' ) {\n\n\t\t\tif ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\timage.src = url;\n\n\t\treturn image;\n\n\t}\n\n}\n\nclass CubeTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( urls, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new CubeTexture();\n\t\ttexture.colorSpace = SRGBColorSpace;\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tlet loaded = 0;\n\n\t\tfunction loadTexture( i ) {\n\n\t\t\tloader.load( urls[ i ], function ( image ) {\n\n\t\t\t\ttexture.images[ i ] = image;\n\n\t\t\t\tloaded ++;\n\n\t\t\t\tif ( loaded === 6 ) {\n\n\t\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\t\tif ( onLoad ) onLoad( texture );\n\n\t\t\t\t}\n\n\t\t\t}, undefined, onError );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < urls.length; ++ i ) {\n\n\t\t\tloadTexture( i );\n\n\t\t}\n\n\t\treturn texture;\n\n\t}\n\n}\n\n/**\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nclass DataTextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst texture = new DataTexture();\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setPath( this.path );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tlet texData;\n\n\t\t\ttry {\n\n\t\t\t\ttexData = scope.parse( buffer );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) {\n\n\t\t\t\t\tonError( error );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( error );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.colorSpace !== undefined ) {\n\n\t\t\t\ttexture.colorSpace = texData.colorSpace;\n\n\t\t\t} else if ( texData.encoding !== undefined ) { // @deprecated, r152\n\n\t\t\t\ttexture.encoding = texData.encoding;\n\n\t\t\t}\n\n\t\t\tif ( texData.flipY !== undefined ) {\n\n\t\t\t\ttexture.flipY = texData.flipY;\n\n\t\t\t}\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\tif ( texData.generateMipmaps !== undefined ) {\n\n\t\t\t\ttexture.generateMipmaps = texData.generateMipmaps;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass TextureLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst texture = new Texture();\n\n\t\tconst loader = new ImageLoader( this.manager );\n\t\tloader.setCrossOrigin( this.crossOrigin );\n\t\tloader.setPath( this.path );\n\n\t\tloader.load( url, function ( image ) {\n\n\t\t\ttexture.image = image;\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad !== undefined ) {\n\n\t\t\t\tonLoad( texture );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\treturn texture;\n\n\t}\n\n}\n\nclass Light extends Object3D {\n\n\tconstructor( color, intensity = 1 ) {\n\n\t\tsuper();\n\n\t\tthis.isLight = true;\n\n\t\tthis.type = 'Light';\n\n\t\tthis.color = new Color( color );\n\t\tthis.intensity = intensity;\n\n\t}\n\n\tdispose() {\n\n\t\t// Empty here in base class; some subclasses override.\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.color.copy( source.color );\n\t\tthis.intensity = source.intensity;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.color = this.color.getHex();\n\t\tdata.object.intensity = this.intensity;\n\n\t\tif ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();\n\n\t\tif ( this.distance !== undefined ) data.object.distance = this.distance;\n\t\tif ( this.angle !== undefined ) data.object.angle = this.angle;\n\t\tif ( this.decay !== undefined ) data.object.decay = this.decay;\n\t\tif ( this.penumbra !== undefined ) data.object.penumbra = this.penumbra;\n\n\t\tif ( this.shadow !== undefined ) data.object.shadow = this.shadow.toJSON();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass HemisphereLight extends Light {\n\n\tconstructor( skyColor, groundColor, intensity ) {\n\n\t\tsuper( skyColor, intensity );\n\n\t\tthis.isHemisphereLight = true;\n\n\t\tthis.type = 'HemisphereLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.groundColor = new Color( groundColor );\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.groundColor.copy( source.groundColor );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix$1 = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld$1 = /*@__PURE__*/ new Vector3();\nconst _lookTarget$1 = /*@__PURE__*/ new Vector3();\n\nclass LightShadow {\n\n\tconstructor( camera ) {\n\n\t\tthis.camera = camera;\n\n\t\tthis.bias = 0;\n\t\tthis.normalBias = 0;\n\t\tthis.radius = 1;\n\t\tthis.blurSamples = 8;\n\n\t\tthis.mapSize = new Vector2( 512, 512 );\n\n\t\tthis.map = null;\n\t\tthis.mapPass = null;\n\t\tthis.matrix = new Matrix4();\n\n\t\tthis.autoUpdate = true;\n\t\tthis.needsUpdate = false;\n\n\t\tthis._frustum = new Frustum();\n\t\tthis._frameExtents = new Vector2( 1, 1 );\n\n\t\tthis._viewportCount = 1;\n\n\t\tthis._viewports = [\n\n\t\t\tnew Vector4( 0, 0, 1, 1 )\n\n\t\t];\n\n\t}\n\n\tgetViewportCount() {\n\n\t\treturn this._viewportCount;\n\n\t}\n\n\tgetFrustum() {\n\n\t\treturn this._frustum;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst shadowCamera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\t_lightPositionWorld$1.setFromMatrixPosition( light.matrixWorld );\n\t\tshadowCamera.position.copy( _lightPositionWorld$1 );\n\n\t\t_lookTarget$1.setFromMatrixPosition( light.target.matrixWorld );\n\t\tshadowCamera.lookAt( _lookTarget$1 );\n\t\tshadowCamera.updateMatrixWorld();\n\n\t\t_projScreenMatrix$1.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix$1 );\n\n\t\tshadowMatrix.set(\n\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t);\n\n\t\tshadowMatrix.multiply( _projScreenMatrix$1 );\n\n\t}\n\n\tgetViewport( viewportIndex ) {\n\n\t\treturn this._viewports[ viewportIndex ];\n\n\t}\n\n\tgetFrameExtents() {\n\n\t\treturn this._frameExtents;\n\n\t}\n\n\tdispose() {\n\n\t\tif ( this.map ) {\n\n\t\t\tthis.map.dispose();\n\n\t\t}\n\n\t\tif ( this.mapPass ) {\n\n\t\t\tthis.mapPass.dispose();\n\n\t\t}\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.camera = source.camera.clone();\n\n\t\tthis.bias = source.bias;\n\t\tthis.radius = source.radius;\n\n\t\tthis.mapSize.copy( source.mapSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst object = {};\n\n\t\tif ( this.bias !== 0 ) object.bias = this.bias;\n\t\tif ( this.normalBias !== 0 ) object.normalBias = this.normalBias;\n\t\tif ( this.radius !== 1 ) object.radius = this.radius;\n\t\tif ( this.mapSize.x !== 512 || this.mapSize.y !== 512 ) object.mapSize = this.mapSize.toArray();\n\n\t\tobject.camera = this.camera.toJSON( false ).object;\n\t\tdelete object.camera.matrix;\n\n\t\treturn object;\n\n\t}\n\n}\n\nclass SpotLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 50, 1, 0.5, 500 ) );\n\n\t\tthis.isSpotLightShadow = true;\n\n\t\tthis.focus = 1;\n\n\t}\n\n\tupdateMatrices( light ) {\n\n\t\tconst camera = this.camera;\n\n\t\tconst fov = RAD2DEG * 2 * light.angle * this.focus;\n\t\tconst aspect = this.mapSize.width / this.mapSize.height;\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( fov !== camera.fov || aspect !== camera.aspect || far !== camera.far ) {\n\n\t\t\tcamera.fov = fov;\n\t\t\tcamera.aspect = aspect;\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\tsuper.updateMatrices( light );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.focus = source.focus;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass SpotLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, angle = Math.PI / 3, penumbra = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isSpotLight = true;\n\n\t\tthis.type = 'SpotLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.distance = distance;\n\t\tthis.angle = angle;\n\t\tthis.penumbra = penumbra;\n\t\tthis.decay = decay;\n\n\t\tthis.map = null;\n\n\t\tthis.shadow = new SpotLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// by convention for a spotlight, luminous power (lm) = π * luminous intensity (cd)\n\t\treturn this.intensity * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / Math.PI;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.angle = source.angle;\n\t\tthis.penumbra = source.penumbra;\n\t\tthis.decay = source.decay;\n\n\t\tthis.target = source.target.clone();\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _projScreenMatrix = /*@__PURE__*/ new Matrix4();\nconst _lightPositionWorld = /*@__PURE__*/ new Vector3();\nconst _lookTarget = /*@__PURE__*/ new Vector3();\n\nclass PointLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new PerspectiveCamera( 90, 1, 0.5, 500 ) );\n\n\t\tthis.isPointLightShadow = true;\n\n\t\tthis._frameExtents = new Vector2( 4, 2 );\n\n\t\tthis._viewportCount = 6;\n\n\t\tthis._viewports = [\n\t\t\t// These viewports map a cube-map onto a 2D texture with the\n\t\t\t// following orientation:\n\t\t\t//\n\t\t\t//  xzXZ\n\t\t\t//   y Y\n\t\t\t//\n\t\t\t// X - Positive x direction\n\t\t\t// x - Negative x direction\n\t\t\t// Y - Positive y direction\n\t\t\t// y - Negative y direction\n\t\t\t// Z - Positive z direction\n\t\t\t// z - Negative z direction\n\n\t\t\t// positive X\n\t\t\tnew Vector4( 2, 1, 1, 1 ),\n\t\t\t// negative X\n\t\t\tnew Vector4( 0, 1, 1, 1 ),\n\t\t\t// positive Z\n\t\t\tnew Vector4( 3, 1, 1, 1 ),\n\t\t\t// negative Z\n\t\t\tnew Vector4( 1, 1, 1, 1 ),\n\t\t\t// positive Y\n\t\t\tnew Vector4( 3, 0, 1, 1 ),\n\t\t\t// negative Y\n\t\t\tnew Vector4( 1, 0, 1, 1 )\n\t\t];\n\n\t\tthis._cubeDirections = [\n\t\t\tnew Vector3( 1, 0, 0 ), new Vector3( - 1, 0, 0 ), new Vector3( 0, 0, 1 ),\n\t\t\tnew Vector3( 0, 0, - 1 ), new Vector3( 0, 1, 0 ), new Vector3( 0, - 1, 0 )\n\t\t];\n\n\t\tthis._cubeUps = [\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ), new Vector3( 0, 1, 0 ),\n\t\t\tnew Vector3( 0, 1, 0 ), new Vector3( 0, 0, 1 ),\tnew Vector3( 0, 0, - 1 )\n\t\t];\n\n\t}\n\n\tupdateMatrices( light, viewportIndex = 0 ) {\n\n\t\tconst camera = this.camera;\n\t\tconst shadowMatrix = this.matrix;\n\n\t\tconst far = light.distance || camera.far;\n\n\t\tif ( far !== camera.far ) {\n\n\t\t\tcamera.far = far;\n\t\t\tcamera.updateProjectionMatrix();\n\n\t\t}\n\n\t\t_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );\n\t\tcamera.position.copy( _lightPositionWorld );\n\n\t\t_lookTarget.copy( camera.position );\n\t\t_lookTarget.add( this._cubeDirections[ viewportIndex ] );\n\t\tcamera.up.copy( this._cubeUps[ viewportIndex ] );\n\t\tcamera.lookAt( _lookTarget );\n\t\tcamera.updateMatrixWorld();\n\n\t\tshadowMatrix.makeTranslation( - _lightPositionWorld.x, - _lightPositionWorld.y, - _lightPositionWorld.z );\n\n\t\t_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );\n\t\tthis._frustum.setFromProjectionMatrix( _projScreenMatrix );\n\n\t}\n\n}\n\nclass PointLight extends Light {\n\n\tconstructor( color, intensity, distance = 0, decay = 2 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isPointLight = true;\n\n\t\tthis.type = 'PointLight';\n\n\t\tthis.distance = distance;\n\t\tthis.decay = decay;\n\n\t\tthis.shadow = new PointLightShadow();\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in candela)\n\t\t// for an isotropic light source, luminous power (lm) = 4 π luminous intensity (cd)\n\t\treturn this.intensity * 4 * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in candela) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( 4 * Math.PI );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.distance = source.distance;\n\t\tthis.decay = source.decay;\n\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass DirectionalLightShadow extends LightShadow {\n\n\tconstructor() {\n\n\t\tsuper( new OrthographicCamera( - 5, 5, 5, - 5, 0.5, 500 ) );\n\n\t\tthis.isDirectionalLightShadow = true;\n\n\t}\n\n}\n\nclass DirectionalLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isDirectionalLight = true;\n\n\t\tthis.type = 'DirectionalLight';\n\n\t\tthis.position.copy( Object3D.DEFAULT_UP );\n\t\tthis.updateMatrix();\n\n\t\tthis.target = new Object3D();\n\n\t\tthis.shadow = new DirectionalLightShadow();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.shadow.dispose();\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.target = source.target.clone();\n\t\tthis.shadow = source.shadow.clone();\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass AmbientLight extends Light {\n\n\tconstructor( color, intensity ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isAmbientLight = true;\n\n\t\tthis.type = 'AmbientLight';\n\n\t}\n\n}\n\nclass RectAreaLight extends Light {\n\n\tconstructor( color, intensity, width = 10, height = 10 ) {\n\n\t\tsuper( color, intensity );\n\n\t\tthis.isRectAreaLight = true;\n\n\t\tthis.type = 'RectAreaLight';\n\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t}\n\n\tget power() {\n\n\t\t// compute the light's luminous power (in lumens) from its intensity (in nits)\n\t\treturn this.intensity * this.width * this.height * Math.PI;\n\n\t}\n\n\tset power( power ) {\n\n\t\t// set the light's intensity (in nits) from the desired luminous power (in lumens)\n\t\tthis.intensity = power / ( this.width * this.height * Math.PI );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.width = source.width;\n\t\tthis.height = source.height;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.width = this.width;\n\t\tdata.object.height = this.height;\n\n\t\treturn data;\n\n\t}\n\n}\n\n/**\n * Primary reference:\n *   https://graphics.stanford.edu/papers/envmap/envmap.pdf\n *\n * Secondary reference:\n *   https://www.ppsloan.org/publications/StupidSH36.pdf\n */\n\n// 3-band SH defined by 9 coefficients\n\nclass SphericalHarmonics3 {\n\n\tconstructor() {\n\n\t\tthis.isSphericalHarmonics3 = true;\n\n\t\tthis.coefficients = [];\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients.push( new Vector3() );\n\n\t\t}\n\n\t}\n\n\tset( coefficients ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].copy( coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tzero() {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].set( 0, 0, 0 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// get the radiance in the direction of the normal\n\t// target is a Vector3\n\tgetAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.282095 );\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 0.488603 * y );\n\t\ttarget.addScaledVector( coeff[ 2 ], 0.488603 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 0.488603 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 1.092548 * ( x * y ) );\n\t\ttarget.addScaledVector( coeff[ 5 ], 1.092548 * ( y * z ) );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.315392 * ( 3.0 * z * z - 1.0 ) );\n\t\ttarget.addScaledVector( coeff[ 7 ], 1.092548 * ( x * z ) );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.546274 * ( x * x - y * y ) );\n\n\t\treturn target;\n\n\t}\n\n\t// get the irradiance (radiance convolved with cosine lobe) in the direction of the normal\n\t// target is a Vector3\n\t// https://graphics.stanford.edu/papers/envmap/envmap.pdf\n\tgetIrradianceAt( normal, target ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\tconst coeff = this.coefficients;\n\n\t\t// band 0\n\t\ttarget.copy( coeff[ 0 ] ).multiplyScalar( 0.886227 ); // π * 0.282095\n\n\t\t// band 1\n\t\ttarget.addScaledVector( coeff[ 1 ], 2.0 * 0.511664 * y ); // ( 2 * π / 3 ) * 0.488603\n\t\ttarget.addScaledVector( coeff[ 2 ], 2.0 * 0.511664 * z );\n\t\ttarget.addScaledVector( coeff[ 3 ], 2.0 * 0.511664 * x );\n\n\t\t// band 2\n\t\ttarget.addScaledVector( coeff[ 4 ], 2.0 * 0.429043 * x * y ); // ( π / 4 ) * 1.092548\n\t\ttarget.addScaledVector( coeff[ 5 ], 2.0 * 0.429043 * y * z );\n\t\ttarget.addScaledVector( coeff[ 6 ], 0.743125 * z * z - 0.247708 ); // ( π / 4 ) * 0.315392 * 3\n\t\ttarget.addScaledVector( coeff[ 7 ], 2.0 * 0.429043 * x * z );\n\t\ttarget.addScaledVector( coeff[ 8 ], 0.429043 * ( x * x - y * y ) ); // ( π / 4 ) * 0.546274\n\n\t\treturn target;\n\n\t}\n\n\tadd( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].add( sh.coefficients[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\taddScaledSH( sh, s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].addScaledVector( sh.coefficients[ i ], s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tscale( s ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].multiplyScalar( s );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tlerp( sh, alpha ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tthis.coefficients[ i ].lerp( sh.coefficients[ i ], alpha );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tequals( sh ) {\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tif ( ! this.coefficients[ i ].equals( sh.coefficients[ i ] ) ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tcopy( sh ) {\n\n\t\treturn this.set( sh.coefficients );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tfromArray( array, offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].fromArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\ttoArray( array = [], offset = 0 ) {\n\n\t\tconst coefficients = this.coefficients;\n\n\t\tfor ( let i = 0; i < 9; i ++ ) {\n\n\t\t\tcoefficients[ i ].toArray( array, offset + ( i * 3 ) );\n\n\t\t}\n\n\t\treturn array;\n\n\t}\n\n\t// evaluate the basis functions\n\t// shBasis is an Array[ 9 ]\n\tstatic getBasisAt( normal, shBasis ) {\n\n\t\t// normal is assumed to be unit length\n\n\t\tconst x = normal.x, y = normal.y, z = normal.z;\n\n\t\t// band 0\n\t\tshBasis[ 0 ] = 0.282095;\n\n\t\t// band 1\n\t\tshBasis[ 1 ] = 0.488603 * y;\n\t\tshBasis[ 2 ] = 0.488603 * z;\n\t\tshBasis[ 3 ] = 0.488603 * x;\n\n\t\t// band 2\n\t\tshBasis[ 4 ] = 1.092548 * x * y;\n\t\tshBasis[ 5 ] = 1.092548 * y * z;\n\t\tshBasis[ 6 ] = 0.315392 * ( 3 * z * z - 1 );\n\t\tshBasis[ 7 ] = 1.092548 * x * z;\n\t\tshBasis[ 8 ] = 0.546274 * ( x * x - y * y );\n\n\t}\n\n}\n\nclass LightProbe extends Light {\n\n\tconstructor( sh = new SphericalHarmonics3(), intensity = 1 ) {\n\n\t\tsuper( undefined, intensity );\n\n\t\tthis.isLightProbe = true;\n\n\t\tthis.sh = sh;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.sh.copy( source.sh );\n\n\t\treturn this;\n\n\t}\n\n\tfromJSON( json ) {\n\n\t\tthis.intensity = json.intensity; // TODO: Move this bit to Light.fromJSON();\n\t\tthis.sh.fromArray( json.sh );\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON( meta ) {\n\n\t\tconst data = super.toJSON( meta );\n\n\t\tdata.object.sh = this.sh.toArray();\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass MaterialLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\t\tthis.textures = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst textures = this.textures;\n\n\t\tfunction getTexture( name ) {\n\n\t\t\tif ( textures[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.MaterialLoader: Undefined texture', name );\n\n\t\t\t}\n\n\t\t\treturn textures[ name ];\n\n\t\t}\n\n\t\tconst material = MaterialLoader.createMaterialFromType( json.type );\n\n\t\tif ( json.uuid !== undefined ) material.uuid = json.uuid;\n\t\tif ( json.name !== undefined ) material.name = json.name;\n\t\tif ( json.color !== undefined && material.color !== undefined ) material.color.setHex( json.color );\n\t\tif ( json.roughness !== undefined ) material.roughness = json.roughness;\n\t\tif ( json.metalness !== undefined ) material.metalness = json.metalness;\n\t\tif ( json.sheen !== undefined ) material.sheen = json.sheen;\n\t\tif ( json.sheenColor !== undefined ) material.sheenColor = new Color().setHex( json.sheenColor );\n\t\tif ( json.sheenRoughness !== undefined ) material.sheenRoughness = json.sheenRoughness;\n\t\tif ( json.emissive !== undefined && material.emissive !== undefined ) material.emissive.setHex( json.emissive );\n\t\tif ( json.specular !== undefined && material.specular !== undefined ) material.specular.setHex( json.specular );\n\t\tif ( json.specularIntensity !== undefined ) material.specularIntensity = json.specularIntensity;\n\t\tif ( json.specularColor !== undefined && material.specularColor !== undefined ) material.specularColor.setHex( json.specularColor );\n\t\tif ( json.shininess !== undefined ) material.shininess = json.shininess;\n\t\tif ( json.clearcoat !== undefined ) material.clearcoat = json.clearcoat;\n\t\tif ( json.clearcoatRoughness !== undefined ) material.clearcoatRoughness = json.clearcoatRoughness;\n\t\tif ( json.iridescence !== undefined ) material.iridescence = json.iridescence;\n\t\tif ( json.iridescenceIOR !== undefined ) material.iridescenceIOR = json.iridescenceIOR;\n\t\tif ( json.iridescenceThicknessRange !== undefined ) material.iridescenceThicknessRange = json.iridescenceThicknessRange;\n\t\tif ( json.transmission !== undefined ) material.transmission = json.transmission;\n\t\tif ( json.thickness !== undefined ) material.thickness = json.thickness;\n\t\tif ( json.attenuationDistance !== undefined ) material.attenuationDistance = json.attenuationDistance;\n\t\tif ( json.attenuationColor !== undefined && material.attenuationColor !== undefined ) material.attenuationColor.setHex( json.attenuationColor );\n\t\tif ( json.anisotropy !== undefined ) material.anisotropy = json.anisotropy;\n\t\tif ( json.anisotropyRotation !== undefined ) material.anisotropyRotation = json.anisotropyRotation;\n\t\tif ( json.fog !== undefined ) material.fog = json.fog;\n\t\tif ( json.flatShading !== undefined ) material.flatShading = json.flatShading;\n\t\tif ( json.blending !== undefined ) material.blending = json.blending;\n\t\tif ( json.combine !== undefined ) material.combine = json.combine;\n\t\tif ( json.side !== undefined ) material.side = json.side;\n\t\tif ( json.shadowSide !== undefined ) material.shadowSide = json.shadowSide;\n\t\tif ( json.opacity !== undefined ) material.opacity = json.opacity;\n\t\tif ( json.transparent !== undefined ) material.transparent = json.transparent;\n\t\tif ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;\n\t\tif ( json.alphaHash !== undefined ) material.alphaHash = json.alphaHash;\n\t\tif ( json.depthFunc !== undefined ) material.depthFunc = json.depthFunc;\n\t\tif ( json.depthTest !== undefined ) material.depthTest = json.depthTest;\n\t\tif ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;\n\t\tif ( json.colorWrite !== undefined ) material.colorWrite = json.colorWrite;\n\t\tif ( json.blendSrc !== undefined ) material.blendSrc = json.blendSrc;\n\t\tif ( json.blendDst !== undefined ) material.blendDst = json.blendDst;\n\t\tif ( json.blendEquation !== undefined ) material.blendEquation = json.blendEquation;\n\t\tif ( json.blendSrcAlpha !== undefined ) material.blendSrcAlpha = json.blendSrcAlpha;\n\t\tif ( json.blendDstAlpha !== undefined ) material.blendDstAlpha = json.blendDstAlpha;\n\t\tif ( json.blendEquationAlpha !== undefined ) material.blendEquationAlpha = json.blendEquationAlpha;\n\t\tif ( json.blendColor !== undefined && material.blendColor !== undefined ) material.blendColor.setHex( json.blendColor );\n\t\tif ( json.blendAlpha !== undefined ) material.blendAlpha = json.blendAlpha;\n\t\tif ( json.stencilWriteMask !== undefined ) material.stencilWriteMask = json.stencilWriteMask;\n\t\tif ( json.stencilFunc !== undefined ) material.stencilFunc = json.stencilFunc;\n\t\tif ( json.stencilRef !== undefined ) material.stencilRef = json.stencilRef;\n\t\tif ( json.stencilFuncMask !== undefined ) material.stencilFuncMask = json.stencilFuncMask;\n\t\tif ( json.stencilFail !== undefined ) material.stencilFail = json.stencilFail;\n\t\tif ( json.stencilZFail !== undefined ) material.stencilZFail = json.stencilZFail;\n\t\tif ( json.stencilZPass !== undefined ) material.stencilZPass = json.stencilZPass;\n\t\tif ( json.stencilWrite !== undefined ) material.stencilWrite = json.stencilWrite;\n\n\t\tif ( json.wireframe !== undefined ) material.wireframe = json.wireframe;\n\t\tif ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;\n\t\tif ( json.wireframeLinecap !== undefined ) material.wireframeLinecap = json.wireframeLinecap;\n\t\tif ( json.wireframeLinejoin !== undefined ) material.wireframeLinejoin = json.wireframeLinejoin;\n\n\t\tif ( json.rotation !== undefined ) material.rotation = json.rotation;\n\n\t\tif ( json.linewidth !== undefined ) material.linewidth = json.linewidth;\n\t\tif ( json.dashSize !== undefined ) material.dashSize = json.dashSize;\n\t\tif ( json.gapSize !== undefined ) material.gapSize = json.gapSize;\n\t\tif ( json.scale !== undefined ) material.scale = json.scale;\n\n\t\tif ( json.polygonOffset !== undefined ) material.polygonOffset = json.polygonOffset;\n\t\tif ( json.polygonOffsetFactor !== undefined ) material.polygonOffsetFactor = json.polygonOffsetFactor;\n\t\tif ( json.polygonOffsetUnits !== undefined ) material.polygonOffsetUnits = json.polygonOffsetUnits;\n\n\t\tif ( json.dithering !== undefined ) material.dithering = json.dithering;\n\n\t\tif ( json.alphaToCoverage !== undefined ) material.alphaToCoverage = json.alphaToCoverage;\n\t\tif ( json.premultipliedAlpha !== undefined ) material.premultipliedAlpha = json.premultipliedAlpha;\n\t\tif ( json.forceSinglePass !== undefined ) material.forceSinglePass = json.forceSinglePass;\n\n\t\tif ( json.visible !== undefined ) material.visible = json.visible;\n\n\t\tif ( json.toneMapped !== undefined ) material.toneMapped = json.toneMapped;\n\n\t\tif ( json.userData !== undefined ) material.userData = json.userData;\n\n\t\tif ( json.vertexColors !== undefined ) {\n\n\t\t\tif ( typeof json.vertexColors === 'number' ) {\n\n\t\t\t\tmaterial.vertexColors = ( json.vertexColors > 0 ) ? true : false;\n\n\t\t\t} else {\n\n\t\t\t\tmaterial.vertexColors = json.vertexColors;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Shader Material\n\n\t\tif ( json.uniforms !== undefined ) {\n\n\t\t\tfor ( const name in json.uniforms ) {\n\n\t\t\t\tconst uniform = json.uniforms[ name ];\n\n\t\t\t\tmaterial.uniforms[ name ] = {};\n\n\t\t\t\tswitch ( uniform.type ) {\n\n\t\t\t\t\tcase 't':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = getTexture( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'c':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Color().setHex( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v2':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector2().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Vector4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm3':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix3().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'm4':\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = new Matrix4().fromArray( uniform.value );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tmaterial.uniforms[ name ].value = uniform.value;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.defines !== undefined ) material.defines = json.defines;\n\t\tif ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;\n\t\tif ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;\n\t\tif ( json.glslVersion !== undefined ) material.glslVersion = json.glslVersion;\n\n\t\tif ( json.extensions !== undefined ) {\n\n\t\t\tfor ( const key in json.extensions ) {\n\n\t\t\t\tmaterial.extensions[ key ] = json.extensions[ key ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json.lights !== undefined ) material.lights = json.lights;\n\t\tif ( json.clipping !== undefined ) material.clipping = json.clipping;\n\n\t\t// for PointsMaterial\n\n\t\tif ( json.size !== undefined ) material.size = json.size;\n\t\tif ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;\n\n\t\t// maps\n\n\t\tif ( json.map !== undefined ) material.map = getTexture( json.map );\n\t\tif ( json.matcap !== undefined ) material.matcap = getTexture( json.matcap );\n\n\t\tif ( json.alphaMap !== undefined ) material.alphaMap = getTexture( json.alphaMap );\n\n\t\tif ( json.bumpMap !== undefined ) material.bumpMap = getTexture( json.bumpMap );\n\t\tif ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;\n\n\t\tif ( json.normalMap !== undefined ) material.normalMap = getTexture( json.normalMap );\n\t\tif ( json.normalMapType !== undefined ) material.normalMapType = json.normalMapType;\n\t\tif ( json.normalScale !== undefined ) {\n\n\t\t\tlet normalScale = json.normalScale;\n\n\t\t\tif ( Array.isArray( normalScale ) === false ) {\n\n\t\t\t\t// Blender exporter used to export a scalar. See #7459\n\n\t\t\t\tnormalScale = [ normalScale, normalScale ];\n\n\t\t\t}\n\n\t\t\tmaterial.normalScale = new Vector2().fromArray( normalScale );\n\n\t\t}\n\n\t\tif ( json.displacementMap !== undefined ) material.displacementMap = getTexture( json.displacementMap );\n\t\tif ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;\n\t\tif ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;\n\n\t\tif ( json.roughnessMap !== undefined ) material.roughnessMap = getTexture( json.roughnessMap );\n\t\tif ( json.metalnessMap !== undefined ) material.metalnessMap = getTexture( json.metalnessMap );\n\n\t\tif ( json.emissiveMap !== undefined ) material.emissiveMap = getTexture( json.emissiveMap );\n\t\tif ( json.emissiveIntensity !== undefined ) material.emissiveIntensity = json.emissiveIntensity;\n\n\t\tif ( json.specularMap !== undefined ) material.specularMap = getTexture( json.specularMap );\n\t\tif ( json.specularIntensityMap !== undefined ) material.specularIntensityMap = getTexture( json.specularIntensityMap );\n\t\tif ( json.specularColorMap !== undefined ) material.specularColorMap = getTexture( json.specularColorMap );\n\n\t\tif ( json.envMap !== undefined ) material.envMap = getTexture( json.envMap );\n\t\tif ( json.envMapIntensity !== undefined ) material.envMapIntensity = json.envMapIntensity;\n\n\t\tif ( json.reflectivity !== undefined ) material.reflectivity = json.reflectivity;\n\t\tif ( json.refractionRatio !== undefined ) material.refractionRatio = json.refractionRatio;\n\n\t\tif ( json.lightMap !== undefined ) material.lightMap = getTexture( json.lightMap );\n\t\tif ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;\n\n\t\tif ( json.aoMap !== undefined ) material.aoMap = getTexture( json.aoMap );\n\t\tif ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;\n\n\t\tif ( json.gradientMap !== undefined ) material.gradientMap = getTexture( json.gradientMap );\n\n\t\tif ( json.clearcoatMap !== undefined ) material.clearcoatMap = getTexture( json.clearcoatMap );\n\t\tif ( json.clearcoatRoughnessMap !== undefined ) material.clearcoatRoughnessMap = getTexture( json.clearcoatRoughnessMap );\n\t\tif ( json.clearcoatNormalMap !== undefined ) material.clearcoatNormalMap = getTexture( json.clearcoatNormalMap );\n\t\tif ( json.clearcoatNormalScale !== undefined ) material.clearcoatNormalScale = new Vector2().fromArray( json.clearcoatNormalScale );\n\n\t\tif ( json.iridescenceMap !== undefined ) material.iridescenceMap = getTexture( json.iridescenceMap );\n\t\tif ( json.iridescenceThicknessMap !== undefined ) material.iridescenceThicknessMap = getTexture( json.iridescenceThicknessMap );\n\n\t\tif ( json.transmissionMap !== undefined ) material.transmissionMap = getTexture( json.transmissionMap );\n\t\tif ( json.thicknessMap !== undefined ) material.thicknessMap = getTexture( json.thicknessMap );\n\n\t\tif ( json.anisotropyMap !== undefined ) material.anisotropyMap = getTexture( json.anisotropyMap );\n\n\t\tif ( json.sheenColorMap !== undefined ) material.sheenColorMap = getTexture( json.sheenColorMap );\n\t\tif ( json.sheenRoughnessMap !== undefined ) material.sheenRoughnessMap = getTexture( json.sheenRoughnessMap );\n\n\t\treturn material;\n\n\t}\n\n\tsetTextures( value ) {\n\n\t\tthis.textures = value;\n\t\treturn this;\n\n\t}\n\n\tstatic createMaterialFromType( type ) {\n\n\t\tconst materialLib = {\n\t\t\tShadowMaterial,\n\t\t\tSpriteMaterial,\n\t\t\tRawShaderMaterial,\n\t\t\tShaderMaterial,\n\t\t\tPointsMaterial,\n\t\t\tMeshPhysicalMaterial,\n\t\t\tMeshStandardMaterial,\n\t\t\tMeshPhongMaterial,\n\t\t\tMeshToonMaterial,\n\t\t\tMeshNormalMaterial,\n\t\t\tMeshLambertMaterial,\n\t\t\tMeshDepthMaterial,\n\t\t\tMeshDistanceMaterial,\n\t\t\tMeshBasicMaterial,\n\t\t\tMeshMatcapMaterial,\n\t\t\tLineDashedMaterial,\n\t\t\tLineBasicMaterial,\n\t\t\tMaterial\n\t\t};\n\n\t\treturn new materialLib[ type ]();\n\n\t}\n\n}\n\nclass LoaderUtils {\n\n\tstatic decodeText( array ) {\n\n\t\tif ( typeof TextDecoder !== 'undefined' ) {\n\n\t\t\treturn new TextDecoder().decode( array );\n\n\t\t}\n\n\t\t// Avoid the String.fromCharCode.apply(null, array) shortcut, which\n\t\t// throws a \"maximum call stack size exceeded\" error for large arrays.\n\n\t\tlet s = '';\n\n\t\tfor ( let i = 0, il = array.length; i < il; i ++ ) {\n\n\t\t\t// Implicitly assumes little-endian.\n\t\t\ts += String.fromCharCode( array[ i ] );\n\n\t\t}\n\n\t\ttry {\n\n\t\t\t// merges multi-byte utf-8 characters.\n\n\t\t\treturn decodeURIComponent( escape( s ) );\n\n\t\t} catch ( e ) { // see #16358\n\n\t\t\treturn s;\n\n\t\t}\n\n\t}\n\n\tstatic extractUrlBase( url ) {\n\n\t\tconst index = url.lastIndexOf( '/' );\n\n\t\tif ( index === - 1 ) return './';\n\n\t\treturn url.slice( 0, index + 1 );\n\n\t}\n\n\tstatic resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n}\n\nclass InstancedBufferGeometry extends BufferGeometry {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isInstancedBufferGeometry = true;\n\n\t\tthis.type = 'InstancedBufferGeometry';\n\t\tthis.instanceCount = Infinity;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.instanceCount = source.instanceCount;\n\n\t\treturn this;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = super.toJSON();\n\n\t\tdata.instanceCount = this.instanceCount;\n\n\t\tdata.isInstancedBufferGeometry = true;\n\n\t\treturn data;\n\n\t}\n\n}\n\nclass BufferGeometryLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( JSON.parse( text ) ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tparse( json ) {\n\n\t\tconst interleavedBufferMap = {};\n\t\tconst arrayBufferMap = {};\n\n\t\tfunction getInterleavedBuffer( json, uuid ) {\n\n\t\t\tif ( interleavedBufferMap[ uuid ] !== undefined ) return interleavedBufferMap[ uuid ];\n\n\t\t\tconst interleavedBuffers = json.interleavedBuffers;\n\t\t\tconst interleavedBuffer = interleavedBuffers[ uuid ];\n\n\t\t\tconst buffer = getArrayBuffer( json, interleavedBuffer.buffer );\n\n\t\t\tconst array = getTypedArray( interleavedBuffer.type, buffer );\n\t\t\tconst ib = new InterleavedBuffer( array, interleavedBuffer.stride );\n\t\t\tib.uuid = interleavedBuffer.uuid;\n\n\t\t\tinterleavedBufferMap[ uuid ] = ib;\n\n\t\t\treturn ib;\n\n\t\t}\n\n\t\tfunction getArrayBuffer( json, uuid ) {\n\n\t\t\tif ( arrayBufferMap[ uuid ] !== undefined ) return arrayBufferMap[ uuid ];\n\n\t\t\tconst arrayBuffers = json.arrayBuffers;\n\t\t\tconst arrayBuffer = arrayBuffers[ uuid ];\n\n\t\t\tconst ab = new Uint32Array( arrayBuffer ).buffer;\n\n\t\t\tarrayBufferMap[ uuid ] = ab;\n\n\t\t\treturn ab;\n\n\t\t}\n\n\t\tconst geometry = json.isInstancedBufferGeometry ? new InstancedBufferGeometry() : new BufferGeometry();\n\n\t\tconst index = json.data.index;\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst typedArray = getTypedArray( index.type, index.array );\n\t\t\tgeometry.setIndex( new BufferAttribute( typedArray, 1 ) );\n\n\t\t}\n\n\t\tconst attributes = json.data.attributes;\n\n\t\tfor ( const key in attributes ) {\n\n\t\t\tconst attribute = attributes[ key ];\n\t\t\tlet bufferAttribute;\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t} else {\n\n\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\tconst bufferAttributeConstr = attribute.isInstancedBufferAttribute ? InstancedBufferAttribute : BufferAttribute;\n\t\t\t\tbufferAttribute = new bufferAttributeConstr( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t}\n\n\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\tif ( attribute.usage !== undefined ) bufferAttribute.setUsage( attribute.usage );\n\n\t\t\tif ( attribute.updateRange !== undefined ) {\n\n\t\t\t\tbufferAttribute.updateRange.offset = attribute.updateRange.offset;\n\t\t\t\tbufferAttribute.updateRange.count = attribute.updateRange.count;\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( key, bufferAttribute );\n\n\t\t}\n\n\t\tconst morphAttributes = json.data.morphAttributes;\n\n\t\tif ( morphAttributes ) {\n\n\t\t\tfor ( const key in morphAttributes ) {\n\n\t\t\t\tconst attributeArray = morphAttributes[ key ];\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\n\n\t\t\t\t\tconst attribute = attributeArray[ i ];\n\t\t\t\t\tlet bufferAttribute;\n\n\t\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\t\t\t\tconst interleavedBuffer = getInterleavedBuffer( json.data, attribute.data );\n\t\t\t\t\t\tbufferAttribute = new InterleavedBufferAttribute( interleavedBuffer, attribute.itemSize, attribute.offset, attribute.normalized );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst typedArray = getTypedArray( attribute.type, attribute.array );\n\t\t\t\t\t\tbufferAttribute = new BufferAttribute( typedArray, attribute.itemSize, attribute.normalized );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attribute.name !== undefined ) bufferAttribute.name = attribute.name;\n\t\t\t\t\tarray.push( bufferAttribute );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.morphAttributes[ key ] = array;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst morphTargetsRelative = json.data.morphTargetsRelative;\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t}\n\n\t\tconst groups = json.data.groups || json.data.drawcalls || json.data.offsets;\n\n\t\tif ( groups !== undefined ) {\n\n\t\t\tfor ( let i = 0, n = groups.length; i !== n; ++ i ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tgeometry.addGroup( group.start, group.count, group.materialIndex );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst boundingSphere = json.data.boundingSphere;\n\n\t\tif ( boundingSphere !== undefined ) {\n\n\t\t\tconst center = new Vector3();\n\n\t\t\tif ( boundingSphere.center !== undefined ) {\n\n\t\t\t\tcenter.fromArray( boundingSphere.center );\n\n\t\t\t}\n\n\t\t\tgeometry.boundingSphere = new Sphere( center, boundingSphere.radius );\n\n\t\t}\n\n\t\tif ( json.name ) geometry.name = json.name;\n\t\tif ( json.userData ) geometry.userData = json.userData;\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nclass ObjectLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\tlet json = null;\n\n\t\t\ttry {\n\n\t\t\t\tjson = JSON.parse( text );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( error );\n\n\t\t\t\tconsole.error( 'THREE:ObjectLoader: Can\\'t parse ' + url + '.', error.message );\n\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tconst metadata = json.metadata;\n\n\t\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\t\tif ( onError !== undefined ) onError( new Error( 'THREE.ObjectLoader: Can\\'t load ' + url ) );\n\n\t\t\t\tconsole.error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tscope.parse( json, onLoad );\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tasync loadAsync( url, onProgress ) {\n\n\t\tconst scope = this;\n\n\t\tconst path = ( this.path === '' ) ? LoaderUtils.extractUrlBase( url ) : this.path;\n\t\tthis.resourcePath = this.resourcePath || path;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\n\t\tconst text = await loader.loadAsync( url, onProgress );\n\n\t\tconst json = JSON.parse( text );\n\n\t\tconst metadata = json.metadata;\n\n\t\tif ( metadata === undefined || metadata.type === undefined || metadata.type.toLowerCase() === 'geometry' ) {\n\n\t\t\tthrow new Error( 'THREE.ObjectLoader: Can\\'t load ' + url );\n\n\t\t}\n\n\t\treturn await scope.parseAsync( json );\n\n\t}\n\n\tparse( json, onLoad ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = this.parseImages( json.images, function () {\n\n\t\t\tif ( onLoad !== undefined ) onLoad( object );\n\n\t\t} );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\t//\n\n\t\tif ( onLoad !== undefined ) {\n\n\t\t\tlet hasImages = false;\n\n\t\t\tfor ( const uuid in images ) {\n\n\t\t\t\tif ( images[ uuid ].data instanceof HTMLImageElement ) {\n\n\t\t\t\t\thasImages = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasImages === false ) onLoad( object );\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tasync parseAsync( json ) {\n\n\t\tconst animations = this.parseAnimations( json.animations );\n\t\tconst shapes = this.parseShapes( json.shapes );\n\t\tconst geometries = this.parseGeometries( json.geometries, shapes );\n\n\t\tconst images = await this.parseImagesAsync( json.images );\n\n\t\tconst textures = this.parseTextures( json.textures, images );\n\t\tconst materials = this.parseMaterials( json.materials, textures );\n\n\t\tconst object = this.parseObject( json.object, geometries, materials, textures, animations );\n\t\tconst skeletons = this.parseSkeletons( json.skeletons, object );\n\n\t\tthis.bindSkeletons( object, skeletons );\n\n\t\treturn object;\n\n\t}\n\n\tparseShapes( json ) {\n\n\t\tconst shapes = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst shape = new Shape().fromJSON( json[ i ] );\n\n\t\t\t\tshapes[ shape.uuid ] = shape;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn shapes;\n\n\t}\n\n\tparseSkeletons( json, object ) {\n\n\t\tconst skeletons = {};\n\t\tconst bones = {};\n\n\t\t// generate bone lookup table\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isBone ) bones[ child.uuid ] = child;\n\n\t\t} );\n\n\t\t// create skeletons\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst skeleton = new Skeleton().fromJSON( json[ i ], bones );\n\n\t\t\t\tskeletons[ skeleton.uuid ] = skeleton;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn skeletons;\n\n\t}\n\n\tparseGeometries( json, shapes ) {\n\n\t\tconst geometries = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst bufferGeometryLoader = new BufferGeometryLoader();\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tlet geometry;\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tswitch ( data.type ) {\n\n\t\t\t\t\tcase 'BufferGeometry':\n\t\t\t\t\tcase 'InstancedBufferGeometry':\n\n\t\t\t\t\t\tgeometry = bufferGeometryLoader.parse( data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tif ( data.type in Geometries ) {\n\n\t\t\t\t\t\t\tgeometry = Geometries[ data.type ].fromJSON( data, shapes );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tconsole.warn( `THREE.ObjectLoader: Unsupported geometry type \"${ data.type }\"` );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) geometry.name = data.name;\n\t\t\t\tif ( data.userData !== undefined ) geometry.userData = data.userData;\n\n\t\t\t\tgeometries[ data.uuid ] = geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn geometries;\n\n\t}\n\n\tparseMaterials( json, textures ) {\n\n\t\tconst cache = {}; // MultiMaterial\n\t\tconst materials = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tconst loader = new MaterialLoader();\n\t\t\tloader.setTextures( textures );\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( cache[ data.uuid ] === undefined ) {\n\n\t\t\t\t\tcache[ data.uuid ] = loader.parse( data );\n\n\t\t\t\t}\n\n\t\t\t\tmaterials[ data.uuid ] = cache[ data.uuid ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn materials;\n\n\t}\n\n\tparseAnimations( json ) {\n\n\t\tconst animations = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < json.length; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tconst clip = AnimationClip.parse( data );\n\n\t\t\t\tanimations[ clip.uuid ] = clip;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn animations;\n\n\t}\n\n\tparseImages( json, onLoad ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tfunction loadImage( url ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\treturn loader.load( url, function () {\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, undefined, function () {\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn loadImage( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tconst manager = new LoadingManager( onLoad );\n\n\t\t\tloader = new ImageLoader( manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tasync parseImagesAsync( json ) {\n\n\t\tconst scope = this;\n\t\tconst images = {};\n\n\t\tlet loader;\n\n\t\tasync function deserializeImage( image ) {\n\n\t\t\tif ( typeof image === 'string' ) {\n\n\t\t\t\tconst url = image;\n\n\t\t\t\tconst path = /^(\\/\\/)|([a-z]+:(\\/\\/)?)/i.test( url ) ? url : scope.resourcePath + url;\n\n\t\t\t\treturn await loader.loadAsync( path );\n\n\t\t\t} else {\n\n\t\t\t\tif ( image.data ) {\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdata: getTypedArray( image.type, image.data ),\n\t\t\t\t\t\twidth: image.width,\n\t\t\t\t\t\theight: image.height\n\t\t\t\t\t};\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( json !== undefined && json.length > 0 ) {\n\n\t\t\tloader = new ImageLoader( this.manager );\n\t\t\tloader.setCrossOrigin( this.crossOrigin );\n\n\t\t\tfor ( let i = 0, il = json.length; i < il; i ++ ) {\n\n\t\t\t\tconst image = json[ i ];\n\t\t\t\tconst url = image.url;\n\n\t\t\t\tif ( Array.isArray( url ) ) {\n\n\t\t\t\t\t// load array of images e.g CubeTexture\n\n\t\t\t\t\tconst imageArray = [];\n\n\t\t\t\t\tfor ( let j = 0, jl = url.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tconst currentUrl = url[ j ];\n\n\t\t\t\t\t\tconst deserializedImage = await deserializeImage( currentUrl );\n\n\t\t\t\t\t\tif ( deserializedImage !== null ) {\n\n\t\t\t\t\t\t\tif ( deserializedImage instanceof HTMLImageElement ) {\n\n\t\t\t\t\t\t\t\timageArray.push( deserializedImage );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// special case: handle array of data textures for cube textures\n\n\t\t\t\t\t\t\t\timageArray.push( new DataTexture( deserializedImage.data, deserializedImage.width, deserializedImage.height ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\timages[ image.uuid ] = new Source( imageArray );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// load single image\n\n\t\t\t\t\tconst deserializedImage = await deserializeImage( image.url );\n\t\t\t\t\timages[ image.uuid ] = new Source( deserializedImage );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn images;\n\n\t}\n\n\tparseTextures( json, images ) {\n\n\t\tfunction parseConstant( value, type ) {\n\n\t\t\tif ( typeof value === 'number' ) return value;\n\n\t\t\tconsole.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );\n\n\t\t\treturn type[ value ];\n\n\t\t}\n\n\t\tconst textures = {};\n\n\t\tif ( json !== undefined ) {\n\n\t\t\tfor ( let i = 0, l = json.length; i < l; i ++ ) {\n\n\t\t\t\tconst data = json[ i ];\n\n\t\t\t\tif ( data.image === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No \"image\" specified for', data.uuid );\n\n\t\t\t\t}\n\n\t\t\t\tif ( images[ data.image ] === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined image', data.image );\n\n\t\t\t\t}\n\n\t\t\t\tconst source = images[ data.image ];\n\t\t\t\tconst image = source.data;\n\n\t\t\t\tlet texture;\n\n\t\t\t\tif ( Array.isArray( image ) ) {\n\n\t\t\t\t\ttexture = new CubeTexture();\n\n\t\t\t\t\tif ( image.length === 6 ) texture.needsUpdate = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( image && image.data ) {\n\n\t\t\t\t\t\ttexture = new DataTexture();\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttexture = new Texture();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( image ) texture.needsUpdate = true; // textures can have undefined image data\n\n\t\t\t\t}\n\n\t\t\t\ttexture.source = source;\n\n\t\t\t\ttexture.uuid = data.uuid;\n\n\t\t\t\tif ( data.name !== undefined ) texture.name = data.name;\n\n\t\t\t\tif ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping, TEXTURE_MAPPING );\n\t\t\t\tif ( data.channel !== undefined ) texture.channel = data.channel;\n\n\t\t\t\tif ( data.offset !== undefined ) texture.offset.fromArray( data.offset );\n\t\t\t\tif ( data.repeat !== undefined ) texture.repeat.fromArray( data.repeat );\n\t\t\t\tif ( data.center !== undefined ) texture.center.fromArray( data.center );\n\t\t\t\tif ( data.rotation !== undefined ) texture.rotation = data.rotation;\n\n\t\t\t\tif ( data.wrap !== undefined ) {\n\n\t\t\t\t\ttexture.wrapS = parseConstant( data.wrap[ 0 ], TEXTURE_WRAPPING );\n\t\t\t\t\ttexture.wrapT = parseConstant( data.wrap[ 1 ], TEXTURE_WRAPPING );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.format !== undefined ) texture.format = data.format;\n\t\t\t\tif ( data.internalFormat !== undefined ) texture.internalFormat = data.internalFormat;\n\t\t\t\tif ( data.type !== undefined ) texture.type = data.type;\n\t\t\t\tif ( data.colorSpace !== undefined ) texture.colorSpace = data.colorSpace;\n\t\t\t\tif ( data.encoding !== undefined ) texture.encoding = data.encoding; // @deprecated, r152\n\n\t\t\t\tif ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter, TEXTURE_FILTER );\n\t\t\t\tif ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;\n\n\t\t\t\tif ( data.flipY !== undefined ) texture.flipY = data.flipY;\n\n\t\t\t\tif ( data.generateMipmaps !== undefined ) texture.generateMipmaps = data.generateMipmaps;\n\t\t\t\tif ( data.premultiplyAlpha !== undefined ) texture.premultiplyAlpha = data.premultiplyAlpha;\n\t\t\t\tif ( data.unpackAlignment !== undefined ) texture.unpackAlignment = data.unpackAlignment;\n\t\t\t\tif ( data.compareFunction !== undefined ) texture.compareFunction = data.compareFunction;\n\n\t\t\t\tif ( data.userData !== undefined ) texture.userData = data.userData;\n\n\t\t\t\ttextures[ data.uuid ] = texture;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn textures;\n\n\t}\n\n\tparseObject( data, geometries, materials, textures, animations ) {\n\n\t\tlet object;\n\n\t\tfunction getGeometry( name ) {\n\n\t\t\tif ( geometries[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined geometry', name );\n\n\t\t\t}\n\n\t\t\treturn geometries[ name ];\n\n\t\t}\n\n\t\tfunction getMaterial( name ) {\n\n\t\t\tif ( name === undefined ) return undefined;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\n\t\t\t\tconst array = [];\n\n\t\t\t\tfor ( let i = 0, l = name.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst uuid = name[ i ];\n\n\t\t\t\t\tif ( materials[ uuid ] === undefined ) {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', uuid );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tarray.push( materials[ uuid ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn array;\n\n\t\t\t}\n\n\t\t\tif ( materials[ name ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined material', name );\n\n\t\t\t}\n\n\t\t\treturn materials[ name ];\n\n\t\t}\n\n\t\tfunction getTexture( uuid ) {\n\n\t\t\tif ( textures[ uuid ] === undefined ) {\n\n\t\t\t\tconsole.warn( 'THREE.ObjectLoader: Undefined texture', uuid );\n\n\t\t\t}\n\n\t\t\treturn textures[ uuid ];\n\n\t\t}\n\n\t\tlet geometry, material;\n\n\t\tswitch ( data.type ) {\n\n\t\t\tcase 'Scene':\n\n\t\t\t\tobject = new Scene();\n\n\t\t\t\tif ( data.background !== undefined ) {\n\n\t\t\t\t\tif ( Number.isInteger( data.background ) ) {\n\n\t\t\t\t\t\tobject.background = new Color( data.background );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tobject.background = getTexture( data.background );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.environment !== undefined ) {\n\n\t\t\t\t\tobject.environment = getTexture( data.environment );\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.fog !== undefined ) {\n\n\t\t\t\t\tif ( data.fog.type === 'Fog' ) {\n\n\t\t\t\t\t\tobject.fog = new Fog( data.fog.color, data.fog.near, data.fog.far );\n\n\t\t\t\t\t} else if ( data.fog.type === 'FogExp2' ) {\n\n\t\t\t\t\t\tobject.fog = new FogExp2( data.fog.color, data.fog.density );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( data.fog.name !== '' ) {\n\n\t\t\t\t\t\tobject.fog.name = data.fog.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( data.backgroundBlurriness !== undefined ) object.backgroundBlurriness = data.backgroundBlurriness;\n\t\t\t\tif ( data.backgroundIntensity !== undefined ) object.backgroundIntensity = data.backgroundIntensity;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PerspectiveCamera':\n\n\t\t\t\tobject = new PerspectiveCamera( data.fov, data.aspect, data.near, data.far );\n\n\t\t\t\tif ( data.focus !== undefined ) object.focus = data.focus;\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.filmGauge !== undefined ) object.filmGauge = data.filmGauge;\n\t\t\t\tif ( data.filmOffset !== undefined ) object.filmOffset = data.filmOffset;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'OrthographicCamera':\n\n\t\t\t\tobject = new OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );\n\n\t\t\t\tif ( data.zoom !== undefined ) object.zoom = data.zoom;\n\t\t\t\tif ( data.view !== undefined ) object.view = Object.assign( {}, data.view );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'AmbientLight':\n\n\t\t\t\tobject = new AmbientLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'DirectionalLight':\n\n\t\t\t\tobject = new DirectionalLight( data.color, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointLight':\n\n\t\t\t\tobject = new PointLight( data.color, data.intensity, data.distance, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'RectAreaLight':\n\n\t\t\t\tobject = new RectAreaLight( data.color, data.intensity, data.width, data.height );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SpotLight':\n\n\t\t\t\tobject = new SpotLight( data.color, data.intensity, data.distance, data.angle, data.penumbra, data.decay );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'HemisphereLight':\n\n\t\t\t\tobject = new HemisphereLight( data.color, data.groundColor, data.intensity );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LightProbe':\n\n\t\t\t\tobject = new LightProbe().fromJSON( data );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'SkinnedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t \tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new SkinnedMesh( geometry, material );\n\n\t\t\t\tif ( data.bindMode !== undefined ) object.bindMode = data.bindMode;\n\t\t\t\tif ( data.bindMatrix !== undefined ) object.bindMatrix.fromArray( data.bindMatrix );\n\t\t\t\tif ( data.skeleton !== undefined ) object.skeleton = data.skeleton;\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Mesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\n\t\t\t\tobject = new Mesh( geometry, material );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'InstancedMesh':\n\n\t\t\t\tgeometry = getGeometry( data.geometry );\n\t\t\t\tmaterial = getMaterial( data.material );\n\t\t\t\tconst count = data.count;\n\t\t\t\tconst instanceMatrix = data.instanceMatrix;\n\t\t\t\tconst instanceColor = data.instanceColor;\n\n\t\t\t\tobject = new InstancedMesh( geometry, material, count );\n\t\t\t\tobject.instanceMatrix = new InstancedBufferAttribute( new Float32Array( instanceMatrix.array ), 16 );\n\t\t\t\tif ( instanceColor !== undefined ) object.instanceColor = new InstancedBufferAttribute( new Float32Array( instanceColor.array ), instanceColor.itemSize );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LOD':\n\n\t\t\t\tobject = new LOD();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Line':\n\n\t\t\t\tobject = new Line( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineLoop':\n\n\t\t\t\tobject = new LineLoop( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'LineSegments':\n\n\t\t\t\tobject = new LineSegments( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'PointCloud':\n\t\t\tcase 'Points':\n\n\t\t\t\tobject = new Points( getGeometry( data.geometry ), getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Sprite':\n\n\t\t\t\tobject = new Sprite( getMaterial( data.material ) );\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Group':\n\n\t\t\t\tobject = new Group();\n\n\t\t\t\tbreak;\n\n\t\t\tcase 'Bone':\n\n\t\t\t\tobject = new Bone();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tobject = new Object3D();\n\n\t\t}\n\n\t\tobject.uuid = data.uuid;\n\n\t\tif ( data.name !== undefined ) object.name = data.name;\n\n\t\tif ( data.matrix !== undefined ) {\n\n\t\t\tobject.matrix.fromArray( data.matrix );\n\n\t\t\tif ( data.matrixAutoUpdate !== undefined ) object.matrixAutoUpdate = data.matrixAutoUpdate;\n\t\t\tif ( object.matrixAutoUpdate ) object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t} else {\n\n\t\t\tif ( data.position !== undefined ) object.position.fromArray( data.position );\n\t\t\tif ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );\n\t\t\tif ( data.quaternion !== undefined ) object.quaternion.fromArray( data.quaternion );\n\t\t\tif ( data.scale !== undefined ) object.scale.fromArray( data.scale );\n\n\t\t}\n\n\t\tif ( data.up !== undefined ) object.up.fromArray( data.up );\n\n\t\tif ( data.castShadow !== undefined ) object.castShadow = data.castShadow;\n\t\tif ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;\n\n\t\tif ( data.shadow ) {\n\n\t\t\tif ( data.shadow.bias !== undefined ) object.shadow.bias = data.shadow.bias;\n\t\t\tif ( data.shadow.normalBias !== undefined ) object.shadow.normalBias = data.shadow.normalBias;\n\t\t\tif ( data.shadow.radius !== undefined ) object.shadow.radius = data.shadow.radius;\n\t\t\tif ( data.shadow.mapSize !== undefined ) object.shadow.mapSize.fromArray( data.shadow.mapSize );\n\t\t\tif ( data.shadow.camera !== undefined ) object.shadow.camera = this.parseObject( data.shadow.camera );\n\n\t\t}\n\n\t\tif ( data.visible !== undefined ) object.visible = data.visible;\n\t\tif ( data.frustumCulled !== undefined ) object.frustumCulled = data.frustumCulled;\n\t\tif ( data.renderOrder !== undefined ) object.renderOrder = data.renderOrder;\n\t\tif ( data.userData !== undefined ) object.userData = data.userData;\n\t\tif ( data.layers !== undefined ) object.layers.mask = data.layers;\n\n\t\tif ( data.children !== undefined ) {\n\n\t\t\tconst children = data.children;\n\n\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tobject.add( this.parseObject( children[ i ], geometries, materials, textures, animations ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.animations !== undefined ) {\n\n\t\t\tconst objectAnimations = data.animations;\n\n\t\t\tfor ( let i = 0; i < objectAnimations.length; i ++ ) {\n\n\t\t\t\tconst uuid = objectAnimations[ i ];\n\n\t\t\t\tobject.animations.push( animations[ uuid ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( data.type === 'LOD' ) {\n\n\t\t\tif ( data.autoUpdate !== undefined ) object.autoUpdate = data.autoUpdate;\n\n\t\t\tconst levels = data.levels;\n\n\t\t\tfor ( let l = 0; l < levels.length; l ++ ) {\n\n\t\t\t\tconst level = levels[ l ];\n\t\t\t\tconst child = object.getObjectByProperty( 'uuid', level.object );\n\n\t\t\t\tif ( child !== undefined ) {\n\n\t\t\t\t\tobject.addLevel( child, level.distance, level.hysteresis );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn object;\n\n\t}\n\n\tbindSkeletons( object, skeletons ) {\n\n\t\tif ( Object.keys( skeletons ).length === 0 ) return;\n\n\t\tobject.traverse( function ( child ) {\n\n\t\t\tif ( child.isSkinnedMesh === true && child.skeleton !== undefined ) {\n\n\t\t\t\tconst skeleton = skeletons[ child.skeleton ];\n\n\t\t\t\tif ( skeleton === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ObjectLoader: No skeleton found with UUID:', child.skeleton );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tchild.bind( skeleton, child.bindMatrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n}\n\nconst TEXTURE_MAPPING = {\n\tUVMapping: UVMapping,\n\tCubeReflectionMapping: CubeReflectionMapping,\n\tCubeRefractionMapping: CubeRefractionMapping,\n\tEquirectangularReflectionMapping: EquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping: EquirectangularRefractionMapping,\n\tCubeUVReflectionMapping: CubeUVReflectionMapping\n};\n\nconst TEXTURE_WRAPPING = {\n\tRepeatWrapping: RepeatWrapping,\n\tClampToEdgeWrapping: ClampToEdgeWrapping,\n\tMirroredRepeatWrapping: MirroredRepeatWrapping\n};\n\nconst TEXTURE_FILTER = {\n\tNearestFilter: NearestFilter,\n\tNearestMipmapNearestFilter: NearestMipmapNearestFilter,\n\tNearestMipmapLinearFilter: NearestMipmapLinearFilter,\n\tLinearFilter: LinearFilter,\n\tLinearMipmapNearestFilter: LinearMipmapNearestFilter,\n\tLinearMipmapLinearFilter: LinearMipmapLinearFilter\n};\n\nclass ImageBitmapLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.isImageBitmapLoader = true;\n\n\t\tif ( typeof createImageBitmap === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: createImageBitmap() not supported.' );\n\n\t\t}\n\n\t\tif ( typeof fetch === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.ImageBitmapLoader: fetch() not supported.' );\n\n\t\t}\n\n\t\tthis.options = { premultiplyAlpha: 'none' };\n\n\t}\n\n\tsetOptions( options ) {\n\n\t\tthis.options = options;\n\n\t\treturn this;\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tconst scope = this;\n\n\t\tconst cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\tconst fetchOptions = {};\n\t\tfetchOptions.credentials = ( this.crossOrigin === 'anonymous' ) ? 'same-origin' : 'include';\n\t\tfetchOptions.headers = this.requestHeader;\n\n\t\tfetch( url, fetchOptions ).then( function ( res ) {\n\n\t\t\treturn res.blob();\n\n\t\t} ).then( function ( blob ) {\n\n\t\t\treturn createImageBitmap( blob, Object.assign( scope.options, { colorSpaceConversion: 'none' } ) );\n\n\t\t} ).then( function ( imageBitmap ) {\n\n\t\t\tCache.add( url, imageBitmap );\n\n\t\t\tif ( onLoad ) onLoad( imageBitmap );\n\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} ).catch( function ( e ) {\n\n\t\t\tif ( onError ) onError( e );\n\n\t\t\tscope.manager.itemError( url );\n\t\t\tscope.manager.itemEnd( url );\n\n\t\t} );\n\n\t\tscope.manager.itemStart( url );\n\n\t}\n\n}\n\nlet _context;\n\nclass AudioContext {\n\n\tstatic getContext() {\n\n\t\tif ( _context === undefined ) {\n\n\t\t\t_context = new ( window.AudioContext || window.webkitAudioContext )();\n\n\t\t}\n\n\t\treturn _context;\n\n\t}\n\n\tstatic setContext( value ) {\n\n\t\t_context = value;\n\n\t}\n\n}\n\nclass AudioLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\ttry {\n\n\t\t\t\t// Create a copy of the buffer. The `decodeAudioData` method\n\t\t\t\t// detaches the buffer when complete, preventing reuse.\n\t\t\t\tconst bufferCopy = buffer.slice( 0 );\n\n\t\t\t\tconst context = AudioContext.getContext();\n\t\t\t\tcontext.decodeAudioData( bufferCopy, function ( audioBuffer ) {\n\n\t\t\t\t\tonLoad( audioBuffer );\n\n\t\t\t\t}, handleError );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\thandleError( e );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t\tfunction handleError( e ) {\n\n\t\t\tif ( onError ) {\n\n\t\t\t\tonError( e );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( e );\n\n\t\t\t}\n\n\t\t\tscope.manager.itemError( url );\n\n\t\t}\n\n\t}\n\n}\n\nconst _eyeRight = /*@__PURE__*/ new Matrix4();\nconst _eyeLeft = /*@__PURE__*/ new Matrix4();\nconst _projectionMatrix = /*@__PURE__*/ new Matrix4();\n\nclass StereoCamera {\n\n\tconstructor() {\n\n\t\tthis.type = 'StereoCamera';\n\n\t\tthis.aspect = 1;\n\n\t\tthis.eyeSep = 0.064;\n\n\t\tthis.cameraL = new PerspectiveCamera();\n\t\tthis.cameraL.layers.enable( 1 );\n\t\tthis.cameraL.matrixAutoUpdate = false;\n\n\t\tthis.cameraR = new PerspectiveCamera();\n\t\tthis.cameraR.layers.enable( 2 );\n\t\tthis.cameraR.matrixAutoUpdate = false;\n\n\t\tthis._cache = {\n\t\t\tfocus: null,\n\t\t\tfov: null,\n\t\t\taspect: null,\n\t\t\tnear: null,\n\t\t\tfar: null,\n\t\t\tzoom: null,\n\t\t\teyeSep: null\n\t\t};\n\n\t}\n\n\tupdate( camera ) {\n\n\t\tconst cache = this._cache;\n\n\t\tconst needsUpdate = cache.focus !== camera.focus || cache.fov !== camera.fov ||\n\t\t\tcache.aspect !== camera.aspect * this.aspect || cache.near !== camera.near ||\n\t\t\tcache.far !== camera.far || cache.zoom !== camera.zoom || cache.eyeSep !== this.eyeSep;\n\n\t\tif ( needsUpdate ) {\n\n\t\t\tcache.focus = camera.focus;\n\t\t\tcache.fov = camera.fov;\n\t\t\tcache.aspect = camera.aspect * this.aspect;\n\t\t\tcache.near = camera.near;\n\t\t\tcache.far = camera.far;\n\t\t\tcache.zoom = camera.zoom;\n\t\t\tcache.eyeSep = this.eyeSep;\n\n\t\t\t// Off-axis stereoscopic effect based on\n\t\t\t// http://paulbourke.net/stereographics/stereorender/\n\n\t\t\t_projectionMatrix.copy( camera.projectionMatrix );\n\t\t\tconst eyeSepHalf = cache.eyeSep / 2;\n\t\t\tconst eyeSepOnProjection = eyeSepHalf * cache.near / cache.focus;\n\t\t\tconst ymax = ( cache.near * Math.tan( DEG2RAD * cache.fov * 0.5 ) ) / cache.zoom;\n\t\t\tlet xmin, xmax;\n\n\t\t\t// translate xOffset\n\n\t\t\t_eyeLeft.elements[ 12 ] = - eyeSepHalf;\n\t\t\t_eyeRight.elements[ 12 ] = eyeSepHalf;\n\n\t\t\t// for left eye\n\n\t\t\txmin = - ymax * cache.aspect + eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect + eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraL.projectionMatrix.copy( _projectionMatrix );\n\n\t\t\t// for right eye\n\n\t\t\txmin = - ymax * cache.aspect - eyeSepOnProjection;\n\t\t\txmax = ymax * cache.aspect - eyeSepOnProjection;\n\n\t\t\t_projectionMatrix.elements[ 0 ] = 2 * cache.near / ( xmax - xmin );\n\t\t\t_projectionMatrix.elements[ 8 ] = ( xmax + xmin ) / ( xmax - xmin );\n\n\t\t\tthis.cameraR.projectionMatrix.copy( _projectionMatrix );\n\n\t\t}\n\n\t\tthis.cameraL.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeLeft );\n\t\tthis.cameraR.matrixWorld.copy( camera.matrixWorld ).multiply( _eyeRight );\n\n\t}\n\n}\n\nclass Clock {\n\n\tconstructor( autoStart = true ) {\n\n\t\tthis.autoStart = autoStart;\n\n\t\tthis.startTime = 0;\n\t\tthis.oldTime = 0;\n\t\tthis.elapsedTime = 0;\n\n\t\tthis.running = false;\n\n\t}\n\n\tstart() {\n\n\t\tthis.startTime = now();\n\n\t\tthis.oldTime = this.startTime;\n\t\tthis.elapsedTime = 0;\n\t\tthis.running = true;\n\n\t}\n\n\tstop() {\n\n\t\tthis.getElapsedTime();\n\t\tthis.running = false;\n\t\tthis.autoStart = false;\n\n\t}\n\n\tgetElapsedTime() {\n\n\t\tthis.getDelta();\n\t\treturn this.elapsedTime;\n\n\t}\n\n\tgetDelta() {\n\n\t\tlet diff = 0;\n\n\t\tif ( this.autoStart && ! this.running ) {\n\n\t\t\tthis.start();\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tif ( this.running ) {\n\n\t\t\tconst newTime = now();\n\n\t\t\tdiff = ( newTime - this.oldTime ) / 1000;\n\t\t\tthis.oldTime = newTime;\n\n\t\t\tthis.elapsedTime += diff;\n\n\t\t}\n\n\t\treturn diff;\n\n\t}\n\n}\n\nfunction now() {\n\n\treturn ( typeof performance === 'undefined' ? Date : performance ).now(); // see #10732\n\n}\n\nconst _position$1 = /*@__PURE__*/ new Vector3();\nconst _quaternion$1 = /*@__PURE__*/ new Quaternion();\nconst _scale$1 = /*@__PURE__*/ new Vector3();\nconst _orientation$1 = /*@__PURE__*/ new Vector3();\n\nclass AudioListener extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.type = 'AudioListener';\n\n\t\tthis.context = AudioContext.getContext();\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( this.context.destination );\n\n\t\tthis.filter = null;\n\n\t\tthis.timeDelta = 0;\n\n\t\t// private\n\n\t\tthis._clock = new Clock();\n\n\t}\n\n\tgetInput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tremoveFilter() {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\t\t\tthis.gain.connect( this.context.destination );\n\t\t\tthis.filter = null;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.filter;\n\n\t}\n\n\tsetFilter( value ) {\n\n\t\tif ( this.filter !== null ) {\n\n\t\t\tthis.gain.disconnect( this.filter );\n\t\t\tthis.filter.disconnect( this.context.destination );\n\n\t\t} else {\n\n\t\t\tthis.gain.disconnect( this.context.destination );\n\n\t\t}\n\n\t\tthis.filter = value;\n\t\tthis.gain.connect( this.filter );\n\t\tthis.filter.connect( this.context.destination );\n\n\t\treturn this;\n\n\t}\n\n\tgetMasterVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetMasterVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tconst listener = this.context.listener;\n\t\tconst up = this.up;\n\n\t\tthis.timeDelta = this._clock.getDelta();\n\n\t\tthis.matrixWorld.decompose( _position$1, _quaternion$1, _scale$1 );\n\n\t\t_orientation$1.set( 0, 0, - 1 ).applyQuaternion( _quaternion$1 );\n\n\t\tif ( listener.positionX ) {\n\n\t\t\t// code path for Chrome (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.timeDelta;\n\n\t\t\tlistener.positionX.linearRampToValueAtTime( _position$1.x, endTime );\n\t\t\tlistener.positionY.linearRampToValueAtTime( _position$1.y, endTime );\n\t\t\tlistener.positionZ.linearRampToValueAtTime( _position$1.z, endTime );\n\t\t\tlistener.forwardX.linearRampToValueAtTime( _orientation$1.x, endTime );\n\t\t\tlistener.forwardY.linearRampToValueAtTime( _orientation$1.y, endTime );\n\t\t\tlistener.forwardZ.linearRampToValueAtTime( _orientation$1.z, endTime );\n\t\t\tlistener.upX.linearRampToValueAtTime( up.x, endTime );\n\t\t\tlistener.upY.linearRampToValueAtTime( up.y, endTime );\n\t\t\tlistener.upZ.linearRampToValueAtTime( up.z, endTime );\n\n\t\t} else {\n\n\t\t\tlistener.setPosition( _position$1.x, _position$1.y, _position$1.z );\n\t\t\tlistener.setOrientation( _orientation$1.x, _orientation$1.y, _orientation$1.z, up.x, up.y, up.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass Audio extends Object3D {\n\n\tconstructor( listener ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'Audio';\n\n\t\tthis.listener = listener;\n\t\tthis.context = listener.context;\n\n\t\tthis.gain = this.context.createGain();\n\t\tthis.gain.connect( listener.getInput() );\n\n\t\tthis.autoplay = false;\n\n\t\tthis.buffer = null;\n\t\tthis.detune = 0;\n\t\tthis.loop = false;\n\t\tthis.loopStart = 0;\n\t\tthis.loopEnd = 0;\n\t\tthis.offset = 0;\n\t\tthis.duration = undefined;\n\t\tthis.playbackRate = 1;\n\t\tthis.isPlaying = false;\n\t\tthis.hasPlaybackControl = true;\n\t\tthis.source = null;\n\t\tthis.sourceType = 'empty';\n\n\t\tthis._startedAt = 0;\n\t\tthis._progress = 0;\n\t\tthis._connected = false;\n\n\t\tthis.filters = [];\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.gain;\n\n\t}\n\n\tsetNodeSource( audioNode ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'audioNode';\n\t\tthis.source = audioNode;\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaElementSource( mediaElement ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaNode';\n\t\tthis.source = this.context.createMediaElementSource( mediaElement );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetMediaStreamSource( mediaStream ) {\n\n\t\tthis.hasPlaybackControl = false;\n\t\tthis.sourceType = 'mediaStreamNode';\n\t\tthis.source = this.context.createMediaStreamSource( mediaStream );\n\t\tthis.connect();\n\n\t\treturn this;\n\n\t}\n\n\tsetBuffer( audioBuffer ) {\n\n\t\tthis.buffer = audioBuffer;\n\t\tthis.sourceType = 'buffer';\n\n\t\tif ( this.autoplay ) this.play();\n\n\t\treturn this;\n\n\t}\n\n\tplay( delay = 0 ) {\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: Audio is already playing.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._startedAt = this.context.currentTime + delay;\n\n\t\tconst source = this.context.createBufferSource();\n\t\tsource.buffer = this.buffer;\n\t\tsource.loop = this.loop;\n\t\tsource.loopStart = this.loopStart;\n\t\tsource.loopEnd = this.loopEnd;\n\t\tsource.onended = this.onEnded.bind( this );\n\t\tsource.start( this._startedAt, this._progress + this.offset, this.duration );\n\n\t\tthis.isPlaying = true;\n\n\t\tthis.source = source;\n\n\t\tthis.setDetune( this.detune );\n\t\tthis.setPlaybackRate( this.playbackRate );\n\n\t\treturn this.connect();\n\n\t}\n\n\tpause() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\t// update current progress\n\n\t\t\tthis._progress += Math.max( this.context.currentTime - this._startedAt, 0 ) * this.playbackRate;\n\n\t\t\tif ( this.loop === true ) {\n\n\t\t\t\t// ensure _progress does not exceed duration with looped audios\n\n\t\t\t\tthis._progress = this._progress % ( this.duration || this.buffer.duration );\n\n\t\t\t}\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t\tthis.isPlaying = false;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis._progress = 0;\n\n\t\tif ( this.source !== null ) {\n\n\t\t\tthis.source.stop();\n\t\t\tthis.source.onended = null;\n\n\t\t}\n\n\t\tthis.isPlaying = false;\n\n\t\treturn this;\n\n\t}\n\n\tconnect() {\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.connect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].connect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].connect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.connect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = true;\n\n\t\treturn this;\n\n\t}\n\n\tdisconnect() {\n\n\t\tif ( this._connected === false ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( this.filters.length > 0 ) {\n\n\t\t\tthis.source.disconnect( this.filters[ 0 ] );\n\n\t\t\tfor ( let i = 1, l = this.filters.length; i < l; i ++ ) {\n\n\t\t\t\tthis.filters[ i - 1 ].disconnect( this.filters[ i ] );\n\n\t\t\t}\n\n\t\t\tthis.filters[ this.filters.length - 1 ].disconnect( this.getOutput() );\n\n\t\t} else {\n\n\t\t\tthis.source.disconnect( this.getOutput() );\n\n\t\t}\n\n\t\tthis._connected = false;\n\n\t\treturn this;\n\n\t}\n\n\tgetFilters() {\n\n\t\treturn this.filters;\n\n\t}\n\n\tsetFilters( value ) {\n\n\t\tif ( ! value ) value = [];\n\n\t\tif ( this._connected === true ) {\n\n\t\t\tthis.disconnect();\n\t\t\tthis.filters = value.slice();\n\t\t\tthis.connect();\n\n\t\t} else {\n\n\t\t\tthis.filters = value.slice();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetDetune( value ) {\n\n\t\tthis.detune = value;\n\n\t\tif ( this.source.detune === undefined ) return; // only set detune when available\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.detune.setTargetAtTime( this.detune, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetDetune() {\n\n\t\treturn this.detune;\n\n\t}\n\n\tgetFilter() {\n\n\t\treturn this.getFilters()[ 0 ];\n\n\t}\n\n\tsetFilter( filter ) {\n\n\t\treturn this.setFilters( filter ? [ filter ] : [] );\n\n\t}\n\n\tsetPlaybackRate( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.playbackRate = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.playbackRate.setTargetAtTime( this.playbackRate, this.context.currentTime, 0.01 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tgetPlaybackRate() {\n\n\t\treturn this.playbackRate;\n\n\t}\n\n\tonEnded() {\n\n\t\tthis.isPlaying = false;\n\n\t}\n\n\tgetLoop() {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn false;\n\n\t\t}\n\n\t\treturn this.loop;\n\n\t}\n\n\tsetLoop( value ) {\n\n\t\tif ( this.hasPlaybackControl === false ) {\n\n\t\t\tconsole.warn( 'THREE.Audio: this Audio has no playback control.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tthis.loop = value;\n\n\t\tif ( this.isPlaying === true ) {\n\n\t\t\tthis.source.loop = this.loop;\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopStart( value ) {\n\n\t\tthis.loopStart = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoopEnd( value ) {\n\n\t\tthis.loopEnd = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetVolume() {\n\n\t\treturn this.gain.gain.value;\n\n\t}\n\n\tsetVolume( value ) {\n\n\t\tthis.gain.gain.setTargetAtTime( value, this.context.currentTime, 0.01 );\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _position = /*@__PURE__*/ new Vector3();\nconst _quaternion = /*@__PURE__*/ new Quaternion();\nconst _scale = /*@__PURE__*/ new Vector3();\nconst _orientation = /*@__PURE__*/ new Vector3();\n\nclass PositionalAudio extends Audio {\n\n\tconstructor( listener ) {\n\n\t\tsuper( listener );\n\n\t\tthis.panner = this.context.createPanner();\n\t\tthis.panner.panningModel = 'HRTF';\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tconnect() {\n\n\t\tsuper.connect();\n\n\t\tthis.panner.connect( this.gain );\n\n\t}\n\n\tdisconnect() {\n\n\t\tsuper.disconnect();\n\n\t\tthis.panner.disconnect( this.gain );\n\n\t}\n\n\tgetOutput() {\n\n\t\treturn this.panner;\n\n\t}\n\n\tgetRefDistance() {\n\n\t\treturn this.panner.refDistance;\n\n\t}\n\n\tsetRefDistance( value ) {\n\n\t\tthis.panner.refDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetRolloffFactor() {\n\n\t\treturn this.panner.rolloffFactor;\n\n\t}\n\n\tsetRolloffFactor( value ) {\n\n\t\tthis.panner.rolloffFactor = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetDistanceModel() {\n\n\t\treturn this.panner.distanceModel;\n\n\t}\n\n\tsetDistanceModel( value ) {\n\n\t\tthis.panner.distanceModel = value;\n\n\t\treturn this;\n\n\t}\n\n\tgetMaxDistance() {\n\n\t\treturn this.panner.maxDistance;\n\n\t}\n\n\tsetMaxDistance( value ) {\n\n\t\tthis.panner.maxDistance = value;\n\n\t\treturn this;\n\n\t}\n\n\tsetDirectionalCone( coneInnerAngle, coneOuterAngle, coneOuterGain ) {\n\n\t\tthis.panner.coneInnerAngle = coneInnerAngle;\n\t\tthis.panner.coneOuterAngle = coneOuterAngle;\n\t\tthis.panner.coneOuterGain = coneOuterGain;\n\n\t\treturn this;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t\tif ( this.hasPlaybackControl === true && this.isPlaying === false ) return;\n\n\t\tthis.matrixWorld.decompose( _position, _quaternion, _scale );\n\n\t\t_orientation.set( 0, 0, 1 ).applyQuaternion( _quaternion );\n\n\t\tconst panner = this.panner;\n\n\t\tif ( panner.positionX ) {\n\n\t\t\t// code path for Chrome and Firefox (see #14393)\n\n\t\t\tconst endTime = this.context.currentTime + this.listener.timeDelta;\n\n\t\t\tpanner.positionX.linearRampToValueAtTime( _position.x, endTime );\n\t\t\tpanner.positionY.linearRampToValueAtTime( _position.y, endTime );\n\t\t\tpanner.positionZ.linearRampToValueAtTime( _position.z, endTime );\n\t\t\tpanner.orientationX.linearRampToValueAtTime( _orientation.x, endTime );\n\t\t\tpanner.orientationY.linearRampToValueAtTime( _orientation.y, endTime );\n\t\t\tpanner.orientationZ.linearRampToValueAtTime( _orientation.z, endTime );\n\n\t\t} else {\n\n\t\t\tpanner.setPosition( _position.x, _position.y, _position.z );\n\t\t\tpanner.setOrientation( _orientation.x, _orientation.y, _orientation.z );\n\n\t\t}\n\n\t}\n\n}\n\nclass AudioAnalyser {\n\n\tconstructor( audio, fftSize = 2048 ) {\n\n\t\tthis.analyser = audio.context.createAnalyser();\n\t\tthis.analyser.fftSize = fftSize;\n\n\t\tthis.data = new Uint8Array( this.analyser.frequencyBinCount );\n\n\t\taudio.getOutput().connect( this.analyser );\n\n\t}\n\n\n\tgetFrequencyData() {\n\n\t\tthis.analyser.getByteFrequencyData( this.data );\n\n\t\treturn this.data;\n\n\t}\n\n\tgetAverageFrequency() {\n\n\t\tlet value = 0;\n\t\tconst data = this.getFrequencyData();\n\n\t\tfor ( let i = 0; i < data.length; i ++ ) {\n\n\t\t\tvalue += data[ i ];\n\n\t\t}\n\n\t\treturn value / data.length;\n\n\t}\n\n}\n\nclass PropertyMixer {\n\n\tconstructor( binding, typeName, valueSize ) {\n\n\t\tthis.binding = binding;\n\t\tthis.valueSize = valueSize;\n\n\t\tlet mixFunction,\n\t\t\tmixFunctionAdditive,\n\t\t\tsetIdentity;\n\n\t\t// buffer layout: [ incoming | accu0 | accu1 | orig | addAccu | (optional work) ]\n\t\t//\n\t\t// interpolators can use .buffer as their .result\n\t\t// the data then goes to 'incoming'\n\t\t//\n\t\t// 'accu0' and 'accu1' are used frame-interleaved for\n\t\t// the cumulative result and are compared to detect\n\t\t// changes\n\t\t//\n\t\t// 'orig' stores the original state of the property\n\t\t//\n\t\t// 'add' is used for additive cumulative results\n\t\t//\n\t\t// 'work' is optional and is only present for quaternion types. It is used\n\t\t// to store intermediate quaternion multiplication results\n\n\t\tswitch ( typeName ) {\n\n\t\t\tcase 'quaternion':\n\t\t\t\tmixFunction = this._slerp;\n\t\t\t\tmixFunctionAdditive = this._slerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityQuaternion;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 6 );\n\t\t\t\tthis._workIndex = 5;\n\t\t\t\tbreak;\n\n\t\t\tcase 'string':\n\t\t\tcase 'bool':\n\t\t\t\tmixFunction = this._select;\n\n\t\t\t\t// Use the regular mix function and for additive on these types,\n\t\t\t\t// additive is not relevant for non-numeric types\n\t\t\t\tmixFunctionAdditive = this._select;\n\n\t\t\t\tsetIdentity = this._setAdditiveIdentityOther;\n\n\t\t\t\tthis.buffer = new Array( valueSize * 5 );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tmixFunction = this._lerp;\n\t\t\t\tmixFunctionAdditive = this._lerpAdditive;\n\t\t\t\tsetIdentity = this._setAdditiveIdentityNumeric;\n\n\t\t\t\tthis.buffer = new Float64Array( valueSize * 5 );\n\n\t\t}\n\n\t\tthis._mixBufferRegion = mixFunction;\n\t\tthis._mixBufferRegionAdditive = mixFunctionAdditive;\n\t\tthis._setIdentity = setIdentity;\n\t\tthis._origIndex = 3;\n\t\tthis._addIndex = 4;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tthis.useCount = 0;\n\t\tthis.referenceCount = 0;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'accu<i>'\n\taccumulate( accuIndex, weight ) {\n\n\t\t// note: happily accumulating nothing when weight = 0, the caller knows\n\t\t// the weight and shouldn't have made the call in the first place\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = accuIndex * stride + stride;\n\n\t\tlet currentWeight = this.cumulativeWeight;\n\n\t\tif ( currentWeight === 0 ) {\n\n\t\t\t// accuN := incoming * weight\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ offset + i ] = buffer[ i ];\n\n\t\t\t}\n\n\t\t\tcurrentWeight = weight;\n\n\t\t} else {\n\n\t\t\t// accuN := accuN + incoming * weight\n\n\t\t\tcurrentWeight += weight;\n\t\t\tconst mix = weight / currentWeight;\n\t\t\tthis._mixBufferRegion( buffer, offset, 0, mix, stride );\n\n\t\t}\n\n\t\tthis.cumulativeWeight = currentWeight;\n\n\t}\n\n\t// accumulate data in the 'incoming' region into 'add'\n\taccumulateAdditive( weight ) {\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\t\t\toffset = stride * this._addIndex;\n\n\t\tif ( this.cumulativeWeightAdditive === 0 ) {\n\n\t\t\t// add = identity\n\n\t\t\tthis._setIdentity();\n\n\t\t}\n\n\t\t// add := add + incoming * weight\n\n\t\tthis._mixBufferRegionAdditive( buffer, offset, 0, weight, stride );\n\t\tthis.cumulativeWeightAdditive += weight;\n\n\t}\n\n\t// apply the state of 'accu<i>' to the binding when accus differ\n\tapply( accuIndex ) {\n\n\t\tconst stride = this.valueSize,\n\t\t\tbuffer = this.buffer,\n\t\t\toffset = accuIndex * stride + stride,\n\n\t\t\tweight = this.cumulativeWeight,\n\t\t\tweightAdditive = this.cumulativeWeightAdditive,\n\n\t\t\tbinding = this.binding;\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t\tif ( weight < 1 ) {\n\n\t\t\t// accuN := accuN + original * ( 1 - cumulativeWeight )\n\n\t\t\tconst originalValueOffset = stride * this._origIndex;\n\n\t\t\tthis._mixBufferRegion(\n\t\t\t\tbuffer, offset, originalValueOffset, 1 - weight, stride );\n\n\t\t}\n\n\t\tif ( weightAdditive > 0 ) {\n\n\t\t\t// accuN := accuN + additive accuN\n\n\t\t\tthis._mixBufferRegionAdditive( buffer, offset, this._addIndex * stride, 1, stride );\n\n\t\t}\n\n\t\tfor ( let i = stride, e = stride + stride; i !== e; ++ i ) {\n\n\t\t\tif ( buffer[ i ] !== buffer[ i + stride ] ) {\n\n\t\t\t\t// value has changed -> update scene graph\n\n\t\t\t\tbinding.setValue( buffer, offset );\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remember the state of the bound property and copy it to both accus\n\tsaveOriginalState() {\n\n\t\tconst binding = this.binding;\n\n\t\tconst buffer = this.buffer,\n\t\t\tstride = this.valueSize,\n\n\t\t\toriginalValueOffset = stride * this._origIndex;\n\n\t\tbinding.getValue( buffer, originalValueOffset );\n\n\t\t// accu[0..1] := orig -- initially detect changes against the original\n\t\tfor ( let i = stride, e = originalValueOffset; i !== e; ++ i ) {\n\n\t\t\tbuffer[ i ] = buffer[ originalValueOffset + ( i % stride ) ];\n\n\t\t}\n\n\t\t// Add to identity for additive\n\t\tthis._setIdentity();\n\n\t\tthis.cumulativeWeight = 0;\n\t\tthis.cumulativeWeightAdditive = 0;\n\n\t}\n\n\t// apply the state previously taken via 'saveOriginalState' to the binding\n\trestoreOriginalState() {\n\n\t\tconst originalValueOffset = this.valueSize * 3;\n\t\tthis.binding.setValue( this.buffer, originalValueOffset );\n\n\t}\n\n\t_setAdditiveIdentityNumeric() {\n\n\t\tconst startIndex = this._addIndex * this.valueSize;\n\t\tconst endIndex = startIndex + this.valueSize;\n\n\t\tfor ( let i = startIndex; i < endIndex; i ++ ) {\n\n\t\t\tthis.buffer[ i ] = 0;\n\n\t\t}\n\n\t}\n\n\t_setAdditiveIdentityQuaternion() {\n\n\t\tthis._setAdditiveIdentityNumeric();\n\t\tthis.buffer[ this._addIndex * this.valueSize + 3 ] = 1;\n\n\t}\n\n\t_setAdditiveIdentityOther() {\n\n\t\tconst startIndex = this._origIndex * this.valueSize;\n\t\tconst targetIndex = this._addIndex * this.valueSize;\n\n\t\tfor ( let i = 0; i < this.valueSize; i ++ ) {\n\n\t\t\tthis.buffer[ targetIndex + i ] = this.buffer[ startIndex + i ];\n\n\t\t}\n\n\t}\n\n\n\t// mix functions\n\n\t_select( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tif ( t >= 0.5 ) {\n\n\t\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\t\tbuffer[ dstOffset + i ] = buffer[ srcOffset + i ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_slerp( buffer, dstOffset, srcOffset, t ) {\n\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, srcOffset, t );\n\n\t}\n\n\t_slerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst workOffset = this._workIndex * stride;\n\n\t\t// Store result in intermediate buffer offset\n\t\tQuaternion.multiplyQuaternionsFlat( buffer, workOffset, buffer, dstOffset, buffer, srcOffset );\n\n\t\t// Slerp to the intermediate result\n\t\tQuaternion.slerpFlat( buffer, dstOffset, buffer, dstOffset, buffer, workOffset, t );\n\n\t}\n\n\t_lerp( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tconst s = 1 - t;\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] * s + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n\t_lerpAdditive( buffer, dstOffset, srcOffset, t, stride ) {\n\n\t\tfor ( let i = 0; i !== stride; ++ i ) {\n\n\t\t\tconst j = dstOffset + i;\n\n\t\t\tbuffer[ j ] = buffer[ j ] + buffer[ srcOffset + i ] * t;\n\n\t\t}\n\n\t}\n\n}\n\n// Characters [].:/ are reserved for track binding syntax.\nconst _RESERVED_CHARS_RE = '\\\\[\\\\]\\\\.:\\\\/';\nconst _reservedRe = new RegExp( '[' + _RESERVED_CHARS_RE + ']', 'g' );\n\n// Attempts to allow node names from any language. ES5's `\\w` regexp matches\n// only latin characters, and the unicode \\p{L} is not yet supported. So\n// instead, we exclude reserved characters and match everything else.\nconst _wordChar = '[^' + _RESERVED_CHARS_RE + ']';\nconst _wordCharOrDot = '[^' + _RESERVED_CHARS_RE.replace( '\\\\.', '' ) + ']';\n\n// Parent directories, delimited by '/' or ':'. Currently unused, but must\n// be matched to parse the rest of the track name.\nconst _directoryRe = /*@__PURE__*/ /((?:WC+[\\/:])*)/.source.replace( 'WC', _wordChar );\n\n// Target node. May contain word characters (a-zA-Z0-9_) and '.' or '-'.\nconst _nodeRe = /*@__PURE__*/ /(WCOD+)?/.source.replace( 'WCOD', _wordCharOrDot );\n\n// Object on target node, and accessor. May not contain reserved\n// characters. Accessor may contain any character except closing bracket.\nconst _objectRe = /*@__PURE__*/ /(?:\\.(WC+)(?:\\[(.+)\\])?)?/.source.replace( 'WC', _wordChar );\n\n// Property and accessor. May not contain reserved characters. Accessor may\n// contain any non-bracket characters.\nconst _propertyRe = /*@__PURE__*/ /\\.(WC+)(?:\\[(.+)\\])?/.source.replace( 'WC', _wordChar );\n\nconst _trackRe = new RegExp( ''\n\t+ '^'\n\t+ _directoryRe\n\t+ _nodeRe\n\t+ _objectRe\n\t+ _propertyRe\n\t+ '$'\n);\n\nconst _supportedObjectNames = [ 'material', 'materials', 'bones', 'map' ];\n\nclass Composite {\n\n\tconstructor( targetGroup, path, optionalParsedPath ) {\n\n\t\tconst parsedPath = optionalParsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis._targetGroup = targetGroup;\n\t\tthis._bindings = targetGroup.subscribe_( path, parsedPath );\n\n\t}\n\n\tgetValue( array, offset ) {\n\n\t\tthis.bind(); // bind all binding\n\n\t\tconst firstValidIndex = this._targetGroup.nCachedObjects_,\n\t\t\tbinding = this._bindings[ firstValidIndex ];\n\n\t\t// and only call .getValue on the first\n\t\tif ( binding !== undefined ) binding.getValue( array, offset );\n\n\t}\n\n\tsetValue( array, offset ) {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].setValue( array, offset );\n\n\t\t}\n\n\t}\n\n\tbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].bind();\n\n\t\t}\n\n\t}\n\n\tunbind() {\n\n\t\tconst bindings = this._bindings;\n\n\t\tfor ( let i = this._targetGroup.nCachedObjects_, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tbindings[ i ].unbind();\n\n\t\t}\n\n\t}\n\n}\n\n// Note: This class uses a State pattern on a per-method basis:\n// 'bind' sets 'this.getValue' / 'setValue' and shadows the\n// prototype version of these methods with one that represents\n// the bound state. When the property is not found, the methods\n// become no-ops.\nclass PropertyBinding {\n\n\tconstructor( rootNode, path, parsedPath ) {\n\n\t\tthis.path = path;\n\t\tthis.parsedPath = parsedPath || PropertyBinding.parseTrackName( path );\n\n\t\tthis.node = PropertyBinding.findNode( rootNode, this.parsedPath.nodeName );\n\n\t\tthis.rootNode = rootNode;\n\n\t\t// initial state of these methods that calls 'bind'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n\n\tstatic create( root, path, parsedPath ) {\n\n\t\tif ( ! ( root && root.isAnimationObjectGroup ) ) {\n\n\t\t\treturn new PropertyBinding( root, path, parsedPath );\n\n\t\t} else {\n\n\t\t\treturn new PropertyBinding.Composite( root, path, parsedPath );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Replaces spaces with underscores and removes unsupported characters from\n\t * node names, to ensure compatibility with parseTrackName().\n\t *\n\t * @param {string} name Node name to be sanitized.\n\t * @return {string}\n\t */\n\tstatic sanitizeNodeName( name ) {\n\n\t\treturn name.replace( /\\s/g, '_' ).replace( _reservedRe, '' );\n\n\t}\n\n\tstatic parseTrackName( trackName ) {\n\n\t\tconst matches = _trackRe.exec( trackName );\n\n\t\tif ( matches === null ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: Cannot parse trackName: ' + trackName );\n\n\t\t}\n\n\t\tconst results = {\n\t\t\t// directoryName: matches[ 1 ], // (tschw) currently unused\n\t\t\tnodeName: matches[ 2 ],\n\t\t\tobjectName: matches[ 3 ],\n\t\t\tobjectIndex: matches[ 4 ],\n\t\t\tpropertyName: matches[ 5 ], // required\n\t\t\tpropertyIndex: matches[ 6 ]\n\t\t};\n\n\t\tconst lastDot = results.nodeName && results.nodeName.lastIndexOf( '.' );\n\n\t\tif ( lastDot !== undefined && lastDot !== - 1 ) {\n\n\t\t\tconst objectName = results.nodeName.substring( lastDot + 1 );\n\n\t\t\t// Object names must be checked against an allowlist. Otherwise, there\n\t\t\t// is no way to parse 'foo.bar.baz': 'baz' must be a property, but\n\t\t\t// 'bar' could be the objectName, or part of a nodeName (which can\n\t\t\t// include '.' characters).\n\t\t\tif ( _supportedObjectNames.indexOf( objectName ) !== - 1 ) {\n\n\t\t\t\tresults.nodeName = results.nodeName.substring( 0, lastDot );\n\t\t\t\tresults.objectName = objectName;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( results.propertyName === null || results.propertyName.length === 0 ) {\n\n\t\t\tthrow new Error( 'PropertyBinding: can not parse propertyName from trackName: ' + trackName );\n\n\t\t}\n\n\t\treturn results;\n\n\t}\n\n\tstatic findNode( root, nodeName ) {\n\n\t\tif ( nodeName === undefined || nodeName === '' || nodeName === '.' || nodeName === - 1 || nodeName === root.name || nodeName === root.uuid ) {\n\n\t\t\treturn root;\n\n\t\t}\n\n\t\t// search into skeleton bones.\n\t\tif ( root.skeleton ) {\n\n\t\t\tconst bone = root.skeleton.getBoneByName( nodeName );\n\n\t\t\tif ( bone !== undefined ) {\n\n\t\t\t\treturn bone;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// search into node subtree.\n\t\tif ( root.children ) {\n\n\t\t\tconst searchNodeSubtree = function ( children ) {\n\n\t\t\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\t\t\tconst childNode = children[ i ];\n\n\t\t\t\t\tif ( childNode.name === nodeName || childNode.uuid === nodeName ) {\n\n\t\t\t\t\t\treturn childNode;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = searchNodeSubtree( childNode.children );\n\n\t\t\t\t\tif ( result ) return result;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t};\n\n\t\t\tconst subTreeNode = searchNodeSubtree( root.children );\n\n\t\t\tif ( subTreeNode ) {\n\n\t\t\t\treturn subTreeNode;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// these are used to \"bind\" a nonexistent property\n\t_getValue_unavailable() {}\n\t_setValue_unavailable() {}\n\n\t// Getters\n\n\t_getValue_direct( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.targetObject[ this.propertyName ];\n\n\t}\n\n\t_getValue_array( buffer, offset ) {\n\n\t\tconst source = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = source.length; i !== n; ++ i ) {\n\n\t\t\tbuffer[ offset ++ ] = source[ i ];\n\n\t\t}\n\n\t}\n\n\t_getValue_arrayElement( buffer, offset ) {\n\n\t\tbuffer[ offset ] = this.resolvedProperty[ this.propertyIndex ];\n\n\t}\n\n\t_getValue_toArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.toArray( buffer, offset );\n\n\t}\n\n\t// Direct\n\n\t_setValue_direct( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_direct_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_direct_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.targetObject[ this.propertyName ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// EntireArray\n\n\t_setValue_array( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t}\n\n\t_setValue_array_setNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_array_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tconst dest = this.resolvedProperty;\n\n\t\tfor ( let i = 0, n = dest.length; i !== n; ++ i ) {\n\n\t\t\tdest[ i ] = buffer[ offset ++ ];\n\n\t\t}\n\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// ArrayElement\n\n\t_setValue_arrayElement( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\n\t}\n\n\t_setValue_arrayElement_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_arrayElement_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty[ this.propertyIndex ] = buffer[ offset ];\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t// HasToFromArray\n\n\t_setValue_fromArray( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\n\t}\n\n\t_setValue_fromArray_setNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.needsUpdate = true;\n\n\t}\n\n\t_setValue_fromArray_setMatrixWorldNeedsUpdate( buffer, offset ) {\n\n\t\tthis.resolvedProperty.fromArray( buffer, offset );\n\t\tthis.targetObject.matrixWorldNeedsUpdate = true;\n\n\t}\n\n\t_getValue_unbound( targetArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.getValue( targetArray, offset );\n\n\t}\n\n\t_setValue_unbound( sourceArray, offset ) {\n\n\t\tthis.bind();\n\t\tthis.setValue( sourceArray, offset );\n\n\t}\n\n\t// create getter / setter pair for a property in the scene graph\n\tbind() {\n\n\t\tlet targetObject = this.node;\n\t\tconst parsedPath = this.parsedPath;\n\n\t\tconst objectName = parsedPath.objectName;\n\t\tconst propertyName = parsedPath.propertyName;\n\t\tlet propertyIndex = parsedPath.propertyIndex;\n\n\t\tif ( ! targetObject ) {\n\n\t\t\ttargetObject = PropertyBinding.findNode( this.rootNode, parsedPath.nodeName );\n\n\t\t\tthis.node = targetObject;\n\n\t\t}\n\n\t\t// set fail state so we can just 'return' on error\n\t\tthis.getValue = this._getValue_unavailable;\n\t\tthis.setValue = this._setValue_unavailable;\n\n\t\t// ensure there is a value node\n\t\tif ( ! targetObject ) {\n\n\t\t\tconsole.warn( 'THREE.PropertyBinding: No target node found for track: ' + this.path + '.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( objectName ) {\n\n\t\t\tlet objectIndex = parsedPath.objectIndex;\n\n\t\t\t// special cases were we need to reach deeper into the hierarchy to get the face materials....\n\t\t\tswitch ( objectName ) {\n\n\t\t\t\tcase 'materials':\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.materials ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.materials;\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bones':\n\n\t\t\t\t\tif ( ! targetObject.skeleton ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// potential future optimization: skip this if propertyIndex is already an integer\n\t\t\t\t\t// and convert the integer string to a true integer.\n\n\t\t\t\t\ttargetObject = targetObject.skeleton.bones;\n\n\t\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\t\tfor ( let i = 0; i < targetObject.length; i ++ ) {\n\n\t\t\t\t\t\tif ( targetObject[ i ].name === objectIndex ) {\n\n\t\t\t\t\t\t\tobjectIndex = i;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'map':\n\n\t\t\t\t\tif ( 'map' in targetObject ) {\n\n\t\t\t\t\t\ttargetObject = targetObject.map;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material as node does not have a material.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! targetObject.material.map ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject.material.map;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tif ( targetObject[ objectName ] === undefined ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to objectName of node undefined.', this );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttargetObject = targetObject[ objectName ];\n\n\t\t\t}\n\n\n\t\t\tif ( objectIndex !== undefined ) {\n\n\t\t\t\tif ( targetObject[ objectIndex ] === undefined ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.', this, targetObject );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\ttargetObject = targetObject[ objectIndex ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// resolve property\n\t\tconst nodeProperty = targetObject[ propertyName ];\n\n\t\tif ( nodeProperty === undefined ) {\n\n\t\t\tconst nodeName = parsedPath.nodeName;\n\n\t\t\tconsole.error( 'THREE.PropertyBinding: Trying to update property for track: ' + nodeName +\n\t\t\t\t'.' + propertyName + ' but it wasn\\'t found.', targetObject );\n\t\t\treturn;\n\n\t\t}\n\n\t\t// determine versioning scheme\n\t\tlet versioning = this.Versioning.None;\n\n\t\tthis.targetObject = targetObject;\n\n\t\tif ( targetObject.needsUpdate !== undefined ) { // material\n\n\t\t\tversioning = this.Versioning.NeedsUpdate;\n\n\t\t} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform\n\n\t\t\tversioning = this.Versioning.MatrixWorldNeedsUpdate;\n\n\t\t}\n\n\t\t// determine how the property gets bound\n\t\tlet bindingType = this.BindingType.Direct;\n\n\t\tif ( propertyIndex !== undefined ) {\n\n\t\t\t// access a sub element of the property array (only primitives are supported right now)\n\n\t\t\tif ( propertyName === 'morphTargetInfluences' ) {\n\n\t\t\t\t// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.\n\n\t\t\t\t// support resolving morphTarget names into indices.\n\t\t\t\tif ( ! targetObject.geometry ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! targetObject.geometry.morphAttributes ) {\n\n\t\t\t\t\tconsole.error( 'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.', this );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tif ( targetObject.morphTargetDictionary[ propertyIndex ] !== undefined ) {\n\n\t\t\t\t\tpropertyIndex = targetObject.morphTargetDictionary[ propertyIndex ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbindingType = this.BindingType.ArrayElement;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\t\t\tthis.propertyIndex = propertyIndex;\n\n\t\t} else if ( nodeProperty.fromArray !== undefined && nodeProperty.toArray !== undefined ) {\n\n\t\t\t// must use copy for Object3D.Euler/Quaternion\n\n\t\t\tbindingType = this.BindingType.HasFromToArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else if ( Array.isArray( nodeProperty ) ) {\n\n\t\t\tbindingType = this.BindingType.EntireArray;\n\n\t\t\tthis.resolvedProperty = nodeProperty;\n\n\t\t} else {\n\n\t\t\tthis.propertyName = propertyName;\n\n\t\t}\n\n\t\t// select getter / setter\n\t\tthis.getValue = this.GetterByBindingType[ bindingType ];\n\t\tthis.setValue = this.SetterByBindingTypeAndVersioning[ bindingType ][ versioning ];\n\n\t}\n\n\tunbind() {\n\n\t\tthis.node = null;\n\n\t\t// back to the prototype version of getValue / setValue\n\t\t// note: avoiding to mutate the shape of 'this' via 'delete'\n\t\tthis.getValue = this._getValue_unbound;\n\t\tthis.setValue = this._setValue_unbound;\n\n\t}\n\n}\n\nPropertyBinding.Composite = Composite;\n\nPropertyBinding.prototype.BindingType = {\n\tDirect: 0,\n\tEntireArray: 1,\n\tArrayElement: 2,\n\tHasFromToArray: 3\n};\n\nPropertyBinding.prototype.Versioning = {\n\tNone: 0,\n\tNeedsUpdate: 1,\n\tMatrixWorldNeedsUpdate: 2\n};\n\nPropertyBinding.prototype.GetterByBindingType = [\n\n\tPropertyBinding.prototype._getValue_direct,\n\tPropertyBinding.prototype._getValue_array,\n\tPropertyBinding.prototype._getValue_arrayElement,\n\tPropertyBinding.prototype._getValue_toArray,\n\n];\n\nPropertyBinding.prototype.SetterByBindingTypeAndVersioning = [\n\n\t[\n\t\t// Direct\n\t\tPropertyBinding.prototype._setValue_direct,\n\t\tPropertyBinding.prototype._setValue_direct_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// EntireArray\n\n\t\tPropertyBinding.prototype._setValue_array,\n\t\tPropertyBinding.prototype._setValue_array_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// ArrayElement\n\t\tPropertyBinding.prototype._setValue_arrayElement,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate,\n\n\t], [\n\n\t\t// HasToFromArray\n\t\tPropertyBinding.prototype._setValue_fromArray,\n\t\tPropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,\n\t\tPropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate,\n\n\t]\n\n];\n\n/**\n *\n * A group of objects that receives a shared animation state.\n *\n * Usage:\n *\n *  - Add objects you would otherwise pass as 'root' to the\n *    constructor or the .clipAction method of AnimationMixer.\n *\n *  - Instead pass this object as 'root'.\n *\n *  - You can also add and remove objects later when the mixer\n *    is running.\n *\n * Note:\n *\n *    Objects of this class appear as one object to the mixer,\n *    so cache control of the individual objects must be done\n *    on the group.\n *\n * Limitation:\n *\n *  - The animated properties must be compatible among the\n *    all objects in the group.\n *\n *  - A single property can either be controlled through a\n *    target group or directly, but not both.\n */\n\nclass AnimationObjectGroup {\n\n\tconstructor() {\n\n\t\tthis.isAnimationObjectGroup = true;\n\n\t\tthis.uuid = generateUUID();\n\n\t\t// cached objects followed by the active ones\n\t\tthis._objects = Array.prototype.slice.call( arguments );\n\n\t\tthis.nCachedObjects_ = 0; // threshold\n\t\t// note: read by PropertyBinding.Composite\n\n\t\tconst indices = {};\n\t\tthis._indicesByUUID = indices; // for bookkeeping\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tindices[ arguments[ i ].uuid ] = i;\n\n\t\t}\n\n\t\tthis._paths = []; // inside: string\n\t\tthis._parsedPaths = []; // inside: { we don't care, here }\n\t\tthis._bindings = []; // inside: Array< PropertyBinding >\n\t\tthis._bindingsIndicesByPath = {}; // inside: indices in these arrays\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tobjects: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._objects.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn this.total - scope.nCachedObjects_;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tget bindingsPerObject() {\n\n\t\t\t\treturn scope._bindings.length;\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\tadd() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tpaths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet knownObject = undefined,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid;\n\t\t\tlet index = indicesByUUID[ uuid ];\n\n\t\t\tif ( index === undefined ) {\n\n\t\t\t\t// unknown object -> add it to the ACTIVE region\n\n\t\t\t\tindex = nObjects ++;\n\t\t\t\tindicesByUUID[ uuid ] = index;\n\t\t\t\tobjects.push( object );\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tbindings[ j ].push( new PropertyBinding( object, paths[ j ], parsedPaths[ j ] ) );\n\n\t\t\t\t}\n\n\t\t\t} else if ( index < nCachedObjects ) {\n\n\t\t\t\tknownObject = objects[ index ];\n\n\t\t\t\t// move existing object to the ACTIVE region\n\n\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ];\n\n\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = firstActiveIndex;\n\t\t\t\tobjects[ firstActiveIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ];\n\n\t\t\t\t\tlet binding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\n\t\t\t\t\tif ( binding === undefined ) {\n\n\t\t\t\t\t\t// since we do not bother to create new bindings\n\t\t\t\t\t\t// for objects that are cached, the binding may\n\t\t\t\t\t\t// or may not exist\n\n\t\t\t\t\t\tbinding = new PropertyBinding( object, paths[ j ], parsedPaths[ j ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t} else if ( objects[ index ] !== knownObject ) {\n\n\t\t\t\tconsole.error( 'THREE.AnimationObjectGroup: Different objects with the same UUID ' +\n\t\t\t\t\t'detected. Clean the caches or recreate your infrastructure when reloading scenes.' );\n\n\t\t\t} // else the object is already where we want it to be\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\tremove() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined && index >= nCachedObjects ) {\n\n\t\t\t\t// move existing object into the CACHED region\n\n\t\t\t\tconst lastCachedIndex = nCachedObjects ++,\n\t\t\t\t\tfirstActiveObject = objects[ lastCachedIndex ];\n\n\t\t\t\tindicesByUUID[ firstActiveObject.uuid ] = index;\n\t\t\t\tobjects[ index ] = firstActiveObject;\n\n\t\t\t\tindicesByUUID[ uuid ] = lastCachedIndex;\n\t\t\t\tobjects[ lastCachedIndex ] = object;\n\n\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\tfirstActive = bindingsForPath[ lastCachedIndex ],\n\t\t\t\t\t\tbinding = bindingsForPath[ index ];\n\n\t\t\t\t\tbindingsForPath[ index ] = firstActive;\n\t\t\t\t\tbindingsForPath[ lastCachedIndex ] = binding;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// remove & forget\n\tuncache() {\n\n\t\tconst objects = this._objects,\n\t\t\tindicesByUUID = this._indicesByUUID,\n\t\t\tbindings = this._bindings,\n\t\t\tnBindings = bindings.length;\n\n\t\tlet nCachedObjects = this.nCachedObjects_,\n\t\t\tnObjects = objects.length;\n\n\t\tfor ( let i = 0, n = arguments.length; i !== n; ++ i ) {\n\n\t\t\tconst object = arguments[ i ],\n\t\t\t\tuuid = object.uuid,\n\t\t\t\tindex = indicesByUUID[ uuid ];\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tdelete indicesByUUID[ uuid ];\n\n\t\t\t\tif ( index < nCachedObjects ) {\n\n\t\t\t\t\t// object is cached, shrink the CACHED region\n\n\t\t\t\t\tconst firstActiveIndex = -- nCachedObjects,\n\t\t\t\t\t\tlastCachedObject = objects[ firstActiveIndex ],\n\t\t\t\t\t\tlastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\t// last cached object takes this object's place\n\t\t\t\t\tindicesByUUID[ lastCachedObject.uuid ] = index;\n\t\t\t\t\tobjects[ index ] = lastCachedObject;\n\n\t\t\t\t\t// last object goes to the activated slot and pop\n\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = firstActiveIndex;\n\t\t\t\t\tobjects[ firstActiveIndex ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ],\n\t\t\t\t\t\t\tlastCached = bindingsForPath[ firstActiveIndex ],\n\t\t\t\t\t\t\tlast = bindingsForPath[ lastIndex ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = lastCached;\n\t\t\t\t\t\tbindingsForPath[ firstActiveIndex ] = last;\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// object is active, just swap with the last and pop\n\n\t\t\t\t\tconst lastIndex = -- nObjects,\n\t\t\t\t\t\tlastObject = objects[ lastIndex ];\n\n\t\t\t\t\tif ( lastIndex > 0 ) {\n\n\t\t\t\t\t\tindicesByUUID[ lastObject.uuid ] = index;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects[ index ] = lastObject;\n\t\t\t\t\tobjects.pop();\n\n\t\t\t\t\t// accounting is done, now do the same for all bindings\n\n\t\t\t\t\tfor ( let j = 0, m = nBindings; j !== m; ++ j ) {\n\n\t\t\t\t\t\tconst bindingsForPath = bindings[ j ];\n\n\t\t\t\t\t\tbindingsForPath[ index ] = bindingsForPath[ lastIndex ];\n\t\t\t\t\t\tbindingsForPath.pop();\n\n\t\t\t\t\t}\n\n\t\t\t\t} // cached or active\n\n\t\t\t} // if object is known\n\n\t\t} // for arguments\n\n\t\tthis.nCachedObjects_ = nCachedObjects;\n\n\t}\n\n\t// Internal interface used by befriended PropertyBinding.Composite:\n\n\tsubscribe_( path, parsedPath ) {\n\n\t\t// returns an array of bindings for the given path that is changed\n\t\t// according to the contained objects in the group\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath;\n\t\tlet index = indicesByPath[ path ];\n\t\tconst bindings = this._bindings;\n\n\t\tif ( index !== undefined ) return bindings[ index ];\n\n\t\tconst paths = this._paths,\n\t\t\tparsedPaths = this._parsedPaths,\n\t\t\tobjects = this._objects,\n\t\t\tnObjects = objects.length,\n\t\t\tnCachedObjects = this.nCachedObjects_,\n\t\t\tbindingsForPath = new Array( nObjects );\n\n\t\tindex = bindings.length;\n\n\t\tindicesByPath[ path ] = index;\n\n\t\tpaths.push( path );\n\t\tparsedPaths.push( parsedPath );\n\t\tbindings.push( bindingsForPath );\n\n\t\tfor ( let i = nCachedObjects, n = objects.length; i !== n; ++ i ) {\n\n\t\t\tconst object = objects[ i ];\n\t\t\tbindingsForPath[ i ] = new PropertyBinding( object, path, parsedPath );\n\n\t\t}\n\n\t\treturn bindingsForPath;\n\n\t}\n\n\tunsubscribe_( path ) {\n\n\t\t// tells the group to forget about a property path and no longer\n\t\t// update the array previously obtained with 'subscribe_'\n\n\t\tconst indicesByPath = this._bindingsIndicesByPath,\n\t\t\tindex = indicesByPath[ path ];\n\n\t\tif ( index !== undefined ) {\n\n\t\t\tconst paths = this._paths,\n\t\t\t\tparsedPaths = this._parsedPaths,\n\t\t\t\tbindings = this._bindings,\n\t\t\t\tlastBindingsIndex = bindings.length - 1,\n\t\t\t\tlastBindings = bindings[ lastBindingsIndex ],\n\t\t\t\tlastBindingsPath = path[ lastBindingsIndex ];\n\n\t\t\tindicesByPath[ lastBindingsPath ] = index;\n\n\t\t\tbindings[ index ] = lastBindings;\n\t\t\tbindings.pop();\n\n\t\t\tparsedPaths[ index ] = parsedPaths[ lastBindingsIndex ];\n\t\t\tparsedPaths.pop();\n\n\t\t\tpaths[ index ] = paths[ lastBindingsIndex ];\n\t\t\tpaths.pop();\n\n\t\t}\n\n\t}\n\n}\n\nclass AnimationAction {\n\n\tconstructor( mixer, clip, localRoot = null, blendMode = clip.blendMode ) {\n\n\t\tthis._mixer = mixer;\n\t\tthis._clip = clip;\n\t\tthis._localRoot = localRoot;\n\t\tthis.blendMode = blendMode;\n\n\t\tconst tracks = clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tinterpolants = new Array( nTracks );\n\n\t\tconst interpolantSettings = {\n\t\t\tendingStart: ZeroCurvatureEnding,\n\t\t\tendingEnd: ZeroCurvatureEnding\n\t\t};\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst interpolant = tracks[ i ].createInterpolant( null );\n\t\t\tinterpolants[ i ] = interpolant;\n\t\t\tinterpolant.settings = interpolantSettings;\n\n\t\t}\n\n\t\tthis._interpolantSettings = interpolantSettings;\n\n\t\tthis._interpolants = interpolants; // bound by the mixer\n\n\t\t// inside: PropertyMixer (managed by the mixer)\n\t\tthis._propertyBindings = new Array( nTracks );\n\n\t\tthis._cacheIndex = null; // for the memory manager\n\t\tthis._byClipCacheIndex = null; // for the memory manager\n\n\t\tthis._timeScaleInterpolant = null;\n\t\tthis._weightInterpolant = null;\n\n\t\tthis.loop = LoopRepeat;\n\t\tthis._loopCount = - 1;\n\n\t\t// global mixer time when the action is to be started\n\t\t// it's set back to 'null' upon start of the action\n\t\tthis._startTime = null;\n\n\t\t// scaled local time of the action\n\t\t// gets clamped or wrapped to 0..clip.duration according to loop\n\t\tthis.time = 0;\n\n\t\tthis.timeScale = 1;\n\t\tthis._effectiveTimeScale = 1;\n\n\t\tthis.weight = 1;\n\t\tthis._effectiveWeight = 1;\n\n\t\tthis.repetitions = Infinity; // no. of repetitions when looping\n\n\t\tthis.paused = false; // true -> zero effective time scale\n\t\tthis.enabled = true; // false -> zero effective weight\n\n\t\tthis.clampWhenFinished = false;// keep feeding the last frame?\n\n\t\tthis.zeroSlopeAtStart = true;// for smooth interpolation w/o separate\n\t\tthis.zeroSlopeAtEnd = true;// clips for start, loop and end\n\n\t}\n\n\t// State & Scheduling\n\n\tplay() {\n\n\t\tthis._mixer._activateAction( this );\n\n\t\treturn this;\n\n\t}\n\n\tstop() {\n\n\t\tthis._mixer._deactivateAction( this );\n\n\t\treturn this.reset();\n\n\t}\n\n\treset() {\n\n\t\tthis.paused = false;\n\t\tthis.enabled = true;\n\n\t\tthis.time = 0; // restart clip\n\t\tthis._loopCount = - 1;// forget previous loops\n\t\tthis._startTime = null;// forget scheduling\n\n\t\treturn this.stopFading().stopWarping();\n\n\t}\n\n\tisRunning() {\n\n\t\treturn this.enabled && ! this.paused && this.timeScale !== 0 &&\n\t\t\tthis._startTime === null && this._mixer._isActiveAction( this );\n\n\t}\n\n\t// return true when play has been called\n\tisScheduled() {\n\n\t\treturn this._mixer._isActiveAction( this );\n\n\t}\n\n\tstartAt( time ) {\n\n\t\tthis._startTime = time;\n\n\t\treturn this;\n\n\t}\n\n\tsetLoop( mode, repetitions ) {\n\n\t\tthis.loop = mode;\n\t\tthis.repetitions = repetitions;\n\n\t\treturn this;\n\n\t}\n\n\t// Weight\n\n\t// set the weight stopping any scheduled fading\n\t// although .enabled = false yields an effective weight of zero, this\n\t// method does *not* change .enabled, because it would be confusing\n\tsetEffectiveWeight( weight ) {\n\n\t\tthis.weight = weight;\n\n\t\t// note: same logic as when updated at runtime\n\t\tthis._effectiveWeight = this.enabled ? weight : 0;\n\n\t\treturn this.stopFading();\n\n\t}\n\n\t// return the weight considering fading and .enabled\n\tgetEffectiveWeight() {\n\n\t\treturn this._effectiveWeight;\n\n\t}\n\n\tfadeIn( duration ) {\n\n\t\treturn this._scheduleFading( duration, 0, 1 );\n\n\t}\n\n\tfadeOut( duration ) {\n\n\t\treturn this._scheduleFading( duration, 1, 0 );\n\n\t}\n\n\tcrossFadeFrom( fadeOutAction, duration, warp ) {\n\n\t\tfadeOutAction.fadeOut( duration );\n\t\tthis.fadeIn( duration );\n\n\t\tif ( warp ) {\n\n\t\t\tconst fadeInDuration = this._clip.duration,\n\t\t\t\tfadeOutDuration = fadeOutAction._clip.duration,\n\n\t\t\t\tstartEndRatio = fadeOutDuration / fadeInDuration,\n\t\t\t\tendStartRatio = fadeInDuration / fadeOutDuration;\n\n\t\t\tfadeOutAction.warp( 1.0, startEndRatio, duration );\n\t\t\tthis.warp( endStartRatio, 1.0, duration );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcrossFadeTo( fadeInAction, duration, warp ) {\n\n\t\treturn fadeInAction.crossFadeFrom( this, duration, warp );\n\n\t}\n\n\tstopFading() {\n\n\t\tconst weightInterpolant = this._weightInterpolant;\n\n\t\tif ( weightInterpolant !== null ) {\n\n\t\t\tthis._weightInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( weightInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Time Scale Control\n\n\t// set the time scale stopping any scheduled warping\n\t// although .paused = true yields an effective time scale of zero, this\n\t// method does *not* change .paused, because it would be confusing\n\tsetEffectiveTimeScale( timeScale ) {\n\n\t\tthis.timeScale = timeScale;\n\t\tthis._effectiveTimeScale = this.paused ? 0 : timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\t// return the time scale considering warping and .paused\n\tgetEffectiveTimeScale() {\n\n\t\treturn this._effectiveTimeScale;\n\n\t}\n\n\tsetDuration( duration ) {\n\n\t\tthis.timeScale = this._clip.duration / duration;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\tsyncWith( action ) {\n\n\t\tthis.time = action.time;\n\t\tthis.timeScale = action.timeScale;\n\n\t\treturn this.stopWarping();\n\n\t}\n\n\thalt( duration ) {\n\n\t\treturn this.warp( this._effectiveTimeScale, 0, duration );\n\n\t}\n\n\twarp( startTimeScale, endTimeScale, duration ) {\n\n\t\tconst mixer = this._mixer,\n\t\t\tnow = mixer.time,\n\t\t\ttimeScale = this.timeScale;\n\n\t\tlet interpolant = this._timeScaleInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._timeScaleInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\ttimes[ 1 ] = now + duration;\n\n\t\tvalues[ 0 ] = startTimeScale / timeScale;\n\t\tvalues[ 1 ] = endTimeScale / timeScale;\n\n\t\treturn this;\n\n\t}\n\n\tstopWarping() {\n\n\t\tconst timeScaleInterpolant = this._timeScaleInterpolant;\n\n\t\tif ( timeScaleInterpolant !== null ) {\n\n\t\t\tthis._timeScaleInterpolant = null;\n\t\t\tthis._mixer._takeBackControlInterpolant( timeScaleInterpolant );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Object Accessors\n\n\tgetMixer() {\n\n\t\treturn this._mixer;\n\n\t}\n\n\tgetClip() {\n\n\t\treturn this._clip;\n\n\t}\n\n\tgetRoot() {\n\n\t\treturn this._localRoot || this._mixer._root;\n\n\t}\n\n\t// Interna\n\n\t_update( time, deltaTime, timeDirection, accuIndex ) {\n\n\t\t// called by the mixer\n\n\t\tif ( ! this.enabled ) {\n\n\t\t\t// call ._updateWeight() to update ._effectiveWeight\n\n\t\t\tthis._updateWeight( time );\n\t\t\treturn;\n\n\t\t}\n\n\t\tconst startTime = this._startTime;\n\n\t\tif ( startTime !== null ) {\n\n\t\t\t// check for scheduled start of action\n\n\t\t\tconst timeRunning = ( time - startTime ) * timeDirection;\n\t\t\tif ( timeRunning < 0 || timeDirection === 0 ) {\n\n\t\t\t\tdeltaTime = 0;\n\n\t\t\t} else {\n\n\n\t\t\t\tthis._startTime = null; // unschedule\n\t\t\t\tdeltaTime = timeDirection * timeRunning;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// apply time scale and advance time\n\n\t\tdeltaTime *= this._updateTimeScale( time );\n\t\tconst clipTime = this._updateTime( deltaTime );\n\n\t\t// note: _updateTime may disable the action resulting in\n\t\t// an effective weight of 0\n\n\t\tconst weight = this._updateWeight( time );\n\n\t\tif ( weight > 0 ) {\n\n\t\t\tconst interpolants = this._interpolants;\n\t\t\tconst propertyMixers = this._propertyBindings;\n\n\t\t\tswitch ( this.blendMode ) {\n\n\t\t\t\tcase AdditiveAnimationBlendMode:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulateAdditive( weight );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase NormalAnimationBlendMode:\n\t\t\t\tdefault:\n\n\t\t\t\t\tfor ( let j = 0, m = interpolants.length; j !== m; ++ j ) {\n\n\t\t\t\t\t\tinterpolants[ j ].evaluate( clipTime );\n\t\t\t\t\t\tpropertyMixers[ j ].accumulate( accuIndex, weight );\n\n\t\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_updateWeight( time ) {\n\n\t\tlet weight = 0;\n\n\t\tif ( this.enabled ) {\n\n\t\t\tweight = this.weight;\n\t\t\tconst interpolant = this._weightInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\tweight *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopFading();\n\n\t\t\t\t\tif ( interpolantValue === 0 ) {\n\n\t\t\t\t\t\t// faded out, disable\n\t\t\t\t\t\tthis.enabled = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveWeight = weight;\n\t\treturn weight;\n\n\t}\n\n\t_updateTimeScale( time ) {\n\n\t\tlet timeScale = 0;\n\n\t\tif ( ! this.paused ) {\n\n\t\t\ttimeScale = this.timeScale;\n\n\t\t\tconst interpolant = this._timeScaleInterpolant;\n\n\t\t\tif ( interpolant !== null ) {\n\n\t\t\t\tconst interpolantValue = interpolant.evaluate( time )[ 0 ];\n\n\t\t\t\ttimeScale *= interpolantValue;\n\n\t\t\t\tif ( time > interpolant.parameterPositions[ 1 ] ) {\n\n\t\t\t\t\tthis.stopWarping();\n\n\t\t\t\t\tif ( timeScale === 0 ) {\n\n\t\t\t\t\t\t// motion has halted, pause\n\t\t\t\t\t\tthis.paused = true;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// warp done - apply final time scale\n\t\t\t\t\t\tthis.timeScale = timeScale;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis._effectiveTimeScale = timeScale;\n\t\treturn timeScale;\n\n\t}\n\n\t_updateTime( deltaTime ) {\n\n\t\tconst duration = this._clip.duration;\n\t\tconst loop = this.loop;\n\n\t\tlet time = this.time + deltaTime;\n\t\tlet loopCount = this._loopCount;\n\n\t\tconst pingPong = ( loop === LoopPingPong );\n\n\t\tif ( deltaTime === 0 ) {\n\n\t\t\tif ( loopCount === - 1 ) return time;\n\n\t\t\treturn ( pingPong && ( loopCount & 1 ) === 1 ) ? duration - time : time;\n\n\t\t}\n\n\t\tif ( loop === LoopOnce ) {\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tthis._loopCount = 0;\n\t\t\t\tthis._setEndings( true, true, false );\n\n\t\t\t}\n\n\t\t\thandle_stop: {\n\n\t\t\t\tif ( time >= duration ) {\n\n\t\t\t\t\ttime = duration;\n\n\t\t\t\t} else if ( time < 0 ) {\n\n\t\t\t\t\ttime = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tbreak handle_stop;\n\n\t\t\t\t}\n\n\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\telse this.enabled = false;\n\n\t\t\t\tthis.time = time;\n\n\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\tdirection: deltaTime < 0 ? - 1 : 1\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} else { // repetitive Repeat or PingPong\n\n\t\t\tif ( loopCount === - 1 ) {\n\n\t\t\t\t// just started\n\n\t\t\t\tif ( deltaTime >= 0 ) {\n\n\t\t\t\t\tloopCount = 0;\n\n\t\t\t\t\tthis._setEndings( true, this.repetitions === 0, pingPong );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// when looping in reverse direction, the initial\n\t\t\t\t\t// transition through zero counts as a repetition,\n\t\t\t\t\t// so leave loopCount at -1\n\n\t\t\t\t\tthis._setEndings( this.repetitions === 0, true, pingPong );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( time >= duration || time < 0 ) {\n\n\t\t\t\t// wrap around\n\n\t\t\t\tconst loopDelta = Math.floor( time / duration ); // signed\n\t\t\t\ttime -= duration * loopDelta;\n\n\t\t\t\tloopCount += Math.abs( loopDelta );\n\n\t\t\t\tconst pending = this.repetitions - loopCount;\n\n\t\t\t\tif ( pending <= 0 ) {\n\n\t\t\t\t\t// have to stop (switch state, clamp time, fire event)\n\n\t\t\t\t\tif ( this.clampWhenFinished ) this.paused = true;\n\t\t\t\t\telse this.enabled = false;\n\n\t\t\t\t\ttime = deltaTime > 0 ? duration : 0;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'finished', action: this,\n\t\t\t\t\t\tdirection: deltaTime > 0 ? 1 : - 1\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// keep running\n\n\t\t\t\t\tif ( pending === 1 ) {\n\n\t\t\t\t\t\t// entering the last round\n\n\t\t\t\t\t\tconst atStart = deltaTime < 0;\n\t\t\t\t\t\tthis._setEndings( atStart, ! atStart, pingPong );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthis._setEndings( false, false, pingPong );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._loopCount = loopCount;\n\n\t\t\t\t\tthis.time = time;\n\n\t\t\t\t\tthis._mixer.dispatchEvent( {\n\t\t\t\t\t\ttype: 'loop', action: this, loopDelta: loopDelta\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tthis.time = time;\n\n\t\t\t}\n\n\t\t\tif ( pingPong && ( loopCount & 1 ) === 1 ) {\n\n\t\t\t\t// invert time for the \"pong round\"\n\n\t\t\t\treturn duration - time;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn time;\n\n\t}\n\n\t_setEndings( atStart, atEnd, pingPong ) {\n\n\t\tconst settings = this._interpolantSettings;\n\n\t\tif ( pingPong ) {\n\n\t\t\tsettings.endingStart = ZeroSlopeEnding;\n\t\t\tsettings.endingEnd = ZeroSlopeEnding;\n\n\t\t} else {\n\n\t\t\t// assuming for LoopOnce atStart == atEnd == true\n\n\t\t\tif ( atStart ) {\n\n\t\t\t\tsettings.endingStart = this.zeroSlopeAtStart ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingStart = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t\tif ( atEnd ) {\n\n\t\t\t\tsettings.endingEnd = this.zeroSlopeAtEnd ? ZeroSlopeEnding : ZeroCurvatureEnding;\n\n\t\t\t} else {\n\n\t\t\t\tsettings.endingEnd \t = WrapAroundEnding;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_scheduleFading( duration, weightNow, weightThen ) {\n\n\t\tconst mixer = this._mixer, now = mixer.time;\n\t\tlet interpolant = this._weightInterpolant;\n\n\t\tif ( interpolant === null ) {\n\n\t\t\tinterpolant = mixer._lendControlInterpolant();\n\t\t\tthis._weightInterpolant = interpolant;\n\n\t\t}\n\n\t\tconst times = interpolant.parameterPositions,\n\t\t\tvalues = interpolant.sampleValues;\n\n\t\ttimes[ 0 ] = now;\n\t\tvalues[ 0 ] = weightNow;\n\t\ttimes[ 1 ] = now + duration;\n\t\tvalues[ 1 ] = weightThen;\n\n\t\treturn this;\n\n\t}\n\n}\n\nconst _controlInterpolantsResultBuffer = new Float32Array( 1 );\n\n\nclass AnimationMixer extends EventDispatcher {\n\n\tconstructor( root ) {\n\n\t\tsuper();\n\n\t\tthis._root = root;\n\t\tthis._initMemoryManager();\n\t\tthis._accuIndex = 0;\n\t\tthis.time = 0;\n\t\tthis.timeScale = 1.0;\n\n\t}\n\n\t_bindAction( action, prototypeAction ) {\n\n\t\tconst root = action._localRoot || this._root,\n\t\t\ttracks = action._clip.tracks,\n\t\t\tnTracks = tracks.length,\n\t\t\tbindings = action._propertyBindings,\n\t\t\tinterpolants = action._interpolants,\n\t\t\trootUuid = root.uuid,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName;\n\n\t\tlet bindingsByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingsByName === undefined ) {\n\n\t\t\tbindingsByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingsByName;\n\n\t\t}\n\n\t\tfor ( let i = 0; i !== nTracks; ++ i ) {\n\n\t\t\tconst track = tracks[ i ],\n\t\t\t\ttrackName = track.name;\n\n\t\t\tlet binding = bindingsByName[ trackName ];\n\n\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t} else {\n\n\t\t\t\tbinding = bindings[ i ];\n\n\t\t\t\tif ( binding !== undefined ) {\n\n\t\t\t\t\t// existing binding, make sure the cache knows\n\n\t\t\t\t\tif ( binding._cacheIndex === null ) {\n\n\t\t\t\t\t\t++ binding.referenceCount;\n\t\t\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tconst path = prototypeAction && prototypeAction.\n\t\t\t\t\t_propertyBindings[ i ].binding.parsedPath;\n\n\t\t\t\tbinding = new PropertyMixer(\n\t\t\t\t\tPropertyBinding.create( root, trackName, path ),\n\t\t\t\t\ttrack.ValueTypeName, track.getValueSize() );\n\n\t\t\t\t++ binding.referenceCount;\n\t\t\t\tthis._addInactiveBinding( binding, rootUuid, trackName );\n\n\t\t\t\tbindings[ i ] = binding;\n\n\t\t\t}\n\n\t\t\tinterpolants[ i ].resultBuffer = binding.buffer;\n\n\t\t}\n\n\t}\n\n\t_activateAction( action ) {\n\n\t\tif ( ! this._isActiveAction( action ) ) {\n\n\t\t\tif ( action._cacheIndex === null ) {\n\n\t\t\t\t// this action has been forgotten by the cache, but the user\n\t\t\t\t// appears to be still using it -> rebind\n\n\t\t\t\tconst rootUuid = ( action._localRoot || this._root ).uuid,\n\t\t\t\t\tclipUuid = action._clip.uuid,\n\t\t\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\t\t\tthis._bindAction( action,\n\t\t\t\t\tactionsForClip && actionsForClip.knownActions[ 0 ] );\n\n\t\t\t\tthis._addInactiveAction( action, clipUuid, rootUuid );\n\n\t\t\t}\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// increment reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( binding.useCount ++ === 0 ) {\n\n\t\t\t\t\tthis._lendBinding( binding );\n\t\t\t\t\tbinding.saveOriginalState();\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._lendAction( action );\n\n\t\t}\n\n\t}\n\n\t_deactivateAction( action ) {\n\n\t\tif ( this._isActiveAction( action ) ) {\n\n\t\t\tconst bindings = action._propertyBindings;\n\n\t\t\t// decrement reference counts / sort out state\n\t\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\t\tconst binding = bindings[ i ];\n\n\t\t\t\tif ( -- binding.useCount === 0 ) {\n\n\t\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\t\tthis._takeBackBinding( binding );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis._takeBackAction( action );\n\n\t\t}\n\n\t}\n\n\t// Memory manager\n\n\t_initMemoryManager() {\n\n\t\tthis._actions = []; // 'nActiveActions' followed by inactive ones\n\t\tthis._nActiveActions = 0;\n\n\t\tthis._actionsByClip = {};\n\t\t// inside:\n\t\t// {\n\t\t// \tknownActions: Array< AnimationAction > - used as prototypes\n\t\t// \tactionByRoot: AnimationAction - lookup\n\t\t// }\n\n\n\t\tthis._bindings = []; // 'nActiveBindings' followed by inactive ones\n\t\tthis._nActiveBindings = 0;\n\n\t\tthis._bindingsByRootAndName = {}; // inside: Map< name, PropertyMixer >\n\n\n\t\tthis._controlInterpolants = []; // same game as above\n\t\tthis._nActiveControlInterpolants = 0;\n\n\t\tconst scope = this;\n\n\t\tthis.stats = {\n\n\t\t\tactions: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._actions.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveActions;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbindings: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._bindings.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveBindings;\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tcontrolInterpolants: {\n\t\t\t\tget total() {\n\n\t\t\t\t\treturn scope._controlInterpolants.length;\n\n\t\t\t\t},\n\t\t\t\tget inUse() {\n\n\t\t\t\t\treturn scope._nActiveControlInterpolants;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t// Memory management for AnimationAction objects\n\n\t_isActiveAction( action ) {\n\n\t\tconst index = action._cacheIndex;\n\t\treturn index !== null && index < this._nActiveActions;\n\n\t}\n\n\t_addInactiveAction( action, clipUuid, rootUuid ) {\n\n\t\tconst actions = this._actions,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tlet actionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip === undefined ) {\n\n\t\t\tactionsForClip = {\n\n\t\t\t\tknownActions: [ action ],\n\t\t\t\tactionByRoot: {}\n\n\t\t\t};\n\n\t\t\taction._byClipCacheIndex = 0;\n\n\t\t\tactionsByClip[ clipUuid ] = actionsForClip;\n\n\t\t} else {\n\n\t\t\tconst knownActions = actionsForClip.knownActions;\n\n\t\t\taction._byClipCacheIndex = knownActions.length;\n\t\t\tknownActions.push( action );\n\n\t\t}\n\n\t\taction._cacheIndex = actions.length;\n\t\tactions.push( action );\n\n\t\tactionsForClip.actionByRoot[ rootUuid ] = action;\n\n\t}\n\n\t_removeInactiveAction( action ) {\n\n\t\tconst actions = this._actions,\n\t\t\tlastInactiveAction = actions[ actions.length - 1 ],\n\t\t\tcacheIndex = action._cacheIndex;\n\n\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\tactions.pop();\n\n\t\taction._cacheIndex = null;\n\n\n\t\tconst clipUuid = action._clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ],\n\t\t\tknownActionsForClip = actionsForClip.knownActions,\n\n\t\t\tlastKnownAction =\n\t\t\t\tknownActionsForClip[ knownActionsForClip.length - 1 ],\n\n\t\t\tbyClipCacheIndex = action._byClipCacheIndex;\n\n\t\tlastKnownAction._byClipCacheIndex = byClipCacheIndex;\n\t\tknownActionsForClip[ byClipCacheIndex ] = lastKnownAction;\n\t\tknownActionsForClip.pop();\n\n\t\taction._byClipCacheIndex = null;\n\n\n\t\tconst actionByRoot = actionsForClip.actionByRoot,\n\t\t\trootUuid = ( action._localRoot || this._root ).uuid;\n\n\t\tdelete actionByRoot[ rootUuid ];\n\n\t\tif ( knownActionsForClip.length === 0 ) {\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t\tthis._removeInactiveBindingsForAction( action );\n\n\t}\n\n\t_removeInactiveBindingsForAction( action ) {\n\n\t\tconst bindings = action._propertyBindings;\n\n\t\tfor ( let i = 0, n = bindings.length; i !== n; ++ i ) {\n\n\t\t\tconst binding = bindings[ i ];\n\n\t\t\tif ( -- binding.referenceCount === 0 ) {\n\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t_lendAction( action ) {\n\n\t\t// [ active actions |  inactive actions  ]\n\t\t// [  active actions >| inactive actions ]\n\t\t//                 s        a\n\t\t//                  <-swap->\n\t\t//                 a        s\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveActions ++,\n\n\t\t\tfirstInactiveAction = actions[ lastActiveIndex ];\n\n\t\taction._cacheIndex = lastActiveIndex;\n\t\tactions[ lastActiveIndex ] = action;\n\n\t\tfirstInactiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = firstInactiveAction;\n\n\t}\n\n\t_takeBackAction( action ) {\n\n\t\t// [  active actions  | inactive actions ]\n\t\t// [ active actions |< inactive actions  ]\n\t\t//        a        s\n\t\t//         <-swap->\n\t\t//        s        a\n\n\t\tconst actions = this._actions,\n\t\t\tprevIndex = action._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveActions,\n\n\t\t\tlastActiveAction = actions[ firstInactiveIndex ];\n\n\t\taction._cacheIndex = firstInactiveIndex;\n\t\tactions[ firstInactiveIndex ] = action;\n\n\t\tlastActiveAction._cacheIndex = prevIndex;\n\t\tactions[ prevIndex ] = lastActiveAction;\n\n\t}\n\n\t// Memory management for PropertyMixer objects\n\n\t_addInactiveBinding( binding, rootUuid, trackName ) {\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindings = this._bindings;\n\n\t\tlet bindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName === undefined ) {\n\n\t\t\tbindingByName = {};\n\t\t\tbindingsByRoot[ rootUuid ] = bindingByName;\n\n\t\t}\n\n\t\tbindingByName[ trackName ] = binding;\n\n\t\tbinding._cacheIndex = bindings.length;\n\t\tbindings.push( binding );\n\n\t}\n\n\t_removeInactiveBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tpropBinding = binding.binding,\n\t\t\trootUuid = propBinding.rootNode.uuid,\n\t\t\ttrackName = propBinding.path,\n\t\t\tbindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ],\n\n\t\t\tlastInactiveBinding = bindings[ bindings.length - 1 ],\n\t\t\tcacheIndex = binding._cacheIndex;\n\n\t\tlastInactiveBinding._cacheIndex = cacheIndex;\n\t\tbindings[ cacheIndex ] = lastInactiveBinding;\n\t\tbindings.pop();\n\n\t\tdelete bindingByName[ trackName ];\n\n\t\tif ( Object.keys( bindingByName ).length === 0 ) {\n\n\t\t\tdelete bindingsByRoot[ rootUuid ];\n\n\t\t}\n\n\t}\n\n\t_lendBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tlastActiveIndex = this._nActiveBindings ++,\n\n\t\t\tfirstInactiveBinding = bindings[ lastActiveIndex ];\n\n\t\tbinding._cacheIndex = lastActiveIndex;\n\t\tbindings[ lastActiveIndex ] = binding;\n\n\t\tfirstInactiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = firstInactiveBinding;\n\n\t}\n\n\t_takeBackBinding( binding ) {\n\n\t\tconst bindings = this._bindings,\n\t\t\tprevIndex = binding._cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveBindings,\n\n\t\t\tlastActiveBinding = bindings[ firstInactiveIndex ];\n\n\t\tbinding._cacheIndex = firstInactiveIndex;\n\t\tbindings[ firstInactiveIndex ] = binding;\n\n\t\tlastActiveBinding._cacheIndex = prevIndex;\n\t\tbindings[ prevIndex ] = lastActiveBinding;\n\n\t}\n\n\n\t// Memory management of Interpolants for weight and time scale\n\n\t_lendControlInterpolant() {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tlastActiveIndex = this._nActiveControlInterpolants ++;\n\n\t\tlet interpolant = interpolants[ lastActiveIndex ];\n\n\t\tif ( interpolant === undefined ) {\n\n\t\t\tinterpolant = new LinearInterpolant(\n\t\t\t\tnew Float32Array( 2 ), new Float32Array( 2 ),\n\t\t\t\t1, _controlInterpolantsResultBuffer );\n\n\t\t\tinterpolant.__cacheIndex = lastActiveIndex;\n\t\t\tinterpolants[ lastActiveIndex ] = interpolant;\n\n\t\t}\n\n\t\treturn interpolant;\n\n\t}\n\n\t_takeBackControlInterpolant( interpolant ) {\n\n\t\tconst interpolants = this._controlInterpolants,\n\t\t\tprevIndex = interpolant.__cacheIndex,\n\n\t\t\tfirstInactiveIndex = -- this._nActiveControlInterpolants,\n\n\t\t\tlastActiveInterpolant = interpolants[ firstInactiveIndex ];\n\n\t\tinterpolant.__cacheIndex = firstInactiveIndex;\n\t\tinterpolants[ firstInactiveIndex ] = interpolant;\n\n\t\tlastActiveInterpolant.__cacheIndex = prevIndex;\n\t\tinterpolants[ prevIndex ] = lastActiveInterpolant;\n\n\t}\n\n\t// return an action for a clip optionally using a custom root target\n\t// object (this method allocates a lot of dynamic memory in case a\n\t// previously unknown clip/root combination is specified)\n\tclipAction( clip, optionalRoot, blendMode ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid;\n\n\t\tlet clipObject = typeof clip === 'string' ? AnimationClip.findByName( root, clip ) : clip;\n\n\t\tconst clipUuid = clipObject !== null ? clipObject.uuid : clip;\n\n\t\tconst actionsForClip = this._actionsByClip[ clipUuid ];\n\t\tlet prototypeAction = null;\n\n\t\tif ( blendMode === undefined ) {\n\n\t\t\tif ( clipObject !== null ) {\n\n\t\t\t\tblendMode = clipObject.blendMode;\n\n\t\t\t} else {\n\n\t\t\t\tblendMode = NormalAnimationBlendMode;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\tconst existingAction = actionsForClip.actionByRoot[ rootUuid ];\n\n\t\t\tif ( existingAction !== undefined && existingAction.blendMode === blendMode ) {\n\n\t\t\t\treturn existingAction;\n\n\t\t\t}\n\n\t\t\t// we know the clip, so we don't have to parse all\n\t\t\t// the bindings again but can just copy\n\t\t\tprototypeAction = actionsForClip.knownActions[ 0 ];\n\n\t\t\t// also, take the clip from the prototype action\n\t\t\tif ( clipObject === null )\n\t\t\t\tclipObject = prototypeAction._clip;\n\n\t\t}\n\n\t\t// clip must be known when specified via string\n\t\tif ( clipObject === null ) return null;\n\n\t\t// allocate all resources required to run it\n\t\tconst newAction = new AnimationAction( this, clipObject, optionalRoot, blendMode );\n\n\t\tthis._bindAction( newAction, prototypeAction );\n\n\t\t// and make the action known to the memory manager\n\t\tthis._addInactiveAction( newAction, clipUuid, rootUuid );\n\n\t\treturn newAction;\n\n\t}\n\n\t// get an existing action\n\texistingAction( clip, optionalRoot ) {\n\n\t\tconst root = optionalRoot || this._root,\n\t\t\trootUuid = root.uuid,\n\n\t\t\tclipObject = typeof clip === 'string' ?\n\t\t\t\tAnimationClip.findByName( root, clip ) : clip,\n\n\t\t\tclipUuid = clipObject ? clipObject.uuid : clip,\n\n\t\t\tactionsForClip = this._actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\treturn actionsForClip.actionByRoot[ rootUuid ] || null;\n\n\t\t}\n\n\t\treturn null;\n\n\t}\n\n\t// deactivates all previously scheduled actions\n\tstopAllAction() {\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions;\n\n\t\tfor ( let i = nActions - 1; i >= 0; -- i ) {\n\n\t\t\tactions[ i ].stop();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// advance the time and update apply the animation\n\tupdate( deltaTime ) {\n\n\t\tdeltaTime *= this.timeScale;\n\n\t\tconst actions = this._actions,\n\t\t\tnActions = this._nActiveActions,\n\n\t\t\ttime = this.time += deltaTime,\n\t\t\ttimeDirection = Math.sign( deltaTime ),\n\n\t\t\taccuIndex = this._accuIndex ^= 1;\n\n\t\t// run active actions\n\n\t\tfor ( let i = 0; i !== nActions; ++ i ) {\n\n\t\t\tconst action = actions[ i ];\n\n\t\t\taction._update( time, deltaTime, timeDirection, accuIndex );\n\n\t\t}\n\n\t\t// update scene graph\n\n\t\tconst bindings = this._bindings,\n\t\t\tnBindings = this._nActiveBindings;\n\n\t\tfor ( let i = 0; i !== nBindings; ++ i ) {\n\n\t\t\tbindings[ i ].apply( accuIndex );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// Allows you to seek to a specific time in an animation.\n\tsetTime( timeInSeconds ) {\n\n\t\tthis.time = 0; // Zero out time attribute for AnimationMixer object;\n\t\tfor ( let i = 0; i < this._actions.length; i ++ ) {\n\n\t\t\tthis._actions[ i ].time = 0; // Zero out time attribute for all associated AnimationAction objects.\n\n\t\t}\n\n\t\treturn this.update( timeInSeconds ); // Update used to set exact time. Returns \"this\" AnimationMixer object.\n\n\t}\n\n\t// return this mixer's root target object\n\tgetRoot() {\n\n\t\treturn this._root;\n\n\t}\n\n\t// free all resources specific to a particular clip\n\tuncacheClip( clip ) {\n\n\t\tconst actions = this._actions,\n\t\t\tclipUuid = clip.uuid,\n\t\t\tactionsByClip = this._actionsByClip,\n\t\t\tactionsForClip = actionsByClip[ clipUuid ];\n\n\t\tif ( actionsForClip !== undefined ) {\n\n\t\t\t// note: just calling _removeInactiveAction would mess up the\n\t\t\t// iteration state and also require updating the state we can\n\t\t\t// just throw away\n\n\t\t\tconst actionsToRemove = actionsForClip.knownActions;\n\n\t\t\tfor ( let i = 0, n = actionsToRemove.length; i !== n; ++ i ) {\n\n\t\t\t\tconst action = actionsToRemove[ i ];\n\n\t\t\t\tthis._deactivateAction( action );\n\n\t\t\t\tconst cacheIndex = action._cacheIndex,\n\t\t\t\t\tlastInactiveAction = actions[ actions.length - 1 ];\n\n\t\t\t\taction._cacheIndex = null;\n\t\t\t\taction._byClipCacheIndex = null;\n\n\t\t\t\tlastInactiveAction._cacheIndex = cacheIndex;\n\t\t\t\tactions[ cacheIndex ] = lastInactiveAction;\n\t\t\t\tactions.pop();\n\n\t\t\t\tthis._removeInactiveBindingsForAction( action );\n\n\t\t\t}\n\n\t\t\tdelete actionsByClip[ clipUuid ];\n\n\t\t}\n\n\t}\n\n\t// free all resources specific to a particular root target object\n\tuncacheRoot( root ) {\n\n\t\tconst rootUuid = root.uuid,\n\t\t\tactionsByClip = this._actionsByClip;\n\n\t\tfor ( const clipUuid in actionsByClip ) {\n\n\t\t\tconst actionByRoot = actionsByClip[ clipUuid ].actionByRoot,\n\t\t\t\taction = actionByRoot[ rootUuid ];\n\n\t\t\tif ( action !== undefined ) {\n\n\t\t\t\tthis._deactivateAction( action );\n\t\t\t\tthis._removeInactiveAction( action );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst bindingsByRoot = this._bindingsByRootAndName,\n\t\t\tbindingByName = bindingsByRoot[ rootUuid ];\n\n\t\tif ( bindingByName !== undefined ) {\n\n\t\t\tfor ( const trackName in bindingByName ) {\n\n\t\t\t\tconst binding = bindingByName[ trackName ];\n\t\t\t\tbinding.restoreOriginalState();\n\t\t\t\tthis._removeInactiveBinding( binding );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// remove a targeted clip from the cache\n\tuncacheAction( clip, optionalRoot ) {\n\n\t\tconst action = this.existingAction( clip, optionalRoot );\n\n\t\tif ( action !== null ) {\n\n\t\t\tthis._deactivateAction( action );\n\t\t\tthis._removeInactiveAction( action );\n\n\t\t}\n\n\t}\n\n}\n\nclass Uniform {\n\n\tconstructor( value ) {\n\n\t\tthis.value = value;\n\n\t}\n\n\tclone() {\n\n\t\treturn new Uniform( this.value.clone === undefined ? this.value : this.value.clone() );\n\n\t}\n\n}\n\nlet _id = 0;\n\nclass UniformsGroup extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isUniformsGroup = true;\n\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\n\n\t\tthis.name = '';\n\n\t\tthis.usage = StaticDrawUsage;\n\t\tthis.uniforms = [];\n\n\t}\n\n\tadd( uniform ) {\n\n\t\tthis.uniforms.push( uniform );\n\n\t\treturn this;\n\n\t}\n\n\tremove( uniform ) {\n\n\t\tconst index = this.uniforms.indexOf( uniform );\n\n\t\tif ( index !== - 1 ) this.uniforms.splice( index, 1 );\n\n\t\treturn this;\n\n\t}\n\n\tsetName( name ) {\n\n\t\tthis.name = name;\n\n\t\treturn this;\n\n\t}\n\n\tsetUsage( value ) {\n\n\t\tthis.usage = value;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.name = source.name;\n\t\tthis.usage = source.usage;\n\n\t\tconst uniformsSource = source.uniforms;\n\n\t\tthis.uniforms.length = 0;\n\n\t\tfor ( let i = 0, l = uniformsSource.length; i < l; i ++ ) {\n\n\t\t\tthis.uniforms.push( uniformsSource[ i ].clone() );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\n\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\n\n\t\tsuper( array, stride );\n\n\t\tthis.isInstancedInterleavedBuffer = true;\n\n\t\tthis.meshPerAttribute = meshPerAttribute;\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source );\n\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\n\n\t\treturn this;\n\n\t}\n\n\tclone( data ) {\n\n\t\tconst ib = super.clone( data );\n\n\t\tib.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn ib;\n\n\t}\n\n\ttoJSON( data ) {\n\n\t\tconst json = super.toJSON( data );\n\n\t\tjson.isInstancedInterleavedBuffer = true;\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\n\n\t\treturn json;\n\n\t}\n\n}\n\nclass GLBufferAttribute {\n\n\tconstructor( buffer, type, itemSize, elementSize, count ) {\n\n\t\tthis.isGLBufferAttribute = true;\n\n\t\tthis.name = '';\n\n\t\tthis.buffer = buffer;\n\t\tthis.type = type;\n\t\tthis.itemSize = itemSize;\n\t\tthis.elementSize = elementSize;\n\t\tthis.count = count;\n\n\t\tthis.version = 0;\n\n\t}\n\n\tset needsUpdate( value ) {\n\n\t\tif ( value === true ) this.version ++;\n\n\t}\n\n\tsetBuffer( buffer ) {\n\n\t\tthis.buffer = buffer;\n\n\t\treturn this;\n\n\t}\n\n\tsetType( type, elementSize ) {\n\n\t\tthis.type = type;\n\t\tthis.elementSize = elementSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetItemSize( itemSize ) {\n\n\t\tthis.itemSize = itemSize;\n\n\t\treturn this;\n\n\t}\n\n\tsetCount( count ) {\n\n\t\tthis.count = count;\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Raycaster {\n\n\tconstructor( origin, direction, near = 0, far = Infinity ) {\n\n\t\tthis.ray = new Ray( origin, direction );\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.near = near;\n\t\tthis.far = far;\n\t\tthis.camera = null;\n\t\tthis.layers = new Layers();\n\n\t\tthis.params = {\n\t\t\tMesh: {},\n\t\t\tLine: { threshold: 1 },\n\t\t\tLOD: {},\n\t\t\tPoints: { threshold: 1 },\n\t\t\tSprite: {}\n\t\t};\n\n\t}\n\n\tset( origin, direction ) {\n\n\t\t// direction is assumed to be normalized (for accurate distance calculations)\n\n\t\tthis.ray.set( origin, direction );\n\n\t}\n\n\tsetFromCamera( coords, camera ) {\n\n\t\tif ( camera.isPerspectiveCamera ) {\n\n\t\t\tthis.ray.origin.setFromMatrixPosition( camera.matrixWorld );\n\t\t\tthis.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();\n\t\t\tthis.camera = camera;\n\n\t\t} else if ( camera.isOrthographicCamera ) {\n\n\t\t\tthis.ray.origin.set( coords.x, coords.y, ( camera.near + camera.far ) / ( camera.near - camera.far ) ).unproject( camera ); // set origin in plane of camera\n\t\t\tthis.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );\n\t\t\tthis.camera = camera;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.Raycaster: Unsupported camera type: ' + camera.type );\n\n\t\t}\n\n\t}\n\n\tintersectObject( object, recursive = true, intersects = [] ) {\n\n\t\tintersectObject( object, this, intersects, recursive );\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n\tintersectObjects( objects, recursive = true, intersects = [] ) {\n\n\t\tfor ( let i = 0, l = objects.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( objects[ i ], this, intersects, recursive );\n\n\t\t}\n\n\t\tintersects.sort( ascSort );\n\n\t\treturn intersects;\n\n\t}\n\n}\n\nfunction ascSort( a, b ) {\n\n\treturn a.distance - b.distance;\n\n}\n\nfunction intersectObject( object, raycaster, intersects, recursive ) {\n\n\tif ( object.layers.test( raycaster.layers ) ) {\n\n\t\tobject.raycast( raycaster, intersects );\n\n\t}\n\n\tif ( recursive === true ) {\n\n\t\tconst children = object.children;\n\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tintersectObject( children[ i ], raycaster, intersects, true );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system\n *\n * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.\n * The azimuthal angle (theta) is measured from the positive z-axis.\n */\n\n\nclass Spherical {\n\n\tconstructor( radius = 1, phi = 0, theta = 0 ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi; // polar angle\n\t\tthis.theta = theta; // azimuthal angle\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, phi, theta ) {\n\n\t\tthis.radius = radius;\n\t\tthis.phi = phi;\n\t\tthis.theta = theta;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.phi = other.phi;\n\t\tthis.theta = other.theta;\n\n\t\treturn this;\n\n\t}\n\n\t// restrict phi to be between EPS and PI-EPS\n\tmakeSafe() {\n\n\t\tconst EPS = 0.000001;\n\t\tthis.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + y * y + z * z );\n\n\t\tif ( this.radius === 0 ) {\n\n\t\t\tthis.theta = 0;\n\t\t\tthis.phi = 0;\n\n\t\t} else {\n\n\t\t\tthis.theta = Math.atan2( x, z );\n\t\t\tthis.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\n/**\n * Ref: https://en.wikipedia.org/wiki/Cylindrical_coordinate_system\n */\n\nclass Cylindrical {\n\n\tconstructor( radius = 1, theta = 0, y = 0 ) {\n\n\t\tthis.radius = radius; // distance from the origin to a point in the x-z plane\n\t\tthis.theta = theta; // counterclockwise angle in the x-z plane measured in radians from the positive z-axis\n\t\tthis.y = y; // height above the x-z plane\n\n\t\treturn this;\n\n\t}\n\n\tset( radius, theta, y ) {\n\n\t\tthis.radius = radius;\n\t\tthis.theta = theta;\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.radius = other.radius;\n\t\tthis.theta = other.theta;\n\t\tthis.y = other.y;\n\n\t\treturn this;\n\n\t}\n\n\tsetFromVector3( v ) {\n\n\t\treturn this.setFromCartesianCoords( v.x, v.y, v.z );\n\n\t}\n\n\tsetFromCartesianCoords( x, y, z ) {\n\n\t\tthis.radius = Math.sqrt( x * x + z * z );\n\t\tthis.theta = Math.atan2( x, z );\n\t\tthis.y = y;\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$4 = /*@__PURE__*/ new Vector2();\n\nclass Box2 {\n\n\tconstructor( min = new Vector2( + Infinity, + Infinity ), max = new Vector2( - Infinity, - Infinity ) ) {\n\n\t\tthis.isBox2 = true;\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tset( min, max ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\n\t\treturn this;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.makeEmpty();\n\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\n\n\t\t\tthis.expandByPoint( points[ i ] );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsetFromCenterAndSize( center, size ) {\n\n\t\tconst halfSize = _vector$4.copy( size ).multiplyScalar( 0.5 );\n\t\tthis.min.copy( center ).sub( halfSize );\n\t\tthis.max.copy( center ).add( halfSize );\n\n\t\treturn this;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( box ) {\n\n\t\tthis.min.copy( box.min );\n\t\tthis.max.copy( box.max );\n\n\t\treturn this;\n\n\t}\n\n\tmakeEmpty() {\n\n\t\tthis.min.x = this.min.y = + Infinity;\n\t\tthis.max.x = this.max.y = - Infinity;\n\n\t\treturn this;\n\n\t}\n\n\tisEmpty() {\n\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\n\n\t}\n\n\tgetSize( target ) {\n\n\t\treturn this.isEmpty() ? target.set( 0, 0 ) : target.subVectors( this.max, this.min );\n\n\t}\n\n\texpandByPoint( point ) {\n\n\t\tthis.min.min( point );\n\t\tthis.max.max( point );\n\n\t\treturn this;\n\n\t}\n\n\texpandByVector( vector ) {\n\n\t\tthis.min.sub( vector );\n\t\tthis.max.add( vector );\n\n\t\treturn this;\n\n\t}\n\n\texpandByScalar( scalar ) {\n\n\t\tthis.min.addScalar( - scalar );\n\t\tthis.max.addScalar( scalar );\n\n\t\treturn this;\n\n\t}\n\n\tcontainsPoint( point ) {\n\n\t\treturn point.x < this.min.x || point.x > this.max.x ||\n\t\t\tpoint.y < this.min.y || point.y > this.max.y ? false : true;\n\n\t}\n\n\tcontainsBox( box ) {\n\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y;\n\n\t}\n\n\tgetParameter( point, target ) {\n\n\t\t// This can potentially have a divide by zero if the box\n\t\t// has a size dimension of 0.\n\n\t\treturn target.set(\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y )\n\t\t);\n\n\t}\n\n\tintersectsBox( box ) {\n\n\t\t// using 4 splitting planes to rule out intersections\n\n\t\treturn box.max.x < this.min.x || box.min.x > this.max.x ||\n\t\t\tbox.max.y < this.min.y || box.min.y > this.max.y ? false : true;\n\n\t}\n\n\tclampPoint( point, target ) {\n\n\t\treturn target.copy( point ).clamp( this.min, this.max );\n\n\t}\n\n\tdistanceToPoint( point ) {\n\n\t\treturn this.clampPoint( point, _vector$4 ).distanceTo( point );\n\n\t}\n\n\tintersect( box ) {\n\n\t\tthis.min.max( box.min );\n\t\tthis.max.min( box.max );\n\n\t\tif ( this.isEmpty() ) this.makeEmpty();\n\n\t\treturn this;\n\n\t}\n\n\tunion( box ) {\n\n\t\tthis.min.min( box.min );\n\t\tthis.max.max( box.max );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( offset ) {\n\n\t\tthis.min.add( offset );\n\t\tthis.max.add( offset );\n\n\t\treturn this;\n\n\t}\n\n\tequals( box ) {\n\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\n\n\t}\n\n}\n\nconst _startP = /*@__PURE__*/ new Vector3();\nconst _startEnd = /*@__PURE__*/ new Vector3();\n\nclass Line3 {\n\n\tconstructor( start = new Vector3(), end = new Vector3() ) {\n\n\t\tthis.start = start;\n\t\tthis.end = end;\n\n\t}\n\n\tset( start, end ) {\n\n\t\tthis.start.copy( start );\n\t\tthis.end.copy( end );\n\n\t\treturn this;\n\n\t}\n\n\tcopy( line ) {\n\n\t\tthis.start.copy( line.start );\n\t\tthis.end.copy( line.end );\n\n\t\treturn this;\n\n\t}\n\n\tgetCenter( target ) {\n\n\t\treturn target.addVectors( this.start, this.end ).multiplyScalar( 0.5 );\n\n\t}\n\n\tdelta( target ) {\n\n\t\treturn target.subVectors( this.end, this.start );\n\n\t}\n\n\tdistanceSq() {\n\n\t\treturn this.start.distanceToSquared( this.end );\n\n\t}\n\n\tdistance() {\n\n\t\treturn this.start.distanceTo( this.end );\n\n\t}\n\n\tat( t, target ) {\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tclosestPointToPointParameter( point, clampToLine ) {\n\n\t\t_startP.subVectors( point, this.start );\n\t\t_startEnd.subVectors( this.end, this.start );\n\n\t\tconst startEnd2 = _startEnd.dot( _startEnd );\n\t\tconst startEnd_startP = _startEnd.dot( _startP );\n\n\t\tlet t = startEnd_startP / startEnd2;\n\n\t\tif ( clampToLine ) {\n\n\t\t\tt = clamp( t, 0, 1 );\n\n\t\t}\n\n\t\treturn t;\n\n\t}\n\n\tclosestPointToPoint( point, clampToLine, target ) {\n\n\t\tconst t = this.closestPointToPointParameter( point, clampToLine );\n\n\t\treturn this.delta( target ).multiplyScalar( t ).add( this.start );\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tthis.start.applyMatrix4( matrix );\n\t\tthis.end.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tequals( line ) {\n\n\t\treturn line.start.equals( this.start ) && line.end.equals( this.end );\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n}\n\nconst _vector$3 = /*@__PURE__*/ new Vector3();\n\nclass SpotLightHelper extends Object3D {\n\n\tconstructor( light, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'SpotLightHelper';\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [\n\t\t\t0, 0, 0, \t0, 0, 1,\n\t\t\t0, 0, 0, \t1, 0, 1,\n\t\t\t0, 0, 0,\t- 1, 0, 1,\n\t\t\t0, 0, 0, \t0, 1, 1,\n\t\t\t0, 0, 0, \t0, - 1, 1\n\t\t];\n\n\t\tfor ( let i = 0, j = 1, l = 32; i < l; i ++, j ++ ) {\n\n\t\t\tconst p1 = ( i / l ) * Math.PI * 2;\n\t\t\tconst p2 = ( j / l ) * Math.PI * 2;\n\n\t\t\tpositions.push(\n\t\t\t\tMath.cos( p1 ), Math.sin( p1 ), 1,\n\t\t\t\tMath.cos( p2 ), Math.sin( p2 ), 1\n\t\t\t);\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.cone = new LineSegments( geometry, material );\n\t\tthis.add( this.cone );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\tconst coneLength = this.light.distance ? this.light.distance : 1000;\n\t\tconst coneWidth = coneLength * Math.tan( this.light.angle );\n\n\t\tthis.cone.scale.set( coneWidth, coneWidth, coneLength );\n\n\t\t_vector$3.setFromMatrixPosition( this.light.target.matrixWorld );\n\n\t\tthis.cone.lookAt( _vector$3 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.cone.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.cone.material.color.copy( this.light.color );\n\n\t\t}\n\n\t}\n\n}\n\nconst _vector$2 = /*@__PURE__*/ new Vector3();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\nconst _matrixWorldInv = /*@__PURE__*/ new Matrix4();\n\n\nclass SkeletonHelper extends LineSegments {\n\n\tconstructor( object ) {\n\n\t\tconst bones = getBoneList( object );\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst color1 = new Color( 0, 0, 1 );\n\t\tconst color2 = new Color( 0, 1, 0 );\n\n\t\tfor ( let i = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tcolors.push( color1.r, color1.g, color1.b );\n\t\t\t\tcolors.push( color2.r, color2.g, color2.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, depthTest: false, depthWrite: false, toneMapped: false, transparent: true } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.isSkeletonHelper = true;\n\n\t\tthis.type = 'SkeletonHelper';\n\n\t\tthis.root = object;\n\t\tthis.bones = bones;\n\n\t\tthis.matrix = object.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst bones = this.bones;\n\n\t\tconst geometry = this.geometry;\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t_matrixWorldInv.copy( this.root.matrixWorld ).invert();\n\n\t\tfor ( let i = 0, j = 0; i < bones.length; i ++ ) {\n\n\t\t\tconst bone = bones[ i ];\n\n\t\t\tif ( bone.parent && bone.parent.isBone ) {\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\t_boneMatrix.multiplyMatrices( _matrixWorldInv, bone.parent.matrixWorld );\n\t\t\t\t_vector$2.setFromMatrixPosition( _boneMatrix );\n\t\t\t\tposition.setXYZ( j + 1, _vector$2.x, _vector$2.y, _vector$2.z );\n\n\t\t\t\tj += 2;\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction getBoneList( object ) {\n\n\tconst boneList = [];\n\n\tif ( object.isBone === true ) {\n\n\t\tboneList.push( object );\n\n\t}\n\n\tfor ( let i = 0; i < object.children.length; i ++ ) {\n\n\t\tboneList.push.apply( boneList, getBoneList( object.children[ i ] ) );\n\n\t}\n\n\treturn boneList;\n\n}\n\nclass PointLightHelper extends Mesh {\n\n\tconstructor( light, sphereSize, color ) {\n\n\t\tconst geometry = new SphereGeometry( sphereSize, 4, 2 );\n\t\tconst material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.light = light;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'PointLightHelper';\n\n\t\tthis.matrix = this.light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\n\t\t/*\n\t// TODO: delete this comment?\n\tconst distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );\n\tconst distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );\n\n\tthis.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );\n\tthis.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );\n\n\tconst d = light.distance;\n\n\tif ( d === 0.0 ) {\n\n\t\tthis.lightDistance.visible = false;\n\n\t} else {\n\n\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t}\n\n\tthis.add( this.lightDistance );\n\t*/\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\t/*\n\t\tconst d = this.light.distance;\n\n\t\tif ( d === 0.0 ) {\n\n\t\t\tthis.lightDistance.visible = false;\n\n\t\t} else {\n\n\t\t\tthis.lightDistance.visible = true;\n\t\t\tthis.lightDistance.scale.set( d, d, d );\n\n\t\t}\n\t\t*/\n\n\t}\n\n}\n\nconst _vector$1 = /*@__PURE__*/ new Vector3();\nconst _color1 = /*@__PURE__*/ new Color();\nconst _color2 = /*@__PURE__*/ new Color();\n\nclass HemisphereLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'HemisphereLightHelper';\n\n\t\tconst geometry = new OctahedronGeometry( size );\n\t\tgeometry.rotateY( Math.PI * 0.5 );\n\n\t\tthis.material = new MeshBasicMaterial( { wireframe: true, fog: false, toneMapped: false } );\n\t\tif ( this.color === undefined ) this.material.vertexColors = true;\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\t\tconst colors = new Float32Array( position.count * 3 );\n\n\t\tgeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ) );\n\n\t\tthis.add( new Mesh( geometry, this.material ) );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.children[ 0 ];\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tconst colors = mesh.geometry.getAttribute( 'color' );\n\n\t\t\t_color1.copy( this.light.color );\n\t\t\t_color2.copy( this.light.groundColor );\n\n\t\t\tfor ( let i = 0, l = colors.count; i < l; i ++ ) {\n\n\t\t\t\tconst color = ( i < ( l / 2 ) ) ? _color1 : _color2;\n\n\t\t\t\tcolors.setXYZ( i, color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t\tcolors.needsUpdate = true;\n\n\t\t}\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\n\t\tmesh.lookAt( _vector$1.setFromMatrixPosition( this.light.matrixWorld ).negate() );\n\n\t}\n\n}\n\nclass GridHelper extends LineSegments {\n\n\tconstructor( size = 10, divisions = 10, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst center = divisions / 2;\n\t\tconst step = size / divisions;\n\t\tconst halfSize = size / 2;\n\n\t\tconst vertices = [], colors = [];\n\n\t\tfor ( let i = 0, j = 0, k = - halfSize; i <= divisions; i ++, k += step ) {\n\n\t\t\tvertices.push( - halfSize, 0, k, halfSize, 0, k );\n\t\t\tvertices.push( k, 0, - halfSize, k, 0, halfSize );\n\n\t\t\tconst color = i === center ? color1 : color2;\n\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\t\t\tcolor.toArray( colors, j ); j += 3;\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'GridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PolarGridHelper extends LineSegments {\n\n\tconstructor( radius = 10, sectors = 16, rings = 8, divisions = 64, color1 = 0x444444, color2 = 0x888888 ) {\n\n\t\tcolor1 = new Color( color1 );\n\t\tcolor2 = new Color( color2 );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\t// create the sectors\n\n\t\tif ( sectors > 1 ) {\n\n\t\t\tfor ( let i = 0; i < sectors; i ++ ) {\n\n\t\t\t\tconst v = ( i / sectors ) * ( Math.PI * 2 );\n\n\t\t\t\tconst x = Math.sin( v ) * radius;\n\t\t\t\tconst z = Math.cos( v ) * radius;\n\n\t\t\t\tvertices.push( 0, 0, 0 );\n\t\t\t\tvertices.push( x, 0, z );\n\n\t\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// create the rings\n\n\t\tfor ( let i = 0; i < rings; i ++ ) {\n\n\t\t\tconst color = ( i & 1 ) ? color1 : color2;\n\n\t\t\tconst r = radius - ( radius / rings * i );\n\n\t\t\tfor ( let j = 0; j < divisions; j ++ ) {\n\n\t\t\t\t// first vertex\n\n\t\t\t\tlet v = ( j / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tlet x = Math.sin( v ) * r;\n\t\t\t\tlet z = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t\t// second vertex\n\n\t\t\t\tv = ( ( j + 1 ) / divisions ) * ( Math.PI * 2 );\n\n\t\t\t\tx = Math.sin( v ) * r;\n\t\t\t\tz = Math.cos( v ) * r;\n\n\t\t\t\tvertices.push( x, 0, z );\n\t\t\t\tcolors.push( color.r, color.g, color.b );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'PolarGridHelper';\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nconst _v1 = /*@__PURE__*/ new Vector3();\nconst _v2 = /*@__PURE__*/ new Vector3();\nconst _v3 = /*@__PURE__*/ new Vector3();\n\nclass DirectionalLightHelper extends Object3D {\n\n\tconstructor( light, size, color ) {\n\n\t\tsuper();\n\n\t\tthis.light = light;\n\n\t\tthis.matrix = light.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.color = color;\n\n\t\tthis.type = 'DirectionalLightHelper';\n\n\t\tif ( size === undefined ) size = 1;\n\n\t\tlet geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [\n\t\t\t- size, size, 0,\n\t\t\tsize, size, 0,\n\t\t\tsize, - size, 0,\n\t\t\t- size, - size, 0,\n\t\t\t- size, size, 0\n\t\t], 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { fog: false, toneMapped: false } );\n\n\t\tthis.lightPlane = new Line( geometry, material );\n\t\tthis.add( this.lightPlane );\n\n\t\tgeometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 0, 1 ], 3 ) );\n\n\t\tthis.targetLine = new Line( geometry, material );\n\t\tthis.add( this.targetLine );\n\n\t\tthis.update();\n\n\t}\n\n\tdispose() {\n\n\t\tthis.lightPlane.geometry.dispose();\n\t\tthis.lightPlane.material.dispose();\n\t\tthis.targetLine.geometry.dispose();\n\t\tthis.targetLine.material.dispose();\n\n\t}\n\n\tupdate() {\n\n\t\tthis.light.updateWorldMatrix( true, false );\n\t\tthis.light.target.updateWorldMatrix( true, false );\n\n\t\t_v1.setFromMatrixPosition( this.light.matrixWorld );\n\t\t_v2.setFromMatrixPosition( this.light.target.matrixWorld );\n\t\t_v3.subVectors( _v2, _v1 );\n\n\t\tthis.lightPlane.lookAt( _v2 );\n\n\t\tif ( this.color !== undefined ) {\n\n\t\t\tthis.lightPlane.material.color.set( this.color );\n\t\t\tthis.targetLine.material.color.set( this.color );\n\n\t\t} else {\n\n\t\t\tthis.lightPlane.material.color.copy( this.light.color );\n\t\t\tthis.targetLine.material.color.copy( this.light.color );\n\n\t\t}\n\n\t\tthis.targetLine.lookAt( _v2 );\n\t\tthis.targetLine.scale.z = _v3.length();\n\n\t}\n\n}\n\nconst _vector = /*@__PURE__*/ new Vector3();\nconst _camera = /*@__PURE__*/ new Camera();\n\n/**\n *\t- shows frustum, line of sight and up of the camera\n *\t- suitable for fast updates\n * \t- based on frustum visualization in lightgl.js shadowmap example\n *\t\thttps://github.com/evanw/lightgl.js/blob/master/tests/shadowmap.html\n */\n\nclass CameraHelper extends LineSegments {\n\n\tconstructor( camera ) {\n\n\t\tconst geometry = new BufferGeometry();\n\t\tconst material = new LineBasicMaterial( { color: 0xffffff, vertexColors: true, toneMapped: false } );\n\n\t\tconst vertices = [];\n\t\tconst colors = [];\n\n\t\tconst pointMap = {};\n\n\t\t// near\n\n\t\taddLine( 'n1', 'n2' );\n\t\taddLine( 'n2', 'n4' );\n\t\taddLine( 'n4', 'n3' );\n\t\taddLine( 'n3', 'n1' );\n\n\t\t// far\n\n\t\taddLine( 'f1', 'f2' );\n\t\taddLine( 'f2', 'f4' );\n\t\taddLine( 'f4', 'f3' );\n\t\taddLine( 'f3', 'f1' );\n\n\t\t// sides\n\n\t\taddLine( 'n1', 'f1' );\n\t\taddLine( 'n2', 'f2' );\n\t\taddLine( 'n3', 'f3' );\n\t\taddLine( 'n4', 'f4' );\n\n\t\t// cone\n\n\t\taddLine( 'p', 'n1' );\n\t\taddLine( 'p', 'n2' );\n\t\taddLine( 'p', 'n3' );\n\t\taddLine( 'p', 'n4' );\n\n\t\t// up\n\n\t\taddLine( 'u1', 'u2' );\n\t\taddLine( 'u2', 'u3' );\n\t\taddLine( 'u3', 'u1' );\n\n\t\t// target\n\n\t\taddLine( 'c', 't' );\n\t\taddLine( 'p', 'c' );\n\n\t\t// cross\n\n\t\taddLine( 'cn1', 'cn2' );\n\t\taddLine( 'cn3', 'cn4' );\n\n\t\taddLine( 'cf1', 'cf2' );\n\t\taddLine( 'cf3', 'cf4' );\n\n\t\tfunction addLine( a, b ) {\n\n\t\t\taddPoint( a );\n\t\t\taddPoint( b );\n\n\t\t}\n\n\t\tfunction addPoint( id ) {\n\n\t\t\tvertices.push( 0, 0, 0 );\n\t\t\tcolors.push( 0, 0, 0 );\n\n\t\t\tif ( pointMap[ id ] === undefined ) {\n\n\t\t\t\tpointMap[ id ] = [];\n\n\t\t\t}\n\n\t\t\tpointMap[ id ].push( ( vertices.length / 3 ) - 1 );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'CameraHelper';\n\n\t\tthis.camera = camera;\n\t\tif ( this.camera.updateProjectionMatrix ) this.camera.updateProjectionMatrix();\n\n\t\tthis.matrix = camera.matrixWorld;\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.pointMap = pointMap;\n\n\t\tthis.update();\n\n\t\t// colors\n\n\t\tconst colorFrustum = new Color( 0xffaa00 );\n\t\tconst colorCone = new Color( 0xff0000 );\n\t\tconst colorUp = new Color( 0x00aaff );\n\t\tconst colorTarget = new Color( 0xffffff );\n\t\tconst colorCross = new Color( 0x333333 );\n\n\t\tthis.setColors( colorFrustum, colorCone, colorUp, colorTarget, colorCross );\n\n\t}\n\n\tsetColors( frustum, cone, up, target, cross ) {\n\n\t\tconst geometry = this.geometry;\n\n\t\tconst colorAttribute = geometry.getAttribute( 'color' );\n\n\t\t// near\n\n\t\tcolorAttribute.setXYZ( 0, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 1, frustum.r, frustum.g, frustum.b ); // n1, n2\n\t\tcolorAttribute.setXYZ( 2, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 3, frustum.r, frustum.g, frustum.b ); // n2, n4\n\t\tcolorAttribute.setXYZ( 4, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 5, frustum.r, frustum.g, frustum.b ); // n4, n3\n\t\tcolorAttribute.setXYZ( 6, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 7, frustum.r, frustum.g, frustum.b ); // n3, n1\n\n\t\t// far\n\n\t\tcolorAttribute.setXYZ( 8, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 9, frustum.r, frustum.g, frustum.b ); // f1, f2\n\t\tcolorAttribute.setXYZ( 10, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 11, frustum.r, frustum.g, frustum.b ); // f2, f4\n\t\tcolorAttribute.setXYZ( 12, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 13, frustum.r, frustum.g, frustum.b ); // f4, f3\n\t\tcolorAttribute.setXYZ( 14, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 15, frustum.r, frustum.g, frustum.b ); // f3, f1\n\n\t\t// sides\n\n\t\tcolorAttribute.setXYZ( 16, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 17, frustum.r, frustum.g, frustum.b ); // n1, f1\n\t\tcolorAttribute.setXYZ( 18, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 19, frustum.r, frustum.g, frustum.b ); // n2, f2\n\t\tcolorAttribute.setXYZ( 20, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 21, frustum.r, frustum.g, frustum.b ); // n3, f3\n\t\tcolorAttribute.setXYZ( 22, frustum.r, frustum.g, frustum.b ); colorAttribute.setXYZ( 23, frustum.r, frustum.g, frustum.b ); // n4, f4\n\n\t\t// cone\n\n\t\tcolorAttribute.setXYZ( 24, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 25, cone.r, cone.g, cone.b ); // p, n1\n\t\tcolorAttribute.setXYZ( 26, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 27, cone.r, cone.g, cone.b ); // p, n2\n\t\tcolorAttribute.setXYZ( 28, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 29, cone.r, cone.g, cone.b ); // p, n3\n\t\tcolorAttribute.setXYZ( 30, cone.r, cone.g, cone.b ); colorAttribute.setXYZ( 31, cone.r, cone.g, cone.b ); // p, n4\n\n\t\t// up\n\n\t\tcolorAttribute.setXYZ( 32, up.r, up.g, up.b ); colorAttribute.setXYZ( 33, up.r, up.g, up.b ); // u1, u2\n\t\tcolorAttribute.setXYZ( 34, up.r, up.g, up.b ); colorAttribute.setXYZ( 35, up.r, up.g, up.b ); // u2, u3\n\t\tcolorAttribute.setXYZ( 36, up.r, up.g, up.b ); colorAttribute.setXYZ( 37, up.r, up.g, up.b ); // u3, u1\n\n\t\t// target\n\n\t\tcolorAttribute.setXYZ( 38, target.r, target.g, target.b ); colorAttribute.setXYZ( 39, target.r, target.g, target.b ); // c, t\n\t\tcolorAttribute.setXYZ( 40, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 41, cross.r, cross.g, cross.b ); // p, c\n\n\t\t// cross\n\n\t\tcolorAttribute.setXYZ( 42, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 43, cross.r, cross.g, cross.b ); // cn1, cn2\n\t\tcolorAttribute.setXYZ( 44, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 45, cross.r, cross.g, cross.b ); // cn3, cn4\n\n\t\tcolorAttribute.setXYZ( 46, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 47, cross.r, cross.g, cross.b ); // cf1, cf2\n\t\tcolorAttribute.setXYZ( 48, cross.r, cross.g, cross.b ); colorAttribute.setXYZ( 49, cross.r, cross.g, cross.b ); // cf3, cf4\n\n\t\tcolorAttribute.needsUpdate = true;\n\n\t}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst pointMap = this.pointMap;\n\n\t\tconst w = 1, h = 1;\n\n\t\t// we need just camera projection matrix inverse\n\t\t// world matrix must be identity\n\n\t\t_camera.projectionMatrixInverse.copy( this.camera.projectionMatrixInverse );\n\n\t\t// center / target\n\n\t\tsetPoint( 'c', pointMap, geometry, _camera, 0, 0, - 1 );\n\t\tsetPoint( 't', pointMap, geometry, _camera, 0, 0, 1 );\n\n\t\t// near\n\n\t\tsetPoint( 'n1', pointMap, geometry, _camera, - w, - h, - 1 );\n\t\tsetPoint( 'n2', pointMap, geometry, _camera, w, - h, - 1 );\n\t\tsetPoint( 'n3', pointMap, geometry, _camera, - w, h, - 1 );\n\t\tsetPoint( 'n4', pointMap, geometry, _camera, w, h, - 1 );\n\n\t\t// far\n\n\t\tsetPoint( 'f1', pointMap, geometry, _camera, - w, - h, 1 );\n\t\tsetPoint( 'f2', pointMap, geometry, _camera, w, - h, 1 );\n\t\tsetPoint( 'f3', pointMap, geometry, _camera, - w, h, 1 );\n\t\tsetPoint( 'f4', pointMap, geometry, _camera, w, h, 1 );\n\n\t\t// up\n\n\t\tsetPoint( 'u1', pointMap, geometry, _camera, w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u2', pointMap, geometry, _camera, - w * 0.7, h * 1.1, - 1 );\n\t\tsetPoint( 'u3', pointMap, geometry, _camera, 0, h * 2, - 1 );\n\n\t\t// cross\n\n\t\tsetPoint( 'cf1', pointMap, geometry, _camera, - w, 0, 1 );\n\t\tsetPoint( 'cf2', pointMap, geometry, _camera, w, 0, 1 );\n\t\tsetPoint( 'cf3', pointMap, geometry, _camera, 0, - h, 1 );\n\t\tsetPoint( 'cf4', pointMap, geometry, _camera, 0, h, 1 );\n\n\t\tsetPoint( 'cn1', pointMap, geometry, _camera, - w, 0, - 1 );\n\t\tsetPoint( 'cn2', pointMap, geometry, _camera, w, 0, - 1 );\n\t\tsetPoint( 'cn3', pointMap, geometry, _camera, 0, - h, - 1 );\n\t\tsetPoint( 'cn4', pointMap, geometry, _camera, 0, h, - 1 );\n\n\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\n\nfunction setPoint( point, pointMap, geometry, camera, x, y, z ) {\n\n\t_vector.set( x, y, z ).unproject( camera );\n\n\tconst points = pointMap[ point ];\n\n\tif ( points !== undefined ) {\n\n\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tposition.setXYZ( points[ i ], _vector.x, _vector.y, _vector.z );\n\n\t\t}\n\n\t}\n\n}\n\nconst _box = /*@__PURE__*/ new Box3();\n\nclass BoxHelper extends LineSegments {\n\n\tconstructor( object, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\t\tconst positions = new Float32Array( 8 * 3 );\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\t\tgeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.object = object;\n\t\tthis.type = 'BoxHelper';\n\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate( object ) {\n\n\t\tif ( object !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BoxHelper: .update() has no longer arguments.' );\n\n\t\t}\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\t_box.setFromObject( this.object );\n\n\t\t}\n\n\t\tif ( _box.isEmpty() ) return;\n\n\t\tconst min = _box.min;\n\t\tconst max = _box.max;\n\n\t\t/*\n\t\t\t5____4\n\t\t1/___0/|\n\t\t| 6__|_7\n\t\t2/___3/\n\n\t\t0: max.x, max.y, max.z\n\t\t1: min.x, max.y, max.z\n\t\t2: min.x, min.y, max.z\n\t\t3: max.x, min.y, max.z\n\t\t4: max.x, max.y, min.z\n\t\t5: min.x, max.y, min.z\n\t\t6: min.x, min.y, min.z\n\t\t7: max.x, min.y, min.z\n\t\t*/\n\n\t\tconst position = this.geometry.attributes.position;\n\t\tconst array = position.array;\n\n\t\tarray[ 0 ] = max.x; array[ 1 ] = max.y; array[ 2 ] = max.z;\n\t\tarray[ 3 ] = min.x; array[ 4 ] = max.y; array[ 5 ] = max.z;\n\t\tarray[ 6 ] = min.x; array[ 7 ] = min.y; array[ 8 ] = max.z;\n\t\tarray[ 9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;\n\t\tarray[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;\n\t\tarray[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;\n\t\tarray[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;\n\t\tarray[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;\n\n\t\tposition.needsUpdate = true;\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tsetFromObject( object ) {\n\n\t\tthis.object = object;\n\t\tthis.update();\n\n\t\treturn this;\n\n\t}\n\n\tcopy( source, recursive ) {\n\n\t\tsuper.copy( source, recursive );\n\n\t\tthis.object = source.object;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass Box3Helper extends LineSegments {\n\n\tconstructor( box, color = 0xffff00 ) {\n\n\t\tconst indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );\n\n\t\tconst positions = [ 1, 1, 1, - 1, 1, 1, - 1, - 1, 1, 1, - 1, 1, 1, 1, - 1, - 1, 1, - 1, - 1, - 1, - 1, 1, - 1, - 1 ];\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tgeometry.setIndex( new BufferAttribute( indices, 1 ) );\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.box = box;\n\n\t\tthis.type = 'Box3Helper';\n\n\t\tthis.geometry.computeBoundingSphere();\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst box = this.box;\n\n\t\tif ( box.isEmpty() ) return;\n\n\t\tbox.getCenter( this.position );\n\n\t\tbox.getSize( this.scale );\n\n\t\tthis.scale.multiplyScalar( 0.5 );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass PlaneHelper extends Line {\n\n\tconstructor( plane, size = 1, hex = 0xffff00 ) {\n\n\t\tconst color = hex;\n\n\t\tconst positions = [ 1, - 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, - 1, 0, 1, 1, 0 ];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( positions, 3 ) );\n\t\tgeometry.computeBoundingSphere();\n\n\t\tsuper( geometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\n\t\tthis.type = 'PlaneHelper';\n\n\t\tthis.plane = plane;\n\n\t\tthis.size = size;\n\n\t\tconst positions2 = [ 1, 1, 0, - 1, 1, 0, - 1, - 1, 0, 1, 1, 0, - 1, - 1, 0, 1, - 1, 0 ];\n\n\t\tconst geometry2 = new BufferGeometry();\n\t\tgeometry2.setAttribute( 'position', new Float32BufferAttribute( positions2, 3 ) );\n\t\tgeometry2.computeBoundingSphere();\n\n\t\tthis.add( new Mesh( geometry2, new MeshBasicMaterial( { color: color, opacity: 0.2, transparent: true, depthWrite: false, toneMapped: false } ) ) );\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tthis.position.set( 0, 0, 0 );\n\n\t\tthis.scale.set( 0.5 * this.size, 0.5 * this.size, 1 );\n\n\t\tthis.lookAt( this.plane.normal );\n\n\t\tthis.translateZ( - this.plane.constant );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\t\tthis.children[ 0 ].geometry.dispose();\n\t\tthis.children[ 0 ].material.dispose();\n\n\t}\n\n}\n\nconst _axis = /*@__PURE__*/ new Vector3();\nlet _lineGeometry, _coneGeometry;\n\nclass ArrowHelper extends Object3D {\n\n\t// dir is assumed to be normalized\n\n\tconstructor( dir = new Vector3( 0, 0, 1 ), origin = new Vector3( 0, 0, 0 ), length = 1, color = 0xffff00, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tsuper();\n\n\t\tthis.type = 'ArrowHelper';\n\n\t\tif ( _lineGeometry === undefined ) {\n\n\t\t\t_lineGeometry = new BufferGeometry();\n\t\t\t_lineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 0, 1, 0 ], 3 ) );\n\n\t\t\t_coneGeometry = new CylinderGeometry( 0, 0.5, 1, 5, 1 );\n\t\t\t_coneGeometry.translate( 0, - 0.5, 0 );\n\n\t\t}\n\n\t\tthis.position.copy( origin );\n\n\t\tthis.line = new Line( _lineGeometry, new LineBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.line.matrixAutoUpdate = false;\n\t\tthis.add( this.line );\n\n\t\tthis.cone = new Mesh( _coneGeometry, new MeshBasicMaterial( { color: color, toneMapped: false } ) );\n\t\tthis.cone.matrixAutoUpdate = false;\n\t\tthis.add( this.cone );\n\n\t\tthis.setDirection( dir );\n\t\tthis.setLength( length, headLength, headWidth );\n\n\t}\n\n\tsetDirection( dir ) {\n\n\t\t// dir is assumed to be normalized\n\n\t\tif ( dir.y > 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 0, 0, 0, 1 );\n\n\t\t} else if ( dir.y < - 0.99999 ) {\n\n\t\t\tthis.quaternion.set( 1, 0, 0, 0 );\n\n\t\t} else {\n\n\t\t\t_axis.set( dir.z, 0, - dir.x ).normalize();\n\n\t\t\tconst radians = Math.acos( dir.y );\n\n\t\t\tthis.quaternion.setFromAxisAngle( _axis, radians );\n\n\t\t}\n\n\t}\n\n\tsetLength( length, headLength = length * 0.2, headWidth = headLength * 0.2 ) {\n\n\t\tthis.line.scale.set( 1, Math.max( 0.0001, length - headLength ), 1 ); // see #17458\n\t\tthis.line.updateMatrix();\n\n\t\tthis.cone.scale.set( headWidth, headLength, headWidth );\n\t\tthis.cone.position.y = length;\n\t\tthis.cone.updateMatrix();\n\n\t}\n\n\tsetColor( color ) {\n\n\t\tthis.line.material.color.set( color );\n\t\tthis.cone.material.color.set( color );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tsuper.copy( source, false );\n\n\t\tthis.line.copy( source.line );\n\t\tthis.cone.copy( source.cone );\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.line.geometry.dispose();\n\t\tthis.line.material.dispose();\n\t\tthis.cone.geometry.dispose();\n\t\tthis.cone.material.dispose();\n\n\t}\n\n}\n\nclass AxesHelper extends LineSegments {\n\n\tconstructor( size = 1 ) {\n\n\t\tconst vertices = [\n\t\t\t0, 0, 0,\tsize, 0, 0,\n\t\t\t0, 0, 0,\t0, size, 0,\n\t\t\t0, 0, 0,\t0, 0, size\n\t\t];\n\n\t\tconst colors = [\n\t\t\t1, 0, 0,\t1, 0.6, 0,\n\t\t\t0, 1, 0,\t0.6, 1, 0,\n\t\t\t0, 0, 1,\t0, 0.6, 1\n\t\t];\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( colors, 3 ) );\n\n\t\tconst material = new LineBasicMaterial( { vertexColors: true, toneMapped: false } );\n\n\t\tsuper( geometry, material );\n\n\t\tthis.type = 'AxesHelper';\n\n\t}\n\n\tsetColors( xAxisColor, yAxisColor, zAxisColor ) {\n\n\t\tconst color = new Color();\n\t\tconst array = this.geometry.attributes.color.array;\n\n\t\tcolor.set( xAxisColor );\n\t\tcolor.toArray( array, 0 );\n\t\tcolor.toArray( array, 3 );\n\n\t\tcolor.set( yAxisColor );\n\t\tcolor.toArray( array, 6 );\n\t\tcolor.toArray( array, 9 );\n\n\t\tcolor.set( zAxisColor );\n\t\tcolor.toArray( array, 12 );\n\t\tcolor.toArray( array, 15 );\n\n\t\tthis.geometry.attributes.color.needsUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.geometry.dispose();\n\t\tthis.material.dispose();\n\n\t}\n\n}\n\nclass ShapePath {\n\n\tconstructor() {\n\n\t\tthis.type = 'ShapePath';\n\n\t\tthis.color = new Color();\n\n\t\tthis.subPaths = [];\n\t\tthis.currentPath = null;\n\n\t}\n\n\tmoveTo( x, y ) {\n\n\t\tthis.currentPath = new Path();\n\t\tthis.subPaths.push( this.currentPath );\n\t\tthis.currentPath.moveTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tlineTo( x, y ) {\n\n\t\tthis.currentPath.lineTo( x, y );\n\n\t\treturn this;\n\n\t}\n\n\tquadraticCurveTo( aCPx, aCPy, aX, aY ) {\n\n\t\tthis.currentPath.quadraticCurveTo( aCPx, aCPy, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tbezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {\n\n\t\tthis.currentPath.bezierCurveTo( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY );\n\n\t\treturn this;\n\n\t}\n\n\tsplineThru( pts ) {\n\n\t\tthis.currentPath.splineThru( pts );\n\n\t\treturn this;\n\n\t}\n\n\ttoShapes( isCCW ) {\n\n\t\tfunction toShapesNoHoles( inSubpaths ) {\n\n\t\t\tconst shapes = [];\n\n\t\t\tfor ( let i = 0, l = inSubpaths.length; i < l; i ++ ) {\n\n\t\t\t\tconst tmpPath = inSubpaths[ i ];\n\n\t\t\t\tconst tmpShape = new Shape();\n\t\t\t\ttmpShape.curves = tmpPath.curves;\n\n\t\t\t\tshapes.push( tmpShape );\n\n\t\t\t}\n\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tfunction isPointInsidePolygon( inPt, inPolygon ) {\n\n\t\t\tconst polyLen = inPolygon.length;\n\n\t\t\t// inPt on polygon contour => immediate success    or\n\t\t\t// toggling of inside/outside at every single! intersection point of an edge\n\t\t\t//  with the horizontal line through inPt, left of inPt\n\t\t\t//  not counting lowerY endpoints of edges and whole edges on that line\n\t\t\tlet inside = false;\n\t\t\tfor ( let p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {\n\n\t\t\t\tlet edgeLowPt = inPolygon[ p ];\n\t\t\t\tlet edgeHighPt = inPolygon[ q ];\n\n\t\t\t\tlet edgeDx = edgeHighPt.x - edgeLowPt.x;\n\t\t\t\tlet edgeDy = edgeHighPt.y - edgeLowPt.y;\n\n\t\t\t\tif ( Math.abs( edgeDy ) > Number.EPSILON ) {\n\n\t\t\t\t\t// not parallel\n\t\t\t\t\tif ( edgeDy < 0 ) {\n\n\t\t\t\t\t\tedgeLowPt = inPolygon[ q ]; edgeDx = - edgeDx;\n\t\t\t\t\t\tedgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) \t\tcontinue;\n\n\t\t\t\t\tif ( inPt.y === edgeLowPt.y ) {\n\n\t\t\t\t\t\tif ( inPt.x === edgeLowPt.x )\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\t// continue;\t\t\t\t// no intersection or edgeLowPt => doesn't count !!!\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );\n\t\t\t\t\t\tif ( perpEdge === 0 )\t\t\t\treturn\ttrue;\t\t// inPt is on contour ?\n\t\t\t\t\t\tif ( perpEdge < 0 ) \t\t\t\tcontinue;\n\t\t\t\t\t\tinside = ! inside;\t\t// true intersection left of inPt\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// parallel or collinear\n\t\t\t\t\tif ( inPt.y !== edgeLowPt.y ) \t\tcontinue;\t\t\t// parallel\n\t\t\t\t\t// edge lies on the same horizontal line as inPt\n\t\t\t\t\tif ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||\n\t\t\t\t\t\t ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )\t\treturn\ttrue;\t// inPt: Point on contour !\n\t\t\t\t\t// continue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn\tinside;\n\n\t\t}\n\n\t\tconst isClockWise = ShapeUtils.isClockWise;\n\n\t\tconst subPaths = this.subPaths;\n\t\tif ( subPaths.length === 0 ) return [];\n\n\t\tlet solid, tmpPath, tmpShape;\n\t\tconst shapes = [];\n\n\t\tif ( subPaths.length === 1 ) {\n\n\t\t\ttmpPath = subPaths[ 0 ];\n\t\t\ttmpShape = new Shape();\n\t\t\ttmpShape.curves = tmpPath.curves;\n\t\t\tshapes.push( tmpShape );\n\t\t\treturn shapes;\n\n\t\t}\n\n\t\tlet holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );\n\t\tholesFirst = isCCW ? ! holesFirst : holesFirst;\n\n\t\t// console.log(\"Holes first\", holesFirst);\n\n\t\tconst betterShapeHoles = [];\n\t\tconst newShapes = [];\n\t\tlet newShapeHoles = [];\n\t\tlet mainIdx = 0;\n\t\tlet tmpPoints;\n\n\t\tnewShapes[ mainIdx ] = undefined;\n\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\tfor ( let i = 0, l = subPaths.length; i < l; i ++ ) {\n\n\t\t\ttmpPath = subPaths[ i ];\n\t\t\ttmpPoints = tmpPath.getPoints();\n\t\t\tsolid = isClockWise( tmpPoints );\n\t\t\tsolid = isCCW ? ! solid : solid;\n\n\t\t\tif ( solid ) {\n\n\t\t\t\tif ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )\tmainIdx ++;\n\n\t\t\t\tnewShapes[ mainIdx ] = { s: new Shape(), p: tmpPoints };\n\t\t\t\tnewShapes[ mainIdx ].s.curves = tmpPath.curves;\n\n\t\t\t\tif ( holesFirst )\tmainIdx ++;\n\t\t\t\tnewShapeHoles[ mainIdx ] = [];\n\n\t\t\t\t//console.log('cw', i);\n\n\t\t\t} else {\n\n\t\t\t\tnewShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );\n\n\t\t\t\t//console.log('ccw', i);\n\n\t\t\t}\n\n\t\t}\n\n\t\t// only Holes? -> probably all Shapes with wrong orientation\n\t\tif ( ! newShapes[ 0 ] )\treturn\ttoShapesNoHoles( subPaths );\n\n\n\t\tif ( newShapes.length > 1 ) {\n\n\t\t\tlet ambiguous = false;\n\t\t\tlet toChange = 0;\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tbetterShapeHoles[ sIdx ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {\n\n\t\t\t\tconst sho = newShapeHoles[ sIdx ];\n\n\t\t\t\tfor ( let hIdx = 0; hIdx < sho.length; hIdx ++ ) {\n\n\t\t\t\t\tconst ho = sho[ hIdx ];\n\t\t\t\t\tlet hole_unassigned = true;\n\n\t\t\t\t\tfor ( let s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {\n\n\t\t\t\t\t\tif ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {\n\n\t\t\t\t\t\t\tif ( sIdx !== s2Idx )\ttoChange ++;\n\n\t\t\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\t\t\thole_unassigned = false;\n\t\t\t\t\t\t\t\tbetterShapeHoles[ s2Idx ].push( ho );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tambiguous = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( hole_unassigned ) {\n\n\t\t\t\t\t\tbetterShapeHoles[ sIdx ].push( ho );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( toChange > 0 && ambiguous === false ) {\n\n\t\t\t\tnewShapeHoles = betterShapeHoles;\n\n\t\t\t}\n\n\t\t}\n\n\t\tlet tmpHoles;\n\n\t\tfor ( let i = 0, il = newShapes.length; i < il; i ++ ) {\n\n\t\t\ttmpShape = newShapes[ i ].s;\n\t\t\tshapes.push( tmpShape );\n\t\t\ttmpHoles = newShapeHoles[ i ];\n\n\t\t\tfor ( let j = 0, jl = tmpHoles.length; j < jl; j ++ ) {\n\n\t\t\t\ttmpShape.holes.push( tmpHoles[ j ].h );\n\n\t\t\t}\n\n\t\t}\n\n\t\t//console.log(\"shape\", shapes);\n\n\t\treturn shapes;\n\n\t}\n\n}\n\nif ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {\n\n\t__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {\n\t\trevision: REVISION,\n\t} } ) );\n\n}\n\nif ( typeof window !== 'undefined' ) {\n\n\tif ( window.__THREE__ ) {\n\n\t\tconsole.warn( 'WARNING: Multiple instances of Three.js being imported.' );\n\n\t} else {\n\n\t\twindow.__THREE__ = REVISION;\n\n\t}\n\n}\n\nexport { ACESFilmicToneMapping, AddEquation, AddOperation, AdditiveAnimationBlendMode, AdditiveBlending, AlphaFormat, AlwaysCompare, AlwaysDepth, AlwaysStencilFunc, AmbientLight, AnimationAction, AnimationClip, AnimationLoader, AnimationMixer, AnimationObjectGroup, AnimationUtils, ArcCurve, ArrayCamera, ArrowHelper, AttachedBindMode, Audio, AudioAnalyser, AudioContext, AudioListener, AudioLoader, AxesHelper, BackSide, BasicDepthPacking, BasicShadowMap, Bone, BooleanKeyframeTrack, Box2, Box3, Box3Helper, BoxGeometry, BoxHelper, BufferAttribute, BufferGeometry, BufferGeometryLoader, ByteType, Cache, Camera, CameraHelper, CanvasTexture, CapsuleGeometry, CatmullRomCurve3, CineonToneMapping, CircleGeometry, ClampToEdgeWrapping, Clock, Color, ColorKeyframeTrack, ColorManagement, CompressedArrayTexture, CompressedCubeTexture, CompressedTexture, CompressedTextureLoader, ConeGeometry, ConstantAlphaFactor, ConstantColorFactor, CubeCamera, CubeReflectionMapping, CubeRefractionMapping, CubeTexture, CubeTextureLoader, CubeUVReflectionMapping, CubicBezierCurve, CubicBezierCurve3, CubicInterpolant, CullFaceBack, CullFaceFront, CullFaceFrontBack, CullFaceNone, Curve, CurvePath, CustomBlending, CustomToneMapping, CylinderGeometry, Cylindrical, Data3DTexture, DataArrayTexture, DataTexture, DataTextureLoader, DataUtils, DecrementStencilOp, DecrementWrapStencilOp, DefaultLoadingManager, DepthFormat, DepthStencilFormat, DepthTexture, DetachedBindMode, DirectionalLight, DirectionalLightHelper, DiscreteInterpolant, DisplayP3ColorSpace, DodecahedronGeometry, DoubleSide, DstAlphaFactor, DstColorFactor, DynamicCopyUsage, DynamicDrawUsage, DynamicReadUsage, EdgesGeometry, EllipseCurve, EqualCompare, EqualDepth, EqualStencilFunc, EquirectangularReflectionMapping, EquirectangularRefractionMapping, Euler, EventDispatcher, ExtrudeGeometry, FileLoader, Float16BufferAttribute, Float32BufferAttribute, Float64BufferAttribute, FloatType, Fog, FogExp2, FramebufferTexture, FrontSide, Frustum, GLBufferAttribute, GLSL1, GLSL3, GreaterCompare, GreaterDepth, GreaterEqualCompare, GreaterEqualDepth, GreaterEqualStencilFunc, GreaterStencilFunc, GridHelper, Group, HalfFloatType, HemisphereLight, HemisphereLightHelper, IcosahedronGeometry, ImageBitmapLoader, ImageLoader, ImageUtils, IncrementStencilOp, IncrementWrapStencilOp, InstancedBufferAttribute, InstancedBufferGeometry, InstancedInterleavedBuffer, InstancedMesh, Int16BufferAttribute, Int32BufferAttribute, Int8BufferAttribute, IntType, InterleavedBuffer, InterleavedBufferAttribute, Interpolant, InterpolateDiscrete, InterpolateLinear, InterpolateSmooth, InvertStencilOp, KeepStencilOp, KeyframeTrack, LOD, LatheGeometry, Layers, LessCompare, LessDepth, LessEqualCompare, LessEqualDepth, LessEqualStencilFunc, LessStencilFunc, Light, LightProbe, Line, Line3, LineBasicMaterial, LineCurve, LineCurve3, LineDashedMaterial, LineLoop, LineSegments, LinearDisplayP3ColorSpace, LinearEncoding, LinearFilter, LinearInterpolant, LinearMipMapLinearFilter, LinearMipMapNearestFilter, LinearMipmapLinearFilter, LinearMipmapNearestFilter, LinearSRGBColorSpace, LinearToneMapping, LinearTransfer, Loader, LoaderUtils, LoadingManager, LoopOnce, LoopPingPong, LoopRepeat, LuminanceAlphaFormat, LuminanceFormat, MOUSE, Material, MaterialLoader, MathUtils, Matrix3, Matrix4, MaxEquation, Mesh, MeshBasicMaterial, MeshDepthMaterial, MeshDistanceMaterial, MeshLambertMaterial, MeshMatcapMaterial, MeshNormalMaterial, MeshPhongMaterial, MeshPhysicalMaterial, MeshStandardMaterial, MeshToonMaterial, MinEquation, MirroredRepeatWrapping, MixOperation, MultiplyBlending, MultiplyOperation, NearestFilter, NearestMipMapLinearFilter, NearestMipMapNearestFilter, NearestMipmapLinearFilter, NearestMipmapNearestFilter, NeverCompare, NeverDepth, NeverStencilFunc, NoBlending, NoColorSpace, NoToneMapping, NormalAnimationBlendMode, NormalBlending, NotEqualCompare, NotEqualDepth, NotEqualStencilFunc, NumberKeyframeTrack, Object3D, ObjectLoader, ObjectSpaceNormalMap, OctahedronGeometry, OneFactor, OneMinusConstantAlphaFactor, OneMinusConstantColorFactor, OneMinusDstAlphaFactor, OneMinusDstColorFactor, OneMinusSrcAlphaFactor, OneMinusSrcColorFactor, OrthographicCamera, P3Primaries, PCFShadowMap, PCFSoftShadowMap, PMREMGenerator, Path, PerspectiveCamera, Plane, PlaneGeometry, PlaneHelper, PointLight, PointLightHelper, Points, PointsMaterial, PolarGridHelper, PolyhedronGeometry, PositionalAudio, PropertyBinding, PropertyMixer, QuadraticBezierCurve, QuadraticBezierCurve3, Quaternion, QuaternionKeyframeTrack, QuaternionLinearInterpolant, RED_GREEN_RGTC2_Format, RED_RGTC1_Format, REVISION, RGBADepthPacking, RGBAFormat, RGBAIntegerFormat, RGBA_ASTC_10x10_Format, RGBA_ASTC_10x5_Format, RGBA_ASTC_10x6_Format, RGBA_ASTC_10x8_Format, RGBA_ASTC_12x10_Format, RGBA_ASTC_12x12_Format, RGBA_ASTC_4x4_Format, RGBA_ASTC_5x4_Format, RGBA_ASTC_5x5_Format, RGBA_ASTC_6x5_Format, RGBA_ASTC_6x6_Format, RGBA_ASTC_8x5_Format, RGBA_ASTC_8x6_Format, RGBA_ASTC_8x8_Format, RGBA_BPTC_Format, RGBA_ETC2_EAC_Format, RGBA_PVRTC_2BPPV1_Format, RGBA_PVRTC_4BPPV1_Format, RGBA_S3TC_DXT1_Format, RGBA_S3TC_DXT3_Format, RGBA_S3TC_DXT5_Format, RGB_BPTC_SIGNED_Format, RGB_BPTC_UNSIGNED_Format, RGB_ETC1_Format, RGB_ETC2_Format, RGB_PVRTC_2BPPV1_Format, RGB_PVRTC_4BPPV1_Format, RGB_S3TC_DXT1_Format, RGFormat, RGIntegerFormat, RawShaderMaterial, Ray, Raycaster, Rec709Primaries, RectAreaLight, RedFormat, RedIntegerFormat, ReinhardToneMapping, RenderTarget, RepeatWrapping, ReplaceStencilOp, ReverseSubtractEquation, RingGeometry, SIGNED_RED_GREEN_RGTC2_Format, SIGNED_RED_RGTC1_Format, SRGBColorSpace, SRGBTransfer, Scene, ShaderChunk, ShaderLib, ShaderMaterial, ShadowMaterial, Shape, ShapeGeometry, ShapePath, ShapeUtils, ShortType, Skeleton, SkeletonHelper, SkinnedMesh, Source, Sphere, SphereGeometry, Spherical, SphericalHarmonics3, SplineCurve, SpotLight, SpotLightHelper, Sprite, SpriteMaterial, SrcAlphaFactor, SrcAlphaSaturateFactor, SrcColorFactor, StaticCopyUsage, StaticDrawUsage, StaticReadUsage, StereoCamera, StreamCopyUsage, StreamDrawUsage, StreamReadUsage, StringKeyframeTrack, SubtractEquation, SubtractiveBlending, TOUCH, TangentSpaceNormalMap, TetrahedronGeometry, Texture, TextureLoader, TorusGeometry, TorusKnotGeometry, Triangle, TriangleFanDrawMode, TriangleStripDrawMode, TrianglesDrawMode, TubeGeometry, TwoPassDoubleSide, UVMapping, Uint16BufferAttribute, Uint32BufferAttribute, Uint8BufferAttribute, Uint8ClampedBufferAttribute, Uniform, UniformsGroup, UniformsLib, UniformsUtils, UnsignedByteType, UnsignedInt248Type, UnsignedIntType, UnsignedShort4444Type, UnsignedShort5551Type, UnsignedShortType, VSMShadowMap, Vector2, Vector3, Vector4, VectorKeyframeTrack, VideoTexture, WebGL1Renderer, WebGL3DRenderTarget, WebGLArrayRenderTarget, WebGLCoordinateSystem, WebGLCubeRenderTarget, WebGLMultipleRenderTargets, WebGLRenderTarget, WebGLRenderer, WebGLUtils, WebGPUCoordinateSystem, WireframeGeometry, WrapAroundEnding, ZeroCurvatureEnding, ZeroFactor, ZeroSlopeEnding, ZeroStencilOp, _SRGBAFormat, createCanvasElement, sRGBEncoding };\n", "// Split strategy constants\nexport const CENTER = 0;\nexport const AVERAGE = 1;\nexport const SAH = 2;\n\n// Traversal constants\nexport const NOT_INTERSECTED = 0;\nexport const INTERSECTED = 1;\nexport const CONTAINED = 2;\n\n// SAH cost constants\n// TODO: hone these costs more. The relative difference between them should be the\n// difference in measured time to perform a triangle intersection vs traversing\n// bounds.\nexport const TRIANGLE_INTERSECT_COST = 1.25;\nexport const TRAVERSAL_COST = 1;\n\n\n// Build constants\nexport const BYTES_PER_NODE = 6 * 4 + 4 + 4;\nexport const IS_LEAFNODE_FLAG = 0xFFFF;\n\n// EPSILON for computing floating point error during build\n// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\nexport const FLOAT32_EPSILON = Math.pow( 2, - 24 );\n\nexport const SKIP_GENERATION = Symbol( 'SKIP_GENERATION' );\n", "import { BufferAttribute } from 'three';\n\nexport function getVertexCount( geo ) {\n\n\treturn geo.index ? geo.index.count : geo.attributes.position.count;\n\n}\n\nexport function getTriCount( geo ) {\n\n\treturn getVertexCount( geo ) / 3;\n\n}\n\nexport function getIndexArray( vertexCount, BufferConstructor = ArrayBuffer ) {\n\n\tif ( vertexCount > 65535 ) {\n\n\t\treturn new Uint32Array( new BufferConstructor( 4 * vertexCount ) );\n\n\t} else {\n\n\t\treturn new Uint16Array( new BufferConstructor( 2 * vertexCount ) );\n\n\t}\n\n}\n\n// ensures that an index is present on the geometry\nexport function ensureIndex( geo, options ) {\n\n\tif ( ! geo.index ) {\n\n\t\tconst vertexCount = geo.attributes.position.count;\n\t\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\t\tconst index = getIndexArray( vertexCount, BufferConstructor );\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\n\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tindex[ i ] = i;\n\n\t\t}\n\n\t}\n\n}\n\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nexport function getFullGeometryRange( geo ) {\n\n\tconst triCount = getTriCount( geo );\n\tconst drawRange = geo.drawRange;\n\tconst start = drawRange.start / 3;\n\tconst end = ( drawRange.start + drawRange.count ) / 3;\n\n\tconst offset = Math.max( 0, start );\n\tconst count = Math.min( triCount, end ) - offset;\n\treturn [ {\n\t\toffset: Math.floor( offset ),\n\t\tcount: Math.floor( count ),\n\t} ];\n\n}\n\nexport function getRootIndexRanges( geo ) {\n\n\tif ( ! geo.groups || ! geo.groups.length ) {\n\n\t\treturn getFullGeometryRange( geo );\n\n\t}\n\n\tconst ranges = [];\n\tconst rangeBoundaries = new Set();\n\n\tconst drawRange = geo.drawRange;\n\tconst drawRangeStart = drawRange.start / 3;\n\tconst drawRangeEnd = ( drawRange.start + drawRange.count ) / 3;\n\tfor ( const group of geo.groups ) {\n\n\t\tconst groupStart = group.start / 3;\n\t\tconst groupEnd = ( group.start + group.count ) / 3;\n\t\trangeBoundaries.add( Math.max( drawRangeStart, groupStart ) );\n\t\trangeBoundaries.add( Math.min( drawRangeEnd, groupEnd ) );\n\n\t}\n\n\n\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\n\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\n\n\t\tconst start = sortedBoundaries[ i ];\n\t\tconst end = sortedBoundaries[ i + 1 ];\n\n\t\tranges.push( {\n\t\t\toffset: Math.floor( start ),\n\t\t\tcount: Math.floor( end - start ),\n\t\t} );\n\n\t}\n\n\treturn ranges;\n\n}\n\nexport function hasGroupGaps( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\treturn false;\n\n\t}\n\n\tconst vertexCount = getTriCount( geometry );\n\tconst groups = getRootIndexRanges( geometry )\n\t\t.sort( ( a, b ) => a.offset - b.offset );\n\n\tconst finalGroup = groups[ groups.length - 1 ];\n\tfinalGroup.count = Math.min( vertexCount - finalGroup.offset, finalGroup.count );\n\n\tlet total = 0;\n\tgroups.forEach( ( { count } ) => total += count );\n\treturn vertexCount !== total;\n\n}\n", "export function arrayToBox( nodeIndex32, array, target ) {\n\n\ttarget.min.x = array[ nodeIndex32 ];\n\ttarget.min.y = array[ nodeIndex32 + 1 ];\n\ttarget.min.z = array[ nodeIndex32 + 2 ];\n\n\ttarget.max.x = array[ nodeIndex32 + 3 ];\n\ttarget.max.y = array[ nodeIndex32 + 4 ];\n\ttarget.max.z = array[ nodeIndex32 + 5 ];\n\n\treturn target;\n\n}\n\nexport function makeEmptyBounds( target ) {\n\n\ttarget[ 0 ] = target[ 1 ] = target[ 2 ] = Infinity;\n\ttarget[ 3 ] = target[ 4 ] = target[ 5 ] = - Infinity;\n\n}\n\nexport function getLongestEdgeIndex( bounds ) {\n\n\tlet splitDimIdx = - 1;\n\tlet splitDist = - Infinity;\n\n\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\n\t\tif ( dist > splitDist ) {\n\n\t\t\tsplitDist = dist;\n\t\t\tsplitDimIdx = i;\n\n\t\t}\n\n\t}\n\n\treturn splitDimIdx;\n\n}\n\n// copies bounds a into bounds b\nexport function copyBounds( source, target ) {\n\n\ttarget.set( source );\n\n}\n\n// sets bounds target to the union of bounds a and b\nexport function unionBounds( a, b, target ) {\n\n\tlet aVal, bVal;\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst d3 = d + 3;\n\n\t\t// set the minimum values\n\t\taVal = a[ d ];\n\t\tbVal = b[ d ];\n\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\n\n\t\t// set the max values\n\t\taVal = a[ d3 ];\n\t\tbVal = b[ d3 ];\n\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\n\n\t}\n\n}\n\n// expands the given bounds by the provided triangle bounds\nexport function expandByTriangleBounds( startIndex, triangleBounds, bounds ) {\n\n\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\tconst tCenter = triangleBounds[ startIndex + 2 * d ];\n\t\tconst tHalf = triangleBounds[ startIndex + 2 * d + 1 ];\n\n\t\tconst tMin = tCenter - tHalf;\n\t\tconst tMax = tCenter + tHalf;\n\n\t\tif ( tMin < bounds[ d ] ) {\n\n\t\t\tbounds[ d ] = tMin;\n\n\t\t}\n\n\t\tif ( tMax > bounds[ d + 3 ] ) {\n\n\t\t\tbounds[ d + 3 ] = tMax;\n\n\t\t}\n\n\t}\n\n}\n\n// compute bounds surface area\nexport function computeSurfaceArea( bounds ) {\n\n\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\n\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\n\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\n\n\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\n\n}\n", "import { FLOAT32_EPSILON } from '../Constants.js';\nimport { makeEmptyBounds } from '../../utils/ArrayBoxUtilities.js';\nimport { getTriCount } from './geometryUtils.js';\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\nexport function getBounds( triangleBounds, offset, count, target, centroidTarget = null ) {\n\n\tlet minx = Infinity;\n\tlet miny = Infinity;\n\tlet minz = Infinity;\n\tlet maxx = - Infinity;\n\tlet maxy = - Infinity;\n\tlet maxz = - Infinity;\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tconst includeCentroid = centroidTarget !== null;\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tconst hx = triangleBounds[ i + 1 ];\n\t\tconst lx = cx - hx;\n\t\tconst rx = cx + hx;\n\t\tif ( lx < minx ) minx = lx;\n\t\tif ( rx > maxx ) maxx = rx;\n\t\tif ( includeCentroid && cx < cminx ) cminx = cx;\n\t\tif ( includeCentroid && cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tconst hy = triangleBounds[ i + 3 ];\n\t\tconst ly = cy - hy;\n\t\tconst ry = cy + hy;\n\t\tif ( ly < miny ) miny = ly;\n\t\tif ( ry > maxy ) maxy = ry;\n\t\tif ( includeCentroid && cy < cminy ) cminy = cy;\n\t\tif ( includeCentroid && cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tconst hz = triangleBounds[ i + 5 ];\n\t\tconst lz = cz - hz;\n\t\tconst rz = cz + hz;\n\t\tif ( lz < minz ) minz = lz;\n\t\tif ( rz > maxz ) maxz = rz;\n\t\tif ( includeCentroid && cz < cminz ) cminz = cz;\n\t\tif ( includeCentroid && cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\ttarget[ 0 ] = minx;\n\ttarget[ 1 ] = miny;\n\ttarget[ 2 ] = minz;\n\n\ttarget[ 3 ] = maxx;\n\ttarget[ 4 ] = maxy;\n\ttarget[ 5 ] = maxz;\n\n\tif ( includeCentroid ) {\n\n\t\tcentroidTarget[ 0 ] = cminx;\n\t\tcentroidTarget[ 1 ] = cminy;\n\t\tcentroidTarget[ 2 ] = cminz;\n\n\t\tcentroidTarget[ 3 ] = cmaxx;\n\t\tcentroidTarget[ 4 ] = cmaxy;\n\t\tcentroidTarget[ 5 ] = cmaxz;\n\n\t}\n\n}\n\n// A stand alone function for retrieving the centroid bounds.\nexport function getCentroidBounds( triangleBounds, offset, count, centroidTarget ) {\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tif ( cx < cminx ) cminx = cx;\n\t\tif ( cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tif ( cy < cminy ) cminy = cy;\n\t\tif ( cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tif ( cz < cminz ) cminz = cz;\n\t\tif ( cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\tcentroidTarget[ 0 ] = cminx;\n\tcentroidTarget[ 1 ] = cminy;\n\tcentroidTarget[ 2 ] = cminz;\n\n\tcentroidTarget[ 3 ] = cmaxx;\n\tcentroidTarget[ 4 ] = cmaxy;\n\tcentroidTarget[ 5 ] = cmaxz;\n\n}\n\n\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nexport function computeTriangleBounds( geo, fullBounds ) {\n\n\t// clear the bounds to empty\n\tmakeEmptyBounds( fullBounds );\n\n\tconst posAttr = geo.attributes.position;\n\tconst index = geo.index ? geo.index.array : null;\n\tconst triCount = getTriCount( geo );\n\tconst triangleBounds = new Float32Array( triCount * 6 );\n\tconst normalized = posAttr.normalized;\n\n\t// used for non-normalized positions\n\tconst posArr = posAttr.array;\n\n\t// support for an interleaved position buffer\n\tconst bufferOffset = posAttr.offset || 0;\n\tlet stride = 3;\n\tif ( posAttr.isInterleavedBufferAttribute ) {\n\n\t\tstride = posAttr.data.stride;\n\n\t}\n\n\t// used for normalized positions\n\tconst getters = [ 'getX', 'getY', 'getZ' ];\n\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\n\n\t\tconst tri3 = tri * 3;\n\t\tconst tri6 = tri * 6;\n\n\t\tlet ai = tri3 + 0;\n\t\tlet bi = tri3 + 1;\n\t\tlet ci = tri3 + 2;\n\n\t\tif ( index ) {\n\n\t\t\tai = index[ ai ];\n\t\t\tbi = index[ bi ];\n\t\t\tci = index[ ci ];\n\n\t\t}\n\n\t\t// we add the stride and offset here since we access the array directly\n\t\t// below for the sake of performance\n\t\tif ( ! normalized ) {\n\n\t\t\tai = ai * stride + bufferOffset;\n\t\t\tbi = bi * stride + bufferOffset;\n\t\t\tci = ci * stride + bufferOffset;\n\n\t\t}\n\n\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\tlet a, b, c;\n\n\t\t\tif ( normalized ) {\n\n\t\t\t\ta = posAttr[ getters[ el ] ]( ai );\n\t\t\t\tb = posAttr[ getters[ el ] ]( bi );\n\t\t\t\tc = posAttr[ getters[ el ] ]( ci );\n\n\t\t\t} else {\n\n\t\t\t\ta = posArr[ ai + el ];\n\t\t\t\tb = posArr[ bi + el ];\n\t\t\t\tc = posArr[ ci + el ];\n\n\t\t\t}\n\n\t\t\tlet min = a;\n\t\t\tif ( b < min ) min = b;\n\t\t\tif ( c < min ) min = c;\n\n\t\t\tlet max = a;\n\t\t\tif ( b > max ) max = b;\n\t\t\tif ( c > max ) max = c;\n\n\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\n\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\n\t\t\t// worked with.\n\t\t\tconst halfExtents = ( max - min ) / 2;\n\t\t\tconst el2 = el * 2;\n\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\n\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\n\n\t\t\tif ( min < fullBounds[ el ] ) fullBounds[ el ] = min;\n\t\t\tif ( max > fullBounds[ el + 3 ] ) fullBounds[ el + 3 ] = max;\n\n\t\t}\n\n\t}\n\n\treturn triangleBounds;\n\n}\n", "import { getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds, expandByTriangleBounds } from '../../utils/ArrayBoxUtilities.js';\nimport { CENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST } from '../Constants.js';\n\nconst BIN_COUNT = 32;\nconst binsSort = ( a, b ) => a.candidate - b.candidate;\nconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\n\n\treturn {\n\n\t\tcount: 0,\n\t\tbounds: new Float32Array( 6 ),\n\t\trightCacheBounds: new Float32Array( 6 ),\n\t\tleftCacheBounds: new Float32Array( 6 ),\n\t\tcandidate: 0,\n\n\t};\n\n} );\nconst leftBounds = new Float32Array( 6 );\n\nexport function getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\n\n\tlet axis = - 1;\n\tlet pos = 0;\n\n\t// Center\n\tif ( strategy === CENTER ) {\n\n\t\taxis = getLongestEdgeIndex( centroidBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\n\n\t\t}\n\n\t} else if ( strategy === AVERAGE ) {\n\n\t\taxis = getLongestEdgeIndex( nodeBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\n\n\t\t}\n\n\t} else if ( strategy === SAH ) {\n\n\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\n\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\n\n\t\t// iterate over all axes\n\t\tconst cStart = offset * 6;\n\t\tconst cEnd = ( offset + count ) * 6;\n\t\tfor ( let a = 0; a < 3; a ++ ) {\n\n\t\t\tconst axisLeft = centroidBoundingData[ a ];\n\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\n\t\t\tconst axisLength = axisRight - axisLeft;\n\t\t\tconst binWidth = axisLength / BIN_COUNT;\n\n\t\t\t// If we have fewer triangles than we're planning to split then just check all\n\t\t\t// the triangle positions because it will be faster.\n\t\t\tif ( count < BIN_COUNT / 4 ) {\n\n\t\t\t\t// initialize the bin candidates\n\t\t\t\tconst truncatedBins = [ ...sahBins ];\n\t\t\t\ttruncatedBins.length = count;\n\n\t\t\t\t// set the candidates\n\t\t\t\tlet b = 0;\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6, b ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ b ];\n\t\t\t\t\tbin.candidate = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tbin.count = 0;\n\n\t\t\t\t\tconst {\n\t\t\t\t\t\tbounds,\n\t\t\t\t\t\tleftCacheBounds,\n\t\t\t\t\t\trightCacheBounds,\n\t\t\t\t\t} = bin;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\trightCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\trightCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tleftCacheBounds[ d ] = Infinity;\n\t\t\t\t\t\tleftCacheBounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bounds );\n\n\t\t\t\t}\n\n\t\t\t\ttruncatedBins.sort( binsSort );\n\n\t\t\t\t// remove redundant splits\n\t\t\t\tlet splitCount = count;\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\twhile ( bi + 1 < splitCount && truncatedBins[ bi + 1 ].candidate === bin.candidate ) {\n\n\t\t\t\t\t\ttruncatedBins.splice( bi + 1, 1 );\n\t\t\t\t\t\tsplitCount --;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// find the appropriate bin for each triangle and expand the bounds.\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst center = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\t\tif ( center >= bin.candidate ) {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.rightCacheBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.leftCacheBounds );\n\t\t\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// expand all the bounds\n\t\t\t\tfor ( let bi = 0; bi < splitCount; bi ++ ) {\n\n\t\t\t\t\tconst bin = truncatedBins[ bi ];\n\t\t\t\t\tconst leftCount = bin.count;\n\t\t\t\t\tconst rightCount = count - bin.count;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tconst leftBounds = bin.leftCacheBounds;\n\t\t\t\t\tconst rightBounds = bin.rightCacheBounds;\n\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tlet rightProb = 0;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// reset the bins\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tbin.count = 0;\n\t\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\n\n\t\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// iterate over all center positions\n\t\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\n\t\t\t\t\tconst relativeCenter = triCenter - axisLeft;\n\n\t\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\n\t\t\t\t\t// considered to be on the right side of the split\n\t\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\n\t\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\n\n\t\t\t\t\tconst bin = sahBins[ binIndex ];\n\t\t\t\t\tbin.count ++;\n\n\t\t\t\t\texpandByTriangleBounds( c, triangleBounds, bin.bounds );\n\n\t\t\t\t}\n\n\t\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\n\t\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\n\t\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\n\t\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\n\n\t\t\t\t}\n\n\t\t\t\tlet leftCount = 0;\n\t\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\n\n\t\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\t\tconst binCount = bin.count;\n\t\t\t\t\tconst bounds = bin.bounds;\n\n\t\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\n\n\t\t\t\t\t// don't do anything with the bounds if the new bounds have no triangles\n\t\t\t\t\tif ( binCount !== 0 ) {\n\n\t\t\t\t\t\tif ( leftCount === 0 ) {\n\n\t\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tleftCount += binCount;\n\n\t\t\t\t\t// check the cost of this split\n\t\t\t\t\tlet leftProb = 0;\n\t\t\t\t\tlet rightProb = 0;\n\n\t\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rightCount = count - leftCount;\n\t\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\t\taxis = a;\n\t\t\t\t\t\tbestCost = cost;\n\t\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\tconsole.warn( `MeshBVH: Invalid build strategy value ${ strategy } used.` );\n\n\t}\n\n\treturn { axis, pos };\n\n}\n\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage( triangleBounds, offset, count, axis ) {\n\n\tlet avg = 0;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\n\n\t}\n\n\treturn avg / count;\n\n}\n", "export class MeshBVHNode {\n\n\tconstructor() {\n\n\t\t// internal nodes have boundingData, left, right, and splitAxis\n\t\t// leaf nodes have offset and count (referring to primitives in the mesh geometry)\n\n\t}\n\n}\n", "/********************************************************/\n/* This file is generated from \"sortUtils.template.js\". */\n/********************************************************/\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tlet t0 = index[ left * 3 + i ];\n\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\n\t\t\t\tindex[ right * 3 + i ] = t0;\n\n\t\t\t}\n\n\n\t\t\t// swap bounds\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nexport { partition };\n", "/********************************************************/\n/* This file is generated from \"sortUtils.template.js\". */\n/********************************************************/\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition_indirect( indirectBuffer, index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\t\t\tlet t = indirectBuffer[ left ];\n\t\t\tindirectBuffer[ left ] = indirectBuffer[ right ];\n\t\t\tindirectBuffer[ right ] = t;\n\n\n\t\t\t// swap bounds\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tlet tb = triangleBounds[ left * 6 + i ];\n\t\t\t\ttriangleBounds[ left * 6 + i ] = triangleBounds[ right * 6 + i ];\n\t\t\t\ttriangleBounds[ right * 6 + i ] = tb;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nexport { partition_indirect };\n", "import { ensureIndex, getFullGeometryRange, getRootIndexRanges, getTriCount, hasGroupGaps, } from './geometryUtils.js';\nimport { getBounds, getCentroidBounds, computeTriangleBounds } from './computeBoundsUtils.js';\nimport { getOptimalSplit } from './splitUtils.js';\nimport { MeshBVHNode } from '../MeshBVHNode.js';\nimport { BYTES_PER_NODE, IS_LEAFNODE_FLAG } from '../Constants.js';\n\nimport { partition } from './sortUtils.generated.js';\nimport { partition_indirect } from './sortUtils_indirect.generated.js';\n\nfunction generateIndirectBuffer( geometry, useSharedArrayBuffer ) {\n\n\tconst triCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\tconst useUint32 = triCount > 2 ** 16;\n\tconst byteCount = useUint32 ? 4 : 2;\n\n\tconst buffer = useSharedArrayBuffer ? new SharedArrayBuffer( triCount * byteCount ) : new ArrayBuffer( triCount * byteCount );\n\tconst indirectBuffer = useUint32 ? new Uint32Array( buffer ) : new Uint16Array( buffer );\n\tfor ( let i = 0, l = indirectBuffer.length; i < l; i ++ ) {\n\n\t\tindirectBuffer[ i ] = i;\n\n\t}\n\n\treturn indirectBuffer;\n\n}\n\nfunction buildTree( bvh, options ) {\n\n\t// Compute the full bounds of the geometry at the same time as triangle bounds because\n\t// we'll need it for the root bounds in the case with no groups and it should be fast here.\n\t// We can't use the geometry bounding box if it's available because it may be out of date.\n\tconst geometry = bvh.geometry;\n\tconst indexArray = geometry.index ? geometry.index.array : null;\n\tconst maxDepth = options.maxDepth;\n\tconst verbose = options.verbose;\n\tconst maxLeafTris = options.maxLeafTris;\n\tconst strategy = options.strategy;\n\tconst onProgress = options.onProgress;\n\tconst totalTriangles = getTriCount( geometry );\n\tconst indirectBuffer = bvh._indirectBuffer;\n\tlet reachedMaxDepth = false;\n\n\tconst fullBounds = new Float32Array( 6 );\n\tconst cacheCentroidBoundingData = new Float32Array( 6 );\n\tconst triangleBounds = computeTriangleBounds( geometry, fullBounds );\n\tconst partionFunc = options.indirect ? partition_indirect : partition;\n\n\tconst roots = [];\n\tconst ranges = options.indirect ? getFullGeometryRange( geometry ) : getRootIndexRanges( geometry );\n\n\tif ( ranges.length === 1 ) {\n\n\t\tconst range = ranges[ 0 ];\n\t\tconst root = new MeshBVHNode();\n\t\troot.boundingData = fullBounds;\n\t\tgetCentroidBounds( triangleBounds, range.offset, range.count, cacheCentroidBoundingData );\n\n\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\troots.push( root );\n\n\t} else {\n\n\t\tfor ( let range of ranges ) {\n\n\t\t\tconst root = new MeshBVHNode();\n\t\t\troot.boundingData = new Float32Array( 6 );\n\t\t\tgetBounds( triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData );\n\n\t\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\t\troots.push( root );\n\n\t\t}\n\n\t}\n\n\treturn roots;\n\n\tfunction triggerProgress( trianglesProcessed ) {\n\n\t\tif ( onProgress ) {\n\n\t\t\tonProgress( trianglesProcessed / totalTriangles );\n\n\t\t}\n\n\t}\n\n\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\n\n\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\n\n\t\t\treachedMaxDepth = true;\n\t\t\tif ( verbose ) {\n\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\t\tconsole.warn( geometry );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// early out if we've met our capacity\n\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\t// Find where to split the volume\n\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\n\t\tif ( split.axis === - 1 ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\tconst splitOffset = partionFunc( indirectBuffer, indexArray, triangleBounds, offset, count, split );\n\n\t\t// create the two new child nodes\n\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\ttriggerProgress( offset + count );\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\n\t\t} else {\n\n\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t// create the left child and compute its bounding box\n\t\t\tconst left = new MeshBVHNode();\n\t\t\tconst lstart = offset;\n\t\t\tconst lcount = splitOffset - offset;\n\t\t\tnode.left = left;\n\t\t\tleft.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t// repeat for right\n\t\t\tconst right = new MeshBVHNode();\n\t\t\tconst rstart = splitOffset;\n\t\t\tconst rcount = count - lcount;\n\t\t\tnode.right = right;\n\t\t\tright.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n}\n\nexport function buildPackedTree( bvh, options ) {\n\n\tconst geometry = bvh.geometry;\n\tif ( options.indirect ) {\n\n\t\tbvh._indirectBuffer = generateIndirectBuffer( geometry, options.useSharedArrayBuffer );\n\n\t\tif ( hasGroupGaps( geometry ) && ! options.verbose ) {\n\n\t\t\tconsole.warn(\n\t\t\t\t'MeshBVH: Provided geometry contains groups that do not fully span the vertex contents while using the \"indirect\" option. ' +\n\t\t\t\t'BVH may incorrectly report intersections on unrendered portions of the geometry.'\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\tif ( ! bvh._indirectBuffer ) {\n\n\t\tensureIndex( geometry, options );\n\n\t}\n\n\t// boundingData  \t\t\t\t: 6 float32\n\t// right / offset \t\t\t\t: 1 uint32\n\t// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n\tconst roots = buildTree( bvh, options );\n\n\tlet float32Array;\n\tlet uint32Array;\n\tlet uint16Array;\n\tconst packedRoots = [];\n\tconst BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;\n\tfor ( let i = 0; i < roots.length; i ++ ) {\n\n\t\tconst root = roots[ i ];\n\t\tlet nodeCount = countNodes( root );\n\n\t\tconst buffer = new BufferConstructor( BYTES_PER_NODE * nodeCount );\n\t\tfloat32Array = new Float32Array( buffer );\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tpopulateBuffer( 0, root );\n\t\tpackedRoots.push( buffer );\n\n\t}\n\n\tbvh._roots = packedRoots;\n\treturn;\n\n\tfunction countNodes( node ) {\n\n\t\tif ( node.count ) {\n\n\t\t\treturn 1;\n\n\t\t} else {\n\n\t\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\n\n\t\t}\n\n\t}\n\n\tfunction populateBuffer( byteOffset, node ) {\n\n\t\tconst stride4Offset = byteOffset / 4;\n\t\tconst stride2Offset = byteOffset / 2;\n\t\tconst isLeaf = ! ! node.count;\n\t\tconst boundingData = node.boundingData;\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\n\n\t\t}\n\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = node.offset;\n\t\t\tconst count = node.count;\n\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\n\t\t\tuint16Array[ stride2Offset + 14 ] = count;\n\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\n\t\t\treturn byteOffset + BYTES_PER_NODE;\n\n\t\t} else {\n\n\t\t\tconst left = node.left;\n\t\t\tconst right = node.right;\n\t\t\tconst splitAxis = node.splitAxis;\n\n\t\t\tlet nextUnusedPointer;\n\t\t\tnextUnusedPointer = populateBuffer( byteOffset + BYTES_PER_NODE, left );\n\n\t\t\tif ( ( nextUnusedPointer / 4 ) > Math.pow( 2, 32 ) ) {\n\n\t\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\n\n\t\t\t}\n\n\t\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\n\t\t\tnextUnusedPointer = populateBuffer( nextUnusedPointer, right );\n\n\t\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\n\t\t\treturn nextUnusedPointer;\n\n\t\t}\n\n\t}\n\n}\n", "import { Vector3 } from 'three';\n\nexport class SeparatingAxisBounds {\n\n\tconstructor() {\n\n\t\tthis.min = Infinity;\n\t\tthis.max = - Infinity;\n\n\t}\n\n\tsetFromPointsField( points, field ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = p[ field ];\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tsetFromPoints( axis, points ) {\n\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tconst val = axis.dot( p );\n\t\t\tmin = val < min ? val : min;\n\t\t\tmax = val > max ? val : max;\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t}\n\n\tisSeparated( other ) {\n\n\t\treturn this.min > other.max || other.min > this.max;\n\n\t}\n\n}\n\nSeparatingAxisBounds.prototype.setFromBox = ( function () {\n\n\tconst p = new Vector3();\n\treturn function setFromBox( axis, box ) {\n\n\t\tconst boxMin = box.min;\n\t\tconst boxMax = box.max;\n\t\tlet min = Infinity;\n\t\tlet max = - Infinity;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tp.x = boxMin.x * x + boxMax.x * ( 1 - x );\n\t\t\t\t\tp.y = boxMin.y * y + boxMax.y * ( 1 - y );\n\t\t\t\t\tp.z = boxMin.z * z + boxMax.z * ( 1 - z );\n\n\t\t\t\t\tconst val = axis.dot( p );\n\t\t\t\t\tmin = Math.min( val, min );\n\t\t\t\t\tmax = Math.max( val, max );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.min = min;\n\t\tthis.max = max;\n\n\t};\n\n} )();\n\nexport const areIntersecting = ( function () {\n\n\tconst cacheSatBounds = new SeparatingAxisBounds();\n\treturn function areIntersecting( shape1, shape2 ) {\n\n\t\tconst points1 = shape1.points;\n\t\tconst satAxes1 = shape1.satAxes;\n\t\tconst satBounds1 = shape1.satBounds;\n\n\t\tconst points2 = shape2.points;\n\t\tconst satAxes2 = shape2.satAxes;\n\t\tconst satBounds2 = shape2.satBounds;\n\n\t\t// check axes of the first shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds1[ i ];\n\t\t\tconst sa = satAxes1[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points2 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check axes of the second shape\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds2[ i ];\n\t\t\tconst sa = satAxes2[ i ];\n\t\t\tcacheSatBounds.setFromPoints( sa, points1 );\n\t\t\tif ( sb.isSeparated( cacheSatBounds ) ) return false;\n\n\t\t}\n\n\t};\n\n} )();\n", "import { Vector3, Vector2, Plane, Line3 } from 'three';\n\nexport const closestPointLineToLine = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/Line.cpp#L56\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst v02 = new Vector3();\n\treturn function closestPointLineToLine( l1, l2, result ) {\n\n\t\tconst v0 = l1.start;\n\t\tconst v10 = dir1;\n\t\tconst v2 = l2.start;\n\t\tconst v32 = dir2;\n\n\t\tv02.subVectors( v0, v2 );\n\t\tdir1.subVectors( l1.end, l1.start );\n\t\tdir2.subVectors( l2.end, l2.start );\n\n\t\t// float d0232 = v02.Dot(v32);\n\t\tconst d0232 = v02.dot( v32 );\n\n\t\t// float d3210 = v32.Dot(v10);\n\t\tconst d3210 = v32.dot( v10 );\n\n\t\t// float d3232 = v32.Dot(v32);\n\t\tconst d3232 = v32.dot( v32 );\n\n\t\t// float d0210 = v02.Dot(v10);\n\t\tconst d0210 = v02.dot( v10 );\n\n\t\t// float d1010 = v10.Dot(v10);\n\t\tconst d1010 = v10.dot( v10 );\n\n\t\t// float denom = d1010*d3232 - d3210*d3210;\n\t\tconst denom = d1010 * d3232 - d3210 * d3210;\n\n\t\tlet d, d2;\n\t\tif ( denom !== 0 ) {\n\n\t\t\td = ( d0232 * d3210 - d0210 * d3232 ) / denom;\n\n\t\t} else {\n\n\t\t\td = 0;\n\n\t\t}\n\n\t\td2 = ( d0232 + d * d3210 ) / d3232;\n\n\t\tresult.x = d;\n\t\tresult.y = d2;\n\n\t};\n\n} )();\n\nexport const closestPointsSegmentToSegment = ( function () {\n\n\t// https://github.com/juj/MathGeoLib/blob/master/src/Geometry/LineSegment.cpp#L187\n\tconst paramResult = new Vector2();\n\tconst temp1 = new Vector3();\n\tconst temp2 = new Vector3();\n\treturn function closestPointsSegmentToSegment( l1, l2, target1, target2 ) {\n\n\t\tclosestPointLineToLine( l1, l2, paramResult );\n\n\t\tlet d = paramResult.x;\n\t\tlet d2 = paramResult.y;\n\t\tif ( d >= 0 && d <= 1 && d2 >= 0 && d2 <= 1 ) {\n\n\t\t\tl1.at( d, target1 );\n\t\t\tl2.at( d2, target2 );\n\n\t\t\treturn;\n\n\t\t} else if ( d >= 0 && d <= 1 ) {\n\n\t\t\t// Only d2 is out of bounds.\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tl2.at( 0, target2 );\n\n\t\t\t} else {\n\n\t\t\t\tl2.at( 1, target2 );\n\n\t\t\t}\n\n\t\t\tl1.closestPointToPoint( target2, true, target1 );\n\t\t\treturn;\n\n\t\t} else if ( d2 >= 0 && d2 <= 1 ) {\n\n\t\t\t// Only d is out of bounds.\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tl1.at( 0, target1 );\n\n\t\t\t} else {\n\n\t\t\t\tl1.at( 1, target1 );\n\n\t\t\t}\n\n\t\t\tl2.closestPointToPoint( target1, true, target2 );\n\t\t\treturn;\n\n\t\t} else {\n\n\t\t\t// Both u and u2 are out of bounds.\n\t\t\tlet p;\n\t\t\tif ( d < 0 ) {\n\n\t\t\t\tp = l1.start;\n\n\t\t\t} else {\n\n\t\t\t\tp = l1.end;\n\n\t\t\t}\n\n\t\t\tlet p2;\n\t\t\tif ( d2 < 0 ) {\n\n\t\t\t\tp2 = l2.start;\n\n\t\t\t} else {\n\n\t\t\t\tp2 = l2.end;\n\n\t\t\t}\n\n\t\t\tconst closestPoint = temp1;\n\t\t\tconst closestPoint2 = temp2;\n\t\t\tl1.closestPointToPoint( p2, true, temp1 );\n\t\t\tl2.closestPointToPoint( p, true, temp2 );\n\n\t\t\tif ( closestPoint.distanceToSquared( p2 ) <= closestPoint2.distanceToSquared( p ) ) {\n\n\t\t\t\ttarget1.copy( closestPoint );\n\t\t\t\ttarget2.copy( p2 );\n\t\t\t\treturn;\n\n\t\t\t} else {\n\n\t\t\t\ttarget1.copy( p );\n\t\t\t\ttarget2.copy( closestPoint2 );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n} )();\n\n\nexport const sphereIntersectTriangle = ( function () {\n\n\t// https://stackoverflow.com/questions/34043955/detect-collision-between-sphere-and-triangle-in-three-js\n\tconst closestPointTemp = new Vector3();\n\tconst projectedPointTemp = new Vector3();\n\tconst planeTemp = new Plane();\n\tconst lineTemp = new Line3();\n\treturn function sphereIntersectTriangle( sphere, triangle ) {\n\n\t\tconst { radius, center } = sphere;\n\t\tconst { a, b, c } = triangle;\n\n\t\t// phase 1\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = b;\n\t\tconst closestPoint1 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint1.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = a;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint2 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint2.distanceTo( center ) <= radius ) return true;\n\n\t\tlineTemp.start = b;\n\t\tlineTemp.end = c;\n\t\tconst closestPoint3 = lineTemp.closestPointToPoint( center, true, closestPointTemp );\n\t\tif ( closestPoint3.distanceTo( center ) <= radius ) return true;\n\n\t\t// phase 2\n\t\tconst plane = triangle.getPlane( planeTemp );\n\t\tconst dp = Math.abs( plane.distanceToPoint( center ) );\n\t\tif ( dp <= radius ) {\n\n\t\t\tconst pp = plane.projectPoint( center, projectedPointTemp );\n\t\t\tconst cp = triangle.containsPoint( pp );\n\t\t\tif ( cp ) return true;\n\n\t\t}\n\n\t\treturn false;\n\n\t};\n\n} )();\n", "import { Triangle, Vector3, Line3, Sphere, Plane } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { closestPointsSegmentToSegment, sphereIntersectTriangle } from './MathUtilities.js';\n\nconst ZERO_EPSILON = 1e-15;\nfunction isNearZero( value ) {\n\n\treturn Math.abs( value ) < ZERO_EPSILON;\n\n}\n\nexport class ExtendedTriangle extends Triangle {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tthis.isExtendedTriangle = true;\n\t\tthis.satAxes = new Array( 4 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 4 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.points = [ this.a, this.b, this.c ];\n\t\tthis.sphere = new Sphere();\n\t\tthis.plane = new Plane();\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn sphereIntersectTriangle( sphere, this );\n\n\t}\n\n\tupdate() {\n\n\t\tconst a = this.a;\n\t\tconst b = this.b;\n\t\tconst c = this.c;\n\t\tconst points = this.points;\n\n\t\tconst satAxes = this.satAxes;\n\t\tconst satBounds = this.satBounds;\n\n\t\tconst axis0 = satAxes[ 0 ];\n\t\tconst sab0 = satBounds[ 0 ];\n\t\tthis.getNormal( axis0 );\n\t\tsab0.setFromPoints( axis0, points );\n\n\t\tconst axis1 = satAxes[ 1 ];\n\t\tconst sab1 = satBounds[ 1 ];\n\t\taxis1.subVectors( a, b );\n\t\tsab1.setFromPoints( axis1, points );\n\n\t\tconst axis2 = satAxes[ 2 ];\n\t\tconst sab2 = satBounds[ 2 ];\n\t\taxis2.subVectors( b, c );\n\t\tsab2.setFromPoints( axis2, points );\n\n\t\tconst axis3 = satAxes[ 3 ];\n\t\tconst sab3 = satBounds[ 3 ];\n\t\taxis3.subVectors( c, a );\n\t\tsab3.setFromPoints( axis3, points );\n\n\t\tthis.sphere.setFromPoints( this.points );\n\t\tthis.plane.setFromNormalAndCoplanarPoint( axis0, a );\n\t\tthis.needsUpdate = false;\n\n\t}\n\n}\n\nExtendedTriangle.prototype.closestPointToSegment = ( function () {\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\tconst edge = new Line3();\n\n\treturn function distanceToSegment( segment, target1 = null, target2 = null ) {\n\n\t\tconst { start, end } = segment;\n\t\tconst points = this.points;\n\t\tlet distSq;\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check the triangle edges\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst nexti = ( i + 1 ) % 3;\n\t\t\tedge.start.copy( points[ i ] );\n\t\t\tedge.end.copy( points[ nexti ] );\n\n\t\t\tclosestPointsSegmentToSegment( edge, segment, point1, point2 );\n\n\t\t\tdistSq = point1.distanceToSquared( point2 );\n\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check end points\n\t\tthis.closestPointToPoint( start, point1 );\n\t\tdistSq = start.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( start );\n\n\t\t}\n\n\t\tthis.closestPointToPoint( end, point1 );\n\t\tdistSq = end.distanceToSquared( point1 );\n\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\tclosestDistanceSq = distSq;\n\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\tif ( target2 ) target2.copy( end );\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n\nExtendedTriangle.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri2 = new ExtendedTriangle();\n\tconst arr1 = new Array( 3 );\n\tconst arr2 = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\tconst dir = new Vector3();\n\tconst dir1 = new Vector3();\n\tconst dir2 = new Vector3();\n\tconst tempDir = new Vector3();\n\tconst edge = new Line3();\n\tconst edge1 = new Line3();\n\tconst edge2 = new Line3();\n\tconst tempPoint = new Vector3();\n\n\tfunction triIntersectPlane( tri, plane, targetEdge ) {\n\n\t\t// find the edge that intersects the other triangle plane\n\t\tconst points = tri.points;\n\t\tlet count = 0;\n\t\tlet startPointIntersection = - 1;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst { start, end } = edge;\n\t\t\tstart.copy( points[ i ] );\n\t\t\tend.copy( points[ ( i + 1 ) % 3 ] );\n\t\t\tedge.delta( dir );\n\n\t\t\tconst startIntersects = isNearZero( plane.distanceToPoint( start ) );\n\t\t\tif ( isNearZero( plane.normal.dot( dir ) ) && startIntersects ) {\n\n\t\t\t\t// if the edge lies on the plane then take the line\n\t\t\t\ttargetEdge.copy( edge );\n\t\t\t\tcount = 2;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// check if the start point is near the plane because \"intersectLine\" is not robust to that case\n\t\t\tconst doesIntersect = plane.intersectLine( edge, tempPoint );\n\t\t\tif ( ! doesIntersect && startIntersects ) {\n\n\t\t\t\ttempPoint.copy( start );\n\n\t\t\t}\n\n\t\t\t// ignore the end point\n\t\t\tif ( ( doesIntersect || startIntersects ) && ! isNearZero( tempPoint.distanceTo( end ) ) ) {\n\n\t\t\t\tif ( count <= 1 ) {\n\n\t\t\t\t\t// assign to the start or end point and save which index was snapped to\n\t\t\t\t\t// the start point if necessary\n\t\t\t\t\tconst point = count === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\tif ( startIntersects ) {\n\n\t\t\t\t\t\tstartPointIntersection = count;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( count >= 2 ) {\n\n\t\t\t\t\t// if we're here that means that there must have been one point that had\n\t\t\t\t\t// snapped to the start point so replace it here\n\t\t\t\t\tconst point = startPointIntersection === 1 ? targetEdge.start : targetEdge.end;\n\t\t\t\t\tpoint.copy( tempPoint );\n\t\t\t\t\tcount = 2;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tcount ++;\n\t\t\t\tif ( count === 2 && startPointIntersection === - 1 ) {\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn count;\n\n\t}\n\n\t// TODO: If the triangles are coplanar and intersecting the target is nonsensical. It should at least\n\t// be a line contained by both triangles if not a different special case somehow represented in the return result.\n\treturn function intersectsTriangle( other, target = null, suppressLog = false ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! other.isExtendedTriangle ) {\n\n\t\t\tsaTri2.copy( other );\n\t\t\tsaTri2.update();\n\t\t\tother = saTri2;\n\n\t\t} else if ( other.needsUpdate ) {\n\n\t\t\tother.update();\n\n\t\t}\n\n\t\tconst plane1 = this.plane;\n\t\tconst plane2 = other.plane;\n\n\t\tif ( Math.abs( plane1.normal.dot( plane2.normal ) ) > 1.0 - 1e-10 ) {\n\n\t\t\t// perform separating axis intersection test only for coplanar triangles\n\t\t\tconst satBounds1 = this.satBounds;\n\t\t\tconst satAxes1 = this.satAxes;\n\t\t\tarr2[ 0 ] = other.a;\n\t\t\tarr2[ 1 ] = other.b;\n\t\t\tarr2[ 2 ] = other.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds1[ i ];\n\t\t\t\tconst sa = satAxes1[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr2 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\tconst satBounds2 = other.satBounds;\n\t\t\tconst satAxes2 = other.satAxes;\n\t\t\tarr1[ 0 ] = this.a;\n\t\t\tarr1[ 1 ] = this.b;\n\t\t\tarr1[ 2 ] = this.c;\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sb = satBounds2[ i ];\n\t\t\t\tconst sa = satAxes2[ i ];\n\t\t\t\tcachedSatBounds.setFromPoints( sa, arr1 );\n\t\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t\t}\n\n\t\t\t// check crossed axes\n\t\t\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\t\t\tconst sa1 = satAxes1[ i ];\n\t\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\t\tconst sa2 = satAxes2[ i2 ];\n\t\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, arr1 );\n\t\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, arr2 );\n\t\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( target ) {\n\n\t\t\t\t// TODO find two points that intersect on the edges and make that the result\n\t\t\t\tif ( ! suppressLog ) {\n\n\t\t\t\t\tconsole.warn( 'ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.' );\n\n\t\t\t\t}\n\n\t\t\t\ttarget.start.set( 0, 0, 0 );\n\t\t\t\ttarget.end.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t} else {\n\n\t\t\t// find the edge that intersects the other triangle plane\n\t\t\tconst count1 = triIntersectPlane( this, plane2, edge1 );\n\t\t\tif ( count1 === 1 && other.containsPoint( edge1.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.end );\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count1 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find the other triangles edge that intersects this plane\n\t\t\tconst count2 = triIntersectPlane( other, plane1, edge2 );\n\t\t\tif ( count2 === 1 && this.containsPoint( edge2.end ) ) {\n\n\t\t\t\tif ( target ) {\n\n\t\t\t\t\ttarget.start.copy( edge2.end );\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t} else if ( count2 !== 2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// find swap the second edge so both lines are running the same direction\n\t\t\tedge1.delta( dir1 );\n\t\t\tedge2.delta( dir2 );\n\n\t\t\tif ( dir1.dot( dir2 ) < 0 ) {\n\n\t\t\t\tlet tmp = edge2.start;\n\t\t\t\tedge2.start = edge2.end;\n\t\t\t\tedge2.end = tmp;\n\n\t\t\t}\n\n\t\t\t// check if the edges are overlapping\n\t\t\tconst s1 = edge1.start.dot( dir1 );\n\t\t\tconst e1 = edge1.end.dot( dir1 );\n\t\t\tconst s2 = edge2.start.dot( dir1 );\n\t\t\tconst e2 = edge2.end.dot( dir1 );\n\t\t\tconst separated1 = e1 < s2;\n\t\t\tconst separated2 = s1 < e2;\n\n\t\t\tif ( s1 !== e2 && s2 !== e1 && separated1 === separated2 ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\t// assign the target output\n\t\t\tif ( target ) {\n\n\t\t\t\ttempDir.subVectors( edge1.start, edge2.start );\n\t\t\t\tif ( tempDir.dot( dir1 ) > 0 ) {\n\n\t\t\t\t\ttarget.start.copy( edge1.start );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.start.copy( edge2.start );\n\n\t\t\t\t}\n\n\t\t\t\ttempDir.subVectors( edge1.end, edge2.end );\n\t\t\t\tif ( tempDir.dot( dir1 ) < 0 ) {\n\n\t\t\t\t\ttarget.end.copy( edge1.end );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttarget.end.copy( edge2.end );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\n\nExtendedTriangle.prototype.distanceToTriangle = ( function () {\n\n\tconst point = new Vector3();\n\tconst point2 = new Vector3();\n\tconst cornerFields = [ 'a', 'b', 'c' ];\n\tconst line1 = new Line3();\n\tconst line2 = new Line3();\n\n\treturn function distanceToTriangle( other, target1 = null, target2 = null ) {\n\n\t\tconst lineTarget = target1 || target2 ? line1 : null;\n\t\tif ( this.intersectsTriangle( other, lineTarget ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tif ( target1 ) lineTarget.getCenter( target1 );\n\t\t\t\tif ( target2 ) lineTarget.getCenter( target2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check all point distances\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tlet dist;\n\t\t\tconst field = cornerFields[ i ];\n\t\t\tconst otherVec = other[ field ];\n\t\t\tthis.closestPointToPoint( otherVec, point );\n\n\t\t\tdist = otherVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\tif ( target2 ) target2.copy( otherVec );\n\n\t\t\t}\n\n\n\t\t\tconst thisVec = this[ field ];\n\t\t\tother.closestPointToPoint( thisVec, point );\n\n\t\t\tdist = thisVec.distanceToSquared( point );\n\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( thisVec );\n\t\t\t\tif ( target2 ) target2.copy( point );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst f11 = cornerFields[ i ];\n\t\t\tconst f12 = cornerFields[ ( i + 1 ) % 3 ];\n\t\t\tline1.set( this[ f11 ], this[ f12 ] );\n\t\t\tfor ( let i2 = 0; i2 < 3; i2 ++ ) {\n\n\t\t\t\tconst f21 = cornerFields[ i2 ];\n\t\t\t\tconst f22 = cornerFields[ ( i2 + 1 ) % 3 ];\n\t\t\t\tline2.set( other[ f21 ], other[ f22 ] );\n\n\t\t\t\tclosestPointsSegmentToSegment( line1, line2, point, point2 );\n\n\t\t\t\tconst dist = point.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n", "import { Vector3, Matrix4, Line3 } from 'three';\nimport { SeparatingAxisBounds } from './SeparatingAxisBounds.js';\nimport { ExtendedTriangle } from './ExtendedTriangle.js';\nimport { closestPointsSegmentToSegment } from './MathUtilities.js';\n\nexport class OrientedBox {\n\n\tconstructor( min, max, matrix ) {\n\n\t\tthis.isOrientedBox = true;\n\t\tthis.min = new Vector3();\n\t\tthis.max = new Vector3();\n\t\tthis.matrix = new Matrix4();\n\t\tthis.invMatrix = new Matrix4();\n\t\tthis.points = new Array( 8 ).fill().map( () => new Vector3() );\n\t\tthis.satAxes = new Array( 3 ).fill().map( () => new Vector3() );\n\t\tthis.satBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.alignedSatBounds = new Array( 3 ).fill().map( () => new SeparatingAxisBounds() );\n\t\tthis.needsUpdate = false;\n\n\t\tif ( min ) this.min.copy( min );\n\t\tif ( max ) this.max.copy( max );\n\t\tif ( matrix ) this.matrix.copy( matrix );\n\n\t}\n\n\tset( min, max, matrix ) {\n\n\t\tthis.min.copy( min );\n\t\tthis.max.copy( max );\n\t\tthis.matrix.copy( matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n\tcopy( other ) {\n\n\t\tthis.min.copy( other.min );\n\t\tthis.max.copy( other.max );\n\t\tthis.matrix.copy( other.matrix );\n\t\tthis.needsUpdate = true;\n\n\t}\n\n}\n\nOrientedBox.prototype.update = ( function () {\n\n\treturn function update() {\n\n\t\tconst matrix = this.matrix;\n\t\tconst min = this.min;\n\t\tconst max = this.max;\n\n\t\tconst points = this.points;\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tconst i = ( ( 1 << 0 ) * x ) | ( ( 1 << 1 ) * y ) | ( ( 1 << 2 ) * z );\n\t\t\t\t\tconst v = points[ i ];\n\t\t\t\t\tv.x = x ? max.x : min.x;\n\t\t\t\t\tv.y = y ? max.y : min.y;\n\t\t\t\t\tv.z = z ? max.z : min.z;\n\n\t\t\t\t\tv.applyMatrix4( matrix );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst minVec = points[ 0 ];\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst index = 1 << i;\n\t\t\tconst pi = points[ index ];\n\n\t\t\taxis.subVectors( minVec, pi );\n\t\t\tsb.setFromPoints( axis, points );\n\n\t\t}\n\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\t\talignedSatBounds[ 0 ].setFromPointsField( points, 'x' );\n\t\talignedSatBounds[ 1 ].setFromPointsField( points, 'y' );\n\t\talignedSatBounds[ 2 ].setFromPointsField( points, 'z' );\n\n\t\tthis.invMatrix.copy( this.matrix ).invert();\n\t\tthis.needsUpdate = false;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsBox = ( function () {\n\n\tconst aabbBounds = new SeparatingAxisBounds();\n\treturn function intersectsBox( box ) {\n\n\t\t// TODO: should this be doing SAT against the AABB?\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\t\tconst alignedSatBounds = this.alignedSatBounds;\n\n\t\taabbBounds.min = min.x;\n\t\taabbBounds.max = max.x;\n\t\tif ( alignedSatBounds[ 0 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.y;\n\t\taabbBounds.max = max.y;\n\t\tif ( alignedSatBounds[ 1 ].isSeparated( aabbBounds ) ) return false;\n\n\t\taabbBounds.min = min.z;\n\t\taabbBounds.max = max.z;\n\t\tif ( alignedSatBounds[ 2 ].isSeparated( aabbBounds ) ) return false;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst axis = satAxes[ i ];\n\t\t\tconst sb = satBounds[ i ];\n\t\t\taabbBounds.setFromBox( axis, box );\n\t\t\tif ( sb.isSeparated( aabbBounds ) ) return false;\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.intersectsTriangle = ( function () {\n\n\tconst saTri = new ExtendedTriangle();\n\tconst pointsArr = new Array( 3 );\n\tconst cachedSatBounds = new SeparatingAxisBounds();\n\tconst cachedSatBounds2 = new SeparatingAxisBounds();\n\tconst cachedAxis = new Vector3();\n\treturn function intersectsTriangle( triangle ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( ! triangle.isExtendedTriangle ) {\n\n\t\t\tsaTri.copy( triangle );\n\t\t\tsaTri.update();\n\t\t\ttriangle = saTri;\n\n\t\t} else if ( triangle.needsUpdate ) {\n\n\t\t\ttriangle.update();\n\n\t\t}\n\n\t\tconst satBounds = this.satBounds;\n\t\tconst satAxes = this.satAxes;\n\n\t\tpointsArr[ 0 ] = triangle.a;\n\t\tpointsArr[ 1 ] = triangle.b;\n\t\tpointsArr[ 2 ] = triangle.c;\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = satBounds[ i ];\n\t\t\tconst sa = satAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, pointsArr );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\tconst triSatBounds = triangle.satBounds;\n\t\tconst triSatAxes = triangle.satAxes;\n\t\tconst points = this.points;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sb = triSatBounds[ i ];\n\t\t\tconst sa = triSatAxes[ i ];\n\t\t\tcachedSatBounds.setFromPoints( sa, points );\n\t\t\tif ( sb.isSeparated( cachedSatBounds ) ) return false;\n\n\t\t}\n\n\t\t// check crossed axes\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tconst sa1 = satAxes[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 4; i2 ++ ) {\n\n\t\t\t\tconst sa2 = triSatAxes[ i2 ];\n\t\t\t\tcachedAxis.crossVectors( sa1, sa2 );\n\t\t\t\tcachedSatBounds.setFromPoints( cachedAxis, pointsArr );\n\t\t\t\tcachedSatBounds2.setFromPoints( cachedAxis, points );\n\t\t\t\tif ( cachedSatBounds.isSeparated( cachedSatBounds2 ) ) return false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.closestPointToPoint = ( function () {\n\n\treturn function closestPointToPoint( point, target1 ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\ttarget1\n\t\t\t.copy( point )\n\t\t\t.applyMatrix4( this.invMatrix )\n\t\t\t.clamp( this.min, this.max )\n\t\t\t.applyMatrix4( this.matrix );\n\n\t\treturn target1;\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToPoint = ( function () {\n\n\tconst target = new Vector3();\n\treturn function distanceToPoint( point ) {\n\n\t\tthis.closestPointToPoint( point, target );\n\t\treturn point.distanceTo( target );\n\n\t};\n\n} )();\n\nOrientedBox.prototype.distanceToBox = ( function () {\n\n\tconst xyzFields = [ 'x', 'y', 'z' ];\n\tconst segments1 = new Array( 12 ).fill().map( () => new Line3() );\n\tconst segments2 = new Array( 12 ).fill().map( () => new Line3() );\n\n\tconst point1 = new Vector3();\n\tconst point2 = new Vector3();\n\n\t// early out if we find a value below threshold\n\treturn function distanceToBox( box, threshold = 0, target1 = null, target2 = null ) {\n\n\t\tif ( this.needsUpdate ) {\n\n\t\t\tthis.update();\n\n\t\t}\n\n\t\tif ( this.intersectsBox( box ) ) {\n\n\t\t\tif ( target1 || target2 ) {\n\n\t\t\t\tbox.getCenter( point2 );\n\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\tbox.closestPointToPoint( point1, point2 );\n\n\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t}\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t\tconst threshold2 = threshold * threshold;\n\t\tconst min = box.min;\n\t\tconst max = box.max;\n\t\tconst points = this.points;\n\n\n\t\t// iterate over every edge and compare distances\n\t\tlet closestDistanceSq = Infinity;\n\n\t\t// check over all these points\n\t\tfor ( let i = 0; i < 8; i ++ ) {\n\n\t\t\tconst p = points[ i ];\n\t\t\tpoint2.copy( p ).clamp( min, max );\n\n\t\t\tconst dist = p.distanceToSquared( point2 );\n\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\tif ( target1 ) target1.copy( p );\n\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// generate and check all line segment distances\n\t\tlet count = 0;\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tfor ( let i1 = 0; i1 <= 1; i1 ++ ) {\n\n\t\t\t\tfor ( let i2 = 0; i2 <= 1; i2 ++ ) {\n\n\t\t\t\t\tconst nextIndex = ( i + 1 ) % 3;\n\t\t\t\t\tconst nextIndex2 = ( i + 2 ) % 3;\n\n\t\t\t\t\t// get obb line segments\n\t\t\t\t\tconst index = i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst index2 = 1 << i | i1 << nextIndex | i2 << nextIndex2;\n\t\t\t\t\tconst p1 = points[ index ];\n\t\t\t\t\tconst p2 = points[ index2 ];\n\t\t\t\t\tconst line1 = segments1[ count ];\n\t\t\t\t\tline1.set( p1, p2 );\n\n\n\t\t\t\t\t// get aabb line segments\n\t\t\t\t\tconst f1 = xyzFields[ i ];\n\t\t\t\t\tconst f2 = xyzFields[ nextIndex ];\n\t\t\t\t\tconst f3 = xyzFields[ nextIndex2 ];\n\t\t\t\t\tconst line2 = segments2[ count ];\n\t\t\t\t\tconst start = line2.start;\n\t\t\t\t\tconst end = line2.end;\n\n\t\t\t\t\tstart[ f1 ] = min[ f1 ];\n\t\t\t\t\tstart[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tstart[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tend[ f1 ] = max[ f1 ];\n\t\t\t\t\tend[ f2 ] = i1 ? min[ f2 ] : max[ f2 ];\n\t\t\t\t\tend[ f3 ] = i2 ? min[ f3 ] : max[ f2 ];\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// check all the other boxes point\n\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\tpoint2.x = x ? max.x : min.x;\n\t\t\t\t\tpoint2.y = y ? max.y : min.y;\n\t\t\t\t\tpoint2.z = z ? max.z : min.z;\n\n\t\t\t\t\tthis.closestPointToPoint( point2, point1 );\n\t\t\t\t\tconst dist = point2.distanceToSquared( point1 );\n\t\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 12; i ++ ) {\n\n\t\t\tconst l1 = segments1[ i ];\n\t\t\tfor ( let i2 = 0; i2 < 12; i2 ++ ) {\n\n\t\t\t\tconst l2 = segments2[ i2 ];\n\t\t\t\tclosestPointsSegmentToSegment( l1, l2, point1, point2 );\n\t\t\t\tconst dist = point1.distanceToSquared( point2 );\n\t\t\t\tif ( dist < closestDistanceSq ) {\n\n\t\t\t\t\tclosestDistanceSq = dist;\n\t\t\t\t\tif ( target1 ) target1.copy( point1 );\n\t\t\t\t\tif ( target2 ) target2.copy( point2 );\n\n\t\t\t\t\tif ( dist < threshold2 ) return Math.sqrt( dist );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Math.sqrt( closestDistanceSq );\n\n\t};\n\n} )();\n", "export class PrimitivePool {\n\n\tconstructor( getNewPrimitive ) {\n\n\t\tthis._getNewPrimitive = getNewPrimitive;\n\t\tthis._primitives = [];\n\n\t}\n\n\tgetPrimitive() {\n\n\t\tconst primitives = this._primitives;\n\t\tif ( primitives.length === 0 ) {\n\n\t\t\treturn this._getNewPrimitive();\n\n\t\t} else {\n\n\t\t\treturn primitives.pop();\n\n\t\t}\n\n\t}\n\n\treleasePrimitive( primitive ) {\n\n\t\tthis._primitives.push( primitive );\n\n\t}\n\n}\n", "import { ExtendedTriangle } from '../math/ExtendedTriangle.js';\nimport { PrimitivePool } from './PrimitivePool.js';\n\nclass ExtendedTrianglePoolBase extends PrimitivePool {\n\n\tconstructor() {\n\n\t\tsuper( () => new ExtendedTriangle() );\n\n\t}\n\n}\n\nexport const ExtendedTrianglePool = /* @__PURE__ */ new ExtendedTrianglePoolBase();\n", "export function IS_LEAF( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\n\n}\n\nexport function OFFSET( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function COUNT( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 14 ];\n\n}\n\nexport function LEFT_NODE( n32 ) {\n\n\treturn n32 + 8;\n\n}\n\nexport function RIGHT_NODE( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nexport function SPLIT_AXIS( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 7 ];\n\n}\n\nexport function BOUNDING_DATA_INDEX( n32 ) {\n\n\treturn n32;\n\n}\n", "class _BufferStack {\n\n\tconstructor() {\n\n\t\tthis.float32Array = null;\n\t\tthis.uint16Array = null;\n\t\tthis.uint32Array = null;\n\n\t\tconst stack = [];\n\t\tlet prevBuffer = null;\n\t\tthis.setBuffer = buffer => {\n\n\t\t\tif ( prevBuffer ) {\n\n\t\t\t\tstack.push( prevBuffer );\n\n\t\t\t}\n\n\t\t\tprevBuffer = buffer;\n\t\t\tthis.float32Array = new Float32Array( buffer );\n\t\t\tthis.uint16Array = new Uint16Array( buffer );\n\t\t\tthis.uint32Array = new Uint32Array( buffer );\n\n\t\t};\n\n\t\tthis.clearBuffer = () => {\n\n\t\t\tprevBuffer = null;\n\t\t\tthis.float32Array = null;\n\t\t\tthis.uint16Array = null;\n\t\t\tthis.uint32Array = null;\n\n\t\t\tif ( stack.length !== 0 ) {\n\n\t\t\t\tthis.setBuffer( stack.pop() );\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n}\n\nexport const BufferStack = new _BufferStack();\n", "import { Box3 } from 'three';\nimport { CONTAINED } from '../Constants.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../../utils/PrimitivePool.js';\nimport { COUNT, OFFSET, LEFT_NODE, RIGHT_NODE, IS_LEAF, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\nlet _box1, _box2;\nconst boxStack = [];\nconst boxPool = /* @__PURE__ */ new PrimitivePool( () => new Box3() );\n\nexport function shapecast( bvh, root, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset ) {\n\n\t// setup\n\t_box1 = boxPool.getPrimitive();\n\t_box2 = boxPool.getPrimitive();\n\tboxStack.push( _box1, _box2 );\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\n\tconst result = shapecastTraverse( 0, bvh.geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t// cleanup\n\tBufferStack.clearBuffer();\n\tboxPool.releasePrimitive( _box1 );\n\tboxPool.releasePrimitive( _box2 );\n\tboxStack.pop();\n\tboxStack.pop();\n\n\tconst length = boxStack.length;\n\tif ( length > 0 ) {\n\n\t\t_box2 = boxStack[ length - 1 ];\n\t\t_box1 = boxStack[ length - 2 ];\n\n\t}\n\n\treturn result;\n\n}\n\nfunction shapecastTraverse(\n\tnodeIndex32,\n\tgeometry,\n\tintersectsBoundsFunc,\n\tintersectsRangeFunc,\n\tnodeScoreFunc = null,\n\tnodeIndexByteOffset = 0, // offset for unique node identifier\n\tdepth = 0\n) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, _box1 );\n\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box1 );\n\n\t} else {\n\n\t\tconst left = LEFT_NODE( nodeIndex32 );\n\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tlet c1 = left;\n\t\tlet c2 = right;\n\n\t\tlet score1, score2;\n\t\tlet box1, box2;\n\t\tif ( nodeScoreFunc ) {\n\n\t\t\tbox1 = _box1;\n\t\t\tbox2 = _box2;\n\n\t\t\t// bounding data is not offset\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\tscore1 = nodeScoreFunc( box1 );\n\t\t\tscore2 = nodeScoreFunc( box2 );\n\n\t\t\tif ( score2 < score1 ) {\n\n\t\t\t\tc1 = right;\n\t\t\t\tc2 = left;\n\n\t\t\t\tconst temp = score1;\n\t\t\t\tscore1 = score2;\n\t\t\t\tscore2 = temp;\n\n\t\t\t\tbox1 = box2;\n\t\t\t\t// box2 is always set before use below\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Check box 1 intersection\n\t\tif ( ! box1 ) {\n\n\t\t\tbox1 = _box1;\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\n\t\t}\n\n\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\n\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\tlet c1StopTraversal;\n\t\tif ( c1Intersection === CONTAINED ) {\n\n\t\t\tconst offset = getLeftOffset( c1 );\n\t\t\tconst end = getRightEndOffset( c1 );\n\t\t\tconst count = end - offset;\n\n\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1 );\n\n\t\t} else {\n\n\t\t\tc1StopTraversal =\n\t\t\t\tc1Intersection &&\n\t\t\t\tshapecastTraverse(\n\t\t\t\t\tc1,\n\t\t\t\t\tgeometry,\n\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\tdepth + 1\n\t\t\t\t);\n\n\t\t}\n\n\t\tif ( c1StopTraversal ) return true;\n\n\t\t// Check box 2 intersection\n\t\t// cached box2 will have been overwritten by previous traversal\n\t\tbox2 = _box2;\n\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\n\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\tlet c2StopTraversal;\n\t\tif ( c2Intersection === CONTAINED ) {\n\n\t\t\tconst offset = getLeftOffset( c2 );\n\t\t\tconst end = getRightEndOffset( c2 );\n\t\t\tconst count = end - offset;\n\n\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2 );\n\n\t\t} else {\n\n\t\t\tc2StopTraversal =\n\t\t\t\tc2Intersection &&\n\t\t\t\tshapecastTraverse(\n\t\t\t\t\tc2,\n\t\t\t\t\tgeometry,\n\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\tdepth + 1\n\t\t\t\t);\n\n\t\t}\n\n\t\tif ( c2StopTraversal ) return true;\n\n\t\treturn false;\n\n\t\t// Define these inside the function so it has access to the local variables needed\n\t\t// when converting to the buffer equivalents\n\t\tfunction getLeftOffset( nodeIndex32 ) {\n\n\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\treturn OFFSET( nodeIndex32, uint32Array );\n\n\t\t}\n\n\t\tfunction getRightEndOffset( nodeIndex32 ) {\n\n\t\t\tconst { uint16Array, uint32Array } = BufferStack;\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t// adjust offset to point to the right node\n\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\t// return the end offset of the triangle range\n\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\n\n\t\t}\n\n\t}\n\n}\n", "import { Vector3 } from 'three';\n\nconst temp = /* @__PURE__ */ new Vector3();\nconst temp1 = /* @__PURE__ */ new Vector3();\n\nexport function closestPointToPoint(\n\tbvh,\n\tpoint,\n\ttarget = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\t// early out if under minThreshold\n\t// skip checking if over maxThreshold\n\t// set minThreshold = maxThreshold to quickly check if a point is within a threshold\n\t// returns Infinity if no value found\n\tconst minThresholdSq = minThreshold * minThreshold;\n\tconst maxThresholdSq = maxThreshold * maxThreshold;\n\tlet closestDistanceSq = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tbvh.shapecast(\n\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\ttemp.copy( point ).clamp( box.min, box.max );\n\t\t\t\treturn temp.distanceToSquared( point );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\treturn score < closestDistanceSq && score < maxThresholdSq;\n\n\t\t\t},\n\n\t\t\tintersectsTriangle: ( tri, triIndex ) => {\n\n\t\t\t\ttri.closestPointToPoint( point, temp );\n\t\t\t\tconst distSq = point.distanceToSquared( temp );\n\t\t\t\tif ( distSq < closestDistanceSq ) {\n\n\t\t\t\t\ttemp1.copy( temp );\n\t\t\t\t\tclosestDistanceSq = distSq;\n\t\t\t\t\tclosestDistanceTriIndex = triIndex;\n\n\t\t\t\t}\n\n\t\t\t\tif ( distSq < minThresholdSq ) {\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tif ( closestDistanceSq === Infinity ) return null;\n\n\tconst closestDistance = Math.sqrt( closestDistanceSq );\n\n\tif ( ! target.point ) target.point = temp1.clone();\n\telse target.point.copy( temp1 );\n\ttarget.distance = closestDistance,\n\ttarget.faceIndex = closestDistanceTriIndex;\n\n\treturn target;\n\n}\n", "import { Vector3, Vector2, Triangle, DoubleSide, BackSide } from 'three';\n\n// Ripped and modified From THREE.js Mesh raycast\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L115\nconst _vA = /* @__PURE__ */ new Vector3();\nconst _vB = /* @__PURE__ */ new Vector3();\nconst _vC = /* @__PURE__ */ new Vector3();\n\nconst _uvA = /* @__PURE__ */ new Vector2();\nconst _uvB = /* @__PURE__ */ new Vector2();\nconst _uvC = /* @__PURE__ */ new Vector2();\n\nconst _normalA = /* @__PURE__ */ new Vector3();\nconst _normalB = /* @__PURE__ */ new Vector3();\nconst _normalC = /* @__PURE__ */ new Vector3();\n\nconst _intersectionPoint = /* @__PURE__ */ new Vector3();\nfunction checkIntersection( ray, pA, pB, pC, point, side ) {\n\n\tlet intersect;\n\tif ( side === BackSide ) {\n\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\n\n\t} else {\n\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, side !== DoubleSide, point );\n\n\t}\n\n\tif ( intersect === null ) return null;\n\n\tconst distance = ray.origin.distanceTo( point );\n\n\treturn {\n\n\t\tdistance: distance,\n\t\tpoint: point.clone(),\n\n\t};\n\n}\n\nfunction checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side ) {\n\n\t_vA.fromBufferAttribute( position, a );\n\t_vB.fromBufferAttribute( position, b );\n\t_vC.fromBufferAttribute( position, c );\n\n\tconst intersection = checkIntersection( ray, _vA, _vB, _vC, _intersectionPoint, side );\n\n\tif ( intersection ) {\n\n\t\tif ( uv ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv, a );\n\t\t\t_uvB.fromBufferAttribute( uv, b );\n\t\t\t_uvC.fromBufferAttribute( uv, c );\n\n\t\t\tintersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( uv1 ) {\n\n\t\t\t_uvA.fromBufferAttribute( uv1, a );\n\t\t\t_uvB.fromBufferAttribute( uv1, b );\n\t\t\t_uvC.fromBufferAttribute( uv1, c );\n\n\t\t\tintersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _uvA, _uvB, _uvC, new Vector2() );\n\n\t\t}\n\n\t\tif ( normal ) {\n\n\t\t\t_normalA.fromBufferAttribute( normal, a );\n\t\t\t_normalB.fromBufferAttribute( normal, b );\n\t\t\t_normalC.fromBufferAttribute( normal, c );\n\n\t\t\tintersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA, _vB, _vC, _normalA, _normalB, _normalC, new Vector3() );\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\n\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst face = {\n\t\t\ta: a,\n\t\t\tb: b,\n\t\t\tc: c,\n\t\t\tnormal: new Vector3(),\n\t\t\tmaterialIndex: 0\n\t\t};\n\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\n\n\t\tintersection.face = face;\n\t\tintersection.faceIndex = a;\n\n\t}\n\n\treturn intersection;\n\n}\n\n// https://github.com/mrdoob/three.js/blob/0aa87c999fe61e216c1133fba7a95772b503eddf/src/objects/Mesh.js#L258\nfunction intersectTri( geo, side, ray, tri, intersections ) {\n\n\tconst triOffset = tri * 3;\n\tlet a = triOffset + 0;\n\tlet b = triOffset + 1;\n\tlet c = triOffset + 2;\n\n\tconst index = geo.index;\n\tif ( geo.index ) {\n\n\t\ta = index.getX( a );\n\t\tb = index.getX( b );\n\t\tc = index.getX( c );\n\n\t}\n\n\tconst { position, normal, uv, uv1 } = geo.attributes;\n\tconst intersection = checkBufferGeometryIntersection( ray, position, normal, uv, uv1, a, b, c, side );\n\n\tif ( intersection ) {\n\n\t\tintersection.faceIndex = tri;\n\t\tif ( intersections ) intersections.push( intersection );\n\t\treturn intersection;\n\n\t}\n\n\treturn null;\n\n}\n\nexport { intersectTri };\n", "\nimport { Vector2, Vector3, Triangle } from 'three';\n\n// sets the vertices of triangle `tri` with the 3 vertices after i\nexport function setTriangle( tri, i, index, pos ) {\n\n\tconst ta = tri.a;\n\tconst tb = tri.b;\n\tconst tc = tri.c;\n\n\tlet i0 = i;\n\tlet i1 = i + 1;\n\tlet i2 = i + 2;\n\tif ( index ) {\n\n\t\ti0 = index.getX( i0 );\n\t\ti1 = index.getX( i1 );\n\t\ti2 = index.getX( i2 );\n\n\t}\n\n\tta.x = pos.getX( i0 );\n\tta.y = pos.getY( i0 );\n\tta.z = pos.getZ( i0 );\n\n\ttb.x = pos.getX( i1 );\n\ttb.y = pos.getY( i1 );\n\ttb.z = pos.getZ( i1 );\n\n\ttc.x = pos.getX( i2 );\n\ttc.y = pos.getY( i2 );\n\ttc.z = pos.getZ( i2 );\n\n}\n\nconst tempV1 = /* @__PURE__ */ new Vector3();\nconst tempV2 = /* @__PURE__ */ new Vector3();\nconst tempV3 = /* @__PURE__ */ new Vector3();\nconst tempUV1 = /* @__PURE__ */ new Vector2();\nconst tempUV2 = /* @__PURE__ */ new Vector2();\nconst tempUV3 = /* @__PURE__ */ new Vector2();\n\nexport function getTriangleHitPointInfo( point, geometry, triangleIndex, target ) {\n\n\tconst indices = geometry.getIndex().array;\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst uvs = geometry.getAttribute( 'uv' );\n\n\tconst a = indices[ triangleIndex * 3 ];\n\tconst b = indices[ triangleIndex * 3 + 1 ];\n\tconst c = indices[ triangleIndex * 3 + 2 ];\n\n\ttempV1.fromBufferAttribute( positions, a );\n\ttempV2.fromBufferAttribute( positions, b );\n\ttempV3.fromBufferAttribute( positions, c );\n\n\t// find the associated material index\n\tlet materialIndex = 0;\n\tconst groups = geometry.groups;\n\tconst firstVertexIndex = triangleIndex * 3;\n\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\t\tconst { start, count } = group;\n\t\tif ( firstVertexIndex >= start && firstVertexIndex < start + count ) {\n\n\t\t\tmaterialIndex = group.materialIndex;\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t// extract uvs\n\tlet uv = null;\n\tif ( uvs ) {\n\n\t\ttempUV1.fromBufferAttribute( uvs, a );\n\t\ttempUV2.fromBufferAttribute( uvs, b );\n\t\ttempUV3.fromBufferAttribute( uvs, c );\n\n\t\tif ( target && target.uv ) uv = target.uv;\n\t\telse uv = new Vector2();\n\n\t\tTriangle.getInterpolation( point, tempV1, tempV2, tempV3, tempUV1, tempUV2, tempUV3, uv );\n\n\t}\n\n\t// adjust the provided target or create a new one\n\tif ( target ) {\n\n\t\tif ( ! target.face ) target.face = { };\n\t\ttarget.face.a = a;\n\t\ttarget.face.b = b;\n\t\ttarget.face.c = c;\n\t\ttarget.face.materialIndex = materialIndex;\n\t\tif ( ! target.face.normal ) target.face.normal = new Vector3();\n\t\tTriangle.getNormal( tempV1, tempV2, tempV3, target.face.normal );\n\n\t\tif ( uv ) target.uv = uv;\n\n\t\treturn target;\n\n\t} else {\n\n\t\treturn {\n\t\t\tface: {\n\t\t\t\ta: a,\n\t\t\t\tb: b,\n\t\t\t\tc: c,\n\t\t\t\tmaterialIndex: materialIndex,\n\t\t\t\tnormal: Triangle.getNormal( tempV1, tempV2, tempV3, new Vector3() )\n\t\t\t},\n\t\t\tuv: uv\n\t\t};\n\n\t}\n\n}\n", "import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris( bvh, side, ray, offset, count, intersections ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\n\t\tintersectTri( geometry, side, ray, i, intersections );\n\n\n\t}\n\n}\n\nfunction intersectClosestTri( bvh, side, ray, offset, count ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet intersection;\n\n\t\tintersection = intersectTri( geometry, side, ray, i );\n\n\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\nfunction iterateOverTriangles(\n\toffset,\n\tcount,\n\tbvh,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst { geometry } = bvh;\n\tconst { index } = geometry;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tlet tri;\n\n\t\ttri = i;\n\n\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nexport { intersectClosestTri, intersectTris, iterateOverTriangles };\n", "import { IS_LEAFNODE_FLAG } from '../Constants.js';\n\n/****************************************************/\n/* This file is generated from \"refit.template.js\". */\n/****************************************************/\n\nfunction refit( bvh, nodeIndices = null ) {\n\n\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\tnodeIndices = new Set( nodeIndices );\n\n\t}\n\n\tconst geometry = bvh.geometry;\n\tconst indexArr = geometry.index ? geometry.index.array : null;\n\tconst posAttr = geometry.attributes.position;\n\n\tlet buffer, uint32Array, uint16Array, float32Array;\n\tlet byteOffset = 0;\n\tconst roots = bvh._roots;\n\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\tbuffer = roots[ i ];\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t_traverse( 0, byteOffset );\n\t\tbyteOffset += buffer.byteLength;\n\n\t}\n\n\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\tconst node16Index = node32Index * 2;\n\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\tlet minx = Infinity;\n\t\t\tlet miny = Infinity;\n\t\t\tlet minz = Infinity;\n\t\t\tlet maxx = - Infinity;\n\t\t\tlet maxy = - Infinity;\n\t\t\tlet maxz = - Infinity;\n\n\n\t\t\tfor ( let i = 3 * offset, l = 3 * ( offset + count ); i < l; i ++ ) {\n\n\t\t\t\tlet index = indexArr[ i ];\n\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\tif ( z > maxz ) maxz = z;\n\n\t\t\t}\n\n\n\t\t\tif (\n\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t) {\n\n\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = node32Index + 8;\n\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\tconst offsetRight = right + byteOffset;\n\t\t\tlet forceChildren = force;\n\t\t\tlet includesLeft = false;\n\t\t\tlet includesRight = false;\n\n\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tincludesLeft = true;\n\t\t\t\tincludesRight = true;\n\n\t\t\t}\n\n\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\tlet leftChange = false;\n\t\t\tif ( traverseLeft ) {\n\n\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tlet rightChange = false;\n\t\t\tif ( traverseRight ) {\n\n\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tconst didChange = leftChange || rightChange;\n\t\t\tif ( didChange ) {\n\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn didChange;\n\n\t\t}\n\n\t}\n\n}\n\nexport { refit };\n", "import { Box3 } from 'three';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\n\nconst _boundingBox = /* @__PURE__ */ new Box3();\nexport function intersectRay( nodeIndex32, array, ray, target ) {\n\n\tarrayToBox( nodeIndex32, array, _boundingBox );\n\treturn ray.intersectBox( _boundingBox, target );\n\n}\n", "import { intersectTri } from '../../utils/ThreeRayIntersectUtilities.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\n\n/*************************************************************/\n/* This file is generated from \"iterationUtils.template.js\". */\n/*************************************************************/\n/* eslint-disable indent */\n\nfunction intersectTris_indirect( bvh, side, ray, offset, count, intersections ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet vi = _indirectBuffer ? _indirectBuffer[ i ] : i;\n\t\tintersectTri( geometry, side, ray, vi, intersections );\n\n\n\t}\n\n}\n\nfunction intersectClosestTri_indirect( bvh, side, ray, offset, count ) {\n\n\tconst { geometry, _indirectBuffer } = bvh;\n\tlet dist = Infinity;\n\tlet res = null;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tlet intersection;\n\t\tintersection = intersectTri( geometry, side, ray, _indirectBuffer ? _indirectBuffer[ i ] : i );\n\n\n\t\tif ( intersection && intersection.distance < dist ) {\n\n\t\t\tres = intersection;\n\t\t\tdist = intersection.distance;\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\nfunction iterateOverTriangles_indirect(\n\toffset,\n\tcount,\n\tbvh,\n\tintersectsTriangleFunc,\n\tcontained,\n\tdepth,\n\ttriangle\n) {\n\n\tconst { geometry } = bvh;\n\tconst { index } = geometry;\n\tconst pos = geometry.attributes.position;\n\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\tlet tri;\n\t\ttri = bvh.resolveTriangleIndex( i );\n\n\t\tsetTriangle( triangle, tri * 3, index, pos );\n\t\ttriangle.needsUpdate = true;\n\n\t\tif ( intersectsTriangleFunc( triangle, tri, contained, depth ) ) {\n\n\t\t\treturn true;\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\nexport { intersectClosestTri_indirect, intersectTris_indirect, iterateOverTriangles_indirect };\n", "import { Vector3 } from 'three';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectTris } from '../utils/iterationUtils.generated.js';\nimport '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nconst _boxIntersection = /* @__PURE__ */ new Vector3();\nfunction raycast( bvh, root, side, ray, intersects ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t_raycast( 0, bvh, side, ray, intersects );\n\tBufferStack.clearBuffer();\n\n}\n\nfunction _raycast( nodeIndex32, bvh, side, ray, intersects ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tconst nodeIndex16 = nodeIndex32 * 2;\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\tintersectTris( bvh, side, ray, offset, count, intersects );\n\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, _boxIntersection ) ) {\n\n\t\t\t_raycast( leftIndex, bvh, side, ray, intersects );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, _boxIntersection ) ) {\n\n\t\t\t_raycast( rightIndex, bvh, side, ray, intersects );\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycast };\n", "import { Vector3 } from 'three';\nimport { IS_LEAF, OFFSET, COUNT, SPLIT_AXIS, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport { intersectClosestTri } from '../utils/iterationUtils.generated.js';\nimport '../utils/iterationUtils_indirect.generated.js';\n\n/***********************************************************/\n/* This file is generated from \"raycastFirst.template.js\". */\n/***********************************************************/\nconst _boxIntersection = /* @__PURE__ */ new Vector3();\nconst _xyzFields = [ 'x', 'y', 'z' ];\nfunction raycastFirst( bvh, root, side, ray ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _raycastFirst( 0, bvh, side, ray );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _raycastFirst( nodeIndex32, bvh, side, ray ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\n\t\treturn intersectClosestTri( bvh, side, ray, offset, count );\n\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = _xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, _boxIntersection );\n\t\tconst c1Result = c1Intersection ? _raycastFirst( c1, bvh, side, ray ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, _boxIntersection );\n\t\tconst c2Result = c2Intersection ? _raycastFirst( c2, bvh, side, ray ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycastFirst };\n", "import { Box3, Matrix4 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../../math/ExtendedTriangle.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { IS_LEAF, OFFSET, COUNT, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\n/*****************************************************************/\n/* This file is generated from \"intersectsGeometry.template.js\". */\n/*****************************************************************/\n/* eslint-disable indent */\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst triangle = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new Matrix4();\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\n\nfunction intersectsGeometry( bvh, root, otherGeometry, geometryToBvh ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _intersectsGeometry( 0, bvh, otherGeometry, geometryToBvh );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _intersectsGeometry( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tif ( cachedObb === null ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tcachedObb = obb;\n\n\t}\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst thisGeometry = bvh.geometry;\n\t\tconst thisIndex = thisGeometry.index;\n\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\tconst index = otherGeometry.index;\n\t\tconst pos = otherGeometry.attributes.position;\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t// here.\n\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t// if there's a bounds tree\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\tobb2.needsUpdate = true;\n\n\t\t\t// TODO: use a triangle iteration function here\n\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.needsUpdate = true;\n\n\n\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn res;\n\n\t\t} else {\n\n\t\t\t// if we're just dealing with raw geometry\n\n\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\n\n\n\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = nodeIndex32 + 8;\n\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\tconst leftIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( leftIntersection ) return true;\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\tconst rightIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( rightIntersection ) return true;\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport { intersectsGeometry };\n", "import { Matrix4, Vector3 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { getTriCount } from '../build/geometryUtils.js';\nimport { ExtendedTrianglePool } from '../../utils/ExtendedTrianglePool.js';\n\n/*********************************************************************/\n/* This file is generated from \"closestPointToGeometry.template.js\". */\n/*********************************************************************/\n\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\n\nfunction closestPointToGeometry(\n\tbvh,\n\totherGeometry,\n\tgeometryToBvh,\n\ttarget1 = { },\n\ttarget2 = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\tif ( ! otherGeometry.boundingBox ) {\n\n\t\totherGeometry.computeBoundingBox();\n\n\t}\n\n\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\tobb.needsUpdate = true;\n\n\tconst geometry = bvh.geometry;\n\tconst pos = geometry.attributes.position;\n\tconst index = geometry.index;\n\tconst otherPos = otherGeometry.attributes.position;\n\tconst otherIndex = otherGeometry.index;\n\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\tlet tempTarget1 = temp1;\n\tlet tempTargetDest1 = temp2;\n\tlet tempTarget2 = null;\n\tlet tempTargetDest2 = null;\n\n\tif ( target2 ) {\n\n\t\ttempTarget2 = temp3;\n\t\ttempTargetDest2 = temp4;\n\n\t}\n\n\tlet closestDistance = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tlet closestDistanceOtherTriIndex = null;\n\ttempMatrix.copy( geometryToBvh ).invert();\n\tobb2.matrix.copy( tempMatrix );\n\tbvh.shapecast(\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\n\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t},\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\n\t\t\t\t\t\t\tsetTriangle( triangle, 3 * i, index, pos );\n\n\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tExtendedTrianglePool.releasePrimitive( triangle );\n\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\tif ( closestDistance === Infinity ) {\n\n\t\treturn null;\n\n\t}\n\n\tif ( ! target1.point ) {\n\n\t\ttarget1.point = tempTargetDest1.clone();\n\n\t} else {\n\n\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t}\n\n\ttarget1.distance = closestDistance,\n\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\tif ( target2 ) {\n\n\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\telse target2.point.copy( tempTargetDest2 );\n\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t}\n\n\treturn target1;\n\n}\n\nexport { closestPointToGeometry };\n", "import { IS_LEAFNODE_FLAG } from '../Constants.js';\n\n/****************************************************/\n/* This file is generated from \"refit.template.js\". */\n/****************************************************/\n\nfunction refit_indirect( bvh, nodeIndices = null ) {\n\n\tif ( nodeIndices && Array.isArray( nodeIndices ) ) {\n\n\t\tnodeIndices = new Set( nodeIndices );\n\n\t}\n\n\tconst geometry = bvh.geometry;\n\tconst indexArr = geometry.index ? geometry.index.array : null;\n\tconst posAttr = geometry.attributes.position;\n\n\tlet buffer, uint32Array, uint16Array, float32Array;\n\tlet byteOffset = 0;\n\tconst roots = bvh._roots;\n\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\tbuffer = roots[ i ];\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tfloat32Array = new Float32Array( buffer );\n\n\t\t_traverse( 0, byteOffset );\n\t\tbyteOffset += buffer.byteLength;\n\n\t}\n\n\tfunction _traverse( node32Index, byteOffset, force = false ) {\n\n\t\tconst node16Index = node32Index * 2;\n\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\n\t\t\tlet minx = Infinity;\n\t\t\tlet miny = Infinity;\n\t\t\tlet minz = Infinity;\n\t\t\tlet maxx = - Infinity;\n\t\t\tlet maxy = - Infinity;\n\t\t\tlet maxz = - Infinity;\n\n\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\tconst t = 3 * bvh.resolveTriangleIndex( i );\n\t\t\t\tfor ( let j = 0; j < 3; j ++ ) {\n\n\t\t\t\t\tlet index = t + j;\n\t\t\t\t\tindex = indexArr ? indexArr[ index ] : index;\n\n\t\t\t\t\tconst x = posAttr.getX( index );\n\t\t\t\t\tconst y = posAttr.getY( index );\n\t\t\t\t\tconst z = posAttr.getZ( index );\n\n\t\t\t\t\tif ( x < minx ) minx = x;\n\t\t\t\t\tif ( x > maxx ) maxx = x;\n\n\t\t\t\t\tif ( y < miny ) miny = y;\n\t\t\t\t\tif ( y > maxy ) maxy = y;\n\n\t\t\t\t\tif ( z < minz ) minz = z;\n\t\t\t\t\tif ( z > maxz ) maxz = z;\n\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t\tif (\n\t\t\t\tfloat32Array[ node32Index + 0 ] !== minx ||\n\t\t\t\tfloat32Array[ node32Index + 1 ] !== miny ||\n\t\t\t\tfloat32Array[ node32Index + 2 ] !== minz ||\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] !== maxx ||\n\t\t\t\tfloat32Array[ node32Index + 4 ] !== maxy ||\n\t\t\t\tfloat32Array[ node32Index + 5 ] !== maxz\n\t\t\t) {\n\n\t\t\t\tfloat32Array[ node32Index + 0 ] = minx;\n\t\t\t\tfloat32Array[ node32Index + 1 ] = miny;\n\t\t\t\tfloat32Array[ node32Index + 2 ] = minz;\n\n\t\t\t\tfloat32Array[ node32Index + 3 ] = maxx;\n\t\t\t\tfloat32Array[ node32Index + 4 ] = maxy;\n\t\t\t\tfloat32Array[ node32Index + 5 ] = maxz;\n\n\t\t\t\treturn true;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = node32Index + 8;\n\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\n\t\t\t// the identifying node indices provided by the shapecast function include offsets of all\n\t\t\t// root buffers to guarantee they're unique between roots so offset left and right indices here.\n\t\t\tconst offsetLeft = left + byteOffset;\n\t\t\tconst offsetRight = right + byteOffset;\n\t\t\tlet forceChildren = force;\n\t\t\tlet includesLeft = false;\n\t\t\tlet includesRight = false;\n\n\t\t\tif ( nodeIndices ) {\n\n\t\t\t\t// if we see that neither the left or right child are included in the set that need to be updated\n\t\t\t\t// then we assume that all children need to be updated.\n\t\t\t\tif ( ! forceChildren ) {\n\n\t\t\t\t\tincludesLeft = nodeIndices.has( offsetLeft );\n\t\t\t\t\tincludesRight = nodeIndices.has( offsetRight );\n\t\t\t\t\tforceChildren = ! includesLeft && ! includesRight;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tincludesLeft = true;\n\t\t\t\tincludesRight = true;\n\n\t\t\t}\n\n\t\t\tconst traverseLeft = forceChildren || includesLeft;\n\t\t\tconst traverseRight = forceChildren || includesRight;\n\n\t\t\tlet leftChange = false;\n\t\t\tif ( traverseLeft ) {\n\n\t\t\t\tleftChange = _traverse( left, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tlet rightChange = false;\n\t\t\tif ( traverseRight ) {\n\n\t\t\t\trightChange = _traverse( right, byteOffset, forceChildren );\n\n\t\t\t}\n\n\t\t\tconst didChange = leftChange || rightChange;\n\t\t\tif ( didChange ) {\n\n\t\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tconst lefti = left + i;\n\t\t\t\t\tconst righti = right + i;\n\t\t\t\t\tconst minLeftValue = float32Array[ lefti ];\n\t\t\t\t\tconst maxLeftValue = float32Array[ lefti + 3 ];\n\t\t\t\t\tconst minRightValue = float32Array[ righti ];\n\t\t\t\t\tconst maxRightValue = float32Array[ righti + 3 ];\n\n\t\t\t\t\tfloat32Array[ node32Index + i ] = minLeftValue < minRightValue ? minLeftValue : minRightValue;\n\t\t\t\t\tfloat32Array[ node32Index + i + 3 ] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn didChange;\n\n\t\t}\n\n\t}\n\n}\n\nexport { refit_indirect };\n", "import { Vector3 } from 'three';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport { IS_LEAF, OFFSET, COUNT, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectTris_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/******************************************************/\n/* This file is generated from \"raycast.template.js\". */\n/******************************************************/\n\nconst _boxIntersection = /* @__PURE__ */ new Vector3();\nfunction raycast_indirect( bvh, root, side, ray, intersects ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\t_raycast( 0, bvh, side, ray, intersects );\n\tBufferStack.clearBuffer();\n\n}\n\nfunction _raycast( nodeIndex32, bvh, side, ray, intersects ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tconst nodeIndex16 = nodeIndex32 * 2;\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\tintersectTris_indirect( bvh, side, ray, offset, count, intersects );\n\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, _boxIntersection ) ) {\n\n\t\t\t_raycast( leftIndex, bvh, side, ray, intersects );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, _boxIntersection ) ) {\n\n\t\t\t_raycast( rightIndex, bvh, side, ray, intersects );\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycast_indirect };\n", "import { Vector3 } from 'three';\nimport { IS_LEAF, OFFSET, COUNT, SPLIT_AXIS, LEFT_NODE, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { intersectRay } from '../utils/intersectUtils.js';\nimport '../utils/iterationUtils.generated.js';\nimport { intersectClosestTri_indirect } from '../utils/iterationUtils_indirect.generated.js';\n\n/***********************************************************/\n/* This file is generated from \"raycastFirst.template.js\". */\n/***********************************************************/\nconst _boxIntersection = /* @__PURE__ */ new Vector3();\nconst _xyzFields = [ 'x', 'y', 'z' ];\nfunction raycastFirst_indirect( bvh, root, side, ray ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _raycastFirst( 0, bvh, side, ray );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _raycastFirst( nodeIndex32, bvh, side, ray ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\treturn intersectClosestTri_indirect( bvh, side, ray, offset, count );\n\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = _xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, _boxIntersection );\n\t\tconst c1Result = c1Intersection ? _raycastFirst( c1, bvh, side, ray ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\t// \"point\" is in the local frame of the bvh\n\t\t\tconst point = c1Result.point[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, _boxIntersection );\n\t\tconst c2Result = c2Intersection ? _raycastFirst( c2, bvh, side, ray ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport { raycastFirst_indirect };\n", "import { Box3, Matrix4 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { ExtendedTriangle } from '../../math/ExtendedTriangle.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { IS_LEAF, OFFSET, COUNT, BOUNDING_DATA_INDEX } from '../utils/nodeBufferUtils.js';\nimport { BufferStack } from '../utils/BufferStack.js';\n\n/*****************************************************************/\n/* This file is generated from \"intersectsGeometry.template.js\". */\n/*****************************************************************/\n/* eslint-disable indent */\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nconst triangle = /* @__PURE__ */ new ExtendedTriangle();\nconst triangle2 = /* @__PURE__ */ new ExtendedTriangle();\nconst invertedMat = /* @__PURE__ */ new Matrix4();\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\n\nfunction intersectsGeometry_indirect( bvh, root, otherGeometry, geometryToBvh ) {\n\n\tBufferStack.setBuffer( bvh._roots[ root ] );\n\tconst result = _intersectsGeometry( 0, bvh, otherGeometry, geometryToBvh );\n\tBufferStack.clearBuffer();\n\n\treturn result;\n\n}\n\nfunction _intersectsGeometry( nodeIndex32, bvh, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\tconst { float32Array, uint16Array, uint32Array } = BufferStack;\n\tlet nodeIndex16 = nodeIndex32 * 2;\n\n\tif ( cachedObb === null ) {\n\n\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\totherGeometry.computeBoundingBox();\n\n\t\t}\n\n\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\tcachedObb = obb;\n\n\t}\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst thisGeometry = bvh.geometry;\n\t\tconst thisIndex = thisGeometry.index;\n\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\tconst index = otherGeometry.index;\n\t\tconst pos = otherGeometry.attributes.position;\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t// here.\n\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t// if there's a bounds tree\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\tobb2.needsUpdate = true;\n\n\t\t\t// TODO: use a triangle iteration function here\n\t\t\tconst res = otherGeometry.boundsTree.shapecast( {\n\n\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\ttri.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * bvh.resolveTriangleIndex( i ), thisIndex, thisPos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn res;\n\n\t\t} else {\n\n\t\t\t// if we're just dealing with raw geometry\n\t\t\tfor ( let i = offset, l = count + offset; i < l; i ++ ) {\n\n\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\tsetTriangle( triangle, 3 * ti, thisIndex, thisPos );\n\n\n\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\t\t}\n\n\t} else {\n\n\t\tconst left = nodeIndex32 + 8;\n\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\tconst leftIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( left, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( leftIntersection ) return true;\n\n\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\tconst rightIntersection =\n\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t_intersectsGeometry( right, bvh, otherGeometry, geometryToBvh, cachedObb );\n\n\t\tif ( rightIntersection ) return true;\n\n\t\treturn false;\n\n\t}\n\n}\n\nexport { intersectsGeometry_indirect };\n", "import { Matrix4, Vector3 } from 'three';\nimport { OrientedBox } from '../../math/OrientedBox.js';\nimport { setTriangle } from '../../utils/TriangleUtilities.js';\nimport { getTriCount } from '../build/geometryUtils.js';\nimport { ExtendedTrianglePool } from '../../utils/ExtendedTrianglePool.js';\n\n/*********************************************************************/\n/* This file is generated from \"closestPointToGeometry.template.js\". */\n/*********************************************************************/\n\nconst tempMatrix = /* @__PURE__ */ new Matrix4();\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst obb2 = /* @__PURE__ */ new OrientedBox();\nconst temp1 = /* @__PURE__ */ new Vector3();\nconst temp2 = /* @__PURE__ */ new Vector3();\nconst temp3 = /* @__PURE__ */ new Vector3();\nconst temp4 = /* @__PURE__ */ new Vector3();\n\nfunction closestPointToGeometry_indirect(\n\tbvh,\n\totherGeometry,\n\tgeometryToBvh,\n\ttarget1 = { },\n\ttarget2 = { },\n\tminThreshold = 0,\n\tmaxThreshold = Infinity,\n) {\n\n\tif ( ! otherGeometry.boundingBox ) {\n\n\t\totherGeometry.computeBoundingBox();\n\n\t}\n\n\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\tobb.needsUpdate = true;\n\n\tconst geometry = bvh.geometry;\n\tconst pos = geometry.attributes.position;\n\tconst index = geometry.index;\n\tconst otherPos = otherGeometry.attributes.position;\n\tconst otherIndex = otherGeometry.index;\n\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\n\tlet tempTarget1 = temp1;\n\tlet tempTargetDest1 = temp2;\n\tlet tempTarget2 = null;\n\tlet tempTargetDest2 = null;\n\n\tif ( target2 ) {\n\n\t\ttempTarget2 = temp3;\n\t\ttempTargetDest2 = temp4;\n\n\t}\n\n\tlet closestDistance = Infinity;\n\tlet closestDistanceTriIndex = null;\n\tlet closestDistanceOtherTriIndex = null;\n\ttempMatrix.copy( geometryToBvh ).invert();\n\tobb2.matrix.copy( tempMatrix );\n\tbvh.shapecast(\n\t\t{\n\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\treturn obb.distanceToBox( box );\n\n\t\t\t},\n\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\tif ( score < closestDistance && score < maxThreshold ) {\n\n\t\t\t\t\t// if we know the triangles of this bounds will be intersected next then\n\t\t\t\t\t// save the bounds to use during triangle checks.\n\t\t\t\t\tif ( isLeaf ) {\n\n\t\t\t\t\t\tobb2.min.copy( box.min );\n\t\t\t\t\t\tobb2.max.copy( box.max );\n\t\t\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\tintersectsRange: ( offset, count ) => {\n\n\t\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\t\t// if the other geometry has a bvh then use the accelerated path where we use shapecast to find\n\t\t\t\t\t// the closest bounds in the other geometry to check.\n\t\t\t\t\tconst otherBvh = otherGeometry.boundsTree;\n\t\t\t\t\treturn otherBvh.shapecast( {\n\t\t\t\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t\t\t\treturn obb2.distanceToBox( box );\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t\t\t\treturn score < closestDistance && score < maxThreshold;\n\n\t\t\t\t\t\t},\n\n\t\t\t\t\t\tintersectsRange: ( otherOffset, otherCount ) => {\n\n\t\t\t\t\t\t\tfor ( let i2 = otherOffset, l2 = otherOffset + otherCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\t\t\t\t\tsetTriangle( triangle2, 3 * ti2, otherIndex, otherPos );\n\n\t\t\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t},\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// If no bounds tree then we'll just check every triangle.\n\t\t\t\t\tconst triCount = getTriCount( otherGeometry );\n\t\t\t\t\tfor ( let i2 = 0, l2 = triCount; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, 3 * i2, otherIndex, otherPos );\n\t\t\t\t\t\ttriangle2.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\t\t\t\tconst ti = bvh.resolveTriangleIndex( i );\n\t\t\t\t\t\t\tsetTriangle( triangle, 3 * ti, index, pos );\n\n\t\t\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\t\t\tconst dist = triangle.distanceToTriangle( triangle2, tempTarget1, tempTarget2 );\n\t\t\t\t\t\t\tif ( dist < closestDistance ) {\n\n\t\t\t\t\t\t\t\ttempTargetDest1.copy( tempTarget1 );\n\n\t\t\t\t\t\t\t\tif ( tempTargetDest2 ) {\n\n\t\t\t\t\t\t\t\t\ttempTargetDest2.copy( tempTarget2 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tclosestDistance = dist;\n\t\t\t\t\t\t\t\tclosestDistanceTriIndex = i;\n\t\t\t\t\t\t\t\tclosestDistanceOtherTriIndex = i2;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// stop traversal if we find a point that's under the given threshold\n\t\t\t\t\t\t\tif ( dist < minThreshold ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t}\n\n\t);\n\n\tExtendedTrianglePool.releasePrimitive( triangle );\n\tExtendedTrianglePool.releasePrimitive( triangle2 );\n\n\tif ( closestDistance === Infinity ) {\n\n\t\treturn null;\n\n\t}\n\n\tif ( ! target1.point ) {\n\n\t\ttarget1.point = tempTargetDest1.clone();\n\n\t} else {\n\n\t\ttarget1.point.copy( tempTargetDest1 );\n\n\t}\n\n\ttarget1.distance = closestDistance,\n\ttarget1.faceIndex = closestDistanceTriIndex;\n\n\tif ( target2 ) {\n\n\t\tif ( ! target2.point ) target2.point = tempTargetDest2.clone();\n\t\telse target2.point.copy( tempTargetDest2 );\n\t\ttarget2.point.applyMatrix4( tempMatrix );\n\t\ttempTargetDest1.applyMatrix4( tempMatrix );\n\t\ttarget2.distance = tempTargetDest1.sub( target2.point ).length();\n\t\ttarget2.faceIndex = closestDistanceOtherTriIndex;\n\n\t}\n\n\treturn target1;\n\n}\n\nexport { closestPointToGeometry_indirect };\n", "export function isSharedArrayBufferSupported() {\n\n\treturn typeof SharedArrayBuffer !== 'undefined';\n\n}\n", "import { Box3, Matrix4 } from 'three';\nimport { BufferStack } from '../utils/BufferStack.js';\nimport { BOUNDING_DATA_INDEX, COUNT, IS_LEAF, LEFT_NODE, OFFSET, RIGHT_NODE } from '../utils/nodeBufferUtils.js';\nimport { arrayToBox } from '../../utils/ArrayBoxUtilities.js';\nimport { PrimitivePool } from '../../utils/PrimitivePool.js';\n\nconst _bufferStack1 = new BufferStack.constructor();\nconst _bufferStack2 = new BufferStack.constructor();\nconst _boxPool = new PrimitivePool( () => new Box3() );\nconst _leftBox1 = new Box3();\nconst _rightBox1 = new Box3();\n\nconst _leftBox2 = new Box3();\nconst _rightBox2 = new Box3();\n\nlet _active = false;\n\nexport function bvhcast( bvh, otherBvh, matrixToLocal, intersectsRanges ) {\n\n\tif ( _active ) {\n\n\t\tthrow new Error( 'MeshBVH: Recursive calls to bvhcast not supported.' );\n\n\t}\n\n\t_active = true;\n\n\tconst roots = bvh._roots;\n\tconst otherRoots = otherBvh._roots;\n\tlet result;\n\tlet offset1 = 0;\n\tlet offset2 = 0;\n\tconst invMat = new Matrix4().copy( matrixToLocal ).invert();\n\n\t// iterate over the first set of roots\n\tfor ( let i = 0, il = roots.length; i < il; i ++ ) {\n\n\t\t_bufferStack1.setBuffer( roots[ i ] );\n\t\toffset2 = 0;\n\n\t\t// prep the initial root box\n\t\tconst localBox = _boxPool.getPrimitive();\n\t\tarrayToBox( BOUNDING_DATA_INDEX( 0 ), _bufferStack1.float32Array, localBox );\n\t\tlocalBox.applyMatrix4( invMat );\n\n\t\t// iterate over the second set of roots\n\t\tfor ( let j = 0, jl = otherRoots.length; j < jl; j ++ ) {\n\n\t\t\t_bufferStack2.setBuffer( otherRoots[ i ] );\n\n\t\t\tresult = _traverse(\n\t\t\t\t0, 0, matrixToLocal, invMat, intersectsRanges,\n\t\t\t\toffset1, offset2, 0, 0,\n\t\t\t\tlocalBox,\n\t\t\t);\n\n\t\t\t_bufferStack2.clearBuffer();\n\t\t\toffset2 += otherRoots[ j ].length;\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// release stack info\n\t\t_boxPool.releasePrimitive( localBox );\n\t\t_bufferStack1.clearBuffer();\n\t\toffset1 += roots[ i ].length;\n\n\t\tif ( result ) {\n\n\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\t_active = false;\n\treturn result;\n\n}\n\nfunction _traverse(\n\tnode1Index32,\n\tnode2Index32,\n\tmatrix2to1,\n\tmatrix1to2,\n\tintersectsRangesFunc,\n\n\t// offsets for ids\n\tnode1IndexByteOffset = 0,\n\tnode2IndexByteOffset = 0,\n\n\t// tree depth\n\tdepth1 = 0,\n\tdepth2 = 0,\n\n\tcurrBox = null,\n\treversed = false,\n\n) {\n\n\t// get the buffer stacks associated with the current indices\n\tlet bufferStack1, bufferStack2;\n\tif ( reversed ) {\n\n\t\tbufferStack1 = _bufferStack2;\n\t\tbufferStack2 = _bufferStack1;\n\n\t} else {\n\n\t\tbufferStack1 = _bufferStack1;\n\t\tbufferStack2 = _bufferStack2;\n\n\t}\n\n\t// get the local instances of the typed buffers\n\tconst\n\t\tfloat32Array1 = bufferStack1.float32Array,\n\t\tuint32Array1 = bufferStack1.uint32Array,\n\t\tuint16Array1 = bufferStack1.uint16Array,\n\t\tfloat32Array2 = bufferStack2.float32Array,\n\t\tuint32Array2 = bufferStack2.uint32Array,\n\t\tuint16Array2 = bufferStack2.uint16Array;\n\n\tconst node1Index16 = node1Index32 * 2;\n\tconst node2Index16 = node2Index32 * 2;\n\tconst isLeaf1 = IS_LEAF( node1Index16, uint16Array1 );\n\tconst isLeaf2 = IS_LEAF( node2Index16, uint16Array2 );\n\tlet result = false;\n\tif ( isLeaf2 && isLeaf1 ) {\n\n\t\t// if both bounds are leaf nodes then fire the callback if the boxes intersect\n\t\tif ( reversed ) {\n\n\t\t\tresult = intersectsRangesFunc(\n\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t);\n\n\t\t} else {\n\n\t\t\tresult = intersectsRangesFunc(\n\t\t\t\tOFFSET( node1Index32, uint32Array1 ), COUNT( node1Index32 * 2, uint16Array1 ),\n\t\t\t\tOFFSET( node2Index32, uint32Array2 ), COUNT( node2Index32 * 2, uint16Array2 ),\n\t\t\t\tdepth1, node1IndexByteOffset + node1Index32,\n\t\t\t\tdepth2, node2IndexByteOffset + node2Index32,\n\t\t\t);\n\n\t\t}\n\n\t} else if ( isLeaf2 ) {\n\n\t\t// SWAP\n\t\t// If we've traversed to the leaf node on the other bvh then we need to swap over\n\t\t// to traverse down the first one\n\n\t\t// get the new box to use\n\t\tconst newBox = _boxPool.getPrimitive();\n\t\tarrayToBox( BOUNDING_DATA_INDEX( node2Index32 ), float32Array2, newBox );\n\t\tnewBox.applyMatrix4( matrix2to1 );\n\n\t\t// get the child bounds to check before traversal\n\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\tresult = (\n\t\t\tintersectCl1 && _traverse(\n\t\t\t\tnode2Index32, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\tnewBox, ! reversed,\n\t\t\t)\n\t\t) || (\n\t\t\tintersectCr1 && _traverse(\n\t\t\t\tnode2Index32, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\tnewBox, ! reversed,\n\t\t\t)\n\t\t);\n\n\t\t_boxPool.releasePrimitive( newBox );\n\n\t} else {\n\n\t\t// if neither are leaves then we should swap if one of the children does not\n\t\t// intersect with the current bounds\n\n\t\t// get the child bounds to check\n\t\tconst cl2 = LEFT_NODE( node2Index32 );\n\t\tconst cr2 = RIGHT_NODE( node2Index32, uint32Array2 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cl2 ), float32Array2, _leftBox2 );\n\t\tarrayToBox( BOUNDING_DATA_INDEX( cr2 ), float32Array2, _rightBox2 );\n\n\t\tconst leftIntersects = currBox.intersectsBox( _leftBox2 );\n\t\tconst rightIntersects = currBox.intersectsBox( _rightBox2 );\n\t\tif ( leftIntersects && rightIntersects ) {\n\n\t\t\t// continue to traverse both children if they both intersect\n\t\t\tresult = _traverse(\n\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\tcurrBox, reversed,\n\t\t\t) || _traverse(\n\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\tcurrBox, reversed,\n\t\t\t);\n\n\t\t} else if ( leftIntersects ) {\n\n\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\tresult = _traverse(\n\t\t\t\t\tnode1Index32, cl2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\t// SWAP\n\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\tnewBox.copy( _leftBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\tresult = (\n\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\tcl2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t) || (\n\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\tcl2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t}\n\n\t\t} else if ( rightIntersects ) {\n\n\t\t\tif ( isLeaf1 ) {\n\n\t\t\t\t// if the current box is a leaf then just continue\n\t\t\t\tresult = _traverse(\n\t\t\t\t\tnode1Index32, cr2, matrix2to1, matrix1to2, intersectsRangesFunc,\n\t\t\t\t\tnode1IndexByteOffset, node2IndexByteOffset, depth1, depth2 + 1,\n\t\t\t\t\tcurrBox, reversed,\n\t\t\t\t);\n\n\t\t\t} else {\n\n\t\t\t\t// SWAP\n\t\t\t\t// if only one box intersects then we have to swap to the other bvh to continue\n\t\t\t\tconst newBox = _boxPool.getPrimitive();\n\t\t\t\tnewBox.copy( _rightBox2 ).applyMatrix4( matrix2to1 );\n\n\t\t\t\tconst cl1 = LEFT_NODE( node1Index32 );\n\t\t\t\tconst cr1 = RIGHT_NODE( node1Index32, uint32Array1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cl1 ), float32Array1, _leftBox1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( cr1 ), float32Array1, _rightBox1 );\n\n\t\t\t\t// precompute the intersections otherwise the global boxes will be modified during traversal\n\t\t\t\tconst intersectCl1 = newBox.intersectsBox( _leftBox1 );\n\t\t\t\tconst intersectCr1 = newBox.intersectsBox( _rightBox1 );\n\t\t\t\tresult = (\n\t\t\t\t\tintersectCl1 && _traverse(\n\t\t\t\t\t\tcr2, cl1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t) || (\n\t\t\t\t\tintersectCr1 && _traverse(\n\t\t\t\t\t\tcr2, cr1, matrix1to2, matrix2to1, intersectsRangesFunc,\n\t\t\t\t\t\tnode2IndexByteOffset, node1IndexByteOffset, depth2, depth1 + 1,\n\t\t\t\t\t\tnewBox, ! reversed,\n\t\t\t\t\t)\n\t\t\t\t);\n\n\t\t\t\t_boxPool.releasePrimitive( newBox );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn result;\n\n}\n\n", "import { BufferAttribute, Box3, FrontSide } from 'three';\nimport { CENTER, BYTES_PER_NODE, IS_LEAFNODE_FLAG, SKIP_GENERATION } from './Constants.js';\nimport { buildPackedTree } from './build/buildTree.js';\nimport { OrientedBox } from '../math/OrientedBox.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { ExtendedTrianglePool } from '../utils/ExtendedTrianglePool.js';\nimport { shapecast } from './cast/shapecast.js';\nimport { closestPointToPoint } from './cast/closestPointToPoint.js';\n\nimport { iterateOverTriangles } from './utils/iterationUtils.generated.js';\nimport { refit } from './cast/refit.generated.js';\nimport { raycast } from './cast/raycast.generated.js';\nimport { raycastFirst } from './cast/raycastFirst.generated.js';\nimport { intersectsGeometry } from './cast/intersectsGeometry.generated.js';\nimport { closestPointToGeometry } from './cast/closestPointToGeometry.generated.js';\n\nimport { iterateOverTriangles_indirect } from './utils/iterationUtils_indirect.generated.js';\nimport { refit_indirect } from './cast/refit_indirect.generated.js';\nimport { raycast_indirect } from './cast/raycast_indirect.generated.js';\nimport { raycastFirst_indirect } from './cast/raycastFirst_indirect.generated.js';\nimport { intersectsGeometry_indirect } from './cast/intersectsGeometry_indirect.generated.js';\nimport { closestPointToGeometry_indirect } from './cast/closestPointToGeometry_indirect.generated.js';\nimport { isSharedArrayBufferSupported } from '../utils/BufferUtils.js';\nimport { setTriangle } from '../utils/TriangleUtilities.js';\nimport { bvhcast } from './cast/bvhcast.js';\n\nconst obb = /* @__PURE__ */ new OrientedBox();\nconst tempBox = /* @__PURE__ */ new Box3();\n\nexport class MeshBVH {\n\n\tstatic serialize( bvh, options = {} ) {\n\n\t\toptions = {\n\t\t\tcloneBuffers: true,\n\t\t\t...options,\n\t\t};\n\n\t\tconst geometry = bvh.geometry;\n\t\tconst rootData = bvh._roots;\n\t\tconst indirectBuffer = bvh._indirectBuffer;\n\t\tconst indexAttribute = geometry.getIndex();\n\t\tlet result;\n\t\tif ( options.cloneBuffers ) {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData.map( root => root.slice() ),\n\t\t\t\tindex: indexAttribute.array.slice(),\n\t\t\t\tindirectBuffer: indirectBuffer ? indirectBuffer.slice() : null,\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tresult = {\n\t\t\t\troots: rootData,\n\t\t\t\tindex: indexAttribute.array,\n\t\t\t\tindirectBuffer: indirectBuffer,\n\t\t\t};\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tstatic deserialize( data, geometry, options = {} ) {\n\n\t\toptions = {\n\t\t\tsetIndex: true,\n\t\t\tindirect: Boolean( data.indirectBuffer ),\n\t\t\t...options,\n\t\t};\n\n\t\tconst { index, roots, indirectBuffer } = data;\n\t\tconst bvh = new MeshBVH( geometry, { ...options, [ SKIP_GENERATION ]: true } );\n\t\tbvh._roots = roots;\n\t\tbvh._indirectBuffer = indirectBuffer || null;\n\n\t\tif ( options.setIndex ) {\n\n\t\t\tconst indexAttribute = geometry.getIndex();\n\t\t\tif ( indexAttribute === null ) {\n\n\t\t\t\tconst newIndex = new BufferAttribute( data.index, 1, false );\n\t\t\t\tgeometry.setIndex( newIndex );\n\n\t\t\t} else if ( indexAttribute.array !== index ) {\n\n\t\t\t\tindexAttribute.array.set( index );\n\t\t\t\tindexAttribute.needsUpdate = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvh;\n\n\t}\n\n\tget indirect() {\n\n\t\treturn ! ! this._indirectBuffer;\n\n\t}\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tif ( ! geometry.isBufferGeometry ) {\n\n\t\t\tthrow new Error( 'MeshBVH: Only BufferGeometries are supported.' );\n\n\t\t} else if ( geometry.index && geometry.index.isInterleavedBufferAttribute ) {\n\n\t\t\tthrow new Error( 'MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.' );\n\n\t\t}\n\n\t\t// default options\n\t\toptions = Object.assign( {\n\n\t\t\tstrategy: CENTER,\n\t\t\tmaxDepth: 40,\n\t\t\tmaxLeafTris: 10,\n\t\t\tverbose: true,\n\t\t\tuseSharedArrayBuffer: false,\n\t\t\tsetBoundingBox: true,\n\t\t\tonProgress: null,\n\t\t\tindirect: false,\n\n\t\t\t// undocumented options\n\n\t\t\t// Whether to skip generating the tree. Used for deserialization.\n\t\t\t[ SKIP_GENERATION ]: false,\n\n\t\t}, options );\n\n\t\tif ( options.useSharedArrayBuffer && ! isSharedArrayBufferSupported() ) {\n\n\t\t\tthrow new Error( 'MeshBVH: SharedArrayBuffer is not available.' );\n\n\t\t}\n\n\t\t// retain references to the geometry so we can use them it without having to\n\t\t// take a geometry reference in every function.\n\t\tthis.geometry = geometry;\n\t\tthis._roots = null;\n\t\tthis._indirectBuffer = null;\n\t\tif ( ! options[ SKIP_GENERATION ] ) {\n\n\t\t\tbuildPackedTree( this, options );\n\n\t\t\tif ( ! geometry.boundingBox && options.setBoundingBox ) {\n\n\t\t\t\tgeometry.boundingBox = this.getBoundingBox( new Box3() );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst { _indirectBuffer } = this;\n\t\tthis.resolveTriangleIndex = options.indirect ? i => _indirectBuffer[ i ] : i => i;\n\n\t}\n\n\trefit( nodeIndices = null ) {\n\n\t\tconst refitFunc = this.indirect ? refit_indirect : refit;\n\t\treturn refitFunc( this, nodeIndices );\n\n\t}\n\n\ttraverse( callback, rootIndex = 0 ) {\n\n\t\tconst buffer = this._roots[ rootIndex ];\n\t\tconst uint32Array = new Uint32Array( buffer );\n\t\tconst uint16Array = new Uint16Array( buffer );\n\t\t_traverse( 0 );\n\n\t\tfunction _traverse( node32Index, depth = 0 ) {\n\n\t\t\tconst node16Index = node32Index * 2;\n\t\t\tconst isLeaf = uint16Array[ node16Index + 15 ] === IS_LEAFNODE_FLAG;\n\t\t\tif ( isLeaf ) {\n\n\t\t\t\tconst offset = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst count = uint16Array[ node16Index + 14 ];\n\t\t\t\tcallback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), offset, count );\n\n\t\t\t} else {\n\n\t\t\t\t// TODO: use node functions here\n\t\t\t\tconst left = node32Index + BYTES_PER_NODE / 4;\n\t\t\t\tconst right = uint32Array[ node32Index + 6 ];\n\t\t\t\tconst splitAxis = uint32Array[ node32Index + 7 ];\n\t\t\t\tconst stopTraversal = callback( depth, isLeaf, new Float32Array( buffer, node32Index * 4, 6 ), splitAxis );\n\n\t\t\t\tif ( ! stopTraversal ) {\n\n\t\t\t\t\t_traverse( left, depth + 1 );\n\t\t\t\t\t_traverse( right, depth + 1 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/* Core Cast Functions */\n\traycast( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst intersects = [];\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tconst raycastFunc = this.indirect ? raycast_indirect : raycast;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst startCount = intersects.length;\n\n\t\t\traycastFunc( this, i, materialSide, ray, intersects );\n\n\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\tconst materialIndex = groups[ i ].materialIndex;\n\t\t\t\tfor ( let j = startCount, jl = intersects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tintersects[ j ].face.materialIndex = materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn intersects;\n\n\t}\n\n\traycastFirst( ray, materialOrSide = FrontSide ) {\n\n\t\tconst roots = this._roots;\n\t\tconst geometry = this.geometry;\n\t\tconst isMaterial = materialOrSide.isMaterial;\n\t\tconst isArrayMaterial = Array.isArray( materialOrSide );\n\n\t\tlet closestResult = null;\n\n\t\tconst groups = geometry.groups;\n\t\tconst side = isMaterial ? materialOrSide.side : materialOrSide;\n\t\tconst raycastFirstFunc = this.indirect ? raycastFirst_indirect : raycastFirst;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst materialSide = isArrayMaterial ? materialOrSide[ groups[ i ].materialIndex ].side : side;\n\t\t\tconst result = raycastFirstFunc( this, i, materialSide, ray );\n\t\t\tif ( result != null && ( closestResult == null || result.distance < closestResult.distance ) ) {\n\n\t\t\t\tclosestResult = result;\n\t\t\t\tif ( isArrayMaterial ) {\n\n\t\t\t\t\tresult.face.materialIndex = groups[ i ].materialIndex;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn closestResult;\n\n\t}\n\n\tintersectsGeometry( otherGeometry, geomToMesh ) {\n\n\t\tlet result = false;\n\t\tconst roots = this._roots;\n\t\tconst intersectsGeometryFunc = this.indirect ? intersectsGeometry_indirect : intersectsGeometry;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tresult = intersectsGeometryFunc( this, i, otherGeometry, geomToMesh );\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn result;\n\n\t}\n\n\tshapecast( callbacks ) {\n\n\t\tconst triangle = ExtendedTrianglePool.getPrimitive();\n\t\tconst iterateFunc = this.indirect ? iterateOverTriangles_indirect : iterateOverTriangles;\n\t\tlet {\n\t\t\tboundsTraverseOrder,\n\t\t\tintersectsBounds,\n\t\t\tintersectsRange,\n\t\t\tintersectsTriangle,\n\t\t} = callbacks;\n\n\t\t// wrap the intersectsRange function\n\t\tif ( intersectsRange && intersectsTriangle ) {\n\n\t\t\tconst originalIntersectsRange = intersectsRange;\n\t\t\tintersectsRange = ( offset, count, contained, depth, nodeIndex ) => {\n\n\t\t\t\tif ( ! originalIntersectsRange( offset, count, contained, depth, nodeIndex ) ) {\n\n\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\n\t\t\t};\n\n\t\t} else if ( ! intersectsRange ) {\n\n\t\t\tif ( intersectsTriangle ) {\n\n\t\t\t\tintersectsRange = ( offset, count, contained, depth ) => {\n\n\t\t\t\t\treturn iterateFunc( offset, count, this, intersectsTriangle, contained, depth, triangle );\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRange = ( offset, count, contained ) => {\n\n\t\t\t\t\treturn contained;\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\t// run shapecast\n\t\tlet result = false;\n\t\tlet byteOffset = 0;\n\t\tconst roots = this._roots;\n\t\tfor ( let i = 0, l = roots.length; i < l; i ++ ) {\n\n\t\t\tconst root = roots[ i ];\n\t\t\tresult = shapecast( this, i, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset );\n\n\t\t\tif ( result ) {\n\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tbyteOffset += root.byteLength;\n\n\t\t}\n\n\t\tExtendedTrianglePool.releasePrimitive( triangle );\n\n\t\treturn result;\n\n\t}\n\n\tbvhcast( otherBvh, matrixToLocal, callbacks ) {\n\n\t\tlet {\n\t\t\tintersectsRanges,\n\t\t\tintersectsTriangles,\n\t\t} = callbacks;\n\n\t\tconst triangle1 = ExtendedTrianglePool.getPrimitive();\n\t\tconst indexAttr1 = this.geometry.index;\n\t\tconst positionAttr1 = this.geometry.attributes.position;\n\t\tconst assignTriangle1 = this.indirect ?\n\t\t\ti1 => {\n\n\n\t\t\t\tconst ti = this.resolveTriangleIndex( i1 );\n\t\t\t\tsetTriangle( triangle1, ti * 3, indexAttr1, positionAttr1 );\n\n\t\t\t} :\n\t\t\ti1 => {\n\n\t\t\t\tsetTriangle( triangle1, i1 * 3, indexAttr1, positionAttr1 );\n\n\t\t\t};\n\n\t\tconst triangle2 = ExtendedTrianglePool.getPrimitive();\n\t\tconst indexAttr2 = otherBvh.geometry.index;\n\t\tconst positionAttr2 = otherBvh.geometry.attributes.position;\n\t\tconst assignTriangle2 = otherBvh.indirect ?\n\t\t\ti2 => {\n\n\t\t\t\tconst ti2 = otherBvh.resolveTriangleIndex( i2 );\n\t\t\t\tsetTriangle( triangle2, ti2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t} :\n\t\t\ti2 => {\n\n\t\t\t\tsetTriangle( triangle2, i2 * 3, indexAttr2, positionAttr2 );\n\n\t\t\t};\n\n\t\t// generate triangle callback if needed\n\t\tif ( intersectsTriangles ) {\n\n\t\t\tconst iterateOverDoubleTriangles = ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) => {\n\n\t\t\t\tfor ( let i2 = offset2, l2 = offset2 + count2; i2 < l2; i2 ++ ) {\n\n\t\t\t\t\tassignTriangle2( i2 );\n\n\t\t\t\t\ttriangle2.a.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.b.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.c.applyMatrix4( matrixToLocal );\n\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1 ++ ) {\n\n\t\t\t\t\t\tassignTriangle1( i1 );\n\n\t\t\t\t\t\ttriangle1.needsUpdate = true;\n\n\t\t\t\t\t\tif ( intersectsTriangles( triangle1, triangle2, i1, i2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t};\n\n\t\t\tif ( intersectsRanges ) {\n\n\t\t\t\tconst originalIntersectsRanges = intersectsRanges;\n\t\t\t\tintersectsRanges = function ( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) {\n\n\t\t\t\t\tif ( ! originalIntersectsRanges( offset1, count1, offset2, count2, depth1, index1, depth2, index2 ) ) {\n\n\t\t\t\t\t\treturn iterateOverDoubleTriangles( offset1, count1, offset2, count2, depth1, index1, depth2, index2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn true;\n\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\tintersectsRanges = iterateOverDoubleTriangles;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn bvhcast( this, otherBvh, matrixToLocal, intersectsRanges );\n\n\t}\n\n\n\t/* Derived Cast Functions */\n\tintersectsBox( box, boxToMesh ) {\n\n\t\tobb.set( box.min, box.max, boxToMesh );\n\t\tobb.needsUpdate = true;\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => obb.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => obb.intersectsTriangle( tri )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tintersectsSphere( sphere ) {\n\n\t\treturn this.shapecast(\n\t\t\t{\n\t\t\t\tintersectsBounds: box => sphere.intersectsBox( box ),\n\t\t\t\tintersectsTriangle: tri => tri.intersectsSphere( sphere )\n\t\t\t}\n\t\t);\n\n\t}\n\n\tclosestPointToGeometry( otherGeometry, geometryToBvh, target1 = { }, target2 = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\tconst closestPointToGeometryFunc = this.indirect ? closestPointToGeometry_indirect : closestPointToGeometry;\n\t\treturn closestPointToGeometryFunc(\n\t\t\tthis,\n\t\t\totherGeometry,\n\t\t\tgeometryToBvh,\n\t\t\ttarget1,\n\t\t\ttarget2,\n\t\t\tminThreshold,\n\t\t\tmaxThreshold,\n\t\t);\n\n\t}\n\n\tclosestPointToPoint( point, target = { }, minThreshold = 0, maxThreshold = Infinity ) {\n\n\t\treturn closestPointToPoint(\n\t\t\tthis,\n\t\t\tpoint,\n\t\t\ttarget,\n\t\t\tminThreshold,\n\t\t\tmaxThreshold,\n\t\t);\n\n\t}\n\n\tgetBoundingBox( target ) {\n\n\t\ttarget.makeEmpty();\n\n\t\tconst roots = this._roots;\n\t\troots.forEach( buffer => {\n\n\t\t\tarrayToBox( 0, new Float32Array( buffer ), tempBox );\n\t\t\ttarget.union( tempBox );\n\n\t\t} );\n\n\t\treturn target;\n\n\t}\n\n}\n", "import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootVisualizer extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( mesh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootVisualizer';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.mesh = mesh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.mesh.geometry.boundsTree;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth === targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth === targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHVisualizer extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh, depth = 10 ) {\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHVisualizer';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootVisualizer( this.mesh, this.edgeMaterial, this.depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.depth = this.depth;\n\t\t\troot.mesh = this.mesh;\n\t\t\troot.displayParents = this.displayParents;\n\t\t\troot.displayEdges = this.displayEdges;\n\t\t\troot.material = this.displayEdges ? this.edgeMaterial : this.meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tthis.position.copy( this.mesh.position );\n\t\tthis.rotation.copy( this.mesh.rotation );\n\t\tthis.scale.copy( this.mesh.scale );\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHVisualizer( this.mesh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\n\nexport { MeshBVHVisualizer };\n", "import { Box3, Vector3 } from 'three';\nimport { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../core/Constants.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { isSharedArrayBufferSupported } from '../utils/BufferUtils.js';\n\nconst _box1 = /* @__PURE__ */ new Box3();\nconst _box2 = /* @__PURE__ */ new Box3();\nconst _vec = /* @__PURE__ */ new Vector3();\n\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction getPrimitiveSize( el ) {\n\n\tswitch ( typeof el ) {\n\n\t\tcase 'number':\n\t\t\treturn 8;\n\t\tcase 'string':\n\t\t\treturn el.length * 2;\n\t\tcase 'boolean':\n\t\t\treturn 4;\n\t\tdefault:\n\t\t\treturn 0;\n\n\t}\n\n}\n\nfunction isTypedArray( arr ) {\n\n\tconst regex = /(Uint|Int|Float)(8|16|32)Array/;\n\treturn regex.test( arr.constructor.name );\n\n}\n\nfunction getRootExtremes( bvh, group ) {\n\n\tconst result = {\n\t\tnodeCount: 0,\n\t\tleafNodeCount: 0,\n\n\t\tdepth: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\ttris: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\tsplits: [ 0, 0, 0 ],\n\t\tsurfaceAreaScore: 0,\n\t};\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offsetOrSplit, count ) => {\n\n\t\tconst l0 = boundingData[ 0 + 3 ] - boundingData[ 0 ];\n\t\tconst l1 = boundingData[ 1 + 3 ] - boundingData[ 1 ];\n\t\tconst l2 = boundingData[ 2 + 3 ] - boundingData[ 2 ];\n\n\t\tconst surfaceArea = 2 * ( l0 * l1 + l1 * l2 + l2 * l0 );\n\n\t\tresult.nodeCount ++;\n\t\tif ( isLeaf ) {\n\n\t\t\tresult.leafNodeCount ++;\n\n\t\t\tresult.depth.min = Math.min( depth, result.depth.min );\n\t\t\tresult.depth.max = Math.max( depth, result.depth.max );\n\n\t\t\tresult.tris.min = Math.min( count, result.tris.min );\n\t\t\tresult.tris.max = Math.max( count, result.tris.max );\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n\n\t\t} else {\n\n\t\t\tresult.splits[ offsetOrSplit ] ++;\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n\n\t\t}\n\n\t}, group );\n\n\t// If there are no leaf nodes because the tree hasn't finished generating yet.\n\tif ( result.tris.min === Infinity ) {\n\n\t\tresult.tris.min = 0;\n\t\tresult.tris.max = 0;\n\n\t}\n\n\tif ( result.depth.min === Infinity ) {\n\n\t\tresult.depth.min = 0;\n\t\tresult.depth.max = 0;\n\n\t}\n\n\treturn result;\n\n}\n\nfunction getBVHExtremes( bvh ) {\n\n\treturn bvh._roots.map( ( root, i ) => getRootExtremes( bvh, i ) );\n\n}\n\nfunction estimateMemoryInBytes( obj ) {\n\n\tconst traversed = new Set();\n\tconst stack = [ obj ];\n\tlet bytes = 0;\n\n\twhile ( stack.length ) {\n\n\t\tconst curr = stack.pop();\n\t\tif ( traversed.has( curr ) ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\ttraversed.add( curr );\n\n\t\tfor ( let key in curr ) {\n\n\t\t\tif ( ! curr.hasOwnProperty( key ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tbytes += getPrimitiveSize( key );\n\n\t\t\tconst value = curr[ key ];\n\t\t\tif ( value && ( typeof value === 'object' || typeof value === 'function' ) ) {\n\n\t\t\t\tif ( isTypedArray( value ) ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else if ( isSharedArrayBufferSupported() && value instanceof SharedArrayBuffer ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else if ( value instanceof ArrayBuffer ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstack.push( value );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tbytes += getPrimitiveSize( value );\n\n\t\t\t}\n\n\n\t\t}\n\n\t}\n\n\treturn bytes;\n\n}\n\nfunction validateBounds( bvh ) {\n\n\tconst geometry = bvh.geometry;\n\tconst depthStack = [];\n\tconst index = geometry.index;\n\tconst position = geometry.getAttribute( 'position' );\n\tlet passes = true;\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tdepth,\n\t\t\tisLeaf,\n\t\t\tboundingData,\n\t\t\toffset,\n\t\t\tcount,\n\t\t};\n\t\tdepthStack[ depth ] = info;\n\n\t\tarrayToBox( 0, boundingData, _box1 );\n\t\tconst parent = depthStack[ depth - 1 ];\n\n\t\tif ( isLeaf ) {\n\n\t\t\t// check triangles\n\t\t\tfor ( let i = offset * 3, l = ( offset + count ) * 3; i < l; i += 3 ) {\n\n\t\t\t\tconst i0 = index.getX( i );\n\t\t\t\tconst i1 = index.getX( i + 1 );\n\t\t\t\tconst i2 = index.getX( i + 2 );\n\n\t\t\t\tlet isContained;\n\n\t\t\t\t_vec.fromBufferAttribute( position, i0 );\n\t\t\t\tisContained = _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i1 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i2 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\tconsole.assert( isContained, 'Leaf bounds does not fully contain triangle.' );\n\t\t\t\tpasses = passes && isContained;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parent ) {\n\n\t\t\t// check if my bounds fit in my parents\n\t\t\tarrayToBox( 0, boundingData, _box2 );\n\n\t\t\tconst isContained = _box2.containsBox( _box1 );\n\t\t\tconsole.assert( isContained, 'Parent bounds does not fully contain child.' );\n\t\t\tpasses = passes && isContained;\n\n\t\t}\n\n\t} );\n\n\treturn passes;\n\n}\n\n// Returns a simple, human readable object that represents the BVH.\nfunction getJSONStructure( bvh ) {\n\n\tconst depthStack = [];\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tbounds: arrayToBox( 0, boundingData, new Box3() ),\n\t\t};\n\n\t\tif ( isLeaf ) {\n\n\t\t\tinfo.count = count;\n\t\t\tinfo.offset = offset;\n\n\t\t} else {\n\n\t\t\tinfo.left = null;\n\t\t\tinfo.right = null;\n\n\t\t}\n\n\t\tdepthStack[ depth ] = info;\n\n\t\t// traversal hits the left then right node\n\t\tconst parent = depthStack[ depth - 1 ];\n\t\tif ( parent ) {\n\n\t\t\tif ( parent.left === null ) {\n\n\t\t\t\tparent.left = info;\n\n\t\t\t} else {\n\n\t\t\t\tparent.right = info;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn depthStack[ 0 ];\n\n}\n\nexport { estimateMemoryInBytes, getBVHExtremes, validateBounds, getJSONStructure };\n", "// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n", "import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n", "import { BufferAttribute, BufferGeometry, Vector3, Vector4, Matrix4, Matrix3 } from 'three';\n\nconst _positionVector = /*@__PURE__*/ new Vector3();\nconst _normalVector = /*@__PURE__*/ new Vector3();\nconst _tangentVector = /*@__PURE__*/ new Vector3();\nconst _tangentVector4 = /*@__PURE__*/ new Vector4();\n\nconst _morphVector = /*@__PURE__*/ new Vector3();\nconst _temp = /*@__PURE__*/ new Vector3();\n\nconst _skinIndex = /*@__PURE__*/ new Vector4();\nconst _skinWeight = /*@__PURE__*/ new Vector4();\nconst _matrix = /*@__PURE__*/ new Matrix4();\nconst _boneMatrix = /*@__PURE__*/ new Matrix4();\n\n// Confirms that the two provided attributes are compatible\nfunction validateAttributes( attr1, attr2 ) {\n\n\tif ( ! attr1 && ! attr2 ) {\n\n\t\treturn;\n\n\t}\n\n\tconst sameCount = attr1.count === attr2.count;\n\tconst sameNormalized = attr1.normalized === attr2.normalized;\n\tconst sameType = attr1.array.constructor === attr2.array.constructor;\n\tconst sameItemSize = attr1.itemSize === attr2.itemSize;\n\n\tif ( ! sameCount || ! sameNormalized || ! sameType || ! sameItemSize ) {\n\n\t\tthrow new Error();\n\n\t}\n\n}\n\n// Clones the given attribute with a new compatible buffer attribute but no data\nfunction createAttributeClone( attr, countOverride = null ) {\n\n\tconst cons = attr.array.constructor;\n\tconst normalized = attr.normalized;\n\tconst itemSize = attr.itemSize;\n\tconst count = countOverride === null ? attr.count : countOverride;\n\n\treturn new BufferAttribute( new cons( itemSize * count ), itemSize, normalized );\n\n}\n\n// target offset is the number of elements in the target buffer stride to skip before copying the\n// attributes contents in to.\nfunction copyAttributeContents( attr, target, targetOffset = 0 ) {\n\n\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\tconst itemSize = attr.itemSize;\n\t\tfor ( let i = 0, l = attr.count; i < l; i ++ ) {\n\n\t\t\tconst io = i + targetOffset;\n\t\t\ttarget.setX( io, attr.getX( i ) );\n\t\t\tif ( itemSize >= 2 ) target.setY( io, attr.getY( i ) );\n\t\t\tif ( itemSize >= 3 ) target.setZ( io, attr.getZ( i ) );\n\t\t\tif ( itemSize >= 4 ) target.setW( io, attr.getW( i ) );\n\n\t\t}\n\n\t} else {\n\n\t\tconst array = target.array;\n\t\tconst cons = array.constructor;\n\t\tconst byteOffset = array.BYTES_PER_ELEMENT * attr.itemSize * targetOffset;\n\t\tconst temp = new cons( array.buffer, byteOffset, attr.array.length );\n\t\ttemp.set( attr.array );\n\n\t}\n\n}\n\n// Adds the \"matrix\" multiplied by \"scale\" to \"target\"\nfunction addScaledMatrix( target, matrix, scale ) {\n\n\tconst targetArray = target.elements;\n\tconst matrixArray = matrix.elements;\n\tfor ( let i = 0, l = matrixArray.length; i < l; i ++ ) {\n\n\t\ttargetArray[ i ] += matrixArray[ i ] * scale;\n\n\t}\n\n}\n\n// A version of \"SkinnedMesh.boneTransform\" for normals\nfunction boneNormalTransform( mesh, index, target ) {\n\n\tconst skeleton = mesh.skeleton;\n\tconst geometry = mesh.geometry;\n\tconst bones = skeleton.bones;\n\tconst boneInverses = skeleton.boneInverses;\n\n\t_skinIndex.fromBufferAttribute( geometry.attributes.skinIndex, index );\n\t_skinWeight.fromBufferAttribute( geometry.attributes.skinWeight, index );\n\n\t_matrix.elements.fill( 0 );\n\n\tfor ( let i = 0; i < 4; i ++ ) {\n\n\t\tconst weight = _skinWeight.getComponent( i );\n\n\t\tif ( weight !== 0 ) {\n\n\t\t\tconst boneIndex = _skinIndex.getComponent( i );\n\t\t\t_boneMatrix.multiplyMatrices( bones[ boneIndex ].matrixWorld, boneInverses[ boneIndex ] );\n\n\t\t\taddScaledMatrix( _matrix, _boneMatrix, weight );\n\n\t\t}\n\n\t}\n\n\t_matrix.multiply( mesh.bindMatrix ).premultiply( mesh.bindMatrixInverse );\n\ttarget.transformDirection( _matrix );\n\n\treturn target;\n\n}\n\n// Applies the morph target data to the target vector\nfunction applyMorphTarget( morphData, morphInfluences, morphTargetsRelative, i, target ) {\n\n\t_morphVector.set( 0, 0, 0 );\n\tfor ( let j = 0, jl = morphData.length; j < jl; j ++ ) {\n\n\t\tconst influence = morphInfluences[ j ];\n\t\tconst morphAttribute = morphData[ j ];\n\n\t\tif ( influence === 0 ) continue;\n\n\t\t_temp.fromBufferAttribute( morphAttribute, i );\n\n\t\tif ( morphTargetsRelative ) {\n\n\t\t\t_morphVector.addScaledVector( _temp, influence );\n\n\t\t} else {\n\n\t\t\t_morphVector.addScaledVector( _temp.sub( target ), influence );\n\n\t\t}\n\n\t}\n\n\ttarget.add( _morphVector );\n\n}\n\n// Modified version of BufferGeometryUtils.mergeBufferGeometries that ignores morph targets and updates a attributes in place\nfunction mergeBufferGeometries( geometries, options = { useGroups: false, updateIndex: false, skipAttributes: [] }, targetGeometry = new BufferGeometry() ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\tconst { useGroups = false, updateIndex = false, skipAttributes = [] } = options;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst attributes = {};\n\n\tlet offset = 0;\n\n\ttargetGeometry.clearGroups();\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) {\n\n\t\t\t\tattributes[ name ] = [];\n\n\t\t\t}\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tthrow new Error( 'StaticGeometryGenerator: Make sure all geometries have the same number of attributes.' );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tthrow new Error( 'StaticGeometryGenerator: The geometry must have either an index or a position attribute' );\n\n\t\t\t}\n\n\t\t\ttargetGeometry.addGroup( offset, count, i );\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\tif ( isIndexed ) {\n\n\t\tlet forceUpdateIndex = false;\n\t\tif ( ! targetGeometry.index ) {\n\n\t\t\tlet indexCount = 0;\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tindexCount += geometries[ i ].index.count;\n\n\t\t\t}\n\n\t\t\ttargetGeometry.setIndex( new BufferAttribute( new Uint32Array( indexCount ), 1, false ) );\n\t\t\tforceUpdateIndex = true;\n\n\t\t}\n\n\t\tif ( updateIndex || forceUpdateIndex ) {\n\n\t\t\tconst targetIndex = targetGeometry.index;\n\t\t\tlet targetOffset = 0;\n\t\t\tlet indexOffset = 0;\n\t\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tconst geometry = geometries[ i ];\n\t\t\t\tconst index = geometry.index;\n\t\t\t\tif ( skipAttributes[ i ] !== true ) {\n\n\t\t\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\t\ttargetIndex.setX( targetOffset, index.getX( j ) + indexOffset );\n\t\t\t\t\t\ttargetOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometry.attributes.position.count;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t// merge attributes\n\tfor ( const name in attributes ) {\n\n\t\tconst attrList = attributes[ name ];\n\t\tif ( ! ( name in targetGeometry.attributes ) ) {\n\n\t\t\tlet count = 0;\n\t\t\tfor ( const key in attrList ) {\n\n\t\t\t\tcount += attrList[ key ].count;\n\n\t\t\t}\n\n\t\t\ttargetGeometry.setAttribute( name, createAttributeClone( attributes[ name ][ 0 ], count ) );\n\n\t\t}\n\n\t\tconst targetAttribute = targetGeometry.attributes[ name ];\n\t\tlet offset = 0;\n\t\tfor ( let i = 0, l = attrList.length; i < l; i ++ ) {\n\n\t\t\tconst attr = attrList[ i ];\n\t\t\tif ( skipAttributes[ i ] !== true ) {\n\n\t\t\t\tcopyAttributeContents( attr, targetAttribute, offset );\n\n\t\t\t}\n\n\t\t\toffset += attr.count;\n\n\t\t}\n\n\t}\n\n\treturn targetGeometry;\n\n}\n\nfunction checkTypedArrayEquality( a, b ) {\n\n\tif ( a === null || b === null ) {\n\n\t\treturn a === b;\n\n\t}\n\n\tif ( a.length !== b.length ) {\n\n\t\treturn false;\n\n\t}\n\n\tfor ( let i = 0, l = a.length; i < l; i ++ ) {\n\n\t\tif ( a[ i ] !== b[ i ] ) {\n\n\t\t\treturn false;\n\n\t\t}\n\n\t}\n\n\treturn true;\n\n}\n\n// Checks whether the geometry changed between this and last evaluation\nclass GeometryDiff {\n\n\tconstructor( mesh ) {\n\n\t\tthis.matrixWorld = new Matrix4();\n\t\tthis.geometryHash = null;\n\t\tthis.boneMatrices = null;\n\t\tthis.primitiveCount = - 1;\n\t\tthis.mesh = mesh;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst mesh = this.mesh;\n\t\tconst geometry = mesh.geometry;\n\t\tconst skeleton = mesh.skeleton;\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\t\tthis.matrixWorld.copy( mesh.matrixWorld );\n\t\tthis.geometryHash = geometry.attributes.position.version;\n\t\tthis.primitiveCount = primitiveCount;\n\n\t\tif ( skeleton ) {\n\n\t\t\t// ensure the bone matrix array is updated to the appropriate length\n\t\t\tif ( ! skeleton.boneTexture ) {\n\n\t\t\t\tskeleton.computeBoneTexture();\n\n\t\t\t}\n\n\t\t\tskeleton.update();\n\n\t\t\t// copy data if possible otherwise clone it\n\t\t\tconst boneMatrices = skeleton.boneMatrices;\n\t\t\tif ( ! this.boneMatrices || this.boneMatrices.length !== boneMatrices.length ) {\n\n\t\t\t\tthis.boneMatrices = boneMatrices.slice();\n\n\t\t\t} else {\n\n\t\t\t\tthis.boneMatrices.set( boneMatrices );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.boneMatrices = null;\n\n\t\t}\n\n\t}\n\n\tdidChange() {\n\n\t\tconst mesh = this.mesh;\n\t\tconst geometry = mesh.geometry;\n\t\tconst primitiveCount = ( geometry.index ? geometry.index.count : geometry.attributes.position.count ) / 3;\n\t\tconst identical =\n\t\t\tthis.matrixWorld.equals( mesh.matrixWorld ) &&\n\t\t\tthis.geometryHash === geometry.attributes.position.version &&\n\t\t\tcheckTypedArrayEquality( mesh.skeleton && mesh.skeleton.boneMatrices || null, this.boneMatrices ) &&\n\t\t\tthis.primitiveCount === primitiveCount;\n\n\t\treturn ! identical;\n\n\t}\n\n}\n\nexport class StaticGeometryGenerator {\n\n\tconstructor( meshes ) {\n\n\t\tif ( ! Array.isArray( meshes ) ) {\n\n\t\t\tmeshes = [ meshes ];\n\n\t\t}\n\n\t\tconst finalMeshes = [];\n\t\tmeshes.forEach( object => {\n\n\t\t\tobject.traverseVisible( c => {\n\n\t\t\t\tif ( c.isMesh ) {\n\n\t\t\t\t\tfinalMeshes.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t} );\n\n\t\tthis.meshes = finalMeshes;\n\t\tthis.useGroups = true;\n\t\tthis.applyWorldTransforms = true;\n\t\tthis.attributes = [ 'position', 'normal', 'color', 'tangent', 'uv', 'uv2' ];\n\t\tthis._intermediateGeometry = new Array( finalMeshes.length ).fill().map( () => new BufferGeometry() );\n\t\tthis._diffMap = new WeakMap();\n\n\t}\n\n\tgetMaterials() {\n\n\t\tconst materials = [];\n\t\tthis.meshes.forEach( mesh => {\n\n\t\t\tif ( Array.isArray( mesh.material ) ) {\n\n\t\t\t\tmaterials.push( ...mesh.material );\n\n\t\t\t} else {\n\n\t\t\t\tmaterials.push( mesh.material );\n\n\t\t\t}\n\n\t\t} );\n\t\treturn materials;\n\n\t}\n\n\tgenerate( targetGeometry = new BufferGeometry() ) {\n\n\t\t// track which attributes have been updated and which to skip to avoid unnecessary attribute copies\n\t\tlet skipAttributes = [];\n\t\tconst { meshes, useGroups, _intermediateGeometry, _diffMap } = this;\n\t\tfor ( let i = 0, l = meshes.length; i < l; i ++ ) {\n\n\t\t\tconst mesh = meshes[ i ];\n\t\t\tconst geom = _intermediateGeometry[ i ];\n\t\t\tconst diff = _diffMap.get( mesh );\n\t\t\tif ( ! diff || diff.didChange( mesh ) ) {\n\n\t\t\t\tthis._convertToStaticGeometry( mesh, geom );\n\t\t\t\tskipAttributes.push( false );\n\n\t\t\t\tif ( ! diff ) {\n\n\t\t\t\t\t_diffMap.set( mesh, new GeometryDiff( mesh ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tdiff.update();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tskipAttributes.push( true );\n\n\t\t\t}\n\n\t\t}\n\n\t\tmergeBufferGeometries( _intermediateGeometry, { useGroups, skipAttributes }, targetGeometry );\n\n\t\tfor ( const key in targetGeometry.attributes ) {\n\n\t\t\ttargetGeometry.attributes[ key ].needsUpdate = true;\n\n\t\t}\n\n\t\treturn targetGeometry;\n\n\t}\n\n\t_convertToStaticGeometry( mesh, targetGeometry = new BufferGeometry() ) {\n\n\t\tconst geometry = mesh.geometry;\n\t\tconst applyWorldTransforms = this.applyWorldTransforms;\n\t\tconst includeNormal = this.attributes.includes( 'normal' );\n\t\tconst includeTangent = this.attributes.includes( 'tangent' );\n\t\tconst attributes = geometry.attributes;\n\t\tconst targetAttributes = targetGeometry.attributes;\n\n\t\t// initialize the attributes if they don't exist\n\t\tif ( ! targetGeometry.index ) {\n\n\t\t\ttargetGeometry.index = geometry.index;\n\n\t\t}\n\n\t\tif ( ! targetAttributes.position ) {\n\n\t\t\ttargetGeometry.setAttribute( 'position', createAttributeClone( attributes.position ) );\n\n\t\t}\n\n\t\tif ( includeNormal && ! targetAttributes.normal && attributes.normal ) {\n\n\t\t\ttargetGeometry.setAttribute( 'normal', createAttributeClone( attributes.normal ) );\n\n\t\t}\n\n\t\tif ( includeTangent && ! targetAttributes.tangent && attributes.tangent ) {\n\n\t\t\ttargetGeometry.setAttribute( 'tangent', createAttributeClone( attributes.tangent ) );\n\n\t\t}\n\n\t\t// ensure the attributes are consistent\n\t\tvalidateAttributes( geometry.index, targetGeometry.index );\n\t\tvalidateAttributes( attributes.position, targetAttributes.position );\n\n\t\tif ( includeNormal ) {\n\n\t\t\tvalidateAttributes( attributes.normal, targetAttributes.normal );\n\n\t\t}\n\n\t\tif ( includeTangent ) {\n\n\t\t\tvalidateAttributes( attributes.tangent, targetAttributes.tangent );\n\n\t\t}\n\n\t\t// generate transformed vertex attribute data\n\t\tconst position = attributes.position;\n\t\tconst normal = includeNormal ? attributes.normal : null;\n\t\tconst tangent = includeTangent ? attributes.tangent : null;\n\t\tconst morphPosition = geometry.morphAttributes.position;\n\t\tconst morphNormal = geometry.morphAttributes.normal;\n\t\tconst morphTangent = geometry.morphAttributes.tangent;\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\t\tconst morphInfluences = mesh.morphTargetInfluences;\n\t\tconst normalMatrix = new Matrix3();\n\t\tnormalMatrix.getNormalMatrix( mesh.matrixWorld );\n\n\t\tfor ( let i = 0, l = attributes.position.count; i < l; i ++ ) {\n\n\t\t\t_positionVector.fromBufferAttribute( position, i );\n\t\t\tif ( normal ) {\n\n\t\t\t\t_normalVector.fromBufferAttribute( normal, i );\n\n\t\t\t}\n\n\t\t\tif ( tangent ) {\n\n\t\t\t\t_tangentVector4.fromBufferAttribute( tangent, i );\n\t\t\t\t_tangentVector.fromBufferAttribute( tangent, i );\n\n\t\t\t}\n\n\t\t\t// apply morph target transform\n\t\t\tif ( morphInfluences ) {\n\n\t\t\t\tif ( morphPosition ) {\n\n\t\t\t\t\tapplyMorphTarget( morphPosition, morphInfluences, morphTargetsRelative, i, _positionVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphNormal ) {\n\n\t\t\t\t\tapplyMorphTarget( morphNormal, morphInfluences, morphTargetsRelative, i, _normalVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( morphTangent ) {\n\n\t\t\t\t\tapplyMorphTarget( morphTangent, morphInfluences, morphTargetsRelative, i, _tangentVector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// apply bone transform\n\t\t\tif ( mesh.isSkinnedMesh ) {\n\n\t\t\t\tmesh.applyBoneTransform( i, _positionVector );\n\t\t\t\tif ( normal ) {\n\n\t\t\t\t\tboneNormalTransform( mesh, i, _normalVector );\n\n\t\t\t\t}\n\n\t\t\t\tif ( tangent ) {\n\n\t\t\t\t\tboneNormalTransform( mesh, i, _tangentVector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the vectors of the attributes\n\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t_positionVector.applyMatrix4( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\ttargetAttributes.position.setXYZ( i, _positionVector.x, _positionVector.y, _positionVector.z );\n\n\t\t\tif ( normal ) {\n\n\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t_normalVector.applyNormalMatrix( normalMatrix );\n\n\t\t\t\t}\n\n\t\t\t\ttargetAttributes.normal.setXYZ( i, _normalVector.x, _normalVector.y, _normalVector.z );\n\n\t\t\t}\n\n\t\t\tif ( tangent ) {\n\n\t\t\t\tif ( applyWorldTransforms ) {\n\n\t\t\t\t\t_tangentVector.transformDirection( mesh.matrixWorld );\n\n\t\t\t\t}\n\n\t\t\t\ttargetAttributes.tangent.setXYZW( i, _tangentVector.x, _tangentVector.y, _tangentVector.z, _tangentVector4.w );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// copy other attributes over\n\t\tfor ( const i in this.attributes ) {\n\n\t\t\tconst key = this.attributes[ i ];\n\t\t\tif ( key === 'position' || key === 'tangent' || key === 'normal' || ! ( key in attributes ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tif ( ! targetAttributes[ key ] ) {\n\n\t\t\t\ttargetGeometry.setAttribute( key, createAttributeClone( attributes[ key ] ) );\n\n\t\t\t}\n\n\t\t\tvalidateAttributes( attributes[ key ], targetAttributes[ key ] );\n\t\t\tcopyAttributeContents( attributes[ key ], targetAttributes[ key ] );\n\n\t\t}\n\n\t\treturn targetGeometry;\n\n\t}\n\n}\n", "\"use strict\";\nimport { MeshBVH, acceleratedRaycast, CENTER } from \"./three-mesh-bvh\";\nexport class ThreeMeshBVHHelper {\n  static assignBVH(mesh, bvh) {\n    mesh.raycast = acceleratedRaycast;\n    mesh.geometry.boundsTree = bvh;\n  }\n  static assignDefaultBVHIfNone(mesh) {\n    let bvh = mesh.geometry.boundsTree || this.defaultBVH(mesh);\n    this.assignBVH(mesh, bvh);\n  }\n  static createBVH(mesh, options) {\n    return new MeshBVH(mesh.geometry, options);\n  }\n  static defaultBVH(mesh) {\n    return this.createBVH(mesh, { strategy: CENTER, maxLeafTris: 10, maxDepth: 40, verbose: false });\n  }\n  static copyBVH(meshDest, meshSrc) {\n    const existingBVH = meshSrc.geometry.boundsTree;\n    if (existingBVH) {\n      meshDest.raycast = acceleratedRaycast;\n      this.assignBVH(meshDest, existingBVH);\n    }\n  }\n  static updateRaycaster(raycaster) {\n    raycaster.firstHitOnly = true;\n  }\n}\n", "import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tInstancedBufferAttribute,\n\tInterleavedBuffer,\n\tInterleavedBufferAttribute,\n\tTriangleFanDrawMode,\n\tTriangleStripDrawMode,\n\tTrianglesDrawMode,\n\tVector3,\n} from 'three';\n\nfunction computeMikkTSpaceTangents( geometry, MikkTSpace, negateSign = true ) {\n\n\tif ( ! MikkTSpace || ! MikkTSpace.isReady ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Initialized MikkTSpace library required.' );\n\n\t}\n\n\tif ( ! geometry.hasAttribute( 'position' ) || ! geometry.hasAttribute( 'normal' ) || ! geometry.hasAttribute( 'uv' ) ) {\n\n\t\tthrow new Error( 'BufferGeometryUtils: Tangents require \"position\", \"normal\", and \"uv\" attributes.' );\n\n\t}\n\n\tfunction getAttributeArray( attribute ) {\n\n\t\tif ( attribute.normalized || attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconst dstArray = new Float32Array( attribute.count * attribute.itemSize );\n\n\t\t\tfor ( let i = 0, j = 0; i < attribute.count; i ++ ) {\n\n\t\t\t\tdstArray[ j ++ ] = attribute.getX( i );\n\t\t\t\tdstArray[ j ++ ] = attribute.getY( i );\n\n\t\t\t\tif ( attribute.itemSize > 2 ) {\n\n\t\t\t\t\tdstArray[ j ++ ] = attribute.getZ( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn dstArray;\n\n\t\t}\n\n\t\tif ( attribute.array instanceof Float32Array ) {\n\n\t\t\treturn attribute.array;\n\n\t\t}\n\n\t\treturn new Float32Array( attribute.array );\n\n\t}\n\n\t// MikkTSpace algorithm requires non-indexed input.\n\n\tconst _geometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\n\t// Compute vertex tangents.\n\n\tconst tangents = MikkTSpace.generateTangents(\n\n\t\tgetAttributeArray( _geometry.attributes.position ),\n\t\tgetAttributeArray( _geometry.attributes.normal ),\n\t\tgetAttributeArray( _geometry.attributes.uv )\n\n\t);\n\n\t// Texture coordinate convention of glTF differs from the apparent\n\t// default of the MikkTSpace library; .w component must be flipped.\n\n\tif ( negateSign ) {\n\n\t\tfor ( let i = 3; i < tangents.length; i += 4 ) {\n\n\t\t\ttangents[ i ] *= - 1;\n\n\t\t}\n\n\t}\n\n\t//\n\n\t_geometry.setAttribute( 'tangent', new BufferAttribute( tangents, 4 ) );\n\n\tif ( geometry !== _geometry ) {\n\n\t\tgeometry.copy( _geometry );\n\n\t}\n\n\treturn geometry;\n\n}\n\n/**\n * @param  {Array<BufferGeometry>} geometries\n * @param  {Boolean} useGroups\n * @return {BufferGeometry}\n */\nfunction mergeGeometries( geometries, useGroups = false ) {\n\n\tconst isIndexed = geometries[ 0 ].index !== null;\n\n\tconst attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\tconst morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\tconst attributes = {};\n\tconst morphAttributes = {};\n\n\tconst morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\tconst mergedGeometry = new BufferGeometry();\n\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\tconst geometry = geometries[ i ];\n\t\tlet attributesCount = 0;\n\n\t\t// ensure that all geometries are indexed, or none\n\n\t\tif ( isIndexed !== ( geometry.index !== null ) ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather attributes, exit early if they're different\n\n\t\tfor ( const name in geometry.attributes ) {\n\n\t\t\tif ( ! attributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. All geometries must have compatible attributes; make sure \"' + name + '\" attribute exists among all geometries, or in none of them.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\tattributesCount ++;\n\n\t\t}\n\n\t\t// ensure geometries have the same number of attributes\n\n\t\tif ( attributesCount !== attributesUsed.size ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. Make sure all geometries have the same number of attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// gather morph attributes, exit early if they're different\n\n\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. .morphTargetsRelative must be consistent throughout all geometries.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfor ( const name in geometry.morphAttributes ) {\n\n\t\t\tif ( ! morphAttributesUsed.has( name ) ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '.  .morphAttributes must be consistent throughout all geometries.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t}\n\n\t\tif ( useGroups ) {\n\n\t\t\tlet count;\n\n\t\t\tif ( isIndexed ) {\n\n\t\t\t\tcount = geometry.index.count;\n\n\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index ' + i + '. The geometry must have either an index or a position attribute' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\toffset += count;\n\n\t\t}\n\n\t}\n\n\t// merge indices\n\n\tif ( isIndexed ) {\n\n\t\tlet indexOffset = 0;\n\t\tconst mergedIndex = [];\n\n\t\tfor ( let i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tconst index = geometries[ i ].index;\n\n\t\t\tfor ( let j = 0; j < index.count; ++ j ) {\n\n\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t}\n\n\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t}\n\n\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t}\n\n\t// merge attributes\n\n\tfor ( const name in attributes ) {\n\n\t\tconst mergedAttribute = mergeAttributes( attributes[ name ] );\n\n\t\tif ( ! mergedAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' attribute.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t}\n\n\t// merge morph attributes\n\n\tfor ( const name in morphAttributes ) {\n\n\t\tconst numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\tif ( numMorphTargets === 0 ) break;\n\n\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\tfor ( let i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\tconst morphAttributesToMerge = [];\n\n\t\t\tfor ( let j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t}\n\n\t\t\tconst mergedMorphAttribute = mergeAttributes( morphAttributesToMerge );\n\n\t\t\tif ( ! mergedMorphAttribute ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the ' + name + ' morphAttribute.' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t}\n\n\t}\n\n\treturn mergedGeometry;\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {BufferAttribute}\n */\nfunction mergeAttributes( attributes ) {\n\n\tlet TypedArray;\n\tlet itemSize;\n\tlet normalized;\n\tlet gpuType = - 1;\n\tlet arrayLength = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( attribute.isInterleavedBufferAttribute ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. InterleavedBufferAttributes are not supported.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\tif ( itemSize !== attribute.itemSize ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\tif ( normalized !== attribute.normalized ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tif ( gpuType === - 1 ) gpuType = attribute.gpuType;\n\t\tif ( gpuType !== attribute.gpuType ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\n\t}\n\n\tconst array = new TypedArray( arrayLength );\n\tlet offset = 0;\n\n\tfor ( let i = 0; i < attributes.length; ++ i ) {\n\n\t\tarray.set( attributes[ i ].array, offset );\n\n\t\toffset += attributes[ i ].array.length;\n\n\t}\n\n\tconst result = new BufferAttribute( array, itemSize, normalized );\n\tif ( gpuType !== undefined ) {\n\n\t\tresult.gpuType = gpuType;\n\n\t}\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferAttribute}\n * @return {BufferAttribute}\n */\nexport function deepCloneAttribute( attribute ) {\n\n\tif ( attribute.isInstancedInterleavedBufferAttribute || attribute.isInterleavedBufferAttribute ) {\n\n\t\treturn deinterleaveAttribute( attribute );\n\n\t}\n\n\tif ( attribute.isInstancedBufferAttribute ) {\n\n\t\treturn new InstancedBufferAttribute().copy( attribute );\n\n\t}\n\n\treturn new BufferAttribute().copy( attribute );\n\n}\n\n/**\n * @param {Array<BufferAttribute>} attributes\n * @return {Array<InterleavedBufferAttribute>}\n */\nfunction interleaveAttributes( attributes ) {\n\n\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t// a set of InterleavedBufferAttributes for each attribute\n\tlet TypedArray;\n\tlet arrayLength = 0;\n\tlet stride = 0;\n\n\t// calculate the length and type of the interleavedBuffer\n\tfor ( let i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\tconst attribute = attributes[ i ];\n\n\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\tconsole.error( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\tarrayLength += attribute.array.length;\n\t\tstride += attribute.itemSize;\n\n\t}\n\n\t// Create the set of buffer attributes\n\tconst interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\tlet offset = 0;\n\tconst res = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\tfor ( let j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\tconst attribute = attributes[ j ];\n\t\tconst itemSize = attribute.itemSize;\n\t\tconst count = attribute.count;\n\t\tconst iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\tres.push( iba );\n\n\t\toffset += itemSize;\n\n\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t// at the appropriate offset\n\t\tfor ( let c = 0; c < count; c ++ ) {\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn res;\n\n}\n\n// returns a new, non-interleaved version of the provided attribute\nexport function deinterleaveAttribute( attribute ) {\n\n\tconst cons = attribute.data.array.constructor;\n\tconst count = attribute.count;\n\tconst itemSize = attribute.itemSize;\n\tconst normalized = attribute.normalized;\n\n\tconst array = new cons( count * itemSize );\n\tlet newAttribute;\n\tif ( attribute.isInstancedInterleavedBufferAttribute ) {\n\n\t\tnewAttribute = new InstancedBufferAttribute( array, itemSize, normalized, attribute.meshPerAttribute );\n\n\t} else {\n\n\t\tnewAttribute = new BufferAttribute( array, itemSize, normalized );\n\n\t}\n\n\tfor ( let i = 0; i < count; i ++ ) {\n\n\t\tnewAttribute.setX( i, attribute.getX( i ) );\n\n\t\tif ( itemSize >= 2 ) {\n\n\t\t\tnewAttribute.setY( i, attribute.getY( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 3 ) {\n\n\t\t\tnewAttribute.setZ( i, attribute.getZ( i ) );\n\n\t\t}\n\n\t\tif ( itemSize >= 4 ) {\n\n\t\t\tnewAttribute.setW( i, attribute.getW( i ) );\n\n\t\t}\n\n\t}\n\n\treturn newAttribute;\n\n}\n\n// deinterleaves all attributes on the geometry\nexport function deinterleaveGeometry( geometry ) {\n\n\tconst attributes = geometry.attributes;\n\tconst morphTargets = geometry.morphTargets;\n\tconst attrMap = new Map();\n\n\tfor ( const key in attributes ) {\n\n\t\tconst attr = attributes[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tattributes[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n\tfor ( const key in morphTargets ) {\n\n\t\tconst attr = morphTargets[ key ];\n\t\tif ( attr.isInterleavedBufferAttribute ) {\n\n\t\t\tif ( ! attrMap.has( attr ) ) {\n\n\t\t\t\tattrMap.set( attr, deinterleaveAttribute( attr ) );\n\n\t\t\t}\n\n\t\t\tmorphTargets[ key ] = attrMap.get( attr );\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @return {number}\n */\nfunction estimateBytesUsed( geometry ) {\n\n\t// Return the estimated memory used by this geometry in bytes\n\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t// for InterleavedBufferAttributes.\n\tlet mem = 0;\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst attr = geometry.getAttribute( name );\n\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t}\n\n\tconst indices = geometry.getIndex();\n\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\treturn mem;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} tolerance\n * @return {BufferGeometry}\n */\nfunction mergeVertices( geometry, tolerance = 1e-4 ) {\n\n\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t// if it's already available.\n\tconst hashToIndex = {};\n\tconst indices = geometry.getIndex();\n\tconst positions = geometry.getAttribute( 'position' );\n\tconst vertexCount = indices ? indices.count : positions.count;\n\n\t// next value for triangle indices\n\tlet nextIndex = 0;\n\n\t// attributes and new attribute arrays\n\tconst attributeNames = Object.keys( geometry.attributes );\n\tconst tmpAttributes = {};\n\tconst tmpMorphAttributes = {};\n\tconst newIndices = [];\n\tconst getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\tconst setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t// Initialize the arrays, allocating space conservatively. Extra\n\t// space will be trimmed in the last step.\n\tfor ( let i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\tconst name = attributeNames[ i ];\n\t\tconst attr = geometry.attributes[ name ];\n\n\t\ttmpAttributes[ name ] = new BufferAttribute(\n\t\t\tnew attr.array.constructor( attr.count * attr.itemSize ),\n\t\t\tattr.itemSize,\n\t\t\tattr.normalized\n\t\t);\n\n\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\tif ( morphAttr ) {\n\n\t\t\ttmpMorphAttributes[ name ] = new BufferAttribute(\n\t\t\t\tnew morphAttr.array.constructor( morphAttr.count * morphAttr.itemSize ),\n\t\t\t\tmorphAttr.itemSize,\n\t\t\t\tmorphAttr.normalized\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// convert the error tolerance to an amount of decimal places to truncate to\n\tconst halfTolerance = tolerance * 0.5;\n\tconst exponent = Math.log10( 1 / tolerance );\n\tconst hashMultiplier = Math.pow( 10, exponent );\n\tconst hashAdditive = halfTolerance * hashMultiplier;\n\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\tconst index = indices ? indices.getX( i ) : i;\n\n\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\tlet hash = '';\n\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\tconst name = attributeNames[ j ];\n\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\tconst itemSize = attribute.itemSize;\n\n\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * hashMultiplier + hashAdditive ) },`;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Add another reference to the vertex if it's already\n\t\t// used by another index\n\t\tif ( hash in hashToIndex ) {\n\n\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t} else {\n\n\t\t\t// copy data to the new index in the temporary attributes\n\t\t\tfor ( let j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tconst name = attributeNames[ j ];\n\t\t\t\tconst attribute = geometry.getAttribute( name );\n\t\t\t\tconst morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\tconst itemSize = attribute.itemSize;\n\t\t\t\tconst newarray = tmpAttributes[ name ];\n\t\t\t\tconst newMorphArrays = tmpMorphAttributes[ name ];\n\n\t\t\t\tfor ( let k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tconst getterFunc = getters[ k ];\n\t\t\t\t\tconst setterFunc = setters[ k ];\n\t\t\t\t\tnewarray[ setterFunc ]( nextIndex, attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\tfor ( let m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\tnewMorphArrays[ m ][ setterFunc ]( nextIndex, morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\tnewIndices.push( nextIndex );\n\t\t\tnextIndex ++;\n\n\t\t}\n\n\t}\n\n\t// generate result BufferGeometry\n\tconst result = geometry.clone();\n\tfor ( const name in geometry.attributes ) {\n\n\t\tconst tmpAttribute = tmpAttributes[ name ];\n\n\t\tresult.setAttribute( name, new BufferAttribute(\n\t\t\ttmpAttribute.array.slice( 0, nextIndex * tmpAttribute.itemSize ),\n\t\t\ttmpAttribute.itemSize,\n\t\t\ttmpAttribute.normalized,\n\t\t) );\n\n\t\tif ( ! ( name in tmpMorphAttributes ) ) continue;\n\n\t\tfor ( let j = 0; j < tmpMorphAttributes[ name ].length; j ++ ) {\n\n\t\t\tconst tmpMorphAttribute = tmpMorphAttributes[ name ][ j ];\n\n\t\t\tresult.morphAttributes[ name ][ j ] = new BufferAttribute(\n\t\t\t\ttmpMorphAttribute.array.slice( 0, nextIndex * tmpMorphAttribute.itemSize ),\n\t\t\t\ttmpMorphAttribute.itemSize,\n\t\t\t\ttmpMorphAttribute.normalized,\n\t\t\t);\n\n\t\t}\n\n\t}\n\n\t// indices\n\n\tresult.setIndex( newIndices );\n\n\treturn result;\n\n}\n\n/**\n * @param {BufferGeometry} geometry\n * @param {number} drawMode\n * @return {BufferGeometry}\n */\nfunction toTrianglesDrawMode( geometry, drawMode ) {\n\n\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\treturn geometry;\n\n\t}\n\n\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\tlet index = geometry.getIndex();\n\n\t\t// generate index if not present\n\n\t\tif ( index === null ) {\n\n\t\t\tconst indices = [];\n\n\t\t\tconst position = geometry.getAttribute( 'position' );\n\n\t\t\tif ( position !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\tindices.push( i );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t} else {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\treturn geometry;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tconst numberOfTriangles = index.count - 2;\n\t\tconst newIndices = [];\n\n\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\tfor ( let i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\tfor ( let i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t}\n\n\t\t// build final geometry\n\n\t\tconst newGeometry = geometry.clone();\n\t\tnewGeometry.setIndex( newIndices );\n\t\tnewGeometry.clearGroups();\n\n\t\treturn newGeometry;\n\n\t} else {\n\n\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\treturn geometry;\n\n\t}\n\n}\n\n/**\n * Calculates the morphed attributes of a morphed/skinned BufferGeometry.\n * Helpful for Raytracing or Decals.\n * @param {Mesh | Line | Points} object An instance of Mesh, Line or Points.\n * @return {Object} An Object with original position/normal attributes and morphed ones.\n */\nfunction computeMorphedAttributes( object ) {\n\n\tconst _vA = new Vector3();\n\tconst _vB = new Vector3();\n\tconst _vC = new Vector3();\n\n\tconst _tempA = new Vector3();\n\tconst _tempB = new Vector3();\n\tconst _tempC = new Vector3();\n\n\tconst _morphA = new Vector3();\n\tconst _morphB = new Vector3();\n\tconst _morphC = new Vector3();\n\n\tfunction _calculateMorphedAttributeData(\n\t\tobject,\n\t\tattribute,\n\t\tmorphAttribute,\n\t\tmorphTargetsRelative,\n\t\ta,\n\t\tb,\n\t\tc,\n\t\tmodifiedAttributeArray\n\t) {\n\n\t\t_vA.fromBufferAttribute( attribute, a );\n\t\t_vB.fromBufferAttribute( attribute, b );\n\t\t_vC.fromBufferAttribute( attribute, c );\n\n\t\tconst morphInfluences = object.morphTargetInfluences;\n\n\t\tif ( morphAttribute && morphInfluences ) {\n\n\t\t\t_morphA.set( 0, 0, 0 );\n\t\t\t_morphB.set( 0, 0, 0 );\n\t\t\t_morphC.set( 0, 0, 0 );\n\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\n\n\t\t\t\tconst influence = morphInfluences[ i ];\n\t\t\t\tconst morph = morphAttribute[ i ];\n\n\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t_tempA.fromBufferAttribute( morph, a );\n\t\t\t\t_tempB.fromBufferAttribute( morph, b );\n\t\t\t\t_tempC.fromBufferAttribute( morph, c );\n\n\t\t\t\tif ( morphTargetsRelative ) {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB, influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC, influence );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( _vA ), influence );\n\t\t\t\t\t_morphB.addScaledVector( _tempB.sub( _vB ), influence );\n\t\t\t\t\t_morphC.addScaledVector( _tempC.sub( _vC ), influence );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t_vA.add( _morphA );\n\t\t\t_vB.add( _morphB );\n\t\t\t_vC.add( _morphC );\n\n\t\t}\n\n\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\tobject.applyBoneTransform( a, _vA );\n\t\t\tobject.applyBoneTransform( b, _vB );\n\t\t\tobject.applyBoneTransform( c, _vC );\n\n\t\t}\n\n\t\tmodifiedAttributeArray[ a * 3 + 0 ] = _vA.x;\n\t\tmodifiedAttributeArray[ a * 3 + 1 ] = _vA.y;\n\t\tmodifiedAttributeArray[ a * 3 + 2 ] = _vA.z;\n\t\tmodifiedAttributeArray[ b * 3 + 0 ] = _vB.x;\n\t\tmodifiedAttributeArray[ b * 3 + 1 ] = _vB.y;\n\t\tmodifiedAttributeArray[ b * 3 + 2 ] = _vB.z;\n\t\tmodifiedAttributeArray[ c * 3 + 0 ] = _vC.x;\n\t\tmodifiedAttributeArray[ c * 3 + 1 ] = _vC.y;\n\t\tmodifiedAttributeArray[ c * 3 + 2 ] = _vC.z;\n\n\t}\n\n\tconst geometry = object.geometry;\n\tconst material = object.material;\n\n\tlet a, b, c;\n\tconst index = geometry.index;\n\tconst positionAttribute = geometry.attributes.position;\n\tconst morphPosition = geometry.morphAttributes.position;\n\tconst morphTargetsRelative = geometry.morphTargetsRelative;\n\tconst normalAttribute = geometry.attributes.normal;\n\tconst morphNormal = geometry.morphAttributes.position;\n\n\tconst groups = geometry.groups;\n\tconst drawRange = geometry.drawRange;\n\tlet i, j, il, jl;\n\tlet group;\n\tlet start, end;\n\n\tconst modifiedPosition = new Float32Array( positionAttribute.count * positionAttribute.itemSize );\n\tconst modifiedNormal = new Float32Array( normalAttribute.count * normalAttribute.itemSize );\n\n\tif ( index !== null ) {\n\n\t\t// indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = index.getX( j );\n\t\t\t\t\tb = index.getX( j + 1 );\n\t\t\t\t\tc = index.getX( j + 2 );\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( index.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = index.getX( i );\n\t\t\t\tb = index.getX( i + 1 );\n\t\t\t\tc = index.getX( i + 2 );\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\t// non-indexed buffer geometry\n\n\t\tif ( Array.isArray( material ) ) {\n\n\t\t\tfor ( i = 0, il = groups.length; i < il; i ++ ) {\n\n\t\t\t\tgroup = groups[ i ];\n\n\t\t\t\tstart = Math.max( group.start, drawRange.start );\n\t\t\t\tend = Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) );\n\n\t\t\t\tfor ( j = start, jl = end; j < jl; j += 3 ) {\n\n\t\t\t\t\ta = j;\n\t\t\t\t\tb = j + 1;\n\t\t\t\t\tc = j + 2;\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tpositionAttribute,\n\t\t\t\t\t\tmorphPosition,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedPosition\n\t\t\t\t\t);\n\n\t\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\t\tobject,\n\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\tmorphNormal,\n\t\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\t\ta, b, c,\n\t\t\t\t\t\tmodifiedNormal\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tstart = Math.max( 0, drawRange.start );\n\t\t\tend = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );\n\n\t\t\tfor ( i = start, il = end; i < il; i += 3 ) {\n\n\t\t\t\ta = i;\n\t\t\t\tb = i + 1;\n\t\t\t\tc = i + 2;\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tpositionAttribute,\n\t\t\t\t\tmorphPosition,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedPosition\n\t\t\t\t);\n\n\t\t\t\t_calculateMorphedAttributeData(\n\t\t\t\t\tobject,\n\t\t\t\t\tnormalAttribute,\n\t\t\t\t\tmorphNormal,\n\t\t\t\t\tmorphTargetsRelative,\n\t\t\t\t\ta, b, c,\n\t\t\t\t\tmodifiedNormal\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tconst morphedPositionAttribute = new Float32BufferAttribute( modifiedPosition, 3 );\n\tconst morphedNormalAttribute = new Float32BufferAttribute( modifiedNormal, 3 );\n\n\treturn {\n\n\t\tpositionAttribute: positionAttribute,\n\t\tnormalAttribute: normalAttribute,\n\t\tmorphedPositionAttribute: morphedPositionAttribute,\n\t\tmorphedNormalAttribute: morphedNormalAttribute\n\n\t};\n\n}\n\nfunction mergeGroups( geometry ) {\n\n\tif ( geometry.groups.length === 0 ) {\n\n\t\tconsole.warn( 'THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.' );\n\t\treturn geometry;\n\n\t}\n\n\tlet groups = geometry.groups;\n\n\t// sort groups by material index\n\n\tgroups = groups.sort( ( a, b ) => {\n\n\t\tif ( a.materialIndex !== b.materialIndex ) return a.materialIndex - b.materialIndex;\n\n\t\treturn a.start - b.start;\n\n\t} );\n\n\t// create index for non-indexed geometries\n\n\tif ( geometry.getIndex() === null ) {\n\n\t\tconst positionAttribute = geometry.getAttribute( 'position' );\n\t\tconst indices = [];\n\n\t\tfor ( let i = 0; i < positionAttribute.count; i += 3 ) {\n\n\t\t\tindices.push( i, i + 1, i + 2 );\n\n\t\t}\n\n\t\tgeometry.setIndex( indices );\n\n\t}\n\n\t// sort index\n\n\tconst index = geometry.getIndex();\n\n\tconst newIndices = [];\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tconst groupStart = group.start;\n\t\tconst groupLength = groupStart + group.count;\n\n\t\tfor ( let j = groupStart; j < groupLength; j ++ ) {\n\n\t\t\tnewIndices.push( index.getX( j ) );\n\n\t\t}\n\n\t}\n\n\tgeometry.dispose(); // Required to force buffer recreation\n\tgeometry.setIndex( newIndices );\n\n\t// update groups indices\n\n\tlet start = 0;\n\n\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tgroup.start = start;\n\t\tstart += group.count;\n\n\t}\n\n\t// merge groups\n\n\tlet currentGroup = groups[ 0 ];\n\n\tgeometry.groups = [ currentGroup ];\n\n\tfor ( let i = 1; i < groups.length; i ++ ) {\n\n\t\tconst group = groups[ i ];\n\n\t\tif ( currentGroup.materialIndex === group.materialIndex ) {\n\n\t\t\tcurrentGroup.count += group.count;\n\n\t\t} else {\n\n\t\t\tcurrentGroup = group;\n\t\t\tgeometry.groups.push( currentGroup );\n\n\t\t}\n\n\t}\n\n\treturn geometry;\n\n}\n\n\n/**\n * Modifies the supplied geometry if it is non-indexed, otherwise creates a new,\n * non-indexed geometry. Returns the geometry with smooth normals everywhere except\n * faces that meet at an angle greater than the crease angle.\n *\n * @param {BufferGeometry} geometry\n * @param {number} [creaseAngle]\n * @return {BufferGeometry}\n */\nfunction toCreasedNormals( geometry, creaseAngle = Math.PI / 3 /* 60 degrees */ ) {\n\n\tconst creaseDot = Math.cos( creaseAngle );\n\tconst hashMultiplier = ( 1 + 1e-10 ) * 1e2;\n\n\t// reusable vectors\n\tconst verts = [ new Vector3(), new Vector3(), new Vector3() ];\n\tconst tempVec1 = new Vector3();\n\tconst tempVec2 = new Vector3();\n\tconst tempNorm = new Vector3();\n\tconst tempNorm2 = new Vector3();\n\n\t// hashes a vector\n\tfunction hashVertex( v ) {\n\n\t\tconst x = ~ ~ ( v.x * hashMultiplier );\n\t\tconst y = ~ ~ ( v.y * hashMultiplier );\n\t\tconst z = ~ ~ ( v.z * hashMultiplier );\n\t\treturn `${x},${y},${z}`;\n\n\t}\n\n\t// BufferGeometry.toNonIndexed() warns if the geometry is non-indexed\n\t// and returns the original geometry\n\tconst resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;\n\tconst posAttr = resultGeometry.attributes.position;\n\tconst vertexMap = {};\n\n\t// find all the normals shared by commonly located vertices\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\t// add the normal to the map for all vertices\n\t\tconst normal = new Vector3().crossVectors( tempVec1, tempVec2 ).normalize();\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tif ( ! ( hash in vertexMap ) ) {\n\n\t\t\t\tvertexMap[ hash ] = [];\n\n\t\t\t}\n\n\t\t\tvertexMap[ hash ].push( normal );\n\n\t\t}\n\n\t}\n\n\t// average normals from all vertices that share a common location if they are within the\n\t// provided crease threshold\n\tconst normalArray = new Float32Array( posAttr.count * 3 );\n\tconst normAttr = new BufferAttribute( normalArray, 3, false );\n\tfor ( let i = 0, l = posAttr.count / 3; i < l; i ++ ) {\n\n\t\t// get the face normal for this vertex\n\t\tconst i3 = 3 * i;\n\t\tconst a = verts[ 0 ].fromBufferAttribute( posAttr, i3 + 0 );\n\t\tconst b = verts[ 1 ].fromBufferAttribute( posAttr, i3 + 1 );\n\t\tconst c = verts[ 2 ].fromBufferAttribute( posAttr, i3 + 2 );\n\n\t\ttempVec1.subVectors( c, b );\n\t\ttempVec2.subVectors( a, b );\n\n\t\ttempNorm.crossVectors( tempVec1, tempVec2 ).normalize();\n\n\t\t// average all normals that meet the threshold and set the normal value\n\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\tconst vert = verts[ n ];\n\t\t\tconst hash = hashVertex( vert );\n\t\t\tconst otherNormals = vertexMap[ hash ];\n\t\t\ttempNorm2.set( 0, 0, 0 );\n\n\t\t\tfor ( let k = 0, lk = otherNormals.length; k < lk; k ++ ) {\n\n\t\t\t\tconst otherNorm = otherNormals[ k ];\n\t\t\t\tif ( tempNorm.dot( otherNorm ) > creaseDot ) {\n\n\t\t\t\t\ttempNorm2.add( otherNorm );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\ttempNorm2.normalize();\n\t\t\tnormAttr.setXYZ( i3 + n, tempNorm2.x, tempNorm2.y, tempNorm2.z );\n\n\t\t}\n\n\t}\n\n\tresultGeometry.setAttribute( 'normal', normAttr );\n\treturn resultGeometry;\n\n}\n\nfunction mergeBufferGeometries( geometries, useGroups = false ) {\n\n\tconsole.warn( 'THREE.BufferGeometryUtils: mergeBufferGeometries() has been renamed to mergeGeometries().' ); // @deprecated, r151\n\treturn mergeGeometries( geometries, useGroups );\n\n}\n\nfunction mergeBufferAttributes( attributes ) {\n\n\tconsole.warn( 'THREE.BufferGeometryUtils: mergeBufferAttributes() has been renamed to mergeAttributes().' ); // @deprecated, r151\n\treturn mergeAttributes( attributes );\n\n}\n\nexport {\n\tcomputeMikkTSpaceTangents,\n\tmergeGeometries,\n\tmergeBufferGeometries,\n\tmergeAttributes,\n\tmergeBufferAttributes,\n\tinterleaveAttributes,\n\testimateBytesUsed,\n\tmergeVertices,\n\ttoTrianglesDrawMode,\n\tcomputeMorphedAttributes,\n\tmergeGroups,\n\ttoCreasedNormals\n};\n", "\"use strict\";\nimport { rangeWithEnd } from \"../../ArrayUtils\";\nconst POSITION = \"position\";\nexport class CoreGeometryIndexBuilder {\n  static createIndexIfNone(geometry) {\n    if (!geometry.index) {\n      const position = geometry.getAttribute(POSITION);\n      if (position) {\n        const position_array = position.array;\n        geometry.setIndex(rangeWithEnd(position_array.length / 3));\n      }\n    }\n  }\n}\n", "\"use strict\";\nimport { Mesh } from \"three\";\nimport { mergeGeometries } from \"three/examples/jsm/utils/BufferGeometryUtils\";\nimport { CoreGeometryIndexBuilder } from \"../../../util/IndexBuilder\";\nimport { pointsFromBufferGeometry } from \"../CoreThreejsPointUtils\";\nimport { ThreejsPoint } from \"../ThreejsPoint\";\nconst dummyMesh = new Mesh();\nexport class CoreGeometryBuilderMerge {\n  static merge(geometries) {\n    if (geometries.length === 0) {\n      return;\n    }\n    for (const geometry of geometries) {\n      CoreGeometryIndexBuilder.createIndexIfNone(geometry);\n    }\n    dummyMesh.geometry = geometries[0];\n    const indexed_attribute_names = ThreejsPoint.indexedAttributeNames(dummyMesh);\n    const new_values_by_attribute_name = {};\n    for (const indexed_attribute_name of indexed_attribute_names) {\n      const index_by_values = {};\n      const all_geometries_points = [];\n      for (const geometry of geometries) {\n        const points = pointsFromBufferGeometry(geometry);\n        for (const point of points) {\n          all_geometries_points.push(point);\n          const value = point.indexedAttribValue(indexed_attribute_name);\n          if (value) {\n            index_by_values[value] != null ? index_by_values[value] : index_by_values[value] = Object.keys(index_by_values).length;\n          }\n        }\n      }\n      const values = Object.keys(index_by_values);\n      for (const point of all_geometries_points) {\n        const value = point.indexedAttribValue(indexed_attribute_name);\n        if (value) {\n          const new_index = index_by_values[value];\n          point.setAttribIndex(indexed_attribute_name, new_index);\n        }\n      }\n      new_values_by_attribute_name[indexed_attribute_name] = values;\n    }\n    const mergedGeometry = mergeGeometries(geometries);\n    dummyMesh.geometry = mergedGeometry;\n    Object.keys(new_values_by_attribute_name).forEach((indexed_attribute_name) => {\n      const values = new_values_by_attribute_name[indexed_attribute_name];\n      ThreejsPoint.setIndexedAttributeValues(dummyMesh, indexed_attribute_name, values);\n    });\n    if (mergedGeometry) {\n      delete mergedGeometry.userData.mergedUserData;\n    }\n    return mergedGeometry;\n  }\n}\n", "\"use strict\";\nexport var CadGeometryType = /* @__PURE__ */ ((CadGeometryType2) => {\n  CadGeometryType2[\"POINT_2D\"] = \"CADPoint2D\";\n  CadGeometryType2[\"CURVE_2D\"] = \"CADCurve2D\";\n  CadGeometryType2[\"VERTEX\"] = \"CADVertex\";\n  CadGeometryType2[\"EDGE\"] = \"CADEdge\";\n  CadGeometryType2[\"WIRE\"] = \"CADWire\";\n  CadGeometryType2[\"FACE\"] = \"CADFace\";\n  CadGeometryType2[\"SHELL\"] = \"CADShell\";\n  CadGeometryType2[\"SOLID\"] = \"CADSolid\";\n  CadGeometryType2[\"COMPSOLID\"] = \"CADCompsolid\";\n  CadGeometryType2[\"COMPOUND\"] = \"CADCompound\";\n  return CadGeometryType2;\n})(CadGeometryType || {});\nconst CAD_GEOMETRY_TYPES = [\n  \"CADPoint2D\" /* POINT_2D */,\n  \"CADCurve2D\" /* CURVE_2D */,\n  \"CADVertex\" /* VERTEX */,\n  \"CADEdge\" /* EDGE */,\n  \"CADWire\" /* WIRE */,\n  \"CADFace\" /* FACE */,\n  \"CADShell\" /* SHELL */,\n  \"CADSolid\" /* SOLID */,\n  \"CADCompsolid\" /* COMPSOLID */,\n  \"CADCompound\" /* COMPOUND */\n];\nexport const CAD_GEOMETRY_TYPES_SET = new Set(CAD_GEOMETRY_TYPES);\nexport const CAD_GEOMETRY_TYPES_SHAPE = [\n  \"CADVertex\" /* VERTEX */,\n  \"CADEdge\" /* EDGE */,\n  \"CADWire\" /* WIRE */,\n  \"CADFace\" /* FACE */,\n  \"CADShell\" /* SHELL */,\n  \"CADSolid\" /* SOLID */,\n  \"CADCompsolid\" /* COMPSOLID */,\n  \"CADCompound\" /* COMPOUND */\n];\nexport const CAD_GEOMETRY_TYPES_SET_SHAPE = new Set(CAD_GEOMETRY_TYPES_SHAPE);\nfunction _createShapeTypeToCadGeometryTypeMap(oc) {\n  const shapeEnum = oc.TopAbs_ShapeEnum;\n  const map = /* @__PURE__ */ new Map([\n    [shapeEnum.TopAbs_VERTEX, \"CADVertex\" /* VERTEX */],\n    [shapeEnum.TopAbs_EDGE, \"CADEdge\" /* EDGE */],\n    [shapeEnum.TopAbs_WIRE, \"CADWire\" /* WIRE */],\n    [shapeEnum.TopAbs_FACE, \"CADFace\" /* FACE */],\n    [shapeEnum.TopAbs_SHELL, \"CADShell\" /* SHELL */],\n    [shapeEnum.TopAbs_SOLID, \"CADSolid\" /* SOLID */],\n    [shapeEnum.TopAbs_COMPSOLID, \"CADCompsolid\" /* COMPSOLID */],\n    [shapeEnum.TopAbs_COMPOUND, \"CADCompound\" /* COMPOUND */]\n  ]);\n  return map;\n}\nfunction _createCastMapFromCadGeometryTypeMap(oc) {\n  const shapeEnum = oc.TopAbs_ShapeEnum;\n  const map = /* @__PURE__ */ new Map([\n    [shapeEnum.TopAbs_VERTEX, oc.TopoDS.Vertex_1],\n    [shapeEnum.TopAbs_EDGE, oc.TopoDS.Edge_1],\n    [shapeEnum.TopAbs_WIRE, oc.TopoDS.Wire_1],\n    [shapeEnum.TopAbs_FACE, oc.TopoDS.Face_1],\n    [shapeEnum.TopAbs_SHELL, oc.TopoDS.Shell_1],\n    [shapeEnum.TopAbs_SOLID, oc.TopoDS.Solid_1],\n    [shapeEnum.TopAbs_COMPSOLID, oc.TopoDS.CompSolid_1],\n    [shapeEnum.TopAbs_COMPOUND, oc.TopoDS.Compound_1]\n  ]);\n  return map;\n}\nlet shapeTypeToCadGeometryTypeMap;\nlet shapeCasterByCadGeometryTypeMap;\nexport function cadGeometryTypeFromShape(oc, shape) {\n  shapeTypeToCadGeometryTypeMap = shapeTypeToCadGeometryTypeMap || _createShapeTypeToCadGeometryTypeMap(oc);\n  return shapeTypeToCadGeometryTypeMap.get(shape.ShapeType());\n}\nexport function cadDowncast(oc, shape) {\n  shapeCasterByCadGeometryTypeMap = shapeCasterByCadGeometryTypeMap || _createCastMapFromCadGeometryTypeMap(oc);\n  const caster = shapeCasterByCadGeometryTypeMap.get(shape.ShapeType());\n  return caster(shape);\n}\nexport const _createCadNumberHandle = () => ({ current: 0 });\nexport const _createCadVector3Handle = () => ({\n  x: _createCadNumberHandle(),\n  y: _createCadNumberHandle(),\n  z: _createCadNumberHandle()\n});\nexport const _createCadBox3Handle = () => ({\n  min: _createCadVector3Handle(),\n  max: _createCadVector3Handle()\n});\nexport class CadGC {\n  static withGC(callback) {\n    const deletables = /* @__PURE__ */ new Set();\n    function r(deletable) {\n      deletables.add(deletable);\n      return deletable;\n    }\n    const result = callback(r);\n    deletables.forEach((deletable) => {\n      deletable.delete();\n    });\n    deletables.clear();\n    return result;\n  }\n}\n", "\"use strict\";\nimport { CadGeometryType, CAD_GEOMETRY_TYPES_SET, CAD_GEOMETRY_TYPES_SET_SHAPE } from \"./CadCommon\";\nimport { CoreType } from \"../../../Type\";\nexport function isCADObject(o) {\n  return CAD_GEOMETRY_TYPES_SET.has(o.type);\n}\nexport class CoreCadType {\n  static isPoint2d(object) {\n    return object.type == CadGeometryType.POINT_2D;\n  }\n  static isGeom2dCurve(object) {\n    return object.type == CadGeometryType.CURVE_2D;\n  }\n  static isVertex(object) {\n    return object.type == CadGeometryType.VERTEX;\n  }\n  static isEdge(object) {\n    return object.type == CadGeometryType.EDGE;\n  }\n  static isWire(object) {\n    return object.type == CadGeometryType.WIRE;\n  }\n  static isFace(object) {\n    return object.type == CadGeometryType.FACE;\n  }\n  static isShell(object) {\n    return object.type == CadGeometryType.SHELL;\n  }\n  static isSolid(object) {\n    return object.type == CadGeometryType.SOLID;\n  }\n  static isCompsolid(object) {\n    return object.type == CadGeometryType.COMPSOLID;\n  }\n  static isCompound(object) {\n    return object.type == CadGeometryType.COMPOUND;\n  }\n  static isShape(object) {\n    return CAD_GEOMETRY_TYPES_SET_SHAPE.has(object.type);\n  }\n  static isGeometryShape(geometry) {\n    return CoreType.isFunction(geometry.ShapeType);\n  }\n}\n", "\"use strict\";\nimport { geometries } from \"@jscad/modeling\";\nimport { CsgGeometryType, CSG_GEOMETRY_TYPES_SET } from \"./CsgCommon\";\nexport function isCSGObject(o) {\n  return CSG_GEOMETRY_TYPES_SET.has(o.type);\n}\nexport function csgIsPath2(geometry) {\n  return geometries.path2.isA(geometry);\n}\nexport function csgIsGeom2(geometry) {\n  return geometries.geom2.isA(geometry);\n}\nexport function csgIsGeom3(geometry) {\n  return geometries.geom3.isA(geometry);\n}\nexport function csgGeometryTypeFromGeometry(geometry) {\n  if (csgIsPath2(geometry)) {\n    return CsgGeometryType.PATH2;\n  }\n  if (csgIsGeom2(geometry)) {\n    return CsgGeometryType.GEOM2;\n  }\n  if (csgIsGeom3(geometry)) {\n    return CsgGeometryType.GEOM3;\n  }\n  return CsgGeometryType.GEOM3;\n}\n", "\"use strict\";\nexport var CsgGeometryType = /* @__PURE__ */ ((CsgGeometryType2) => {\n  CsgGeometryType2[\"PATH2\"] = \"CSGPath2\";\n  CsgGeometryType2[\"GEOM2\"] = \"CSGGeom2\";\n  CsgGeometryType2[\"GEOM3\"] = \"CSGGeom3\";\n  return CsgGeometryType2;\n})(CsgGeometryType || {});\nconst CSG_GEOMETRY_TYPES = [\"CSGPath2\" /* PATH2 */, \"CSGGeom2\" /* GEOM2 */, \"CSGGeom3\" /* GEOM3 */];\nexport const CSG_GEOMETRY_TYPES_SET = new Set(CSG_GEOMETRY_TYPES);\n", "\"use strict\";\nimport { CoreObjectType } from \"../../ObjectContent\";\nexport function isTetObject(o) {\n  return o.type == CoreObjectType.TET;\n}\n", "\"use strict\";\nimport { Box3, Vector2, Vector3, Vector4 } from \"three\";\nimport { CoreAttribute } from \"./Attribute\";\nimport { CoreString } from \"../String\";\nimport { AttribType, AttribClass } from \"./Constant\";\nimport { CoreType } from \"../Type\";\nimport { arraySum, arrayCompact, arrayPushItems, arrayCopy } from \"../ArrayUtils\";\nimport { Poly } from \"../../engine/Poly\";\nimport { isObject3D } from \"./ObjectContent\";\nimport { coreObjectClassFactory, coreObjectInstanceFactory } from \"./CoreObjectFactory\";\nimport {\n  coreObjectAttributeTypesByName,\n  coreObjectsAttribNames,\n  coreObjectsAttribSizesByName\n} from \"./entities/object/BaseCoreObjectUtils\";\nimport { attribValueNonPrimitive, cloneAttribValue } from \"./entities/utils/Common\";\nimport { object3DHasGeometry } from \"./GeometryUtils\";\nimport { CoreEntity } from \"./CoreEntity\";\nimport {\n  pointsCountFromObject,\n  pointAttributeNames,\n  hasPointAttribute,\n  pointAttributeType,\n  pointAttributeSizes,\n  pointAttributeSize,\n  pointsFromObjects\n} from \"./entities/point/CorePointUtils\";\nimport { CoreCadType, isCADObject } from \"./modules/cad/CadCoreType\";\nimport { isCSGObject } from \"./modules/csg/CsgCoreType\";\nimport { isQuadObject, isQuadOrThreejsObject } from \"./modules/quad/QuadCoreType\";\nimport { isTetObject } from \"./modules/tet/TetCoreType\";\nimport { TypeAssert } from \"../../engine/poly/Assert\";\nimport { ThreejsCoreObject } from \"./modules/three/ThreejsCoreObject\";\nimport { uniqRelatedEntities } from \"./entities/utils/Common\";\nconst tmpBox3 = new Box3();\nconst tmpPos = new Vector3();\nconst _indices = [];\nconst _points = [];\nconst _relatedPoints = [];\nconst _relatedVertices = [];\nconst _relatedPrimitives = [];\nconst _relatedPrimitivesForObject = [];\nfunction objectTotalPointsCount(object) {\n  let sum = 0;\n  object.traverse((child) => {\n    sum += pointsCountFromObject(child);\n  });\n  return sum;\n}\nexport class CoreGroup extends CoreEntity {\n  constructor() {\n    super(void 0, 0);\n    this._allObjects = [];\n    this._attributes = {};\n    this.touch();\n  }\n  dispose() {\n    if (this._allObjects) {\n      for (const object of this._allObjects) {\n        if (object.dispose) {\n          object.dispose();\n        }\n      }\n    }\n    this._allObjects.length = 0;\n  }\n  geometry() {\n    return null;\n  }\n  builder() {\n    return void 0;\n  }\n  //\n  //\n  // TIMESTAMP\n  //\n  //\n  timestamp() {\n    return this._timestamp;\n  }\n  touch() {\n    const performance = Poly.performance.performanceManager();\n    this._timestamp = performance.now();\n  }\n  // reset() {\n  // \t// this.resetBoundingBox();\n  // \t// this._bounding_sphere = undefined;\n  // \t// this._coreGeometries = undefined;\n  // \t// this._coreObjects = undefined;\n  // }\n  resetBoundingBox() {\n  }\n  //\n  //\n  // CLONE\n  //\n  //\n  clone() {\n    const coreGroup = new CoreGroup();\n    if (this._allObjects) {\n      const allCoreObjects = this.allCoreObjects();\n      const clonedObjects = [];\n      for (const coreObject of allCoreObjects) {\n        const clonedObject = coreObject.clone().object();\n        if (clonedObject) {\n          clonedObjects.push(clonedObject);\n        }\n      }\n      coreGroup.setAllObjects(clonedObjects);\n    }\n    const attribNames = this.attribNames();\n    for (const attribName of attribNames) {\n      const value = this.attribValue(attribName);\n      coreGroup.addAttribute(attribName, value);\n    }\n    return coreGroup;\n  }\n  //\n  //\n  // ALL OBJECTS\n  //\n  //\n  setAllObjects(objects) {\n    this._allObjects = objects;\n    this.touch();\n  }\n  allObjects() {\n    return this._allObjects;\n  }\n  allCoreObjects() {\n    var _a;\n    return (_a = this.allObjects()) == null ? void 0 : _a.map((o, i) => coreObjectInstanceFactory(o, i));\n  }\n  //\n  //\n  // CAD OBJECTS\n  //\n  //\n  cadObjects() {\n    var _a;\n    const list = ((_a = this._allObjects) == null ? void 0 : _a.filter(isCADObject)) || void 0;\n    return list;\n  }\n  cadObjectsWithShape() {\n    var _a;\n    return (_a = this.cadObjects()) == null ? void 0 : _a.filter((o) => CoreCadType.isShape(o));\n  }\n  cadCoreObjects() {\n    var _a;\n    return (_a = this.cadObjects()) == null ? void 0 : _a.map((o, i) => coreObjectInstanceFactory(o, i));\n  }\n  //\n  //\n  // CSG OBJECTS\n  //\n  //\n  csgObjects() {\n    var _a;\n    const list = ((_a = this._allObjects) == null ? void 0 : _a.filter(isCSGObject)) || void 0;\n    return list;\n  }\n  csgCoreObjects() {\n    var _a;\n    return (_a = this.csgObjects()) == null ? void 0 : _a.map((o, i) => coreObjectInstanceFactory(o, i));\n  }\n  //\n  //\n  // QUAD OBJECTS\n  //\n  //\n  quadObjects() {\n    var _a;\n    const list = ((_a = this._allObjects) == null ? void 0 : _a.filter(isQuadObject)) || void 0;\n    return list;\n  }\n  quadCoreObjects() {\n    var _a;\n    return (_a = this.quadObjects()) == null ? void 0 : _a.map((o, i) => coreObjectInstanceFactory(o, i));\n  }\n  threejsOrQuadObjects() {\n    return this._allObjects ? this._allObjects.filter(isQuadOrThreejsObject) : [];\n  }\n  threejsOrQuadCoreObjects() {\n    return this.threejsOrQuadObjects().map((o, i) => coreObjectInstanceFactory(o, i));\n  }\n  //\n  //\n  // SDF OBJECTS\n  //\n  //\n  // SDFObjects() {\n  // \tconst list = this._allObjects?.filter((o) => SDF_OBJECT_TYPES_SET.has(o.type as SDFObjectType)) || undefined;\n  // \treturn list as SDFObject[] | undefined;\n  // }\n  // SDFCoreObjects() {\n  // \treturn this.csgObjects()?.map((o, i) => coreObjectInstanceFactory(o, i));\n  // }\n  //\n  //\n  // TET OBJECTS\n  //\n  //\n  tetObjects() {\n    var _a;\n    const list = ((_a = this._allObjects) == null ? void 0 : _a.filter(isTetObject)) || void 0;\n    return list;\n  }\n  tetCoreObjects() {\n    var _a;\n    return (_a = this.tetObjects()) == null ? void 0 : _a.map((o, i) => coreObjectInstanceFactory(o, i));\n  }\n  //\n  //\n  // THREEJS OBJECTS\n  //\n  //\n  threejsObjects() {\n    return this._allObjects ? this._allObjects.filter(isObject3D) : [];\n  }\n  threejsObjectsWithGeo() {\n    return this.threejsObjects().filter(object3DHasGeometry);\n  }\n  threejsCoreObjects() {\n    return this.threejsObjects().map((o, i) => new ThreejsCoreObject(o, i));\n  }\n  geometries() {\n    return this.threejsObjectsWithGeo().map((o) => o.geometry);\n  }\n  // coreGeometries(): CoreGeometry[] {\n  // \treturn this.geometries().map((g) => new CoreGeometry(g));\n  // }\n  //\n  //\n  // POINTS\n  //\n  //\n  points(target) {\n    return pointsFromObjects(this.allObjects(), target);\n  }\n  pointsCount() {\n    return arraySum(this.allObjects().map((g) => pointsCountFromObject(g)));\n  }\n  totalPointsCount() {\n    const threejsObjects = this.threejsObjects();\n    let sum = 0;\n    for (const object of threejsObjects) {\n      sum += objectTotalPointsCount(object);\n    }\n    return sum;\n  }\n  pointsFromGroup(group, target) {\n    if (group) {\n      CoreString.indices(group, _indices);\n      this.points(_points);\n      const compactPoints = [];\n      const pointsInGroup = arrayCompact(\n        _indices.map((i) => _points[i]),\n        compactPoints\n      );\n      target.length = 0;\n      arrayPushItems(pointsInGroup, target);\n      return target;\n    } else {\n      return this.points(target);\n    }\n  }\n  pointAttribNames() {\n    const firstObject = this.allObjects()[0];\n    if (firstObject) {\n      return pointAttributeNames(firstObject);\n    } else {\n      return [];\n    }\n  }\n  hasPointAttrib(attribName) {\n    const firstObject = this.allObjects()[0];\n    if (firstObject) {\n      return hasPointAttribute(firstObject, attribName);\n    } else {\n      return false;\n    }\n  }\n  pointAttribType(attribName) {\n    const firstObject = this.allObjects()[0];\n    if (firstObject) {\n      return pointAttributeType(firstObject, attribName);\n    } else {\n      return AttribType.NUMERIC;\n    }\n  }\n  pointAttribNamesMatchingMask(masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.pointAttribNames());\n  }\n  pointAttribSizes() {\n    const firstObject = this.allObjects()[0];\n    if (firstObject) {\n      return pointAttributeSizes(firstObject);\n    } else {\n      return {};\n    }\n  }\n  pointAttribSize(attribName) {\n    const firstObject = this.allObjects()[0];\n    if (firstObject) {\n      return pointAttributeSize(firstObject, attribName);\n    } else {\n      return 0;\n    }\n  }\n  //\n  //\n  // OBJECTS\n  //\n  //\n  static _fromObjects(objects) {\n    const coreGroup = new CoreGroup();\n    coreGroup.setAllObjects(objects);\n    return coreGroup;\n  }\n  objectAttribTypesByName() {\n    return coreObjectAttributeTypesByName(this.allCoreObjects());\n  }\n  objectAttribNames() {\n    return coreObjectsAttribNames(this.allCoreObjects());\n  }\n  objectAttribNamesMatchingMask(masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.objectAttribNames());\n  }\n  objectAttribSizesByName() {\n    return coreObjectsAttribSizesByName(this.allCoreObjects());\n  }\n  //\n  //\n  //\n  //\n  //\n  renameAttribute(oldName, newName) {\n    const attribValue = this.attribValue(oldName);\n    if (attribValue == null) {\n      return;\n    }\n    this.addAttribute(newName, attribValue);\n    this.deleteAttribute(oldName);\n  }\n  attribNamesMatchingMask(masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.attribNames());\n  }\n  hasAttribute(attribName) {\n    return this.attribValue(attribName) != null;\n  }\n  addAttribute(attribName, attribValue) {\n    this.attributes()[attribName] = attribValue;\n  }\n  addNumericAttribute(attribName, size = 1, defaultValue = 0) {\n    const attributes = this.attributes();\n    if (defaultValue != null) {\n      if (attribValueNonPrimitive(defaultValue)) {\n        const clonedDefaultValue = cloneAttribValue(defaultValue);\n        if (clonedDefaultValue != null) {\n          attributes[attribName] = clonedDefaultValue;\n        }\n      } else {\n        attributes[attribName] = defaultValue;\n      }\n    } else {\n      switch (size) {\n        case 1: {\n          return this.attributes()[attribName] = 0;\n        }\n        case 2: {\n          return this.attributes()[attribName] = new Vector2(0, 0);\n        }\n        case 3: {\n          return this.attributes()[attribName] = new Vector3(0, 0, 0);\n        }\n        case 4: {\n          return this.attributes()[attribName] = new Vector4(0, 0, 0, 0);\n        }\n      }\n    }\n  }\n  deleteAttribute(name) {\n    delete this.attributes()[name];\n  }\n  attribValue(attribName) {\n    return this._attributes && this._attributes[attribName];\n  }\n  attribNames() {\n    return this._attributes ? Object.keys(this._attributes) : [];\n  }\n  attribType(name) {\n    const val = this.attribValue(name);\n    if (CoreType.isString(val)) {\n      return AttribType.STRING;\n    } else {\n      return AttribType.NUMERIC;\n    }\n  }\n  attribSizes() {\n    const h = {};\n    for (const attrib_name of this.attribNames()) {\n      const size = this.attribSize(attrib_name);\n      if (size != null) {\n        h[attrib_name] = size;\n      }\n    }\n    return h;\n  }\n  attribSize(name) {\n    const val = this.attribValue(name);\n    if (val == null) {\n      return null;\n    }\n    return CoreAttribute.attribSizeFromValue(val);\n  }\n  attributes() {\n    return this._attributes || this._createAttributesDictionaryIfNone();\n  }\n  _createAttributesDictionaryIfNone() {\n    if (!this._attributes) {\n      this._attributes = {};\n    }\n    return this._attributes;\n  }\n  // override\n  setAttribValue(attribName, attribValue) {\n    this.addAttribute(attribName, attribValue);\n  }\n  stringAttribValue(attribName) {\n    return this.attribValue(attribName);\n  }\n  position(target) {\n    const objectsCount = this._allObjects.length;\n    target.set(0, 0, 0);\n    for (const object of this._allObjects) {\n      coreObjectClassFactory(object).position(object, tmpPos);\n      target.add(tmpPos);\n    }\n    target.divideScalar(objectsCount);\n    return target;\n  }\n  attributeNames() {\n    const attributes = this.attributes();\n    if (!attributes) {\n      return [];\n    }\n    return Object.keys(attributes);\n  }\n  attributeNamesMatchingMask(masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.attributeNames());\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  relatedObjects(target, traversedRelatedEntityData) {\n    arrayCopy(this.allCoreObjects(), target);\n  }\n  relatedPrimitives(target, traversedRelatedEntityData) {\n    target.length = 0;\n    const objects = this.allObjects();\n    let i = 0;\n    for (const object of objects) {\n      coreObjectClassFactory(object).relatedPrimitives(object, i, _relatedPrimitivesForObject);\n      for (const _relatedPrimitiveForObject of _relatedPrimitivesForObject) {\n        target.push(_relatedPrimitiveForObject);\n      }\n      i++;\n    }\n  }\n  relatedVertices(target, traversedRelatedEntityData) {\n    this.relatedPrimitives(_relatedPrimitives);\n    uniqRelatedEntities(\n      _relatedPrimitives,\n      (primitive) => {\n        primitive.relatedVertices(_relatedVertices);\n        return _relatedVertices;\n      },\n      target\n    );\n  }\n  relatedPoints(target, traversedRelatedEntityData) {\n    this.relatedVertices(_relatedVertices);\n    return uniqRelatedEntities(\n      _relatedVertices,\n      (vertex) => {\n        vertex.relatedPoints(_relatedPoints);\n        return _relatedPoints;\n      },\n      target\n    );\n  }\n  relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {\n    switch (attribClass) {\n      case AttribClass.POINT: {\n        this.relatedPoints(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.VERTEX: {\n        this.relatedVertices(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.PRIMITIVE: {\n        this.relatedPrimitives(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.OBJECT: {\n        this.relatedObjects(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.CORE_GROUP: {\n        target.length = 1;\n        target[0] = coreGroup;\n        return;\n      }\n    }\n    TypeAssert.unreachable(attribClass);\n  }\n  //\n  //\n  // UTILS\n  //\n  //\n  objectsData() {\n    var _a;\n    return ((_a = this._allObjects) == null ? void 0 : _a.map((o) => coreObjectClassFactory(o).objectData(o))) || [];\n  }\n  boundingBox(target) {\n    target.makeEmpty();\n    const coreObjects = this.allCoreObjects();\n    for (const coreObject of coreObjects) {\n      coreObject.boundingBox(tmpBox3);\n      target.union(tmpBox3);\n    }\n  }\n  static geometryFromObject(object) {\n    if (object.isMesh || object.isLine || object.isPoints) {\n      return object.geometry;\n    }\n    return null;\n  }\n}\n", "\"use strict\";\nimport { CoreType } from \"../../core/Type\";\nimport { TypedNodePathParamValue, TypedParamPathParamValue } from \"../../core/Walker\";\nexport const OPERATIONS_COMPOSER_NODE_TYPE = \"operationsComposer\";\nexport class BaseOperation {\n  constructor(_scene, states, _node) {\n    this._scene = _scene;\n    this.states = states;\n    this._node = _node;\n  }\n  static type() {\n    throw \"type to be overriden\";\n  }\n  type() {\n    const c = this.constructor;\n    return c.type();\n  }\n  static context() {\n    console.error(\"operation has no node_context\", this);\n    throw \"context requires override\";\n  }\n  context() {\n    const c = this.constructor;\n    return c.context();\n  }\n  scene() {\n    return this._scene;\n  }\n  cook(input_contents, params) {\n  }\n  convertExportParamData(options) {\n    const { params, paramName, paramData } = options;\n    const default_param = params[paramName];\n    if (CoreType.isBoolean(paramData)) {\n      return paramData;\n    }\n    if (CoreType.isNumber(paramData)) {\n      if (CoreType.isBoolean(default_param)) {\n        return paramData >= 1 ? true : false;\n      } else {\n        return paramData;\n      }\n    }\n    if (CoreType.isString(paramData)) {\n      if (default_param) {\n        if (default_param instanceof TypedNodePathParamValue) {\n          return default_param.setPath(paramData);\n        }\n        if (default_param instanceof TypedParamPathParamValue) {\n          return default_param.setPath(paramData);\n        }\n      }\n      return paramData;\n    }\n    if (CoreType.isArray(paramData)) {\n      params[paramName].fromArray(paramData);\n    }\n  }\n}\nBaseOperation.DEFAULT_PARAMS = {};\nBaseOperation.INPUT_CLONED_STATE = [];\n", "\"use strict\";\nimport { CoreGroup } from \"../../../core/geometry/Group\";\nimport { BaseOperation } from \"../_Base\";\nimport { NodeContext } from \"../../../engine/poly/NodeContext\";\nimport {\n  ObjectType,\n  objectConstructorByObjectType,\n  DEFAULT_MATERIALS\n} from \"../../../core/geometry/Constant\";\nimport { CoreGeometryIndexBuilder } from \"../../../core/geometry/util/IndexBuilder\";\nexport class BaseSopOperation extends BaseOperation {\n  static context() {\n    return NodeContext.SOP;\n  }\n  cook(inputCoreGroups, params) {\n  }\n  //\n  //\n  // UTILS\n  //\n  //\n  createCoreGroupFromObjects(objects) {\n    const coreGroup = new CoreGroup();\n    coreGroup.setAllObjects(objects);\n    return coreGroup;\n  }\n  createCoreGroupFromGeometry(geometry, type = ObjectType.MESH) {\n    const object = BaseSopOperation.createObject(geometry, type);\n    return this.createCoreGroupFromObjects(object ? [object] : []);\n  }\n  createObject(geometry, type, material) {\n    return BaseSopOperation.createObject(geometry, type, material);\n  }\n  static createObject(geometry, type, material) {\n    this.createIndexIfNone(geometry);\n    const objectConstructor = objectConstructorByObjectType(type) || objectConstructorByObjectType(ObjectType.MESH);\n    material = material || DEFAULT_MATERIALS[type];\n    const object = new objectConstructor(geometry, material);\n    this.applyObjectDefault(object);\n    return object;\n  }\n  static applyObjectDefault(object) {\n    object.castShadow = true;\n    object.receiveShadow = true;\n    object.frustumCulled = false;\n    object.matrixAutoUpdate = false;\n  }\n  createIndexIfNone(geometry) {\n    BaseSopOperation.createIndexIfNone(geometry);\n  }\n  static createIndexIfNone(geometry) {\n    CoreGeometryIndexBuilder.createIndexIfNone(geometry);\n  }\n}\n", "\"use strict\";\nimport {\n  Color,\n  Sphere,\n  Vector3\n} from \"three\";\nimport { cloneBufferGeometry } from \"../../Geometry\";\nimport { AttribClass, dataFromObject } from \"../../Constant\";\nimport { objectData } from \"../../entities/object/BaseCoreObjectUtils\";\nimport { applyCustomMaterials } from \"../../Material\";\nimport { objectCloneDeep } from \"../../../ObjectUtils\";\nimport { ThreeMeshBVHHelper } from \"../../bvh/ThreeMeshBVHHelper\";\nimport { CoreGeometryBuilderMerge } from \"./builders/Merge\";\nimport { objectContentCopyProperties } from \"../../ObjectContent\";\nimport { BaseCoreObject } from \"../../entities/object/BaseCoreObject\";\nimport { TransformTargetType } from \"../../../Transform\";\nimport { TypeAssert } from \"../../../../engine/poly/Assert\";\nimport { applyTransformWithSpaceToObject } from \"../../../TransformSpace\";\nimport { BaseSopOperation } from \"../../../../engine/operations/sop/_Base\";\nimport { primitiveClassFactoryNonAbstract } from \"./ThreeModule\";\nimport { ThreejsVertex } from \"./ThreejsVertex\";\nimport { ThreejsPoint } from \"./ThreejsPoint\";\nimport { arrayCopy } from \"../../../ArrayUtils\";\nconst COMPUTE_PRECISE_BOUNDS = true;\nconst SPHERE_EMPTY = new Sphere(new Vector3(0, 0, 0), 0);\nexport class ThreejsCoreObject extends BaseCoreObject {\n  constructor(_object, index) {\n    super(_object, index);\n    this._object = _object;\n  }\n  humanType() {\n    return dataFromObject(this._object).humanName;\n  }\n  object() {\n    return this._object;\n  }\n  geometry() {\n    return this._object.geometry;\n  }\n  // object():Object3D{\n  // \treturn this._object\n  // }\n  // coreGeometry(): CoreGeometry | null {\n  // \tconst geo = this.geometry();\n  // \tif (geo) {\n  // \t\treturn new CoreGeometry(geo);\n  // \t} else {\n  // \t\treturn null;\n  // \t}\n  // \t// const geo = this.geometry()\n  // \t// if (geo) {\n  // \t// \treturn new CoreGeometry(geo)\n  // \t// } else {\n  // \t// \treturn null\n  // \t// }\n  // }\n  static objectData(object) {\n    const data = objectData(object);\n    data.verticesCount = ThreejsVertex.entitiesCount(object);\n    data.pointsCount = ThreejsPoint.entitiesCount(object);\n    const primitiveClass = primitiveClassFactoryNonAbstract(object);\n    data.primitivesCount = (primitiveClass == null ? void 0 : primitiveClass.entitiesCount(object)) || 0;\n    data.primitiveName = (primitiveClass == null ? void 0 : primitiveClass.primitiveName()) || \"\";\n    return data;\n  }\n  static position(object, target) {\n    target.copy(object.position);\n  }\n  static boundingBox(object, target) {\n    target.setFromObject(object, COMPUTE_PRECISE_BOUNDS);\n  }\n  static geometryBoundingBox(object, target) {\n    const geometry = object.geometry;\n    if (geometry) {\n      if (!geometry.boundingBox) {\n        geometry.computeBoundingBox();\n      }\n      if (geometry.boundingBox) {\n        target.copy(geometry.boundingBox);\n      }\n    } else {\n      target.makeEmpty();\n    }\n  }\n  static boundingSphere(object, target) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      target.copy(SPHERE_EMPTY);\n      return;\n    }\n    geometry.computeBoundingSphere();\n    const computedSphere = geometry.boundingSphere;\n    if (!computedSphere) {\n      target.copy(SPHERE_EMPTY);\n      return;\n    }\n    target.copy(computedSphere);\n  }\n  static geometryBoundingSphere(object, target) {\n    this.boundingSphere(object, target);\n  }\n  // computeVertexNormals() {\n  // \tthis.coreGeometry()?.computeVertexNormals();\n  // }\n  static clone(srcObject) {\n    const clonedObject = srcObject.clone();\n    var sourceLookup = /* @__PURE__ */ new Map();\n    var cloneLookup = /* @__PURE__ */ new Map();\n    ThreejsCoreObject.parallelTraverse(\n      srcObject,\n      clonedObject,\n      function(sourceNode, clonedNode) {\n        sourceLookup.set(clonedNode, sourceNode);\n        cloneLookup.set(sourceNode, clonedNode);\n      }\n    );\n    clonedObject.traverse(function(node) {\n      const srcNode = sourceLookup.get(node);\n      const meshNode = node;\n      if (meshNode.geometry && srcNode && srcNode.geometry) {\n        const srcNodeGeometry = srcNode.geometry;\n        meshNode.geometry = cloneBufferGeometry(srcNodeGeometry);\n        ThreeMeshBVHHelper.copyBVH(meshNode, srcNode);\n      }\n      if (meshNode.material) {\n        applyCustomMaterials(node, meshNode.material);\n        const material_with_color = meshNode.material;\n        if (material_with_color.color == null) {\n          material_with_color.color = new Color(1, 1, 1);\n        }\n      }\n      if (srcNode) {\n        if (srcNode.userData) {\n          node.userData = objectCloneDeep(srcNode.userData);\n        }\n        const src_node_with_animations = srcNode;\n        if (src_node_with_animations.animations) {\n          node.animations = src_node_with_animations.animations.map(\n            (animation) => animation.clone()\n          );\n        }\n        const skinned_node = node;\n        if (skinned_node.isSkinnedMesh) {\n          var clonedMesh = skinned_node;\n          var sourceMesh = srcNode;\n          var sourceBones = sourceMesh.skeleton.bones;\n          clonedMesh.skeleton = sourceMesh.skeleton.clone();\n          clonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n          const new_bones = sourceBones.map(function(bone) {\n            return cloneLookup.get(bone);\n          });\n          clonedMesh.skeleton.bones = new_bones;\n          clonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n        }\n      }\n    });\n    return clonedObject;\n  }\n  static parallelTraverse(a, b, callback) {\n    callback(a, b);\n    for (var i = 0; i < a.children.length; i++) {\n      const childA = a.children[i];\n      const childB = b.children[i];\n      if (childA && childB) {\n        this.parallelTraverse(childA, childB, callback);\n      }\n    }\n  }\n  static applyMatrix(object, matrix, transformTargetType, transformSpace, transformMode) {\n    switch (transformTargetType) {\n      case TransformTargetType.OBJECT: {\n        applyTransformWithSpaceToObject(object, matrix, transformSpace, transformMode);\n        return;\n      }\n      case TransformTargetType.GEOMETRY: {\n        const geometry = object.geometry;\n        if (geometry) {\n          geometry.applyMatrix4(matrix);\n        }\n        return;\n      }\n    }\n    TypeAssert.unreachable(transformTargetType);\n  }\n  static mergeCompact(options) {\n    const { objects, material, objectType, mergedObjects, onError } = options;\n    const firstObject = objects[0];\n    if (!firstObject) {\n      return;\n    }\n    const geometries = [];\n    for (const object of objects) {\n      const geometry = object.geometry;\n      if (geometry) {\n        geometry.applyMatrix4(object.matrix);\n        geometries.push(geometry);\n      }\n    }\n    try {\n      const mergedGeometry = CoreGeometryBuilderMerge.merge(geometries);\n      if (mergedGeometry) {\n        const newObject = BaseSopOperation.createObject(mergedGeometry, objectType, material);\n        if (newObject) {\n          objectContentCopyProperties(firstObject, newObject);\n          mergedObjects.push(newObject);\n        }\n      } else {\n        onError(\"merge failed, check that input geometries have the same attributes\");\n      }\n    } catch (e) {\n      onError(e.message || \"unknown error\");\n    }\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static relatedPrimitiveIds(object, index, target, traversedRelatedEntityData) {\n    const _primitiveClassFactory = primitiveClassFactoryNonAbstract(object);\n    if (!_primitiveClassFactory) {\n      target.length = 0;\n      return;\n    }\n    const count = _primitiveClassFactory == null ? void 0 : _primitiveClassFactory.entitiesCount(object);\n    target.length = count;\n    for (let i = 0; i < count; i++) {\n      target[i] = i;\n    }\n    if (traversedRelatedEntityData && traversedRelatedEntityData[AttribClass.PRIMITIVE].ids != target) {\n      arrayCopy(target, traversedRelatedEntityData[AttribClass.PRIMITIVE].ids);\n    }\n  }\n  static relatedPrimitiveClass(object) {\n    return primitiveClassFactoryNonAbstract(object);\n  }\n}\n", "\"use strict\";\nimport { Vector4, Vector3, Vector2 } from \"three\";\nimport { Attribute, CoreAttribute } from \"../../Attribute\";\nimport { CoreEntityWithObject } from \"../../CoreEntity\";\nimport { CoreType } from \"../../../Type\";\nimport { DOT, COMPONENT_INDICES, AttribClass, AttribType } from \"../../Constant\";\nimport { TypeAssert } from \"../../../../engine/poly/Assert\";\nimport { uniqRelatedEntityIds } from \"../utils/Common\";\nfunction _warnOverloadRequired(functionName) {\n  console.warn(`CorePrimitive.${functionName} needs to be overloaded`);\n}\nconst _ids = [];\nexport class CorePrimitive extends CoreEntityWithObject {\n  builder() {\n    return void 0;\n  }\n  static entitiesCount(object) {\n    return 0;\n  }\n  static addAttribute(object, attribName, attribute) {\n    _warnOverloadRequired(\"addAttribute\");\n  }\n  static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {\n    _warnOverloadRequired(\"addNumericAttribute\");\n  }\n  static attributes(object) {\n    _warnOverloadRequired(\"attributes\");\n    return;\n  }\n  attributes() {\n    if (!this._object) {\n      return;\n    }\n    return this.constructor.attributes(this._object);\n  }\n  static attribute(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    return attributes[attribName];\n  }\n  attribute(attribName) {\n    if (!this._object) {\n      return;\n    }\n    return this.constructor.attribute(this._object, attribName);\n  }\n  static renameAttribute(object, oldName, newName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    const attribute = this.attribute(object, oldName);\n    if (!attribute) {\n      return;\n    }\n    attributes[newName] = attribute;\n    delete attributes[oldName];\n  }\n  static deleteAttribute(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    delete attributes[attribName];\n  }\n  static attribSize(object, attribName) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return -1;\n    }\n    attribName = CoreAttribute.remapName(attribName);\n    return attributes[attribName].itemSize || 0;\n  }\n  attribSize(attribName) {\n    if (!this._object) {\n      return 0;\n    }\n    return this.constructor.attribSize(this._object, attribName);\n  }\n  static hasAttribute(object, attribName) {\n    const remappedName = CoreAttribute.remapName(attribName);\n    return this.attributes(object) ? this.attributes(object)[remappedName] != null : false;\n  }\n  hasAttribute(attribName) {\n    if (!this._object) {\n      return false;\n    }\n    return this.constructor.hasAttribute(this._object, attribName);\n  }\n  static attributeNames(object) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return [];\n    }\n    return Object.keys(attributes);\n  }\n  static attributeNamesMatchingMask(object, masksString) {\n    return CoreAttribute.attribNamesMatchingMask(masksString, this.attributeNames(object));\n  }\n  static attribValue(object, index, attribName, target) {\n    if (attribName === Attribute.PRIMITIVE_INDEX) {\n      return index;\n    }\n    let componentName = null;\n    let componentIndex = null;\n    if (attribName[attribName.length - 2] === DOT) {\n      componentName = attribName[attribName.length - 1];\n      componentIndex = COMPONENT_INDICES[componentName];\n      attribName = attribName.substring(0, attribName.length - 2);\n    }\n    const remapedName = CoreAttribute.remapName(attribName);\n    if (remapedName == Attribute.POSITION) {\n      return this.position(object, index, target);\n    }\n    if (remapedName == Attribute.NORMAL) {\n      return this.normal(object, index, target);\n    }\n    const attrib = this.attribute(object, remapedName);\n    if (attrib) {\n      const { array } = attrib;\n      const itemSize = attrib.itemSize;\n      const startIndex = index * itemSize;\n      if (componentIndex == null) {\n        switch (itemSize) {\n          case 1:\n            return array[startIndex];\n            break;\n          case 2:\n            target = target || new Vector2();\n            target.fromArray(array, startIndex);\n            return target;\n            break;\n          case 3:\n            target = target || new Vector3();\n            target.fromArray(array, startIndex);\n            return target;\n            break;\n          case 4:\n            target = target || new Vector4();\n            target.fromArray(array, startIndex);\n            return target;\n            break;\n          default:\n            throw `size not valid (${itemSize})`;\n        }\n      } else {\n        switch (itemSize) {\n          case 1:\n            return array[startIndex];\n            break;\n          default:\n            return array[startIndex + componentIndex];\n        }\n      }\n    } else {\n      const attributesDict = this.attributes(object) || {};\n      const attribNames = Object.keys(attributesDict);\n      const message = `attrib ${attribName} not found. availables are: ${attribNames.join(\",\")}`;\n      console.warn(message);\n      throw message;\n    }\n  }\n  attribValue(attribName, target) {\n    if (!this._object) {\n      return 0;\n    }\n    return this.constructor.attribValue(this._object, this._index, attribName, target);\n  }\n  attribValueNumber(attribName) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return 0;\n    }\n    return attrib.array[this._index];\n  }\n  attribValueVector2(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 2);\n    return target;\n  }\n  attribValueVector3(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 3);\n    return target;\n  }\n  attribValueVector4(attribName, target) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    target.fromArray(attrib.array, this._index * 4);\n    return target;\n  }\n  static attribType(object, attribName) {\n    const attribute = object ? this.attribute(object, attribName) : null;\n    if (attribute && (attribute == null ? void 0 : attribute.isString) == true) {\n      return AttribType.STRING;\n    } else {\n      return AttribType.NUMERIC;\n    }\n  }\n  attribType(attribName) {\n    return this.constructor.attribType(this._object, attribName);\n  }\n  static stringAttribValue(object, index, attribName) {\n    return this.attribValue(object, index, attribName);\n  }\n  stringAttribValue(attribName) {\n    return this.attribValue(attribName);\n  }\n  // setPosition(newPosition: Vector3) {\n  // \tthis.setAttribValueFromVector3(Attribute.POSITION, newPosition);\n  // }\n  // setNormal(newNormal: Vector3) {\n  // \treturn this.setAttribValueFromVector3(Attribute.NORMAL, newNormal);\n  // }\n  static position(object, primitiveIndex, target) {\n    _warnOverloadRequired(\"position\");\n    return target;\n  }\n  static normal(object, primitiveIndex, target) {\n    _warnOverloadRequired(\"normal\");\n    return target;\n  }\n  static computeVertexNormalsIfAttributeVersionChanged(object) {\n    _warnOverloadRequired(\"computeVertexNormalsIfAttributeVersionChanged\");\n  }\n  setAttribValue(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      console.warn(`no attribute ${attribName}`);\n      return;\n    }\n    const array = attrib.array;\n    const attribSize = attrib.itemSize;\n    if (CoreType.isArray(value)) {\n      for (let i = 0; i < attribSize; i++) {\n        array[this._index * attribSize + i] = value[i];\n      }\n      return;\n    }\n    switch (attribSize) {\n      case 1:\n        array[this._index] = value;\n        break;\n      case 2:\n        const v2 = value;\n        const i2 = this._index * 2;\n        array[i2 + 0] = v2.x;\n        array[i2 + 1] = v2.y;\n        break;\n      case 3:\n        const isColor = value.r != null;\n        const i3 = this._index * 3;\n        if (isColor) {\n          const col = value;\n          array[i3 + 0] = col.r;\n          array[i3 + 1] = col.g;\n          array[i3 + 2] = col.b;\n        } else {\n          const v3 = value;\n          array[i3 + 0] = v3.x;\n          array[i3 + 1] = v3.y;\n          array[i3 + 2] = v3.z;\n        }\n        break;\n      case 4:\n        const v4 = value;\n        const i4 = this._index * 4;\n        array[i4 + 0] = v4.x;\n        array[i4 + 1] = v4.y;\n        array[i4 + 2] = v4.z;\n        array[i4 + 3] = v4.w;\n        break;\n      default:\n        console.warn(`CorePrimitive.setAttribValue does not yet allow attribSize ${attribSize}`);\n        throw `attrib size ${attribSize} not implemented`;\n    }\n  }\n  setAttribValueFromNumber(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib) {\n      return;\n    }\n    const array = attrib.array;\n    array[this._index] = value;\n  }\n  setAttribValueFromVector2(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || attrib.isString == true) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 2);\n  }\n  setAttribValueFromVector3(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || attrib.isString == true) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 3);\n  }\n  setAttribValueFromVector4(attribName, value) {\n    const attrib = this.attribute(attribName);\n    if (!attrib || attrib.isString == true) {\n      return;\n    }\n    value.toArray(attrib.array, this._index * 4);\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static relatedPointIds(object, pointIndex, target, traversedRelatedEntityData) {\n    const ids = traversedRelatedEntityData ? traversedRelatedEntityData[AttribClass.VERTEX].ids : _ids;\n    this.relatedVertexIds(object, pointIndex, ids);\n    uniqRelatedEntityIds(\n      ids,\n      (vertexId, relatedEntityIds) => {\n        this.relatedVertexClass(object).relatedPointIds(object, vertexId, relatedEntityIds);\n      },\n      target\n    );\n  }\n  static relatedPointClass(object) {\n    return this.relatedVertexClass(object).relatedPointClass(object);\n  }\n  relatedEntities(attribClass, coreGroup, target, traversedRelatedEntityData) {\n    switch (attribClass) {\n      case AttribClass.POINT: {\n        this.relatedPoints(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.VERTEX: {\n        this.relatedVertices(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.PRIMITIVE: {\n        target.length = 1;\n        target[0] = this;\n        return;\n      }\n      case AttribClass.OBJECT: {\n        this.relatedObjects(target, traversedRelatedEntityData);\n        return;\n      }\n      case AttribClass.CORE_GROUP: {\n        target.length = 1;\n        target[0] = coreGroup;\n        return;\n      }\n    }\n    TypeAssert.unreachable(attribClass);\n  }\n  static graph(object) {\n    console.warn(\"CorePrimitive.graph needs to be overriden\");\n    return void 0;\n  }\n}\n", "\"use strict\";\nimport { arrayPushItems } from \"../../../ArrayUtils\";\nimport { stringToIndices } from \"../../../String\";\nimport { AttribType } from \"../../Constant\";\nimport { corePrimitiveClassFactory, corePrimitiveInstanceFactory } from \"../../CoreObjectFactory\";\nconst _indices = [];\nconst _tmpPrimitives = [];\nexport function primitives(coreGroup, target) {\n  const allObjects = coreGroup.allObjects();\n  target.length = 0;\n  for (const object of allObjects) {\n    primitivesFromObject(object, _tmpPrimitives);\n    arrayPushItems(_tmpPrimitives, target);\n  }\n  return target;\n}\nexport function primitiveAttribNamesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return primitiveAttributeNames(firstObject);\n  } else {\n    return [];\n  }\n}\nexport function primitiveAttribSizesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return primitiveAttributeSizes(firstObject);\n  } else {\n    return {};\n  }\n}\nexport function primitiveAttribTypesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return primitiveAttributeTypes(firstObject);\n  } else {\n    return {};\n  }\n}\nexport function primitivesCountFromObject(object) {\n  const primitiveClass = corePrimitiveClassFactory(object);\n  return primitiveClass.entitiesCount(object);\n}\nexport function primitivesFromObject(object, target) {\n  const primitiveClass = corePrimitiveClassFactory(object);\n  const primitivesCount = primitiveClass.entitiesCount(object);\n  target.length = primitivesCount;\n  for (let i = 0; i < primitivesCount; i++) {\n    target[i] = corePrimitiveInstanceFactory(object, i);\n  }\n  return target;\n}\nexport function primitivesFromObjectFromGroup(object, group, target) {\n  if (group) {\n    stringToIndices(group, _indices);\n    primitivesFromObject(object, _tmpPrimitives);\n    target.length = 0;\n    for (const index of _indices) {\n      const primitive = _tmpPrimitives[index];\n      if (primitive) {\n        target.push(primitive);\n      }\n    }\n    return target;\n  } else {\n    return primitivesFromObject(object, target);\n  }\n}\nexport function primitiveAttributeNames(object) {\n  const primitiveClass = corePrimitiveClassFactory(object);\n  const attributes = primitiveClass.attributes(object);\n  if (!attributes) {\n    return [];\n  }\n  return Object.keys(attributes);\n}\nexport function primitiveAttributeSizes(object) {\n  const primitiveClass = corePrimitiveClassFactory(object);\n  const attributes = primitiveClass.attributes(object);\n  if (!attributes) {\n    return {};\n  }\n  const attribNames = Object.keys(attributes);\n  const h = {};\n  for (const attribName of attribNames) {\n    h[attribName] = attributes[attribName].itemSize;\n  }\n  return h;\n}\nexport function primitiveAttributeTypes(object) {\n  const primitiveClass = corePrimitiveClassFactory(object);\n  const attributes = primitiveClass.attributes(object);\n  if (!attributes) {\n    return {};\n  }\n  const attribNames = Object.keys(attributes);\n  const h = {};\n  for (const attribName of attribNames) {\n    h[attribName] = attributes[attribName].isString == true ? AttribType.STRING : AttribType.NUMERIC;\n  }\n  return h;\n}\n", "\"use strict\";\nimport { CorePrimitive } from \"../../entities/primitive/CorePrimitive\";\nimport { primitivesCountFromObject } from \"../../entities/primitive/CorePrimitiveUtils\";\nimport { ThreejsVertex } from \"./ThreejsVertex\";\nimport { attributeNumericValues } from \"../../entities/utils/Common\";\nimport { ThreejsCoreObject } from \"./ThreejsCoreObject\";\nconst target = {\n  attributeAdded: false,\n  values: []\n};\nexport class ThreejsPrimitive extends CorePrimitive {\n  constructor(object, index) {\n    super(object, index);\n    this._updateGeometry();\n  }\n  setIndex(index, object) {\n    this._index = index;\n    if (object) {\n      this._object = object;\n      this._updateGeometry();\n    }\n    return this;\n  }\n  _updateGeometry() {\n    const geometry = this._object.geometry;\n    if (geometry) {\n      this._geometry = geometry;\n    }\n  }\n  geometry() {\n    return this._geometry;\n  }\n  static addAttribute(object, attribName, attribute) {\n    const attributes = this.attributes(object);\n    if (!attributes) {\n      return;\n    }\n    attributes[attribName] = attribute;\n  }\n  static addNumericAttribute(object, attribName, size = 1, defaultValue = 0) {\n    const primitivesCount = this.entitiesCount(object);\n    target.values = new Array(primitivesCount * size);\n    attributeNumericValues(object, primitivesCountFromObject, size, defaultValue, target);\n    const attribute = {\n      isString: false,\n      array: target.values,\n      itemSize: size\n    };\n    this.addAttribute(object, attribName, attribute);\n  }\n  static attributes(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return;\n    }\n    if (!geometry.userData.primAttributes) {\n      geometry.userData.primAttributes = {};\n    }\n    return geometry.userData.primAttributes;\n  }\n  //\n  //\n  // RELATED ENTITIES\n  //\n  //\n  static stride() {\n    return 3;\n  }\n  static relatedVertexIds(object, primitiveIndex, target2) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      target2.length = 0;\n      return;\n    }\n    const stride = this.stride();\n    target2.length = stride;\n    for (let i = 0; i < stride; i++) {\n      target2[i] = primitiveIndex * stride + i;\n    }\n  }\n  static relatedVertexClass(object) {\n    return ThreejsVertex;\n  }\n  static relatedObjectClass(object) {\n    return ThreejsCoreObject;\n  }\n}\n", "\"use strict\";\nimport { Vector3 } from \"three\";\nimport { CoreGeometryBuilderBase } from \"./_Base\";\nexport class CoreGeometryBuilderMesh extends CoreGeometryBuilderBase {\n  _filterPoints(points) {\n    var _a;\n    const firstPoint = points[0];\n    if (!firstPoint) {\n      return [];\n    }\n    const geometry = firstPoint.geometry();\n    if (!geometry) {\n      return [];\n    }\n    const indices = (_a = geometry.getIndex()) == null ? void 0 : _a.array;\n    if (!indices) {\n      return [];\n    }\n    const points_by_index = {};\n    for (const point of points) {\n      points_by_index[point.index()] = point;\n    }\n    const filteredPoints = [];\n    const index_length = indices.length;\n    let pt0;\n    let pt1;\n    let pt2;\n    for (let i = 0; i < index_length; i += 3) {\n      pt0 = points_by_index[indices[i + 0]];\n      pt1 = points_by_index[indices[i + 1]];\n      pt2 = points_by_index[indices[i + 2]];\n      if (pt0 && pt1 && pt2) {\n        filteredPoints.push(pt0);\n        filteredPoints.push(pt1);\n        filteredPoints.push(pt2);\n      }\n    }\n    return filteredPoints;\n  }\n  _indicesFromPoints(new_index_by_old_index, old_geometry) {\n    const index_attrib = old_geometry.index;\n    if (index_attrib != null) {\n      const old_indices = index_attrib.array;\n      const new_indices = [];\n      let old_index0;\n      let old_index1;\n      let old_index2;\n      let new_index0;\n      let new_index1;\n      let new_index2;\n      for (let i = 0; i < old_indices.length; i += 3) {\n        old_index0 = old_indices[i + 0];\n        old_index1 = old_indices[i + 1];\n        old_index2 = old_indices[i + 2];\n        new_index0 = new_index_by_old_index[old_index0];\n        new_index1 = new_index_by_old_index[old_index1];\n        new_index2 = new_index_by_old_index[old_index2];\n        if (new_index0 != null && new_index1 != null && new_index2 != null) {\n          new_indices.push(new_index0);\n          new_indices.push(new_index1);\n          new_indices.push(new_index2);\n        }\n      }\n      return new_indices;\n    }\n  }\n}\nconst _v3 = new Vector3();\nconst STRIDE = 3;\nexport const threeMeshFromPrimitives = (object, entities) => {\n  const mesh = object;\n  const geometry = mesh.geometry;\n  if (!geometry) {\n    return void 0;\n  }\n  const oldIndex = geometry.getIndex();\n  if (!oldIndex) {\n    return void 0;\n  }\n  const oldIndexArray = oldIndex.array;\n  const primitives = entities;\n  const newIndices = new Array(primitives.length * STRIDE);\n  let i = 0;\n  for (const primitive of primitives) {\n    _v3.fromArray(oldIndexArray, primitive.index() * STRIDE);\n    _v3.toArray(newIndices, i * STRIDE);\n    i++;\n  }\n  geometry.setIndex(newIndices);\n  return mesh;\n};\n", "\"use strict\";\nimport { Triangle, Vector3, BufferAttribute } from \"three\";\nimport { ThreejsPrimitive } from \"./ThreejsPrimitive\";\nimport { threeMeshFromPrimitives } from \"./builders/Mesh\";\nimport { Attribute } from \"../../Attribute\";\nconst _triangle = new Triangle();\nconst _p0 = new Vector3();\nconst _p1 = new Vector3();\nconst _p2 = new Vector3();\nconst normalsComputedWithPositionAttributeVersion = /* @__PURE__ */ new Map();\nexport class ThreejsPrimitiveTriangle extends ThreejsPrimitive {\n  constructor(object, index) {\n    super(object, index);\n    this._geometry = object.geometry;\n  }\n  static primitiveName() {\n    return \"triangle\";\n  }\n  static entitiesCount(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return 0;\n    }\n    const index = geometry.getIndex();\n    if (!index) {\n      return 0;\n    }\n    return index.count / 3;\n  }\n  static position(object, primitiveIndex, target) {\n    if (!(object && object.geometry)) {\n      return target;\n    }\n    const positionAttribute = object.geometry.getAttribute(Attribute.POSITION);\n    if (!positionAttribute) {\n      return target;\n    }\n    const positionArray = positionAttribute.array;\n    _p0.fromArray(positionArray, primitiveIndex * 3 + 0);\n    _p1.fromArray(positionArray, primitiveIndex * 3 + 1);\n    _p2.fromArray(positionArray, primitiveIndex * 3 + 2);\n    target.copy(_p0).add(_p1).add(_p2).divideScalar(3);\n    return target;\n  }\n  static normal(object, primitiveIndex, target) {\n    if (!(object && object.geometry)) {\n      return target;\n    }\n    const positionAttribute = object.geometry.getAttribute(Attribute.POSITION);\n    if (!positionAttribute) {\n      return target;\n    }\n    const positionArray = positionAttribute.array;\n    _triangle.a.fromArray(positionArray, primitiveIndex * 3 + 0);\n    _triangle.b.fromArray(positionArray, primitiveIndex * 3 + 1);\n    _triangle.c.fromArray(positionArray, primitiveIndex * 3 + 2);\n    _triangle.getNormal(target);\n    return target;\n  }\n  position(target) {\n    return this.constructor.position(this._object, this._index, target);\n  }\n  normal(target) {\n    return this.constructor.normal(this._object, this._index, target);\n  }\n  static computeVertexNormalsIfAttributeVersionChanged(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return null;\n    }\n    const positionAttribute = geometry.getAttribute(Attribute.POSITION);\n    if (!positionAttribute) {\n      return;\n    }\n    if (!(positionAttribute instanceof BufferAttribute)) {\n      return;\n    }\n    let lastVersion = normalsComputedWithPositionAttributeVersion.get(geometry.uuid);\n    if (lastVersion == null || lastVersion != positionAttribute.version) {\n      geometry.computeVertexNormals();\n      normalsComputedWithPositionAttributeVersion.set(geometry.uuid, positionAttribute.version);\n    }\n  }\n  builder() {\n    return threeMeshFromPrimitives;\n  }\n  static stride() {\n    return 3;\n  }\n}\n", "\"use strict\";\nimport { Vector3 } from \"three\";\nimport { ThreejsPrimitive } from \"./ThreejsPrimitive\";\nimport { Attribute } from \"../../Attribute\";\nconst _p0 = new Vector3();\nconst _p1 = new Vector3();\nexport class ThreejsPrimitiveLineSegment extends ThreejsPrimitive {\n  constructor(object, index) {\n    super(object, index);\n    this._geometry = object.geometry;\n  }\n  static primitiveName() {\n    return \"line\";\n  }\n  static entitiesCount(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return 0;\n    }\n    const index = geometry.getIndex();\n    if (!index) {\n      return 0;\n    }\n    return index.count / 2;\n  }\n  static position(object, primitiveIndex, target) {\n    if (!(object && object.geometry)) {\n      return target;\n    }\n    const positionAttribute = object.geometry.getAttribute(Attribute.POSITION);\n    if (!positionAttribute) {\n      return target;\n    }\n    const positionArray = positionAttribute.array;\n    _p0.fromArray(positionArray, primitiveIndex * 3 + 0);\n    _p1.fromArray(positionArray, primitiveIndex * 3 + 1);\n    target.copy(_p0).add(_p1).divideScalar(2);\n    return target;\n  }\n  static normal(object, primitiveIndex, target) {\n    if (!(object && object.geometry)) {\n      return target;\n    }\n    const positionAttribute = object.geometry.getAttribute(Attribute.POSITION);\n    if (!positionAttribute) {\n      return target;\n    }\n    const positionArray = positionAttribute.array;\n    _p0.fromArray(positionArray, primitiveIndex * 3 + 0);\n    _p1.fromArray(positionArray, primitiveIndex * 3 + 1);\n    target.copy(_p1).sub(_p1).normalize();\n    return target;\n  }\n  position(target) {\n    return this.constructor.position(this._object, this._index, target);\n  }\n  normal(target) {\n    return this.constructor.normal(this._object, this._index, target);\n  }\n  static computeVertexNormalsIfAttributeVersionChanged(object) {\n  }\n  static stride() {\n    return 2;\n  }\n}\n", "\"use strict\";\nimport { Vector3 } from \"three\";\nimport { ThreejsPrimitive } from \"./ThreejsPrimitive\";\nimport { Attribute } from \"../../Attribute\";\nconst _p0 = new Vector3();\nexport class ThreejsPrimitivePoint extends ThreejsPrimitive {\n  constructor(object, index) {\n    super(object, index);\n    this._geometry = object.geometry;\n  }\n  static primitiveName() {\n    return \"point\";\n  }\n  static entitiesCount(object) {\n    const geometry = object.geometry;\n    if (!geometry) {\n      return 0;\n    }\n    const index = geometry.getIndex();\n    if (!index) {\n      return 0;\n    }\n    return index.count;\n  }\n  static position(object, primitiveIndex, target) {\n    if (!(object && object.geometry)) {\n      return target;\n    }\n    const positionAttribute = object.geometry.getAttribute(Attribute.POSITION);\n    if (!positionAttribute) {\n      return target;\n    }\n    const positionArray = positionAttribute.array;\n    _p0.fromArray(positionArray, primitiveIndex * 3 + 0);\n    target.copy(_p0);\n    return target;\n  }\n  static normal(object, primitiveIndex, target) {\n    return target.set(0, 1, 0);\n  }\n  position(target) {\n    return this.constructor.position(this._object, this._index, target);\n  }\n  normal(target) {\n    return this.constructor.normal(this._object, this._index, target);\n  }\n  static computeVertexNormalsIfAttributeVersionChanged(object) {\n  }\n  static stride() {\n    return 1;\n  }\n}\n", "\"use strict\";\nimport { isObject3D } from \"../../ObjectContent\";\nimport { ThreejsPoint } from \"./ThreejsPoint\";\nimport { ThreejsVertex } from \"./ThreejsVertex\";\nimport { ThreejsCoreObject } from \"./ThreejsCoreObject\";\nimport { ThreejsPrimitiveTriangle } from \"./ThreejsPrimitiveTriangle\";\nimport { ThreejsPrimitiveLineSegment } from \"./ThreejsPrimitiveLineSegment\";\nimport { ThreejsPrimitivePoint } from \"./ThreejsPrimitivePoint\";\nconst pointClassFactory = (object) => {\n  if (isObject3D(object)) {\n    return ThreejsPoint;\n  }\n};\nexport const pointClassFactoryEnsured = () => ThreejsPoint;\nconst pointInstanceFactory = (object, index = 0) => {\n  if (isObject3D(object)) {\n    return new ThreejsPoint(object, index);\n  }\n};\nexport const pointInstanceFactoryEnsured = (object, index = 0) => {\n  return new ThreejsPoint(object, index);\n};\nconst vertexClassFactory = (object) => {\n  if (isObject3D(object)) {\n    return ThreejsVertex;\n  }\n};\nexport const vertexClassFactoryEnsured = () => ThreejsVertex;\nconst vertexInstanceFactory = (object, index = 0) => {\n  if (isObject3D(object)) {\n    return new ThreejsVertex(object, index);\n  }\n};\nexport const vertexInstanceFactoryEnsured = (object, index = 0) => {\n  return new ThreejsVertex(object, index);\n};\nexport const primitiveClassFactoryNonAbstract = (object) => {\n  if (isObject3D(object)) {\n    if (object.isMesh) {\n      return ThreejsPrimitiveTriangle;\n    }\n    if (object.isLineSegments) {\n      return ThreejsPrimitiveLineSegment;\n    }\n    if (object.isPoints) {\n      return ThreejsPrimitivePoint;\n    }\n    return ThreejsPrimitiveTriangle;\n  }\n};\nexport const primitiveClassFactoryEnsured = () => ThreejsPrimitiveTriangle;\nconst primitiveClassFactory = primitiveClassFactoryNonAbstract;\nexport const primitiveInstanceFactory = (object, index = 0) => {\n  if (isObject3D(object)) {\n    if (object.isMesh) {\n      return new ThreejsPrimitiveTriangle(object, index);\n    }\n    if (object.isLineSegments) {\n      return new ThreejsPrimitiveLineSegment(object, index);\n    }\n    if (object.isPoints) {\n      return new ThreejsPrimitivePoint(object, index);\n    }\n  }\n};\nexport const primitiveInstanceFactoryEnsured = (object, index = 0) => {\n  return new ThreejsPrimitiveTriangle(object, index);\n};\nexport const primitiveVerticesCountFactory = (object) => {\n  if (isObject3D(object)) {\n    if (object.isMesh) {\n      return 3;\n    }\n    if (object.isLineSegments) {\n      return 2;\n    }\n    if (object.isPoints) {\n      return 1;\n    }\n  }\n  return 0;\n};\nconst objectClassFactory = (object) => {\n  if (isObject3D(object) || object.isObject3D) {\n    return ThreejsCoreObject;\n  }\n};\nexport const objectClassFactoryEnsured = () => ThreejsCoreObject;\nconst objectInstanceFactory = (object, index = 0) => {\n  if (isObject3D(object)) {\n    return new ThreejsCoreObject(object, index);\n  }\n};\nexport const objectInstanceFactoryEnsured = (object, index = 0) => {\n  return new ThreejsCoreObject(object, index);\n};\nexport const object3DFactory = {\n  pointClass: pointClassFactory,\n  pointInstance: pointInstanceFactory,\n  vertexClass: vertexClassFactory,\n  vertexInstance: vertexInstanceFactory,\n  primitiveClass: primitiveClassFactory,\n  primitiveInstance: primitiveInstanceFactory,\n  objectClass: objectClassFactory,\n  objectInstance: objectInstanceFactory\n};\n", "\"use strict\";\nimport {\n  object3DFactory,\n  pointClassFactoryEnsured,\n  pointInstanceFactoryEnsured,\n  vertexClassFactoryEnsured,\n  vertexInstanceFactoryEnsured,\n  primitiveClassFactoryEnsured,\n  primitiveInstanceFactoryEnsured,\n  objectClassFactoryEnsured,\n  objectInstanceFactoryEnsured\n} from \"./modules/three/ThreeModule\";\nimport { AttribClass } from \"./Constant\";\nconst coreFactoryFunctions = [object3DFactory];\nexport function registerFactoryFunctions(checkFunctions) {\n  coreFactoryFunctions.push(checkFunctions);\n}\nexport function corePointClassFactory(object) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.pointClass(object);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.pointClass(object) || pointClassFactoryEnsured();\n}\nexport function corePointInstanceFactory(object, index = 0) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.pointInstance(object, index);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.pointInstance(object, index) || pointInstanceFactoryEnsured(object, index);\n}\nexport function coreVertexClassFactory(object) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.vertexClass(object);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.vertexClass(object) || vertexClassFactoryEnsured();\n}\nexport function coreVertexInstanceFactory(object, index = 0) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.vertexInstance(object, index);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.vertexInstance(object, index) || vertexInstanceFactoryEnsured(object, index);\n}\nexport function corePrimitiveClassFactory(object) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.primitiveClass(object);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.primitiveClass(object) || primitiveClassFactoryEnsured();\n}\nexport function corePrimitiveInstanceFactory(object, index = 0) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.primitiveInstance(object, index);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.primitiveInstance(object, index) || primitiveInstanceFactoryEnsured(object, index);\n}\nexport function coreObjectClassFactory(object) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.objectClass(object);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.objectClass(object) || objectClassFactoryEnsured();\n}\nexport function coreObjectInstanceFactory(object, index = 0) {\n  for (const factoryFunction of coreFactoryFunctions) {\n    const result = factoryFunction.objectInstance(object, index);\n    if (result) {\n      return result;\n    }\n  }\n  return object3DFactory.objectInstance(object, index) || objectInstanceFactoryEnsured(object);\n}\nexport const ENTITY_CLASS_FACTORY = {\n  [AttribClass.POINT]: corePointClassFactory,\n  [AttribClass.VERTEX]: coreVertexClassFactory,\n  [AttribClass.PRIMITIVE]: corePrimitiveClassFactory,\n  [AttribClass.OBJECT]: coreObjectClassFactory,\n  [AttribClass.CORE_GROUP]: null\n};\nexport const ENTITY_INSTANCE_FACTORY = {\n  [AttribClass.POINT]: corePointInstanceFactory,\n  [AttribClass.VERTEX]: coreVertexInstanceFactory,\n  [AttribClass.PRIMITIVE]: corePrimitiveInstanceFactory,\n  [AttribClass.OBJECT]: coreObjectInstanceFactory,\n  [AttribClass.CORE_GROUP]: null\n};\n", "\"use strict\";\nimport { arrayCompact, arrayPushItems } from \"../../../ArrayUtils\";\nimport { CoreString } from \"../../../String\";\nimport { AttribType } from \"../../Constant\";\nimport { corePointClassFactory, corePointInstanceFactory } from \"../../CoreObjectFactory\";\nconst _indices = [];\nconst _tmpPoints = [];\nexport function pointsFromCoreGroup(coreGroup, target) {\n  return pointsFromObjects(coreGroup.allObjects(), target);\n}\nexport function pointsFromCoreObjects(coreObjects, target) {\n  target.length = 0;\n  for (const coreObject of coreObjects) {\n    pointsFromObject(coreObject.object(), _tmpPoints);\n    arrayPushItems(_tmpPoints, target);\n  }\n  return target;\n}\nexport function pointsFromObjects(objects, target) {\n  target.length = 0;\n  for (const object of objects) {\n    pointsFromObject(object, _tmpPoints);\n    arrayPushItems(_tmpPoints, target);\n  }\n  return target;\n}\nexport function pointsAttribNamesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return pointAttributeNames(firstObject);\n  } else {\n    return [];\n  }\n}\nexport function pointAttribSizesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return pointAttributeSizes(firstObject);\n  } else {\n    return {};\n  }\n}\nexport function pointAttribTypesFromCoreGroup(coreGroup) {\n  const firstObject = coreGroup.allObjects()[0];\n  if (firstObject) {\n    return pointAttributeTypes(firstObject);\n  } else {\n    return {};\n  }\n}\nexport function pointsCountFromObject(object) {\n  const pointClass = corePointClassFactory(object);\n  return pointClass.entitiesCount(object);\n}\nexport function pointsFromObject(object, target) {\n  const pointClass = corePointClassFactory(object);\n  const pointsCount = pointClass.entitiesCount(object);\n  target.length = pointsCount;\n  for (let i = 0; i < pointsCount; i++) {\n    target[i] = corePointInstanceFactory(object, i);\n  }\n  return target;\n}\nexport function pointsFromObjectFromGroup(object, group, target) {\n  if (group) {\n    CoreString.indices(group, _indices);\n    const points = pointsFromObject(object, _tmpPoints);\n    const compactPoints = [];\n    const selectedPoints = arrayCompact(\n      _indices.map((i) => points[i]),\n      compactPoints\n    );\n    target.length = 0;\n    arrayPushItems(selectedPoints, target);\n    return target;\n  } else {\n    return pointsFromObject(object, target);\n  }\n}\nexport function hasPointAttribute(object, attribName) {\n  const pointClass = corePointClassFactory(object);\n  const attributes = pointClass.attributes(object);\n  if (!attributes) {\n    return false;\n  }\n  return attribName in attributes;\n}\nexport function pointAttributeNames(object) {\n  const pointClass = corePointClassFactory(object);\n  const attributes = pointClass.attributes(object);\n  if (!attributes) {\n    return [];\n  }\n  return Object.keys(attributes);\n}\nexport function pointAttributeSize(object, attribName) {\n  const pointClass = corePointClassFactory(object);\n  const attributes = pointClass.attributes(object);\n  if (!attributes) {\n    return 0;\n  }\n  return attributes[attribName].itemSize;\n}\nexport function pointAttributeSizes(object) {\n  const pointClass = corePointClassFactory(object);\n  const attributes = pointClass.attributes(object);\n  if (!attributes) {\n    return {};\n  }\n  const attribNames = Object.keys(attributes);\n  const h = {};\n  for (const attribName of attribNames) {\n    h[attribName] = attributes[attribName].itemSize;\n  }\n  return h;\n}\nexport function pointAttributeType(object, attribName) {\n  const pointClass = corePointClassFactory(object);\n  const attributes = pointClass.attributes(object);\n  if (!attributes) {\n    return AttribType.NUMERIC;\n  }\n  return pointClass.attribType(object, attribName);\n}\nexport function pointAttributeTypes(object) {\n  const pointClass = corePointClassFactory(object);\n  const attributes = pointClass.attributes(object);\n  if (!attributes) {\n    return {};\n  }\n  const attribNames = Object.keys(attributes);\n  const h = {};\n  for (const attribName of attribNames) {\n    h[attribName] = pointClass.attribType(object, attribName);\n  }\n  return h;\n}\n", "\"use strict\";\nexport class BaseFlag {\n  constructor(node) {\n    this.node = node;\n    this._state = true;\n    this._hooks = null;\n  }\n  onUpdate(hook) {\n    this._hooks = this._hooks || [];\n    this._hooks.push(hook);\n  }\n  _onUpdate() {\n  }\n  set(newState) {\n    if (this._state != newState) {\n      if (this.node.insideALockedParent()) {\n        const lockedParent = this.node.lockedParent();\n        console.warn(\n          `node '${this.node.path()}' cannot have its flag changed, since it is inside '${lockedParent ? lockedParent.path() : \"\"}', which is locked`\n        );\n        return;\n      }\n      this._state = newState;\n      this._onUpdate();\n      this.runHooks();\n    }\n  }\n  active() {\n    return this._state;\n  }\n  toggle() {\n    this.set(!this._state);\n  }\n  runHooks() {\n    if (this._hooks) {\n      for (const hook of this._hooks) {\n        hook();\n      }\n    }\n  }\n}\n", "\"use strict\";\nimport { BaseFlag } from \"./Base\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nexport class BypassFlag extends BaseFlag {\n  constructor() {\n    super(...arguments);\n    this._state = false;\n  }\n  _onUpdate() {\n    this.node.emit(NodeEvent.FLAG_BYPASS_UPDATED);\n    this.node.setDirty();\n  }\n}\n", "\"use strict\";\nimport { BaseFlag } from \"./Base\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nexport class DisplayFlag extends BaseFlag {\n  _onUpdate() {\n    this.node.emit(NodeEvent.FLAG_DISPLAY_UPDATED);\n  }\n}\n", "\"use strict\";\nimport { BaseFlag } from \"./Base\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nexport class OptimizeFlag extends BaseFlag {\n  constructor() {\n    super(...arguments);\n    this._state = false;\n  }\n  _onUpdate() {\n    this.node.emit(NodeEvent.FLAG_OPTIMIZE_UPDATED);\n  }\n}\n", "\"use strict\";\nimport { BypassFlag } from \"./flags/Bypass\";\nimport { DisplayFlag } from \"./flags/Display\";\nimport { OptimizeFlag } from \"./flags/Optimize\";\nexport class FlagsController {\n  constructor(node) {\n    this.node = node;\n  }\n  hasDisplay() {\n    return false;\n  }\n  hasBypass() {\n    return false;\n  }\n  hasOptimize() {\n    return false;\n  }\n}\nfunction Display(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      this.display = new DisplayFlag(this.node);\n    }\n    hasDisplay() {\n      return true;\n    }\n  };\n}\nfunction Bypass(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      this.bypass = new BypassFlag(this.node);\n    }\n    hasBypass() {\n      return true;\n    }\n  };\n}\nfunction Optimize(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      this.optimize = new OptimizeFlag(this.node);\n    }\n    hasOptimize() {\n      return true;\n    }\n  };\n}\nexport class FlagsControllerD extends Display(FlagsController) {\n}\nexport class FlagsControllerB extends Bypass(FlagsController) {\n}\nexport class FlagsControllerDB extends Bypass(Display(FlagsController)) {\n}\nexport class FlagsControllerBO extends Optimize(Bypass(FlagsController)) {\n}\nexport class FlagsControllerDBO extends Optimize(Bypass(Display(FlagsController))) {\n}\n", "\"use strict\";\nexport var InputCloneMode = /* @__PURE__ */ ((InputCloneMode2) => {\n  InputCloneMode2[\"ALWAYS\"] = \"always\";\n  InputCloneMode2[\"NEVER\"] = \"never\";\n  InputCloneMode2[\"FROM_NODE\"] = \"from_node\";\n  return InputCloneMode2;\n})(InputCloneMode || {});\n", "/**\n * @implements {IHooks}\n */\nclass Hooks {\n\t/**\n\t * @callback HookCallback\n\t * @this {*|Jsep} this\n\t * @param {Jsep} env\n\t * @returns: void\n\t */\n\t/**\n\t * Adds the given callback to the list of callbacks for the given hook.\n\t *\n\t * The callback will be invoked when the hook it is registered for is run.\n\t *\n\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t *\n\t * @param {string|object} name The name of the hook, or an object of callbacks keyed by name\n\t * @param {HookCallback|boolean} callback The callback function which is given environment variables.\n\t * @param {?boolean} [first=false] Will add the hook to the top of the list (defaults to the bottom)\n\t * @public\n\t */\n\tadd(name, callback, first) {\n\t\tif (typeof arguments[0] != 'string') {\n\t\t\t// Multiple hook callbacks, keyed by name\n\t\t\tfor (let name in arguments[0]) {\n\t\t\t\tthis.add(name, arguments[0][name], arguments[1]);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t(Array.isArray(name) ? name : [name]).forEach(function (name) {\n\t\t\t\tthis[name] = this[name] || [];\n\n\t\t\t\tif (callback) {\n\t\t\t\t\tthis[name][first ? 'unshift' : 'push'](callback);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t/**\n\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t *\n\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t *\n\t * @param {string} name The name of the hook.\n\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t * @public\n\t */\n\trun(name, env) {\n\t\tthis[name] = this[name] || [];\n\t\tthis[name].forEach(function (callback) {\n\t\t\tcallback.call(env && env.context ? env.context : env, env);\n\t\t});\n\t}\n}\n\n/**\n * @implements {IPlugins}\n */\nclass Plugins {\n\tconstructor(jsep) {\n\t\tthis.jsep = jsep;\n\t\tthis.registered = {};\n\t}\n\n\t/**\n\t * @callback PluginSetup\n\t * @this {Jsep} jsep\n\t * @returns: void\n\t */\n\t/**\n\t * Adds the given plugin(s) to the registry\n\t *\n\t * @param {object} plugins\n\t * @param {string} plugins.name The name of the plugin\n\t * @param {PluginSetup} plugins.init The init function\n\t * @public\n\t */\n\tregister(...plugins) {\n\t\tplugins.forEach((plugin) => {\n\t\t\tif (typeof plugin !== 'object' || !plugin.name || !plugin.init) {\n\t\t\t\tthrow new Error('Invalid JSEP plugin format');\n\t\t\t}\n\t\t\tif (this.registered[plugin.name]) {\n\t\t\t\t// already registered. Ignore.\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tplugin.init(this.jsep);\n\t\t\tthis.registered[plugin.name] = plugin;\n\t\t});\n\t}\n}\n\n//     JavaScript Expression Parser (JSEP) 1.0.2\n\nclass Jsep {\n\t/**\n\t * @returns {string}\n\t */\n\tstatic get version() {\n\t\t// To be filled in by the template\n\t\treturn '1.0.2';\n\t}\n\n\t/**\n\t * @returns {string}\n\t */\n\tstatic toString() {\n\t\treturn 'JavaScript Expression Parser (JSEP) v' + Jsep.version;\n\t};\n\n\t// ==================== CONFIG ================================\n\t/**\n\t * @method addUnaryOp\n\t * @param {string} op_name The name of the unary op to add\n\t * @returns {Jsep}\n\t */\n\tstatic addUnaryOp(op_name) {\n\t\tJsep.max_unop_len = Math.max(op_name.length, Jsep.max_unop_len);\n\t\tJsep.unary_ops[op_name] = 1;\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method jsep.addBinaryOp\n\t * @param {string} op_name The name of the binary op to add\n\t * @param {number} precedence The precedence of the binary op (can be a float). Higher number = higher precedence\n\t * @returns {Jsep}\n\t */\n\tstatic addBinaryOp(op_name, precedence) {\n\t\tJsep.max_binop_len = Math.max(op_name.length, Jsep.max_binop_len);\n\t\tJsep.binary_ops[op_name] = precedence;\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method addIdentifierChar\n\t * @param {string} char The additional character to treat as a valid part of an identifier\n\t * @returns {Jsep}\n\t */\n\tstatic addIdentifierChar(char) {\n\t\tJsep.additional_identifier_chars.add(char);\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method addLiteral\n\t * @param {string} literal_name The name of the literal to add\n\t * @param {*} literal_value The value of the literal\n\t * @returns {Jsep}\n\t */\n\tstatic addLiteral(literal_name, literal_value) {\n\t\tJsep.literals[literal_name] = literal_value;\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeUnaryOp\n\t * @param {string} op_name The name of the unary op to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeUnaryOp(op_name) {\n\t\tdelete Jsep.unary_ops[op_name];\n\t\tif (op_name.length === Jsep.max_unop_len) {\n\t\t\tJsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);\n\t\t}\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllUnaryOps\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllUnaryOps() {\n\t\tJsep.unary_ops = {};\n\t\tJsep.max_unop_len = 0;\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeIdentifierChar\n\t * @param {string} char The additional character to stop treating as a valid part of an identifier\n\t * @returns {Jsep}\n\t */\n\tstatic removeIdentifierChar(char) {\n\t\tJsep.additional_identifier_chars.delete(char);\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeBinaryOp\n\t * @param {string} op_name The name of the binary op to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeBinaryOp(op_name) {\n\t\tdelete Jsep.binary_ops[op_name];\n\n\t\tif (op_name.length === Jsep.max_binop_len) {\n\t\t\tJsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);\n\t\t}\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllBinaryOps\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllBinaryOps() {\n\t\tJsep.binary_ops = {};\n\t\tJsep.max_binop_len = 0;\n\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeLiteral\n\t * @param {string} literal_name The name of the literal to remove\n\t * @returns {Jsep}\n\t */\n\tstatic removeLiteral(literal_name) {\n\t\tdelete Jsep.literals[literal_name];\n\t\treturn Jsep;\n\t}\n\n\t/**\n\t * @method removeAllLiterals\n\t * @returns {Jsep}\n\t */\n\tstatic removeAllLiterals() {\n\t\tJsep.literals = {};\n\n\t\treturn Jsep;\n\t}\n\t// ==================== END CONFIG ============================\n\n\n\t/**\n\t * @returns {string}\n\t */\n\tget char() {\n\t\treturn this.expr.charAt(this.index);\n\t}\n\n\t/**\n\t * @returns {number}\n\t */\n\tget code() {\n\t\treturn this.expr.charCodeAt(this.index);\n\t};\n\n\n\t/**\n\t * @param {string} expr a string with the passed in express\n\t * @returns Jsep\n\t */\n\tconstructor(expr) {\n\t\t// `index` stores the character number we are currently at\n\t\t// All of the gobbles below will modify `index` as we move along\n\t\tthis.expr = expr;\n\t\tthis.index = 0;\n\t}\n\n\t/**\n\t * static top-level parser\n\t * @returns {jsep.Expression}\n\t */\n\tstatic parse(expr) {\n\t\treturn (new Jsep(expr)).parse();\n\t}\n\n\t/**\n\t * Get the longest key length of any object\n\t * @param {object} obj\n\t * @returns {number}\n\t */\n\tstatic getMaxKeyLen(obj) {\n\t\treturn Math.max(0, ...Object.keys(obj).map(k => k.length));\n\t}\n\n\t/**\n\t * `ch` is a character code in the next three functions\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isDecimalDigit(ch) {\n\t\treturn (ch >= 48 && ch <= 57); // 0...9\n\t}\n\n\t/**\n\t * Returns the precedence of a binary operator or `0` if it isn't a binary operator. Can be float.\n\t * @param {string} op_val\n\t * @returns {number}\n\t */\n\tstatic binaryPrecedence(op_val) {\n\t\treturn Jsep.binary_ops[op_val] || 0;\n\t}\n\n\t/**\n\t * Looks for start of identifier\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isIdentifierStart(ch) {\n\t\treturn  (ch >= 65 && ch <= 90) || // A...Z\n\t\t\t(ch >= 97 && ch <= 122) || // a...z\n\t\t\t(ch >= 128 && !Jsep.binary_ops[String.fromCharCode(ch)]) || // any non-ASCII that is not an operator\n\t\t\t(Jsep.additional_identifier_chars.has(String.fromCharCode(ch))); // additional characters\n\t}\n\n\t/**\n\t * @param {number} ch\n\t * @returns {boolean}\n\t */\n\tstatic isIdentifierPart(ch) {\n\t\treturn Jsep.isIdentifierStart(ch) || Jsep.isDecimalDigit(ch);\n\t}\n\n\t/**\n\t * throw error at index of the expression\n\t * @param {string} message\n\t * @throws\n\t */\n\tthrowError(message) {\n\t\tconst error = new Error(message + ' at character ' + this.index);\n\t\terror.index = this.index;\n\t\terror.description = message;\n\t\tthrow error;\n\t}\n\n\t/**\n\t * Run a given hook\n\t * @param {string} name\n\t * @param {jsep.Expression|false} [node]\n\t * @returns {?jsep.Expression}\n\t */\n\trunHook(name, node) {\n\t\tif (Jsep.hooks[name]) {\n\t\t\tconst env = { context: this, node };\n\t\t\tJsep.hooks.run(name, env);\n\t\t\treturn env.node;\n\t\t}\n\t\treturn node;\n\t}\n\n\t/**\n\t * Runs a given hook until one returns a node\n\t * @param {string} name\n\t * @returns {?jsep.Expression}\n\t */\n\tsearchHook(name) {\n\t\tif (Jsep.hooks[name]) {\n\t\t\tconst env = { context: this };\n\t\t\tJsep.hooks[name].find(function (callback) {\n\t\t\t\tcallback.call(env.context, env);\n\t\t\t\treturn env.node;\n\t\t\t});\n\t\t\treturn env.node;\n\t\t}\n\t}\n\n\t/**\n\t * Push `index` up to the next non-space character\n\t */\n\tgobbleSpaces() {\n\t\tlet ch = this.code;\n\t\t// Whitespace\n\t\twhile (ch === Jsep.SPACE_CODE\n\t\t|| ch === Jsep.TAB_CODE\n\t\t|| ch === Jsep.LF_CODE\n\t\t|| ch === Jsep.CR_CODE) {\n\t\t\tch = this.expr.charCodeAt(++this.index);\n\t\t}\n\t\tthis.runHook('gobble-spaces');\n\t}\n\n\t/**\n\t * Top-level method to parse all expressions and returns compound or single node\n\t * @returns {jsep.Expression}\n\t */\n\tparse() {\n\t\tthis.runHook('before-all');\n\t\tconst nodes = this.gobbleExpressions();\n\n\t\t// If there's only one expression just try returning the expression\n\t\tconst node = nodes.length === 1\n\t\t  ? nodes[0]\n\t\t\t: {\n\t\t\t\ttype: Jsep.COMPOUND,\n\t\t\t\tbody: nodes\n\t\t\t};\n\t\treturn this.runHook('after-all', node);\n\t}\n\n\t/**\n\t * top-level parser (but can be reused within as well)\n\t * @param {number} [untilICode]\n\t * @returns {jsep.Expression[]}\n\t */\n\tgobbleExpressions(untilICode) {\n\t\tlet nodes = [], ch_i, node;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tch_i = this.code;\n\n\t\t\t// Expressions can be separated by semicolons, commas, or just inferred without any\n\t\t\t// separators\n\t\t\tif (ch_i === Jsep.SEMCOL_CODE || ch_i === Jsep.COMMA_CODE) {\n\t\t\t\tthis.index++; // ignore separators\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Try to gobble each expression individually\n\t\t\t\tif (node = this.gobbleExpression()) {\n\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t// If we weren't able to find a binary expression and are out of room, then\n\t\t\t\t\t// the expression passed in probably has too much\n\t\t\t\t}\n\t\t\t\telse if (this.index < this.expr.length) {\n\t\t\t\t\tif (ch_i === untilICode) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.throwError('Unexpected \"' + this.char + '\"');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * The main parsing function.\n\t * @returns {?jsep.Expression}\n\t */\n\tgobbleExpression() {\n\t\tconst node = this.searchHook('gobble-expression') || this.gobbleBinaryExpression();\n\t\tthis.gobbleSpaces();\n\n\t\treturn this.runHook('after-expression', node);\n\t}\n\n\t/**\n\t * Search for the operation portion of the string (e.g. `+`, `===`)\n\t * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)\n\t * and move down from 3 to 2 to 1 character until a matching binary operation is found\n\t * then, return that binary operation\n\t * @returns {string|boolean}\n\t */\n\tgobbleBinaryOp() {\n\t\tthis.gobbleSpaces();\n\t\tlet to_check = this.expr.substr(this.index, Jsep.max_binop_len);\n\t\tlet tc_len = to_check.length;\n\n\t\twhile (tc_len > 0) {\n\t\t\t// Don't accept a binary op when it is an identifier.\n\t\t\t// Binary ops that start with a identifier-valid character must be followed\n\t\t\t// by a non identifier-part valid character\n\t\t\tif (Jsep.binary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t!Jsep.isIdentifierStart(this.code) ||\n\t\t\t\t(this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))\n\t\t\t)) {\n\t\t\t\tthis.index += tc_len;\n\t\t\t\treturn to_check;\n\t\t\t}\n\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * This function is responsible for gobbling an individual expression,\n\t * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`\n\t * @returns {?jsep.BinaryExpression}\n\t */\n\tgobbleBinaryExpression() {\n\t\tlet node, biop, prec, stack, biop_info, left, right, i, cur_biop;\n\n\t\t// First, try to get the leftmost thing\n\t\t// Then, check to see if there's a binary operator operating on that leftmost thing\n\t\t// Don't gobbleBinaryOp without a left-hand-side\n\t\tleft = this.gobbleToken();\n\t\tif (!left) {\n\t\t\treturn left;\n\t\t}\n\t\tbiop = this.gobbleBinaryOp();\n\n\t\t// If there wasn't a binary operator, just return the leftmost node\n\t\tif (!biop) {\n\t\t\treturn left;\n\t\t}\n\n\t\t// Otherwise, we need to start a stack to properly place the binary operations in their\n\t\t// precedence structure\n\t\tbiop_info = { value: biop, prec: Jsep.binaryPrecedence(biop)};\n\n\t\tright = this.gobbleToken();\n\n\t\tif (!right) {\n\t\t\tthis.throwError(\"Expected expression after \" + biop);\n\t\t}\n\n\t\tstack = [left, biop_info, right];\n\n\t\t// Properly deal with precedence using [recursive descent](http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm)\n\t\twhile ((biop = this.gobbleBinaryOp())) {\n\t\t\tprec = Jsep.binaryPrecedence(biop);\n\n\t\t\tif (prec === 0) {\n\t\t\t\tthis.index -= biop.length;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tbiop_info = { value: biop, prec };\n\n\t\t\tcur_biop = biop;\n\n\t\t\t// Reduce: make a binary expression from the three topmost entries.\n\t\t\twhile ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {\n\t\t\t\tright = stack.pop();\n\t\t\t\tbiop = stack.pop().value;\n\t\t\t\tleft = stack.pop();\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.BINARY_EXP,\n\t\t\t\t\toperator: biop,\n\t\t\t\t\tleft,\n\t\t\t\t\tright\n\t\t\t\t};\n\t\t\t\tstack.push(node);\n\t\t\t}\n\n\t\t\tnode = this.gobbleToken();\n\n\t\t\tif (!node) {\n\t\t\t\tthis.throwError(\"Expected expression after \" + cur_biop);\n\t\t\t}\n\n\t\t\tstack.push(biop_info, node);\n\t\t}\n\n\t\ti = stack.length - 1;\n\t\tnode = stack[i];\n\n\t\twhile (i > 1) {\n\t\t\tnode = {\n\t\t\t\ttype: Jsep.BINARY_EXP,\n\t\t\t\toperator: stack[i - 1].value,\n\t\t\t\tleft: stack[i - 2],\n\t\t\t\tright: node\n\t\t\t};\n\t\t\ti -= 2;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * An individual part of a binary expression:\n\t * e.g. `foo.bar(baz)`, `1`, `\"abc\"`, `(a % 2)` (because it's in parenthesis)\n\t * @returns {boolean|jsep.Expression}\n\t */\n\tgobbleToken() {\n\t\tlet ch, to_check, tc_len, node;\n\n\t\tthis.gobbleSpaces();\n\t\tnode = this.searchHook('gobble-token');\n\t\tif (node) {\n\t\t\treturn this.runHook('after-token', node);\n\t\t}\n\n\t\tch = this.code;\n\n\t\tif (Jsep.isDecimalDigit(ch) || ch === Jsep.PERIOD_CODE) {\n\t\t\t// Char code 46 is a dot `.` which can start off a numeric literal\n\t\t\treturn this.gobbleNumericLiteral();\n\t\t}\n\n\t\tif (ch === Jsep.SQUOTE_CODE || ch === Jsep.DQUOTE_CODE) {\n\t\t\t// Single or double quotes\n\t\t\tnode = this.gobbleStringLiteral();\n\t\t}\n\t\telse if (ch === Jsep.OBRACK_CODE) {\n\t\t\tnode = this.gobbleArray();\n\t\t}\n\t\telse {\n\t\t\tto_check = this.expr.substr(this.index, Jsep.max_unop_len);\n\t\t\ttc_len = to_check.length;\n\n\t\t\twhile (tc_len > 0) {\n\t\t\t\t// Don't accept an unary op when it is an identifier.\n\t\t\t\t// Unary ops that start with a identifier-valid character must be followed\n\t\t\t\t// by a non identifier-part valid character\n\t\t\t\tif (Jsep.unary_ops.hasOwnProperty(to_check) && (\n\t\t\t\t\t!Jsep.isIdentifierStart(this.code) ||\n\t\t\t\t\t(this.index + to_check.length < this.expr.length && !Jsep.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))\n\t\t\t\t)) {\n\t\t\t\t\tthis.index += tc_len;\n\t\t\t\t\tconst argument = this.gobbleToken();\n\t\t\t\t\tif (!argument) {\n\t\t\t\t\t\tthis.throwError('missing unaryOp argument');\n\t\t\t\t\t}\n\t\t\t\t\treturn this.runHook('after-token', {\n\t\t\t\t\t\ttype: Jsep.UNARY_EXP,\n\t\t\t\t\t\toperator: to_check,\n\t\t\t\t\t\targument,\n\t\t\t\t\t\tprefix: true\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tto_check = to_check.substr(0, --tc_len);\n\t\t\t}\n\n\t\t\tif (Jsep.isIdentifierStart(ch)) {\n\t\t\t\tnode = this.gobbleIdentifier();\n\t\t\t\tif (Jsep.literals.hasOwnProperty(node.name)) {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: Jsep.LITERAL,\n\t\t\t\t\t\tvalue: Jsep.literals[node.name],\n\t\t\t\t\t\traw: node.name,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse if (node.name === Jsep.this_str) {\n\t\t\t\t\tnode = { type: Jsep.THIS_EXP };\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (ch === Jsep.OPAREN_CODE) { // open parenthesis\n\t\t\t\tnode = this.gobbleGroup();\n\t\t\t}\n\t\t}\n\n\t\tif (!node) {\n\t\t\treturn this.runHook('after-token', false);\n\t\t}\n\n\t\tnode = this.gobbleTokenProperty(node);\n\t\treturn this.runHook('after-token', node);\n\t}\n\n\t/**\n\t * Gobble properties of of identifiers/strings/arrays/groups.\n\t * e.g. `foo`, `bar.baz`, `foo['bar'].baz`\n\t * It also gobbles function calls:\n\t * e.g. `Math.acos(obj.angle)`\n\t * @param {jsep.Expression} node\n\t * @returns {jsep.Expression}\n\t */\n\tgobbleTokenProperty(node) {\n\t\tthis.gobbleSpaces();\n\n\t\tlet ch = this.code;\n\t\twhile (ch === Jsep.PERIOD_CODE || ch === Jsep.OBRACK_CODE || ch === Jsep.OPAREN_CODE) {\n\t\t\tthis.index++;\n\n\t\t\tif (ch === Jsep.PERIOD_CODE) {\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.MEMBER_EXP,\n\t\t\t\t\tcomputed: false,\n\t\t\t\t\tobject: node,\n\t\t\t\t\tproperty: this.gobbleIdentifier(),\n\t\t\t\t};\n\t\t\t}\n\t\t\telse if (ch === Jsep.OBRACK_CODE) {\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.MEMBER_EXP,\n\t\t\t\t\tcomputed: true,\n\t\t\t\t\tobject: node,\n\t\t\t\t\tproperty: this.gobbleExpression()\n\t\t\t\t};\n\t\t\t\tthis.gobbleSpaces();\n\t\t\t\tch = this.code;\n\t\t\t\tif (ch !== Jsep.CBRACK_CODE) {\n\t\t\t\t\tthis.throwError('Unclosed [');\n\t\t\t\t}\n\t\t\t\tthis.index++;\n\t\t\t}\n\t\t\telse if (ch === Jsep.OPAREN_CODE) {\n\t\t\t\t// A function call is being made; gobble all the arguments\n\t\t\t\tnode = {\n\t\t\t\t\ttype: Jsep.CALL_EXP,\n\t\t\t\t\t'arguments': this.gobbleArguments(Jsep.CPAREN_CODE),\n\t\t\t\t\tcallee: node\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.gobbleSpaces();\n\t\t\tch = this.code;\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to\n\t * keep track of everything in the numeric literal and then calling `parseFloat` on that string\n\t * @returns {jsep.Literal}\n\t */\n\tgobbleNumericLiteral() {\n\t\tlet number = '', ch, chCode;\n\n\t\twhile (Jsep.isDecimalDigit(this.code)) {\n\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t}\n\n\t\tif (this.code === Jsep.PERIOD_CODE) { // can start with a decimal marker\n\t\t\tnumber += this.expr.charAt(this.index++);\n\n\t\t\twhile (Jsep.isDecimalDigit(this.code)) {\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\t\t}\n\n\t\tch = this.char;\n\n\t\tif (ch === 'e' || ch === 'E') { // exponent marker\n\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\tch = this.char;\n\n\t\t\tif (ch === '+' || ch === '-') { // exponent sign\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\n\t\t\twhile (Jsep.isDecimalDigit(this.code)) { // exponent itself\n\t\t\t\tnumber += this.expr.charAt(this.index++);\n\t\t\t}\n\n\t\t\tif (!Jsep.isDecimalDigit(this.expr.charCodeAt(this.index - 1)) ) {\n\t\t\t\tthis.throwError('Expected exponent (' + number + this.char + ')');\n\t\t\t}\n\t\t}\n\n\t\tchCode = this.code;\n\n\t\t// Check to make sure this isn't a variable name that start with a number (123abc)\n\t\tif (Jsep.isIdentifierStart(chCode)) {\n\t\t\tthis.throwError('Variable names cannot start with a number (' +\n\t\t\t\tnumber + this.char + ')');\n\t\t}\n\t\telse if (chCode === Jsep.PERIOD_CODE || (number.length === 1 && number.charCodeAt(0) === Jsep.PERIOD_CODE)) {\n\t\t\tthis.throwError('Unexpected period');\n\t\t}\n\n\t\treturn {\n\t\t\ttype: Jsep.LITERAL,\n\t\t\tvalue: parseFloat(number),\n\t\t\traw: number\n\t\t};\n\t}\n\n\t/**\n\t * Parses a string literal, staring with single or double quotes with basic support for escape codes\n\t * e.g. `\"hello world\"`, `'this is\\nJSEP'`\n\t * @returns {jsep.Literal}\n\t */\n\tgobbleStringLiteral() {\n\t\tlet str = '';\n\t\tlet quote = this.expr.charAt(this.index++);\n\t\tlet closed = false;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tlet ch = this.expr.charAt(this.index++);\n\n\t\t\tif (ch === quote) {\n\t\t\t\tclosed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ch === '\\\\') {\n\t\t\t\t// Check for all of the common escape codes\n\t\t\t\tch = this.expr.charAt(this.index++);\n\n\t\t\t\tswitch (ch) {\n\t\t\t\t\tcase 'n': str += '\\n'; break;\n\t\t\t\t\tcase 'r': str += '\\r'; break;\n\t\t\t\t\tcase 't': str += '\\t'; break;\n\t\t\t\t\tcase 'b': str += '\\b'; break;\n\t\t\t\t\tcase 'f': str += '\\f'; break;\n\t\t\t\t\tcase 'v': str += '\\x0B'; break;\n\t\t\t\t\tdefault : str += ch;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstr += ch;\n\t\t\t}\n\t\t}\n\n\t\tif (!closed) {\n\t\t\tthis.throwError('Unclosed quote after \"' + str + '\"');\n\t\t}\n\n\t\treturn {\n\t\t\ttype: Jsep.LITERAL,\n\t\t\tvalue: str,\n\t\t\traw: quote + str + quote\n\t\t};\n\t}\n\n\t/**\n\t * Gobbles only identifiers\n\t * e.g.: `foo`, `_value`, `$x1`\n\t * Also, this function checks if that identifier is a literal:\n\t * (e.g. `true`, `false`, `null`) or `this`\n\t * @returns {jsep.Identifier}\n\t */\n\tgobbleIdentifier() {\n\t\tlet ch = this.code, start = this.index;\n\n\t\tif (Jsep.isIdentifierStart(ch)) {\n\t\t\tthis.index++;\n\t\t}\n\t\telse {\n\t\t\tthis.throwError('Unexpected ' + this.char);\n\t\t}\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tch = this.code;\n\n\t\t\tif (Jsep.isIdentifierPart(ch)) {\n\t\t\t\tthis.index++;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\ttype: Jsep.IDENTIFIER,\n\t\t\tname: this.expr.slice(start, this.index),\n\t\t};\n\t}\n\n\t/**\n\t * Gobbles a list of arguments within the context of a function call\n\t * or array literal. This function also assumes that the opening character\n\t * `(` or `[` has already been gobbled, and gobbles expressions and commas\n\t * until the terminator character `)` or `]` is encountered.\n\t * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`\n\t * @param {number} termination\n\t * @returns {jsep.Expression[]}\n\t */\n\tgobbleArguments(termination) {\n\t\tconst args = [];\n\t\tlet closed = false;\n\t\tlet separator_count = 0;\n\n\t\twhile (this.index < this.expr.length) {\n\t\t\tthis.gobbleSpaces();\n\t\t\tlet ch_i = this.code;\n\n\t\t\tif (ch_i === termination) { // done parsing\n\t\t\t\tclosed = true;\n\t\t\t\tthis.index++;\n\n\t\t\t\tif (termination === Jsep.CPAREN_CODE && separator_count && separator_count >= args.length){\n\t\t\t\t\tthis.throwError('Unexpected token ' + String.fromCharCode(termination));\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (ch_i === Jsep.COMMA_CODE) { // between expressions\n\t\t\t\tthis.index++;\n\t\t\t\tseparator_count++;\n\n\t\t\t\tif (separator_count !== args.length) { // missing argument\n\t\t\t\t\tif (termination === Jsep.CPAREN_CODE) {\n\t\t\t\t\t\tthis.throwError('Unexpected token ,');\n\t\t\t\t\t}\n\t\t\t\t\telse if (termination === Jsep.CBRACK_CODE) {\n\t\t\t\t\t\tfor (let arg = args.length; arg < separator_count; arg++) {\n\t\t\t\t\t\t\targs.push(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (args.length !== separator_count && separator_count !== 0) {\n\t\t\t\t// NOTE: `&& separator_count !== 0` allows for either all commas, or all spaces as arguments\n\t\t\t\tthis.throwError('Expected comma');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst node = this.gobbleExpression();\n\n\t\t\t\tif (!node || node.type === Jsep.COMPOUND) {\n\t\t\t\t\tthis.throwError('Expected comma');\n\t\t\t\t}\n\n\t\t\t\targs.push(node);\n\t\t\t}\n\t\t}\n\n\t\tif (!closed) {\n\t\t\tthis.throwError('Expected ' + String.fromCharCode(termination));\n\t\t}\n\n\t\treturn args;\n\t}\n\n\t/**\n\t * Responsible for parsing a group of things within parentheses `()`\n\t * that have no identifier in front (so not a function call)\n\t * This function assumes that it needs to gobble the opening parenthesis\n\t * and then tries to gobble everything within that parenthesis, assuming\n\t * that the next thing it should see is the close parenthesis. If not,\n\t * then the expression probably doesn't have a `)`\n\t * @returns {boolean|jsep.Expression}\n\t */\n\tgobbleGroup() {\n\t\tthis.index++;\n\t\tlet nodes = this.gobbleExpressions(Jsep.CPAREN_CODE);\n\t\tif (this.code === Jsep.CPAREN_CODE) {\n\t\t\tthis.index++;\n\t\t\tif (nodes.length === 1) {\n\t\t\t\treturn nodes[0];\n\t\t\t}\n\t\t\telse if (!nodes.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn {\n\t\t\t\t\ttype: Jsep.SEQUENCE_EXP,\n\t\t\t\t\texpressions: nodes,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.throwError('Unclosed (');\n\t\t}\n\t}\n\n\t/**\n\t * Responsible for parsing Array literals `[1, 2, 3]`\n\t * This function assumes that it needs to gobble the opening bracket\n\t * and then tries to gobble the expressions as arguments.\n\t * @returns {jsep.ArrayExpression}\n\t */\n\tgobbleArray() {\n\t\tthis.index++;\n\n\t\treturn {\n\t\t\ttype: Jsep.ARRAY_EXP,\n\t\t\telements: this.gobbleArguments(Jsep.CBRACK_CODE)\n\t\t};\n\t}\n}\n\n// Static fields:\nconst hooks = new Hooks();\nObject.assign(Jsep, {\n\thooks,\n\tplugins: new Plugins(Jsep),\n\n\t// Node Types\n\t// ----------\n\t// This is the full set of types that any JSEP node can be.\n\t// Store them here to save space when minified\n\tCOMPOUND:        'Compound',\n\tSEQUENCE_EXP:    'SequenceExpression',\n\tIDENTIFIER:      'Identifier',\n\tMEMBER_EXP:      'MemberExpression',\n\tLITERAL:         'Literal',\n\tTHIS_EXP:        'ThisExpression',\n\tCALL_EXP:        'CallExpression',\n\tUNARY_EXP:       'UnaryExpression',\n\tBINARY_EXP:      'BinaryExpression',\n\tARRAY_EXP:       'ArrayExpression',\n\n\tTAB_CODE:    9,\n\tLF_CODE:     10,\n\tCR_CODE:     13,\n\tSPACE_CODE:  32,\n\tPERIOD_CODE: 46, // '.'\n\tCOMMA_CODE:  44, // ','\n\tSQUOTE_CODE: 39, // single quote\n\tDQUOTE_CODE: 34, // double quotes\n\tOPAREN_CODE: 40, // (\n\tCPAREN_CODE: 41, // )\n\tOBRACK_CODE: 91, // [\n\tCBRACK_CODE: 93, // ]\n\tQUMARK_CODE: 63, // ?\n\tSEMCOL_CODE: 59, // ;\n\tCOLON_CODE:  58, // :\n\n\n\t// Operations\n\t// ----------\n\t// Use a quickly-accessible map to store all of the unary operators\n\t// Values are set to `1` (it really doesn't matter)\n\tunary_ops: {\n\t\t'-': 1,\n\t\t'!': 1,\n\t\t'~': 1,\n\t\t'+': 1\n\t},\n\n\t// Also use a map for the binary operations but set their values to their\n\t// binary precedence for quick reference (higher number = higher precedence)\n\t// see [Order of operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)\n\tbinary_ops: {\n\t\t'||': 1, '&&': 2, '|': 3, '^': 4, '&': 5,\n\t\t'==': 6, '!=': 6, '===': 6, '!==': 6,\n\t\t'<': 7, '>': 7, '<=': 7, '>=': 7,\n\t\t'<<': 8, '>>': 8, '>>>': 8,\n\t\t'+': 9, '-': 9,\n\t\t'*': 10, '/': 10, '%': 10\n\t},\n\n\t// Additional valid identifier chars, apart from a-z, A-Z and 0-9 (except on the starting char)\n\tadditional_identifier_chars: new Set(['$', '_']),\n\n\t// Literals\n\t// ----------\n\t// Store the values to return for the various literals we may encounter\n\tliterals: {\n\t\t'true': true,\n\t\t'false': false,\n\t\t'null': null\n\t},\n\n\t// Except for `this`, which is special. This could be changed to something like `'self'` as well\n\tthis_str: 'this',\n});\nJsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);\nJsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);\n\n// Backward Compatibility:\nconst jsep = expr => (new Jsep(expr)).parse();\nconst staticMethods = Object.getOwnPropertyNames(Jsep);\nstaticMethods\n\t.forEach((m) => {\n\t\tif (jsep[m] === undefined && m !== 'prototype') {\n\t\t\tjsep[m] = Jsep[m];\n\t\t}\n\t});\njsep.Jsep = Jsep; // allows for const { Jsep } = require('jsep');\n\nconst CONDITIONAL_EXP = 'ConditionalExpression';\n\nvar ternary = {\n\tname: 'ternary',\n\n\tinit(jsep) {\n\t\t// Ternary expression: test ? consequent : alternate\n\t\tjsep.hooks.add('after-expression', function gobbleTernary(env) {\n\t\t\tif (env.node && this.code === jsep.QUMARK_CODE) {\n\t\t\t\tthis.index++;\n\t\t\t\tconst test = env.node;\n\t\t\t\tconst consequent = this.gobbleExpression();\n\n\t\t\t\tif (!consequent) {\n\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t}\n\n\t\t\t\tthis.gobbleSpaces();\n\n\t\t\t\tif (this.code === jsep.COLON_CODE) {\n\t\t\t\t\tthis.index++;\n\t\t\t\t\tconst alternate = this.gobbleExpression();\n\n\t\t\t\t\tif (!alternate) {\n\t\t\t\t\t\tthis.throwError('Expected expression');\n\t\t\t\t\t}\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent,\n\t\t\t\t\t\talternate,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\t// if binary operator is custom-added (i.e. object plugin), then correct it to a ternary node:\n\t\t\t\telse if (consequent.operator === ':') {\n\t\t\t\t\tenv.node = {\n\t\t\t\t\t\ttype: CONDITIONAL_EXP,\n\t\t\t\t\t\ttest,\n\t\t\t\t\t\tconsequent: consequent.left,\n\t\t\t\t\t\talternate: consequent.right,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.throwError('Expected :');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n};\n\n// Add default plugins:\n\njsep.plugins.register(ternary);\n\nexport { Jsep, jsep as default };\n", "\"use strict\";\nimport jsep from \"jsep\";\nimport { CoreType } from \"../../../core/Type\";\njsep.addUnaryOp(\"@\");\nlet precedence = 10;\njsep.addBinaryOp(\"**\", precedence);\nconst JSEP_IDENTIFIER = \"Identifier\";\nconst JSEP_LITERAL = \"Literal\";\nconst JSEP_CALL_EXPRESSION = \"CallExpression\";\nconst STRING_EXPRESSION_SEPARATOR = \"`\";\nexport function stringValueElements(v) {\n  if (v != null) {\n    if (CoreType.isString(v)) {\n      return v.split(STRING_EXPRESSION_SEPARATOR);\n    } else {\n      return [];\n    }\n  } else {\n    return [];\n  }\n}\nexport class ParsedTree {\n  constructor(_param) {\n    this._param = _param;\n  }\n  node() {\n    return this._node;\n  }\n  errorMessage() {\n    return this._errorMessage;\n  }\n  parseExpression(string) {\n    try {\n      this.reset();\n      this._node = jsep(string);\n    } catch (e) {\n      const message = `could not parse the expression '${string}' (error: ${e})`;\n      this._errorMessage = message;\n    }\n  }\n  parseExpressionForStringParam(string) {\n    try {\n      this.reset();\n      const elements = stringValueElements(string);\n      const nodes = [];\n      for (let i = 0; i < elements.length; i++) {\n        const element = elements[i];\n        let node;\n        if (i % 2 == 1) {\n          node = jsep(element);\n        } else {\n          const sanitizedElement = element.replace(/\\'/g, \"\\\\'\");\n          node = {\n            type: JSEP_LITERAL,\n            value: `'${sanitizedElement}'`,\n            raw: `'${sanitizedElement}'`\n          };\n          this._param.scene().missingExpressionReferencesController.registerToIgnore(node);\n        }\n        nodes.push(node);\n      }\n      this._node = {\n        type: JSEP_CALL_EXPRESSION,\n        arguments: nodes,\n        callee: {\n          type: JSEP_IDENTIFIER,\n          name: \"strConcat\"\n        }\n      };\n    } catch (e) {\n      const message = `could not parse the expression '${string}' (error: ${e})`;\n      this._errorMessage = message;\n    }\n  }\n  // static string_value_contains_expression(v:string): boolean{\n  // \treturn ((this.string_value_elements(v).length - 1) % 2) === 0;\n  // }\n  // deep_parse_for_string_expressions(){\n  // \t// for string expressions which have more than a single `<expr>` element\n  // \t// pt_`@ptnum`\n  // \t// `@ptnum`_pt\n  // \t// pt_`@ptnum`_`1+1`\n  // \tif(this.node.type == JSEP_COMPOUND){\n  // \t\tconst args = this.node.body\n  // \t\tlet arg;\n  // \t\tfor(let i=0; i<args.length; i++){\n  // \t\t\targ = args[i]\n  // \t\t\tif(arg.type == JSEP_LITERAL){\n  // \t\t\t\tconst arg_node = jsep(arg.value)\n  // \t\t\t\targs[i] = arg_node\n  // \t\t\t}\n  // \t\t}\n  // \t} else {\n  // \t\t// for string expressions which havea single `<expr>` element\n  // \t\t// `@ptnum`\n  // \t\tif(this.node.type == JSEP_LITERAL){\n  // \t\t\tconst raw = this.node.raw\n  // \t\t\tconst first_char_code = raw.charCodeAt(0)\n  // \t\t\tconst last_char_code = raw.charCodeAt(raw.length-1)\n  // \t\t\tif(first_char_code == HOUDINI_QUOTE_CODE && last_char_code == HOUDINI_QUOTE_CODE){\n  // \t\t\t\tthis.node = jsep(\"''+\"+this.node.value) // add the prefix ''+ to ensure we have a string as a result, and not a number\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // }\n  reset() {\n    this._node = void 0;\n    this._errorMessage = void 0;\n  }\n}\n", "\"use strict\";\nexport class LiteralConstructsController {\n  static if(args) {\n    const condition = args[0];\n    const valTrue = args[1];\n    const valFalse = args[2];\n    return `((${condition}) ? (${valTrue}) : (${valFalse}))`;\n  }\n}\n", "\"use strict\";\nimport { CoreType } from \"../../../core/Type\";\nexport const VARIABLE_PREFIX = \"$\";\nexport class BaseTraverser {\n  constructor(param) {\n    this.param = param;\n    this._set_error_from_error_bound = this._set_error_from_error.bind(this);\n  }\n  clearError() {\n    this._errorMessage = void 0;\n  }\n  setError(message) {\n    this._errorMessage = this._errorMessage || message;\n  }\n  _set_error_from_error(error) {\n    if (CoreType.isString(error)) {\n      this._errorMessage = error;\n    } else {\n      this._errorMessage = error.message;\n    }\n  }\n  isErrored() {\n    return this._errorMessage != null;\n  }\n  errorMessage() {\n    return this._errorMessage;\n  }\n  reset() {\n    this._errorMessage = void 0;\n  }\n  traverse_node(node) {\n    const method_name = `traverse_${node.type}`;\n    const method = this[method_name];\n    if (method) {\n      return this[method_name](node);\n    } else {\n      this.setError(`expression unknown node type: ${node.type}`);\n    }\n  }\n  traverse_BinaryExpression(node) {\n    return `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n  }\n  // protected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n  // \t// || or &&\n  // \treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n  // }\n  traverse_MemberExpression(node) {\n    return `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n  }\n  traverse_ConditionalExpression(node) {\n    return `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(\n      node.alternate\n    )})`;\n  }\n  // currently only used for string expressions such as\n  // pt_`@ptnum+1`\n  traverse_Compound(node) {\n    const args = node.body;\n    let traversed_args = [];\n    for (let i = 0; i < args.length; i++) {\n      const arg_node = args[i];\n      if (arg_node.type == \"Identifier\") {\n        if (arg_node.name[0] == VARIABLE_PREFIX) {\n          traversed_args.push(\"`${\" + this.traverse_node(arg_node) + \"}`\");\n        } else {\n          traversed_args.push(`'${arg_node.name}'`);\n        }\n      } else {\n        traversed_args.push(\"`${\" + this.traverse_node(arg_node) + \"}`\");\n      }\n    }\n    return traversed_args.join(\" + \");\n  }\n  traverse_Literal(node) {\n    return `${node.raw}`;\n  }\n}\n", "\"use strict\";\nexport const VAR_OBJECT = `geometry`;\nexport const VAR_ENTITY = `entity`;\nexport const VAR_ENTITIES = `entities`;\nexport const CLASS_CORE_POINT = `corePointClassFactory(${VAR_OBJECT})`;\nexport const CLASS_THREEJS_POINT = \"ThreejsPoint\";\nexport const FUNC_GET_ENTITIES_ATTRIBUTE = \"getEntitiesAttribute\";\nexport const FUNC_GET_ENTITY_ATTRIBUTE_VALUE = \"getEntityAttributeValue\";\nexport const FUNC_GET_ENTITY_ATTRIBUTE_VALUE_FUNC = \"getEntityAttributeValueFunc\";\n", "\"use strict\";\nimport { VAR_OBJECT, VAR_ENTITIES, CLASS_CORE_POINT, CLASS_THREEJS_POINT, FUNC_GET_ENTITIES_ATTRIBUTE } from \"./Common\";\nexport class AttributeRequirementsController {\n  constructor() {\n  }\n  reset() {\n    if (this._attributeNames) {\n      this._attributeNames.clear();\n    }\n  }\n  assignAttributesLines() {\n    if (this._attributeNames) {\n      const lines = [];\n      for (const attribName of this._attributeNames) {\n        lines.push(AttributeRequirementsController.assignAttributeLine(attribName));\n      }\n      return lines.join(\";\\n\");\n    } else {\n      return \"\";\n    }\n  }\n  assignArraysLines() {\n    if (this._attributeNames) {\n      const lines = [];\n      if (this._attributeNames.size > 0) {\n        const objectLine = `const ${VAR_OBJECT} = entities[0].object();`;\n        lines.push(objectLine);\n      }\n      for (const attribName of this._attributeNames) {\n        lines.push(AttributeRequirementsController.assignItemSizeLine(attribName));\n        lines.push(AttributeRequirementsController.assignArrayLine(attribName));\n      }\n      return lines.join(\";\\n\");\n    } else {\n      return \"\";\n    }\n  }\n  attributePresenceCheckLine() {\n    if (this._attributeNames) {\n      const varNames = [];\n      for (const attribName of this._attributeNames) {\n        const varName = AttributeRequirementsController._varAttribute(attribName);\n        varNames.push(varName);\n      }\n      if (varNames.length > 0) {\n        return varNames.join(\" && \");\n      }\n    }\n    return \"true\";\n  }\n  missingAttributesLine() {\n    if (this._attributeNames) {\n      let lineElements = [\"(()=>{\", \"const missingAttributes = [];\"];\n      for (const attribName of this._attributeNames) {\n        const varName = AttributeRequirementsController._varAttribute(attribName);\n        lineElements.push(`if( !${varName} ) {\tmissingAttributes.push('${attribName}'); }`);\n      }\n      lineElements.push(\"return missingAttributes;\", \"})\");\n      return lineElements.join(\"\");\n    }\n    return \"[]\";\n  }\n  add(attribName) {\n    this._attributeNames = this._attributeNames || /* @__PURE__ */ new Set();\n    this._attributeNames.add(attribName);\n  }\n  static assignAttributeLine(attribName) {\n    const varAttribute = this._varAttribute(attribName);\n    return `const ${varAttribute} = ${FUNC_GET_ENTITIES_ATTRIBUTE}(${VAR_ENTITIES},'${attribName}')`;\n  }\n  static assignItemSizeLine(attribName) {\n    const varAttribute = this._varAttribute(attribName);\n    const varAttributeSize = this._varAttribSize(attribName);\n    return `const ${varAttributeSize} = ${varAttribute}.itemSize`;\n  }\n  static assignArrayLine(attribName) {\n    const varAttribute = this._varAttribute(attribName);\n    const varArray = this._varArray(attribName);\n    const isIndexedCondition = `(${VAR_ENTITIES}[0] && ${VAR_ENTITIES}[0] instanceof ${CLASS_THREEJS_POINT} && ${CLASS_CORE_POINT}.isAttribIndexed(${VAR_OBJECT}, '${attribName}'))`;\n    const indexedArray = `${VAR_ENTITIES}.map(e=>e.indexedAttribValue('${attribName}'))`;\n    const nonIndexedArray = `${varAttribute}.array`;\n    return `const ${varArray} = ${isIndexedCondition} ? ${indexedArray} : ${nonIndexedArray};`;\n  }\n  static _varAttribute(attribName) {\n    return `attrib_${attribName}`;\n  }\n  static _varAttribSize(attribName) {\n    return `attribSize_${attribName}`;\n  }\n  static _varArray(attribName) {\n    return `array_${attribName}`;\n  }\n  varAttributeSize(attribName) {\n    return AttributeRequirementsController._varAttribSize(attribName);\n  }\n  varArray(attribName) {\n    return AttributeRequirementsController._varArray(attribName);\n  }\n}\n", "\"use strict\";\nimport { Vector4 } from \"three\";\nimport { LiteralConstructsController } from \"../LiteralConstructsController\";\nimport { Attribute, CoreAttribute } from \"../../../core/geometry/Attribute\";\nimport { BaseTraverser } from \"./_Base\";\nimport {\n  VAR_ENTITY,\n  VAR_ENTITIES,\n  FUNC_GET_ENTITIES_ATTRIBUTE,\n  FUNC_GET_ENTITY_ATTRIBUTE_VALUE,\n  FUNC_GET_ENTITY_ATTRIBUTE_VALUE_FUNC\n} from \"../Common\";\nimport { AttributeRequirementsController } from \"../AttributeRequirementsController\";\nimport { CoreMath } from \"../../../core/math/_Module\";\nimport { CoreString } from \"../../../core/String\";\nimport { Poly } from \"../../Poly\";\nimport { CoreType, isArray, isVector, isColor } from \"../../../core/Type\";\nimport { ThreejsPoint } from \"../../../core/geometry/modules/three/ThreejsPoint\";\nimport { corePointClassFactory } from \"../../../core/geometry/CoreObjectFactory\";\nimport { VARIABLE_PREFIX } from \"./_Base\";\nconst QUOTE = \"'\";\nconst ARGUMENTS_SEPARATOR = \", \";\nconst ATTRIBUTE_PREFIX = \"@\";\nconst NATIVE_MATH_METHODS = [\n  \"abs\",\n  \"acos\",\n  \"acosh\",\n  \"asin\",\n  \"asinh\",\n  \"atan\",\n  \"atan2\",\n  \"atanh\",\n  \"ceil\",\n  \"cos\",\n  \"cosh\",\n  \"exp\",\n  \"expm1\",\n  \"floor\",\n  \"log\",\n  \"log1p\",\n  \"log2\",\n  \"log10\",\n  \"max\",\n  \"min\",\n  \"pow\",\n  \"round\",\n  \"sign\",\n  \"sin\",\n  \"sinh\",\n  \"sqrt\",\n  \"tan\",\n  \"tanh\"\n];\nconst NATIVE_ES6_MATH_METHODS = [\"cbrt\", \"hypot\", \"log10\", \"trunc\"];\nconst NATIVE_MATH_METHODS_RENAMED = {\n  math_random: \"random\"\n};\nconst CORE_MATH_METHODS = [\"fit\", \"fit01\", \"fract\", \"deg2rad\", \"rad2deg\", \"rand\", \"clamp\"];\nimport { Easing } from \"../../../core/math/Easing\";\nconst EASING_METHODS = Object.keys(Easing);\nconst CORE_STRING_METHODS = [\"precision\"];\nconst NATIVE_MATH_CONSTANTS = [\"E\", \"LN2\", \"LN10\", \"LOG10E\", \"LOG2E\", \"PI\", \"SQRT1_2\", \"SQRT2\"];\nconst DIRECT_EXPRESSION_FUNCTIONS = {};\nNATIVE_MATH_METHODS.forEach((name) => {\n  DIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nNATIVE_ES6_MATH_METHODS.forEach((name) => {\n  DIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nObject.keys(NATIVE_MATH_METHODS_RENAMED).forEach((name) => {\n  const remaped = NATIVE_MATH_METHODS_RENAMED[name];\n  DIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${remaped}`;\n});\nCORE_MATH_METHODS.forEach((name) => {\n  DIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.${name}`;\n});\nEASING_METHODS.forEach((name) => {\n  DIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.Easing.${name}`;\n});\nCORE_STRING_METHODS.forEach((name) => {\n  DIRECT_EXPRESSION_FUNCTIONS[name] = `Core.String.${name}`;\n});\nconst LITERAL_CONSTRUCT = {\n  if: LiteralConstructsController.if\n};\nconst GLOBAL_CONSTANTS = {};\nNATIVE_MATH_CONSTANTS.forEach((name) => {\n  GLOBAL_CONSTANTS[name] = `Math.${name}`;\n});\nconst PROPERTY_OFFSETS = {\n  x: 0,\n  y: 1,\n  z: 2,\n  w: 3,\n  r: 0,\n  g: 1,\n  b: 2\n};\nconst Core = {\n  Math: CoreMath,\n  String: CoreString\n};\nfunction getEntitiesAttributes(entities, attribName) {\n  const firstEntity = entities[0];\n  if (firstEntity instanceof ThreejsPoint) {\n    return firstEntity.attribute(attribName);\n  } else {\n    return entities.map((e) => e.attribValue(attribName, new Vector4()));\n  }\n}\nfunction getCorePointAttribValue(entity, attribName, array, attributeSize, propertyOffset) {\n  return array[entity.index() * attributeSize + propertyOffset];\n}\nconst VECTOR_PROPERTY_NAME_BY_OFFSET = {\n  0: \"x\",\n  1: \"y\",\n  2: \"z\",\n  3: \"w\"\n};\nconst COLOR_PROPERTY_NAME_BY_OFFSET = {\n  0: \"r\",\n  1: \"g\",\n  2: \"b\",\n  3: \"r\"\n};\nconst _target = new Vector4();\nfunction getCoreEntityAttribValue(entity, attribName, array, attributeSize, propertyOffset) {\n  const value = entity.attribValue(attribName, _target);\n  if (isArray(value)) {\n    return value[propertyOffset];\n  }\n  if (isVector(value)) {\n    return value[VECTOR_PROPERTY_NAME_BY_OFFSET[propertyOffset]];\n  }\n  if (isColor(value)) {\n    return value[COLOR_PROPERTY_NAME_BY_OFFSET[propertyOffset]];\n  }\n  return value;\n}\nfunction getCoreEntityAttribValueFunc(entity) {\n  if (entity instanceof ThreejsPoint) {\n    return getCorePointAttribValue;\n  }\n  return getCoreEntityAttribValue;\n}\nconst FUNCTION_ARGS_DICT = {\n  corePointClassFactory,\n  ThreejsPoint,\n  Core,\n  CoreType,\n  [FUNC_GET_ENTITIES_ATTRIBUTE]: getEntitiesAttributes,\n  [FUNC_GET_ENTITY_ATTRIBUTE_VALUE_FUNC]: getCoreEntityAttribValueFunc\n};\nconst FUNCTION_ARG_NAMES = Object.keys(FUNCTION_ARGS_DICT);\nconst FUNCTION_ARGS = FUNCTION_ARG_NAMES.map((argName) => FUNCTION_ARGS_DICT[argName]);\nexport class FunctionGenerator extends BaseTraverser {\n  // public jsep_dependencies: JsepDependency[] = []\n  // public jsep_nodes_by_missing_paths: JsepsByString = {}\n  // private string_generator: ExpressionStringGenerator = new ExpressionStringGenerator()\n  constructor(param) {\n    super(param);\n    this.param = param;\n    this._entitiesDependent = false;\n    this._attribute_requirements_controller = new AttributeRequirementsController();\n    this.methods = [];\n    this.method_index = -1;\n    this.methodDependencies = [];\n    this.immutableDependencies = [];\n  }\n  entitiesDependent() {\n    return this._entitiesDependent;\n  }\n  parseTree(parsedTree) {\n    this.reset();\n    if (!parsedTree.errorMessage()) {\n      try {\n        this._attribute_requirements_controller = new AttributeRequirementsController();\n        const node = parsedTree.node();\n        if (node) {\n          const function_main_string = this.traverse_node(node);\n          if (function_main_string && !this.isErrored()) {\n            this.function_main_string = function_main_string;\n          }\n        } else {\n          console.warn(\"no parsedTree.node\");\n        }\n      } catch (e) {\n        console.warn(`error in expression for param ${this.param.path()}`);\n        console.warn(e);\n      }\n      if (this.function_main_string) {\n        try {\n          const body = this._functionBody();\n          this.function = new Function(\n            ...FUNCTION_ARG_NAMES,\n            \"param\",\n            \"methods\",\n            \"_set_error_from_error\",\n            `\n\t\t\t\t\ttry {\n\t\t\t\t\t\t${body}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}`\n          );\n        } catch (e) {\n          console.warn(e);\n          this.setError(\"cannot generate function\");\n        }\n      } else {\n        this.setError(\"cannot generate function body\");\n      }\n    } else {\n      this.setError(\"cannot parse expression\");\n    }\n  }\n  reset() {\n    super.reset();\n    this.function_main_string = void 0;\n    this.methods = [];\n    this.method_index = -1;\n    this.function = void 0;\n    this._entitiesDependent = false;\n    this.methodDependencies = [];\n    this.immutableDependencies = [];\n  }\n  _functionBody() {\n    const entitiesDependent = this._entitiesDependent;\n    if (entitiesDependent) {\n      return `\n\t\t\tconst ${VAR_ENTITIES} = param.expressionController.entities();\n\t\t\t\n\t\t\tif(${VAR_ENTITIES}){\n\t\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst entityCallback = param.expressionController.entityCallback();\n\t\t\t\t\t\t// assign_attributes_lines\n\t\t\t\t\t\t${this._attribute_requirements_controller.assignAttributesLines()}\n\t\t\t\t\t\t// check if attributes are present\n\t\t\t\t\t\tif( ${this._attribute_requirements_controller.attributePresenceCheckLine()} ){\n\t\t\t\t\t\t\t// assign function\n\t\t\t\t\t\t\tconst ${FUNC_GET_ENTITY_ATTRIBUTE_VALUE} = ${FUNC_GET_ENTITY_ATTRIBUTE_VALUE_FUNC}(entities[0]);\n\t\t\t\t\t\t\t// assign_arrays_lines\n\t\t\t\t\t\t\t${this._attribute_requirements_controller.assignArraysLines()}\n\t\t\t\t\t\t\tfor(const ${VAR_ENTITY} of ${VAR_ENTITIES}){\n\t\t\t\t\t\t\t\tresult = ${this.function_main_string};\n\t\t\t\t\t\t\t\tentityCallback(${VAR_ENTITY}, result);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolve()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst missingAttributes = ${this._attribute_requirements_controller.missingAttributesLine()}().join(', ');\n\t\t\t\t\t\t\tconst error = new Error('attribute ' + missingAttributes + ' not found')\n\t\t\t\t\t\t\t_set_error_from_error(error)\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}catch(e){\n\t\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn []`;\n    } else {\n      return `\n\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\ttry {\n\t\t\t\t\tconst value = ${this.function_main_string}\n\t\t\t\t\tresolve(value)\n\t\t\t\t} catch(e) {\n\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\treject()\n\t\t\t\t}\n\t\t\t})\n\t\t\t`;\n    }\n  }\n  evalAllowed() {\n    return this.function != null;\n  }\n  evalFunction() {\n    if (this.function) {\n      this.clearError();\n      const result = this.function(...FUNCTION_ARGS, this.param, this.methods, this._set_error_from_error_bound);\n      return result;\n    }\n  }\n  //\n  //\n  // TRAVERSE METHODS\n  //\n  //\n  traverse_CallExpression(node) {\n    const methodArguments = node.arguments.map((arg) => {\n      return this.traverse_node(arg);\n    });\n    const callee = node.callee;\n    const method_name = callee.name;\n    if (method_name) {\n      const literal_contruct = LITERAL_CONSTRUCT[method_name];\n      if (literal_contruct) {\n        return literal_contruct(methodArguments);\n      }\n      const arguments_joined = `${methodArguments.join(ARGUMENTS_SEPARATOR)}`;\n      const direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name];\n      if (direct_function_name) {\n        return `${direct_function_name}(${arguments_joined})`;\n      }\n      const expressionRegister = Poly.expressionsRegister;\n      const indirect_method = expressionRegister.getMethod(method_name);\n      if (indirect_method) {\n        const pathNode = node.arguments[0];\n        const functionString = `return ${methodArguments[0]}`;\n        let pathArgumentFunction;\n        let pathArgument;\n        try {\n          pathArgumentFunction = new Function(functionString);\n          pathArgument = pathArgumentFunction();\n        } catch {\n        }\n        this._createMethodAndDependencies(method_name, pathArgument, pathNode);\n        return `(await methods[${this.method_index}].processArguments([${arguments_joined}]))`;\n      } else {\n        const available_methods = expressionRegister.availableMethods().join(\", \");\n        const message = `method not found (${method_name}), available methods are: ${available_methods}`;\n        Poly.warn(message);\n      }\n    }\n    this.setError(`unknown method: ${method_name}`);\n  }\n  traverse_BinaryExpression(node) {\n    return `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n  }\n  // protected override traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n  // \t// || or &&\n  // \t// if(node.right.type == 'Identifier'){\n  // \t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n  // \t// \treturn \"\"\n  // \t// }\n  // \treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n  // }\n  // protected override traverse_MemberExpression(node: jsep.MemberExpression): string {\n  // \treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n  // }\n  traverse_UnaryExpression(node) {\n    if (node.operator === ATTRIBUTE_PREFIX) {\n      this._entitiesDependent = true;\n      let argument = node.argument;\n      let attributeName;\n      let property;\n      switch (argument.type) {\n        case \"Identifier\": {\n          const argument_identifier = argument;\n          attributeName = argument_identifier.name;\n          break;\n        }\n        case \"MemberExpression\": {\n          const argument_member_expression = argument;\n          const attrib_node = argument_member_expression.object;\n          const property_node = argument_member_expression.property;\n          attributeName = attrib_node.name;\n          property = property_node.name;\n          break;\n        }\n      }\n      if (attributeName) {\n        attributeName = CoreAttribute.remapName(attributeName);\n        if (attributeName == Attribute.POINT_INDEX || attributeName == Attribute.OBJECT_INDEX) {\n          return `((${VAR_ENTITY} != null) ? ${VAR_ENTITY}.index() : 0)`;\n        } else {\n          const var_attribute_size = this._attribute_requirements_controller.varAttributeSize(attributeName);\n          const var_array = this._attribute_requirements_controller.varArray(attributeName);\n          this._attribute_requirements_controller.add(attributeName);\n          let propertyOffset = property ? PROPERTY_OFFSETS[property] : 0;\n          if (propertyOffset == null) {\n            propertyOffset = 0;\n          }\n          return `${FUNC_GET_ENTITY_ATTRIBUTE_VALUE}(${VAR_ENTITY}, '${attributeName}', ${var_array}, ${var_attribute_size}, ${propertyOffset})`;\n        }\n      } else {\n        console.warn(\"attribute not found\");\n        return \"\";\n      }\n    } else {\n      return `${node.operator}${this.traverse_node(node.argument)}`;\n    }\n  }\n  // protected override traverse_Literal(node: jsep.Literal): string {\n  // \treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n  // }\n  traverse_Identifier(node) {\n    const identifier_first_char = node.name[0];\n    if (identifier_first_char == VARIABLE_PREFIX) {\n      const identifier_name_without_dollar_sign = node.name.substring(1);\n      const direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign];\n      if (direct_constant_name) {\n        return direct_constant_name;\n      }\n      const method_name = `traverse_Identifier_${identifier_name_without_dollar_sign}`;\n      const method = this[method_name];\n      if (method) {\n        return this[method_name]();\n      } else {\n        this.setError(`identifier unknown: ${node.name}`);\n      }\n    } else {\n      return node.name;\n    }\n  }\n  //\n  //\n  // Identifier methods (called from Identifier_body)\n  //\n  //\n  traverse_Identifier_F() {\n    this.immutableDependencies.push(this.param.scene().timeController.graphNode);\n    return `param.scene().timeController.frame()`;\n  }\n  // protected traverse_Identifier_FPS(): string {\n  // \tthis.immutable_dependencies.push(this.param.scene().timeController.graphNode);\n  // \treturn `param.scene().timeController.fps`;\n  // }\n  traverse_Identifier_T() {\n    this.immutableDependencies.push(this.param.scene().timeController.graphNode);\n    return `param.scene().timeController.time()`;\n  }\n  traverse_Identifier_OS() {\n    const nameNode = this.param.node.nameController.graphNode();\n    this.param.addGraphInput(nameNode);\n    return `param.node.name()`;\n  }\n  traverse_Identifier_CH() {\n    return `${QUOTE}${this.param.name()}${QUOTE}`;\n  }\n  traverse_Identifier_CEX() {\n    return this._method_centroid(\"x\");\n  }\n  traverse_Identifier_CEY() {\n    return this._method_centroid(\"y\");\n  }\n  traverse_Identifier_CEZ() {\n    return this._method_centroid(\"z\");\n  }\n  // TODO:\n  // '$OS': '_eval_identifier_as_node_name',\n  // '$BBX': '_eval_identifier_as_bounding_box_relative',\n  _method_centroid(component) {\n    const method_arguments = [0, `${QUOTE}${component}${QUOTE}`];\n    const arguments_joined = method_arguments.join(ARGUMENTS_SEPARATOR);\n    this._createMethodAndDependencies(\"centroid\", 0);\n    return `(await methods[${this.method_index}].processArguments([${arguments_joined}]))`;\n  }\n  //\n  //\n  // Methods dependencies\n  //\n  //\n  _createMethodAndDependencies(methodName, pathArgument, pathNode) {\n    const expressionRegister = Poly.expressionsRegister;\n    const methodConstructor = expressionRegister.getMethod(methodName);\n    if (!methodConstructor) {\n      const availableMethods = expressionRegister.availableMethods();\n      const message = `method not found (${methodName}), available methods are: ${availableMethods.join(\", \")}`;\n      this.setError(message);\n      Poly.warn(message);\n      return;\n    }\n    const method = new methodConstructor(this.param);\n    this.method_index += 1;\n    this.methods[this.method_index] = method;\n    const methodDependency = method.findDependency({ indexOrPath: pathArgument });\n    if (methodDependency) {\n      if (pathNode) {\n        methodDependency.set_jsep_node(pathNode);\n      }\n      this.methodDependencies.push(methodDependency);\n    } else {\n      if (pathNode && CoreType.isString(pathArgument)) {\n        this.param.scene().missingExpressionReferencesController.register(this.param, pathArgument, pathNode);\n      }\n    }\n  }\n}\n", "\"use strict\";\nconst ARGUMENTS_SEPARATOR = \", \";\nimport { BaseTraverser } from \"./_Base\";\nexport class ExpressionStringGenerator extends BaseTraverser {\n  constructor(param) {\n    super(param);\n    this.param = param;\n  }\n  parseTree(parsedTree) {\n    const node = parsedTree.node();\n    if (parsedTree.errorMessage() == null && node) {\n      try {\n        return this.traverse_node(node);\n      } catch (e) {\n        this.setError(\"could not traverse tree\");\n      }\n    } else {\n      this.setError(\"cannot parse tree\");\n    }\n  }\n  traverse_CallExpression(node) {\n    const methodArguments = node.arguments.map((arg) => {\n      return this.traverse_node(arg);\n    });\n    const argumentsJoined = `${methodArguments.join(ARGUMENTS_SEPARATOR)}`;\n    const methodName = node.callee.name;\n    return `${methodName}(${argumentsJoined})`;\n  }\n  traverse_UnaryExpression(node) {\n    return `${node.operator}${this.traverse_node(node.argument)}`;\n  }\n  traverse_Identifier(node) {\n    return `${node.name}`;\n  }\n}\n", "\"use strict\";\nexport class DependenciesController {\n  constructor(param) {\n    this.param = param;\n    this._cyclicGraphDetected = false;\n    this.methodDependencies = [];\n  }\n  setError(message) {\n    this._errorMessage = this._errorMessage || message;\n  }\n  errorMessage() {\n    return this._errorMessage;\n  }\n  reset() {\n    this.param.graphDisconnectPredecessors();\n    this.methodDependencies.forEach((methodDependency) => {\n      methodDependency.reset();\n    });\n    this.methodDependencies = [];\n  }\n  update(functionGenerator) {\n    this._cyclicGraphDetected = false;\n    this._connectImmutableDependencies(functionGenerator);\n    this.methodDependencies = functionGenerator.methodDependencies;\n    this._handleMethodDependencies();\n    this._listenForNameChanges();\n  }\n  _connectImmutableDependencies(functionGenerator) {\n    const dependendies = functionGenerator.immutableDependencies;\n    for (const dependency of dependendies) {\n      if (this._cyclicGraphDetected == false) {\n        if (this.param.addGraphInput(dependency) == false) {\n          this._cyclicGraphDetected = true;\n          this.setError(\"cannot create expression, infinite graph detected\");\n          this.reset();\n          return;\n        }\n      }\n    }\n  }\n  _handleMethodDependencies() {\n    this.methodDependencies.forEach((methodDependency) => {\n      if (this._cyclicGraphDetected == false) {\n        this._handleMethodDependency(methodDependency);\n      }\n    });\n  }\n  _handleMethodDependency(method_dependency) {\n    const node_simple = method_dependency.resolved_graph_node;\n    if (node_simple) {\n      if (!this.param.addGraphInput(node_simple)) {\n        this._cyclicGraphDetected = true;\n        this.setError(\"cannot create expression, infinite graph detected\");\n        this.reset();\n        return;\n      }\n    }\n  }\n  _listenForNameChanges() {\n    this.methodDependencies.forEach((methodDependency) => {\n      methodDependency.listen_for_name_changes();\n    });\n  }\n  // private connect_missing_paths(function_generator: FunctionGenerator){\n  // \tconst jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n  // \tconst missing_paths = Object.keys(jsep_nodes_by_missing_paths)\n  // \tmissing_paths.forEach((missing_path)=>{\n  // \t\tconst fullPath = CoreWalker.make_absolute(this.param.node(), missing_path)\n  // \t\tconst jsep_nodes = jsep_nodes_by_missing_paths[missing_path]\n  // \t\tjsep_nodes.forEach(jsep_node=>{\n  // \t\t\tconst missing_expression_reference = this.references_controller.register(this.param, jsep_node, fullPath)\n  // \t\t\tthis.missing_expression_references_by_id[missing_expression_reference.id] = missing_expression_reference\n  // \t\t})\n  // \t})\n  // }\n}\n", "\"use strict\";\nimport { ParsedTree } from \"./traversers/ParsedTree\";\nimport { FunctionGenerator } from \"./traversers/FunctionGenerator\";\nimport { ExpressionStringGenerator } from \"./traversers/ExpressionStringGenerator\";\nimport { DependenciesController } from \"./DependenciesController\";\nimport { Poly } from \"../Poly\";\nexport class ExpressionManager {\n  constructor(param) {\n    this.param = param;\n    this._parseStarted = false;\n    this.parsedTree = new ParsedTree(this.param);\n    this._functionGenerator = new FunctionGenerator(this.param);\n    this.dependenciesController = new DependenciesController(this.param);\n  }\n  generatedFunctionEntitiesDependent() {\n    return this._functionGenerator.entitiesDependent();\n  }\n  parseExpression(expression) {\n    if (this._parseStarted) {\n      throw new Error(`parse in progress for param ${this.param.path()}`);\n    }\n    this._parseStarted = true;\n    this.parsedTree = this.parsedTree || new ParsedTree(this.param);\n    this.reset();\n    if (this.param.expressionParsedAsString()) {\n      this.parsedTree.parseExpressionForStringParam(expression);\n    } else {\n      this.parsedTree.parseExpression(expression);\n    }\n    this._functionGenerator.parseTree(this.parsedTree);\n    if (this._functionGenerator.errorMessage() == null) {\n      this.dependenciesController.update(this._functionGenerator);\n      const errorMessage = this.dependenciesController.errorMessage();\n      if (errorMessage) {\n        this.param.states.error.set(errorMessage);\n      } else {\n        this._parseStarted = false;\n      }\n    }\n  }\n  async computeFunction() {\n    if (this._computeAllowed()) {\n      try {\n        const newValue = await this._functionGenerator.evalFunction();\n        return newValue;\n      } catch (e) {\n        Poly.error(\"error while evaluating expression\", e);\n      }\n    } else {\n      Poly.error(\"compute not allowed\");\n    }\n  }\n  reset() {\n    this._parseStarted = false;\n    this.dependenciesController.reset();\n    this._functionGenerator.reset();\n  }\n  isErrored() {\n    return this._functionGenerator.isErrored();\n  }\n  errorMessage() {\n    return this._functionGenerator.errorMessage();\n  }\n  _computeAllowed() {\n    return this._functionGenerator.evalAllowed();\n  }\n  updateFromMethodDependencyNameChange() {\n    this._expressionStringGenerator = this._expressionStringGenerator || new ExpressionStringGenerator(this.param);\n    const newExpressionString = this._expressionStringGenerator.parseTree(this.parsedTree);\n    if (newExpressionString) {\n      this.param.set(newExpressionString);\n    } else {\n      console.warn(\"failed to regenerate expression\");\n    }\n  }\n}\n", "\"use strict\";\nimport { ExpressionManager } from \"../../expressions/ExpressionManager\";\nexport class ExpressionController {\n  // private _reset_bound = this.reset.bind(this);\n  constructor(param) {\n    this.param = param;\n  }\n  // remove_dirty_hook() {\n  // \t// this.param.dirtyController.removePostDirtyHook('expression_controller_reset');\n  // }\n  dispose() {\n    this.param.scene().expressionsController.deregisterParam(this.param);\n    this._resetMethodDependencies();\n    this._manager = void 0;\n  }\n  _resetMethodDependencies() {\n    var _a, _b;\n    (_a = this._methodDependenciesByGraphNodeId) == null ? void 0 : _a.forEach((methodDependency) => {\n      methodDependency.dispose();\n    });\n    (_b = this._methodDependenciesByGraphNodeId) == null ? void 0 : _b.clear();\n  }\n  registerMethodDependency(methodDependency) {\n    this._methodDependenciesByGraphNodeId = this._methodDependenciesByGraphNodeId || /* @__PURE__ */ new Map();\n    this._methodDependenciesByGraphNodeId.set(methodDependency.graphNodeId(), methodDependency);\n  }\n  active() {\n    return this._expression != null;\n  }\n  expression() {\n    return this._expression;\n  }\n  isErrored() {\n    if (this._manager) {\n      return this._manager.isErrored();\n    }\n    return false;\n  }\n  errorMessage() {\n    if (this._manager) {\n      return this._manager.errorMessage();\n    }\n    return null;\n  }\n  entitiesDependent() {\n    var _a;\n    const managerEntitiesDependent = ((_a = this._manager) == null ? void 0 : _a.generatedFunctionEntitiesDependent()) || false;\n    return this.param.options.isExpressionForEntities() && managerEntitiesDependent;\n  }\n  // private reset() {\n  // \tthis._manager?.clear_error();\n  // }\n  setExpression(expression, setDirty = true) {\n    var _a;\n    if (this.param.disposed()) {\n      this._resetMethodDependencies();\n      this._expression = void 0;\n      return;\n    }\n    this.param.scene().missingExpressionReferencesController.deregisterParam(this.param);\n    this.param.scene().expressionsController.deregisterParam(this.param);\n    if (this._expression != expression) {\n      this._resetMethodDependencies();\n      this._expression = expression;\n      if (this._expression) {\n        this._manager = this._manager || new ExpressionManager(this.param);\n        this._manager.parseExpression(this._expression);\n      } else {\n        (_a = this._manager) == null ? void 0 : _a.reset();\n      }\n      if (setDirty) {\n        this.param.setDirty();\n      }\n    }\n  }\n  updateFromMethodDependencyNameChange() {\n    if (this._manager && this.active()) {\n      this._manager.updateFromMethodDependencyNameChange();\n    }\n  }\n  computeExpression() {\n    if (this._manager && this.active()) {\n      return this._manager.computeFunction();\n    }\n  }\n  async computeExpressionForEntities(entities, callback) {\n    var _a;\n    this._setEntities(entities, callback);\n    await this.computeExpression();\n    const errorMessage = (_a = this._manager) == null ? void 0 : _a.errorMessage();\n    if (errorMessage) {\n      this.param.node.states.error.set(`expression evaluation error: ${errorMessage}`);\n    }\n    this._resetEntities();\n  }\n  computeExpressionForPoints(entities, callback) {\n    return this.computeExpressionForEntities(entities, callback);\n  }\n  computeExpressionForVertices(entities, callback) {\n    return this.computeExpressionForEntities(entities, callback);\n  }\n  computeExpressionForPrimitives(entities, callback) {\n    return this.computeExpressionForEntities(entities, callback);\n  }\n  computeExpressionForObjects(entities, callback) {\n    return this.computeExpressionForEntities(entities, callback);\n  }\n  computeExpressionForCoreGroup(entity, callback) {\n    return this.computeExpressionForEntities([entity], callback);\n  }\n  entities() {\n    return this._entities;\n  }\n  entityCallback() {\n    return this._entityCallback;\n  }\n  _setEntities(entities, callback) {\n    this._entities = entities;\n    this._entityCallback = callback;\n  }\n  _resetEntities() {\n    this._entities = void 0;\n    this._entityCallback = void 0;\n  }\n}\n", "\"use strict\";\nimport { TypedParam } from \"./_Base\";\nimport { ExpressionController } from \"./utils/ExpressionController\";\nimport { ParamEvent } from \"../poly/ParamEvent\";\nimport { CoreType } from \"../../core/Type\";\nexport class TypedNumericParam extends TypedParam {\n  isNumeric() {\n    return true;\n  }\n  isDefault() {\n    return this._raw_input == this._default_value;\n  }\n  _prefilterInvalidRawInput(raw_input) {\n    if (CoreType.isArray(raw_input)) {\n      return raw_input[0];\n    } else {\n      return raw_input;\n    }\n  }\n  processRawInput() {\n    const converted = this.convert(this._raw_input);\n    if (converted != null) {\n      if (this._expression_controller) {\n        this._expression_controller.setExpression(void 0, false);\n        this.emitController.emit(ParamEvent.EXPRESSION_UPDATED);\n      }\n      const wasErrored = this.states.error.active();\n      this.states.error.clear();\n      if (converted != this._value || wasErrored) {\n        this._updateValue(converted);\n        this.setSuccessorsDirty(this);\n      }\n    } else {\n      if (CoreType.isString(this._raw_input)) {\n        this.states.error.clear();\n        this._expression_controller = this._expression_controller || new ExpressionController(this);\n        if (this._raw_input != this._expression_controller.expression()) {\n          this._expression_controller.setExpression(this._raw_input);\n          this.emitController.emit(ParamEvent.EXPRESSION_UPDATED);\n        }\n      } else {\n        this.states.error.set(`param input is invalid (${this.path()})`);\n      }\n    }\n  }\n  async processComputation() {\n    var _a;\n    if (((_a = this.expressionController) == null ? void 0 : _a.active()) && !this.expressionController.entitiesDependent()) {\n      const expression_result = await this.expressionController.computeExpression();\n      if (this.expressionController.isErrored()) {\n        this.states.error.set(\n          `expression error: \"${this.expressionController.expression()}\" (${this.expressionController.errorMessage()})`\n        );\n      } else {\n        const converted = this.convert(expression_result);\n        if (converted != null) {\n          if (this.states.error.active()) {\n            this.states.error.clear();\n          }\n          this._updateValue(converted);\n        } else {\n          this.states.error.set(\n            `expression returns an invalid type (${expression_result}) (${this.expressionController.expression()})`\n          );\n        }\n      }\n    }\n  }\n  _updateValue(new_value) {\n    this._value = new_value;\n    const parentParam = this.parentParam();\n    if (parentParam) {\n      parentParam.setValueFromComponents();\n    }\n    this.options.executeCallback();\n    this.emitController.emit(ParamEvent.VALUE_UPDATED);\n    this.removeDirtyState();\n  }\n}\n", "\"use strict\";\nimport { stringValueElements } from \"./../expressions/traversers/ParsedTree\";\nimport { ParamEvent } from \"./../poly/ParamEvent\";\nimport { TypedParam } from \"./_Base\";\nimport { ExpressionController } from \"./utils/ExpressionController\";\nexport class TypedStringParam extends TypedParam {\n  expressionParsedAsString() {\n    return true;\n  }\n  processRawInput() {\n    if (stringValueElements(this._raw_input).length >= 3) {\n      this._expression_controller = this._expression_controller || new ExpressionController(this);\n      if (this._raw_input != this._expression_controller.expression()) {\n        this.states.error.clear();\n        this._expression_controller.setExpression(this._raw_input, false);\n        this.setDirty();\n        this.emitController.emit(ParamEvent.EXPRESSION_UPDATED);\n      }\n    } else {\n      this.processRawInputWithoutExpression();\n    }\n  }\n  async processComputation() {\n    var _a;\n    if (((_a = this.expressionController) == null ? void 0 : _a.active()) && !this.expressionController.entitiesDependent()) {\n      const expressionResult = await this.expressionController.computeExpression();\n      if (this.expressionController.isErrored()) {\n        this.states.error.set(\n          `expression error: \"${this.expressionController.expression()}\" (${this.expressionController.errorMessage()})`\n        );\n      } else {\n        const converted = this.convert(expressionResult);\n        if (converted != null) {\n          this.states.error.clear();\n          this._assignValue(converted);\n          this.emitController.emit(ParamEvent.VALUE_UPDATED);\n          this.options.executeCallback();\n        } else {\n          this.states.error.set(`expression returns an invalid type (${expressionResult})`);\n        }\n        this.removeDirtyState();\n      }\n    }\n  }\n}\n", "\"use strict\";\nimport { ParamEvent } from \"./../poly/ParamEvent\";\nimport { DecomposedPath } from \"../../core/DecomposedPath\";\nimport { TypedStringParam } from \"./_BaseString\";\nexport class TypedPathParam extends TypedStringParam {\n  constructor() {\n    super(...arguments);\n    this.decomposedPath = new DecomposedPath();\n  }\n  dispose() {\n    this.scene().referencesController.resetReferenceFromParam(this);\n    super.dispose();\n  }\n  _handleReferences(node, path) {\n    if (path == \"\") {\n      return;\n    }\n    this.scene().referencesController.setNamedNodesFromParam(this);\n    if (node) {\n      this.scene().referencesController.setReferenceFromParam(this, node);\n      this.scene().missingExpressionReferencesController.deregisterParam(this);\n    } else {\n      this.scene().missingExpressionReferencesController.register(this, path);\n    }\n  }\n  async processComputation() {\n    var _a;\n    if (((_a = this.expressionController) == null ? void 0 : _a.active()) && !this.expressionController.entitiesDependent()) {\n      await super.processComputation();\n    } else {\n      this._findTarget();\n    }\n  }\n  processRawInputWithoutExpression() {\n    const wasErrored = this.states.error.active();\n    if (this._value.path() != this._raw_input || this._expression_controller || wasErrored) {\n      this._setValuePathAndFindTarget(this._raw_input, true);\n      this.states.error.clear();\n      this.emitController.emit(ParamEvent.VALUE_UPDATED);\n      this.options.executeCallback();\n      if (this._expression_controller) {\n        this._expression_controller.setExpression(void 0, false);\n        this._expression_controller = void 0;\n        this.emitController.emit(ParamEvent.EXPRESSION_UPDATED);\n      }\n    }\n  }\n  _setValuePathAndFindTarget(path, setDirty) {\n    this._value.setPath(path);\n    this._findTarget();\n    if (setDirty) {\n      this.setDirty();\n    }\n    this.emitController.emit(ParamEvent.VALUE_UPDATED);\n  }\n}\n", "\"use strict\";\nimport { CoreType } from \"./../../core/Type\";\nimport { TypedPathParam } from \"./_BasePath\";\nimport { CoreWalker } from \"../../core/Walker\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { TypedNodePathParamValue } from \"../../core/Walker\";\nconst tmpConvertedValue = new TypedNodePathParamValue();\nexport class NodePathParam extends TypedPathParam {\n  static type() {\n    return ParamType.NODE_PATH;\n  }\n  _initializeParam() {\n    this._value = new TypedNodePathParamValue();\n  }\n  defaultValueSerialized() {\n    return this._default_value;\n  }\n  rawInputSerialized() {\n    return `${this._raw_input}`;\n  }\n  valueSerialized() {\n    return `${this.value}`;\n  }\n  _copyValue(param) {\n    this.set(param.valueSerialized());\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return raw_input1 == raw_input2;\n  }\n  static areValuesEqual(val1, val2) {\n    return val1 == val2;\n  }\n  isDefault() {\n    return this._raw_input == this._default_value;\n  }\n  setNode(node, options) {\n    if ((options == null ? void 0 : options.relative) == true) {\n      const path = CoreWalker.relativePath(this.node, node);\n      this.set(path);\n    } else {\n      this.set(node.path());\n    }\n  }\n  _assignValue(value) {\n    const path = CoreType.isString(value) ? value : value.path();\n    if (this._value.path() != path) {\n      this._setValuePathAndFindTarget(path, false);\n    }\n  }\n  convert(rawVal) {\n    if (CoreType.isString(rawVal)) {\n      tmpConvertedValue.setPath(rawVal);\n      return tmpConvertedValue;\n    } else {\n      return null;\n    }\n  }\n  // protected override async processComputation() {\n  // \tthis._findTarget();\n  // }\n  _findTarget() {\n    if (!this.node) {\n      return;\n    }\n    const path = this._value.path();\n    let node = null;\n    const pathNonEmpty = path != null && path !== \"\";\n    this.scene().referencesController.resetReferenceFromParam(this);\n    this.decomposedPath.reset();\n    if (pathNonEmpty) {\n      node = CoreWalker.findNode(this.node, path, this.decomposedPath);\n    }\n    const currentFoundEntity = this._value.node();\n    const newlyFoundEntity = node;\n    if (newlyFoundEntity) {\n      if (newlyFoundEntity.graphNodeId() == this.node.graphNodeId()) {\n        this.states.error.set(`param cannot refer to its own node`);\n        return;\n      }\n    }\n    this._handleReferences(node, path);\n    if ((currentFoundEntity == null ? void 0 : currentFoundEntity.graphNodeId()) !== (newlyFoundEntity == null ? void 0 : newlyFoundEntity.graphNodeId())) {\n      const dependentOnFoundNode = this.options.dependentOnFoundNode();\n      const previouslyFoundNode = this._value.node();\n      if (previouslyFoundNode) {\n        if (dependentOnFoundNode) {\n          this.removeGraphInput(previouslyFoundNode);\n        } else {\n        }\n      }\n      if (node) {\n        this._assignFoundNode(node);\n      } else {\n        this._value.setNode(null);\n      }\n      this.options.executeCallback();\n    }\n    if (pathNonEmpty && !node && this.scene().loadingController.loaded()) {\n      if (pathNonEmpty) {\n        this.states.error.set(`no node found at path '${path}'`);\n      }\n    }\n    this.removeDirtyState();\n  }\n  _assignFoundNode(node) {\n    const dependentOnFoundNode = this.options.dependentOnFoundNode();\n    if (this._isNodeExpectedContext(node)) {\n      if (this._isNodeExpectedType(node)) {\n        this.states.error.clear();\n        this._value.setNode(node);\n        if (dependentOnFoundNode) {\n          this.addGraphInput(node);\n        }\n      } else {\n        this.states.error.set(\n          `node type is ${node.type()} but the params expects one of ${(this._expectedNodeTypes() || []).join(\n            \", \"\n          )}`\n        );\n      }\n    } else {\n      this.states.error.set(\n        `node context is ${node.context()} but the params expects a ${this._expectedContext()}`\n      );\n    }\n  }\n  _expectedContext() {\n    return this.options.nodeSelectionContext();\n  }\n  _isNodeExpectedContext(node) {\n    const expectedContext = this._expectedContext();\n    if (expectedContext == null) {\n      return true;\n    }\n    return expectedContext == node.context();\n  }\n  _expectedNodeTypes() {\n    return this.options.nodeSelectionTypes();\n  }\n  _isNodeExpectedType(node) {\n    const expected_types = this._expectedNodeTypes();\n    if (expected_types == null) {\n      return true;\n    }\n    return expected_types == null ? void 0 : expected_types.includes(node.type());\n  }\n  notifyPathRebuildRequired(node) {\n    this.decomposedPath.updateFromNameChange(node);\n    const newPath = this.decomposedPath.toPath();\n    this.set(newPath);\n  }\n  notifyTargetParamOwnerParamsUpdated(node) {\n    this.setDirty();\n  }\n}\n", "\"use strict\";\nimport { CoreType } from \"./../../core/Type\";\nimport { TypedPathParam } from \"./_BasePath\";\nimport { CoreWalker, TypedParamPathParamValue } from \"../../core/Walker\";\nimport { ParamType } from \"../poly/ParamType\";\nconst tmpConvertedValue = new TypedParamPathParamValue();\nexport class ParamPathParam extends TypedPathParam {\n  constructor() {\n    super(...arguments);\n    this._onResolvedParamDisposeBound = this._onResolvedParamDispose.bind(this);\n  }\n  static type() {\n    return ParamType.PARAM_PATH;\n  }\n  _initializeParam() {\n    this._value = new TypedParamPathParamValue();\n  }\n  defaultValueSerialized() {\n    return this._default_value;\n  }\n  rawInputSerialized() {\n    return `${this._raw_input}`;\n  }\n  valueSerialized() {\n    return `${this.value}`;\n  }\n  _copyValue(param) {\n    this.set(param.valueSerialized());\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return raw_input1 == raw_input2;\n  }\n  static areValuesEqual(val1, val2) {\n    return val1 == val2;\n  }\n  isDefault() {\n    return this._raw_input == this._default_value;\n  }\n  setParam(param) {\n    this.set(param.path());\n  }\n  _assignValue(value) {\n    const path = CoreType.isString(value) ? value : value.path();\n    if (this._value.path() != path) {\n      this._setValuePathAndFindTarget(path, false);\n    }\n  }\n  convert(rawVal) {\n    if (CoreType.isString(rawVal)) {\n      tmpConvertedValue.setPath(rawVal);\n      return tmpConvertedValue;\n    } else {\n      return null;\n    }\n  }\n  // protected override async processComputation() {\n  // \tthis.findTarget();\n  // }\n  _findTarget() {\n    if (!this.node) {\n      return;\n    }\n    const path = this._value.path();\n    let param = null;\n    const pathNonEmpty = path != null && path !== \"\";\n    this.scene().referencesController.resetReferenceFromParam(this);\n    this.decomposedPath.reset();\n    if (pathNonEmpty) {\n      param = CoreWalker.findParam(this.node, path, this.decomposedPath);\n    }\n    const currentFoundEntity = this._value.param();\n    const newlyFoundEntity = param;\n    if (newlyFoundEntity) {\n      if (newlyFoundEntity.graphNodeId() == this.graphNodeId()) {\n        this.states.error.set(`param cannot refer to itself`);\n        return;\n      }\n    }\n    this._handleReferences(param, path);\n    if ((currentFoundEntity == null ? void 0 : currentFoundEntity.graphNodeId()) !== (newlyFoundEntity == null ? void 0 : newlyFoundEntity.graphNodeId())) {\n      const dependentOnFoundParam = this.options.dependentOnFoundParam();\n      const previouslyFoundParam = this._value.param();\n      if (previouslyFoundParam) {\n        if (dependentOnFoundParam) {\n          this.removeGraphInput(previouslyFoundParam);\n        } else {\n        }\n        previouslyFoundParam.deregisterOnDispose(this._onResolvedParamDisposeBound);\n      }\n      if (param) {\n        this._assignFoundParam(param);\n      } else {\n        this._value.setParam(null);\n      }\n      this.options.executeCallback();\n    }\n    this.removeDirtyState();\n  }\n  _assignFoundParam(param) {\n    const dependentOnFoundParam = this.options.dependentOnFoundParam();\n    this._value.setParam(param);\n    if (dependentOnFoundParam) {\n      this.addGraphInput(param);\n    }\n    param.onDispose(this._onResolvedParamDisposeBound);\n  }\n  // private _expected_context() {\n  // \treturn this.options.node_selection_context;\n  // }\n  // private _is_node_expected_context(node: BaseNodeType) {\n  // \tconst expected_context = this._expected_context();\n  // \tif (expected_context == null) {\n  // \t\treturn true;\n  // \t}\n  // \tconst node_context = node.parent?.childrenController?.context;\n  // \treturn expected_context == node_context;\n  // }\n  // private _expected_node_types() {\n  // \treturn this.options.node_selection_types;\n  // }\n  // private _is_node_expected_type(node: BaseNodeType) {\n  // \tconst expected_types = this._expected_node_types();\n  // \tif (expected_types == null) {\n  // \t\treturn true;\n  // \t}\n  // \treturn expected_types?.includes(node.type);\n  // }\n  notifyPathRebuildRequired(param) {\n    this.decomposedPath.updateFromNameChange(param);\n    const new_path = this.decomposedPath.toPath();\n    this.set(new_path);\n  }\n  notifyTargetParamOwnerParamsUpdated(node) {\n    this.setDirty();\n  }\n  async _onResolvedParamDispose() {\n    this.setDirty();\n    await this.compute();\n  }\n}\n", "\"use strict\";\nimport { ParamEvent } from \"./../poly/ParamEvent\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { CoreType } from \"../../core/Type\";\nimport { TypedStringParam } from \"./_BaseString\";\nexport class StringParam extends TypedStringParam {\n  static type() {\n    return ParamType.STRING;\n  }\n  defaultValueSerialized() {\n    return this._default_value;\n  }\n  _cloneRawInput(raw_input) {\n    return `${raw_input}`;\n  }\n  rawInputSerialized() {\n    return `${this._raw_input}`;\n  }\n  valueSerialized() {\n    return `${this.value}`;\n  }\n  _copyValue(param) {\n    this.set(param.value);\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return raw_input1 == raw_input2;\n  }\n  static areValuesEqual(val1, val2) {\n    return val1 == val2;\n  }\n  isDefault() {\n    return this._raw_input == this._default_value;\n  }\n  convert(rawVal) {\n    if (CoreType.isString(rawVal)) {\n      return rawVal;\n    }\n    return `${rawVal}`;\n  }\n  rawInput() {\n    return this._raw_input;\n  }\n  _assignValue(value) {\n    this._value = value;\n  }\n  async processRawInputWithoutExpression() {\n    const wasErrored = this.states.error.active();\n    if (this._raw_input != this._value || this._expression_controller || wasErrored) {\n      this._assignValue(this._raw_input);\n      this.states.error.clear();\n      this.removeDirtyState();\n      this.setSuccessorsDirty(this);\n      this.emitController.emit(ParamEvent.VALUE_UPDATED);\n      this.options.executeCallback();\n      if (this._expression_controller) {\n        this._expression_controller.setExpression(void 0, false);\n        this._expression_controller = void 0;\n        this.emitController.emit(ParamEvent.EXPRESSION_UPDATED);\n      }\n    }\n  }\n}\n", "\"use strict\";\nimport { TypedNumericParam } from \"./_Numeric\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { CoreString } from \"../../core/String\";\nimport { CoreType } from \"../../core/Type\";\nexport class FloatParam extends TypedNumericParam {\n  static type() {\n    return ParamType.FLOAT;\n  }\n  defaultValueSerialized() {\n    return this._default_value;\n  }\n  rawInputSerialized() {\n    return this._raw_input;\n  }\n  valueSerialized() {\n    return this.value;\n  }\n  _copyValue(param) {\n    this.set(param.valueSerialized());\n  }\n  _prefilterInvalidRawInput(raw_input) {\n    if (CoreType.isArray(raw_input)) {\n      return raw_input[0];\n    }\n    if (CoreType.isString(raw_input) && CoreString.isNumber(raw_input)) {\n      const num = parseFloat(raw_input);\n      if (num != null) {\n        const converted = this.convert(num);\n        if (converted != null) {\n          return converted;\n        }\n      }\n    }\n    if (CoreType.isNumber(raw_input)) {\n      const converted = this.convert(raw_input);\n      if (converted != null) {\n        return converted;\n      }\n    }\n    return raw_input;\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return raw_input1 == raw_input2;\n  }\n  static areValuesEqual(val1, val2) {\n    return val1 == val2;\n  }\n  static convert(raw_val) {\n    if (CoreType.isNumber(raw_val)) {\n      return raw_val;\n    } else {\n      if (CoreType.isBoolean(raw_val)) {\n        return raw_val ? 1 : 0;\n      } else {\n        if (CoreString.isNumber(raw_val)) {\n          const parsed = parseFloat(raw_val);\n          if (CoreType.isNumber(parsed)) {\n            return parsed;\n          }\n        }\n      }\n      return null;\n    }\n  }\n  convert(raw_val) {\n    const result = FloatParam.convert(raw_val);\n    if (result != null) {\n      return this.options.ensureInRange(result);\n    } else {\n      return result;\n    }\n  }\n}\n", "\"use strict\";\nimport { TypedParam } from \"./_Base\";\nimport { FloatParam } from \"./Float\";\nimport { ParamEvent } from \"../poly/ParamEvent\";\nimport { CoreType } from \"../../core/Type\";\nexport class TypedMultipleParam extends TypedParam {\n  constructor() {\n    super(...arguments);\n    this._components_contructor = FloatParam;\n    this._componentsCount = 0;\n  }\n  get components() {\n    return this._components;\n  }\n  isNumeric() {\n    return true;\n  }\n  isDefault() {\n    for (const c of this.components) {\n      if (!c.isDefault()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  rawInput() {\n    return this._components.map((c) => c.rawInput());\n  }\n  rawInputSerialized() {\n    return this._components.map((c) => c.rawInputSerialized());\n  }\n  _copyValue(param) {\n    for (let i = 0; i < this.components.length; i++) {\n      const component = this.components[i];\n      const src_component = param.components[i];\n      component.copyValue(src_component);\n    }\n  }\n  initComponents() {\n    var _a;\n    if (this._components != null) {\n      return;\n    }\n    let index = 0;\n    this._components = new Array(this.componentNames().length);\n    for (const componentName of this.componentNames()) {\n      const component = new this._components_contructor(this.scene(), this.node, {\n        serializerClass: (_a = this._serializer) == null ? void 0 : _a.constructor\n      });\n      let default_val;\n      if (CoreType.isArray(this._default_value)) {\n        default_val = this._default_value[index];\n      } else {\n        default_val = this._default_value[componentName];\n      }\n      component.options.copy(this.options);\n      component.setInitValue(default_val);\n      component.setName(`${this.name()}${componentName}`);\n      component.set_parent_param(this);\n      this._components[index] = component;\n      index++;\n    }\n    this._componentsCount = this._components.length;\n  }\n  async processComputation() {\n    await this.computeComponents();\n    this.setValueFromComponents();\n  }\n  // set_raw_input_from_components() {}\n  hasExpression() {\n    var _a;\n    for (const c of this.components) {\n      if ((_a = c.expressionController) == null ? void 0 : _a.active()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  // private _promises:Promise<void>[] = [];\n  async computeComponents() {\n    const components = this.components;\n    for (const c of components) {\n      if (c.isDirty()) {\n        await c.compute();\n      }\n    }\n    this.removeDirtyState();\n  }\n  _prefilterInvalidRawInput(raw_input) {\n    if (!CoreType.isArray(raw_input)) {\n      const numberOrString = raw_input;\n      const raw_input_wrapped_in_array = this.componentNames().map(() => numberOrString);\n      return raw_input_wrapped_in_array;\n    } else {\n      return raw_input;\n    }\n  }\n  processRawInput() {\n    const cooker = this.scene().cooker;\n    cooker.block();\n    const components = this.components;\n    for (const c of components) {\n      c.emitController.blockParentEmit();\n    }\n    const value = this._raw_input;\n    let prevValue = 0;\n    if (CoreType.isArray(value)) {\n      for (let i = 0; i < this._componentsCount; i++) {\n        let componentValue = value[i];\n        if (componentValue == null) {\n          componentValue = prevValue;\n        }\n        components[i].set(componentValue);\n        prevValue = componentValue;\n      }\n    } else {\n      for (let i = 0; i < this._componentsCount; i++) {\n        const componentName = this.componentNames()[i];\n        let componentValue = value[componentName];\n        if (componentValue == null) {\n          componentValue = prevValue;\n        }\n        components[i].set(componentValue);\n        prevValue = componentValue;\n      }\n    }\n    cooker.unblock();\n    for (const component of this.components) {\n      component.emitController.unblockParentEmit();\n    }\n    this.emitController.emit(ParamEvent.VALUE_UPDATED);\n  }\n}\n", "\"use strict\";\nimport { Vector2 } from \"three\";\nimport { Color } from \"three\";\nimport { NodeEvent } from \"../../poly/NodeEvent\";\nimport { CoreType } from \"../../../core/Type\";\nexport class UIData {\n  constructor(node, x = 0, y = 0) {\n    this.node = node;\n    this._position = new Vector2();\n    this._width = 50;\n    // private _border_radius: number = 3;\n    this._color = new Color(0.75, 0.75, 0.75);\n    // private _icon: string | null = null;\n    this._layoutVertical = true;\n    this._json = {\n      x: 0,\n      y: 0\n    };\n    this._position.x = x;\n    this._position.y = y;\n  }\n  dispose() {\n    this._comment = void 0;\n  }\n  setComment(comment) {\n    this._comment = comment;\n    this.node.emit(NodeEvent.UI_DATA_COMMENT_UPDATED);\n  }\n  comment() {\n    return this._comment;\n  }\n  setColor(color) {\n    this._color = color;\n  }\n  color() {\n    return this._color;\n  }\n  // setIcon(icon: string) {\n  // \tthis._icon = icon;\n  // }\n  // icon() {\n  // \treturn this._icon;\n  // }\n  setLayoutHorizontal() {\n    this._layoutVertical = false;\n  }\n  isLayoutVertical() {\n    return this._layoutVertical;\n  }\n  copy(ui_data) {\n    this._position.copy(ui_data.position());\n    this._color.copy(ui_data.color());\n  }\n  position() {\n    return this._position;\n  }\n  setPosition(newPosition, y = 0) {\n    if (CoreType.isNumber(newPosition)) {\n      const x = newPosition;\n      this._position.set(x, y);\n    } else {\n      this._position.copy(newPosition);\n    }\n    this.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n    return this;\n  }\n  translate(offset, snap = false) {\n    this._position.add(offset);\n    if (snap) {\n      this._position.x = Math.round(this._position.x);\n      this._position.y = Math.round(this._position.y);\n    }\n    this.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n    return this;\n  }\n  toJSON() {\n    this._json.x = this._position.x;\n    this._json.y = this._position.y;\n    this._json.comment = this._comment;\n    return this._json;\n  }\n}\n", "\"use strict\";\nexport class NodeBaseState {\n  constructor(node) {\n    this.node = node;\n  }\n}\n", "\"use strict\";\nimport { NodeBaseState } from \"./Base\";\nexport class NodeTimeDependentState extends NodeBaseState {\n  active() {\n    return this.paramsTimeDependent() || this.inputsTimeDependent();\n  }\n  paramsTimeDependent() {\n    const paramNames = this.node.params.names;\n    for (const paramName of paramNames) {\n      const param = this.node.params.get(paramName);\n      if (param && param.states.timeDependent.active()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  inputsTimeDependent() {\n    const inputs = this.node.io.inputs.inputs();\n    for (const input of inputs) {\n      if (input && input.states.timeDependent.active()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  forceTimeDependent() {\n    const predecessorIds = this.node.graphPredecessorIds();\n    const frameNode = this.node.scene().timeController.graphNode;\n    if (predecessorIds == null || !predecessorIds.includes(frameNode.graphNodeId())) {\n      this.node.addGraphInput(frameNode, false);\n    }\n  }\n  unforceTimeDependent() {\n    const frameNode = this.node.scene().timeController.graphNode;\n    this.node.removeGraphInput(frameNode);\n  }\n}\n", "\"use strict\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nimport { NodeBaseState } from \"./Base\";\nimport { Poly } from \"../../../Poly\";\nexport class NodeErrorState extends NodeBaseState {\n  set(message) {\n    if (this._message != message) {\n      if (message) {\n        Poly.error(`[${this.node.path()}] error: '${message}' (from '${this._message}')`);\n      } else {\n        Poly.warn(`[${this.node.path()}] clear error`);\n      }\n      this._message = message;\n      this.onUpdate();\n    }\n  }\n  message() {\n    return this._message;\n  }\n  clear() {\n    this.set(void 0);\n  }\n  active() {\n    return this._message != null;\n  }\n  onUpdate() {\n    if (this._message != null) {\n      this.node._setContainer(\n        null\n        /*, `from error '${this._message}'`*/\n      );\n    }\n    this.node.emit(NodeEvent.ERROR_UPDATED);\n  }\n}\n", "\"use strict\";\nimport { NodeTimeDependentState } from \"./states/TimeDependent\";\nimport { NodeErrorState } from \"./states/Error\";\nexport class NodeStatesController {\n  constructor(node) {\n    this.node = node;\n    this.timeDependent = new NodeTimeDependentState(this.node);\n    this.error = new NodeErrorState(this.node);\n  }\n}\n", "\"use strict\";\nimport { CoreWalker } from \"../../../../core/Walker\";\nexport class HierarchyParentController {\n  constructor(node) {\n    this.node = node;\n    this._parent = null;\n  }\n  parent() {\n    return this._parent;\n  }\n  setParent(parent) {\n    if (parent != this.node.parentController.parent()) {\n      this._parent = parent;\n      if (this._parent) {\n        this.node.nameController.requestNameToParent(this.node.name());\n      }\n    }\n  }\n  firstAncestorWithContext(context) {\n    if (this._parent) {\n      if (this._parent.context() == context) {\n        return this._parent;\n      } else {\n        return this._parent.parentController.firstAncestorWithContext(context);\n      }\n    }\n    return null;\n  }\n  findParent(callback) {\n    if (this._parent) {\n      if (callback(this._parent) == true) {\n        return this._parent;\n      } else {\n        return this._parent.parentController.findParent(callback);\n      }\n    }\n    return null;\n  }\n  path(relativeToParent) {\n    const separator = CoreWalker.SEPARATOR;\n    if (this._parent != null) {\n      if (this._parent == relativeToParent) {\n        return this.node.name();\n      } else {\n        const parent_fullPath = this._parent.path(relativeToParent);\n        if (parent_fullPath === separator) {\n          return parent_fullPath + this.node.name();\n        } else {\n          return parent_fullPath + separator + this.node.name();\n        }\n      }\n    } else {\n      return separator;\n    }\n  }\n  onSetParent() {\n    if (this._on_set_parent_hooks) {\n      for (const hook of this._on_set_parent_hooks) {\n        hook();\n      }\n    }\n  }\n  findNode(path) {\n    if (path == null) {\n      return null;\n    }\n    if (path == CoreWalker.CURRENT || path == CoreWalker.CURRENT_WITH_SLASH) {\n      return this.node;\n    }\n    if (path == CoreWalker.PARENT || path == CoreWalker.PARENT_WITH_SLASH) {\n      return this.node.parent();\n    }\n    const separator = CoreWalker.SEPARATOR;\n    if (path === separator) {\n      return this.node.scene().root();\n    }\n    if (path[0] === separator) {\n      path = path.substring(1, path.length);\n      return this.node.scene().root().node(path);\n    }\n    if (path.split) {\n      const elements = path.split(separator);\n      if (elements.length === 1) {\n        const name = elements[0];\n        if (this.node.childrenController) {\n          return this.node.childrenController.childByName(name);\n        } else {\n          return null;\n        }\n      } else {\n        return CoreWalker.findNode(this.node, path);\n      }\n    } else {\n      console.error(\"unexpected path given:\", path);\n      return null;\n    }\n  }\n}\n", "\"use strict\";\nimport { NodeEvent } from \"../engine/poly/NodeEvent\";\nimport { arrayIsEqual, arrayUnion, arrayDifference, arrayMap, arrayCopy } from \"./ArrayUtils\";\nconst _nodes = [];\nconst _nodeIds = [];\nexport class CoreNodeSelection {\n  constructor(_node) {\n    this._node = _node;\n    this._nodeIds = [];\n  }\n  node() {\n    return this._node;\n  }\n  nodeIds() {\n    return this._nodeIds;\n  }\n  nodeFromIndex(index) {\n    this._node.scene().graph.nodesFromIds(this._nodeIds, _nodes);\n    return _nodes[index];\n  }\n  nodes(target) {\n    this._node.scene().graph.nodesFromIds(this._nodeIds, target);\n    return target;\n  }\n  contains(node) {\n    return this._nodeIds.includes(node.graphNodeId());\n  }\n  equals(nodes) {\n    arrayMap(nodes, (node) => node.graphNodeId(), _nodeIds);\n    _nodeIds.sort();\n    return arrayIsEqual(_nodeIds, this._nodeIds);\n  }\n  clear() {\n    this._nodeIds.length = 0;\n    this._sendUpdateEvent();\n  }\n  set(nodes) {\n    this._nodeIds.length = 0;\n    this.add(nodes);\n  }\n  add(nodesToAdd) {\n    arrayMap(nodesToAdd, (node) => node.graphNodeId(), _nodeIds);\n    arrayUnion(this._nodeIds, _nodeIds, this._nodeIds);\n    this._sendUpdateEvent();\n  }\n  remove(nodesToRemove) {\n    arrayMap(nodesToRemove, (node) => node.graphNodeId(), _nodeIds);\n    arrayDifference(this._nodeIds, _nodeIds, this._nodeIds);\n    this._sendUpdateEvent();\n  }\n  _checkValidity() {\n    this.nodes(_nodes);\n    if (_nodes.length != this._nodeIds.length) {\n      console.error(\"selection invalid: at least one node is not part of the graph\");\n      return;\n    }\n    for (const node of _nodes) {\n      if (node.parent() != this._node) {\n        console.error(\"selection invalid: at least one node is not has another parent\");\n      }\n    }\n  }\n  _sendUpdateEvent() {\n    this._checkValidity();\n    this._node.emit(NodeEvent.SELECTION_UPDATED);\n  }\n  toJSON(target) {\n    arrayCopy(this._nodeIds, target);\n  }\n}\n", "\"use strict\";\nimport { InputCloneMode } from \"../../../../../engine/poly/InputCloneMode\";\nimport { TypeAssert } from \"../../../../../engine/poly/Assert\";\nimport { CoreType } from \"../../../../../core/Type\";\nexport class ClonedStatesController {\n  constructor(inputs_controller) {\n    this.inputs_controller = inputs_controller;\n    this._clone_required_states = [];\n    this._overridden = false;\n  }\n  initInputsClonedState(states) {\n    if (CoreType.isArray(states)) {\n      this._cloned_states = states;\n    } else {\n      this._cloned_state = states;\n    }\n    this._update_clone_required_state();\n  }\n  override_cloned_state_allowed() {\n    if (this._cloned_states) {\n      for (let state of this._cloned_states) {\n        if (state == InputCloneMode.FROM_NODE) {\n          return true;\n        }\n      }\n    }\n    if (this._cloned_state) {\n      return this._cloned_state == InputCloneMode.FROM_NODE;\n    }\n    return false;\n  }\n  clone_required_state(index) {\n    return this._clone_required_states[index];\n  }\n  clone_required_states() {\n    return this._clone_required_states;\n  }\n  _get_clone_required_state(index) {\n    const states = this._cloned_states;\n    if (states) {\n      const state = states[index];\n      if (state != null) {\n        return this.clone_required_from_state(state);\n      }\n    }\n    if (this._cloned_state) {\n      return this.clone_required_from_state(this._cloned_state);\n    }\n    return true;\n  }\n  clone_required_from_state(state) {\n    switch (state) {\n      case InputCloneMode.ALWAYS:\n        return true;\n      case InputCloneMode.NEVER:\n        return false;\n      case InputCloneMode.FROM_NODE:\n        return !this._overridden;\n    }\n    return TypeAssert.unreachable(state);\n  }\n  override_cloned_state(state) {\n    this._overridden = state;\n    this._update_clone_required_state();\n  }\n  overriden() {\n    return this._overridden;\n  }\n  _update_clone_required_state() {\n    if (this._cloned_states) {\n      const states = [];\n      for (let i = 0; i < this._cloned_states.length; i++) {\n        states[i] = this._get_clone_required_state(i);\n      }\n      this._clone_required_states = states;\n      return;\n    }\n    if (this._cloned_state) {\n      const max_inputs = this.inputs_controller.inputsCount();\n      const states = [];\n      for (let i = 0; i < max_inputs; i++) {\n        states[i] = this._get_clone_required_state(i);\n      }\n      this._clone_required_states = states;\n      return;\n    }\n  }\n}\n", "\"use strict\";\nimport { ClonedStatesController } from \"./inputs/ClonedStatesController\";\nexport class OperationInputsController {\n  constructor(operationContainer) {\n    this.operationContainer = operationContainer;\n  }\n  inputsCount() {\n    return this.operationContainer.inputsCount();\n  }\n  initInputsClonedState(states) {\n    if (!this._clonedStatesController) {\n      this._clonedStatesController = new ClonedStatesController(this);\n      this._clonedStatesController.initInputsClonedState(states);\n    }\n  }\n  cloneRequired(index) {\n    var _a;\n    const state = (_a = this._clonedStatesController) == null ? void 0 : _a.clone_required_state(index);\n    if (state != null) {\n      return state;\n    }\n    return true;\n  }\n  override_cloned_state(state) {\n    var _a;\n    (_a = this._clonedStatesController) == null ? void 0 : _a.override_cloned_state(state);\n  }\n}\n", "\"use strict\";\nimport { Color } from \"three\";\nimport { Vector2 } from \"three\";\nimport { Vector3 } from \"three\";\nimport { Vector4 } from \"three\";\nimport { TypedNodePathParamValue } from \"../../../core/Walker\";\nimport { OperationInputsController } from \"./utils/InputsController\";\nimport { CoreType } from \"../../../core/Type\";\nexport class BaseOperationContainer {\n  constructor(operation, name, init_params) {\n    this.operation = operation;\n    this.name = name;\n    this.params = {};\n    this._applyDefaultParams();\n    this._applyInitParams(init_params);\n    this._initClonedStates();\n  }\n  //\n  //\n  // PATH PARAMS\n  //\n  //\n  pathParamResolveRequired() {\n    return this._path_params != null;\n  }\n  resolvePathParams(node_start) {\n    if (!this._path_params) {\n      return;\n    }\n    for (let path_param of this._path_params) {\n      path_param.resolve(node_start);\n    }\n  }\n  //\n  //\n  // PARAM VALUES CONVERSION\n  //\n  //\n  _applyDefaultParams() {\n    const default_params = this.operation.constructor.DEFAULT_PARAMS;\n    const param_names = Object.keys(default_params);\n    for (let param_name of param_names) {\n      const param_data = default_params[param_name];\n      const clone_param_data = this._convertParamData(param_name, param_data);\n      if (clone_param_data != void 0) {\n        this.params[param_name] = clone_param_data;\n      }\n    }\n  }\n  _applyInitParams(init_params) {\n    const paramNames = Object.keys(init_params);\n    for (let paramName of paramNames) {\n      const param_data = init_params[paramName];\n      if (param_data.simple_data != null) {\n        const simple_data = param_data.simple_data;\n        const clone_param_data = this.operation.convertExportParamData({\n          paramName,\n          paramData: simple_data,\n          params: this.params\n        });\n        if (clone_param_data != void 0) {\n          this.params[paramName] = clone_param_data;\n        }\n      }\n    }\n  }\n  _convertParamData(param_name, param_data) {\n    if (CoreType.isNumber(param_data) || CoreType.isBoolean(param_data) || CoreType.isString(param_data)) {\n      return param_data;\n    }\n    if (param_data instanceof TypedNodePathParamValue) {\n      const cloned = param_data.clone();\n      if (!this._path_params) {\n        this._path_params = [];\n      }\n      this._path_params.push(cloned);\n      return cloned;\n    }\n    if (param_data instanceof Color || param_data instanceof Vector2 || param_data instanceof Vector3 || param_data instanceof Vector4) {\n      return param_data.clone();\n    }\n  }\n  setInput(index, input) {\n    this._inputs = this._inputs || [];\n    this._inputs[index] = input;\n  }\n  inputsCount() {\n    if (this._inputs) {\n      return this._inputs.length;\n    } else {\n      return 0;\n    }\n  }\n  inputsController() {\n    return this._inputsController = this._inputsController || new OperationInputsController(this);\n  }\n  _initClonedStates() {\n    const default_cloned_states = this.operation.constructor.INPUT_CLONED_STATE;\n    this.inputsController().initInputsClonedState(default_cloned_states);\n  }\n  inputCloneRequired(index) {\n    if (!this._inputsController) {\n      return true;\n    }\n    return this._inputsController.cloneRequired(index);\n  }\n  overrideInputCloneState(state) {\n    this.inputsController().override_cloned_state(state);\n  }\n  //\n  //\n  // COOK\n  //\n  //\n  cook(input_contents) {\n    return this.operation.cook(input_contents, this.params);\n  }\n}\n", "\"use strict\";\nimport { BaseOperationContainer } from \"./_Base\";\nexport class SopOperationContainer extends BaseOperationContainer {\n  constructor(operation, name, init_params) {\n    super(operation, name, init_params);\n    this.operation = operation;\n    this.name = name;\n    this.init_params = init_params;\n    // TODO: there may a better to overload add_input\n    this._inputs = [];\n    this._currentInputIndex = 0;\n    this._dirty = true;\n  }\n  operationType() {\n    return this.operation.type();\n  }\n  addInput(input) {\n    super.setInput(this._currentInputIndex, input);\n    this.incrementInputIndex();\n  }\n  incrementInputIndex() {\n    this._currentInputIndex++;\n  }\n  currentInputIndex() {\n    return this._currentInputIndex;\n  }\n  setDirty() {\n    if (this._dirty) {\n      return;\n    }\n    this._computeResult = void 0;\n    for (let i = 0; i < this._inputs.length; i++) {\n      const inputOperation = this._inputs[i];\n      inputOperation.setDirty();\n    }\n  }\n  async compute(input_contents, operation_inputs_map) {\n    if (this._computeResult) {\n      return this._computeResult;\n    }\n    const operationInputContents = [];\n    const nodeInputsMap = operation_inputs_map.get(this);\n    if (nodeInputsMap) {\n      nodeInputsMap.forEach((node_input_index, operation_input_index) => {\n        operationInputContents[operation_input_index] = input_contents[node_input_index];\n      });\n    }\n    for (let i = 0; i < this._inputs.length; i++) {\n      const inputOperation = this._inputs[i];\n      let result2 = await inputOperation.compute(input_contents, operation_inputs_map);\n      if (result2) {\n        if (this.inputCloneRequired(i)) {\n          result2 = result2.clone();\n        }\n        operationInputContents[i] = result2;\n      }\n    }\n    const result = this.operation.cook(operationInputContents, this.params);\n    if (result) {\n      if (result instanceof Promise) {\n        this._computeResult = await result;\n      } else {\n        this._computeResult = result;\n      }\n    } else {\n      this._computeResult = void 0;\n    }\n    this._dirty = false;\n    return this._computeResult;\n  }\n}\n", "\"use strict\";\nimport { CoreGraphNode } from \"../../../core/graph/CoreGraphNode\";\nimport { NodeEvent } from \"../../poly/NodeEvent\";\nimport { CoreType } from \"../../../core/Type\";\nexport class NameController {\n  constructor(node) {\n    this.node = node;\n    this._graphNode = new CoreGraphNode(node.scene(), \"nodeNameController\");\n  }\n  dispose() {\n    this._graphNode.dispose();\n    this._onSetNameHooks = void 0;\n    this._onSetFullPathHooks = void 0;\n  }\n  graphNode() {\n    return this._graphNode;\n  }\n  static baseName(node) {\n    let base = node.type();\n    const last_char = base[base.length - 1];\n    if (!CoreType.isNaN(parseInt(last_char))) {\n      base += \"_\";\n    }\n    return `${base}1`;\n  }\n  requestNameToParent(newName) {\n    const parent = this.node.parent();\n    if (parent && parent.childrenAllowed() && parent.childrenController) {\n      parent.childrenController.setChildName(this.node, newName);\n    } else {\n      console.warn(\"requestNameToParent failed, no parent found\");\n    }\n  }\n  setName(newName) {\n    if (newName != this.node.name()) {\n      if (this.node.insideALockedParent()) {\n        const lockedParent = this.node.lockedParent();\n        console.warn(\n          `node '${this.node.path()}' cannot have its name changed, since it is inside '${lockedParent ? lockedParent.path() : \"\"}', which is locked`\n        );\n        return;\n      }\n      this.requestNameToParent(newName);\n    }\n  }\n  updateNameFromParent(new_name) {\n    var _a;\n    this.node._setCoreName(new_name);\n    this._postSetName();\n    this.runPostSetFullPathHooks();\n    if (this.node.childrenAllowed()) {\n      const children = (_a = this.node.childrenController) == null ? void 0 : _a.children();\n      if (children) {\n        for (const child_node of children) {\n          child_node.nameController.runPostSetFullPathHooks();\n        }\n      }\n    }\n    if (this.node.lifecycle.creationCompleted() && this.node.scene().loadingController.loaded()) {\n      this.node.scene().missingExpressionReferencesController.checkForMissingNodeReferences(this.node);\n      this.node.scene().expressionsController.regenerateReferringExpressions(this.node);\n    }\n    this.node.scene().referencesController.notifyNameUpdated(this.node);\n    this.node.emit(NodeEvent.NAME_UPDATED);\n  }\n  add_post_set_name_hook(hook) {\n    this._onSetNameHooks = this._onSetNameHooks || [];\n    this._onSetNameHooks.push(hook);\n  }\n  add_post_set_fullPath_hook(hook) {\n    this._onSetFullPathHooks = this._onSetFullPathHooks || [];\n    this._onSetFullPathHooks.push(hook);\n  }\n  _postSetName() {\n    if (this._onSetNameHooks) {\n      for (const hook of this._onSetNameHooks) {\n        hook();\n      }\n    }\n  }\n  runPostSetFullPathHooks() {\n    if (this._onSetFullPathHooks) {\n      for (const hook of this._onSetFullPathHooks) {\n        hook();\n      }\n    }\n  }\n}\n", "\"use strict\";\nimport { CoreString } from \"../../../../core/String\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nimport { CoreNodeSelection } from \"../../../../core/NodeSelection\";\nimport { Poly } from \"../../../Poly\";\nimport { SopOperationContainer } from \"../../../operations/container/sop\";\nimport { MapUtils } from \"../../../../core/MapUtils\";\nimport { NameController } from \"../NameController\";\nimport { arrayCopy } from \"../../../../core/ArrayUtils\";\nexport class HierarchyChildrenController {\n  constructor(node, _context) {\n    this.node = node;\n    this._context = _context;\n    this._childrenByName = /* @__PURE__ */ new Map();\n    this._childrenIdByType = /* @__PURE__ */ new Map();\n    this._childrenByType = /* @__PURE__ */ new Map();\n    this._childrenAndGrandchildrenByContext = /* @__PURE__ */ new Map();\n    this._children = [];\n    this._childrenNames = [];\n  }\n  get selection() {\n    return this._selection = this._selection || new CoreNodeSelection(this.node);\n  }\n  dispose() {\n    const _tmpChildren = [];\n    arrayCopy(this.children(), _tmpChildren);\n    for (const child of _tmpChildren) {\n      this.node.removeNode(child);\n    }\n    _tmpChildren.length = 0;\n    this._selection = void 0;\n  }\n  get context() {\n    return this._context;\n  }\n  setOutputNodeFindMethod(method) {\n    this._outputNodeFindMethod = method;\n  }\n  outputNode() {\n    if (this._outputNodeFindMethod) {\n      return this._outputNodeFindMethod();\n    }\n  }\n  //\n  //\n  //\n  //\n  //\n  setChildName(node, newName) {\n    let currentChildWithName;\n    newName = CoreString.sanitizeName(newName);\n    if ((currentChildWithName = this._childrenByName.get(newName)) != null) {\n      if (node.name() === newName && currentChildWithName.graphNodeId() === node.graphNodeId()) {\n        return;\n      }\n      newName = CoreString.increment(newName);\n      return this.setChildName(node, newName);\n    } else {\n      const currentName = node.name();\n      const currentChild = this._childrenByName.get(currentName);\n      if (currentChild) {\n        this._childrenByName.delete(currentName);\n      }\n      this._childrenByName.set(newName, node);\n      this._updateCache();\n      node.nameController.updateNameFromParent(newName);\n      this.node.scene().nodesController.addToInstanciatedNode(node);\n      this.node.scene().graphNodesController.notifyNodePathChanged(node);\n    }\n  }\n  _nextAvailableChildName(nodeName) {\n    nodeName = CoreString.sanitizeName(nodeName);\n    return this._childrenByName.get(nodeName) ? this._nextAvailableChildName(CoreString.increment(nodeName)) : nodeName;\n  }\n  nodeContextSignature() {\n    return `${this.node.context()}/${this.node.type()}`;\n  }\n  availableChildrenClasses() {\n    return Poly.registeredNodes(this.node);\n  }\n  isValidChildType(node_type) {\n    const node_class = this.availableChildrenClasses()[node_type];\n    return node_class != null;\n  }\n  // create_node(node_type: string, options?: NodeCreateOptions): BaseNodeType {\n  // \tconst node_class = this.available_children_classes()[node_type];\n  // \tif (node_class == null) {\n  // \t\tconst message = `child node type '${node_type}' not found for node '${this.node.path()}'. Available types are: ${Object.keys(\n  // \t\t\tthis.available_children_classes()\n  // \t\t).join(', ')}, ${this._context}, ${this.node.type}`;\n  // \t\tconsole.error(message);\n  // \t\tthrow message;\n  // \t} else {\n  // \t\tconst child_node = new node_class(this.node.scene, `child_node_${node_type}`, paramsInitValueOverrides);\n  // \t\tchild_node.initialize_base_and_node();\n  // \t\tthis.add_node(child_node);\n  // \t\tchild_node.lifecycle.set_creation_completed();\n  // \t\treturn child_node;\n  // \t}\n  // }\n  createNode(nodeClassOrString, options) {\n    if (typeof nodeClassOrString == \"string\") {\n      const nodeClass = this._findNodeClass(nodeClassOrString);\n      return this._createAndInitNode(nodeClass, options);\n    } else {\n      return this._createAndInitNode(nodeClassOrString, options);\n    }\n  }\n  _createAndInitNode(nodeClass, options) {\n    var _a;\n    const requestedNodeName = (options == null ? void 0 : options.nodeName) || NameController.baseName(nodeClass);\n    const nodeName = this._nextAvailableChildName(requestedNodeName);\n    const childNode = new nodeClass(this.node.scene(), nodeName, {\n      ...options,\n      serializerClass: (_a = this.node.serializer) == null ? void 0 : _a.constructor\n    });\n    childNode.initializeBaseAndNode();\n    this._addNode(childNode);\n    childNode.lifecycle.setCreationCompleted();\n    return childNode;\n  }\n  _findNodeClass(node_type) {\n    const nodeClass = this.availableChildrenClasses()[node_type.toLowerCase()];\n    if (nodeClass == null) {\n      const message = `child node type '${node_type}' not found for node '${this.node.path()}'. Available types are: ${Object.keys(\n        this.availableChildrenClasses()\n      ).join(\", \")}, ${this._context}, ${this.node.type()}`;\n      console.error(message);\n      throw message;\n    }\n    return nodeClass;\n  }\n  createOperationContainer(operationType, operationContainerName, options) {\n    const operationClass = Poly.registeredOperation(this._context, operationType);\n    if (operationClass == null) {\n      const message = `no operation found with context ${this._context}/${operationType}`;\n      console.error(message);\n      throw message;\n    } else {\n      const operation = new operationClass(this.node.scene());\n      const operation_container = new SopOperationContainer(\n        operation,\n        operationContainerName,\n        (options == null ? void 0 : options.paramsInitValueOverrides) || {}\n      );\n      return operation_container;\n    }\n  }\n  _addNode(childNode) {\n    childNode.setParent(this.node);\n    this._addToNodesByType(childNode);\n    childNode.params.init();\n    childNode.parentController.onSetParent();\n    childNode.nameController.runPostSetFullPathHooks();\n    if (childNode.childrenAllowed() && childNode.childrenController) {\n      for (const child of childNode.childrenController.children()) {\n        child.nameController.runPostSetFullPathHooks();\n      }\n    }\n    if (this.node.serializer) {\n      const childNodeJSON = childNode.toJSON();\n      if (childNodeJSON) {\n        this.node.emit(NodeEvent.CREATED, { child_node_json: childNodeJSON });\n      }\n    }\n    if (this.node.scene().lifecycleController.onAfterCreatedCallbackAllowed()) {\n      childNode.lifecycle.runOnAfterCreatedCallbacks();\n    }\n    childNode.lifecycle.runOnAfterAddedCallbacks();\n    this.node.lifecycle.runOnChildAddCallbacks(childNode);\n    if (childNode.requireWebGL2()) {\n      this.node.scene().webglController.setRequireWebGL2();\n    }\n    this.node.scene().missingExpressionReferencesController.checkForMissingNodeReferences(childNode);\n    return childNode;\n  }\n  removeNode(childNode) {\n    var _a;\n    if (this.node.lockedOrInsideALockedParent()) {\n      const lockedNode = this.node.selfOrLockedParent();\n      const reason = lockedNode == this.node ? `it is locked` : `it is inside '${lockedNode ? lockedNode.path() : \"\"}', which is locked`;\n      console.warn(`node '${this.node.path()}' cannot remove nodes, since ${reason}`);\n      console.log(this.node.graphNodeId(), this.node.name());\n      return;\n    }\n    if (childNode.parent() != this.node) {\n      return console.warn(`node ${childNode.name()} not under parent ${this.node.path()}`);\n    } else {\n      (_a = childNode.polyNodeController) == null ? void 0 : _a.setLockedState(false);\n      childNode.lifecycle.runOnBeforeDeleteCallbacks();\n      if (this.selection.contains(childNode)) {\n        this.selection.remove([childNode]);\n      }\n      const firstConnection = childNode.io.connections.firstInputConnection();\n      const inputConnections = childNode.io.connections.inputConnections();\n      const outputConnections = [];\n      childNode.io.connections.outputConnections(outputConnections);\n      if (inputConnections) {\n        for (const inputConnection of inputConnections) {\n          if (inputConnection) {\n            inputConnection.disconnect({ setInput: true });\n          }\n        }\n      }\n      if (outputConnections) {\n        for (const outputConnection of outputConnections) {\n          if (outputConnection) {\n            outputConnection.disconnect({ setInput: true });\n            if (firstConnection) {\n              const oldSrc = firstConnection.nodeSrc();\n              const oldOutputIndex = firstConnection.outputIndex();\n              const oldDest = outputConnection.nodeDest();\n              const oldInputIndex = outputConnection.inputIndex();\n              oldDest.io.inputs.setInput(oldInputIndex, oldSrc, oldOutputIndex);\n            }\n          }\n        }\n      }\n      childNode.setParent(null);\n      this._childrenByName.delete(childNode.name());\n      this._updateCache();\n      this._removeFromNodesByType(childNode);\n      this.node.scene().nodesController.removeFromInstanciatedNode(childNode);\n      childNode.setSuccessorsDirty(this.node);\n      childNode.graphDisconnectSuccessors();\n      this.node.lifecycle.runOnChildRemoveCallbacks(childNode);\n      childNode.lifecycle.runOnDeleteCallbacks();\n      childNode.dispose();\n      childNode.emit(NodeEvent.DELETED, { parent_id: this.node.graphNodeId() });\n      this.node.scene().graphNodesController.notifyNodePathChanged(childNode);\n    }\n  }\n  _addToNodesByType(node) {\n    const nodeId = node.graphNodeId();\n    const type = node.type();\n    MapUtils.addToSetAtEntry(this._childrenIdByType, type, nodeId);\n    MapUtils.pushOnArrayAtEntry(this._childrenByType, type, node);\n    this._addToChildrenAndGrandchildrenByContext(node);\n  }\n  _removeFromNodesByType(node) {\n    const nodeId = node.graphNodeId();\n    const type = node.type();\n    MapUtils.removeFromSetAtEntry(this._childrenIdByType, type, nodeId);\n    MapUtils.popFromArrayAtEntry(this._childrenByType, type, node);\n    this._removeFromChildrenAndGrandchildrenByContext(node);\n  }\n  _addToChildrenAndGrandchildrenByContext(node) {\n    var _a;\n    const nodeId = node.graphNodeId();\n    const nodeContext = node.context();\n    MapUtils.addToSetAtEntry(this._childrenAndGrandchildrenByContext, nodeContext, nodeId);\n    const parent = this.node.parent();\n    if (parent && parent.childrenAllowed()) {\n      (_a = parent.childrenController) == null ? void 0 : _a._addToChildrenAndGrandchildrenByContext(node);\n    }\n  }\n  _removeFromChildrenAndGrandchildrenByContext(node) {\n    var _a;\n    const nodeId = node.graphNodeId();\n    const type = node.context();\n    MapUtils.removeFromSetAtEntry(this._childrenAndGrandchildrenByContext, type, nodeId);\n    const parent = this.node.parent();\n    if (parent && parent.childrenAllowed()) {\n      (_a = parent.childrenController) == null ? void 0 : _a._removeFromChildrenAndGrandchildrenByContext(node);\n    }\n  }\n  nodesByType(type, target = []) {\n    const nodes = this._childrenByType.get(type);\n    target.length = nodes ? nodes.length : 0;\n    if (nodes) {\n      for (let i = 0; i < nodes.length; i++) {\n        target[i] = nodes[i];\n      }\n    }\n    return target;\n  }\n  childByName(name) {\n    return this._childrenByName.get(name) || null;\n  }\n  hasChildrenAndGrandchildrenWithContext(context) {\n    return this._childrenAndGrandchildrenByContext.get(context) != null;\n  }\n  _updateCache() {\n    this._children.length = 0;\n    this._childrenNames.length = 0;\n    this._childrenByName.forEach((node) => {\n      this._children.push(node);\n      this._childrenNames.push(node.name());\n    });\n  }\n  children() {\n    return this._children;\n  }\n  childrenNames() {\n    return this._childrenNames;\n  }\n  traverseChildren(callback, conditionCallback) {\n    this._childrenByName.forEach((childNode) => {\n      var _a;\n      callback(childNode);\n      if (conditionCallback == null || conditionCallback(childNode) == true) {\n        (_a = childNode.childrenController) == null ? void 0 : _a.traverseChildren(callback);\n      }\n    });\n  }\n}\n", "\"use strict\";\nexport class NodeLifeCycleController {\n  constructor(node) {\n    this.node = node;\n    this._creationCompleted = false;\n  }\n  dispose() {\n    this._onChildAddCallbacks = void 0;\n    this._onChildRemoveCallbacks = void 0;\n    this._onAfterCreatedCallbacks = void 0;\n    this._onAfterAddedCallbacks = void 0;\n    this._onBeforeDeletedCallbacks = void 0;\n    this._onAfterDeletedCallbacks = void 0;\n  }\n  setCreationCompleted() {\n    if (!this._creationCompleted) {\n      this._creationCompleted = true;\n    }\n  }\n  creationCompleted() {\n    return this.node.scene().loadingController.loaded() && this._creationCompleted;\n  }\n  //\n  //\n  // ON CREATION COMPLETED\n  //\n  //\n  // add_on_creation_completed_hook(callback: Callback) {\n  // \tthis._on_creation_completed_hooks = this._on_creation_completed_hooks || [];\n  // \tthis._on_creation_completed_hooks.push(callback);\n  // }\n  // private run_on_creation_completed_hooks() {\n  // \tif (this._on_creation_completed_hooks) {\n  // \t\tconsole.log('run_on_creation_completed_hooks', this.node.name);\n  // \t}\n  // \tthis.execute_hooks(this._on_creation_completed_hooks);\n  // }\n  //\n  //\n  // ON CHILD ADD\n  //\n  //\n  onChildAdd(callback) {\n    this._onChildAddCallbacks = this._onChildAddCallbacks || [];\n    this._onChildAddCallbacks.push(callback);\n  }\n  runOnChildAddCallbacks(node) {\n    this._runCallbacksWithChildNode(this._onChildAddCallbacks, node);\n  }\n  //\n  //\n  // ON CHILD REMOVE\n  //\n  //\n  onChildRemove(callback) {\n    this._onChildRemoveCallbacks = this._onChildRemoveCallbacks || [];\n    this._onChildRemoveCallbacks.push(callback);\n  }\n  runOnChildRemoveCallbacks(node) {\n    this._runCallbacksWithChildNode(this._onChildRemoveCallbacks, node);\n  }\n  //\n  //\n  // ON CREATE\n  //\n  //\n  onAfterCreated(callback) {\n    this._onAfterCreatedCallbacks = this._onAfterCreatedCallbacks || [];\n    this._onAfterCreatedCallbacks.push(callback);\n  }\n  runOnAfterCreatedCallbacks() {\n    this._runCallbacks(this._onAfterCreatedCallbacks);\n  }\n  //\n  //\n  // ON ADD\n  //\n  //\n  onAfterAdded(callback) {\n    this._onAfterAddedCallbacks = this._onAfterAddedCallbacks || [];\n    this._onAfterAddedCallbacks.push(callback);\n  }\n  runOnAfterAddedCallbacks() {\n    this._runCallbacks(this._onAfterAddedCallbacks);\n  }\n  //\n  //\n  // ON DELETE\n  //\n  //\n  onBeforeDeleted(callback) {\n    this._onBeforeDeletedCallbacks = this._onBeforeDeletedCallbacks || [];\n    this._onBeforeDeletedCallbacks.push(callback);\n  }\n  runOnBeforeDeleteCallbacks() {\n    this._runCallbacks(this._onBeforeDeletedCallbacks);\n  }\n  // TODO: onAfterDeleted is not very different than methods in .dispose\n  // so this should probably be removed/refactored\n  onAfterDeleted(callback) {\n    this._onAfterDeletedCallbacks = this._onAfterDeletedCallbacks || [];\n    this._onAfterDeletedCallbacks.push(callback);\n  }\n  runOnDeleteCallbacks() {\n    this._runCallbacks(this._onAfterDeletedCallbacks);\n  }\n  //\n  //\n  // UTILS\n  //\n  //\n  _runCallbacks(hooks) {\n    if (!hooks) {\n      return;\n    }\n    let hook;\n    for (hook of hooks) {\n      hook();\n    }\n  }\n  _runCallbacksWithChildNode(hooks, childNode) {\n    if (!hooks) {\n      return;\n    }\n    let hook;\n    for (hook of hooks) {\n      hook(childNode);\n    }\n  }\n}\n", "\"use strict\";\nexport var AnimNodeEasing = /* @__PURE__ */ ((AnimNodeEasing2) => {\n  AnimNodeEasing2[\"NONE\"] = \"none\";\n  AnimNodeEasing2[\"POWER1\"] = \"power1\";\n  AnimNodeEasing2[\"POWER2\"] = \"power2\";\n  AnimNodeEasing2[\"POWER3\"] = \"power3\";\n  AnimNodeEasing2[\"POWER4\"] = \"power4\";\n  AnimNodeEasing2[\"BACK\"] = \"back\";\n  AnimNodeEasing2[\"ELASTIC\"] = \"elastic\";\n  AnimNodeEasing2[\"BOUNCE\"] = \"bounce\";\n  AnimNodeEasing2[\"SLOW\"] = \"slow\";\n  AnimNodeEasing2[\"STEPS\"] = \"steps\";\n  AnimNodeEasing2[\"CIRC\"] = \"circ\";\n  AnimNodeEasing2[\"EXPO\"] = \"expo\";\n  AnimNodeEasing2[\"SINE\"] = \"sine\";\n  return AnimNodeEasing2;\n})(AnimNodeEasing || {});\nexport const EASINGS = [\n  \"none\" /* NONE */,\n  \"power1\" /* POWER1 */,\n  \"power2\" /* POWER2 */,\n  \"power3\" /* POWER3 */,\n  \"power4\" /* POWER4 */,\n  \"back\" /* BACK */,\n  \"elastic\" /* ELASTIC */,\n  \"bounce\" /* BOUNCE */,\n  \"slow\" /* SLOW */,\n  \"steps\" /* STEPS */,\n  \"circ\" /* CIRC */,\n  \"expo\" /* EXPO */,\n  \"sine\" /* SINE */\n];\nexport var InOutMode = /* @__PURE__ */ ((InOutMode2) => {\n  InOutMode2[\"IN\"] = \"in\";\n  InOutMode2[\"OUT\"] = \"out\";\n  InOutMode2[\"IN_OUT\"] = \"inOut\";\n  return InOutMode2;\n})(InOutMode || {});\nexport const IN_OUT_MODES = [\"in\" /* IN */, \"out\" /* OUT */, \"inOut\" /* IN_OUT */];\n", "\"use strict\";\nimport { AnimNodeEasing } from \"../Constant\";\nexport function animBuilderCommonVars(timelineBuilder) {\n  const duration = timelineBuilder.duration();\n  const vars = { duration };\n  const easing = timelineBuilder.easing() || AnimNodeEasing.NONE;\n  if (easing) {\n    vars.ease = easing;\n  }\n  const delay = timelineBuilder.delay();\n  if (delay != null) {\n    vars.delay = delay;\n  }\n  const repeatParams = timelineBuilder.repeatParams();\n  if (repeatParams) {\n    vars.repeat = repeatParams.count;\n    vars.repeatDelay = repeatParams.delay;\n    vars.yoyo = repeatParams.yoyo;\n  }\n  return vars;\n}\n", "\"use strict\";\nclass AnimatedPropertiesRegisterClass {\n  constructor() {\n    this._propertiesMap = /* @__PURE__ */ new Map();\n  }\n  static instance() {\n    return this._instance = this._instance || new AnimatedPropertiesRegisterClass();\n  }\n  registerProp(property, timelineData) {\n    this._propertiesMap.set(this._convert(property), timelineData);\n  }\n  deRegisterProp(property) {\n    this._propertiesMap.delete(this._convert(property));\n  }\n  registeredTimelineForProperty(property) {\n    return this._propertiesMap.get(this._convert(property));\n  }\n  registeredPropertiesCount() {\n    let count = 0;\n    this._propertiesMap.forEach(() => {\n      count++;\n    });\n    return count;\n  }\n  _convert(property) {\n    if (property.object) {\n      const sceneGraphProp = property;\n      return `${sceneGraphProp.object.uuid}:${sceneGraphProp.propertyName}`;\n    } else {\n      return property;\n    }\n  }\n}\nexport const AnimatedPropertiesRegister = AnimatedPropertiesRegisterClass.instance();\n", "\"use strict\";\nimport { AnimatedPropertiesRegister } from \"../AnimatedPropertiesRegister\";\nexport function animBuilderStartTimeline(options) {\n  const { timelineBuilder, timeline, vars, target, registerableProp, registerproperties } = options;\n  const position = timelineBuilder.position();\n  const positionParam = position ? position.toParameter() : void 0;\n  const existingTimeline = AnimatedPropertiesRegister.registeredTimelineForProperty(registerableProp);\n  const newTimeline = timeline.to(target, vars, positionParam);\n  const onStart = () => {\n    if (existingTimeline) {\n      if (existingTimeline.stoppable) {\n        existingTimeline.timeline.kill();\n        AnimatedPropertiesRegister.deRegisterProp(registerableProp);\n      } else {\n        newTimeline.kill();\n        return;\n      }\n    }\n    if (registerproperties) {\n      AnimatedPropertiesRegister.registerProp(registerableProp, {\n        timeline: newTimeline,\n        stoppable: timelineBuilder.stoppable()\n      });\n    }\n  };\n  const onComplete = () => {\n    AnimatedPropertiesRegister.deRegisterProp(registerableProp);\n  };\n  if (vars.onStart) {\n    const prevOnStart = vars.onStart;\n    vars.onStart = () => {\n      onStart();\n      prevOnStart();\n    };\n  } else {\n    vars.onStart = onStart;\n  }\n  if (vars.onComplete) {\n    const prevOnComplete = vars.onComplete;\n    vars.onComplete = () => {\n      onComplete();\n      prevOnComplete();\n    };\n  } else {\n    vars.onComplete = onComplete;\n  }\n}\n", "\"use strict\";\nimport { ParamType } from \"../../engine/poly/ParamType\";\nimport { Vector2 } from \"three\";\nimport { Vector3 } from \"three\";\nimport { Vector4 } from \"three\";\nimport { Color } from \"three\";\nexport class FloatParamProxy {\n  constructor(param) {\n    this.param = param;\n    this.proxyValue = param.value;\n  }\n  update(interpolant) {\n    if (interpolant) {\n      const val = interpolant.evaluate(this.proxyValue)[0];\n      this.param.set(val);\n    } else {\n      this.param.set(this.proxyValue);\n    }\n  }\n}\nexport class IntegerParamProxy {\n  constructor(param) {\n    this.param = param;\n    this.proxyValue = param.value;\n  }\n  update() {\n    this.param.set(this.proxyValue);\n  }\n}\nexport class Vector2ParamProxy {\n  constructor(param) {\n    this.param = param;\n    this.proxyValue = new Vector2();\n    this._array = [0, 0];\n    this.proxyValue.copy(param.value);\n  }\n  update() {\n    this.proxyValue.toArray(this._array);\n    this.param.set(this._array);\n  }\n}\nexport class Vector3ParamProxy {\n  constructor(param) {\n    this.param = param;\n    this.proxyValue = new Vector3();\n    this._array = [0, 0, 0];\n    this.proxyValue.copy(param.value);\n  }\n  update() {\n    this.proxyValue.toArray(this._array);\n    this.param.set(this._array);\n  }\n}\nexport class Vector4ParamProxy {\n  constructor(param) {\n    this.param = param;\n    this.proxyValue = new Vector4();\n    this._array = [0, 0, 0, 0];\n    this.proxyValue.copy(param.value);\n  }\n  update() {\n    this.proxyValue.toArray(this._array);\n    this.param.set(this._array);\n  }\n}\nexport class ColorParamProxy {\n  constructor(param) {\n    this.param = param;\n    this.proxyValue = new Color();\n    this._array = [0, 0, 0];\n    this.proxyValue.copy(param.valuePreConversion());\n  }\n  update() {\n    this.proxyValue.toArray(this._array);\n    this.param.set(this._array);\n  }\n}\nexport class AnimationNodeParamsProxy {\n  constructor(node) {\n    this._map = /* @__PURE__ */ new Map();\n    const params = node.params.all;\n    for (const param of params) {\n      const paramProxy = this._createParamProxy(param);\n      if (paramProxy) {\n        this._map.set(param, paramProxy);\n      }\n    }\n  }\n  _createParamProxy(param) {\n    switch (param.type()) {\n      case ParamType.INTEGER: {\n        return new IntegerParamProxy(param);\n      }\n      case ParamType.FLOAT: {\n        return new FloatParamProxy(param);\n      }\n      case ParamType.VECTOR2: {\n        return new Vector2ParamProxy(param);\n      }\n      case ParamType.VECTOR3: {\n        return new Vector3ParamProxy(param);\n      }\n      case ParamType.COLOR: {\n        return new ColorParamProxy(param);\n      }\n      case ParamType.VECTOR4: {\n        return new Vector4ParamProxy(param);\n      }\n    }\n  }\n  getParamProxy(param) {\n    return this._map.get(param);\n  }\n}\n", "\"use strict\";\nimport { AnimationNodeParamsProxy } from \"./ParamProxy\";\nclass NodeParamProxiesRegisterClass {\n  constructor() {\n    this._map = /* @__PURE__ */ new Map();\n  }\n  static instance() {\n    return this._instance = this._instance || new NodeParamProxiesRegisterClass();\n  }\n  nodeProxy(node) {\n    const existingProxy = this._map.get(node);\n    if (existingProxy) {\n      return existingProxy;\n    }\n    const newProxy = new AnimationNodeParamsProxy(node);\n    this._map.set(node, newProxy);\n    return newProxy;\n  }\n  paramProxy(param) {\n    return this.nodeProxy(param.node).getParamProxy(param);\n  }\n}\nexport const NodeParamProxiesRegister = NodeParamProxiesRegisterClass.instance();\n", "\"use strict\";\nexport var Operation = /* @__PURE__ */ ((Operation2) => {\n  Operation2[\"SET\"] = \"set\";\n  Operation2[\"ADD\"] = \"add\";\n  Operation2[\"SUBTRACT\"] = \"subtract\";\n  return Operation2;\n})(Operation || {});\nexport const OPERATIONS = [\"set\" /* SET */, \"add\" /* ADD */, \"subtract\" /* SUBTRACT */];\n", "\"use strict\";\nimport { TypeAssert } from \"../../../engine/poly/Assert\";\nimport { Operation } from \"./AnimBuilderTypes\";\nexport function AnimBuilderWithOp(currentValue, value, operation) {\n  switch (operation) {\n    case Operation.SET:\n      return value;\n    case Operation.ADD:\n      return currentValue + value;\n    case Operation.SUBTRACT:\n      return currentValue - value;\n  }\n  TypeAssert.unreachable(operation);\n}\n", "\"use strict\";\nimport { Vector4 } from \"three\";\nimport { Poly } from \"../../../../engine/Poly\";\nimport { NodeParamProxiesRegister } from \"../../NodeParamProxiesRegister\";\nimport { animBuilderCommonVars } from \"../Common\";\nimport { animBuilderStartTimeline } from \"../StartTimeline\";\nimport { AnimBuilderWithOp } from \"../WithOp\";\nexport function populateVarsForParamVector4(param, targetValue, options) {\n  if (!(targetValue instanceof Vector4)) {\n    Poly.warn(\n      `TimelineBuilderProperty error: cannot animate vector4 param '${param.path()}' with targetValue`,\n      targetValue\n    );\n    return;\n  }\n  const proxy = NodeParamProxiesRegister.paramProxy(param);\n  if (!proxy) {\n    return;\n  }\n  const vars = animBuilderCommonVars(options.timelineBuilder);\n  vars.onUpdate = () => {\n    proxy.update();\n  };\n  const operation = options.timelineBuilder.operation();\n  vars.x = AnimBuilderWithOp(param.value.x, targetValue.x, operation);\n  vars.y = AnimBuilderWithOp(param.value.y, targetValue.y, operation);\n  vars.z = AnimBuilderWithOp(param.value.z, targetValue.z, operation);\n  vars.w = AnimBuilderWithOp(param.value.w, targetValue.w, operation);\n  animBuilderStartTimeline({ ...options, vars, target: proxy.proxyValue, registerableProp: param });\n}\n", "\"use strict\";\nimport { Color, Vector3 } from \"three\";\nimport { Poly } from \"../../../../engine/Poly\";\nimport { NodeParamProxiesRegister } from \"../../NodeParamProxiesRegister\";\nimport { animBuilderCommonVars } from \"../Common\";\nimport { animBuilderStartTimeline } from \"../StartTimeline\";\nimport { AnimBuilderWithOp } from \"../WithOp\";\nexport function populateVarsForParamColor(param, targetValue, options) {\n  if (!(targetValue instanceof Color || targetValue instanceof Vector3)) {\n    Poly.warn(\n      `TimelineBuilderProperty error: cannot animate color param '${param.path()}' with targetValue`,\n      targetValue\n    );\n    return;\n  }\n  const proxy = NodeParamProxiesRegister.paramProxy(param);\n  if (!proxy) {\n    return;\n  }\n  const vars = animBuilderCommonVars(options.timelineBuilder);\n  vars.onUpdate = () => {\n    proxy.update();\n  };\n  const operation = options.timelineBuilder.operation();\n  const x = targetValue instanceof Color ? targetValue.r : targetValue.x;\n  const y = targetValue instanceof Color ? targetValue.g : targetValue.y;\n  const z = targetValue instanceof Color ? targetValue.b : targetValue.z;\n  vars.r = AnimBuilderWithOp(param.value.r, x, operation);\n  vars.g = AnimBuilderWithOp(param.value.g, y, operation);\n  vars.b = AnimBuilderWithOp(param.value.b, z, operation);\n  animBuilderStartTimeline({ ...options, vars, target: proxy.proxyValue, registerableProp: param });\n}\nexport function populateVarsForColor(options) {\n  const { vars, targetValue, targetProperty, propertyNames, operation } = options;\n  for (const propertyName of propertyNames) {\n    vars[propertyName] = AnimBuilderWithOp(\n      targetProperty[propertyName],\n      targetValue[propertyName],\n      operation\n    );\n  }\n}\n", "\"use strict\";\nimport { Vector3 } from \"three\";\nimport { Poly } from \"../../../../engine/Poly\";\nimport { NodeParamProxiesRegister } from \"../../NodeParamProxiesRegister\";\nimport { animBuilderCommonVars } from \"../Common\";\nimport { animBuilderStartTimeline } from \"../StartTimeline\";\nimport { AnimBuilderWithOp } from \"../WithOp\";\nexport function populateVarsForParamVector3(param, targetValue, options) {\n  if (!(targetValue instanceof Vector3)) {\n    Poly.warn(\n      `TimelineBuilderProperty error: cannot animate vector3 param '${param.path()}' with targetValue`,\n      targetValue\n    );\n    return;\n  }\n  const proxy = NodeParamProxiesRegister.paramProxy(param);\n  if (!proxy) {\n    return;\n  }\n  const vars = animBuilderCommonVars(options.timelineBuilder);\n  vars.onUpdate = () => {\n    proxy.update();\n  };\n  const operation = options.timelineBuilder.operation();\n  vars.x = AnimBuilderWithOp(param.value.x, targetValue.x, operation);\n  vars.y = AnimBuilderWithOp(param.value.y, targetValue.y, operation);\n  vars.z = AnimBuilderWithOp(param.value.z, targetValue.z, operation);\n  animBuilderStartTimeline({ ...options, vars, target: proxy.proxyValue, registerableProp: param });\n}\n", "\"use strict\";\nimport { Vector2 } from \"three\";\nimport { Poly } from \"../../../../engine/Poly\";\nimport { NodeParamProxiesRegister } from \"../../NodeParamProxiesRegister\";\nimport { animBuilderCommonVars } from \"../Common\";\nimport { animBuilderStartTimeline } from \"../StartTimeline\";\nimport { AnimBuilderWithOp } from \"../WithOp\";\nexport function populateVarsForParamVector2(param, targetValue, options) {\n  if (!(targetValue instanceof Vector2)) {\n    Poly.warn(\n      `TimelineBuilderProperty error: cannot animate vector2 param '${param.path()}' with targetValue`,\n      targetValue\n    );\n    return;\n  }\n  const proxy = NodeParamProxiesRegister.paramProxy(param);\n  if (!proxy) {\n    return;\n  }\n  const vars = animBuilderCommonVars(options.timelineBuilder);\n  vars.onUpdate = () => {\n    proxy.update();\n  };\n  const operation = options.timelineBuilder.operation();\n  vars.x = AnimBuilderWithOp(param.value.x, targetValue.x, operation);\n  vars.y = AnimBuilderWithOp(param.value.y, targetValue.y, operation);\n  animBuilderStartTimeline({ ...options, vars, target: proxy.proxyValue, registerableProp: param });\n}\n", "\"use strict\";\nimport { Poly } from \"../../../../engine/Poly\";\nimport { CoreType } from \"../../../Type\";\nimport { NodeParamProxiesRegister } from \"../../NodeParamProxiesRegister\";\nimport { animBuilderCommonVars } from \"../Common\";\nimport { animBuilderStartTimeline } from \"../StartTimeline\";\nimport { AnimBuilderWithOp } from \"../WithOp\";\nexport function populateVarsForSingleNumber(param, targetValue, options) {\n  if (!CoreType.isNumber(targetValue)) {\n    Poly.warn(\n      `TimelineBuilderProperty error: cannot animate float/integer param '${param.path()}' with targetValue`,\n      targetValue\n    );\n    return;\n  }\n  const proxy = NodeParamProxiesRegister.paramProxy(param);\n  if (!proxy) {\n    return;\n  }\n  const keyframes = options.timelineBuilder.keyframes();\n  const interpolant = keyframes ? keyframes.createInterpolant() : void 0;\n  const vars = animBuilderCommonVars(options.timelineBuilder);\n  vars.onUpdate = () => {\n    proxy.update(interpolant);\n  };\n  if (keyframes) {\n    targetValue = 1;\n  }\n  const operation = options.timelineBuilder.operation();\n  vars.proxyValue = AnimBuilderWithOp(param.value, targetValue, operation);\n  animBuilderStartTimeline({ ...options, vars, target: proxy, registerableProp: param });\n}\nexport function populateVarsForNumber(options) {\n  const { vars, targetValue, targetProperty, propertyNames, operation } = options;\n  for (const property_name of propertyNames) {\n    vars[property_name] = AnimBuilderWithOp(targetProperty, targetValue, operation);\n  }\n}\n", "\"use strict\";\nimport { AnimBuilderWithOp } from \"../WithOp\";\nexport function populateVarsForVector(options) {\n  const { vars, targetValue, targetProperty, propertyNames, operation } = options;\n  for (const propertyName of propertyNames) {\n    vars[propertyName] = AnimBuilderWithOp(\n      targetProperty[propertyName],\n      targetValue[propertyName],\n      operation\n    );\n  }\n}\n", "\"use strict\";\nimport { Quaternion } from \"three\";\nexport function populateVarsAndCreateProxyForQuaternion(options) {\n  const { vars, targetValue, targetProperty } = options;\n  const proxy = { value: 0 };\n  const qTarget = targetProperty;\n  const qStart = new Quaternion().copy(targetProperty);\n  const qEnd = targetValue;\n  vars.onUpdate = () => {\n    qTarget.slerpQuaternions(qStart, qEnd, proxy.value);\n  };\n  vars.value = 1;\n  return proxy;\n}\n", "\"use strict\";\nimport { AnimBuilderWithOp } from \"../WithOp\";\nexport function populateVarsForEuler(options) {\n  const { vars, targetValue, targetProperty, propertyNames, operation } = options;\n  for (const propertyName of propertyNames) {\n    vars[propertyName] = AnimBuilderWithOp(\n      targetProperty[propertyName],\n      targetValue[propertyName],\n      operation\n    );\n  }\n}\n", "\"use strict\";\nimport { Vector2 } from \"three\";\nimport { Vector3 } from \"three\";\nimport { Vector4 } from \"three\";\nimport { Color } from \"three\";\nimport { Quaternion } from \"three\";\nimport { ParamType } from \"../../engine/poly/ParamType\";\nimport { Poly } from \"../../engine/Poly\";\nimport { CoreType } from \"../Type\";\nimport { animBuilderCommonVars } from \"./vars/Common\";\nimport { animBuilderStartTimeline } from \"./vars/StartTimeline\";\nimport { populateVarsForParamVector4 } from \"./vars/type/Vector4\";\nimport { populateVarsForColor, populateVarsForParamColor } from \"./vars/type/Color\";\nimport { populateVarsForParamVector3 } from \"./vars/type/Vector3\";\nimport { populateVarsForParamVector2 } from \"./vars/type/Vector2\";\nimport { populateVarsForNumber, populateVarsForSingleNumber } from \"./vars/type/Number\";\nimport { populateVarsForVector } from \"./vars/type/Vector\";\nimport { populateVarsAndCreateProxyForQuaternion } from \"./vars/type/Quaternion\";\nimport { populateVarsForEuler } from \"./vars/type/Euler\";\nconst PROPERTY_SEPARATOR = \".\";\nexport class TimelineBuilderProperty {\n  constructor() {\n    this._debug = false;\n  }\n  setName(name) {\n    this._propertyName = name;\n  }\n  setTargetValue(value) {\n    this._targetValue = value;\n  }\n  name() {\n    return this._propertyName;\n  }\n  targetValue() {\n    return this._targetValue;\n  }\n  setDebug(debug) {\n    this._debug = debug;\n  }\n  _printDebug(message) {\n    if (!this._debug) {\n      return;\n    }\n    console.log(message);\n  }\n  clone() {\n    const cloned = new TimelineBuilderProperty();\n    if (this._propertyName) {\n      cloned.setName(this._propertyName);\n    }\n    if (this._targetValue != null) {\n      const newTargetValue = CoreType.isNumber(this._targetValue) ? this._targetValue : this._targetValue.clone();\n      cloned.setTargetValue(newTargetValue);\n    }\n    return cloned;\n  }\n  addToTimeline(options) {\n    const target = options.propertyTarget || options.target;\n    const objects = target.objects();\n    const node = target.node();\n    this._printDebug([\"addToTimeline\", target, objects, node]);\n    if (objects) {\n      this._populateWithObjects(objects, options);\n    }\n    if (node) {\n      this._populateWithNode(node, options);\n    }\n  }\n  _populateWithObjects(objects, options) {\n    const { timelineBuilder } = options;\n    this._printDebug([\"_populateWithObjects\", objects]);\n    if (!this._propertyName) {\n      Poly.warn(\"no property name given\");\n      return;\n    }\n    if (this._targetValue == null) {\n      Poly.warn(\"no target value given\");\n      return;\n    }\n    const operation = timelineBuilder.operation();\n    const updateCallback = timelineBuilder.updateCallback();\n    for (const object3d of objects) {\n      const props = this._sceneGraphProps(object3d, this._propertyName);\n      if (props) {\n        const registerableProp = {\n          object: object3d,\n          propertyName: this._propertyName\n        };\n        let { targetProperty, toTarget, propertyNames } = props;\n        const vars = animBuilderCommonVars(timelineBuilder);\n        if (updateCallback && updateCallback.updateMatrix()) {\n          const oldMatrixAutoUpdate = object3d.matrixAutoUpdate;\n          vars.onUpdate = () => {\n            object3d.matrixAutoUpdate = true;\n          };\n          vars.onComplete = () => {\n            object3d.matrixAutoUpdate = oldMatrixAutoUpdate;\n            if (!object3d.matrixAutoUpdate) {\n              object3d.updateMatrix();\n            }\n          };\n        }\n        if (targetProperty instanceof Quaternion && this._targetValue instanceof Quaternion) {\n          toTarget = populateVarsAndCreateProxyForQuaternion({\n            targetValue: this._targetValue,\n            vars,\n            targetProperty\n          });\n        }\n        this._populateVarsForObjectProperty({\n          targetValue: this._targetValue,\n          vars,\n          targetProperty,\n          propertyNames,\n          operation\n        });\n        if (toTarget) {\n          animBuilderStartTimeline({ ...options, vars, target: toTarget, registerableProp });\n        }\n      }\n    }\n  }\n  _populateVarsForObjectProperty(options) {\n    const { vars, targetValue, targetProperty, propertyNames, operation } = options;\n    function warnMismatch(expectedType) {\n      Poly.warn(\n        `mismatch between targetValue and targetProperty (expected ${expectedType})`,\n        targetValue,\n        targetProperty\n      );\n    }\n    if (CoreType.isNumber(targetProperty)) {\n      if (CoreType.isNumber(targetValue)) {\n        return populateVarsForNumber({ targetValue, vars, targetProperty, propertyNames, operation });\n      }\n      return warnMismatch(\"number\");\n    }\n    if (CoreType.isEuler(targetProperty)) {\n      if (targetValue instanceof Vector3) {\n        return populateVarsForEuler({ targetValue, vars, targetProperty, propertyNames, operation });\n      }\n      return warnMismatch(\"euler\");\n    }\n    if (CoreType.isVector(targetProperty)) {\n      if (CoreType.isVector(targetValue)) {\n        return populateVarsForVector({ targetValue, vars, targetProperty, propertyNames, operation });\n      }\n      return warnMismatch(\"vector\");\n    }\n    if (CoreType.isColor(targetProperty)) {\n      if (CoreType.isColor(targetValue)) {\n        return populateVarsForColor({ targetValue, vars, targetProperty, propertyNames, operation });\n      }\n      return warnMismatch(\"color\");\n    }\n    if (CoreType.isQuaternion(targetProperty)) {\n    }\n    Poly.warn(`targetValue and targetProp are not recognized types`, targetValue, targetProperty);\n  }\n  _sceneGraphProps(object, propertyName) {\n    const elements = propertyName.split(PROPERTY_SEPARATOR);\n    if (elements.length > 1) {\n      const firstElement = elements.shift();\n      const subObject = object[firstElement];\n      if (subObject) {\n        const subPropertyName = elements.join(PROPERTY_SEPARATOR);\n        return this._sceneGraphProps(subObject, subPropertyName);\n      } else {\n        Poly.warn(`property ${firstElement} not found on object`, object);\n      }\n    } else {\n      const targetProperty = object[propertyName];\n      let toTarget = null;\n      const propertyNames = [];\n      if (CoreType.isNumber(targetProperty)) {\n        toTarget = object;\n        propertyNames.push(propertyName);\n      } else {\n        toTarget = targetProperty;\n        if (this._targetValue instanceof Vector2) {\n          propertyNames.push(\"x\", \"y\");\n        }\n        if (this._targetValue instanceof Vector3) {\n          propertyNames.push(\"x\", \"y\", \"z\");\n        }\n        if (this._targetValue instanceof Vector4) {\n          propertyNames.push(\"x\", \"y\", \"z\", \"w\");\n        }\n        if (this._targetValue instanceof Color) {\n          propertyNames.push(\"r\", \"g\", \"b\");\n        }\n        if (this._targetValue instanceof Quaternion) {\n        }\n      }\n      return {\n        targetProperty,\n        toTarget,\n        propertyNames\n      };\n    }\n  }\n  _populateWithNode(node, options) {\n    this._printDebug([\"_populateWithNode\", node]);\n    const targetParam = node.p[this._propertyName];\n    this._printDebug([\"targetParam\", targetParam]);\n    if (!targetParam) {\n      Poly.warn(`${this._propertyName} not found on node ${node.path()}`);\n      return;\n    }\n    if (targetParam) {\n      this._populateVarsForParam(targetParam, options);\n    }\n  }\n  _populateVarsForParam(param, options) {\n    this._printDebug([\"_populateVarsForParam\", param]);\n    if (this._targetValue == null) {\n      return;\n    }\n    switch (param.type()) {\n      case ParamType.INTEGER:\n      case ParamType.FLOAT: {\n        return populateVarsForSingleNumber(param, this._targetValue, options);\n      }\n      case ParamType.VECTOR2: {\n        return populateVarsForParamVector2(param, this._targetValue, options);\n      }\n      case ParamType.VECTOR3: {\n        return populateVarsForParamVector3(param, this._targetValue, options);\n      }\n      case ParamType.COLOR: {\n        return populateVarsForParamColor(param, this._targetValue, options);\n      }\n      case ParamType.VECTOR4: {\n        return populateVarsForParamVector4(param, this._targetValue, options);\n      }\n    }\n    Poly.warn(`param type cannot be animated (yet): '${param.type()}' '${param.path()}'`);\n  }\n}\n", "\"use strict\";\nexport const GSAP_FACTORY = {\n  gsap: void 0,\n  timeline: (vars) => {\n    return void 0;\n  }\n};\nfunction gsapTimeline(vars) {\n  return GSAP_FACTORY.timeline(vars);\n}\nfunction gsapLib() {\n  return GSAP_FACTORY.gsap;\n}\nexport { gsapTimeline, gsapLib };\n", "\"use strict\";\nimport { TimelineBuilderProperty } from \"./TimelineBuilderProperty\";\nimport { Operation } from \"./vars/AnimBuilderTypes\";\nimport { gsapTimeline } from \"../thirdParty/gsap/gsapFactory\";\nexport class TimelineBuilder {\n  constructor() {\n    this._timelineBuilders = [];\n    this._duration = 1;\n    this._operation = Operation.SET;\n    this._delay = 0;\n    this._stoppable = true;\n    this._debug = false;\n  }\n  setDebug(debug) {\n    this._debug = debug;\n  }\n  _printDebug(message) {\n    if (!this._debug) {\n      return;\n    }\n    console.log(message);\n  }\n  addTimelineBuilder(timeline_builder) {\n    this._timelineBuilders.push(timeline_builder);\n    timeline_builder.setParent(this);\n  }\n  timelineBuilders() {\n    return this._timelineBuilders;\n  }\n  setParent(parent) {\n    this._parent = parent;\n  }\n  parent() {\n    return this._parent;\n  }\n  setTarget(target) {\n    this._target = target;\n    for (const builder of this._timelineBuilders) {\n      builder.setTarget(target);\n    }\n  }\n  target() {\n    return this._target;\n  }\n  setDuration(duration) {\n    if (duration >= 0) {\n      this._duration = duration;\n      for (const builder of this._timelineBuilders) {\n        builder.setDuration(duration);\n      }\n    }\n  }\n  duration() {\n    return this._duration;\n  }\n  setKeyframes(keyframes) {\n    this._keyframes = keyframes;\n  }\n  keyframes() {\n    return this._keyframes;\n  }\n  setEasing(easing) {\n    this._easing = easing;\n    for (const builder of this._timelineBuilders) {\n      builder.setEasing(easing);\n    }\n  }\n  easing() {\n    return this._easing;\n  }\n  setOperation(operation) {\n    this._operation = operation;\n    for (const builder of this._timelineBuilders) {\n      builder.setOperation(operation);\n    }\n  }\n  operation() {\n    return this._operation;\n  }\n  setRepeatParams(repeat_params) {\n    this._repeatParams = repeat_params;\n    for (const builder of this._timelineBuilders) {\n      builder.setRepeatParams(repeat_params);\n    }\n  }\n  repeatParams() {\n    return this._repeatParams;\n  }\n  setDelay(delay) {\n    this._delay = delay;\n    for (const builder of this._timelineBuilders) {\n      builder.setDelay(delay);\n    }\n  }\n  delay() {\n    return this._delay;\n  }\n  setPosition(position) {\n    this._position = position;\n  }\n  position() {\n    return this._position;\n  }\n  setStoppable(state) {\n    this._stoppable = state;\n  }\n  stoppable() {\n    return this._stoppable;\n  }\n  setUpdateCallback(update_callback) {\n    this._updateCallback = update_callback;\n  }\n  updateCallback() {\n    return this._updateCallback;\n  }\n  // merge(timeline_builder?: TimelineBuilder) {\n  // \tif (!timeline_builder) {\n  // \t\treturn;\n  // \t}\n  // }\n  clone() {\n    const newTimelineBuilder = new TimelineBuilder();\n    newTimelineBuilder.setDuration(this._duration);\n    newTimelineBuilder.setOperation(this._operation);\n    newTimelineBuilder.setDelay(this._delay);\n    if (this._target) {\n      newTimelineBuilder.setTarget(this._target.clone());\n    }\n    if (this._easing) {\n      newTimelineBuilder.setEasing(this._easing);\n    }\n    if (this._keyframes) {\n      newTimelineBuilder.setKeyframes(this._keyframes);\n    }\n    if (this._delay) {\n      newTimelineBuilder.setDelay(this._delay);\n    }\n    if (this._updateCallback) {\n      newTimelineBuilder.setUpdateCallback(this._updateCallback.clone());\n    }\n    if (this._repeatParams) {\n      newTimelineBuilder.setRepeatParams({\n        count: this._repeatParams.count,\n        delay: this._repeatParams.delay,\n        yoyo: this._repeatParams.yoyo\n      });\n    }\n    if (this._property) {\n      const name = this._property.name();\n      if (name) {\n        newTimelineBuilder.setPropertyName(name);\n      }\n      const targetValue = this._property.targetValue();\n      if (targetValue != null) {\n        newTimelineBuilder.setPropertyValue(targetValue);\n      }\n    }\n    if (this._position) {\n      newTimelineBuilder.setPosition(this._position.clone());\n    }\n    newTimelineBuilder.setStoppable(this._stoppable);\n    for (const childTimelineBuilder of this._timelineBuilders) {\n      const newChildTimelineBuilder = childTimelineBuilder.clone();\n      newTimelineBuilder.addTimelineBuilder(newChildTimelineBuilder);\n    }\n    return newTimelineBuilder;\n  }\n  setPropertyName(name) {\n    this.property().setName(name);\n  }\n  property() {\n    return this._property = this._property || new TimelineBuilderProperty();\n  }\n  propertyName() {\n    return this.property().name();\n  }\n  setPropertyValue(value) {\n    this.property().setTargetValue(value);\n  }\n  propertyValue() {\n    var _a;\n    return (_a = this._property) == null ? void 0 : _a.targetValue();\n  }\n  populate(timeline, options) {\n    var _a;\n    this._printDebug([\"populate\", this, timeline, this._timelineBuilders]);\n    for (const timelineBuilder of this._timelineBuilders) {\n      const subTimeline = gsapTimeline();\n      if (!subTimeline) {\n        continue;\n      }\n      timelineBuilder.setDebug(this._debug);\n      timelineBuilder.populate(subTimeline, options);\n      const position_param = ((_a = timelineBuilder.position()) == null ? void 0 : _a.toParameter()) || void 0;\n      timeline.add(subTimeline, position_param);\n    }\n    if (this._property && this._target) {\n      this._property.setDebug(this._debug);\n      this._property.addToTimeline({ timelineBuilder: this, timeline, target: this._target, ...options });\n    }\n  }\n}\n", "\"use strict\";\nexport class AudioBuilder {\n  setAudioNode(inputNode) {\n    this._audioNode = inputNode;\n  }\n  audioNode() {\n    return this._audioNode;\n  }\n  setSource(source) {\n    this._source = source;\n    if (!this._audioNode) {\n      this.setAudioNode(source);\n    }\n  }\n  source() {\n    return this._source;\n  }\n  setInstrument(instrument) {\n    this._instrument = instrument;\n    if (!this._audioNode) {\n      this.setAudioNode(instrument);\n    }\n  }\n  instrument() {\n    return this._instrument;\n  }\n  setOscillatorParams(params) {\n    this._oscillatorParams = params;\n  }\n  oscillatorParams() {\n    return this._oscillatorParams;\n  }\n  setEnvelopeParams(params) {\n    this._envelopeParams = params;\n  }\n  envelopeParams() {\n    return this._envelopeParams;\n  }\n  clone() {\n    const newAudioBuilder = new AudioBuilder();\n    newAudioBuilder.setAudioNode(this._audioNode);\n    newAudioBuilder.setSource(this._source);\n    newAudioBuilder.setInstrument(this._instrument);\n    newAudioBuilder.setEnvelopeParams(this._envelopeParams);\n    return newAudioBuilder;\n  }\n}\n", "\"use strict\";\nimport { CoreGroup } from \"../../../core/geometry/Group\";\nimport { Material, Texture, Object3D } from \"three\";\nimport { TimelineBuilder } from \"../../../core/animation/TimelineBuilder\";\nimport { AudioBuilder } from \"../../../core/audio/AudioBuilder\";\nimport { NodeContext } from \"../../poly/NodeContext\";\nexport const ContainableClassMap = {\n  [NodeContext.ANIM]: TimelineBuilder,\n  [NodeContext.AUDIO]: AudioBuilder,\n  [NodeContext.COP]: Texture,\n  [NodeContext.EVENT]: String,\n  [NodeContext.GL]: String,\n  [NodeContext.JS]: String,\n  [NodeContext.MANAGER]: Boolean,\n  [NodeContext.MAT]: Material,\n  [NodeContext.OBJ]: Object3D,\n  [NodeContext.ROP]: String,\n  [NodeContext.POST]: Number,\n  [NodeContext.SOP]: CoreGroup\n  // JS: JsContainer;\n};\n", "\"use strict\";\nexport class TypedContainer {\n  constructor(_node) {\n    this._node = _node;\n  }\n  set_node(node) {\n    this._node = node;\n  }\n  node() {\n    return this._node;\n  }\n  // clone() {\n  // \tlet content;\n  // \tconst cloned_container = new (<any>this.constructor)() as TypedContainer<T>;\n  // \tcloned_container.set_node(this.node());\n  // \tif ((content = this.content()) != null) {\n  // \t\tcloned_container.set_content(content); //, this.eval_key() );\n  // \t}\n  // \treturn cloned_container;\n  // }\n  // reset_caches() {}\n  set_content(content) {\n    this._content = content;\n    this._post_set_content();\n  }\n  has_content() {\n    return this._content != null;\n  }\n  content() {\n    return this._content;\n  }\n  _post_set_content() {\n  }\n  coreContent() {\n    return this._content;\n  }\n  coreContentCloned() {\n    return this._content;\n  }\n  // abstract clone_content(): T\n  // update_eval_key(eval_key?: number){\n  // \tthis._eval_key = eval_key || performance.now();\n  // }\n  // eval_key(): number {\n  // \treturn this._eval_key;\n  // }\n  infos() {\n    return [];\n  }\n}\nexport class BaseContainer extends TypedContainer {\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class AnimationContainer extends TypedContainer {\n  set_content(content) {\n    super.set_content(content);\n  }\n  setTimelineBuilder(timeline_builder) {\n    return this.set_content(timeline_builder);\n  }\n  timelineBuilder() {\n    return this.content();\n  }\n  coreContentCloned() {\n    if (this._content) {\n      return this._content.clone();\n    }\n  }\n  // infos() {\n  // \tconst node = this.node()\n  // \treturn [\n  // \t\t`full path: ${node.path()}`,\n  // \t\t`${node.cooks_count()} cooks`,\n  // \t\t`cook time: ${node.cook_time()}`,\n  // \t\tthis.content(),\n  // \t]\n  // }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class AudioContainer extends TypedContainer {\n  setContent(content) {\n    super.set_content(content);\n  }\n  setAudioBuilder(audioBuilder) {\n    return this.set_content(audioBuilder);\n  }\n  audioBuilder() {\n    return this.content();\n  }\n  coreContentCloned() {\n    if (this._content) {\n      return this._content.clone();\n    }\n  }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class EventContainer extends TypedContainer {\n  set_content(content) {\n    super.set_content(content);\n  }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class GeometryContainer extends TypedContainer {\n  coreContentCloned() {\n    if (this._content) {\n      return this._content.clone();\n    }\n  }\n  set_content(content) {\n    super.set_content(content);\n  }\n  // pointsCount(): number {\n  // \tif (this._content) {\n  // \t\treturn this._content.pointsCount();\n  // \t} else {\n  // \t\treturn 0;\n  // \t}\n  // }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class GlContainer extends TypedContainer {\n  object() {\n    return this._content;\n  }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class JsContainer extends TypedContainer {\n  object() {\n    return this._content;\n  }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class ManagerContainer extends TypedContainer {\n  set_content(content) {\n    super.set_content(content);\n  }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nimport { CoreMaterial } from \"../../core/geometry/Material\";\nexport class MaterialContainer extends TypedContainer {\n  set_content(content) {\n    super.set_content(content);\n  }\n  coreContentCloned() {\n    if (this._content) {\n      const cloned = CoreMaterial.clone(this._node.scene(), this._content, {\n        shareCustomUniforms: true,\n        addCustomMaterials: true\n      });\n      return cloned;\n    }\n  }\n  set_material(material) {\n    if (this._content != null) {\n      this._content.dispose();\n    }\n    this.set_content(material);\n  }\n  has_material() {\n    return this.has_content();\n  }\n  material() {\n    return this.content();\n  }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class ObjectContainer extends TypedContainer {\n  set_content(content) {\n    super.set_content(content);\n  }\n  set_object(object) {\n    return this.set_content(object);\n  }\n  has_object() {\n    return this.has_content();\n  }\n  object() {\n    return this.content();\n  }\n  // infos() {\n  // \tconst node = this.node()\n  // \treturn [\n  // \t\t`full path: ${node.path()}`,\n  // \t\t`${node.cooks_count()} cooks`,\n  // \t\t`cook time: ${node.cook_time()}`,\n  // \t\tthis.content(),\n  // \t]\n  // }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nimport { CoreType } from \"../../core/Type\";\nexport class TextureContainer extends TypedContainer {\n  set_content(content) {\n    super.set_content(content);\n  }\n  texture() {\n    return this._content;\n  }\n  coreContent() {\n    return this._content;\n  }\n  coreContentCloned() {\n    var _a;\n    const texture = (_a = this._content) == null ? void 0 : _a.clone();\n    if (texture) {\n      texture.needsUpdate = true;\n    }\n    return texture;\n  }\n  object() {\n    return this.texture();\n  }\n  infos() {\n    if (this._content != null) {\n      return [this._content];\n    }\n  }\n  resolution() {\n    function _resolutionFromHTMLVideoElement(video) {\n      return [video.videoWidth, video.videoHeight];\n    }\n    if (this._content) {\n      const image = this._content.image;\n      if (image) {\n        if (image instanceof HTMLImageElement || image instanceof Image || image instanceof ImageData || image instanceof HTMLCanvasElement) {\n          return [image.width, image.height];\n        }\n        if (image instanceof HTMLVideoElement) {\n          return _resolutionFromHTMLVideoElement(image);\n        }\n        if (CoreType.isNumber(image.width) && CoreType.isNumber(image.height)) {\n          return [image.width, image.height];\n        }\n      }\n      const source = this._content.source;\n      if (source) {\n        if (source instanceof HTMLVideoElement) {\n          return _resolutionFromHTMLVideoElement(source);\n        }\n        const data = source.data;\n        if (data && CoreType.isNumber(data.width) && CoreType.isNumber(data.height)) {\n          return [data.width, data.height];\n        }\n      }\n    }\n    return [-1, -1];\n  }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class PostProcessContainer extends TypedContainer {\n  // _content: any;\n  // constructor() {\n  // \tsuper();\n  // }\n  set_content(content) {\n    super.set_content(content);\n  }\n  render_pass() {\n    return this._content;\n  }\n  object(options = {}) {\n    return this.render_pass();\n  }\n  // infos() {\n  // \tif (this._content) {\n  // \t\treturn [this._content];\n  // \t}\n  // }\n}\n", "\"use strict\";\nimport { TypedContainer } from \"./_Base\";\nexport class RopContainer extends TypedContainer {\n  set_content(content) {\n    super.set_content(content);\n  }\n  renderer() {\n    return this._content;\n  }\n}\n", "\"use strict\";\nimport { NodeContext } from \"../../poly/NodeContext\";\nimport { AnimationContainer } from \"../Animation\";\nimport { AudioContainer } from \"../Audio\";\nimport { EventContainer } from \"../Event\";\nimport { GeometryContainer } from \"../Geometry\";\nimport { GlContainer } from \"../Gl\";\nimport { JsContainer } from \"../Js\";\nimport { ManagerContainer } from \"../Manager\";\nimport { MaterialContainer } from \"../Material\";\nimport { ObjectContainer } from \"../Object\";\nimport { TextureContainer } from \"../Texture\";\nimport { PostProcessContainer } from \"../PostProcess\";\nimport { RopContainer } from \"../Rop\";\nexport const ContainerClassMap = {\n  [NodeContext.ANIM]: AnimationContainer,\n  [NodeContext.AUDIO]: AudioContainer,\n  [NodeContext.COP]: TextureContainer,\n  [NodeContext.EVENT]: EventContainer,\n  [NodeContext.GL]: GlContainer,\n  [NodeContext.JS]: JsContainer,\n  [NodeContext.MANAGER]: ManagerContainer,\n  [NodeContext.MAT]: MaterialContainer,\n  [NodeContext.OBJ]: ObjectContainer,\n  [NodeContext.ROP]: RopContainer,\n  [NodeContext.POST]: PostProcessContainer,\n  [NodeContext.SOP]: GeometryContainer\n};\n", "\"use strict\";\nimport { ContainableClassMap } from \"./../../containers/utils/ContainableMap\";\nimport { ContainerClassMap } from \"../../containers/utils/ContainerMap\";\nexport class TypedContainerController {\n  constructor(node) {\n    this.node = node;\n    this._callbacks = [];\n    this._callbacksTmp = [];\n    this._container = this._createContainer();\n  }\n  container() {\n    return this._container;\n  }\n  _createContainer() {\n    const ContainerClass = ContainerClassMap[this.node.context()];\n    return new ContainerClass(this.node);\n  }\n  _createContainerWithContent() {\n    const container = this._createContainer();\n    const ContentClass = ContainableClassMap[this.node.context()];\n    const content = new ContentClass();\n    container.set_content(content);\n    return container;\n  }\n  firstNonBypassedNode() {\n    var _a, _b;\n    if ((_b = (_a = this.node.flags) == null ? void 0 : _a.bypass) == null ? void 0 : _b.active()) {\n      const inputNode = this.node.io.inputs.input(0);\n      return inputNode;\n    } else {\n      return this.node;\n    }\n  }\n  containerUnlessBypassed() {\n    var _a, _b;\n    if ((_b = (_a = this.node.flags) == null ? void 0 : _a.bypass) == null ? void 0 : _b.active()) {\n      this.node.states.error.clear();\n      const inputNode = this.node.io.inputs.input(0);\n      if (inputNode) {\n        return inputNode.containerController.containerUnlessBypassed();\n      } else {\n        return this._createContainerWithContent();\n      }\n    } else {\n      return this.container();\n    }\n  }\n  async compute() {\n    var _a, _b;\n    if (this.node.disposed()) {\n      console.warn(\".compute() requested from a disposed node\", this.node);\n    }\n    if ((_b = (_a = this.node.flags) == null ? void 0 : _a.bypass) == null ? void 0 : _b.active()) {\n      this.node.states.error.clear();\n      const inputNode = this.node.io.inputs.input(0);\n      if (inputNode) {\n        const container = await this.requestInputContainer(0) || this._container;\n        this.node.cookController.endCook();\n        return container;\n      } else {\n        return this._createContainerWithContent();\n      }\n    }\n    if (this.node.isDirty()) {\n      return new Promise((resolve, reject) => {\n        var _a2, _b2;\n        this._callbacks.push(resolve);\n        if ((_b2 = (_a2 = this.node.flags) == null ? void 0 : _a2.bypass) == null ? void 0 : _b2.active()) {\n          throw \"we should not be here\";\n        }\n        this.node.cookController.cookMain();\n      });\n    }\n    return this._container;\n  }\n  // async requestContainerTEST(): Promise<ContainerMap[NC]> {\n  // \tif (this.node.flags?.bypass?.active()) {\n  // \t\tconst container = await this.requestInputContainer(0);\n  // \t\treturn container || this._container;\n  // \t}\n  // \tif (this.node.isDirty()) {\n  // \t\tawait this.node.cookController.cook_main();\n  // \t}\n  // \treturn this._container;\n  // }\n  // TODO: should I merge this into the method above?\n  // private process_container_request() {\n  // \tif (this.node.flags?.bypass?.active()) {\n  // \t\tconst input_index = 0;\n  // \t\tthis.requestInputContainer(input_index).then((container) => {\n  // \t\t\tthis.node.removeDirtyState();\n  // \t\t\tif (container) {\n  // \t\t\t\tthis.notify_requesters(container);\n  // \t\t\t} else {\n  // \t\t\t\tthis.node.states.error.set('input invalid');\n  // \t\t\t}\n  // \t\t});\n  // \t} else {\n  // \t\tif (this.node.isDirty()) {\n  // \t\t\tthis.node.cookController.cook_main();\n  // \t\t} else {\n  // \t\t\tthis.notify_requesters();\n  // \t\t}\n  // \t}\n  // }\n  async requestInputContainer(inputIndex) {\n    const inputNode = this.node.io.inputs.input(inputIndex);\n    if (inputNode) {\n      return await inputNode.compute();\n    } else {\n      this.node.states.error.set(`input ${inputIndex} required`);\n      this.notifyRequesters();\n      return null;\n    }\n  }\n  notifyRequesters(container) {\n    this._callbacksTmp = this._callbacks.slice();\n    this._callbacks.splice(0, this._callbacks.length);\n    if (!container) {\n      container = this.node.containerController.container();\n    }\n    let callback;\n    while (callback = this._callbacksTmp.pop()) {\n      callback(container);\n    }\n    this.node.scene().cookController.removeNode(this.node);\n  }\n}\nexport class BaseContainerController extends TypedContainerController {\n}\n", "\"use strict\";\nimport { Poly } from \"../../../Poly\";\nconst performance = Poly.performance.performanceManager();\nexport class NodeCookPerformanceformanceController {\n  constructor(cookController) {\n    this.cookController = cookController;\n    this._inputsStart = 0;\n    this._inputsTime = 0;\n    this._paramsStart = 0;\n    this._paramsTime = 0;\n    this._cookStart = 0;\n    this._cookTime = 0;\n    this._cooksCount = 0;\n    this._data = {\n      inputsTime: 0,\n      paramsTime: 0,\n      cookTime: 0\n    };\n  }\n  cooksCount() {\n    return this._cooksCount;\n  }\n  data() {\n    this._data.inputsTime = this._inputsTime;\n    this._data.paramsTime = this._paramsTime;\n    this._data.cookTime = this._cookTime;\n    return this._data;\n  }\n  active() {\n    return this.cookController.performanceRecordStarted();\n  }\n  //\n  // INPUTS\n  //\n  recordInputsStart() {\n    if (this.active()) {\n      this._inputsStart = performance.now();\n    }\n  }\n  recordInputsEnd() {\n    if (this.active()) {\n      this._inputsTime = performance.now() - this._inputsStart;\n    }\n  }\n  //\n  // PARAMS\n  //\n  recordParamsStart() {\n    if (this.active()) {\n      this._paramsStart = performance.now();\n    }\n  }\n  recordParamsEnd() {\n    if (this.active()) {\n      this._paramsTime = performance.now() - this._paramsStart;\n    }\n  }\n  //\n  // COOK\n  //\n  recordCookStart() {\n    if (this.active()) {\n      this._cookStart = performance.now();\n    }\n  }\n  recordCookEnd() {\n    if (this.active()) {\n      this._cookTime = performance.now() - this._cookStart;\n      this._cooksCount += 1;\n    }\n  }\n}\n", "\"use strict\";\nimport { incrementRefSafely, ref } from \"../../core/reactivity/CoreReactivity\";\nconst refByNodePath = /* @__PURE__ */ new Map();\nexport function getOrCreateNodeRef(nodePath) {\n  return getNodeRef(nodePath) || createNodeRef(nodePath);\n}\nexport function getNodeRef(nodePath) {\n  return refByNodePath.get(nodePath);\n}\nexport function createNodeRef(nodePath) {\n  let refForNodePath = refByNodePath.get(nodePath);\n  if (!refForNodePath) {\n    refForNodePath = ref(0);\n    refByNodePath.set(nodePath, refForNodePath);\n  }\n  return refForNodePath;\n}\nexport function touchNodeRef(nodePath) {\n  const _ref = getNodeRef(nodePath);\n  if (!_ref) {\n    return;\n  }\n  incrementRefSafely(_ref);\n}\n", "\"use strict\";\nimport { Poly } from \"../../Poly\";\nimport { NodeCookPerformanceformanceController } from \"./cook/PerformanceController\";\nimport { touchNodeRef } from \"../../../core/reactivity/NodeReactivity\";\nvar ErrorType = /* @__PURE__ */ ((ErrorType2) => {\n  ErrorType2[\"FROM_INPUTS\"] = \"node inputs error\";\n  ErrorType2[\"INTERNAL\"] = \"node internal error\";\n  return ErrorType2;\n})(ErrorType || {});\nexport class NodeCookController {\n  constructor(node) {\n    this.node = node;\n    this._cooking = false;\n    this._performanceController = new NodeCookPerformanceformanceController(\n      this\n    );\n    this._inputContainers = [];\n    this._inputContents = [];\n    this._EMPTY_ARRAY = [];\n    // Disallowing inputs evaluation is important for switch nodes (such as SOP and COP)\n    // that should not evaluate all inputs, but only a single one, depending on a param value\n    // currently only for switch SOP and COP\n    this._inputsEvaluationRequired = true;\n    this._corePerformance = this.node.scene().performance;\n  }\n  performanceRecordStarted() {\n    return this._corePerformance.started();\n  }\n  dispose() {\n    this._clearHooks();\n  }\n  disallowInputsEvaluation() {\n    this._inputsEvaluationRequired = false;\n  }\n  isCooking() {\n    return this._cooking === true;\n  }\n  _startCookIfNoErrors(inputContents) {\n    if (this.node.states.error.active() || this.node.disposed() == true) {\n      this.endCook();\n    } else {\n      try {\n        this._performanceController.recordCookStart();\n        const promise = this.node.cook(inputContents);\n        if (promise != null) {\n          promise.catch((e) => {\n            this._onError(e, \"node internal error\" /* INTERNAL */, false);\n          });\n        }\n      } catch (e) {\n        this._onError(e, \"node internal error\" /* INTERNAL */);\n      }\n    }\n  }\n  async cookMain() {\n    if (this.isCooking()) {\n      return;\n    }\n    if (this.node.disposed() == true) {\n      return;\n    }\n    this._initCookingState();\n    this.node.states.error.clear();\n    this.node.scene().cookController.addNode(this.node);\n    try {\n      this._inputContents.length = 0;\n      if (this._inputsEvaluationRequired) {\n        await this._evaluateInputs(this._inputContents);\n      }\n      if (this.node.params.paramsEvalRequired()) {\n        await this._evaluateParams();\n      }\n      this._startCookIfNoErrors(this._inputContents);\n    } catch (e) {\n      this._onError(e, \"node inputs error\" /* FROM_INPUTS */);\n    }\n  }\n  _onError(e, errorType, alwaysSet = true) {\n    if (alwaysSet || !this.node.states.error.active()) {\n      const processedError = this.node.processError(e);\n      this.node.states.error.set(`${errorType}: '${processedError}'.`);\n      Poly.warn(e);\n    }\n    this.endCook();\n  }\n  async cookMainWithoutInputs() {\n    this.node.scene().cookController.addNode(this.node);\n    if (this.isCooking()) {\n      Poly.warn(\"cook_main_without_inputs already cooking\", this.node.path());\n      return;\n    }\n    this._initCookingState();\n    this.node.states.error.clear();\n    if (this.node.params.paramsEvalRequired()) {\n      await this._evaluateParams();\n    }\n    this._startCookIfNoErrors(this._EMPTY_ARRAY);\n  }\n  endCook() {\n    var _a, _b;\n    this._finalizeCookPerformance();\n    const dirtyTimestamp = this.node.dirtyController.dirtyTimestamp();\n    const timestampUnchangedSinceCookStarted = dirtyTimestamp == null || dirtyTimestamp === this._cookingDirtyTimestamp;\n    if (timestampUnchangedSinceCookStarted || ((_b = (_a = this.node.flags) == null ? void 0 : _a.bypass) == null ? void 0 : _b.active())) {\n      this.node.removeDirtyState();\n      this._terminateCookProcess();\n    } else {\n      if (this.node.disposed() == true) {\n        return;\n      }\n      Poly.log(\"COOK AGAIN\", dirtyTimestamp, this._cookingDirtyTimestamp, this.node.path());\n      this._cooking = false;\n      this.cookMain();\n    }\n  }\n  // private _lastFrameCooked: number | undefined;\n  // private _scenePlayingAndNodeAlreadyCookedForCurrentFrame() {\n  // \tif (this.node.scene().timeController.playing()) {\n  // \t\treturn this._lastFrameCooked == this.node.scene().frame();\n  // \t}\n  // \treturn false;\n  // }\n  _initCookingState() {\n    this._cooking = true;\n    this._cookingDirtyTimestamp = this.node.dirtyController.dirtyTimestamp();\n  }\n  _terminateCookProcess() {\n    var _a, _b;\n    if (this.isCooking() || ((_b = (_a = this.node.flags) == null ? void 0 : _a.bypass) == null ? void 0 : _b.active())) {\n      this._cooking = false;\n      this.node.containerController.notifyRequesters();\n      this._runOnCookCompleteHooks();\n      if (this.node.disposed() == true) {\n        return;\n      }\n      touchNodeRef(this.node.path());\n    }\n  }\n  async _evaluateInputs(inputContents) {\n    this._performanceController.recordInputsStart();\n    const ioOnputs = this.node.io.inputs;\n    this._inputContainers.length = 0;\n    if (this._inputsEvaluationRequired) {\n      if (ioOnputs.isGraphNodeDirty()) {\n        await ioOnputs.evalRequiredInputs(this._inputContainers);\n      } else {\n        ioOnputs.containersWithoutEvaluation(this._inputContainers);\n      }\n    }\n    const inputs = ioOnputs.inputs();\n    let inputContainer;\n    for (let i = 0; i < inputs.length; i++) {\n      inputContainer = this._inputContainers[i];\n      if (inputContainer) {\n        if (ioOnputs.cloneRequired(i)) {\n          inputContents[i] = inputContainer.coreContentCloned();\n        } else {\n          inputContents[i] = inputContainer.coreContent();\n        }\n      }\n    }\n    this._performanceController.recordInputsEnd();\n    return inputContents;\n  }\n  async _evaluateParams() {\n    this._performanceController.recordParamsStart();\n    await this.node.params.evalAll();\n    this._performanceController.recordParamsEnd();\n  }\n  //\n  //\n  // PERFORMANCE\n  //\n  //\n  cooksCount() {\n    return this._performanceController.cooksCount();\n  }\n  cookTime() {\n    return this._performanceController.data().cookTime;\n  }\n  _finalizeCookPerformance() {\n    if (!this._corePerformance.started()) {\n      return;\n    }\n    this._performanceController.recordCookEnd();\n    this._corePerformance.recordNodeCookData(this.node, this._performanceController.data());\n  }\n  registerOnCookEnd(callbackName, callback) {\n    this._onCookCompleteHookNames = this._onCookCompleteHookNames || [];\n    this._onCookCompleteHooks = this._onCookCompleteHooks || [];\n    this._onCookCompleteHookNames.push(callbackName);\n    this._onCookCompleteHooks.push(callback);\n  }\n  _clearHooks() {\n    if (!this._onCookCompleteHookNames || !this._onCookCompleteHooks) {\n      return;\n    }\n    for (const hookName of this._onCookCompleteHookNames) {\n      this.deregisterOnCookEnd(hookName);\n    }\n  }\n  deregisterOnCookEnd(callbackName) {\n    var _a;\n    if (!this._onCookCompleteHookNames || !this._onCookCompleteHooks) {\n      return;\n    }\n    const index = (_a = this._onCookCompleteHookNames) == null ? void 0 : _a.indexOf(callbackName);\n    this._onCookCompleteHookNames.splice(index, 1);\n    this._onCookCompleteHooks.splice(index, 1);\n    if (this._onCookCompleteHookNames.length == 0) {\n      this._onCookCompleteHookNames = void 0;\n    }\n    if (this._onCookCompleteHooks.length == 0) {\n      this._onCookCompleteHooks = void 0;\n    }\n  }\n  _runOnCookCompleteHooks() {\n    if (this._onCookCompleteHooks) {\n      const hooks = [...this._onCookCompleteHooks];\n      for (let hook of hooks) {\n        hook();\n      }\n    }\n  }\n  onCookEndCallbackNames() {\n    return this._onCookCompleteHookNames;\n  }\n}\n", "\"use strict\";\nimport { TypedNumericParam } from \"./_Numeric\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { CoreString } from \"../../core/String\";\nimport { CoreType } from \"../../core/Type\";\nexport class BooleanParam extends TypedNumericParam {\n  static type() {\n    return ParamType.BOOLEAN;\n  }\n  // TODO: be careful as this does not allow serialization of expressions as default value\n  defaultValueSerialized() {\n    if (CoreType.isString(this._default_value)) {\n      return this._default_value;\n    } else {\n      return this.convert(this._default_value) || false;\n    }\n  }\n  rawInputSerialized() {\n    return this._raw_input;\n  }\n  valueSerialized() {\n    return this.value;\n  }\n  _copyValue(param) {\n    this.set(param.value);\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return raw_input1 == raw_input2;\n  }\n  static areValuesEqual(val1, val2) {\n    return val1 == val2;\n  }\n  convert(raw_val) {\n    if (CoreType.isBoolean(raw_val)) {\n      return raw_val;\n    } else {\n      if (CoreType.isNumber(raw_val)) {\n        return raw_val >= 1;\n      } else {\n        if (CoreType.isString(raw_val)) {\n          if (CoreString.isBoolean(raw_val)) {\n            return CoreString.toBoolean(raw_val);\n          } else {\n            if (CoreString.isNumber(raw_val)) {\n              const parsed = parseFloat(raw_val);\n              return parsed >= 1;\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n}\n", "\"use strict\";\nimport { TypedParam } from \"./_Base\";\nimport { ParamType } from \"../poly/ParamType\";\nexport class ButtonParam extends TypedParam {\n  static type() {\n    return ParamType.BUTTON;\n  }\n  defaultValueSerialized() {\n    return this._default_value;\n  }\n  rawInputSerialized() {\n    return this._raw_input;\n  }\n  valueSerialized() {\n    return this.value;\n  }\n  _copyValue(param) {\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return true;\n  }\n  static areValuesEqual(val1, val2) {\n    return true;\n  }\n  async pressButton() {\n    if (this.node.isDirty() || this.node.cookController.isCooking()) {\n      await this.node.compute();\n    }\n    await this.options.executeCallback();\n  }\n}\n", "\"use strict\";\nimport { TypedMultipleParam } from \"./_Multiple\";\nimport { Color } from \"three\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { ColorConversion } from \"../../core/Color\";\nimport { TypeAssert } from \"../poly/Assert\";\nimport { CoreType } from \"../../core/Type\";\nconst COMPONENT_NAMES_COLOR = [\"r\", \"g\", \"b\"];\nconst tmp = [0, 0, 0];\nfunction colorEqualsStringNumber3(c, array) {\n  return c.r == array[0] && c.g == array[1] && c.b == array[2];\n}\nfunction stringNumber3Equals(array1, array2) {\n  return array1[0] == array2[0] && array1[1] == array2[1] && array1[2] == array2[2];\n}\nexport class ColorParam extends TypedMultipleParam {\n  constructor() {\n    super(...arguments);\n    this._value = new Color();\n    this._valuePreConversion = new Color();\n    this._valueSerializedDirty = false;\n    this._valueSerialized = [0, 0, 0];\n    this._valuePreConversionSerialized = [0, 0, 0];\n    this._copiedValue = [0, 0, 0];\n  }\n  static type() {\n    return ParamType.COLOR;\n  }\n  componentNames() {\n    return COMPONENT_NAMES_COLOR;\n  }\n  defaultValueSerialized() {\n    if (CoreType.isArray(this._default_value)) {\n      return this._default_value;\n    } else {\n      return this._default_value.toArray();\n    }\n  }\n  _prefilterInvalidRawInput(rawInput) {\n    if (rawInput instanceof Color) {\n      rawInput.toArray(tmp);\n      return tmp;\n    }\n    return super._prefilterInvalidRawInput(rawInput);\n  }\n  // rawInputSerialized() {\n  // \tif (this._raw_input instanceof Color) {\n  // \t\treturn this._raw_input.toArray() as Number3;\n  // \t} else {\n  // \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n  // \t\treturn new_array;\n  // \t}\n  // }\n  valueSerialized() {\n    this._updateValueSerializedIfRequired();\n    return this._valueSerialized;\n  }\n  valuePreConversionSerialized() {\n    this._updateValueSerializedIfRequired();\n    return this._valuePreConversionSerialized;\n  }\n  _copyValue(param) {\n    param.value.toArray(this._copiedValue);\n    this.set(this._copiedValue);\n  }\n  // protected _prefilterInvalidRawInput(\n  // \traw_input: ParamInitValuesTypeMap[ParamType.COLOR]\n  // ): ParamInitValuesTypeMap[ParamType.COLOR] {\n  // \treturn raw_input;\n  // }\n  _cloneRawInput(raw_input) {\n    if (raw_input instanceof Color) {\n      return raw_input.clone();\n    } else {\n      const new_array = [raw_input[0], raw_input[1], raw_input[2]];\n      if (new_array[0] == null) {\n        new_array[0] = new_array[0] || 0;\n      }\n      if (new_array[1] == null) {\n        new_array[1] = new_array[1] || new_array[0];\n      }\n      if (new_array[2] == null) {\n        new_array[2] = new_array[2] || new_array[1];\n      }\n      return new_array;\n    }\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    if (raw_input1 instanceof Color) {\n      if (raw_input2 instanceof Color) {\n        return raw_input1.equals(raw_input2);\n      } else {\n        return colorEqualsStringNumber3(raw_input1, raw_input2);\n      }\n    } else {\n      if (raw_input2 instanceof Color) {\n        return colorEqualsStringNumber3(raw_input2, raw_input1);\n      } else {\n        return stringNumber3Equals(raw_input1, raw_input2);\n      }\n    }\n  }\n  static areValuesEqual(val1, val2) {\n    return val1.equals(val2);\n  }\n  initComponents() {\n    super.initComponents();\n    this.r = this.components[0];\n    this.g = this.components[1];\n    this.b = this.components[2];\n    this._valueSerializedDirty = true;\n  }\n  postOptionsInitialize() {\n    this.setValueFromComponents();\n  }\n  _updateValueSerializedIfRequired() {\n    if (!this._valueSerializedDirty) {\n      return;\n    }\n    this._valueSerialized[0] = this._value.r;\n    this._valueSerialized[1] = this._value.g;\n    this._valueSerialized[2] = this._value.b;\n    this._valuePreConversionSerialized[0] = this._valuePreConversion.r;\n    this._valuePreConversionSerialized[1] = this._valuePreConversion.g;\n    this._valuePreConversionSerialized[2] = this._valuePreConversion.b;\n  }\n  valuePreConversion() {\n    return this._valuePreConversion;\n  }\n  async setConversion(conversion) {\n    this.options.setOption(\"conversion\", conversion);\n    this.setDirty();\n    await this.options.executeCallback();\n  }\n  setValueFromComponents() {\n    this._valuePreConversion.r = this.r.value;\n    this._valuePreConversion.g = this.g.value;\n    this._valuePreConversion.b = this.b.value;\n    this._value.copy(this._valuePreConversion);\n    this._applyColorConversion();\n    this._valueSerializedDirty = true;\n  }\n  _applyColorConversion() {\n    const conversion = this.options.colorConversion();\n    switch (conversion) {\n      case ColorConversion.NONE: {\n        return;\n      }\n      case ColorConversion.SRGB_TO_LINEAR: {\n        this._value.convertSRGBToLinear();\n        return;\n      }\n      case ColorConversion.LINEAR_TO_SRGB: {\n        this._value.convertLinearToSRGB();\n        return;\n      }\n    }\n    TypeAssert.unreachable(conversion);\n  }\n}\n", "\"use strict\";\nimport { TypedParam } from \"./_Base\";\nimport { ParamType } from \"../poly/ParamType\";\nexport class FolderParam extends TypedParam {\n  static type() {\n    return ParamType.FOLDER;\n  }\n  defaultValueSerialized() {\n    return this._default_value;\n  }\n  rawInputSerialized() {\n    return this._raw_input;\n  }\n  valueSerialized() {\n    return this.value;\n  }\n  _copyValue(param) {\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return true;\n  }\n  static areValuesEqual(val1, val2) {\n    return true;\n  }\n}\n", "\"use strict\";\nimport { TypedNumericParam } from \"./_Numeric\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { CoreString } from \"../../core/String\";\nimport { CoreType } from \"../../core/Type\";\nexport class IntegerParam extends TypedNumericParam {\n  static type() {\n    return ParamType.INTEGER;\n  }\n  defaultValueSerialized() {\n    return this._default_value;\n  }\n  rawInputSerialized() {\n    return this._raw_input;\n  }\n  valueSerialized() {\n    return this.value;\n  }\n  _copyValue(param) {\n    this.set(param.valueSerialized());\n  }\n  _prefilterInvalidRawInput(raw_input) {\n    if (CoreType.isArray(raw_input)) {\n      return raw_input[0];\n    }\n    if (CoreType.isString(raw_input) && CoreString.isNumber(raw_input)) {\n      const num = parseInt(raw_input);\n      if (num != null) {\n        const converted = this.convert(num);\n        if (converted != null) {\n          return converted;\n        }\n      }\n    }\n    if (CoreType.isNumber(raw_input)) {\n      const converted = this.convert(raw_input);\n      if (converted != null) {\n        return converted;\n      }\n    }\n    return raw_input;\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    return raw_input1 == raw_input2;\n  }\n  static areValuesEqual(val1, val2) {\n    return val1 == val2;\n  }\n  static convert(raw_val) {\n    if (CoreType.isNumber(raw_val)) {\n      return Math.round(raw_val);\n    } else {\n      if (CoreType.isBoolean(raw_val)) {\n        return raw_val ? 1 : 0;\n      } else {\n        if (CoreString.isNumber(raw_val)) {\n          const parsed = parseInt(raw_val);\n          if (CoreType.isNumber(parsed)) {\n            return parsed;\n          }\n        }\n      }\n      return null;\n    }\n  }\n  convert(raw_val) {\n    const result = IntegerParam.convert(raw_val);\n    if (result != null) {\n      let validVal = this.options.ensureInRange(result);\n      validVal = this.options.ensureValueInMenuEntries(validVal);\n      return validVal;\n    } else {\n      return result;\n    }\n  }\n}\n", "\"use strict\";\nimport { TypedMultipleParam } from \"./_Multiple\";\nimport { Vector2 } from \"three\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { CoreType } from \"../../core/Type\";\nconst COMPONENT_NAMES_VECTOR2 = [\"x\", \"y\"];\nconst tmp = [0, 0];\nfunction vector2EqualsStringNumber2(v, array) {\n  return v.x == array[0] && v.y == array[1];\n}\nfunction stringNumber2Equals(array1, array2) {\n  return array1[0] == array2[0] && array1[1] == array2[1];\n}\nexport class Vector2Param extends TypedMultipleParam {\n  constructor() {\n    super(...arguments);\n    this._value = new Vector2();\n    this._copied_value = [0, 0];\n  }\n  static type() {\n    return ParamType.VECTOR2;\n  }\n  componentNames() {\n    return COMPONENT_NAMES_VECTOR2;\n  }\n  defaultValueSerialized() {\n    if (CoreType.isArray(this._default_value)) {\n      return this._default_value;\n    } else {\n      return this._default_value.toArray();\n    }\n  }\n  _prefilterInvalidRawInput(rawInput) {\n    if (rawInput instanceof Vector2) {\n      rawInput.toArray(tmp);\n      return tmp;\n    }\n    return super._prefilterInvalidRawInput(rawInput);\n  }\n  // get raw_input_serialized() {\n  // \tif (this._raw_input instanceof Vector2) {\n  // \t\treturn this._raw_input.toArray() as Number2;\n  // \t} else {\n  // \t\tconst new_array: StringOrNumber2 = [this._raw_input[0], this._raw_input[1]];\n  // \t\treturn new_array;\n  // \t}\n  // }\n  valueSerialized() {\n    return this.value.toArray();\n  }\n  _copyValue(param) {\n    param.value.toArray(this._copied_value);\n    this.set(this._copied_value);\n  }\n  _cloneRawInput(raw_input) {\n    if (raw_input instanceof Vector2) {\n      return raw_input.clone();\n    } else {\n      const new_array = [raw_input[0], raw_input[1]];\n      if (new_array[0] == null) {\n        new_array[0] = new_array[0] || 0;\n      }\n      if (new_array[1] == null) {\n        new_array[1] = new_array[1] || new_array[0];\n      }\n      return new_array;\n    }\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    if (raw_input1 instanceof Vector2) {\n      if (raw_input2 instanceof Vector2) {\n        return raw_input1.equals(raw_input2);\n      } else {\n        return vector2EqualsStringNumber2(raw_input1, raw_input2);\n      }\n    } else {\n      if (raw_input2 instanceof Vector2) {\n        return vector2EqualsStringNumber2(raw_input2, raw_input1);\n      } else {\n        return stringNumber2Equals(raw_input1, raw_input2);\n      }\n    }\n  }\n  static areValuesEqual(val1, val2) {\n    return val1.equals(val2);\n  }\n  initComponents() {\n    super.initComponents();\n    this.x = this.components[0];\n    this.y = this.components[1];\n  }\n  setValueFromComponents() {\n    this._value.x = this.x.value;\n    this._value.y = this.y.value;\n  }\n  // convert(input: any) {\n  // \tif (CoreType.isArray(input)) {\n  // \t\treturn new Vector2().fromArray(input);\n  // \t}\n  // \treturn new Vector2();\n  // }\n}\n", "\"use strict\";\nimport { TypedMultipleParam } from \"./_Multiple\";\nimport { Vector3 } from \"three\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { CoreType } from \"../../core/Type\";\nconst COMPONENT_NAMES_VECTOR3 = [\"x\", \"y\", \"z\"];\nconst tmp = [0, 0, 0];\nfunction vector3EqualsStringNumber3(v, array) {\n  return v.x == array[0] && v.y == array[1] && v.z == array[2];\n}\nfunction stringNumber3Equals(array1, array2) {\n  return array1[0] == array2[0] && array1[1] == array2[1] && array1[2] == array2[2];\n}\nexport class Vector3Param extends TypedMultipleParam {\n  constructor() {\n    super(...arguments);\n    this._value = new Vector3();\n    this._copied_value = [0, 0, 0];\n  }\n  static type() {\n    return ParamType.VECTOR3;\n  }\n  componentNames() {\n    return COMPONENT_NAMES_VECTOR3;\n  }\n  defaultValueSerialized() {\n    if (CoreType.isArray(this._default_value)) {\n      return this._default_value;\n    } else {\n      return this._default_value.toArray();\n    }\n  }\n  _prefilterInvalidRawInput(rawInput) {\n    if (rawInput instanceof Vector3) {\n      rawInput.toArray(tmp);\n      return tmp;\n    }\n    return super._prefilterInvalidRawInput(rawInput);\n  }\n  // get raw_input_serialized() {\n  // \tif (this._raw_input instanceof Vector3) {\n  // \t\treturn this._raw_input.toArray() as Number3;\n  // \t} else {\n  // \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n  // \t\treturn new_array;\n  // \t}\n  // }\n  valueSerialized() {\n    return this.value.toArray();\n  }\n  _copyValue(param) {\n    param.value.toArray(this._copied_value);\n    this.set(this._copied_value);\n  }\n  _cloneRawInput(raw_input) {\n    if (raw_input instanceof Vector3) {\n      return raw_input.clone();\n    } else {\n      const new_array = [raw_input[0], raw_input[1], raw_input[2]];\n      if (new_array[0] == null) {\n        new_array[0] = new_array[0] || 0;\n      }\n      if (new_array[1] == null) {\n        new_array[1] = new_array[1] || new_array[0];\n      }\n      if (new_array[2] == null) {\n        new_array[2] = new_array[2] || new_array[1];\n      }\n      return new_array;\n    }\n  }\n  static areRawInputEqual(raw_input1, raw_input2) {\n    if (raw_input1 instanceof Vector3) {\n      if (raw_input2 instanceof Vector3) {\n        return raw_input1.equals(raw_input2);\n      } else {\n        return vector3EqualsStringNumber3(raw_input1, raw_input2);\n      }\n    } else {\n      if (raw_input2 instanceof Vector3) {\n        return vector3EqualsStringNumber3(raw_input2, raw_input1);\n      } else {\n        return stringNumber3Equals(raw_input1, raw_input2);\n      }\n    }\n  }\n  static areValuesEqual(val1, val2) {\n    return val1.equals(val2);\n  }\n  initComponents() {\n    super.initComponents();\n    this.x = this.components[0];\n    this.y = this.components[1];\n    this.z = this.components[2];\n  }\n  // set_raw_input_from_components() {\n  // \tif (this._raw_input instanceof Vector3) {\n  // \t\tif (\n  // \t\t\tCoreType.isNumber(this.x.raw_input) &&\n  // \t\t\tCoreType.isNumber(this.y.raw_input) &&\n  // \t\t\tCoreType.isNumber(this.z.raw_input)\n  // \t\t) {\n  // \t\t\tthis._raw_input.x = this.x.raw_input;\n  // \t\t\tthis._raw_input.y = this.y.raw_input;\n  // \t\t\tthis._raw_input.z = this.z.raw_input;\n  // \t\t} else {\n  // \t\t\tthis._raw_input = [this.x.raw_input, this.y.raw_input, this.z.raw_input];\n  // \t\t}\n  // \t} else {\n  // \t\tthis._raw_input[0] = this.x.raw_input;\n  // \t\tthis._raw_input[1] = this.y.raw_input;\n  // \t\tthis._raw_input[2] = this.z.raw_input;\n  // \t}\n  // }\n  setValueFromComponents() {\n    this._value.x = this.x.value;\n    this._value.y = this.y.value;\n    this._value.z = this.z.value;\n  }\n  // convert(input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n  // \tif (CoreType.isArray(input)) {\n  // \t\treturn new Vector3().fromArray(input);\n  // \t}\n  // \treturn new Vector3();\n  // }\n}\n", "\"use strict\";\nimport { TypedMultipleParam } from \"./_Multiple\";\nimport { Vector4 } from \"three\";\nimport { ParamType } from \"../poly/ParamType\";\nimport { CoreType } from \"../../core/Type\";\nconst COMPONENT_NAMES_VECTOR4 = [\"x\", \"y\", \"z\", \"w\"];\nconst tmp = [0, 0, 0, 0];\nfunction vector2EqualsStringNumber4(v, array) {\n  return v.x == array[0] && v.y == array[1] && v.z == array[2] && v.w == array[3];\n}\nfunction stringNumber4Equals(array1, array2) {\n  return array1[0] == array2[0] && array1[1] == array2[1] && array1[2] == array2[2] && array1[3] == array2[3];\n}\nexport class Vector4Param extends TypedMultipleParam {\n  constructor() {\n    super(...arguments);\n    this._value = new Vector4();\n    this._copied_value = [0, 0, 0, 0];\n  }\n  static type() {\n    return ParamType.VECTOR4;\n  }\n  componentNames() {\n    return COMPONENT_NAMES_VECTOR4;\n  }\n  defaultValueSerialized() {\n    if (CoreType.isArray(this._default_value)) {\n      return this._default_value;\n    } else {\n      return this._default_value.toArray();\n    }\n  }\n  _prefilterInvalidRawInput(rawInput) {\n    if (rawInput instanceof Vector4) {\n      rawInput.toArray(tmp);\n      return tmp;\n    }\n    return super._prefilterInvalidRawInput(rawInput);\n  }\n  valueSerialized() {\n    return this.value.toArray();\n  }\n  _copyValue(param) {\n    param.value.toArray(this._copied_value);\n    this.set(this._copied_value);\n  }\n  _cloneRawInput(rawInput) {\n    if (rawInput instanceof Vector4) {\n      return rawInput.clone();\n    } else {\n      const newArray = [rawInput[0], rawInput[1], rawInput[2], rawInput[3]];\n      if (newArray[0] == null) {\n        newArray[0] = newArray[0] || 0;\n      }\n      if (newArray[1] == null) {\n        newArray[1] = newArray[1] || newArray[0];\n      }\n      if (newArray[2] == null) {\n        newArray[2] = newArray[2] || newArray[1];\n      }\n      if (newArray[3] == null) {\n        newArray[3] = newArray[3] || newArray[2];\n      }\n      return newArray;\n    }\n  }\n  static areRawInputEqual(rawInput1, rawInput2) {\n    if (rawInput1 instanceof Vector4) {\n      if (rawInput2 instanceof Vector4) {\n        return rawInput1.equals(rawInput2);\n      } else {\n        return vector2EqualsStringNumber4(rawInput1, rawInput2);\n      }\n    } else {\n      if (rawInput2 instanceof Vector4) {\n        return vector2EqualsStringNumber4(rawInput2, rawInput1);\n      } else {\n        return stringNumber4Equals(rawInput1, rawInput2);\n      }\n    }\n  }\n  static areValuesEqual(val1, val2) {\n    return val1.equals(val2);\n  }\n  initComponents() {\n    super.initComponents();\n    this.x = this.components[0];\n    this.y = this.components[1];\n    this.z = this.components[2];\n    this.w = this.components[3];\n  }\n  setValueFromComponents() {\n    this._value.x = this.x.value;\n    this._value.y = this.y.value;\n    this._value.z = this.z.value;\n    this._value.w = this.w.value;\n  }\n}\n", "\"use strict\";\nimport { BooleanParam } from \"../Boolean\";\nimport { ButtonParam } from \"../Button\";\nimport { ColorParam } from \"../Color\";\nimport { FloatParam } from \"../Float\";\nimport { FolderParam } from \"../Folder\";\nimport { IntegerParam } from \"../Integer\";\nimport { ParamPathParam } from \"../ParamPath\";\nimport { NodePathParam } from \"../NodePath\";\nimport { RampParam } from \"../Ramp\";\nimport { StringParam } from \"../String\";\nimport { Vector2Param } from \"../Vector2\";\nimport { Vector3Param } from \"../Vector3\";\nimport { Vector4Param } from \"../Vector4\";\nimport { ParamType } from \"../../poly/ParamType\";\nexport const ParamConstructorByType = {\n  [ParamType.BOOLEAN]: BooleanParam,\n  [ParamType.BUTTON]: ButtonParam,\n  [ParamType.COLOR]: ColorParam,\n  [ParamType.FLOAT]: FloatParam,\n  [ParamType.FOLDER]: FolderParam,\n  [ParamType.INTEGER]: IntegerParam,\n  // [ParamType.OPERATOR_PATH]: OperatorPathParam,\n  [ParamType.PARAM_PATH]: ParamPathParam,\n  [ParamType.NODE_PATH]: NodePathParam,\n  [ParamType.RAMP]: RampParam,\n  [ParamType.STRING]: StringParam,\n  [ParamType.VECTOR2]: Vector2Param,\n  [ParamType.VECTOR3]: Vector3Param,\n  [ParamType.VECTOR4]: Vector4Param\n};\n", "\"use strict\";\nimport { CoreGraphNode } from \"../../../../core/graph/CoreGraphNode\";\nimport { ParamType } from \"../../../poly/ParamType\";\nimport { ParamConstructorByType } from \"../../../params/types/ParamConstructorByType\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nimport { Poly } from \"../../../Poly\";\nimport { arrayCopy } from \"../../../../core/ArrayUtils\";\nconst NODE_SIMPLE_NAME = \"params\";\nconst _tmpAll = [];\nexport class ParamsController {\n  constructor(node) {\n    this.node = node;\n    this._param_create_mode = false;\n    this._params_created = false;\n    this._paramsByName = /* @__PURE__ */ new Map();\n    // caches\n    this._paramsList = [];\n    this._paramNames = [];\n    this._non_spare_params = [];\n    this._spare_params = [];\n    this._non_spare_param_names = [];\n    this._spare_param_names = [];\n    // private _params_eval_key: string;\n    this._params_added_since_last_params_eval = false;\n    this._promises = [];\n  }\n  dispose() {\n    if (this._params_node) {\n      this._params_node.dispose();\n    }\n    arrayCopy(this.all, _tmpAll);\n    for (const param of _tmpAll) {\n      param.dispose();\n    }\n    this._post_create_params_hook_names = void 0;\n    this._post_create_params_hooks = void 0;\n    this._on_scene_load_hooks = void 0;\n    this._on_scene_load_hook_names = void 0;\n  }\n  initDependencyNode() {\n    if (!this._params_node) {\n      this._params_node = new CoreGraphNode(this.node.scene(), NODE_SIMPLE_NAME);\n      this.node.addGraphInput(this._params_node, false);\n    }\n  }\n  init() {\n    this.initDependencyNode();\n    this._param_create_mode = true;\n    this._initFromParamsConfig();\n    this.node.createParams();\n    this._postCreateParams();\n  }\n  _postCreateParams() {\n    this._updateCaches();\n    this._initParamAccessors();\n    this._param_create_mode = false;\n    this._params_created = true;\n    this._runPostCreateParamsHooks();\n  }\n  postCreateSpareParams() {\n    this._updateCaches();\n    this._initParamAccessors();\n    this.node.scene().referencesController.notifyParamsUpdated(this.node);\n    this.node.emit(NodeEvent.PARAMS_UPDATED);\n  }\n  updateParams(options) {\n    let hasCreatedAParam = false;\n    let hasDeletedAParam = false;\n    const addedParams = [];\n    if (options.namesToDelete) {\n      for (const param_name of options.namesToDelete) {\n        if (this.has(param_name)) {\n          this._deleteParam(param_name);\n          hasDeletedAParam = true;\n        }\n      }\n    }\n    if (options.toAdd) {\n      for (const paramData of options.toAdd) {\n        const param = this.addParam(paramData.type, paramData.name, paramData.initValue, paramData.options);\n        if (param) {\n          if (paramData.rawInput != null) {\n            param.set(paramData.rawInput);\n          }\n          hasCreatedAParam = true;\n          addedParams.push(param);\n        }\n      }\n    }\n    if (hasDeletedAParam || hasCreatedAParam) {\n      this.postCreateSpareParams();\n    }\n    for (const param of addedParams) {\n      this.node.scene().missingExpressionReferencesController.checkForMissingParamReferences(param);\n    }\n  }\n  _initFromParamsConfig() {\n    var _a;\n    const paramsConfig = this.node.paramsConfig;\n    let init_values_used = false;\n    if (paramsConfig) {\n      const paramsInitValueOverrides = (_a = this.node.createOptions) == null ? void 0 : _a.paramsInitValueOverrides;\n      const names = Object.keys(paramsConfig);\n      for (const name of names) {\n        const config = paramsConfig[name];\n        let init_value;\n        if (paramsInitValueOverrides) {\n          init_value = paramsInitValueOverrides[name];\n          init_values_used = true;\n        }\n        this.addParam(config.type, name, config.init_value, config.options, init_value);\n      }\n    }\n    if (init_values_used) {\n      this.node.setDirty();\n    }\n    if (this.node.createOptions) {\n      this.node.createOptions.paramsInitValueOverrides = void 0;\n    }\n  }\n  _initParamAccessors() {\n    let currentNamesInAccessor = Object.getOwnPropertyNames(this.node.pv);\n    this._removeUnneededAccessors(currentNamesInAccessor);\n    currentNamesInAccessor = Object.getOwnPropertyNames(this.node.pv);\n    const all = this.all;\n    for (const param of all) {\n      const isSpare = param.options.isSpare();\n      const paramNotYetInAccessors = !currentNamesInAccessor.includes(param.name());\n      try {\n        if (paramNotYetInAccessors || isSpare) {\n          Object.defineProperty(this.node.pv, param.name(), {\n            get: () => {\n              return param.value;\n            },\n            // only spare parameters can be removed\n            configurable: isSpare\n          });\n          Object.defineProperty(this.node.p, param.name(), {\n            get: () => {\n              return param;\n            },\n            configurable: isSpare\n          });\n        }\n      } catch (err) {\n      }\n    }\n  }\n  _removeUnneededAccessors(current_names_in_accessor) {\n    const current_param_names = this._paramNames;\n    const names_to_remove = [];\n    for (const current_name_in_accessor of current_names_in_accessor) {\n      if (!current_param_names.includes(current_name_in_accessor)) {\n        names_to_remove.push(current_name_in_accessor);\n      }\n    }\n    for (const name_to_remove of names_to_remove) {\n      Object.defineProperty(this.node.pv, name_to_remove, {\n        get: () => {\n          return void 0;\n        },\n        configurable: true\n      });\n      Object.defineProperty(this.node.p, name_to_remove, {\n        get: () => {\n          return void 0;\n        },\n        configurable: true\n      });\n    }\n  }\n  get params_node() {\n    return this._params_node;\n  }\n  get all() {\n    return this._paramsList;\n  }\n  get non_spare() {\n    return this._non_spare_params;\n  }\n  get spare() {\n    return this._spare_params;\n  }\n  get names() {\n    return this._paramNames;\n  }\n  get non_spare_names() {\n    return this._non_spare_param_names;\n  }\n  get spare_names() {\n    return this._spare_param_names;\n  }\n  set_with_type(paramName, value, type) {\n    const param = this.paramWithType(paramName, type);\n    if (param) {\n      param.set(value);\n    } else {\n      Poly.warn(`param ${paramName} not found with type ${type}`);\n    }\n  }\n  set_float(paramName, value) {\n    this.set_with_type(paramName, value, ParamType.FLOAT);\n  }\n  set_vector3(paramName, value) {\n    this.set_with_type(paramName, value, ParamType.VECTOR3);\n  }\n  has_param(paramName) {\n    return this._paramsByName.has(paramName);\n  }\n  has(paramName) {\n    return this.has_param(paramName);\n  }\n  get(paramName) {\n    return this.param(paramName);\n  }\n  paramWithType(param_name, type) {\n    const param = this.param(param_name);\n    if (param && param.type() == type) {\n      return param;\n    }\n  }\n  getFloat(param_name) {\n    return this.paramWithType(param_name, ParamType.FLOAT);\n  }\n  // get_operator_path(param_name: string): OperatorPathParam {\n  // \treturn this.paramWithType(param_name, ParamType.OPERATOR_PATH) as OperatorPathParam;\n  // }\n  value(paramName) {\n    var _a;\n    return (_a = this.param(paramName)) == null ? void 0 : _a.value;\n  }\n  valueWithType(paramName, type) {\n    var _a;\n    return (_a = this.paramWithType(paramName, type)) == null ? void 0 : _a.value;\n  }\n  boolean(paramName) {\n    return this.valueWithType(paramName, ParamType.BOOLEAN);\n  }\n  float(paramName) {\n    return this.valueWithType(paramName, ParamType.FLOAT);\n  }\n  integer(paramName) {\n    return this.valueWithType(paramName, ParamType.INTEGER);\n  }\n  string(paramName) {\n    return this.valueWithType(paramName, ParamType.STRING);\n  }\n  vector2(paramName) {\n    return this.valueWithType(paramName, ParamType.VECTOR2);\n  }\n  vector3(paramName) {\n    return this.valueWithType(paramName, ParamType.VECTOR3);\n  }\n  color(paramName) {\n    return this.valueWithType(paramName, ParamType.COLOR);\n  }\n  param(paramName) {\n    const p = this._paramsByName.get(paramName);\n    if (p != null) {\n      return p;\n    } else {\n      Poly.warn(\n        `tried to access param '${paramName}' in node ${this.node.path()}, but existing params are: ${this.names} on node ${this.node.path()}`\n      );\n      return null;\n    }\n  }\n  // param_cache_name(param_name: string) {\n  // \treturn `_param_${param_name}`;\n  // }\n  // delete_params(param_names: string[]) {\n  // \tfor (let param_name of param_names) {\n  // \t\tthis.delete_param(param_name);\n  // \t}\n  // }\n  // call update_params instead\n  _deleteParam(paramName) {\n    const param = this._paramsByName.get(paramName);\n    if (param) {\n      if (this._params_node) {\n        this._params_node.removeGraphInput(param);\n      }\n      param._setupNodeDependencies(null);\n      this._paramsByName.delete(paramName);\n      if (param.isMultiple() && param.components) {\n        for (const component of param.components) {\n          const childName = component.name();\n          this._paramsByName.delete(childName);\n        }\n      }\n      param.dispose();\n      param.scene().graphNodesController.notifyParamPathChanged(param);\n    } else {\n      throw new Error(`param '${paramName}' does not exist on node ${this.node.path()}`);\n    }\n  }\n  addParam(type, paramName, defaultValue, options = {}, initData) {\n    const isSpare = options[\"spare\"] || false;\n    if (this._param_create_mode === false && !isSpare) {\n      Poly.warn(\n        `node ${this.node.path()} (${this.node.type()}) param '${paramName}' cannot be created outside of createParams`\n      );\n    }\n    if (this.node.scene() == null) {\n      Poly.warn(`node ${this.node.path()} (${this.node.type()}) has no scene assigned`);\n    }\n    const constructor = ParamConstructorByType[type];\n    if (constructor != null) {\n      const existing_param = this._paramsByName.get(paramName);\n      if (existing_param) {\n        if (isSpare) {\n          if (existing_param.type() != type) {\n            this._deleteParam(existing_param.name());\n          }\n        } else {\n          Poly.warn(`a param named ${paramName} already exists`, this.node);\n        }\n      }\n      const param = new constructor(this.node.scene(), this.node, {\n        serializerClass: this.node.scene().paramSerializerClass()\n      });\n      param.options.set(options);\n      param.setName(paramName);\n      param.setInitValue(defaultValue);\n      param.initComponents();\n      if (initData == null) {\n        param.set(defaultValue);\n      } else {\n        if (param.options.isExpressionForEntities()) {\n          param.set(defaultValue);\n        }\n        if (initData.raw_input != null) {\n          param.set(initData.raw_input);\n        } else {\n          if (initData.simple_data != null) {\n            param.set(initData.simple_data);\n          } else {\n            if (initData.complex_data != null) {\n              const raw_input = initData.complex_data.raw_input;\n              if (raw_input) {\n                param.set(raw_input);\n              } else {\n                param.set(defaultValue);\n              }\n              const overriden_options = initData.complex_data.overriden_options;\n              if (overriden_options != null) {\n                const keys = Object.keys(overriden_options);\n                for (const key of keys) {\n                  param.options.setOption(key, overriden_options[key]);\n                }\n              }\n            }\n          }\n        }\n      }\n      param.postOptionsInitialize();\n      param._setupNodeDependencies(this.node);\n      this._paramsByName.set(param.name(), param);\n      if (param.isMultiple() && param.components) {\n        for (const component of param.components) {\n          this._paramsByName.set(component.name(), component);\n        }\n      }\n      this._params_added_since_last_params_eval = true;\n      param.scene().graphNodesController.notifyParamPathChanged(param);\n      return param;\n    }\n  }\n  _updateCaches() {\n    this._paramsList.splice(0, this._paramsList.length);\n    this._paramsByName.forEach((param) => {\n      this._paramsList.push(param);\n    });\n    this._paramNames = this._paramsList.map((param) => param.name());\n    this._non_spare_params = this._paramsList.filter((p) => !p.options.isSpare());\n    this._spare_params = this._paramsList.filter((p) => p.options.isSpare());\n    this._non_spare_param_names = this._non_spare_params.map((p) => p.name());\n    this._spare_param_names = this._spare_params.map((p) => p.name());\n  }\n  async _evalParam(param) {\n    if (param.isDirty()) {\n      await param.compute();\n      if (param.states.error.active() && param.disposed() == false) {\n        this.node.states.error.set(`param '${param.name()}' error: ${param.states.error.message()}`);\n      }\n    }\n  }\n  async evalParams(params) {\n    let dirtyParamsCount = 0;\n    for (const param of params) {\n      if (param.isDirty()) {\n        dirtyParamsCount += 1;\n      }\n    }\n    this._promises.length = dirtyParamsCount;\n    let i = 0;\n    for (const param of params) {\n      if (param.isDirty()) {\n        this._promises[i] = this._evalParam(param);\n        i += 1;\n      }\n    }\n    await Promise.all(this._promises);\n    if (this.node.states.error.active()) {\n      this.node._setContainer(null);\n    }\n  }\n  paramsEvalRequired() {\n    return this._params_node != null && (this._params_node.isDirty() || this._params_added_since_last_params_eval);\n  }\n  async evalAll() {\n    var _a;\n    if (this.paramsEvalRequired()) {\n      await this.evalParams(this._paramsList);\n      (_a = this._params_node) == null ? void 0 : _a.removeDirtyState();\n      this._params_added_since_last_params_eval = false;\n    }\n  }\n  //\n  //\n  // HOOKS\n  //\n  //\n  onParamsCreated(hook_name, hook) {\n    if (this._params_created) {\n      hook();\n    } else {\n      if (this._post_create_params_hook_names && this._post_create_params_hook_names.includes(hook_name)) {\n        Poly.error(`hook name ${hook_name} already exists`);\n        return;\n      }\n      this._post_create_params_hook_names = this._post_create_params_hook_names || [];\n      this._post_create_params_hook_names.push(hook_name);\n      this._post_create_params_hooks = this._post_create_params_hooks || [];\n      this._post_create_params_hooks.push(hook);\n    }\n  }\n  addOnSceneLoadHook(param_name, method) {\n    this._on_scene_load_hook_names = this._on_scene_load_hook_names || [];\n    this._on_scene_load_hooks = this._on_scene_load_hooks || [];\n    if (!this._on_scene_load_hook_names.includes(param_name)) {\n      this._on_scene_load_hook_names.push(param_name);\n      this._on_scene_load_hooks.push(method);\n    } else {\n      Poly.warn(`hook with name ${param_name} already exists`, this.node);\n    }\n  }\n  _runPostCreateParamsHooks() {\n    if (this._post_create_params_hooks) {\n      for (const hook of this._post_create_params_hooks) {\n        hook();\n      }\n    }\n  }\n  runOnSceneLoadHooks() {\n    if (this._on_scene_load_hooks) {\n      for (const hook of this._on_scene_load_hooks) {\n        hook();\n      }\n    }\n  }\n}\n", "\"use strict\";\nexport class ParamsValueAccessor {\n  constructor() {\n  }\n}\n", "\"use strict\";\nimport { EventDispatcher } from \"three\";\nexport const NODE_CONNECTION_TRIGGERED_EVENT_NAME = \"triggered\";\nexport const NODE_CONNECTION_TRIGGERED_EVENT = { type: NODE_CONNECTION_TRIGGERED_EVENT_NAME };\nconst _TypedNodeConnection = class {\n  constructor(_nodeSrc, _nodeDest, _outputIndex = 0, _inputIndex = 0) {\n    this._nodeSrc = _nodeSrc;\n    this._nodeDest = _nodeDest;\n    this._outputIndex = _outputIndex;\n    this._inputIndex = _inputIndex;\n    if (this._outputIndex == null) {\n      throw \"bad output index\";\n    }\n    if (this._inputIndex == null) {\n      throw \"bad input index\";\n    }\n    this._id = _TypedNodeConnection._nextId++;\n    if (this._nodeSrc.io.connections && this._nodeDest.io.connections) {\n      this._nodeSrc.io.connections.addOutputConnection(this);\n      this._nodeDest.io.connections.addInputConnection(this);\n    }\n  }\n  id() {\n    return this._id;\n  }\n  nodeSrc() {\n    return this._nodeSrc;\n  }\n  nodeDest() {\n    return this._nodeDest;\n  }\n  outputIndex() {\n    return this._outputIndex;\n  }\n  inputIndex() {\n    return this._inputIndex;\n  }\n  srcConnectionPoint() {\n    const connectionPoints = this._nodeSrc.io.outputs.namedOutputConnectionPoints();\n    if (!connectionPoints) {\n      return;\n    }\n    return connectionPoints[this._outputIndex];\n  }\n  destConnectionPoint() {\n    const connectionPoints = this._nodeDest.io.inputs.namedInputConnectionPoints();\n    if (!connectionPoints) {\n      return;\n    }\n    return connectionPoints[this._inputIndex];\n  }\n  disconnect(options = {}) {\n    if (this._nodeSrc.io.connections && this._nodeDest.io.connections) {\n      this._nodeSrc.io.connections.removeOutputConnection(this);\n      this._nodeDest.io.connections.removeInputConnection(this);\n    }\n    if (options.setInput === true) {\n      this._nodeDest.io.inputs.setInput(this._inputIndex, null, void 0, {\n        ignoreLockedState: options.ignoreLockedState\n      });\n    }\n  }\n  _eventDispatcher() {\n    return this.__eventDispatcher;\n  }\n  eventDispatcher() {\n    return this.__eventDispatcher = this.__eventDispatcher || new EventDispatcher();\n  }\n};\nexport let TypedNodeConnection = _TypedNodeConnection;\nTypedNodeConnection._nextId = 0;\n", "\"use strict\";\nimport { InputCloneMode } from \"../../../../poly/InputCloneMode\";\nimport { TypeAssert } from \"../../../../poly/Assert\";\nimport { NodeEvent } from \"../../../../poly/NodeEvent\";\nimport { isArray } from \"../../../../../core/Type\";\nexport class ClonedStatesController {\n  constructor(inputsController) {\n    this.inputsController = inputsController;\n    this._cloneRequiredStates = [];\n    // private _cloneRequiredStatesMap: Map<number, boolean> = new Map();\n    this._overridden = false;\n    this.node = inputsController.node;\n  }\n  initInputsClonedState(states) {\n    if (isArray(states)) {\n      this._clonedStates = states;\n    } else {\n      this._clonedState = states;\n    }\n    this.updateCloneRequiredState();\n  }\n  overrideClonedStateAllowed() {\n    if (this._clonedStates) {\n      for (const state of this._clonedStates) {\n        if (state == InputCloneMode.FROM_NODE) {\n          return true;\n        }\n      }\n    }\n    if (this._clonedState) {\n      return this._clonedState == InputCloneMode.FROM_NODE;\n    }\n    return false;\n  }\n  // private get inputs_clonable_state(): InputCloneMode[] {\n  // \treturn (this._inputs_clonable_states = this._inputs_clonable_states || this.init_inputs_clonable_state());\n  // }\n  cloneRequiredState(index) {\n    const result = this._cloneRequiredStates[index];\n    return result;\n  }\n  cloneRequiredStates() {\n    return this._cloneRequiredStates;\n  }\n  // inputs_clonable_state_with_override(): boolean[] {\n  // \t// const list = [];\n  // \t// const states = this.inputs_clonable_state();\n  // \t// for (let i = 0; i < states.length; i++) {\n  // \t// \tlist.push(this.input_clonable_state_with_override(i));\n  // \t// }\n  // \t// return list;\n  // \treturn this._inputs_cloned_state;\n  // }\n  _getCloneRequiredState(index) {\n    const states = this._clonedStates;\n    if (states) {\n      const state = states[index];\n      if (state != null) {\n        return this._cloneRequiredFromState(state);\n      }\n    }\n    if (this._clonedState) {\n      return this._cloneRequiredFromState(this._clonedState);\n    }\n    return true;\n  }\n  _cloneRequiredFromState(state) {\n    switch (state) {\n      case InputCloneMode.ALWAYS:\n        return true;\n      case InputCloneMode.NEVER:\n        return false;\n      case InputCloneMode.FROM_NODE:\n        return !this._overridden;\n    }\n    return TypeAssert.unreachable(state);\n  }\n  // private _default_inputs_clonale_state_values() {\n  // \tconst list = [];\n  // \tfor (let i = 0; i < this.inputs_controller.max_inputs_count; i++) {\n  // \t\tlist.push(InputCloneMode.ALWAYS);\n  // \t}\n  // \treturn list;\n  // }\n  overrideClonedState(state) {\n    this._overridden = state;\n    this.updateCloneRequiredState();\n  }\n  overriden() {\n    return this._overridden;\n  }\n  updateCloneRequiredState() {\n    if (this._clonedStates) {\n      const states = [];\n      for (let i = 0; i < this._clonedStates.length; i++) {\n        states[i] = this._getCloneRequiredState(i);\n      }\n      this._cloneRequiredStates = states;\n    } else {\n      if (this._clonedState) {\n        const max_inputs = this.inputsController.maxInputsCount();\n        const states = [];\n        for (let i = 0; i < max_inputs; i++) {\n          states[i] = this._getCloneRequiredState(i);\n        }\n        this._cloneRequiredStates = states;\n      }\n    }\n    if (this.node.parent()) {\n      this.node.emit(NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE);\n      this.node.setDirty();\n    }\n  }\n}\n", "\"use strict\";\nimport { TypedNodeConnection } from \"./NodeConnection\";\nimport { CoreGraphNode } from \"../../../../core/graph/CoreGraphNode\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nimport { ClonedStatesController } from \"./utils/ClonedStatesController\";\nimport { CoreType } from \"../../../../core/Type\";\nimport { arrayShallowClone } from \"../../../../core/ArrayUtils\";\nconst _existingInputIndices = [];\nconst MAX_INPUTS_COUNT_UNSET = 0;\nexport class NodeInputsController {\n  // private _user_inputs_clonable_states: InputCloneMode[] | undefined;\n  // private _inputs_clonable_states: InputCloneMode[] | undefined;\n  // private _inputs_cloned_state: boolean[] = [];\n  // private _override_clonable_state: boolean = false;\n  constructor(node) {\n    this.node = node;\n    this._graphNodeInputs = [];\n    this._inputs = [];\n    this._has_named_inputs = false;\n    this._minInputsCount = 0;\n    this._maxInputsCount = MAX_INPUTS_COUNT_UNSET;\n    this._maxInputsCountOnInput = MAX_INPUTS_COUNT_UNSET;\n    this._depends_on_inputs = true;\n    this._singleInputIndexListenedTo = null;\n  }\n  // clonable\n  dispose() {\n    if (this._graphNode) {\n      this._graphNode.dispose();\n    }\n    for (const graph_node of this._graphNodeInputs) {\n      if (graph_node) {\n        graph_node.dispose();\n      }\n    }\n    this._on_update_hooks = void 0;\n    this._on_update_hook_names = void 0;\n  }\n  setDependsOnInputs(depends_on_inputs) {\n    this._depends_on_inputs = depends_on_inputs;\n  }\n  setMinCount(minInputsCount) {\n    this._minInputsCount = minInputsCount;\n  }\n  minCount() {\n    return this._minInputsCount;\n  }\n  setMaxCount(maxInputsCount) {\n    if (this._maxInputsCount == MAX_INPUTS_COUNT_UNSET) {\n      this._maxInputsCountOnInput = maxInputsCount;\n    }\n    this._maxInputsCount = maxInputsCount;\n    this._initGraphNodeInputs();\n    this._updateCloneRequiredState();\n  }\n  listenToSingleInputIndex(index) {\n    this._singleInputIndexListenedTo = index;\n  }\n  onEnsureListenToSingleInputIndexUpdated(callback) {\n    this._onEnsureListenToSingleInputIndexUpdatedCallback = callback;\n  }\n  namedInputConnectionPointsByName(name) {\n    if (this._named_input_connection_points) {\n      for (const connection_point of this._named_input_connection_points) {\n        if (connection_point && connection_point.name() == name) {\n          return connection_point;\n        }\n      }\n    }\n  }\n  setNamedInputConnectionPoints(newConnectionPoints) {\n    var _a;\n    this._has_named_inputs = true;\n    const connectionPointsToKeep = ((_a = this._named_input_connection_points) == null ? void 0 : _a.filter((cp) => cp == null ? void 0 : cp.inNodeDefinition())) || [];\n    const allNewConnectionPoints = arrayShallowClone(connectionPointsToKeep);\n    const currentNames = /* @__PURE__ */ new Set();\n    for (const connectionPointToKeep of connectionPointsToKeep) {\n      if (connectionPointToKeep) {\n        currentNames.add(connectionPointToKeep.name());\n      }\n    }\n    for (const newConnectionPoint of newConnectionPoints) {\n      if (newConnectionPoint) {\n        if (!currentNames.has(newConnectionPoint.name())) {\n          currentNames.add(newConnectionPoint.name());\n          allNewConnectionPoints.push(newConnectionPoint);\n        }\n      }\n    }\n    const connections = this.node.io.connections.inputConnections();\n    if (connections) {\n      for (const connection of connections) {\n        if (connection) {\n          if (connection.inputIndex() >= allNewConnectionPoints.length) {\n            connection.disconnect({ setInput: true, ignoreLockedState: true });\n          }\n        }\n      }\n    }\n    this._named_input_connection_points = allNewConnectionPoints;\n    this.setMinCount(0);\n    this.setMaxCount(this._named_input_connection_points.length);\n    this._initGraphNodeInputs();\n    this.node.emit(NodeEvent.NAMED_INPUTS_UPDATED);\n  }\n  // private _has_connected_inputs() {\n  // \tfor (let input of this._inputs) {\n  // \t\tif (input != null) {\n  // \t\t\treturn true;\n  // \t\t}\n  // \t}\n  // \treturn false;\n  // }\n  // private _check_name_changed(connection_points: ConnectionPointTypeMap[NC][]) {\n  // \tif (this._named_input_connection_points) {\n  // \t\tif (this._named_input_connection_points.length != connection_points.length) {\n  // \t\t\treturn true;\n  // \t\t} else {\n  // \t\t\tfor (let i = 0; i < this._named_input_connection_points.length; i++) {\n  // \t\t\t\tif (this._named_input_connection_points[i]?.name != connection_points[i]?.name) {\n  // \t\t\t\t\treturn true;\n  // \t\t\t\t}\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // \treturn false;\n  // }\n  hasNamedInputs() {\n    return this._has_named_inputs;\n  }\n  namedInputConnectionPoints() {\n    return this._named_input_connection_points;\n  }\n  _initGraphNodeInputs() {\n    for (let i = 0; i < this._maxInputsCount; i++) {\n      this._graphNodeInputs[i] = this._graphNodeInputs[i] || this._createGraphNodeInput(i);\n    }\n  }\n  _createGraphNodeInput(index) {\n    const graphInputNode = new CoreGraphNode(this.node.scene(), `input_${index}`);\n    this.graphNode().addGraphInput(graphInputNode, false);\n    return graphInputNode;\n  }\n  graphNode() {\n    return this._graphNode = this._graphNode || this._createGraphNode();\n  }\n  _createGraphNode() {\n    const graphNode = new CoreGraphNode(this.node.scene(), \"inputs\");\n    this.node.addGraphInput(graphNode, false);\n    return graphNode;\n  }\n  maxInputsCount() {\n    return this._maxInputsCount || 0;\n  }\n  maxInputsCountOverriden() {\n    return this._maxInputsCount != this._maxInputsCountOnInput;\n  }\n  inputGraphNode(input_index) {\n    return this._graphNodeInputs[input_index];\n  }\n  setCount(min, max) {\n    if (max == null) {\n      max = min;\n    }\n    this.setMinCount(min);\n    this.setMaxCount(max);\n    this._initConnectionControllerInputs();\n  }\n  _initConnectionControllerInputs() {\n    this.node.io.connections.initInputs();\n  }\n  isGraphNodeDirty() {\n    var _a;\n    return ((_a = this._graphNode) == null ? void 0 : _a.isDirty()) || false;\n  }\n  _isAnyInputDirty() {\n    for (const input of this._inputs) {\n      if (input && input.isDirty()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  containersWithoutEvaluation(target) {\n    target.length = 0;\n    for (let i = 0; i < this._inputs.length; i++) {\n      const inputNode = this._inputs[i];\n      let container = null;\n      if (inputNode) {\n        container = inputNode.containerController.containerUnlessBypassed();\n      }\n      target.push(container);\n    }\n    return target;\n  }\n  _existingInputIndices(target) {\n    target.length = 0;\n    if (this._maxInputsCount > 0) {\n      for (let i = 0; i < this._inputs.length; i++) {\n        if (this._inputs[i]) {\n          target.push(i);\n        }\n      }\n    }\n    return target;\n  }\n  async evalRequiredInputs(target) {\n    var _a;\n    target.length = 0;\n    if (this.node.disposed() == true) {\n      return target;\n    }\n    if (this._maxInputsCount > 0) {\n      this._existingInputIndices(_existingInputIndices);\n      if (_existingInputIndices.length < this._minInputsCount) {\n        this.node.states.error.set(\"inputs are missing\");\n      } else {\n        if (_existingInputIndices.length > 0) {\n          if (this._onEnsureListenToSingleInputIndexUpdatedCallback) {\n            await this._onEnsureListenToSingleInputIndexUpdatedCallback();\n          }\n          if (this._maxInputsCount == 1) {\n            const container = await this.evalRequiredInput(0);\n            target.push(container);\n          } else {\n            const promises = [];\n            if (this._singleInputIndexListenedTo != null) {\n              promises.push(\n                this.evalRequiredInput(this._singleInputIndexListenedTo)\n              );\n            } else {\n              const lastExistingInputIndex = _existingInputIndices[_existingInputIndices.length - 1];\n              for (let i = 0; i < this._inputs.length; i++) {\n                const input = this._inputs[i];\n                if (input) {\n                  promises.push(this.evalRequiredInput(i));\n                } else {\n                  if (i <= lastExistingInputIndex) {\n                    promises.push(void 0);\n                  }\n                }\n              }\n            }\n            const results = await Promise.all(promises);\n            for (const result of results) {\n              target.push(result);\n            }\n          }\n          if (!this._isAnyInputDirty()) {\n            (_a = this._graphNode) == null ? void 0 : _a.removeDirtyState();\n          }\n        }\n      }\n    }\n    return target;\n  }\n  async evalRequiredInput(inputIndex) {\n    let container = void 0;\n    const inputNode = this.input(inputIndex);\n    if (inputNode) {\n      container = await inputNode.compute();\n      this._graphNodeInputs[inputIndex].removeDirtyState();\n    }\n    if (container && container.coreContent()) {\n    } else {\n      if (inputNode) {\n        const inputErrorMessage = inputNode.states.error.message();\n        if (inputErrorMessage && this.node.disposed() == false) {\n          this.node.states.error.set(`input ${inputIndex} is invalid (error: ${inputErrorMessage})`);\n        }\n      }\n    }\n    return container;\n  }\n  getNamedInputIndex(name) {\n    var _a;\n    if (this._named_input_connection_points) {\n      for (let i = 0; i < this._named_input_connection_points.length; i++) {\n        if (((_a = this._named_input_connection_points[i]) == null ? void 0 : _a.name()) == name) {\n          return i;\n        }\n      }\n    }\n    return -1;\n  }\n  getInputIndex(input_index_or_name) {\n    if (CoreType.isString(input_index_or_name)) {\n      if (this.hasNamedInputs()) {\n        return this.getNamedInputIndex(input_index_or_name);\n      } else {\n        throw new Error(`node ${this.node.path()} has no named inputs`);\n      }\n    } else {\n      return input_index_or_name;\n    }\n  }\n  setInput(inputIndexOrName, node, outputIndexOrName, options) {\n    const ignoreLockedState = (options == null ? void 0 : options.ignoreLockedState) || false;\n    if (ignoreLockedState == false && this.node.insideALockedParent()) {\n      const lockedParent = this.node.lockedParent();\n      console.warn(\n        `node '${this.node.path()}' cannot have its inputs changed, since it is inside '${lockedParent ? lockedParent.path() : \"\"}', which is locked`\n      );\n      return;\n    }\n    if (outputIndexOrName == null) {\n      outputIndexOrName = 0;\n    }\n    const noExceptionOnInvalidInput = (options == null ? void 0 : options.noExceptionOnInvalidInput) || false;\n    const inputIndex = this.getInputIndex(inputIndexOrName) || 0;\n    if (inputIndex < 0) {\n      const message = `invalid input (${inputIndexOrName}) for node ${this.node.path()}`;\n      if (!noExceptionOnInvalidInput) {\n        console.warn(message);\n        throw new Error(message);\n      } else {\n        return;\n      }\n    }\n    let outputIndex = 0;\n    if (node) {\n      if (node.io.outputs.hasNamedOutputs()) {\n        outputIndex = node.io.outputs.getOutputIndex(outputIndexOrName);\n        if (outputIndex == null || outputIndex < 0) {\n          const connection_points = node.io.outputs.namedOutputConnectionPoints();\n          const names = connection_points ? connection_points.map((cp) => cp.name()) : [];\n          console.warn(\n            `node ${node.path()} does not have an output named ${outputIndexOrName}. inputs are: ${names.join(\n              \", \"\n            )}`\n          );\n          return;\n        }\n      }\n      const nodeParent = node.parent();\n      const currentNodeParent = this.node.parent();\n      if (!(nodeParent && currentNodeParent && nodeParent.graphNodeId() == currentNodeParent.graphNodeId())) {\n        console.warn(`node ${node.path()} does not have the same parent as ${this.node.path()}`);\n        return;\n      }\n    }\n    const graphInputNode = this._graphNodeInputs[inputIndex];\n    if (graphInputNode == null) {\n      const message = `no input at index ${inputIndex} (name: ${inputIndexOrName}) for node '${this.node.name()}' at path '${this.node.path()}'`;\n      console.warn(message);\n      throw new Error(message);\n    }\n    if (node && this.node.parent() != node.parent()) {\n      return;\n    }\n    const oldInputNode = this._inputs[inputIndex];\n    let oldOutputIndex = null;\n    let oldConnection = void 0;\n    if (this.node.io.connections) {\n      oldConnection = this.node.io.connections.inputConnection(inputIndex);\n    }\n    if (oldConnection) {\n      oldOutputIndex = oldConnection.outputIndex();\n    }\n    if (node !== oldInputNode || outputIndex != oldOutputIndex) {\n      if (oldInputNode != null) {\n        if (this._depends_on_inputs) {\n          graphInputNode.removeGraphInput(oldInputNode);\n        }\n      }\n      if (node != null) {\n        const connectionResult = graphInputNode.addGraphInput(node);\n        if (connectionResult) {\n          if (!this._depends_on_inputs) {\n            graphInputNode.removeGraphInput(node);\n          }\n          if (oldConnection) {\n            oldConnection.disconnect({ setInput: false });\n          }\n          this._inputs[inputIndex] = node;\n          new TypedNodeConnection(\n            node,\n            this.node,\n            outputIndex,\n            inputIndex\n          );\n        } else {\n          console.warn(`cannot connect ${node.path()} to ${this.node.path()}`);\n        }\n      } else {\n        this._inputs[inputIndex] = null;\n        if (oldConnection) {\n          oldConnection.disconnect({ setInput: false });\n        }\n      }\n      this._run_on_set_input_hooks();\n      graphInputNode.setSuccessorsDirty();\n      this.node.emit(NodeEvent.INPUTS_UPDATED);\n    }\n  }\n  // remove_input(node: BaseNodeByContextMap[NC]) {\n  // \tconst inputs = this.inputs();\n  // \tlet input: BaseNodeByContextMap[NC] | null;\n  // \tfor (let i = 0; i < inputs.length; i++) {\n  // \t\tinput = inputs[i];\n  // \t\tif (input != null && node != null) {\n  // \t\t\tif (input.graphNodeId() === node.graphNodeId()) {\n  // \t\t\t\tthis.setInput(i, null);\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // }\n  input(input_index) {\n    return this._inputs[input_index];\n  }\n  named_input(input_name) {\n    if (this.hasNamedInputs()) {\n      const input_index = this.getInputIndex(input_name);\n      return this._inputs[input_index];\n    } else {\n      return null;\n    }\n  }\n  named_input_connection_point(input_name) {\n    if (this.hasNamedInputs() && this._named_input_connection_points) {\n      const input_index = this.getInputIndex(input_name);\n      return this._named_input_connection_points[input_index];\n    }\n  }\n  has_named_input(name) {\n    return this.getNamedInputIndex(name) >= 0;\n  }\n  hasInput(input_index) {\n    return this._inputs[input_index] != null;\n  }\n  inputs() {\n    return this._inputs;\n  }\n  initInputsClonedState(states) {\n    if (!this._clonedStatesController) {\n      this._clonedStatesController = new ClonedStatesController(this);\n      this._clonedStatesController.initInputsClonedState(states);\n    }\n  }\n  overrideClonedStateAllowed() {\n    var _a;\n    return ((_a = this._clonedStatesController) == null ? void 0 : _a.overrideClonedStateAllowed()) || false;\n  }\n  overrideClonedState(state) {\n    var _a;\n    (_a = this._clonedStatesController) == null ? void 0 : _a.overrideClonedState(state);\n  }\n  clonedStateOverriden() {\n    var _a;\n    return ((_a = this._clonedStatesController) == null ? void 0 : _a.overriden()) || false;\n  }\n  cloneRequired(index) {\n    var _a;\n    const state = (_a = this._clonedStatesController) == null ? void 0 : _a.cloneRequiredState(index);\n    if (state != null) {\n      return state;\n    }\n    return true;\n  }\n  cloneRequiredStates() {\n    var _a;\n    const states = (_a = this._clonedStatesController) == null ? void 0 : _a.cloneRequiredStates();\n    if (states != null) {\n      return states;\n    }\n    return true;\n  }\n  _updateCloneRequiredState() {\n    var _a;\n    (_a = this._clonedStatesController) == null ? void 0 : _a.updateCloneRequiredState();\n  }\n  //\n  //\n  // HOOKS\n  //\n  //\n  add_on_set_input_hook(name, hook) {\n    this._on_update_hooks = this._on_update_hooks || [];\n    this._on_update_hook_names = this._on_update_hook_names || [];\n    if (!this._on_update_hook_names.includes(name)) {\n      this._on_update_hooks.push(hook);\n      this._on_update_hook_names.push(name);\n    } else {\n      console.warn(`hook with name ${name} already exists`, this.node);\n    }\n  }\n  _run_on_set_input_hooks() {\n    if (this._on_update_hooks) {\n      for (const hook of this._on_update_hooks) {\n        hook();\n      }\n    }\n  }\n}\n", "\"use strict\";\nimport { NodeEvent } from \"../../../poly/NodeEvent\";\nimport { CoreType } from \"../../../../core/Type\";\nimport { arrayUniq } from \"../../../../core/ArrayUtils\";\nconst _uniqOutputIndices = [];\nconst _usedOutputIndices = [];\nexport class OutputsController {\n  constructor(node) {\n    this.node = node;\n    this._has_outputs = false;\n    this._has_named_outputs = false;\n    this._connections = [];\n    this._onPlayingStateChangeBound = this._onPlayingStateChange.bind(this);\n    this._outputIndexCache = /* @__PURE__ */ new Map();\n    this.node.scene().timeController.onPlayingStateChange(this._onPlayingStateChangeBound);\n  }\n  _onPlayingStateChange() {\n    this._clearCache();\n  }\n  _clearCache() {\n    this._outputIndexCache.clear();\n  }\n  dispose() {\n    this.node.scene().timeController.removeOnPlayingStateChange(this._onPlayingStateChangeBound);\n    if (this._named_output_connection_points) {\n      this._named_output_connection_points.splice(0, this._named_output_connection_points.length);\n    }\n  }\n  setHasOneOutput() {\n    this._has_outputs = true;\n  }\n  setHasNoOutput() {\n    this._has_outputs = false;\n  }\n  hasOutputs() {\n    return this._has_outputs;\n  }\n  hasNamedOutputs() {\n    return this._has_named_outputs;\n  }\n  hasNamedOutput(name) {\n    return this.getNamedOutputIndex(name) >= 0;\n  }\n  namedOutputConnectionPoints() {\n    return this._named_output_connection_points;\n  }\n  namedOutputConnection(index) {\n    if (this._named_output_connection_points) {\n      return this._named_output_connection_points[index];\n    }\n  }\n  getNamedOutputIndex(name) {\n    if (this._named_output_connection_points) {\n      let i = 0;\n      for (const connectionPoint of this._named_output_connection_points) {\n        if (connectionPoint && connectionPoint.name() == name) {\n          return i;\n        }\n        i++;\n      }\n    }\n    return -1;\n  }\n  getOutputIndex(output_index_or_name) {\n    let currentCache = this._outputIndexCache.get(output_index_or_name);\n    if (currentCache == null) {\n      currentCache = this._getOutputIndex(output_index_or_name);\n      this._outputIndexCache.set(output_index_or_name, currentCache);\n    }\n    return currentCache;\n  }\n  _getOutputIndex(output_index_or_name) {\n    if (output_index_or_name != null) {\n      if (CoreType.isString(output_index_or_name)) {\n        if (this.hasNamedOutputs()) {\n          return this.getNamedOutputIndex(output_index_or_name);\n        } else {\n          console.warn(`node ${this.node.path()} has no named outputs`);\n          return -1;\n        }\n      } else {\n        return output_index_or_name;\n      }\n    }\n    return -1;\n  }\n  namedOutputConnectionPointsByName(name) {\n    if (this._named_output_connection_points) {\n      for (const connection_point of this._named_output_connection_points) {\n        if ((connection_point == null ? void 0 : connection_point.name()) == name) {\n          return connection_point;\n        }\n      }\n    }\n  }\n  setNamedOutputConnectionPoints(connection_points, set_dirty = true) {\n    this._has_named_outputs = true;\n    this.node.io.connections.outputConnections(this._connections);\n    for (const connection of this._connections) {\n      if (connection) {\n        if (connection.outputIndex() >= connection_points.length) {\n          connection.disconnect({ setInput: true });\n        }\n      }\n    }\n    this._named_output_connection_points = connection_points;\n    if (set_dirty && this.node.scene()) {\n      this.node.setDirty(this.node);\n    }\n    this.node.emit(NodeEvent.NAMED_OUTPUTS_UPDATED);\n  }\n  used_output_names() {\n    var _a;\n    const target = [];\n    const connectionsController = this.node.io.connections;\n    if (connectionsController) {\n      connectionsController.outputConnections(this._connections);\n      arrayUniq(\n        this._connections.map((connection) => connection ? connection.outputIndex() : null),\n        _uniqOutputIndices\n      );\n      _usedOutputIndices.length = 0;\n      for (const index of _uniqOutputIndices) {\n        if (CoreType.isNumber(index)) {\n          _usedOutputIndices.push(index);\n        }\n      }\n      const connectionPoints = this.namedOutputConnectionPoints();\n      if (connectionPoints) {\n        for (const index of _usedOutputIndices) {\n          const name = (_a = connectionPoints[index]) == null ? void 0 : _a.name();\n          if (name) {\n            target.push(name);\n          }\n        }\n      }\n    }\n    return target;\n  }\n}\n", "\"use strict\";\nexport class ConnectionsController {\n  constructor(_node) {\n    this._node = _node;\n    this._outputConnections = /* @__PURE__ */ new Map();\n  }\n  initInputs() {\n    const count = this._node.io.inputs.maxInputsCount();\n    this._inputConnections = this._inputConnections || new Array(count);\n    while (this._inputConnections.length < count) {\n      this._inputConnections.push(void 0);\n    }\n  }\n  dispose() {\n    if (this._inputConnections) {\n      this._inputConnections.splice(0, this._inputConnections.length);\n    }\n    if (this._outputConnections) {\n      this._outputConnections.clear();\n    }\n  }\n  //\n  //\n  // INPUT CONNECTIONS\n  //\n  //\n  addInputConnection(connection) {\n    if (this._inputConnections) {\n      this._inputConnections[connection.inputIndex()] = connection;\n    } else {\n      console.warn(`input connections array not initialized`);\n    }\n  }\n  removeInputConnection(connection) {\n    if (this._inputConnections) {\n      if (connection.inputIndex() < this._inputConnections.length) {\n        this._inputConnections[connection.inputIndex()] = void 0;\n        let all_connections_after_are_undefined = true;\n        for (let i = connection.inputIndex(); i < this._inputConnections.length; i++) {\n          if (this._inputConnections[i]) {\n            all_connections_after_are_undefined = false;\n          }\n        }\n        if (all_connections_after_are_undefined) {\n          this._inputConnections = this._inputConnections.slice(0, connection.inputIndex());\n        }\n      } else {\n        console.warn(`attempt to remove an input connection at index ${connection.inputIndex()}`);\n      }\n    } else {\n      console.warn(`input connections array not initialized`);\n    }\n  }\n  inputConnection(index) {\n    if (this._inputConnections) {\n      return this._inputConnections[index];\n    }\n  }\n  firstInputConnection() {\n    if (this._inputConnections) {\n      for (const connection of this._inputConnections) {\n        if (connection) {\n          return connection;\n        }\n      }\n    }\n    return null;\n  }\n  inputConnections() {\n    return this._inputConnections;\n  }\n  existingInputConnections() {\n    const current_connections = this._inputConnections;\n    if (current_connections) {\n      while (current_connections.length > 1 && current_connections[current_connections.length - 1] === void 0) {\n        current_connections.pop();\n      }\n    }\n    return current_connections;\n  }\n  //\n  //\n  // OUTPUT CONNECTIONS\n  //\n  //\n  addOutputConnection(connection) {\n    const output_index = connection.outputIndex();\n    const id = connection.id();\n    let connections_by_id = this._outputConnections.get(output_index);\n    if (!connections_by_id) {\n      connections_by_id = /* @__PURE__ */ new Map();\n      this._outputConnections.set(output_index, connections_by_id);\n    }\n    connections_by_id.set(id, connection);\n  }\n  removeOutputConnection(connection) {\n    const output_index = connection.outputIndex();\n    const id = connection.id();\n    let connections_by_id = this._outputConnections.get(output_index);\n    if (connections_by_id) {\n      connections_by_id.delete(id);\n    }\n  }\n  outputConnectionsByOutputIndex(outputIndex) {\n    return this._outputConnections.get(outputIndex);\n  }\n  outputConnections(target) {\n    target.length = 0;\n    this._outputConnections.forEach((connections_by_id, output_index) => {\n      connections_by_id.forEach((connection, id) => {\n        if (connection) {\n          target.push(connection);\n        }\n      });\n    });\n    return target;\n  }\n}\n", "\"use strict\";\nexport class SavedConnectionPointsDataController {\n  constructor(_node) {\n    this._node = _node;\n  }\n  set_in(data) {\n    this._in = data;\n  }\n  set_out(data) {\n    this._out = data;\n  }\n  clear() {\n    this._in = void 0;\n    this._out = void 0;\n  }\n  in() {\n    return this._in;\n  }\n  out() {\n    return this._out;\n  }\n}\n", "\"use strict\";\nimport { ParamType } from \"../../../../poly/ParamType\";\nimport { RampParam } from \"../../../../params/Ramp\";\nexport var GlConnectionPointType = /* @__PURE__ */ ((GlConnectionPointType2) => {\n  GlConnectionPointType2[\"BOOL\"] = \"bool\";\n  GlConnectionPointType2[\"INT\"] = \"int\";\n  GlConnectionPointType2[\"FLOAT\"] = \"float\";\n  GlConnectionPointType2[\"MAT3\"] = \"mat3\";\n  GlConnectionPointType2[\"MAT4\"] = \"mat4\";\n  GlConnectionPointType2[\"VEC2\"] = \"vec2\";\n  GlConnectionPointType2[\"VEC3\"] = \"vec3\";\n  GlConnectionPointType2[\"VEC4\"] = \"vec4\";\n  GlConnectionPointType2[\"SAMPLER_2D\"] = \"sampler2D\";\n  GlConnectionPointType2[\"SAMPLER_2D_ARRAY\"] = \"sampler2DArray\";\n  GlConnectionPointType2[\"SAMPLER_3D\"] = \"sampler3D\";\n  GlConnectionPointType2[\"SAMPLER_CUBE\"] = \"samplerCube\";\n  GlConnectionPointType2[\"SSS_MODEL\"] = \"SSSModel\";\n  GlConnectionPointType2[\"SDF_CONTEXT\"] = \"SDFContext\";\n  GlConnectionPointType2[\"SDF_MATERIAL\"] = \"SDFMaterial\";\n  return GlConnectionPointType2;\n})(GlConnectionPointType || {});\nexport const GL_CONNECTION_POINT_TYPES = [\n  \"bool\" /* BOOL */,\n  // ConnectionPointType.BVEC2,\n  // ConnectionPointType.BVEC3,\n  // ConnectionPointType.BVEC4,\n  \"int\" /* INT */,\n  // ConnectionPointType.IVEC2,\n  // ConnectionPointType.IVEC3,\n  // ConnectionPointType.IVEC4,\n  \"float\" /* FLOAT */,\n  \"vec2\" /* VEC2 */,\n  \"vec3\" /* VEC3 */,\n  \"vec4\" /* VEC4 */,\n  \"mat3\" /* MAT3 */,\n  \"mat4\" /* MAT4 */,\n  \"sampler2D\" /* SAMPLER_2D */,\n  \"SSSModel\" /* SSS_MODEL */,\n  \"SDFContext\" /* SDF_CONTEXT */,\n  \"SDFMaterial\" /* SDF_MATERIAL */\n];\nexport const GL_CONNECTION_POINT_TYPES_FOR_CONSTANT = [\n  \"bool\" /* BOOL */,\n  \"int\" /* INT */,\n  \"float\" /* FLOAT */,\n  \"vec2\" /* VEC2 */,\n  \"vec3\" /* VEC3 */,\n  \"vec4\" /* VEC4 */\n];\nexport const GlConnectionPointTypeToParamTypeMap = {\n  [\"bool\" /* BOOL */]: ParamType.BOOLEAN,\n  // [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  [\"int\" /* INT */]: ParamType.INTEGER,\n  // [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  [\"float\" /* FLOAT */]: ParamType.FLOAT,\n  [\"vec2\" /* VEC2 */]: ParamType.VECTOR2,\n  [\"vec3\" /* VEC3 */]: ParamType.VECTOR3,\n  [\"vec4\" /* VEC4 */]: ParamType.VECTOR4,\n  [\"mat3\" /* MAT3 */]: ParamType.BUTTON,\n  [\"mat4\" /* MAT4 */]: ParamType.BUTTON,\n  [\"sampler2D\" /* SAMPLER_2D */]: ParamType.RAMP,\n  [\"sampler2DArray\" /* SAMPLER_2D_ARRAY */]: ParamType.RAMP,\n  [\"sampler3D\" /* SAMPLER_3D */]: ParamType.RAMP,\n  [\"samplerCube\" /* SAMPLER_CUBE */]: ParamType.RAMP,\n  [\"SSSModel\" /* SSS_MODEL */]: ParamType.STRING,\n  [\"SDFContext\" /* SDF_CONTEXT */]: ParamType.STRING,\n  [\"SDFMaterial\" /* SDF_MATERIAL */]: ParamType.STRING\n};\nexport const GLParamTypeToConnectionPointTypeMap = {\n  [ParamType.BOOLEAN]: \"bool\" /* BOOL */,\n  [ParamType.COLOR]: \"vec3\" /* VEC3 */,\n  // [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  [ParamType.INTEGER]: \"int\" /* INT */,\n  // [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  [ParamType.FLOAT]: \"float\" /* FLOAT */,\n  [ParamType.FOLDER]: void 0,\n  [ParamType.VECTOR2]: \"vec2\" /* VEC2 */,\n  [ParamType.VECTOR3]: \"vec3\" /* VEC3 */,\n  [ParamType.VECTOR4]: \"vec4\" /* VEC4 */,\n  [ParamType.BUTTON]: void 0,\n  // [ParamType.OPERATOR_PATH]: undefined,\n  [ParamType.PARAM_PATH]: void 0,\n  [ParamType.NODE_PATH]: void 0,\n  [ParamType.RAMP]: void 0,\n  [ParamType.STRING]: void 0\n};\nexport const GlConnectionPointInitValueMap = {\n  [\"bool\" /* BOOL */]: false,\n  // [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  [\"int\" /* INT */]: 0,\n  // [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  [\"float\" /* FLOAT */]: 0,\n  [\"vec2\" /* VEC2 */]: [0, 0],\n  [\"vec3\" /* VEC3 */]: [0, 0, 0],\n  [\"vec4\" /* VEC4 */]: [0, 0, 0, 0],\n  [\"mat3\" /* MAT3 */]: null,\n  [\"mat4\" /* MAT4 */]: null,\n  [\"sampler2D\" /* SAMPLER_2D */]: RampParam.DEFAULT_VALUE_JSON,\n  [\"sampler2DArray\" /* SAMPLER_2D_ARRAY */]: RampParam.DEFAULT_VALUE_JSON,\n  [\"sampler3D\" /* SAMPLER_3D */]: RampParam.DEFAULT_VALUE_JSON,\n  [\"samplerCube\" /* SAMPLER_CUBE */]: RampParam.DEFAULT_VALUE_JSON,\n  [\"SSSModel\" /* SSS_MODEL */]: \"SSSModel()\",\n  [\"SDFContext\" /* SDF_CONTEXT */]: \"DefaultSDFContext()\",\n  [\"SDFMaterial\" /* SDF_MATERIAL */]: \"DefaultSDFMaterial()\"\n};\nexport const GlConnectionPointComponentsCountMap = {\n  [\"bool\" /* BOOL */]: 1,\n  // [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  // [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n  [\"int\" /* INT */]: 1,\n  // [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  // [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n  [\"float\" /* FLOAT */]: 1,\n  [\"vec2\" /* VEC2 */]: 2,\n  [\"vec3\" /* VEC3 */]: 3,\n  [\"vec4\" /* VEC4 */]: 4,\n  [\"mat3\" /* MAT3 */]: 9,\n  [\"mat4\" /* MAT4 */]: 16,\n  [\"sampler2D\" /* SAMPLER_2D */]: 1,\n  [\"sampler2DArray\" /* SAMPLER_2D_ARRAY */]: 1,\n  [\"sampler3D\" /* SAMPLER_3D */]: 1,\n  [\"samplerCube\" /* SAMPLER_CUBE */]: 1,\n  [\"SSSModel\" /* SSS_MODEL */]: 1,\n  [\"SDFContext\" /* SDF_CONTEXT */]: 1,\n  [\"SDFMaterial\" /* SDF_MATERIAL */]: 1\n};\nimport { BaseConnectionPoint } from \"./_Base\";\nexport class GlConnectionPoint extends BaseConnectionPoint {\n  // protected _init_value: any;\n  constructor(_name, _type, _init_value) {\n    super(_name, _type);\n    this._name = _name;\n    this._type = _type;\n    this._init_value = _init_value;\n    this._init_value = this._init_value || GlConnectionPointInitValueMap[this._type];\n  }\n  type() {\n    return this._type;\n  }\n  are_types_matched(src_type, dest_type) {\n    return src_type == dest_type;\n  }\n  get param_type() {\n    return GlConnectionPointTypeToParamTypeMap[this._type];\n  }\n  get init_value() {\n    return this._init_value;\n  }\n  toJSON() {\n    return this._json = this._json || this._createJSON();\n  }\n  _createJSON() {\n    return {\n      name: this._name,\n      type: this._type\n      // isArray: false,\n    };\n  }\n}\n", "\"use strict\";\nexport var EventConnectionPointType = /* @__PURE__ */ ((EventConnectionPointType2) => {\n  EventConnectionPointType2[\"BASE\"] = \"base\";\n  EventConnectionPointType2[\"DRAG\"] = \"drag\";\n  EventConnectionPointType2[\"KEYBOARD\"] = \"keyboard\";\n  EventConnectionPointType2[\"MOUSE\"] = \"mouse\";\n  EventConnectionPointType2[\"POINTER\"] = \"pointer\";\n  return EventConnectionPointType2;\n})(EventConnectionPointType || {});\nexport const EVENT_CONNECTION_POINT_TYPES = [\n  \"base\" /* BASE */,\n  \"drag\" /* DRAG */,\n  \"keyboard\" /* KEYBOARD */,\n  \"mouse\" /* MOUSE */,\n  \"pointer\" /* POINTER */\n];\nimport { BaseConnectionPoint } from \"./_Base\";\nimport { ParamType } from \"../../../../poly/ParamType\";\nexport class EventConnectionPoint extends BaseConnectionPoint {\n  constructor(_name, _type, _event_listener) {\n    super(_name, _type);\n    this._name = _name;\n    this._type = _type;\n    this._event_listener = _event_listener;\n  }\n  type() {\n    return this._type;\n  }\n  get param_type() {\n    return ParamType.FLOAT;\n  }\n  are_types_matched(src_type, dest_type) {\n    if (dest_type == \"base\" /* BASE */) {\n      return true;\n    } else {\n      return src_type == dest_type;\n    }\n  }\n  get event_listener() {\n    return this._event_listener;\n  }\n  // get param_type(): IConnectionPointTypeToParamTypeMap[T] {\n  // \treturn ConnectionPointTypeToParamTypeMap[this._type];\n  // }\n  // get init_value() {\n  // \treturn this._init_value;\n  // }\n  toJSON() {\n    return this._json = this._json || this._createJSON();\n  }\n  _createJSON() {\n    return {\n      name: this._name,\n      type: this._type,\n      isArray: false\n    };\n  }\n}\n", "\"use strict\";\nimport { NodeContext } from \"../../../../poly/NodeContext\";\nimport {\n  GlConnectionPointType,\n  GlConnectionPoint,\n  GLParamTypeToConnectionPointTypeMap\n} from \"./Gl\";\nimport {\n  JsConnectionPointType,\n  JsConnectionPoint,\n  JsParamTypeToConnectionPointTypeMap\n} from \"./Js\";\nimport { EventConnectionPoint, EventConnectionPointType } from \"./Event\";\nexport const DEFAULT_CONNECTION_POINT_ENUM_MAP = {\n  [NodeContext.ANIM]: void 0,\n  [NodeContext.AUDIO]: void 0,\n  // [NodeContext.CAD]: undefined,\n  [NodeContext.COP]: void 0,\n  // [NodeContext.CSG]: undefined,\n  [NodeContext.EVENT]: EventConnectionPointType.BASE,\n  [NodeContext.GL]: GlConnectionPointType.FLOAT,\n  [NodeContext.JS]: JsConnectionPointType.FLOAT,\n  [NodeContext.MANAGER]: void 0,\n  [NodeContext.MAT]: void 0,\n  [NodeContext.OBJ]: void 0,\n  [NodeContext.POST]: void 0,\n  [NodeContext.ROP]: void 0,\n  [NodeContext.SOP]: void 0\n};\nexport function createConnectionPoint(context, name, type) {\n  switch (context) {\n    case NodeContext.EVENT: {\n      return new EventConnectionPoint(name, type);\n    }\n    case NodeContext.GL: {\n      return new GlConnectionPoint(name, type);\n    }\n    case NodeContext.JS: {\n      return new JsConnectionPoint(name, type);\n    }\n    default: {\n      return void 0;\n    }\n  }\n}\nexport function paramTypeToConnectionPointTypeMap(context) {\n  switch (context) {\n    case NodeContext.EVENT: {\n      return void 0;\n    }\n    case NodeContext.GL: {\n      return GLParamTypeToConnectionPointTypeMap;\n    }\n    case NodeContext.JS: {\n      return JsParamTypeToConnectionPointTypeMap;\n    }\n    default: {\n      return void 0;\n    }\n  }\n}\n", "\"use strict\";\nimport {\n  paramTypeToConnectionPointTypeMap,\n  createConnectionPoint\n} from \"./connections/ConnectionMap\";\nimport { ParamType } from \"../../../poly/ParamType\";\nimport { CoreType } from \"../../../../core/Type\";\nimport { objectClone } from \"../../../../core/ObjectUtils\";\nexport class ConnectionPointsSpareParamsController {\n  constructor(node, _context) {\n    this.node = node;\n    this._context = _context;\n    this._raw_input_serialized_by_param_name = /* @__PURE__ */ new Map();\n    this._default_value_serialized_by_param_name = /* @__PURE__ */ new Map();\n    // disallow_inputs_created_from_params() {\n    // \tthis._allow_inputs_created_from_params = false;\n    // }\n    this._initialized = false;\n  }\n  initializeNode() {\n    if (this._initialized) {\n      console.warn(\"already initialized\", this.node);\n      return;\n    }\n    this._initialized = true;\n    this.node.params.onParamsCreated(\"createInputsFromParams\", this._createInputsFromParams.bind(this));\n  }\n  initialized() {\n    return this._initialized;\n  }\n  _createInputsFromParams() {\n    const connectionTypeMap = paramTypeToConnectionPointTypeMap(this._context);\n    if (!connectionTypeMap) {\n      return;\n    }\n    const connectionPoints = [];\n    for (const paramName of this.node.params.names) {\n      let addInput = true;\n      if (this._inputlessParamNames && this._inputlessParamNames.length > 0 && this._inputlessParamNames.includes(paramName)) {\n        addInput = false;\n      }\n      if (addInput) {\n        if (this.node.params.has(paramName)) {\n          const param = this.node.params.get(paramName);\n          if (param && !param.parentParam()) {\n            const connectionType = connectionTypeMap[param.type()];\n            if (connectionType) {\n              const connectionPoint = createConnectionPoint(\n                this._context,\n                param.name(),\n                connectionType\n              );\n              if (connectionPoint) {\n                connectionPoints.push(connectionPoint);\n              }\n            }\n          }\n        }\n      }\n    }\n    this.node.io.inputs.setNamedInputConnectionPoints(connectionPoints);\n  }\n  setInputlessParamNames(names) {\n    return this._inputlessParamNames = names;\n  }\n  //\n  // Create spare params on gl nodes\n  //\n  createSpareParameters() {\n    if (this.node.scene().loadingController.isLoading()) {\n      return;\n    }\n    const current_param_names = this.node.params.spare_names;\n    const params_update_options = {};\n    for (const param_name of current_param_names) {\n      if (this.node.params.has(param_name)) {\n        const param = this.node.params.get(param_name);\n        if (param) {\n          this._raw_input_serialized_by_param_name.set(param_name, param.rawInputSerialized());\n          this._default_value_serialized_by_param_name.set(param_name, param.defaultValueSerialized());\n          params_update_options.namesToDelete = params_update_options.namesToDelete || [];\n          params_update_options.namesToDelete.push(param_name);\n        }\n      }\n    }\n    const inputConnectionPoints = this.node.io.inputs.namedInputConnectionPoints();\n    if (inputConnectionPoints) {\n      let i = 0;\n      for (const connection_point of inputConnectionPoints) {\n        if (connection_point) {\n          const isConnected = this.node.io.inputs.input(i) != null;\n          const param_name = connection_point.name();\n          const paramType = connection_point.param_type;\n          if (paramType) {\n            let init_value = connection_point.init_value;\n            const last_param_init_value = this._default_value_serialized_by_param_name.get(param_name);\n            let default_value_from_name = this.node.paramDefaultValue(param_name);\n            if (default_value_from_name != null) {\n              init_value = default_value_from_name;\n            } else {\n              if (last_param_init_value != null) {\n                init_value = last_param_init_value;\n              } else {\n                init_value = connection_point.init_value;\n              }\n            }\n            if (CoreType.isArray(connection_point.init_value)) {\n              if (CoreType.isNumber(init_value)) {\n                const array = new Array(connection_point.init_value.length);\n                array.fill(init_value);\n                init_value = array;\n              } else if (CoreType.isArray(init_value)) {\n                if (init_value.length == connection_point.init_value.length) {\n                  if (last_param_init_value != null) {\n                    init_value = connection_point.init_value;\n                  }\n                }\n              }\n            }\n            if (init_value != null && paramType != ParamType.BUTTON) {\n              params_update_options.toAdd = params_update_options.toAdd || [];\n              params_update_options.toAdd.push({\n                name: param_name,\n                type: paramType,\n                // TODO: I should really treat differently init_value and raw_input here\n                initValue: objectClone(init_value),\n                rawInput: objectClone(init_value),\n                options: {\n                  spare: true,\n                  editable: !isConnected,\n                  // computeOnDirty should be false for PARAM_PATH\n                  // so that js/setParam and js/getParam can link to a parameter\n                  // without having their parent node actor being recooked\n                  computeOnDirty: paramType != ParamType.PARAM_PATH,\n                  // dependentOnFoundParam should be false for PARAM_PATH\n                  // so that js/setParam and js/getParam can link to a parameter\n                  // without having their parent node actor being recooked\n                  dependentOnFoundParam: false\n                  // dependentOnFoundNode: true,\n                }\n              });\n            }\n          }\n        }\n        i++;\n      }\n    }\n    this.node.params.updateParams(params_update_options);\n    for (const spare_param of this.node.params.spare) {\n      if (!spare_param.parentParam()) {\n        const raw_input = this._raw_input_serialized_by_param_name.get(spare_param.name());\n        if (raw_input) {\n          spare_param.set(raw_input);\n        }\n      }\n    }\n  }\n}\n", "\"use strict\";\nimport {\n  DEFAULT_CONNECTION_POINT_ENUM_MAP,\n  createConnectionPoint\n} from \"./connections/ConnectionMap\";\nimport { ConnectionPointsSpareParamsController } from \"./ConnectionPointsSpareParamsController\";\nimport { NetworkChildNodeType } from \"../../../poly/NodeContext\";\nimport { arrayCopy } from \"../../../../core/ArrayUtils\";\nfunction arraysMatch(array0, array1) {\n  if (array0.length != array1.length) {\n    return false;\n  }\n  for (let i = 0; i < array0.length; i++) {\n    if (array0[i] != array1[i]) {\n      return false;\n    }\n  }\n  return true;\n}\nexport class ConnectionPointsController {\n  constructor(node, _context) {\n    this.node = node;\n    this._context = _context;\n    this._create_spare_params_from_inputs = true;\n    this._functions_overridden = false;\n    this._input_name_function = (index) => {\n      return `in${index}`;\n    };\n    this._output_name_function = (index) => {\n      return index == 0 ? \"val\" : `val${index}`;\n    };\n    // private _default_input_type: ConnectionPointType = ConnectionPointType.FLOAT;\n    this._expected_input_types_function = () => {\n      const type = this.first_input_connection_type() || this.default_connection_type();\n      return [type, type];\n    };\n    this._expected_output_types_function = () => {\n      return [this._expected_input_types_function()[0]];\n    };\n    this._update_signature_if_required_bound = this.update_signature_if_required.bind(this);\n    this._initialized = false;\n    // used when a node changes its signature, adn the output nodes need to adapt their own signatures\n    this._successorsCopy = [];\n    this._spare_params_controller = new ConnectionPointsSpareParamsController(this.node, this._context);\n  }\n  default_connection_type() {\n    return DEFAULT_CONNECTION_POINT_ENUM_MAP[this._context];\n  }\n  createConnectionPoint(name, type) {\n    return createConnectionPoint(this._context, name, type);\n  }\n  functions_overridden() {\n    return this._functions_overridden;\n  }\n  initialized() {\n    return this._initialized;\n  }\n  set_create_spare_params_from_inputs(state) {\n    this._create_spare_params_from_inputs = state;\n  }\n  set_input_name_function(func) {\n    this._initialize_if_required();\n    this._input_name_function = func;\n  }\n  set_output_name_function(func) {\n    this._initialize_if_required();\n    this._output_name_function = func;\n  }\n  // set_default_input_type(type: ConnectionPointType) {\n  // \tthis._default_input_type = type;\n  // }\n  set_expected_input_types_function(func) {\n    this._initialize_if_required();\n    this._functions_overridden = true;\n    this._expected_input_types_function = func;\n  }\n  set_expected_output_types_function(func) {\n    this._initialize_if_required();\n    this._functions_overridden = true;\n    this._expected_output_types_function = func;\n  }\n  input_name(index) {\n    return this._wrapped_input_name_function(index);\n  }\n  output_name(index) {\n    return this._wrapped_output_name_function(index);\n  }\n  initializeNode() {\n    if (this._initialized) {\n      console.warn(\"already initialized\", this.node);\n      return;\n    }\n    this._initialized = true;\n    this.node.io.inputs.add_on_set_input_hook(\n      \"_update_signature_if_required\",\n      this._update_signature_if_required_bound\n    );\n    this.node.params.addOnSceneLoadHook(\"_update_signature_if_required\", this._update_signature_if_required_bound);\n    this.node.params.onParamsCreated(\n      \"_update_signature_if_required_bound\",\n      this._update_signature_if_required_bound\n    );\n    this.node.addPostDirtyHook(\"_update_signature_if_required\", this._update_signature_if_required_bound);\n    if (!this._spare_params_controller.initialized()) {\n      this._spare_params_controller.initializeNode();\n    }\n  }\n  _initialize_if_required() {\n    if (!this._initialized) {\n      this.initializeNode();\n    }\n  }\n  get spare_params() {\n    return this._spare_params_controller;\n  }\n  update_signature_if_required() {\n    if (!this.node.lifecycle.creationCompleted() || !this._inputsOutputsMatchExpectations()) {\n      this.update_connection_types();\n      this.node.removeDirtyState();\n      if (!this.node.scene().loadingController.isLoading()) {\n        this.make_successors_update_signatures();\n      }\n    }\n  }\n  make_successors_update_signatures() {\n    const successors = this.node.graphAllSuccessors();\n    arrayCopy(successors, this._successorsCopy);\n    if (this.node.childrenAllowed()) {\n      const subnet_inputs = this.node.nodesByType(NetworkChildNodeType.INPUT);\n      const subnet_outputs = this.node.nodesByType(NetworkChildNodeType.OUTPUT);\n      for (const subnet_input of subnet_inputs) {\n        this._successorsCopy.push(subnet_input);\n      }\n      for (const subnet_output of subnet_outputs) {\n        this._successorsCopy.push(subnet_output);\n      }\n    }\n    for (const graphNode of this._successorsCopy) {\n      const node = graphNode;\n      if (node.io && node.io.has_connection_points_controller && node.io.connection_points.initialized()) {\n        node.io.connection_points.update_signature_if_required();\n      }\n    }\n  }\n  update_connection_types() {\n    const set_dirty = false;\n    const expected_input_types = this._wrapped_expected_input_types_function();\n    const expected_output_types = this._wrapped_expected_output_types_function();\n    const named_input_connection_points = [];\n    for (let i = 0; i < expected_input_types.length; i++) {\n      const type = expected_input_types[i];\n      const point = this.createConnectionPoint(this._wrapped_input_name_function(i), type);\n      named_input_connection_points.push(point);\n    }\n    const named_output_connect_points = [];\n    for (let i = 0; i < expected_output_types.length; i++) {\n      const type = expected_output_types[i];\n      const point = this.createConnectionPoint(this._wrapped_output_name_function(i), type);\n      named_output_connect_points.push(point);\n    }\n    this.node.io.inputs.setNamedInputConnectionPoints(named_input_connection_points);\n    this.node.io.outputs.setNamedOutputConnectionPoints(named_output_connect_points, set_dirty);\n    if (this._create_spare_params_from_inputs) {\n      this._spare_params_controller.createSpareParameters();\n    }\n  }\n  _inputsOutputsMatchExpectations() {\n    const namedInputConnections = this.node.io.inputs.namedInputConnectionPoints();\n    const namedOutputConnections = this.node.io.outputs.namedOutputConnectionPoints();\n    if (!(namedInputConnections && namedOutputConnections)) {\n      return false;\n    }\n    const inputTypesMatch = arraysMatch(\n      // make sure to test the expected ones against all except the inNodeDefinition ones\n      namedInputConnections.filter((c) => !(c == null ? void 0 : c.inNodeDefinition())).map((c) => c == null ? void 0 : c.type()),\n      this._wrapped_expected_input_types_function()\n    );\n    const outputTypesMatch = arraysMatch(\n      namedOutputConnections.map((c) => c == null ? void 0 : c.type()),\n      this._wrapped_expected_output_types_function()\n    );\n    const inputNamesMatch = arraysMatch(\n      // make sure to test the expected ones against all except the inNodeDefinition ones\n      namedInputConnections.filter((c) => !(c == null ? void 0 : c.inNodeDefinition())).map((c) => c == null ? void 0 : c.name()),\n      namedInputConnections.filter((c) => !(c == null ? void 0 : c.inNodeDefinition())).map((c, i) => this._wrapped_input_name_function(i))\n    );\n    const outputNamesMatch = arraysMatch(\n      namedOutputConnections.map((c) => c == null ? void 0 : c.name()),\n      namedOutputConnections.map((c, i) => this._wrapped_output_name_function(i))\n    );\n    return inputTypesMatch && outputTypesMatch && inputNamesMatch && outputNamesMatch;\n  }\n  //\n  //\n  // WRAPPPED METHOD\n  // the goal here is to use the types data saved in the scene file\n  // when the scene is loading. That has 2 purposes:\n  // - avoid an update cascade during loading, where nodes with many inputs are updated\n  //\t several times.\n  // - allow the subnet_input to load with the connection_points it had on save,\n  //   which in turn allows connected nodes to not lose their connections.\n  //\n  _wrapped_expected_input_types_function() {\n    if (this.node.scene().loadingController.isLoading()) {\n      const in_data = this.node.io.saved_connection_points_data.in();\n      if (in_data) {\n        return in_data.map((d) => d.type);\n      }\n    }\n    return this._expected_input_types_function();\n  }\n  _wrapped_expected_output_types_function() {\n    if (this.node.scene().loadingController.isLoading()) {\n      const out_data = this.node.io.saved_connection_points_data.out();\n      if (out_data) {\n        return out_data.map((d) => d.type);\n      }\n    }\n    return this._expected_output_types_function();\n  }\n  _wrapped_input_name_function(index) {\n    if (this.node.scene().loadingController.isLoading()) {\n      const in_data = this.node.io.saved_connection_points_data.in();\n      if (in_data) {\n        return in_data[index].name;\n      }\n    }\n    return this._input_name_function(index);\n  }\n  _wrapped_output_name_function(index) {\n    if (this.node.scene().loadingController.isLoading()) {\n      const out_data = this.node.io.saved_connection_points_data.out();\n      if (out_data) {\n        return out_data[index].name;\n      }\n    }\n    return this._output_name_function(index);\n  }\n  // protected input_connection_type() {\n  // \treturn this.first_input_connection_type();\n  // }\n  // protected output_connection_type() {\n  // \treturn this.first_input_connection_type();\n  // }\n  first_input_connection_type() {\n    return this.input_connection_type(0);\n  }\n  input_connection_type(index) {\n    const connections = this.node.io.connections.inputConnections();\n    if (!connections) {\n      return;\n    }\n    const connection = connections[index];\n    if (!connection) {\n      return;\n    }\n    const connectionPoint = connection.srcConnectionPoint();\n    if (!connectionPoint) {\n      return;\n    }\n    return connectionPoint.type();\n  }\n  // input_connection_point_from_connection(connection: TypedNodeConnection<NC>): ConnectionPointTypeMap[NC] {\n  // \tconst node_dest = connection.node_dest;\n  // \tconst output_index = connection.output_index;\n  // \treturn node_dest.io.outputs.namedOutputConnectionPoints()[output_index] as ConnectionPointTypeMap[NC];\n  // }\n  // output_connection_point_from_connection(connection: TypedNodeConnection<NC>): ConnectionPointTypeMap[NC] {\n  // \tconst node_src = connection.node_src;\n  // \tconst output_index = connection.output_index;\n  // \treturn node_src.io.outputs.namedOutputConnectionPoints()[output_index] as ConnectionPointTypeMap[NC];\n  // }\n  // connection_point_type_from_connection(connection: TypedNodeConnection<NC>): ConnectionPointEnumMap[NC] {\n  // \treturn connection.dest_connection_point()?.type as ConnectionPointEnumMap[NC];\n  // \t// const connection_point = this.output_connection_point_from_connection(connection)!;\n  // \t// return connection_point.type as ConnectionPointEnumMap[NC];\n  // }\n  // connection_point_name_from_connection(connection: TypedNodeConnection<NC>): string {\n  // \treturn connection.dest_connection_point()!.name\n  // \t// const connection_point = this.output_connection_point_from_connection(connection)!;\n  // \t// return connection_point.name;\n  // }\n}\n", "\"use strict\";\nimport { NodeInputsController } from \"./InputsController\";\nimport { OutputsController } from \"./OutputsController\";\nimport { ConnectionsController } from \"./ConnectionsController\";\nimport { SavedConnectionPointsDataController } from \"./SavedConnectionPointsDataController\";\nimport { ConnectionPointsController } from \"./ConnectionPointsController\";\nexport class IOController {\n  constructor(node) {\n    this.node = node;\n    this._connections = new ConnectionsController(this.node);\n  }\n  dispose() {\n    this.inputs.dispose();\n    this.outputs.dispose();\n    this.connections.dispose();\n  }\n  get connections() {\n    return this._connections;\n  }\n  //\n  //\n  // inputs\n  //\n  //\n  get inputs() {\n    return this._inputs = this._inputs || new NodeInputsController(this.node);\n  }\n  hasInputs() {\n    return this._inputs != null;\n  }\n  //\n  //\n  // outputs\n  //\n  //\n  get outputs() {\n    return this._outputs = this._outputs || new OutputsController(this.node);\n  }\n  has_outputs() {\n    return this._outputs != null;\n  }\n  //\n  //\n  // connection_points\n  //\n  //\n  get connection_points() {\n    return this._connection_points = this._connection_points || new ConnectionPointsController(this.node, this.node.context());\n  }\n  get has_connection_points_controller() {\n    return this._connection_points != null;\n  }\n  //\n  //\n  // saved connection points data\n  //\n  //\n  get saved_connection_points_data() {\n    return this._saved_connection_points_data = this._saved_connection_points_data || new SavedConnectionPointsDataController(this.node);\n  }\n  clear_saved_connection_points_data() {\n    if (this._saved_connection_points_data) {\n      this._saved_connection_points_data.clear();\n      this._saved_connection_points_data = void 0;\n    }\n  }\n}\n", "\"use strict\";\nexport class ParamsAccessor {\n  constructor() {\n  }\n}\n", "\"use strict\";\nimport { CoreGraphNode } from \"../../core/graph/CoreGraphNode\";\nimport { UIData } from \"./utils/UIData\";\nimport { FlagsControllerD } from \"./utils/FlagsController\";\nimport { NodeStatesController } from \"./utils/StatesController\";\nimport { HierarchyParentController } from \"./utils/hierarchy/ParentController\";\nimport { HierarchyChildrenController } from \"./utils/hierarchy/ChildrenController\";\nimport { NodeLifeCycleController } from \"./utils/LifeCycleController\";\nimport { TypedContainerController } from \"./utils/ContainerController\";\nimport { NodeCookController } from \"./utils/CookController\";\nimport { NameController } from \"./utils/NameController\";\nimport { ParamsController } from \"./utils/params/ParamsController\";\nimport { ParamsValueAccessor } from \"./utils/params/ParamsValueAccessor\";\nimport { IOController } from \"./utils/io/IOController\";\nimport { ParamsAccessor } from \"./utils/params/ParamsAccessor\";\nimport { EventDispatcher } from \"three\";\nconst ANY_STRING = \"any-string\";\nexport const DEFAULT_DATA_TYPE = \"default\";\nexport class TypedNode extends CoreGraphNode {\n  // get processing_context(): ProcessingContext {\n  // \treturn (this._processing_context = this._processing_context || new ProcessingContext(this));\n  // }\n  constructor(scene, nodeName = \"BaseNode\", createOptions) {\n    super(scene, nodeName);\n    this.createOptions = createOptions;\n    this.containerController = new TypedContainerController(this);\n    this.pv = new ParamsValueAccessor();\n    // readonly pv: ParamsValueAccessor<K> = new ParamsValueAccessor<K>(this);\n    this.p = new ParamsAccessor();\n    this._initialized = false;\n    const serializerClass = createOptions == null ? void 0 : createOptions.serializerClass;\n    if (serializerClass) {\n      this._serializer = new serializerClass(this);\n    }\n  }\n  copy_param_values(node) {\n    const non_spare = this.params.non_spare;\n    for (const param of non_spare) {\n      const other_param = node.params.get(param.name());\n      if (other_param) {\n        param.copyValue(other_param);\n      }\n    }\n  }\n  dataType() {\n    return DEFAULT_DATA_TYPE;\n  }\n  get parentController() {\n    return this._parentController = this._parentController || new HierarchyParentController(this);\n  }\n  static displayedInputNames() {\n    return void 0;\n  }\n  displayedInputNames() {\n    return this.constructor.displayedInputNames();\n  }\n  childrenControllerContext() {\n    return this._childrenControllerContext;\n  }\n  _create_childrenController() {\n    if (this._childrenControllerContext) {\n      return new HierarchyChildrenController(this, this._childrenControllerContext);\n    }\n  }\n  get childrenController() {\n    return this._childrenController = this._childrenController || this._create_childrenController();\n  }\n  childrenAllowed() {\n    return this._childrenControllerContext != null;\n  }\n  sceneReadonly() {\n    return false;\n  }\n  get uiData() {\n    return this._uiData = this._uiData || new UIData(this);\n  }\n  get states() {\n    return this._states = this._states || new NodeStatesController(this);\n  }\n  get lifecycle() {\n    return this._lifecycle = this._lifecycle || new NodeLifeCycleController(this);\n  }\n  get serializer() {\n    return this._serializer;\n  }\n  get cookController() {\n    return this._cookController = this._cookController || new NodeCookController(this);\n  }\n  get io() {\n    return this._io = this._io || new IOController(this);\n  }\n  get nameController() {\n    return this._nameController = this._nameController || new NameController(this);\n  }\n  /**\n   * sets the name of a node. Note that if a sibling node already has that name, it will be updated to be unique.\n   *\n   */\n  setName(name) {\n    this.nameController.setName(name);\n  }\n  _setCoreName(name) {\n    this._name = name;\n  }\n  get params() {\n    return this._paramsController = this._paramsController || new ParamsController(this);\n  }\n  initializeBaseAndNode() {\n    var _a;\n    if (!this._initialized) {\n      this._initialized = true;\n      (_a = this.displayNodeController) == null ? void 0 : _a.initializeNode();\n      this.initializeBaseNode();\n      this.initializeNode();\n      if (this.polyNodeController) {\n        this.polyNodeController.initializeNode();\n      }\n    } else {\n      console.warn(\"node already initialized\");\n    }\n  }\n  initializeBaseNode() {\n  }\n  initializeNode() {\n  }\n  static type() {\n    throw \"type to be overriden\";\n  }\n  /**\n   * returns the type of the node.\n   *\n   */\n  type() {\n    const c = this.constructor;\n    return c.type();\n  }\n  static context() {\n    console.error(\"node has no node_context\", this);\n    throw \"context requires override\";\n  }\n  /**\n   * returns the context.\n   *\n   */\n  context() {\n    const c = this.constructor;\n    return c.context();\n  }\n  static requireWebGL2() {\n    return false;\n  }\n  requireWebGL2() {\n    const c = this.constructor;\n    return c.requireWebGL2();\n  }\n  setParent(parent) {\n    this.parentController.setParent(parent);\n  }\n  /**\n   * returns the parent.\n   *\n   */\n  parent() {\n    return this.parentController.parent();\n  }\n  insideALockedParent() {\n    return this.lockedParent() != null;\n  }\n  lockedOrInsideALockedParent() {\n    var _a;\n    return ((_a = this.polyNodeController) == null ? void 0 : _a.locked()) || this.insideALockedParent();\n  }\n  selfOrLockedParent() {\n    var _a;\n    if ((_a = this.polyNodeController) == null ? void 0 : _a.locked()) {\n      return this;\n    }\n    return this.lockedParent();\n  }\n  lockedParent() {\n    const parent = this.parent();\n    if (!parent) {\n      return null;\n    }\n    if (parent.polyNodeController && parent.polyNodeController.locked()) {\n      return parent;\n    }\n    return parent.lockedParent();\n  }\n  firstAncestorWithContext(context) {\n    return this.parentController.firstAncestorWithContext(context);\n  }\n  root() {\n    return this._scene.root();\n  }\n  /**\n   * returns the path.\n   *\n   */\n  path(relative_to_parent) {\n    return this.parentController.path(relative_to_parent);\n  }\n  // params\n  createParams() {\n  }\n  addParam(type, name, default_value, options) {\n    var _a;\n    return (_a = this._paramsController) == null ? void 0 : _a.addParam(type, name, default_value, options);\n  }\n  paramDefaultValue(name) {\n    return null;\n  }\n  // cook\n  cook(inputContents) {\n    return null;\n  }\n  /**\n   * registers a callback that will be run every time the node finishes cooking.\n   *\n   */\n  onCookEnd(callbackName, callback) {\n    this.cookController.registerOnCookEnd(callbackName, callback);\n  }\n  /**\n   * returns a promise that will be resolved when the node finishes cooking.\n   *\n   */\n  async compute() {\n    var _a, _b;\n    if (this.isDirty() || ((_b = (_a = this.flags) == null ? void 0 : _a.bypass) == null ? void 0 : _b.active())) {\n      return await this.containerController.compute();\n    } else {\n      return this.containerController.container();\n    }\n  }\n  _setContainer(content) {\n    this.containerController.container().set_content(content);\n    this.cookController.endCook(\n      /*message*/\n    );\n  }\n  /**\n   * create a node.\n   *\n   */\n  createNode(nodeClass, options) {\n    var _a;\n    return (_a = this.childrenController) == null ? void 0 : _a.createNode(nodeClass, options);\n  }\n  createOperationContainer(type, operation_container_name, options) {\n    var _a;\n    return (_a = this.childrenController) == null ? void 0 : _a.createOperationContainer(type, operation_container_name, options);\n  }\n  /**\n   * removes a child node\n   *\n   */\n  removeNode(node) {\n    var _a;\n    (_a = this.childrenController) == null ? void 0 : _a.removeNode(node);\n  }\n  dispose() {\n    super.dispose();\n    this.setParent(null);\n    if (this._nameController) {\n      this._nameController.dispose();\n      this._nameController = void 0;\n    }\n    if (this._io) {\n      this._io.dispose();\n      this._io = void 0;\n    }\n    if (this._lifecycle) {\n      this._lifecycle.dispose();\n      this._lifecycle = void 0;\n    }\n    if (this.displayNodeController) {\n      this.displayNodeController.dispose();\n    }\n    if (this._childrenController) {\n      this._childrenController.dispose();\n      this._childrenController = void 0;\n    }\n    if (this._paramsController) {\n      this._paramsController.dispose();\n      this._paramsController = void 0;\n    }\n    if (this._cookController) {\n      this._cookController.dispose();\n      this._cookController = void 0;\n    }\n    if (this._serializer) {\n      this._serializer.dispose();\n      this._serializer = void 0;\n    }\n    if (this._uiData) {\n      this._uiData.dispose();\n      this._uiData = void 0;\n    }\n  }\n  /**\n   * returns the list of children\n   *\n   */\n  children() {\n    var _a;\n    return ((_a = this.childrenController) == null ? void 0 : _a.children()) || [];\n  }\n  /**\n   * returns a child node\n   *\n   */\n  node(path) {\n    var _a;\n    return ((_a = this.parentController) == null ? void 0 : _a.findNode(path)) || null;\n  }\n  /**\n   * returns a sibling node\n   *\n   */\n  nodeSibling(name) {\n    var _a;\n    const parent = this.parent();\n    if (parent) {\n      const node = (_a = parent.childrenController) == null ? void 0 : _a.childByName(name);\n      if (node) {\n        return node;\n      }\n    }\n    return null;\n  }\n  /**\n   * returns the children matching the type\n   *\n   */\n  nodesByType(type) {\n    var _a;\n    return ((_a = this.childrenController) == null ? void 0 : _a.nodesByType(type)) || [];\n  }\n  /**\n   * sets a node as input\n   *\n   */\n  setInput(inputIndexOrName, node, outputIndexOrName, options) {\n    this.io.inputs.setInput(inputIndexOrName, node, outputIndexOrName, options);\n  }\n  emit(event_name, data = null) {\n    this.scene().dispatchController.dispatch(this, event_name, data);\n  }\n  _eventsDispatcher() {\n    return this.__eventsDispatcher = this.__eventsDispatcher || new EventDispatcher();\n  }\n  dispatchEvent(event) {\n    this._eventsDispatcher().dispatchEvent(event);\n  }\n  addEventListener(type, listener) {\n    this._eventsDispatcher().addEventListener(type, listener);\n  }\n  removeEventListener(type, listener) {\n    this._eventsDispatcher().removeEventListener(type, listener);\n  }\n  // serializer\n  toJSON(includeParamComponents = false) {\n    if (!this._serializer) {\n      return;\n    }\n    return this._serializer.toJSON(includeParamComponents);\n  }\n  // modules\n  requiredModules() {\n  }\n  usedAssembler() {\n  }\n  integrationData() {\n  }\n  // error processing\n  processError(e) {\n    return e;\n  }\n  updateObjectOnAdd(object, parent) {\n  }\n  updateObjectOnRemove(object, parent) {\n  }\n}\nexport class BaseNodeClass extends TypedNode {\n}\nexport class BaseNodeClassWithDisplayFlag extends TypedNode {\n  constructor() {\n    super(...arguments);\n    this.flags = new FlagsControllerD(this);\n  }\n}\n"],
  "mappings": "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",
  "names": ["flatten", "require_clone", "equals", "require_add", "require_create", "require_clone", "require_copy", "require_equals", "equals", "require_fromValues", "lerp", "normalize", "target", "require_multiply", "require_rotateX", "require_rotateY", "require_rotateZ", "require_scale", "require_subtract", "require_toString", "require_create", "require_abs", "require_add", "require_angle", "require_create", "require_clone", "require_copy", "require_cross", "require_distance", "require_divide", "require_dot", "require_equals", "equals", "require_fromScalar", "require_fromValues", "require_length", "require_lerp", "lerp", "require_max", "require_min", "require_multiply", "require_negate", "require_rotate", "require_normalize", "normalize", "require_scale", "require_snap", "require_squaredDistance", "require_squaredLength", "require_subtract", "require_toString", "require_transform", "vertex", "nextSide", "require_toString", "require_transform", "require_clone", "require_create", "require_create", "require_clone", "require_fromPoints", "require_create", "require_clone", "require_copy", "require_equals", "equals", "require_fromValues", "require_fromPoints", "require_toString", "require_transform", "require_invert", "require_isA", "require_plane", "area", "require_dot", "require_fromScalar", "require_transform", "require_toPoints", "require_toString", "vertex", "require_transform", "vertex", "require_validate", "vertex", "require_fromPoints", "require_fromCompactBinary", "require_applyTransforms", "require_invert", "require_isA", "require_toPoints", "require_toString", "require_toCompactBinary", "require_transform", "require_validate", "require_clone", "require_create", "require_fromPoints", "require_applyTransforms", "require_toPoints", "equals", "tmp", "require_equals", "equals", "require_fromCompactBinary", "require_isA", "require_reverse", "require_toString", "require_toCompactBinary", "require_transform", "require_validate", "flatten", "flatten", "flatten", "flatten", "flatten", "flatten", "require_create", "area", "require_measureArea", "area", "require_create", "require_flip", "require_create", "require_clone", "require_copy", "require_equals", "equals", "require_fromPoints", "require_fromValues", "require_reverse", "require_toString", "require_transform", "require_create", "require_clone", "require_closestPoint", "require_copy", "require_direction", "require_distanceToPoint", "require_equals", "equals", "require_fromPoints", "require_origin", "require_reverse", "require_toString", "require_transform", "require_measureArea", "flatten", "area", "geometries", "flatten", "geometries", "result", "area", "require_measureBoundingBox", "flatten", "boundingBox", "geometries", "flatten", "geometries", "result", "flatten", "geometries", "dimensions", "flatten", "volume", "geometries", "flatten", "geometries", "result", "require_measureBoundingSphere", "flatten", "temp", "geometries", "flatten", "geometries", "flatten", "area", "geometries", "flatten", "geometries", "boundingBox", "flatten", "geometries", "ray", "point", "frequency", "offset", "flatten", "require_create", "require_clone", "require_equals", "equals", "require_fromPoints", "require_isA", "require_reverse", "sortLinked", "sortLinked", "Node", "insertNode", "removeNode", "pointInTriangle", "px", "py", "area", "Node", "insertNode", "removeNode", "area", "signedArea", "equals", "filterPoints", "cureLocalIntersections", "intersects", "locallyInside", "intersectsPolygon", "middleInside", "px", "py", "splitPolygon", "isValidDiagonal", "onSegment", "filterPoints", "locallyInside", "splitPolygon", "area", "pointInTriangle", "eliminateHoles", "getLeftmost", "eliminateHole", "findHoleBridge", "sectorContainsSector", "eliminateHoles", "removeNode", "sortLinked", "cureLocalIntersections", "filterPoints", "isValidDiagonal", "splitPolygon", "area", "pointInTriangle", "earcutLinked", "indexCurve", "isEarHashed", "isEar", "splitEarcut", "zOrder", "p", "area", "holes", "require_toPolygons", "require_toString", "require_transform", "vertex", "require_rotate", "flatten", "require_translate", "flatten", "require_triangle", "triangle", "require_utils", "vertex", "nextrightvertexindex", "polygons", "Node", "temp", "plane", "vertex", "Node", "flatten", "geometries", "flatten", "geometries", "require_intersect", "flatten", "geometries", "temp", "flatten", "flatten", "geometries", "flatten", "geometries", "require_subtract", "flatten", "geometries", "flatten", "geometries", "flatten", "geometries", "flatten", "geometries", "area", "rotation", "vertex", "polygons", "area", "flatten", "flatten", "flatten", "area", "flatten", "flatten", "geometries", "flatten", "geometries", "flatten", "geometries", "area", "normalize", "tmp", "target", "vertex", "normalize", "vertex", "j", "flatten", "geometries", "flatten", "geometries", "flatten", "geometries", "area", "v1", "v2", "polygons", "vertex", "sidetag", "flatten", "geometries", "require_snap", "flatten", "geometries", "flatten", "geometries", "flatten", "require_scale", "flatten", "require_transform", "flatten", "_position", "_points", "ATTRIB_NAME_MAP", "target", "target", "target", "defaultValue", "target", "_relatedPrimitiveIds", "_relatedVertexIds", "defaultValue", "ref", "target", "_target", "_relatedPrimitiveIds", "target", "isColor", "defaultValue", "_warnOverloadRequired", "defaultValue", "target", "isColor", "target", "defaultValue", "target2", "target", "target2", "defaultValue", "FrontSide", "FloatType", "RGBAFormat", "EventDispatcher", "Vector2", "tmp", "Texture", "EventDispatcher", "RGBAFormat", "Vector2", "Vector4", "Texture", "Quaternion", "Vector3", "Box3", "target", "triangle", "Sphere", "ray", "sign", "Matrix4", "tmp", "Euler", "Object3D", "EventDispatcher", "geometries", "Triangle", "Color", "Material", "FrontSide", "data", "Vector3", "Vector2", "BufferAttribute", "FloatType", "BufferAttribute", "BufferAttribute", "Float32BufferAttribute", "BufferAttribute", "Matrix4", "Object3D", "Vector3", "Box3", "BufferGeometry", "EventDispatcher", "Float32BufferAttribute", "Sphere", "BufferAttribute", "Vector2", "tmp", "tmp2", "indices", "boundingBox", "Mesh", "target", "intersects", "ray", "FrontSide", "Triangle", "width", "height", "depth", "UniformsUtils", "Material", "fov", "aspect", "Texture", "Plane", "Color", "renderer", "scene", "alpha", "attributes", "extension", "precision", "RGBAFormat", "x", "geometries", "Vector4", "FloatType", "self", "drawBuffers", "scissor", "viewport", "_canvas", "texture", "Group", "i", "cameraL", "cameraR", "cameras", "cameraXR", "info", "_projScreenMatrix", "_vector2", "_vector3", "context", "stencil", "materials", "currentRenderList", "parameters", "framebuffer", "Scene", "Object3D", "Vector3", "Vector3", "Vector2", "Matrix4", "Vector3", "Vector3", "Vector4", "Matrix4", "Sphere", "Matrix4", "Matrix4", "Box3", "Matrix4", "Mesh", "Sphere", "Vector3", "Matrix4", "Sphere", "Vector3", "Matrix4", "Sphere", "Vector3", "Vector2", "Vector3", "Matrix4", "BufferGeometry", "vertex", "Float32BufferAttribute", "sign", "detail", "radius", "azimuth", "Triangle", "px", "py", "bs", "contour", "p", "q", "CubicInterpolant", "Quaternion", "Matrix4", "Vector3", "Matrix4", "Vector3", "Matrix4", "Vector3", "Quaternion", "_position", "Vector3", "Quaternion", "Vector2", "Vector3", "target", "Vector3", "Matrix4", "Vector3", "Color", "Vector3", "Vector3", "Box3", "Vector3", "BufferAttribute", "target", "target", "leftBounds", "Vector3", "areIntersecting", "Vector3", "closestPointLineToLine", "Vector2", "temp1", "temp2", "closestPointsSegmentToSegment", "target2", "Plane", "sphereIntersectTriangle", "triangle", "Triangle", "Vector3", "Sphere", "Plane", "target2", "target", "tmp", "Vector3", "Matrix4", "triangle", "closestPointToPoint", "target", "target2", "Box3", "nodeIndex32", "uint16Array", "uint32Array", "nodeIndex16", "temp", "Vector3", "target", "_vA", "Vector3", "_vB", "_vC", "_uvA", "Vector2", "_uvB", "_uvC", "_normalA", "_normalB", "_normalC", "_intersectionPoint", "checkIntersection", "ray", "Triangle", "Vector3", "Vector2", "ray", "triangle", "_traverse", "byteOffset", "Box3", "ray", "target", "ray", "triangle", "Vector3", "ray", "intersects", "_boxIntersection", "Vector3", "ray", "Box3", "Matrix4", "Matrix4", "obb", "obb2", "temp1", "Vector3", "target2", "triangle", "triangle2", "_traverse", "byteOffset", "_boxIntersection", "Vector3", "ray", "intersects", "_raycast", "_boxIntersection", "Vector3", "_xyzFields", "ray", "_raycastFirst", "boundingBox", "Box3", "triangle", "triangle2", "invertedMat", "Matrix4", "obb", "obb2", "_intersectsGeometry", "tempMatrix", "Matrix4", "obb", "obb2", "temp1", "Vector3", "temp2", "temp3", "temp4", "target2", "triangle", "triangle2", "Box3", "Matrix4", "obb", "Box3", "BufferAttribute", "_traverse", "ray", "FrontSide", "intersects", "triangle", "triangle2", "box", "target2", "target", "boundingBox", "Box3", "_box1", "Box3", "_box2", "Vector3", "Matrix4", "Mesh", "intersects", "Vector3", "Vector4", "_skinIndex", "_skinWeight", "_matrix", "Matrix4", "_boneMatrix", "geometries", "dummyMesh", "geometries", "_points", "performance", "target", "defaultValue", "vertex", "target", "geometries", "_warnOverloadRequired", "defaultValue", "target", "isColor", "target", "target", "defaultValue", "target2", "_v3", "STRIDE", "_triangle", "target", "_p0", "_p1", "target", "_p0", "target", "_indices", "target", "target", "_indices", "name", "jsep", "precedence", "_target", "ARGUMENTS_SEPARATOR", "tmpConvertedValue", "target", "target", "hooks", "target", "target", "target", "performance", "hooks", "tmp", "tmp", "tmp", "stringNumber3Equals", "tmp", "defaultValue", "ClonedStatesController", "target", "ClonedStatesController", "target", "target"]
}
