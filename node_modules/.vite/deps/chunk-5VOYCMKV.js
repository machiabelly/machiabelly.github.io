import {
  NodeContext
} from "./chunk-PQDBXNT6.js";

// node_modules/@polygonjs/polygonjs/dist/src/engine/functions/_Base.js
var BaseNamedFunction = class {
  constructor(node, shadersCollectionController) {
    this.node = node;
    this.shadersCollectionController = shadersCollectionController;
    this.scene = node.scene();
    this.timeController = this.scene.timeController;
    if (node.context() == NodeContext.JS) {
      this.jsNode = node;
      this.functionNode = this.jsNode.functionNode();
    } else {
      this.jsNode = void 0;
      this.functionNode = node;
    }
  }
  // abstract type: string;
  static type() {
    throw "type to be overriden";
  }
  type() {
    const c = this.constructor;
    return c.type();
  }
  asString(...args) {
    if (this.shadersCollectionController) {
      if (this.jsNode) {
        this.shadersCollectionController.addFunction(this.jsNode, this);
      }
    } else {
      console.warn("no shadersCollectionController in func", this.type());
    }
    return "";
  }
};
var NamedFunction = class extends BaseNamedFunction {
  constructor() {
    super(...arguments);
    this.async = false;
  }
  asString(...args) {
    super.asString(...args);
    const functionCall = `${this.type()}(${args.join(", ")})`;
    return this.async ? `await ${functionCall}` : functionCall;
  }
};
var NamedFunction0 = class extends NamedFunction {
};
var NamedFunction3 = class extends NamedFunction {
};
var ObjectNamedFunction = class extends BaseNamedFunction {
  asString(...args) {
    super.asString(...args);
    return `${this.type()}(${args.join(", ")})`;
  }
};
var ObjectNamedFunction5 = class extends ObjectNamedFunction {
};

export {
  NamedFunction,
  NamedFunction0,
  NamedFunction3,
  ObjectNamedFunction5
};
//# sourceMappingURL=chunk-5VOYCMKV.js.map
