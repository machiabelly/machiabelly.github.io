import {
  stringMatchMask
} from "./chunk-RVFV2LA3.js";

// node_modules/@polygonjs/polygonjs/dist/src/core/geometry/CorePath.js
var REGEX_PATH_SANITIZE = /\/+/g;
function findObjectByMask(mask, parent) {
  return findObjectByMaskInObject(mask, parent);
}
function findObjectByMaskInObject(mask, object, objectPath2 = "") {
  for (const child of object.children) {
    const childName = sanitizeObjectPath(child.name);
    const path = sanitizeObjectPath(`${objectPath2}/${childName}`);
    if (stringMatchMask(path, mask)) {
      return child;
    }
    const grandChild = findObjectByMaskInObject(mask, child, path);
    if (grandChild) {
      return grandChild;
    }
  }
}
function objectsByMask(mask, parent, invertMask = false) {
  const list = [];
  traverseObjectsWithMask(
    mask,
    (obj) => {
      list.push(obj);
    },
    parent,
    invertMask
  );
  return list;
}
function objectsByMaskInObject(mask, object, list = [], objectPath2 = "") {
  traverseObjectsWithMask(
    mask,
    (obj) => {
      list.push(obj);
    },
    object
  );
  return list;
}
function traverseObjectsWithMask(mask, callback, object, invertMask = false) {
  traverseObjectsWithMaskInObject(mask, object, callback, invertMask);
}
function traverseObjectsWithMaskInObject(mask, object, callback, invertMask, objectPath2) {
  const objectName = sanitizeObjectPath(object.name);
  const path = sanitizeObjectPath(objectPath2 != null ? `${objectPath2}/${objectName}` : objectName);
  let match = stringMatchMask(path, mask);
  if (invertMask) {
    match = !match;
  }
  if (match) {
    callback(object);
  }
  for (const child of object.children) {
    traverseObjectsWithMaskInObject(mask, child, callback, invertMask, path);
  }
}
function sanitizeObjectPath(path) {
  return path.replace(REGEX_PATH_SANITIZE, "/");
}
function objectPath(object, topParent) {
  const parent = object.parent;
  if (parent && object != topParent) {
    const parentPath = objectPath(parent, topParent);
    return sanitizeObjectPath(`${parentPath}/${object.name}`);
  } else {
    return object.name;
  }
}
var CorePath = class {
};
CorePath.findObjectByMask = findObjectByMask;
CorePath.findObjectByMaskInObject = findObjectByMaskInObject;
CorePath.objectsByMask = objectsByMask;
CorePath.objectsByMaskInObject = objectsByMaskInObject;
CorePath.traverseObjectsWithMask = traverseObjectsWithMask;
CorePath.traverseObjectsWithMaskInObject = traverseObjectsWithMaskInObject;
CorePath.objectPath = objectPath;
CorePath.sanitizePath = sanitizeObjectPath;

export {
  objectsByMask,
  CorePath
};
//# sourceMappingURL=chunk-VPW6KKKV.js.map
