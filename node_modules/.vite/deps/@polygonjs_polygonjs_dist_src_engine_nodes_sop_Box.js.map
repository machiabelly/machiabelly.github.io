{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/operations/sop/Box.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/sop/Box.js"],
  "sourcesContent": ["\"use strict\";\nimport { ObjectType } from \"./../../../core/geometry/Constant\";\nimport { BaseSopOperation } from \"./_Base\";\nimport { Vector3, BoxGeometry, Box3 } from \"three\";\nimport { CoreTransform } from \"../../../core/Transform\";\nimport { InputCloneMode } from \"../../../engine/poly/InputCloneMode\";\nconst tmpBox = new Box3();\nconst tmpSize = new Vector3();\nconst tmpCenter = new Vector3();\nfunction _roundDivision(division) {\n  return Math.max(1, Math.floor(division));\n}\nexport class BoxSopOperation extends BaseSopOperation {\n  constructor() {\n    super(...arguments);\n    this._coreTransform = new CoreTransform();\n  }\n  static type() {\n    return \"box\";\n  }\n  cook(inputCoreGroups, params) {\n    const inputCoreGroup = inputCoreGroups[0];\n    const geometry = inputCoreGroup ? this._cookWithInput(inputCoreGroup, params) : this._cookWithoutInput(params);\n    const object = BaseSopOperation.createObject(geometry, ObjectType.MESH);\n    if (this._node) {\n      object.name = this._node.name();\n    }\n    return this.createCoreGroupFromObjects([object]);\n  }\n  _cookWithoutInput(params) {\n    const { divisions, size, sizes } = params;\n    const geometry = new BoxGeometry(\n      size * sizes.x,\n      size * sizes.y,\n      size * sizes.z,\n      _roundDivision(divisions.x),\n      _roundDivision(divisions.y),\n      _roundDivision(divisions.z)\n    );\n    geometry.translate(params.center.x, params.center.y, params.center.z);\n    geometry.computeVertexNormals();\n    return geometry;\n  }\n  _cookWithInput(coreGroup, params) {\n    coreGroup.boundingBox(tmpBox);\n    tmpBox.getSize(tmpSize);\n    tmpBox.getCenter(tmpCenter);\n    const divisions = params.divisions;\n    const geometry = new BoxGeometry(\n      tmpSize.x,\n      tmpSize.y,\n      tmpSize.z,\n      _roundDivision(divisions.x),\n      _roundDivision(divisions.y),\n      _roundDivision(divisions.z)\n    );\n    const matrix = this._coreTransform.translationMatrix(tmpCenter);\n    geometry.applyMatrix4(matrix);\n    return geometry;\n  }\n}\nBoxSopOperation.DEFAULT_PARAMS = {\n  sizes: new Vector3(1, 1, 1),\n  size: 1,\n  divisions: new Vector3(1, 1, 1),\n  center: new Vector3(0, 0, 0)\n};\nBoxSopOperation.INPUT_CLONED_STATE = InputCloneMode.NEVER;\n", "\"use strict\";\nimport { TypedSopNode } from \"./_Base\";\nimport { BoxSopOperation } from \"../../operations/sop/Box\";\nimport { NodeParamsConfig, ParamConfig } from \"../utils/params/ParamsConfig\";\nimport { SopType } from \"../../poly/registers/nodes/types/Sop\";\nconst DEFAULT = BoxSopOperation.DEFAULT_PARAMS;\nclass BoxSopParamsConfig extends NodeParamsConfig {\n  constructor() {\n    super(...arguments);\n    /** @param size of the box */\n    this.size = ParamConfig.FLOAT(DEFAULT.size, {\n      range: [0, 2],\n      rangeLocked: [true, false]\n    });\n    /** @param sizes on each axis */\n    this.sizes = ParamConfig.VECTOR3(DEFAULT.sizes);\n    /** @param number of segments on each axis */\n    this.divisions = ParamConfig.VECTOR3(DEFAULT.divisions);\n    /** @param center of the geometry */\n    this.center = ParamConfig.VECTOR3(DEFAULT.center);\n  }\n}\nconst ParamsConfig = new BoxSopParamsConfig();\nexport class BoxSopNode extends TypedSopNode {\n  constructor() {\n    super(...arguments);\n    this.paramsConfig = ParamsConfig;\n  }\n  static type() {\n    return SopType.BOX;\n  }\n  initializeNode() {\n    this.io.inputs.setCount(0, 1);\n    this.io.inputs.initInputsClonedState(BoxSopOperation.INPUT_CLONED_STATE);\n  }\n  cook(inputCoreGroups) {\n    this._operation = this._operation || new BoxSopOperation(this._scene, this.states, this);\n    const coreGroup = this._operation.cook(inputCoreGroups, this.pv);\n    this.setCoreGroup(coreGroup);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
