{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/nodes/mat/utils/MeshPhysicalController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshPhysicalBuilder.js"],
  "sourcesContent": ["\"use strict\";\nimport { MeshPhysicalMaterial } from \"three\";\nimport { TypedMatNode } from \"../_Base\";\nimport { BaseTextureMapController, BooleanParamOptions, NodePathOptions } from \"./_BaseTextureController\";\nimport { NodeParamsConfig, ParamConfig } from \"../../utils/params/ParamsConfig\";\nimport { Color } from \"three\";\nimport { isBooleanTrue } from \"../../../../core/BooleanValue\";\nimport { ColorConversion } from \"../../../../core/Color\";\nconst ATTENUATION_DISTANCE_MIN = 1e-4;\nexport function MeshPhysicalParamConfig(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      /** @param Represents the thickness of the clear coat layer, from 0.0 to 1.0 */\n      this.clearcoat = ParamConfig.FLOAT(0, { separatorBefore: true });\n      /** @param toggle if you want to use a roughness map */\n      this.useClearCoatMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(MeshPhysicalController));\n      /** @param specify the roughness map COP node */\n      this.clearcoatMap = ParamConfig.NODE_PATH(\"\", NodePathOptions(MeshPhysicalController, \"useClearCoatMap\"));\n      /** @param toggle if you want to use a clear coat normal map */\n      this.useClearCoatNormalMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(MeshPhysicalController));\n      /** @param specify the roughness map COP node */\n      this.clearcoatNormalMap = ParamConfig.NODE_PATH(\n        \"\",\n        NodePathOptions(MeshPhysicalController, \"useClearCoatNormalMap\")\n      );\n      /** @param How much the normal map affects the material. Typical ranges are 0-1 */\n      this.clearcoatNormalScale = ParamConfig.VECTOR2([1, 1], { visibleIf: { useClearCoatNormalMap: 1 } });\n      /** @param clearcoatRoughness */\n      this.clearcoatRoughness = ParamConfig.FLOAT(0);\n      /** @param toggle if you want to use a clear cloat map */\n      this.useClearCoatRoughnessMap = ParamConfig.BOOLEAN(0, BooleanParamOptions(MeshPhysicalController));\n      /** @param specify the roughness map COP node */\n      this.clearcoatRoughnessMap = ParamConfig.NODE_PATH(\n        \"\",\n        NodePathOptions(MeshPhysicalController, \"useClearCoatRoughnessMap\")\n      );\n      /** @param toggle if you want to use sheen */\n      this.useSheen = ParamConfig.BOOLEAN(0, {\n        separatorBefore: true\n      });\n      /** @param The intensity of the sheen layer, from 0.0 to 1.0. Default is 0.0. */\n      this.sheen = ParamConfig.FLOAT(0, {\n        range: [0, 1],\n        rangeLocked: [true, false],\n        visibleIf: { useSheen: 1 }\n      });\n      /** @param If a color is assigned to this property, the material will use a special sheen BRDF intended for rendering cloth materials such as velvet. The sheen color provides the ability to create two-tone specular materials. null by default */\n      this.sheenRoughness = ParamConfig.FLOAT(1, {\n        range: [0, 1],\n        rangeLocked: [true, false],\n        visibleIf: { useSheen: 1 }\n      });\n      /** @param If a color is assigned to this property, the material will use a special sheen BRDF intended for rendering cloth materials such as velvet. The sheen color provides the ability to create two-tone specular materials. null by default */\n      this.sheenColor = ParamConfig.COLOR([1, 1, 1], {\n        visibleIf: { useSheen: 1 }\n      });\n      /** @param toggle if you want to use iridescence */\n      this.useIridescence = ParamConfig.BOOLEAN(0, {\n        separatorBefore: true\n      });\n      /** @param Iridescence amount */\n      this.iridescence = ParamConfig.FLOAT(1, {\n        range: [0, 10],\n        rangeLocked: [true, false],\n        visibleIf: { useIridescence: 1 }\n      });\n      /** @param iridescence index of refraction */\n      this.iridescenceIOR = ParamConfig.FLOAT(1.3, {\n        range: [1, 10],\n        rangeLocked: [false, false],\n        visibleIf: { useIridescence: 1 }\n      });\n      /** @param Iridescence Thickness Range */\n      this.iridescenceThicknessRange = ParamConfig.VECTOR2([0, 1], {\n        visibleIf: { useIridescence: 1 }\n      });\n      /** @param toggle if you want to use an iridescence map */\n      this.useIridescenceMap = ParamConfig.BOOLEAN(0, {\n        ...BooleanParamOptions(MeshPhysicalController),\n        visibleIf: { useIridescence: 1 }\n      });\n      /** @param specify the iridescence map COP node */\n      this.iridescenceMap = ParamConfig.NODE_PATH(\"\", {\n        ...NodePathOptions(MeshPhysicalController, \"useIridescenceMap\"),\n        visibleIf: { useIridescence: 1, useIridescenceMap: 1 }\n      });\n      /** @param toggle if you want to use an iridescence map */\n      this.useIridescenceThicknessMap = ParamConfig.BOOLEAN(0, {\n        ...BooleanParamOptions(MeshPhysicalController),\n        visibleIf: { useIridescence: 1 }\n      });\n      /** @param specify the iridescence map COP node */\n      this.iridescenceThicknessMap = ParamConfig.NODE_PATH(\"\", {\n        ...NodePathOptions(MeshPhysicalController, \"useIridescenceThicknessMap\"),\n        visibleIf: { useIridescence: 1, useIridescenceThicknessMap: 1 }\n      });\n      /** @param Degree of transmission (or optical transparency), from 0.0 to 1.0. Default is 0.0.\n      Thin, transparent or semitransparent, plastic or glass materials remain largely reflective even if they are fully transmissive. The transmission property can be used to model these materials.\n      When transmission is non-zero, opacity should be set to 1.  */\n      this.transmission = ParamConfig.FLOAT(0, {\n        separatorBefore: true,\n        range: [0, 1]\n      });\n      /** @param toggle if you want to use a transmission map */\n      this.useTransmissionMap = ParamConfig.BOOLEAN(0);\n      /** @param specify the roughness map COP node */\n      this.transmissionMap = ParamConfig.NODE_PATH(\"\", { visibleIf: { useTransmissionMap: 1 } });\n      /** @param Index-of-refraction for non-metallic materials */\n      this.ior = ParamConfig.FLOAT(1.5, {\n        range: [1, 2.3333],\n        rangeLocked: [true, true]\n      });\n      /** @param thickness  */\n      this.thickness = ParamConfig.FLOAT(0.01, {\n        range: [0, 10],\n        rangeLocked: [true, false]\n      });\n      /** @param toggle if you want to use a thickness map */\n      this.useThicknessMap = ParamConfig.BOOLEAN(0);\n      /** @param specify the roughness map COP node */\n      this.thicknessMap = ParamConfig.NODE_PATH(\"\", { visibleIf: { useThicknessMap: 1 } });\n      /** @param attenuation distance */\n      this.attenuationDistance = ParamConfig.FLOAT(100, {\n        range: [ATTENUATION_DISTANCE_MIN, 100],\n        rangeLocked: [true, false],\n        step: 0.01\n      });\n      /** @param attenuation color */\n      this.attenuationColor = ParamConfig.COLOR([1, 1, 1]);\n    }\n  };\n}\nexport function isValidMaterial(material) {\n  if (!material) {\n    return false;\n  }\n  return material.clearcoatRoughness != null;\n}\nclass TextureClearCoatMapParamsConfig extends MeshPhysicalParamConfig(NodeParamsConfig) {\n}\nclass TextureClearCoatMapMatNode extends TypedMatNode {\n  async material() {\n    const container = await this.compute();\n    return container.material();\n  }\n}\nconst tmpMeshPhysicalForIOR = new MeshPhysicalMaterial();\nconst tmpN2 = [0, 0];\nconst tmpN3 = [0, 0, 0];\nexport class MeshPhysicalController extends BaseTextureMapController {\n  constructor(node) {\n    super(node);\n    this.node = node;\n    this._sheenColorClone = new Color();\n    this._iridescenceRange = [0, 0];\n  }\n  initializeNode() {\n    this.add_hooks(this.node.p.useClearCoatMap, this.node.p.clearcoatMap);\n    this.add_hooks(this.node.p.useClearCoatNormalMap, this.node.p.clearcoatNormalMap);\n    this.add_hooks(this.node.p.useClearCoatRoughnessMap, this.node.p.clearcoatRoughnessMap);\n    this.add_hooks(this.node.p.useTransmissionMap, this.node.p.transmissionMap);\n    this.add_hooks(this.node.p.useThicknessMap, this.node.p.thicknessMap);\n    this.add_hooks(this.node.p.useIridescenceMap, this.node.p.iridescenceMap);\n  }\n  static async update(node) {\n    const container = await node.compute();\n    const material = container.material();\n    if (!isValidMaterial(material)) {\n      return;\n    }\n    node.controllers.physical.updateMaterial(material);\n  }\n  async updateMaterial(material) {\n    const pv = this.node.pv;\n    const mat = material;\n    tmpMeshPhysicalForIOR.ior = pv.ior;\n    mat.reflectivity = tmpMeshPhysicalForIOR.reflectivity;\n    mat.clearcoat = pv.clearcoat;\n    if (mat.clearcoatNormalScale != null) {\n      mat.clearcoatNormalScale.copy(pv.clearcoatNormalScale);\n    }\n    mat.clearcoatRoughness = pv.clearcoatRoughness;\n    if (isBooleanTrue(pv.useSheen)) {\n      this._sheenColorClone.copy(pv.sheenColor);\n      mat.sheen = pv.sheen;\n      mat.sheenRoughness = pv.sheenRoughness;\n      mat.sheenColor = this._sheenColorClone;\n    } else {\n      mat.sheen = 0;\n    }\n    if (isBooleanTrue(pv.useIridescence)) {\n      mat.iridescence = pv.iridescence;\n      mat.iridescenceIOR = pv.iridescenceIOR;\n      mat.iridescenceThicknessRange = pv.iridescenceThicknessRange.toArray(this._iridescenceRange);\n    } else {\n      mat.iridescence = 0;\n    }\n    mat.transmission = pv.transmission;\n    mat.thickness = pv.thickness;\n    mat.attenuationDistance = pv.attenuationDistance;\n    mat.attenuationColor = pv.attenuationColor;\n    await Promise.all([\n      this._update(material, \"clearcoatMap\", this.node.p.useClearCoatMap, this.node.p.clearcoatMap),\n      this._update(\n        material,\n        \"clearcoatNormalMap\",\n        this.node.p.useClearCoatNormalMap,\n        this.node.p.clearcoatNormalMap\n      ),\n      this._update(\n        material,\n        \"clearcoatRoughnessMap\",\n        this.node.p.useClearCoatRoughnessMap,\n        this.node.p.clearcoatRoughnessMap\n      ),\n      this._update(material, \"transmissionMap\", this.node.p.useTransmissionMap, this.node.p.transmissionMap),\n      this._update(material, \"thicknessMap\", this.node.p.useThicknessMap, this.node.p.thicknessMap),\n      this._update(material, \"iridescenceMap\", this.node.p.useIridescenceMap, this.node.p.iridescenceMap),\n      this._update(\n        material,\n        \"iridescenceThicknessMap\",\n        this.node.p.useIridescenceThicknessMap,\n        this.node.p.iridescenceThicknessMap\n      )\n    ]);\n  }\n  getTextures(material, record) {\n    record.set(\"clearcoatMap\", material.clearcoatMap);\n    record.set(\"clearcoatNormalMap\", material.clearcoatNormalMap);\n    record.set(\"clearcoatRoughnessMap\", material.clearcoatRoughnessMap);\n    record.set(\"transmissionMap\", material.transmissionMap);\n    record.set(\"thicknessMap\", material.thicknessMap);\n    record.set(\"iridescenceMap\", material.iridescenceMap);\n    record.set(\"iridescenceThicknessMap\", material.iridescenceThicknessMap);\n  }\n  setParamsFromMaterial(material, record) {\n    const clearcoatMap = () => {\n      const mapNode = record.get(\"clearcoatMap\");\n      this.node.p.useClearCoatMap.set(mapNode != null);\n      if (mapNode) {\n        this.node.p.clearcoatMap.setNode(mapNode, { relative: true });\n      }\n    };\n    const clearcoatNormalMap = () => {\n      const mapNode = record.get(\"clearcoatNormalMap\");\n      this.node.p.useClearCoatNormalMap.set(mapNode != null);\n      if (mapNode) {\n        this.node.p.clearcoatNormalMap.setNode(mapNode, { relative: true });\n      }\n    };\n    const clearcoatRoughnessMap = () => {\n      const mapNode = record.get(\"clearcoatRoughnessMap\");\n      this.node.p.useClearCoatRoughnessMap.set(mapNode != null);\n      if (mapNode) {\n        this.node.p.clearcoatRoughnessMap.setNode(mapNode, { relative: true });\n      }\n    };\n    const transmissionMap = () => {\n      const mapNode = record.get(\"transmissionMap\");\n      this.node.p.useTransmissionMap.set(mapNode != null);\n      if (mapNode) {\n        this.node.p.transmissionMap.setNode(mapNode, { relative: true });\n      }\n    };\n    const thicknessMap = () => {\n      const mapNode = record.get(\"thicknessMap\");\n      this.node.p.useThicknessMap.set(mapNode != null);\n      if (mapNode) {\n        this.node.p.thicknessMap.setNode(mapNode, { relative: true });\n      }\n    };\n    const iridescenceMap = () => {\n      const mapNode = record.get(\"iridescenceMap\");\n      this.node.p.useIridescenceMap.set(mapNode != null);\n      if (mapNode) {\n        this.node.p.iridescenceMap.setNode(mapNode, { relative: true });\n      }\n    };\n    const iridescenceThicknessMap = () => {\n      const mapNode = record.get(\"iridescenceThicknessMap\");\n      this.node.p.useIridescenceThicknessMap.set(mapNode != null);\n      if (mapNode) {\n        this.node.p.iridescenceThicknessMap.setNode(mapNode, { relative: true });\n      }\n    };\n    clearcoatMap();\n    clearcoatNormalMap();\n    clearcoatRoughnessMap();\n    transmissionMap();\n    thicknessMap();\n    iridescenceMap();\n    iridescenceThicknessMap();\n    const p = this.node.p;\n    p.ior.set(material.ior);\n    p.clearcoat.set(material.clearcoat);\n    material.clearcoatNormalScale.toArray(tmpN2);\n    p.clearcoatNormalScale.set(tmpN2);\n    p.clearcoatRoughness.set(material.clearcoatRoughness);\n    material.sheenColor.toArray(tmpN3);\n    p.sheenColor.set(tmpN3);\n    p.sheenColor.setConversion(ColorConversion.NONE);\n    p.sheen.set(material.sheen);\n    p.sheenRoughness.set(material.sheenRoughness);\n    p.transmission.set(material.transmission);\n    p.thickness.set(material.thickness);\n    p.attenuationDistance.set(material.attenuationDistance);\n    material.attenuationColor.toArray(tmpN3);\n    p.attenuationColor.set(tmpN3);\n    p.attenuationColor.setConversion(ColorConversion.NONE);\n    p.iridescence.set(material.iridescence);\n    p.iridescenceIOR.set(material.iridescenceIOR);\n    p.iridescenceThicknessRange.set(material.iridescenceThicknessRange);\n  }\n}\n", "\"use strict\";\nimport { NodeParamsConfig } from \"../utils/params/ParamsConfig\";\nimport {\n  UniformsTransparencyParamConfig,\n  UniformsTransparencyController\n} from \"./utils/UniformsTransparencyController\";\nimport {\n  AdvancedCommonController,\n  AdvancedCommonParamConfig\n} from \"./utils/AdvancedCommonController\";\nimport { MapParamConfig, TextureMapController } from \"./utils/TextureMapController\";\nimport {\n  AlphaMapParamConfig,\n  TextureAlphaMapController\n} from \"./utils/TextureAlphaMapController\";\nimport {\n  TextureBumpMapController,\n  BumpMapParamConfig\n} from \"./utils/TextureBumpMapController\";\nimport {\n  TextureEmissiveMapController,\n  EmissiveMapParamConfig\n} from \"./utils/TextureEmissiveMapController\";\nimport { TextureEnvMapController, EnvMapParamConfig } from \"./utils/TextureEnvMapController\";\nimport { TextureAOMapController, AOMapParamConfig } from \"./utils/TextureAOMapController\";\nimport {\n  TextureNormalMapController,\n  NormalMapParamConfig\n} from \"./utils/TextureNormalMapController\";\nimport {\n  TextureMetalnessRoughnessMapController,\n  MetalnessRoughnessMapParamConfig\n} from \"./utils/TextureMetalnessRoughnessMapController\";\nimport {\n  TextureLightMapController,\n  LightMapParamConfig\n} from \"./utils/TextureLightMapController\";\nimport { MeshPhysicalController, MeshPhysicalParamConfig } from \"./utils/MeshPhysicalController\";\nimport {\n  TextureDisplacementMapController,\n  DisplacementMapParamConfig\n} from \"./utils/TextureDisplacementMapController\";\nimport { BaseBuilderParamConfig, TypedBuilderMatNode } from \"./_BaseBuilder\";\nimport { AssemblerName } from \"../../poly/registers/assemblers/_BaseRegister\";\nimport { Poly } from \"../../Poly\";\nimport { FogParamConfig, UniformFogController } from \"./utils/UniformsFogController\";\nimport {\n  WireframeShaderMaterialController,\n  WireframeShaderMaterialParamsConfig\n} from \"./utils/WireframeShaderMaterialController\";\nimport { DefaultFolderParamConfig } from \"./utils/DefaultFolder\";\nimport { TexturesFolderParamConfig } from \"./utils/TexturesFolder\";\nimport { AdvancedFolderParamConfig } from \"./utils/AdvancedFolder\";\nimport { PCSSController, PCSSParamConfig } from \"./utils/PCSSController\";\nimport {\n  CustomMaterialMeshParamConfig,\n  materialMeshAssemblerCustomMaterialRequested\n} from \"./utils/customMaterials/CustomMaterialMesh\";\nimport { MatType } from \"../../poly/registers/nodes/types/Mat\";\nfunction AdvancedMeshPhysicalParamConfig(Base) {\n  return class Mixin extends PCSSParamConfig(\n    FogParamConfig(WireframeShaderMaterialParamsConfig(AdvancedCommonParamConfig(BaseBuilderParamConfig(Base))))\n  ) {\n  };\n}\nclass MeshPhysicalBuilderMatParamsConfig extends CustomMaterialMeshParamConfig(\n  AdvancedMeshPhysicalParamConfig(\n    /* advanced */\n    AdvancedFolderParamConfig(\n      MeshPhysicalParamConfig(\n        MetalnessRoughnessMapParamConfig(\n          NormalMapParamConfig(\n            LightMapParamConfig(\n              EnvMapParamConfig(\n                EmissiveMapParamConfig(\n                  DisplacementMapParamConfig(\n                    BumpMapParamConfig(\n                      AOMapParamConfig(\n                        AlphaMapParamConfig(\n                          MapParamConfig(\n                            /* textures */\n                            TexturesFolderParamConfig(\n                              UniformsTransparencyParamConfig(\n                                DefaultFolderParamConfig(NodeParamsConfig)\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n) {\n}\nconst ParamsConfig = new MeshPhysicalBuilderMatParamsConfig();\nexport class MeshPhysicalBuilderMatNode extends TypedBuilderMatNode {\n  constructor() {\n    super(...arguments);\n    this.paramsConfig = ParamsConfig;\n    this.controllers = {\n      advancedCommon: new AdvancedCommonController(this),\n      alphaMap: new TextureAlphaMapController(this),\n      aoMap: new TextureAOMapController(this),\n      bumpMap: new TextureBumpMapController(this),\n      displacementMap: new TextureDisplacementMapController(this),\n      emissiveMap: new TextureEmissiveMapController(this),\n      envMap: new TextureEnvMapController(this),\n      uniformFog: new UniformFogController(this),\n      lightMap: new TextureLightMapController(this),\n      map: new TextureMapController(this),\n      metalnessRoughnessMap: new TextureMetalnessRoughnessMapController(this),\n      normalMap: new TextureNormalMapController(this),\n      physical: new MeshPhysicalController(this),\n      PCSS: new PCSSController(this),\n      uniformTransparency: new UniformsTransparencyController(this),\n      wireframeShader: new WireframeShaderMaterialController(this)\n    };\n    this.controllersList = Object.values(this.controllers);\n  }\n  static type() {\n    return MatType.MESH_PHYSICAL_BUILDER;\n  }\n  usedAssembler() {\n    return AssemblerName.GL_MESH_PHYSICAL;\n  }\n  _createAssemblerController() {\n    return Poly.assemblersRegister.assembler(this, this.usedAssembler());\n  }\n  customMaterialRequested(customName) {\n    return materialMeshAssemblerCustomMaterialRequested(this, customName);\n  }\n  createMaterial() {\n    const material = super.createMaterial();\n    material.isMeshStandardMaterial = true;\n    material.isMeshPhysicalMaterial = true;\n    return material;\n  }\n  async cook() {\n    this._material = this._material || this.createMaterial();\n    await Promise.all(this.controllersPromises(this._material));\n    this.compileIfRequired(this._material);\n    this.setMaterial(this._material);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
