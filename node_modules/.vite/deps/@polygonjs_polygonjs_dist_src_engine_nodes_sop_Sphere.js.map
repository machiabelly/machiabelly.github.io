{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/core/geometry/builders/SphereBuilder.js", "../../@polygonjs/polygonjs/dist/src/engine/operations/sop/Sphere.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/sop/Sphere.js"],
  "sourcesContent": ["\"use strict\";\nimport { BufferGeometry, Vector3, Float32BufferAttribute } from \"three\";\nexport class SphereBuilder {\n  static create(parameters) {\n    const geometry = new BufferGeometry();\n    geometry.type = \"SphereBuilder\";\n    let { radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength, asLines, open } = parameters;\n    if (phiStart == null) {\n      phiStart = 0;\n    }\n    if (phiLength == null) {\n      phiLength = Math.PI * 2;\n    }\n    if (thetaStart == null) {\n      thetaStart = 0;\n    }\n    if (thetaLength == null) {\n      thetaLength = Math.PI;\n    }\n    if (open == null) {\n      open = false;\n    }\n    widthSegments = Math.max(3, Math.floor(widthSegments));\n    heightSegments = Math.max(2, Math.floor(heightSegments));\n    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);\n    let index = 0;\n    const grid = [];\n    const vertex = new Vector3();\n    const normal = new Vector3();\n    const indices = [];\n    const vertices = [];\n    const normals = [];\n    const uvs = [];\n    for (let iy = 0; iy <= heightSegments; iy++) {\n      const verticesRow = [];\n      const v = iy / heightSegments;\n      let uOffset = 0;\n      if (iy == 0 && thetaStart == 0) {\n        uOffset = 0.5 / widthSegments;\n      } else if (iy == heightSegments && thetaEnd == Math.PI) {\n        uOffset = -0.5 / widthSegments;\n      }\n      for (let ix = 0; ix <= widthSegments; ix++) {\n        const u = ix / widthSegments;\n        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        vertex.y = radius * Math.cos(thetaStart + v * thetaLength);\n        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);\n        vertices.push(vertex.x, vertex.y, vertex.z);\n        normal.copy(vertex).normalize();\n        normals.push(normal.x, normal.y, normal.z);\n        uvs.push(u + uOffset, 1 - v);\n        verticesRow.push(index++);\n      }\n      grid.push(verticesRow);\n    }\n    for (let iy = 0; iy < heightSegments; iy++) {\n      for (let ix = 0; ix < widthSegments; ix++) {\n        const a = grid[iy][ix + 1];\n        const b = grid[iy][ix];\n        const c = grid[iy + 1][ix];\n        const d = grid[iy + 1][ix + 1];\n        if (asLines) {\n          if (iy !== 0 || thetaStart > 0)\n            indices.push(a, b);\n          indices.push(b, c);\n          if (open) {\n            if (ix < widthSegments - 1) {\n              indices.push(c, d);\n            }\n            if (iy < heightSegments - 1) {\n              indices.push(a, d);\n            }\n          }\n        } else {\n          if (iy !== 0 || thetaStart > 0)\n            indices.push(a, b, d);\n          if (iy !== heightSegments - 1 || thetaEnd < Math.PI)\n            indices.push(b, c, d);\n        }\n      }\n    }\n    if (open) {\n      const a = grid[heightSegments][widthSegments - 1];\n      const b = grid[heightSegments][widthSegments];\n      indices.push(a, b);\n      const c = grid[heightSegments - 1][widthSegments];\n      const d = grid[heightSegments][widthSegments];\n      indices.push(c, d);\n    }\n    geometry.setIndex(indices);\n    geometry.setAttribute(\"position\", new Float32BufferAttribute(vertices, 3));\n    geometry.setAttribute(\"normal\", new Float32BufferAttribute(normals, 3));\n    geometry.setAttribute(\"uv\", new Float32BufferAttribute(uvs, 2));\n    return geometry;\n  }\n}\n", "\"use strict\";\nimport { BaseSopOperation } from \"./_Base\";\nimport { IcosahedronGeometry, Vector2, Vector3, Box3 } from \"three\";\nimport { InputCloneMode } from \"../../../engine/poly/InputCloneMode\";\nimport { isBooleanTrue } from \"../../../core/BooleanValue\";\nimport { ObjectType } from \"../../../core/geometry/Constant\";\nimport { SphereBuilder } from \"../../../core/geometry/builders/SphereBuilder\";\nconst tmpBox = new Box3();\nconst tmpSize = new Vector3();\nconst tmpCenter = new Vector3();\nvar SphereType = /* @__PURE__ */ ((SphereType2) => {\n  SphereType2[\"DEFAULT\"] = \"default\";\n  SphereType2[\"ISOCAHEDRON\"] = \"isocahedron\";\n  return SphereType2;\n})(SphereType || {});\nexport const SPHERE_TYPE = {\n  default: 0,\n  isocahedron: 1\n};\nexport const SPHERE_TYPES = [\"default\" /* DEFAULT */, \"isocahedron\" /* ISOCAHEDRON */];\nexport class SphereSopOperation extends BaseSopOperation {\n  static type() {\n    return \"sphere\";\n  }\n  cook(inputCoreGroups, params) {\n    const coreGroup = inputCoreGroups[0];\n    const object = coreGroup ? this._cookWithInput(coreGroup, params) : this._cookWithoutInput(params);\n    if (this._node) {\n      object.name = this._node.name();\n    }\n    return this.createCoreGroupFromObjects([object]);\n  }\n  _cookWithoutInput(params) {\n    const geometry = this._createRequiredGeometry(params);\n    geometry.translate(params.center.x, params.center.y, params.center.z);\n    const object = this._createSphereObject(geometry, params);\n    return object;\n  }\n  _cookWithInput(coreGroup, params) {\n    coreGroup.boundingBox(tmpBox);\n    tmpBox.getSize(tmpSize);\n    tmpBox.getCenter(tmpCenter);\n    const geometry = this._createRequiredGeometry(params);\n    geometry.scale(tmpSize.x, tmpSize.y, tmpSize.z);\n    geometry.translate(params.center.x, params.center.y, params.center.z);\n    geometry.translate(tmpCenter.x, tmpCenter.y, tmpCenter.z);\n    const object = this._createSphereObject(geometry, params);\n    return object;\n  }\n  _createSphereObject(geometry, params) {\n    return BaseSopOperation.createObject(geometry, params.asLines ? ObjectType.LINE_SEGMENTS : ObjectType.MESH);\n  }\n  _createRequiredGeometry(params) {\n    if (params.type == SPHERE_TYPE.default) {\n      return this._createDefaultSphere(params);\n    } else {\n      return this._createDefaultIsocahedron(params);\n    }\n  }\n  _createDefaultSphere(params) {\n    const geometry = isBooleanTrue(params.open) ? SphereBuilder.create({\n      radius: params.radius,\n      widthSegments: params.resolution.x,\n      heightSegments: params.resolution.y,\n      phiStart: params.phiStart,\n      phiLength: params.phiLength,\n      thetaStart: params.thetaStart,\n      thetaLength: params.thetaLength,\n      asLines: params.asLines,\n      open: true\n    }) : SphereBuilder.create({\n      radius: params.radius,\n      widthSegments: params.resolution.x,\n      heightSegments: params.resolution.y,\n      asLines: params.asLines,\n      open: false\n    });\n    return geometry;\n  }\n  _createDefaultIsocahedron(params) {\n    return new IcosahedronGeometry(params.radius, params.detail);\n  }\n}\nSphereSopOperation.DEFAULT_PARAMS = {\n  type: SPHERE_TYPE.default,\n  radius: 1,\n  resolution: new Vector2(30, 30),\n  open: false,\n  phiStart: 0,\n  phiLength: Math.PI * 2,\n  thetaStart: 0,\n  thetaLength: Math.PI,\n  detail: 1,\n  center: new Vector3(0, 0, 0),\n  asLines: false\n};\nSphereSopOperation.INPUT_CLONED_STATE = InputCloneMode.NEVER;\n", "\"use strict\";\nimport { TypedSopNode } from \"./_Base\";\nimport { SphereSopOperation, SPHERE_TYPES, SPHERE_TYPE } from \"../../operations/sop/Sphere\";\nimport { NodeParamsConfig, ParamConfig } from \"../utils/params/ParamsConfig\";\nimport { SopType } from \"../../poly/registers/nodes/types/Sop\";\nconst DEFAULT = SphereSopOperation.DEFAULT_PARAMS;\nconst step = 1e-5;\nclass SphereSopParamsConfig extends NodeParamsConfig {\n  constructor() {\n    super(...arguments);\n    /** @param type of sphere (default sphere or isocahedron) */\n    this.type = ParamConfig.INTEGER(DEFAULT.type, {\n      menu: {\n        entries: SPHERE_TYPES.map((name) => {\n          return { name, value: SPHERE_TYPE[name] };\n        })\n      }\n    });\n    /** @param radius of the sphere when the type is default */\n    this.radius = ParamConfig.FLOAT(DEFAULT.radius, {\n      range: [0, 2],\n      rangeLocked: [true, false]\n    });\n    /** @param resolution - number of segments in x and y */\n    this.resolution = ParamConfig.VECTOR2(DEFAULT.resolution, { visibleIf: { type: SPHERE_TYPE.default } });\n    /** @param if set to 1, you can then set the phiStart, phi_end, thetaStart and theta_end */\n    this.open = ParamConfig.BOOLEAN(DEFAULT.open, { visibleIf: { type: SPHERE_TYPE.default } });\n    /** @param start of phi angle */\n    this.phiStart = ParamConfig.FLOAT(DEFAULT.phiStart, {\n      range: [0, Math.PI * 2],\n      visibleIf: { type: SPHERE_TYPE.default, open: true },\n      step\n    });\n    /** @param length of phi opening */\n    this.phiLength = ParamConfig.FLOAT(\"$PI*2\", {\n      range: [0, Math.PI * 2],\n      visibleIf: { type: SPHERE_TYPE.default, open: true },\n      step\n    });\n    /** @param start of theta angle */\n    this.thetaStart = ParamConfig.FLOAT(DEFAULT.thetaStart, {\n      range: [0, Math.PI],\n      visibleIf: { type: SPHERE_TYPE.default, open: true },\n      step\n    });\n    /** @param length of theta opening */\n    this.thetaLength = ParamConfig.FLOAT(\"$PI\", {\n      range: [0, Math.PI],\n      visibleIf: { type: SPHERE_TYPE.default, open: true },\n      step\n    });\n    /** @param resolution of the sphere when the type is isocahedron */\n    this.detail = ParamConfig.INTEGER(DEFAULT.detail, {\n      range: [0, 5],\n      rangeLocked: [true, false],\n      visibleIf: { type: SPHERE_TYPE.isocahedron }\n    });\n    /** @param center of the sphere */\n    this.center = ParamConfig.VECTOR3(DEFAULT.center);\n    /** @param create lines instead of polygons */\n    this.asLines = ParamConfig.BOOLEAN(DEFAULT.asLines);\n  }\n}\nconst ParamsConfig = new SphereSopParamsConfig();\nexport class SphereSopNode extends TypedSopNode {\n  constructor() {\n    super(...arguments);\n    this.paramsConfig = ParamsConfig;\n  }\n  static type() {\n    return SopType.SPHERE;\n  }\n  initializeNode() {\n    this.io.inputs.setCount(0, 1);\n    this.io.inputs.initInputsClonedState(SphereSopOperation.INPUT_CLONED_STATE);\n  }\n  cook(input_contents) {\n    this._operation = this._operation || new SphereSopOperation(this.scene(), this.states, this);\n    const core_group = this._operation.cook(input_contents, this.pv);\n    this.setCoreGroup(core_group);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
