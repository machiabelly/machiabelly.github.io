{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/operations/sop/AttribId.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/sop/AttribId.js"],
  "sourcesContent": ["\"use strict\";\nimport { TypeAssert } from \"./../../poly/Assert\";\nimport { AttribClass, ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP } from \"./../../../core/geometry/Constant\";\nimport { BaseSopOperation } from \"./_Base\";\nimport { BufferAttribute } from \"three\";\nimport { isBooleanTrue } from \"../../../core/Type\";\nimport {\n  corePointClassFactory,\n  corePrimitiveClassFactory,\n  coreVertexClassFactory\n} from \"../../../core/geometry/CoreObjectFactory\";\nimport { primitivesFromObject } from \"../../../core/geometry/entities/primitive/CorePrimitiveUtils\";\nimport { pointsFromObject } from \"../../../core/geometry/entities/point/CorePointUtils\";\nimport { verticesFromObject } from \"../../../core/geometry/entities/vertex/CoreVertexUtils\";\nconst _points = [];\nconst _vertices = [];\nconst _primitives = [];\nexport class AttribIdSopOperation extends BaseSopOperation {\n  static type() {\n    return \"attribId\";\n  }\n  cook(inputCoreGroups, params) {\n    const coreGroup = inputCoreGroups[0];\n    const attribClass = ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP[params.class];\n    this._addAttribute(attribClass, coreGroup, params);\n    return coreGroup;\n  }\n  async _addAttribute(attribClass, coreGroup, params) {\n    const objects = coreGroup.allObjects();\n    switch (attribClass) {\n      case AttribClass.POINT:\n        return this._addPointAttributesToObjects(objects, params);\n      case AttribClass.VERTEX: {\n        this._addVertexAttributesToObjects(objects, params);\n        return;\n      }\n      case AttribClass.PRIMITIVE: {\n        this._addPrimitiveAttributesToObjects(objects, params);\n        return;\n      }\n      case AttribClass.OBJECT:\n        return this._addAttributesToEntities(coreGroup.allCoreObjects(), params);\n      case AttribClass.CORE_GROUP:\n        return;\n    }\n    TypeAssert.unreachable(attribClass);\n  }\n  // private _addObjectAttributes(coreObjects: BaseCoreObject<CoreObjectType>[], params: AttribIdSopParams) {\n  // \tconst objectsCount = coreObjects.length;\n  // \tif (objectsCount > 1) {\n  // \t\tlet i = 0;\n  // \t\tfor (const coreObject of coreObjects) {\n  // \t\t\tif (isBooleanTrue(params.id)) {\n  // \t\t\t\tcoreObject.addAttribute(params.idName, i);\n  // \t\t\t}\n  // \t\t\tif (isBooleanTrue(params.idn)) {\n  // \t\t\t\tcoreObject.addAttribute(params.idnName, i / (objectsCount - 1));\n  // \t\t\t}\n  // \t\t\ti++;\n  // \t\t}\n  // \t} else {\n  // \t\tcoreObjects[0].addAttribute(params.idName, 0);\n  // \t\tcoreObjects[0].addAttribute(params.idnName, 0);\n  // \t}\n  // }\n  _addPointAttributesToObjects(objects, params) {\n    for (const object of objects) {\n      this._addPointAttributesToObject(object, params);\n    }\n  }\n  _addVertexAttributesToObjects(objects, params) {\n    for (const object of objects) {\n      this._addVertexAttributes(object, params);\n    }\n  }\n  _addPrimitiveAttributesToObjects(objects, params) {\n    for (const object of objects) {\n      this._addPrimitiveAttributes(object, params);\n    }\n  }\n  _addPointAttributesToObject(object, params) {\n    const pointClass = corePointClassFactory(object);\n    pointsFromObject(object, _points);\n    const entitiesCount = _points.length;\n    if (isBooleanTrue(params.id)) {\n      const idValues = new Array(entitiesCount);\n      for (let i = 0; i < entitiesCount; i++) {\n        idValues[i] = i;\n      }\n      const idArray = new Float32Array(idValues);\n      const attrib = new BufferAttribute(idArray, 1);\n      pointClass.addAttribute(object, params.idName, attrib);\n    }\n    if (isBooleanTrue(params.idn)) {\n      const idnValues = new Array(entitiesCount);\n      const pointsCountMinus1 = entitiesCount - 1;\n      if (pointsCountMinus1 == 0) {\n        for (let i = 0; i < entitiesCount; i++) {\n          idnValues[i] = 0;\n        }\n      } else {\n        for (let i = 0; i < entitiesCount; i++) {\n          idnValues[i] = i / (entitiesCount - 1);\n        }\n      }\n      const idnArray = new Float32Array(idnValues);\n      const attrib = new BufferAttribute(idnArray, 1);\n      pointClass.addAttribute(object, params.idnName, attrib);\n    }\n  }\n  _addVertexAttributes(object, params) {\n    const vertexClass = coreVertexClassFactory(object);\n    verticesFromObject(object, _vertices);\n    if (isBooleanTrue(params.id)) {\n      const attribute = {\n        isString: false,\n        array: new Array(_vertices.length),\n        itemSize: 1\n      };\n      vertexClass.addAttribute(object, params.idName, attribute);\n    }\n    if (isBooleanTrue(params.idn)) {\n      const attribute = {\n        isString: false,\n        array: new Array(_vertices.length),\n        itemSize: 1\n      };\n      vertexClass.addAttribute(object, params.idnName, attribute);\n    }\n    this._addAttributesToEntities(_vertices, params);\n  }\n  _addPrimitiveAttributes(object, params) {\n    const primitiveClass = corePrimitiveClassFactory(object);\n    primitivesFromObject(object, _primitives);\n    if (isBooleanTrue(params.id)) {\n      const attribute = {\n        isString: false,\n        array: new Array(_primitives.length),\n        itemSize: 1\n      };\n      primitiveClass.addAttribute(object, params.idName, attribute);\n    }\n    if (isBooleanTrue(params.idn)) {\n      const attribute = {\n        isString: false,\n        array: new Array(_primitives.length),\n        itemSize: 1\n      };\n      primitiveClass.addAttribute(object, params.idnName, attribute);\n    }\n    this._addAttributesToEntities(_primitives, params);\n  }\n  _addAttributesToEntities(entities, params) {\n    const entitiesCount = entities.length;\n    if (isBooleanTrue(params.id)) {\n      let i = 0;\n      for (const entity of entities) {\n        entity.setAttribValue(params.idName, i);\n        i++;\n      }\n    }\n    if (isBooleanTrue(params.idn)) {\n      const pointsCountMinus1 = entitiesCount - 1;\n      if (pointsCountMinus1 == 0) {\n        let i = 0;\n        for (const entity of entities) {\n          entity.setAttribValue(params.idnName, 0);\n          i++;\n        }\n      } else {\n        let i = 0;\n        for (const entity of entities) {\n          entity.setAttribValue(params.idnName, i / (entitiesCount - 1));\n          i++;\n        }\n      }\n    }\n  }\n}\nAttribIdSopOperation.DEFAULT_PARAMS = {\n  class: ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP.indexOf(AttribClass.POINT),\n  id: true,\n  idName: \"id\",\n  idn: true,\n  idnName: \"idn\"\n};\n", "\"use strict\";\nimport { ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP } from \"./../../../core/geometry/Constant\";\nimport { TypedSopNode } from \"./_Base\";\nimport { InputCloneMode } from \"../../poly/InputCloneMode\";\nimport { AttribClassMenuEntriesWithoutCoreGroup } from \"./../../../core/geometry/Constant\";\nimport { AttribIdSopOperation } from \"../../operations/sop/AttribId\";\nimport { SopType } from \"../../poly/registers/nodes/types/Sop\";\nimport { NodeParamsConfig, ParamConfig } from \"../utils/params/ParamsConfig\";\nconst DEFAULT = AttribIdSopOperation.DEFAULT_PARAMS;\nclass AttribIdSopParamsConfig extends NodeParamsConfig {\n  constructor() {\n    super(...arguments);\n    /** @param the attribute class (geometry or object) */\n    this.class = ParamConfig.INTEGER(DEFAULT.class, {\n      menu: {\n        entries: AttribClassMenuEntriesWithoutCoreGroup\n      }\n    });\n    /** @param sets to true to create the id attribute */\n    this.id = ParamConfig.BOOLEAN(DEFAULT.id);\n    /** @param name of id attribute */\n    this.idName = ParamConfig.STRING(DEFAULT.idName, {\n      visibleIf: { id: 1 }\n    });\n    /** @param sets to true to create the id attribute */\n    this.idn = ParamConfig.BOOLEAN(DEFAULT.idn);\n    /** @param name of the position attribute */\n    /** @param name of idn attribute */\n    this.idnName = ParamConfig.STRING(DEFAULT.idnName, {\n      visibleIf: { idn: 1 }\n    });\n  }\n}\nconst ParamsConfig = new AttribIdSopParamsConfig();\nexport class AttribIdSopNode extends TypedSopNode {\n  constructor() {\n    super(...arguments);\n    this.paramsConfig = ParamsConfig;\n  }\n  static type() {\n    return SopType.ATTRIB_ID;\n  }\n  initializeNode() {\n    this.io.inputs.setCount(1);\n    this.io.inputs.initInputsClonedState([InputCloneMode.FROM_NODE]);\n  }\n  cook(inputCoreGroups) {\n    this._operation = this._operation || new AttribIdSopOperation(this.scene(), this.states, this);\n    const coreGroup = this._operation.cook(inputCoreGroups, this.pv);\n    this.setCoreGroup(coreGroup);\n  }\n  //\n  //\n  // API UTILS\n  //\n  //\n  setAttribClass(attribClass) {\n    if (ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP.includes(attribClass)) {\n      this.p.class.set(ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP.indexOf(attribClass));\n    } else {\n      console.warn(`${attribClass} is not possible on this node`);\n    }\n  }\n  attribClass() {\n    return ATTRIBUTE_CLASSES_WITHOUT_CORE_GROUP[this.pv.class];\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
