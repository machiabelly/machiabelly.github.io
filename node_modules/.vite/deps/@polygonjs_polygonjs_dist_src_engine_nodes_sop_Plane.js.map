{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/operations/sop/Plane.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/sop/Plane.js"],
  "sourcesContent": ["\"use strict\";\nimport { BaseSopOperation } from \"./_Base\";\nimport { Vector2, Vector3, PlaneGeometry, Quaternion, BoxGeometry, Box3 } from \"three\";\nimport { CoreTransform, rotateGeometry } from \"../../../core/Transform\";\nimport { InputCloneMode } from \"../../../engine/poly/InputCloneMode\";\nimport { isBooleanTrue } from \"../../../core/BooleanValue\";\nimport { ObjectType } from \"../../../core/geometry/Constant\";\nconst tmpBox = new Box3();\nconst tmpBoxPreRotation = new Box3();\nconst tmpSize = new Vector3();\nconst tmpCenter = new Vector3();\nconst DEFAULT_UP = new Vector3(0, 0, 1);\nconst q = new Quaternion();\nexport const DEFAULT_PARAMS = {\n  size: new Vector2(1, 1),\n  useSegmentsCount: false,\n  stepSize: 1,\n  segments: new Vector2(1, 1),\n  direction: new Vector3(0, 1, 0),\n  center: new Vector3(0, 0, 0),\n  asLines: false\n};\nconst _segmentsCount = new Vector2(1, 1);\nexport class PlaneSopOperation extends BaseSopOperation {\n  constructor() {\n    super(...arguments);\n    this._coreTransform = new CoreTransform();\n  }\n  static type() {\n    return \"plane\";\n  }\n  cook(inputCoreGroups, params) {\n    const coreGroup = inputCoreGroups[0];\n    if (coreGroup) {\n      return this._cookWithInput(coreGroup, params);\n    } else {\n      return this._cookWithoutInput(params);\n    }\n  }\n  _cookWithoutInput(params) {\n    const geometry = this._createPlane(params.size, params);\n    rotateGeometry(geometry, DEFAULT_UP, params.direction);\n    const matrix = this._coreTransform.translationMatrix(params.center);\n    geometry.applyMatrix4(matrix);\n    const object = this._createPlaneObject(geometry, params);\n    return this.createCoreGroupFromObjects([object]);\n  }\n  _cookWithInput(coreGroup, params) {\n    coreGroup.boundingBox(tmpBoxPreRotation);\n    tmpBoxPreRotation.getCenter(tmpCenter);\n    coreGroup.boundingBox(tmpBox);\n    tmpBox.getSize(tmpSize);\n    tmpBox.getCenter(tmpCenter);\n    const boxGeometry = new BoxGeometry(tmpSize.x, tmpSize.y, tmpSize.z, 1, 1, 1);\n    function _applyInputQuaternion(_q) {\n      boxGeometry.applyQuaternion(_q);\n      boxGeometry.computeBoundingBox();\n    }\n    function _setInputRotation() {\n      q.setFromUnitVectors(DEFAULT_UP, params.direction);\n      _applyInputQuaternion(q);\n    }\n    _setInputRotation();\n    const bboxPostRotation = boxGeometry.boundingBox;\n    bboxPostRotation.getSize(tmpSize);\n    const size2d = new Vector2(tmpSize.x, tmpSize.y);\n    const geometry = this._createPlane(size2d, params);\n    rotateGeometry(geometry, DEFAULT_UP, params.direction);\n    geometry.translate(tmpCenter.x, tmpCenter.y, tmpCenter.z);\n    const object = this._createPlaneObject(geometry, params);\n    return this.createCoreGroupFromObjects([object]);\n  }\n  _createPlaneObject(geometry, params) {\n    return BaseSopOperation.createObject(geometry, params.asLines ? ObjectType.LINE_SEGMENTS : ObjectType.MESH);\n  }\n  _createPlane(size, params) {\n    size = size.clone();\n    if (isBooleanTrue(params.useSegmentsCount)) {\n      _segmentsCount.x = Math.floor(params.segments.x);\n      _segmentsCount.y = Math.floor(params.segments.y);\n    } else {\n      if (params.stepSize > 0) {\n        size.x = Math.max(size.x, params.stepSize);\n        size.y = Math.max(size.y, params.stepSize);\n        _segmentsCount.x = Math.floor(size.x / params.stepSize);\n        _segmentsCount.y = Math.floor(size.y / params.stepSize);\n        size.x = _segmentsCount.x * params.stepSize;\n        size.y = _segmentsCount.y * params.stepSize;\n      }\n    }\n    const geometry = new PlaneGeometry(size.x, size.y, _segmentsCount.x, _segmentsCount.y);\n    if (isBooleanTrue(params.asLines)) {\n      const gridX = Math.floor(_segmentsCount.x);\n      const gridY = Math.floor(_segmentsCount.y);\n      const gridX1 = gridX + 1;\n      const indices = [];\n      for (let iy = 0; iy < gridY; iy++) {\n        for (let ix = 0; ix < gridX; ix++) {\n          const a = ix + gridX1 * iy;\n          const b = ix + gridX1 * (iy + 1);\n          const d = ix + 1 + gridX1 * iy;\n          indices.push(a, b);\n          indices.push(a, d);\n          const lastX = ix == gridX - 1;\n          const lastY = iy == gridY - 1;\n          if (lastX || lastY) {\n            const c = ix + 1 + gridX1 * (iy + 1);\n            if (lastX) {\n              indices.push(d, c);\n            }\n            if (lastY) {\n              indices.push(b, c);\n            }\n          }\n        }\n      }\n      geometry.setIndex(indices);\n    }\n    return geometry;\n  }\n}\nPlaneSopOperation.DEFAULT_PARAMS = DEFAULT_PARAMS;\nPlaneSopOperation.INPUT_CLONED_STATE = InputCloneMode.NEVER;\n", "\"use strict\";\nimport { TypedSopNode } from \"./_Base\";\nimport { PlaneSopOperation } from \"../../operations/sop/Plane\";\nimport { NodeParamsConfig, ParamConfig } from \"../utils/params/ParamsConfig\";\nimport { SopType } from \"../../poly/registers/nodes/types/Sop\";\nconst DEFAULT = PlaneSopOperation.DEFAULT_PARAMS;\nclass PlaneSopParamsConfig extends NodeParamsConfig {\n  constructor() {\n    super(...arguments);\n    /** @param size of the plane */\n    this.size = ParamConfig.VECTOR2(DEFAULT.size);\n    /** @param defines if the plane resolution is sets via the number of segments or via the step size */\n    this.useSegmentsCount = ParamConfig.BOOLEAN(DEFAULT.useSegmentsCount);\n    /** @param step size */\n    this.stepSize = ParamConfig.FLOAT(DEFAULT.stepSize, {\n      range: [1e-3, 2],\n      rangeLocked: [false, false],\n      visibleIf: { useSegmentsCount: 0 }\n    });\n    /** @param segments count */\n    this.segments = ParamConfig.VECTOR2(DEFAULT.segments, { visibleIf: { useSegmentsCount: 1 } });\n    /** @param axis perpendicular to the plane */\n    this.direction = ParamConfig.VECTOR3(DEFAULT.direction);\n    /** @param center of the plane */\n    this.center = ParamConfig.VECTOR3(DEFAULT.center);\n    /** @param create lines instead of polygons */\n    this.asLines = ParamConfig.BOOLEAN(DEFAULT.asLines);\n  }\n}\nconst ParamsConfig = new PlaneSopParamsConfig();\nexport class PlaneSopNode extends TypedSopNode {\n  constructor() {\n    super(...arguments);\n    this.paramsConfig = ParamsConfig;\n  }\n  static type() {\n    return SopType.PLANE;\n  }\n  initializeNode() {\n    this.io.inputs.setCount(0, 1);\n    this.io.inputs.initInputsClonedState(PlaneSopOperation.INPUT_CLONED_STATE);\n  }\n  cook(input_contents) {\n    this._operation = this._operation || new PlaneSopOperation(this.scene(), this.states, this);\n    const core_group = this._operation.cook(input_contents, this.pv);\n    this.setCoreGroup(core_group);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
