{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/io/self_contained/Common.js", "../../@polygonjs/polygonjs/dist/src/engine/io/manifest/import/SceneData.js"],
  "sourcesContent": ["\"use strict\";\nexport var SelfContainedFileName = /* @__PURE__ */ ((SelfContainedFileName2) => {\n  SelfContainedFileName2[\"EXPORT_MANIFEST\"] = \"scene/export_manifest.json\";\n  SelfContainedFileName2[\"CODE_PREFIX\"] = \"scene/code\";\n  SelfContainedFileName2[\"PROPERTIES\"] = \"scene/code/properties.json\";\n  SelfContainedFileName2[\"EDITOR\"] = \"scene/editor.json\";\n  SelfContainedFileName2[\"ASSETS\"] = \"scene/assets.json\";\n  SelfContainedFileName2[\"POLYGONJS\"] = \"js/all.js\";\n  SelfContainedFileName2[\"SCENE_DATA_LOADER\"] = \"js/sceneDataLoader.js\";\n  SelfContainedFileName2[\"POLY_CONFIG\"] = \"js/polyConfig.js\";\n  SelfContainedFileName2[\"JS_FILES\"] = \"scene/js_files.json\";\n  SelfContainedFileName2[\"POSTER\"] = \"images/poster.png\";\n  return SelfContainedFileName2;\n})(SelfContainedFileName || {});\n", "\"use strict\";\nimport { sanitizeUrl } from \"../../../../core/UrlHelper\";\nimport { PolyEventsDispatcher } from \"../../common/EventsDispatcher\";\nimport { PROGRESS_RATIO } from \"../../common/Progress\";\nimport { SelfContainedFileName } from \"../../self_contained/Common\";\nfunction _shaderUrl(options) {\n  const { urlPrefix, nodePath, shaderName, timestamp } = options;\n  return `${urlPrefix}/root/${nodePath}.${shaderName}.glsl?t=${timestamp}`;\n}\nfunction _jsFunctionBodyUrl(options) {\n  const { urlPrefix, nodePath, timestamp } = options;\n  return `${urlPrefix}/root/${nodePath}.txt?t=${timestamp}`;\n}\nfunction _iterateShaders(manifest, callback) {\n  const shaderNodePaths = Object.keys(manifest.shaders);\n  for (let nodePath of shaderNodePaths) {\n    const nodeShaders = manifest.shaders[nodePath];\n    const nodeShaderNames = Object.keys(nodeShaders);\n    for (let shaderName of nodeShaderNames) {\n      const timestamp = nodeShaders[shaderName];\n      callback({ nodePath, shaderName, timestamp });\n    }\n  }\n}\nfunction _iterateFunctionBodies(manifest, callback) {\n  const nodePaths = Object.keys(manifest.jsFunctionBodies);\n  for (let nodePath of nodePaths) {\n    const timestamp = manifest.jsFunctionBodies[nodePath];\n    callback({ nodePath, timestamp });\n  }\n}\nexport class SceneDataManifestImporter {\n  static async importSceneData(importData) {\n    if (importData.editorMode == null) {\n      importData.editorMode = false;\n    }\n    const manifest = importData.manifest;\n    const urlPrefix = importData.urlPrefix || SelfContainedFileName.CODE_PREFIX;\n    const nodePaths = Object.keys(manifest.nodes);\n    const nodeUrls = [];\n    for (let node_path of nodePaths) {\n      const timestamp = manifest.nodes[node_path];\n      const url = `${urlPrefix}/root/${node_path}.json?t=${timestamp}`;\n      nodeUrls.push(url);\n    }\n    const root_url = `${urlPrefix}/root.json?t=${manifest.root}`;\n    const properties_url = `${urlPrefix}/properties.json?t=${manifest.properties}`;\n    const allUrls = [root_url, properties_url];\n    if (importData.editorMode) {\n      const now = Date.now();\n      allUrls.push(`${urlPrefix}/ui.json?t=${now}`);\n    }\n    for (let nodeUrl of nodeUrls) {\n      allUrls.push(nodeUrl);\n    }\n    const shaderUrls = [];\n    _iterateShaders(manifest, (options) => {\n      const shaderUrl = _shaderUrl({ urlPrefix, ...options });\n      allUrls.push(shaderUrl);\n      shaderUrls.push(shaderUrl);\n    });\n    const jsFunctionBodiesUrls = [];\n    _iterateFunctionBodies(manifest, (options) => {\n      const jsFunctionBodyUrl = _jsFunctionBodyUrl({ urlPrefix, ...options });\n      allUrls.push(jsFunctionBodyUrl);\n      jsFunctionBodiesUrls.push(jsFunctionBodyUrl);\n    });\n    let count = 0;\n    const jsonPayloadsCount = allUrls.length - (shaderUrls.length + jsFunctionBodiesUrls.length);\n    const total = allUrls.length;\n    function _incrementCount() {\n      count++;\n      const ratio = count / total;\n      const progressRatio = PROGRESS_RATIO.sceneData;\n      const progress = progressRatio.start + progressRatio.mult * ratio;\n      if (importData.onProgress) {\n        importData.onProgress(progress);\n      }\n      PolyEventsDispatcher.dispatchProgressEvent(progress, importData.sceneName);\n    }\n    const sanitizedUrls = allUrls.map((url) => sanitizeUrl(url));\n    const promises = sanitizedUrls.map((url) => fetch(url));\n    const responses = await Promise.all(promises);\n    const jsonResponses = responses.slice(0, jsonPayloadsCount);\n    const textResponses = responses.slice(jsonPayloadsCount);\n    const results = await Promise.all([\n      ...jsonResponses.map((response) => {\n        _incrementCount();\n        return response.json();\n      }),\n      ...textResponses.map((response) => {\n        _incrementCount();\n        return response.text();\n      })\n    ]);\n    const jsons = results.slice(0, jsonPayloadsCount);\n    const texts = results.slice(jsonPayloadsCount);\n    let textIndex = 0;\n    const shadersData = {};\n    _iterateShaders(manifest, (options) => {\n      const text = texts[textIndex];\n      const { nodePath, shaderName } = options;\n      shadersData[nodePath] = shadersData[nodePath] || {};\n      shadersData[nodePath][shaderName] = text;\n      textIndex++;\n    });\n    const jsFunctionBodiesData = {};\n    _iterateFunctionBodies(manifest, (options) => {\n      const text = texts[textIndex];\n      const { nodePath } = options;\n      jsFunctionBodiesData[nodePath] = text;\n      textIndex++;\n    });\n    const assembleData = {\n      root: jsons[0],\n      properties: jsons[1],\n      shaders: shadersData,\n      jsFunctionBodies: jsFunctionBodiesData\n    };\n    let responseOffset = 2;\n    if (importData.editorMode) {\n      assembleData[\"ui\"] = jsons[2];\n      responseOffset += 1;\n    }\n    const jsonByName = {};\n    const manifestNodes = Object.keys(manifest.nodes);\n    for (let i = 0; i < manifestNodes.length; i++) {\n      const manifestName = manifestNodes[i];\n      const json = jsons[i + responseOffset];\n      jsonByName[manifestName] = json;\n    }\n    return this.assemble(assembleData, manifestNodes, jsonByName);\n  }\n  static async assemble(assembleData, manifestNodes, jsonByName) {\n    const sceneData = {\n      root: assembleData.root,\n      properties: assembleData.properties,\n      ui: assembleData.ui,\n      shaders: assembleData.shaders,\n      jsFunctionBodies: assembleData.jsFunctionBodies\n    };\n    for (let i = 0; i < manifestNodes.length; i++) {\n      const manifestName = manifestNodes[i];\n      const json = jsonByName[manifestName];\n      this._insertChildData(sceneData.root, manifestName, json);\n    }\n    return sceneData;\n  }\n  static _insertChildData(data, path, json) {\n    const elements = path.split(\"/\");\n    if (elements.length == 1) {\n      if (!data.nodes) {\n        data.nodes = {};\n      }\n      data.nodes[path] = json;\n    } else {\n      const parentName = elements.shift();\n      const pathWithoutParent = elements.join(\"/\");\n      const parentData = data.nodes[parentName];\n      this._insertChildData(parentData, pathWithoutParent, json);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
