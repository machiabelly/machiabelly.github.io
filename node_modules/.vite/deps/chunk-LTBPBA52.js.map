{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/nodes/utils/BasePersistedConfig.js"],
  "sourcesContent": ["\"use strict\";\nimport { Texture } from \"three\";\nimport { Matrix3 } from \"three\";\nimport { MaterialLoader } from \"three\";\nimport { Material } from \"three\";\nimport { ShaderMaterial } from \"three\";\nimport { MaterialUserDataUniforms, OnBeforeCompileDataHandler } from \"../gl/code/assemblers/materials/OnBeforeCompile\";\nimport { MeshDepthMaterial } from \"three\";\nimport {\n  ShadowMaterial,\n  SpriteMaterial,\n  RawShaderMaterial,\n  PointsMaterial,\n  MeshPhysicalMaterial,\n  MeshStandardMaterial,\n  MeshPhongMaterial,\n  MeshToonMaterial,\n  MeshNormalMaterial,\n  MeshLambertMaterial,\n  MeshDistanceMaterial,\n  MeshBasicMaterial,\n  MeshMatcapMaterial,\n  LineDashedMaterial,\n  LineBasicMaterial\n} from \"three\";\nfunction MonkeyPatchMaterial() {\n  const materialLib = {\n    ShadowMaterial,\n    SpriteMaterial,\n    RawShaderMaterial,\n    ShaderMaterial,\n    PointsMaterial,\n    MeshPhysicalMaterial,\n    MeshStandardMaterial,\n    MeshPhongMaterial,\n    MeshToonMaterial,\n    MeshNormalMaterial,\n    MeshLambertMaterial,\n    MeshDepthMaterial,\n    MeshDistanceMaterial,\n    MeshBasicMaterial,\n    MeshMatcapMaterial,\n    LineDashedMaterial,\n    LineBasicMaterial,\n    Material\n  };\n  Material.fromType = function(type) {\n    return new materialLib[type]();\n  };\n}\nconst ENTRY_NAMES_TO_REMOVE = /* @__PURE__ */ new Set([\"shaders\", \"functionBody\"]);\nexport class BasePersistedConfig {\n  constructor(node) {\n    this.node = node;\n  }\n  load(data) {\n  }\n  async toDataWithoutShaders() {\n    const data = await this.toData();\n    if (!data) {\n      return;\n    }\n    const dataWithoutShaders = {};\n    const entryNames = Object.keys(data);\n    for (const entryName of entryNames) {\n      if (!ENTRY_NAMES_TO_REMOVE.has(entryName)) {\n        dataWithoutShaders[entryName] = data[entryName];\n      }\n    }\n    return dataWithoutShaders;\n  }\n  //\n  //\n  // SAVE MAT\n  //\n  //\n  _materialToJson(material, options) {\n    let material_data = void 0;\n    this._withPreparedMaterial(material, () => {\n      try {\n        material_data = material.toJSON({});\n        if (material_data) {\n          const depthPacking = material.depthPacking;\n          material_data.depthPacking = depthPacking;\n        }\n      } catch (err) {\n        console.error(\"failed to save material data\");\n        console.log(material);\n        console.log(err);\n      }\n      if (material_data && material.lights != null) {\n        material_data.lights = material.lights;\n      }\n      if (material_data) {\n        material_data.uuid = `${options.node.path()}-${options.suffix}`;\n      }\n    });\n    return material_data;\n  }\n  _withPreparedMaterial(material, callback) {\n    this._withUnassignedUniformTextures(material, () => {\n      this._withUnassignedBasePropertyTextures(material, () => {\n        this._withUnassignedOnBeforeCompileData(material, () => {\n          callback();\n        });\n      });\n    });\n  }\n  _withUnassignedOnBeforeCompileData(material, callback) {\n    const uniforms = MaterialUserDataUniforms.removeUniforms(material);\n    const onBeforeCompileData = OnBeforeCompileDataHandler.removeData(material);\n    callback();\n    if (uniforms) {\n      MaterialUserDataUniforms.setUniforms(material, uniforms);\n    }\n    if (onBeforeCompileData) {\n      OnBeforeCompileDataHandler.setData(material, onBeforeCompileData);\n    }\n  }\n  _withUnassignedUniformTextures(material, callback) {\n    const textureByUniformName = /* @__PURE__ */ new Map();\n    const uniforms = material.uniforms;\n    if (uniforms) {\n      const uniformNames = Object.keys(uniforms);\n      for (const uniformName of uniformNames) {\n        const value = uniforms[uniformName].value;\n        if (value && value.uuid) {\n          const texture = value;\n          textureByUniformName.set(uniformName, texture);\n          uniforms[uniformName].value = null;\n        }\n      }\n    }\n    callback();\n    if (uniforms) {\n      textureByUniformName.forEach((texture, uniformName) => {\n        uniforms[uniformName].value = texture;\n      });\n    }\n  }\n  _withUnassignedBasePropertyTextures(material, callback) {\n    const textureByPropertyName = /* @__PURE__ */ new Map();\n    const propertyNames = Object.keys(material);\n    for (const propertyName of propertyNames) {\n      const value = material[propertyName];\n      if (value && value.uuid && value instanceof Texture) {\n        textureByPropertyName.set(propertyName, value);\n        material[propertyName] = null;\n      }\n    }\n    callback();\n    textureByPropertyName.forEach((texture, uniformName) => {\n      material[uniformName] = texture;\n    });\n  }\n  //\n  //\n  // LOAD MAT\n  //\n  //\n  _loadMaterial(data) {\n    data.color = void 0;\n    const loader = new MaterialLoader();\n    MonkeyPatchMaterial();\n    const material = loader.parse(data);\n    if (data.depthPacking) {\n      material.depthPacking = data.depthPacking;\n    }\n    if (data.lights != null) {\n      material.lights = data.lights;\n    }\n    const uniforms = material.uniforms;\n    if (uniforms) {\n      const uv2Transform = uniforms.uv2Transform;\n      if (uv2Transform) {\n        this.mat4ToMat3(uv2Transform);\n      }\n      const uvTransform = uniforms.uvTransform;\n      if (uvTransform) {\n        this.mat4ToMat3(uvTransform);\n      }\n    }\n    return material;\n  }\n  mat4ToMat3(uniform) {\n    const mat4 = uniform.value;\n    const last_element = mat4.elements[mat4.elements.length - 1];\n    if (last_element == null) {\n      const mat3 = new Matrix3();\n      for (let i = 0; i < mat3.elements.length; i++) {\n        mat3.elements[i] = mat4.elements[i];\n      }\n      uniform.value = mat3;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
