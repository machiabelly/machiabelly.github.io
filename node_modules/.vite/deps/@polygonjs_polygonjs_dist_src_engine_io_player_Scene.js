import {
  RootLoadProgressController,
  SceneJsonImporter
} from "./chunk-HHVLJK6G.js";
import "./chunk-CHIZUGOH.js";
import {
  TimeController
} from "./chunk-DSYQHAWE.js";
import "./chunk-SY7VELMA.js";
import "./chunk-VPW6KKKV.js";
import {
  PROGRESS_RATIO,
  PolyEventsDispatcher
} from "./chunk-FUBABOMT.js";
import {
  PolyEventName
} from "./chunk-3T7UEVUR.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-FUAFRKQ7.js";
import "./chunk-RVFV2LA3.js";
import "./chunk-O564GFGZ.js";
import "./chunk-RG42JQG3.js";
import {
  CoreType
} from "./chunk-6OBTIB4K.js";
import "./chunk-PQDBXNT6.js";
import "./chunk-UXIASGQL.js";

// node_modules/@polygonjs/polygonjs/dist/src/engine/io/player/Scene.js
var ScenePlayerImporter = class _ScenePlayerImporter {
  // private _cameraCreatorNode: BaseNodeType | null = null;
  constructor(options) {
    this.options = options;
    this._onLoadCompleteCalled = false;
    this._progress = 0;
    this._viewerMarkedAsReady = false;
    this._sceneMarkedAsReady = false;
    this._debug2("new ScenePlayerImporter", options);
  }
  static async loadSceneData(options) {
    const scenePlayerImporter = new _ScenePlayerImporter(options);
    const scene = await scenePlayerImporter.loadScene(options.serializers);
    return {
      scene,
      viewer: scenePlayerImporter._viewer
    };
  }
  async _onLoadComplete(scene) {
    if (this._onLoadCompleteCalled == true) {
      return;
    }
    this._onLoadCompleteCalled = true;
    if (this._viewer) {
      this._markViewerAsReady(this._viewer);
    }
    await this._markSceneAsReady(scene);
  }
  _markViewerAsReady(viewer) {
    if (this._viewerMarkedAsReady) {
      return;
    }
    this._viewerMarkedAsReady = true;
    viewer.markAsReady();
    this._dispatchEvent(PolyEventName.VIEWER_READY);
  }
  async _markSceneAsReady(scene) {
    if (this._sceneMarkedAsReady) {
      return;
    }
    this._sceneMarkedAsReady = true;
    await scene.cookController.waitForCooksCompleted();
    scene.setFrame(TimeController.START_FRAME);
    if (this.options.autoPlay != false) {
      scene.play();
    }
    scene.loadingController.dispatchReadyEvent();
    this._dispatchEvent(PolyEventName.SCENE_READY);
  }
  _onNodesCookProgress(nodesCookProgress, args) {
    const progressRatio = PROGRESS_RATIO.nodes;
    const onProgress = (_ratio, args2) => {
      var _a;
      const progress = progressRatio.start + progressRatio.mult * _ratio;
      this._progress = progress;
      if (this.options.onProgress) {
        this.options.onProgress(progress, args2);
      }
      PolyEventsDispatcher.dispatchProgressEvent(progress, (_a = this._scene) == null ? void 0 : _a.name());
    };
    onProgress(nodesCookProgress, args);
    if (nodesCookProgress >= 1) {
      this._onLoadComplete(args.scene);
    }
  }
  async _watchNodesProgress(scene) {
    scene.root().loadProgress.watchNodesProgress((nodesCookProgress, args) => {
      this._onNodesCookProgress(nodesCookProgress, args);
    });
  }
  async loadScene(options) {
    const createSceneAndWaitForCameraCreatorNode = () => {
      return new Promise(async (resolve) => {
        const configureScene = this.options.configureScene;
        const importer = new SceneJsonImporter(this.options.sceneData, {
          sceneName: this.options.sceneName,
          configureScene,
          nodeCookWatcher: (scene3) => {
            this._watchNodesProgress(scene3);
          }
        });
        const scene2 = importer.scene(options);
        scene2.timeController.forbidPlayUntilAllNodesCooked();
        this._scene = scene2;
        this._dispatchEvent(PolyEventName.SCENE_CREATED);
        if (this.options.renderer) {
          scene2.renderersRegister.registerRenderer(this.options.renderer);
        }
        const onCameraUpdated = async () => {
          const camera = await scene2.camerasController.mainCamera({
            findAnyCamera: false,
            printCameraNotFoundError: this._progress >= 1,
            // we display a warning if progress is 1
            cameraMaskOverride: this.options.cameraMaskOverride
          });
          this._debug2("scene.camerasController:", {
            camera,
            cameraPath: scene2.root().mainCameraController.rawCameraPath()
          });
          if (camera) {
            if (this._onCameraCreatorNodeLoadedResolve) {
              this._onCameraCreatorNodeLoadedResolve();
            }
          }
        };
        this._onCameraCreatorNodeLoadedResolve = () => {
          scene2.camerasController.removeOnCameraObjectsUpdated(onCameraUpdated);
          resolve(scene2);
        };
        scene2.camerasController.onCameraObjectsUpdated(onCameraUpdated);
      });
    };
    this._scene = await createSceneAndWaitForCameraCreatorNode();
    const scene = this._scene;
    const createViewer = async () => {
      const domElement = this._domElement();
      let createViewer2 = false;
      if (this.options.createViewer != null) {
        createViewer2 = this.options.createViewer;
      }
      if (domElement || createViewer2) {
        this._viewer = await scene.camerasController.createMainViewer({
          autoRender: false,
          renderer: this.options.renderer,
          cameraMaskOverride: this.options.cameraMaskOverride
        });
        if (this._viewer) {
          if (domElement) {
            this._viewer.mount(domElement);
          }
          if (this._sceneMarkedAsReady == true) {
            this._markViewerAsReady(this._viewer);
          }
          this._dispatchEvent(PolyEventName.VIEWER_MOUNTED);
        }
      }
    };
    await createViewer();
    return scene;
  }
  _domElement() {
    const domElement = this.options.domElement;
    if (domElement) {
      if (CoreType.isString(domElement)) {
        const element = document.getElementById(domElement);
        if (element) {
          return element;
        }
      } else {
        return domElement;
      }
    }
  }
  _dispatchEvent(eventName) {
    this._debug2("_dispatchEvent", { eventName, scene: this._scene, viewer: this._viewer });
    const elements = [this._domElement(), document];
    if (!this._scene) {
      console.warn(`no event emitted as no scene preset`);
      return;
    }
    const detail = {
      scene: this._scene,
      viewer: this._viewer
    };
    const createEvent = (customEventName) => {
      return new CustomEvent(customEventName, {
        detail
      });
    };
    for (let element of elements) {
      if (element) {
        element.dispatchEvent(createEvent(eventName));
        if (this._scene) {
          element.dispatchEvent(createEvent(`${eventName}-${this._scene.name()}`));
        }
      }
    }
  }
  _debug(arg0) {
    _ScenePlayerImporter._debug(arg0);
  }
  _debug2(arg0, arg1) {
    _ScenePlayerImporter._debug2(arg0, arg1);
  }
  static _debug(arg0) {
    RootLoadProgressController.debug(arg0);
  }
  static _debug2(arg0, arg1) {
    RootLoadProgressController.debug2(arg0, arg1);
  }
};
export {
  ScenePlayerImporter
};
//# sourceMappingURL=@polygonjs_polygonjs_dist_src_engine_io_player_Scene.js.map
