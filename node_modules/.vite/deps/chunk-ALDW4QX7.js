import {
  TypedNode,
  coreObjectClassFactory
} from "./chunk-FUAFRKQ7.js";
import {
  CoreType,
  WebGLRenderer
} from "./chunk-6OBTIB4K.js";
import {
  CameraSopNodeType,
  NetworkNodeType,
  NodeContext
} from "./chunk-PQDBXNT6.js";

// node_modules/@polygonjs/polygonjs/dist/src/core/camera/CoreCamera.js
var CORE_CAMERA_DEFAULT = {
  near: 0.1,
  far: 100
};
var CameraAttribute = ((CameraAttribute2) => {
  CameraAttribute2["NODE_ID"] = "_Camera_nodeGeneratorId__";
  CameraAttribute2["CONTROLS_NODE_ID"] = "_Camera_controlsNodeId";
  CameraAttribute2["CSS_RENDERER_NODE_ID"] = "_Camera_CSSRendererNodeId";
  CameraAttribute2["FRAME_MODE"] = "_Camera_frameMode";
  CameraAttribute2["FRAME_MODE_EXPECTED_ASPECT_RATIO"] = "_Camera_frameModeExpectedAspectRatio";
  CameraAttribute2["MAX_FPS"] = "maxFPS";
  CameraAttribute2["MAX_FPS_DYNAMIC_CHANGE"] = "_Camera_maxFPSDynamicChange";
  CameraAttribute2["VIEW_OFFSET_MIN"] = "_Camera_viewOffsetMin";
  CameraAttribute2["VIEW_OFFSET_MAX"] = "_Camera_viewOffsetMax";
  CameraAttribute2["POST_PROCESS_NODE_ID"] = "_Camera_postProcessNodeId";
  CameraAttribute2["RENDER_SCENE_NODE_ID"] = "_Camera_renderSceneNodeId";
  CameraAttribute2["RENDERER_NODE_ID"] = "_Camera_rendererNodeId";
  CameraAttribute2["VIEWER_ID"] = "_Camera_viewerId";
  CameraAttribute2["VIEWER_HTML"] = "_Camera_viewerHTML";
  CameraAttribute2["WEBXR_AR"] = "_Camera_WebXR_AR";
  CameraAttribute2["WEBXR_VR"] = "_Camera_WebXR_VR";
  CameraAttribute2["WEBXR_AR_FEATURES_OPTIONAL"] = "_Camera_WebXR_AR_Features_Optional";
  CameraAttribute2["WEBXR_AR_FEATURES_REQUIRED"] = "_Camera_WebXR_AR_Features_Required";
  CameraAttribute2["WEBXR_AR_OVERRIDE_REFERENCE_SPACE_TYPE"] = "_Camera_WebXR_AR_overrideReferenceSpaceType";
  CameraAttribute2["WEBXR_AR_REFERENCE_SPACE_TYPE"] = "_Camera_WebXR_AR_referenceSpaceType";
  CameraAttribute2["WEBXR_VR_FEATURES_OPTIONAL"] = "_Camera_WebXR_VR_Features_Optional";
  CameraAttribute2["WEBXR_VR_FEATURES_REQUIRED"] = "_Camera_WebXR_VR_Features_Required";
  CameraAttribute2["WEBXR_VR_OVERRIDE_REFERENCE_SPACE_TYPE"] = "_Camera_WebXR_VR_overrideReferenceSpaceType";
  CameraAttribute2["WEBXR_VR_REFERENCE_SPACE_TYPE"] = "_Camera_WebXR_VR_referenceSpaceType";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING"] = "_Camera_WebXR_AR_markerTracking";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING_SOURCE_MODE"] = "_Camera_WebXR_AR_markerTracking_sourceMode";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING_SOURCE_URL"] = "_Camera_WebXR_AR_markerTracking_sourceUrl";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING_BAR_CODE_TYPE"] = "_Camera_WebXR_AR_markerTracking_barCodeType";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING_BAR_CODE_VALUE"] = "_Camera_WebXR_AR_markerTracking_barCodeValue";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING_TRANSFORM_MODE"] = "_Camera_WebXR_AR_markerTracking_transformMode";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING_SMOOTH"] = "_Camera_WebXR_AR_markerTracking_smooth";
  CameraAttribute2["WEBXR_AR_MARKER_TRACKING_SMOOTH_COUNT"] = "_Camera_WebXR_AR_markerTracking_smoothCount";
  return CameraAttribute2;
})(CameraAttribute || {});
var PerspectiveCameraAttribute = ((PerspectiveCameraAttribute2) => {
  PerspectiveCameraAttribute2["FOV"] = "_PerspectiveCamera_fov";
  return PerspectiveCameraAttribute2;
})(PerspectiveCameraAttribute || {});
var OrthographicCameraAttribute = ((OrthographicCameraAttribute2) => {
  OrthographicCameraAttribute2["SIZE"] = "_OrthographicCamera_size";
  return OrthographicCameraAttribute2;
})(OrthographicCameraAttribute || {});

// node_modules/@polygonjs/polygonjs/dist/src/core/camera/CoreCameraPostProcessController.js
var CoreCameraPostProcessController = class {
  static isPostProcessNetworkNode(node) {
    return node.type() == NetworkNodeType.POST || node.context() == NodeContext.SOP && node.type() == CameraSopNodeType.POST_PROCESS;
  }
  static createComposer(options) {
    const { renderer, scene, renderScene, camera, viewer } = options;
    let postProcessNode;
    const postProcessNodeId = coreObjectClassFactory(camera).attribValue(
      camera,
      CameraAttribute.POST_PROCESS_NODE_ID
    );
    if (postProcessNodeId && CoreType.isNumber(postProcessNodeId)) {
      const foundNode = scene.graph.nodeFromId(postProcessNodeId);
      if (foundNode && foundNode instanceof TypedNode && this.isPostProcessNetworkNode(foundNode)) {
        postProcessNode = foundNode;
      }
    }
    if (!postProcessNode) {
      return;
    }
    if (!(renderer instanceof WebGLRenderer)) {
      return;
    }
    return postProcessNode.effectsComposerController.createEffectsComposerAndBuildPasses({
      renderer,
      scene: renderScene,
      camera,
      viewer
      // resolution,
      // requester: this.node,
      // render_target: render_target,
      // prepend_render_pass: this.node.pv.prepend_render_pass,
    });
  }
  // private _clear_render_passes(composer: EffectComposer) {
  // 	let render_pass: Pass | undefined;
  // 	while ((render_pass = composer.passes.pop())) {
  // 		if (render_pass) {
  // 			const disposable_pass: DisposablePass = render_pass as DisposablePass;
  // 			if (typeof disposable_pass.dispose === 'function') {
  // 				try {
  // 					disposable_pass.dispose();
  // 				} catch (e) {
  // 					console.warn(e);
  // 				}
  // 			}
  // 		}
  // 	}
  // }
};

export {
  CORE_CAMERA_DEFAULT,
  CameraAttribute,
  OrthographicCameraAttribute,
  CoreCameraPostProcessController
};
//# sourceMappingURL=chunk-ALDW4QX7.js.map
