{
  "version": 3,
  "sources": ["../../@polygonjs/polygonjs/dist/src/engine/nodes/mat/utils/ColorsController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/mat/utils/FlatShadingController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/mat/utils/WireframeController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/mat/utils/FogController.js", "../../@polygonjs/polygonjs/dist/src/engine/nodes/mat/MeshStandard.js"],
  "sourcesContent": ["\"use strict\";\nimport { BaseController } from \"./_BaseController\";\nimport { TypedMatNode } from \"../_Base\";\nimport { NodeParamsConfig, ParamConfig } from \"../../utils/params/ParamsConfig\";\nimport { isBooleanTrue } from \"../../../../core/BooleanValue\";\nimport { ColorConversion } from \"../../../../core/Color\";\nimport { Color } from \"three\";\nexport function ColorParamConfig(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      /** @param material color */\n      this.color = ParamConfig.COLOR([1, 1, 1], {\n        // conversion: ColorConversion.SRGB_TO_LINEAR,\n      });\n      /** @param defines if the color attribute on the geometry is used */\n      this.useVertexColors = ParamConfig.BOOLEAN(0, { separatorAfter: true });\n      /** @param sets the material to transparent */\n      this.transparent = ParamConfig.BOOLEAN(0);\n      /** @param sets the material opacity */\n      this.opacity = ParamConfig.FLOAT(1);\n      /** @param sets the min alpha below which the material is invisible */\n      this.alphaTest = ParamConfig.FLOAT(0);\n    }\n  };\n}\nexport function isValidColoredMaterial(material) {\n  if (!material) {\n    return false;\n  }\n  return material.color != null;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {\n}\nclass ColoredMatNode extends TypedMatNode {\n  async material() {\n    const container = await this.compute();\n    return container.material();\n  }\n}\nconst _tmpColor = new Color();\nconst _tmpColorArray = [0, 0, 0];\nexport class ColorsController extends BaseController {\n  constructor(node) {\n    super(node);\n    this.node = node;\n  }\n  static async update(node) {\n    const container = await node.compute();\n    const material = container.material();\n    if (!isValidColoredMaterial(material)) {\n      return;\n    }\n    node.controllers.colors.updateMaterial(material);\n  }\n  updateMaterial(material) {\n    const pv = this.node.pv;\n    material.color.copy(pv.color);\n    const newVertexColor = isBooleanTrue(pv.useVertexColors);\n    if (newVertexColor != material.vertexColors) {\n      material.vertexColors = newVertexColor;\n      material.needsUpdate = true;\n    }\n    material.opacity = pv.opacity;\n    material.transparent = pv.transparent;\n    material.alphaTest = pv.alphaTest;\n  }\n  setParamsFromMaterial(material, record) {\n    const p = this.node.p;\n    _tmpColor.copy(material.color).toArray(_tmpColorArray);\n    p.color.set(_tmpColorArray);\n    p.color.setConversion(ColorConversion.NONE);\n    p.useVertexColors.set(material.vertexColors);\n    p.opacity.set(material.opacity);\n    p.transparent.set(material.transparent);\n    p.alphaTest.set(material.alphaTest);\n  }\n}\n", "\"use strict\";\nimport { TypedMatNode } from \"../_Base\";\nimport { BaseController } from \"./_BaseController\";\nimport { NodeParamsConfig, ParamConfig } from \"../../utils/params/ParamsConfig\";\nexport function FlatShadingParamConfig(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      /** @param defines if the material is flat shaded */\n      this.flatShading = ParamConfig.BOOLEAN(0, {\n        separatorAfter: true\n      });\n    }\n  };\n}\nclass FlatShadingParamsConfig extends FlatShadingParamConfig(NodeParamsConfig) {\n}\nfunction _isValidMaterial(material) {\n  if (!material) {\n    return false;\n  }\n  return material.flatShading != null;\n}\nclass FlatShadingMapMatNode extends TypedMatNode {\n  async material() {\n    const container = await this.compute();\n    return container.material();\n  }\n}\nexport class FlatShadingController extends BaseController {\n  constructor(node) {\n    super(node);\n    this.node = node;\n  }\n  static async update(node) {\n    const material = await node.material();\n    if (!_isValidMaterial(material)) {\n      return;\n    }\n    node.controllers.flatShading.updateMaterial(material);\n  }\n  updateMaterial(material) {\n    material.flatShading = this.node.pv.flatShading;\n  }\n  setParamsFromMaterial(material, record) {\n    this.node.p.flatShading.set(material.flatShading);\n  }\n}\n", "\"use strict\";\nimport { BaseController } from \"./_BaseController\";\nimport { TypedMatNode } from \"../_Base\";\nimport { NodeParamsConfig, ParamConfig } from \"../../utils/params/ParamsConfig\";\nimport { isBooleanTrue } from \"../../../../core/BooleanValue\";\nvar LineCapType = /* @__PURE__ */ ((LineCapType2) => {\n  LineCapType2[\"ROUND\"] = \"round\";\n  LineCapType2[\"BUTT\"] = \"butt\";\n  LineCapType2[\"SQUARE\"] = \"square\";\n  return LineCapType2;\n})(LineCapType || {});\nconst LINE_CAP_TYPES = [\"round\" /* ROUND */, \"butt\" /* BUTT */, \"square\" /* SQUARE */];\nvar LineJoinType = /* @__PURE__ */ ((LineJoinType2) => {\n  LineJoinType2[\"ROUND\"] = \"round\";\n  LineJoinType2[\"BEVEL\"] = \"bevel\";\n  LineJoinType2[\"MITER\"] = \"miter\";\n  return LineJoinType2;\n})(LineJoinType || {});\nconst LINE_JOIN_TYPES = [\"round\" /* ROUND */, \"bevel\" /* BEVEL */, \"miter\" /* MITER */];\nexport function WireframeParamConfig(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      /** @param toggle on to set material to wireframe */\n      this.wireframe = ParamConfig.BOOLEAN(0, { separatorBefore: true });\n      /** @param wireframe line width */\n      this.wireframeLinewidth = ParamConfig.FLOAT(1, {\n        range: [0, 5],\n        rangeLocked: [true, false],\n        visibleIf: { wireframe: 1 }\n      });\n      /** @param define appearance of line ends */\n      this.wireframeLinecap = ParamConfig.INTEGER(0, {\n        menu: {\n          entries: LINE_CAP_TYPES.map((name, value) => {\n            return { name, value };\n          })\n        },\n        visibleIf: { wireframe: 1 }\n      });\n      /** @param Define appearance of line joints */\n      this.wireframeLinejoin = ParamConfig.INTEGER(0, {\n        menu: {\n          entries: LINE_JOIN_TYPES.map((name, value) => {\n            return { name, value };\n          })\n        },\n        visibleIf: { wireframe: 1 },\n        separatorAfter: true\n      });\n    }\n  };\n}\nfunction isValidWireframeMaterial(material) {\n  if (!material) {\n    return false;\n  }\n  return material.wireframe != null;\n}\nclass WireframeParamsConfig extends WireframeParamConfig(NodeParamsConfig) {\n}\nclass WireframedMatNode extends TypedMatNode {\n  async material() {\n    const container = await this.compute();\n    return container.material();\n  }\n}\nexport class WireframeController extends BaseController {\n  constructor(node) {\n    super(node);\n    this.node = node;\n  }\n  static async update(node) {\n    const material = await node.material();\n    if (!isValidWireframeMaterial(material)) {\n      return;\n    }\n    node.controllers.wireframe.updateMaterial(material);\n  }\n  updateMaterial(material) {\n    const pv = this.node.pv;\n    material.wireframe = isBooleanTrue(pv.wireframe);\n    material.wireframeLinewidth = pv.wireframeLinewidth;\n    material.wireframeLinecap = LINE_CAP_TYPES[pv.wireframeLinecap];\n    material.wireframeLinejoin = LINE_JOIN_TYPES[pv.wireframeLinejoin];\n    material.needsUpdate = true;\n  }\n  getTextures(material, record) {\n  }\n  setParamsFromMaterial(material, record) {\n    this.node.p.wireframe.set(material.wireframe);\n    this.node.p.wireframeLinewidth.set(material.wireframeLinewidth);\n    this.node.p.wireframeLinecap.set(LINE_CAP_TYPES.indexOf(material.wireframeLinecap));\n    this.node.p.wireframeLinejoin.set(LINE_JOIN_TYPES.indexOf(material.wireframeLinejoin));\n  }\n}\n", "\"use strict\";\nimport { BaseController } from \"./_BaseController\";\nimport { TypedMatNode } from \"../_Base\";\nimport { NodeParamsConfig, ParamConfig } from \"../../utils/params/ParamsConfig\";\nimport { isBooleanTrue } from \"../../../../core/BooleanValue\";\nexport function FogParamConfig(Base) {\n  return class Mixin extends Base {\n    constructor() {\n      super(...arguments);\n      /** @param toggle on if you have a fog in the scene and the material should be affected by it */\n      this.useFog = ParamConfig.BOOLEAN(0);\n    }\n  };\n}\nexport function isValidMaterial(material) {\n  if (!material) {\n    return false;\n  }\n  return material.fog != null;\n}\nclass FogParamsConfig extends FogParamConfig(NodeParamsConfig) {\n}\nclass FogMatNode extends TypedMatNode {\n  async material() {\n    const container = await this.compute();\n    return container.material();\n  }\n}\nexport class FogController extends BaseController {\n  constructor(node) {\n    super(node);\n    this.node = node;\n  }\n  static async update(node) {\n    const container = await node.compute();\n    const material = container.material();\n    if (!isValidMaterial(material)) {\n      return;\n    }\n    node.controllers.fog.updateMaterial(material);\n  }\n  updateMaterial(material) {\n    const pv = this.node.pv;\n    material.fog = isBooleanTrue(pv.useFog);\n  }\n}\n", "\"use strict\";\nimport { MeshStandardMaterial } from \"three\";\nimport { FrontSide } from \"three\";\nimport { PrimitiveMatNode } from \"./_Base\";\nimport { NodeParamsConfig } from \"../utils/params/ParamsConfig\";\nimport { ColorsController, ColorParamConfig } from \"./utils/ColorsController\";\nimport {\n  AdvancedCommonController,\n  AdvancedCommonParamConfig\n} from \"./utils/AdvancedCommonController\";\nimport { TextureMapController, MapParamConfig } from \"./utils/TextureMapController\";\nimport {\n  TextureAlphaMapController,\n  AlphaMapParamConfig\n} from \"./utils/TextureAlphaMapController\";\nimport { TextureEnvMapController, EnvMapParamConfig } from \"./utils/TextureEnvMapController\";\nimport {\n  TextureBumpMapController,\n  BumpMapParamConfig\n} from \"./utils/TextureBumpMapController\";\nimport {\n  TextureNormalMapController,\n  NormalMapParamConfig\n} from \"./utils/TextureNormalMapController\";\nimport {\n  TextureEmissiveMapController,\n  EmissiveMapParamConfig\n} from \"./utils/TextureEmissiveMapController\";\nimport {\n  TextureMetalnessRoughnessMapController,\n  MetalnessRoughnessMapParamConfig\n} from \"./utils/TextureMetalnessRoughnessMapController\";\nimport {\n  TextureLightMapController,\n  LightMapParamConfig\n} from \"./utils/TextureLightMapController\";\nimport {\n  TextureDisplacementMapController,\n  DisplacementMapParamConfig\n} from \"./utils/TextureDisplacementMapController\";\nimport { FlatShadingController, FlatShadingParamConfig } from \"./utils/FlatShadingController\";\nimport { TextureAOMapController, AOMapParamConfig } from \"./utils/TextureAOMapController\";\nimport { WireframeController, WireframeParamConfig } from \"./utils/WireframeController\";\nimport { FogController, FogParamConfig } from \"./utils/FogController\";\nimport { DefaultFolderParamConfig } from \"./utils/DefaultFolder\";\nimport { TexturesFolderParamConfig } from \"./utils/TexturesFolder\";\nimport { AdvancedFolderParamConfig } from \"./utils/AdvancedFolder\";\nimport { MatType } from \"../../poly/registers/nodes/types/Mat\";\nclass MeshStandardMatParamsConfig extends FogParamConfig(\n  WireframeParamConfig(\n    AdvancedCommonParamConfig(\n      FlatShadingParamConfig(\n        /* advanced */\n        AdvancedFolderParamConfig(\n          MetalnessRoughnessMapParamConfig(\n            NormalMapParamConfig(\n              LightMapParamConfig(\n                EnvMapParamConfig(\n                  EmissiveMapParamConfig(\n                    DisplacementMapParamConfig(\n                      BumpMapParamConfig(\n                        AOMapParamConfig(\n                          AlphaMapParamConfig(\n                            MapParamConfig(\n                              /* textures */\n                              TexturesFolderParamConfig(\n                                ColorParamConfig(\n                                  DefaultFolderParamConfig(NodeParamsConfig)\n                                )\n                              )\n                            )\n                          )\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        )\n      )\n    )\n  )\n) {\n}\nconst ParamsConfig = new MeshStandardMatParamsConfig();\nexport class MeshStandardMatNode extends PrimitiveMatNode {\n  constructor() {\n    super(...arguments);\n    this.paramsConfig = ParamsConfig;\n    this.controllers = {\n      colors: new ColorsController(this),\n      advancedCommon: new AdvancedCommonController(this),\n      alphaMap: new TextureAlphaMapController(this),\n      aoMap: new TextureAOMapController(this),\n      bumpMap: new TextureBumpMapController(this),\n      displacementMap: new TextureDisplacementMapController(this),\n      emissiveMap: new TextureEmissiveMapController(this),\n      envMap: new TextureEnvMapController(this),\n      fog: new FogController(this),\n      flatShading: new FlatShadingController(this),\n      lightMap: new TextureLightMapController(this),\n      map: new TextureMapController(this),\n      metalnessRoughnessMap: new TextureMetalnessRoughnessMapController(this),\n      normalMap: new TextureNormalMapController(this),\n      wireframe: new WireframeController(this)\n    };\n    this.controllersList = Object.values(this.controllers);\n  }\n  static type() {\n    return MatType.MESH_STANDARD;\n  }\n  createMaterial() {\n    return new MeshStandardMaterial({\n      vertexColors: false,\n      side: FrontSide,\n      color: 16777215,\n      opacity: 1,\n      metalness: 1,\n      roughness: 0\n    });\n  }\n  async cook() {\n    this._material = this._material || this.createMaterial();\n    await Promise.all(this.controllersPromises(this._material));\n    this.setMaterial(this._material);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
